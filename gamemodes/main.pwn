
/*Includes*/
#include <a_samp>
#include <a_http>
#include <crashdetect>
#include <jit>
#include <streamer>
#include <sscanf2>
#include <Pawn.CMD>
#include <Pawn.Regex>
#include <foreach>
#include <FloodControl>
#include <YSI\y_timers>
#include <YSI_Coding\y_stringhash>
#include <YSI\y_areas>
// General
#include "LZR\GetTextures"
#include "LZR\Variables"
#include "LZR\Textdraws"
#include "LZR\Funtions"

#define  _LOG_ "SERVER/data/logs/"
//#include <a_mysql>

#define SQL_HOST "localhost"
#define SQL_USUARIO " "
#define SQL_CONTRA " "
#define SQL_DB " "
//new DatabaseMysql;
 
//#pragma dynamic 1500000
#define SERVER_VERSION	"3.2"
#define VERSION_DATE	"14/07/2019"

#define BUILD_VERSION	"38"
#define BUILD_DATE		"14/07/2019 10:12 a.m"

forward Float:GeTPosBBoya(playerid,boyaid);
forward Float:GetFloatCamionero(lasd);
forward Float:GetPosCasaFaccion(playerid,casacf);
forward Float:GetPosApartamento(playerid,Property);
forward Float:GetPosCasaVip(playerid,Property);
forward Float:GetPosGaraje(playerid,Garajeid);
forward Float:GetDDD(playerid,Property);
forward Float:GetActorID(apunto,actor_);
 
#define funcion%0(%1) forward%0(%1);public%0(%1)
#define PassengerCheck(%1) if(GetPlayerState(%1) == PLAYER_STATE_PASSENGER) return SendClientMessage(%1, -1, "* No se puede esta funcion, mientras que usted esta montando en un vehiculo como pasajero.")
//MODIFICAR SEGUN SLOTS DEL SERVIDOR
/*#undef MAX_PLAYERS
#define MAX_PLAYERS 100*/
native IsValidVehicle(vehicleid);
#define HOLDING(%0) \
	((newkeys & (%0)) == (%0))

/* Config */
#define SERVER_NAME			"La Zona"
#define SERVER_SHORT_NAME	"ST"
#define SERVER_HOSTNAME 	"La Zona Roleplay ~ Español ~ v 3.2"
#define SERVER_GAMEMODE		"Roleplay Rp Español"
#define SERVER_LANGUAGE		"Español / Spanish / Latino"
#define SERVER_WEBSITE		"https://discord.gg/tw7GRtK"//"www.facebook.com/La Zona-Roleplay-2126399550813608"
#define SERVER_COIN			"ZonCoins"

#define MAX_BAD_LOGIN_ATTEMPS 3	// maximos intentos de contraseñas erroneas
#define REP_MULTIPLIER 12	//12 rep * nivel para subir, si es nivel 1 necesita 12 rep para subir a nivel 2
#define TIME_FOR_REP 1500000 // 25 minutos para obtener reputacion
#define REP_FOR_PAYDAY 3	// payday cada 3 reputaciones
#define CMD_LOGGIN 1 // log de comandos

/* LIMITES JUGADOR */
	// Normal User
#define MAX_NU_VEHICLES		2
#define MAX_NU_PROPERTIES	1
#define MAX_NU_WORKS		1
#define MAX_NU_TOYS			3
#define MAX_NU_VOBJECTS		3
	// VIP
#define MAX_SU_VEHICLES		6
#define MAX_SU_PROPERTIES	4
#define MAX_SU_WORKS		3
#define MAX_SU_VOBJECTS		10

new /* Valores por defecto si no se puede cargar de ECO.txt */
	Float:MULTIPLIER_PROPERITES =	1.00,
	Float:MULTIPLIER_VEHICLES 	=	1.00,
	Float:MULTIPLIER_TOYS		=	1.00,
	Float:MULTIPLIER_SKINS		=	1.00,
	Float:MULTIPLIER_WEAPONS	=	1.00,
	SU_SD_PRICE					=	30,
	SU_WORK_EXTRA_PAY			=	300;
	
new DB:_DB_;
new DB:Database,
	Float:New_User_Pos[4] = {1587.8212,-1318.6857,17.5407,311.4153},
	SERVER_TIME[2], SERVER_WEATHER = 1,
	Mechanic_Area,
	Lumberjack_Area,
	Farmer_Area,
	Harvest_Area,
	Jail_Areas[3];

//==============================================================================
// Sistema de Paises
//==============================================================================
#define GeoIP_MainFile      "Pais.db"
#define GeoIP_CityFile      "Ciudad.db"

new DB:geoip_db;
new DB:geoip_city;
new DBResult:_result;
//==============================================================================

stock Float:GetDistanceBetweenPoints(Float:X, Float:Y, Float:Z, Float:PointX, Float:PointY, Float:PointZ)
{
	new Float:Distance;Distance = floatabs(floatsub(X, PointX)) + floatabs(floatsub(Y, PointY)) + floatabs(floatsub(Z, PointZ));
	return Distance;
}

//1773.307250, -1896.441040, 13.551166

#define PRESSED(%0) (((newkeys & (%0)) == (%0)) && ((oldkeys & (%0)) != (%0)))
#define RELEASED(%0) (((newkeys & (%0)) != (%0)) && ((oldkeys & (%0)) == (%0)))

/* Colores */
#define R  				"{B42020}"
#define W  				"{FFFFFF}"
#define COLOR_BLACK     0x000000FF
#define COLOR_FADE1 	0xE6E6E6E6
#define COLOR_FADE2 	0xC8C8C8C8
#define COLOR_FADE3 	0xAAAAAAAA
#define COLOR_FADE4 	0x8C8C8C8C
#define COLOR_FADE5 	0x6E6E6E6E
#define PLAYER_COLOR	0xCCCCCC00
#define SPECIAL_ACTION_PISSING 68

main()
{
	print("--- > "SERVER_NAME" < --- ");
}

enum
{
	CHEAT_WEAPON,
	CHEAT_AMMO,
	CHEAT_CAR_MOD,
	CHEAT_VEHICLE_SPEED_HACK,
	CHEAT_POS,
	CHEAT_TEXT_SPAMMER,
	CHEAT_COMMAND_SPAMMER,
	CHEAT_DEATH_SPAMMER,
	CHEAT_STATE_SPAMMER,
	CHEAT_VEHICLE_ENTER_SPAMMER,
	CHEAT_JETPACK,
	CHEAT_PLAYER_SPEED,
	CHEAT_PLAYER_HEALTH,
	CHEAT_PLAYER_ARMOUR,
	CHEAT_VEHICLE_HEALTH,
	CHEAT_PLAYER_VEHICLE_WORK, //Entra a un vehiculo que no es de su trabajo
	CHEAT_PLAYER_VEHICLE_DOORS,
	CHEAT_VEHICLE_NOFUEL,
	CHEAT_SPECTATE,
	CHEAT_UNDETECTED_WEAPON,
	CHEAT_DRIVE_BY,
	CHEAT_UNOCCUPIED_VEHICLE_TP,
	CHEAT_HIGH_POS,
	CHEAT_CAR_JACKING
};

enum e_ac_Info
{
	ac_Name[24],
	bool:ac_Enabled,
	bool:ac_Kick, // 1 = kickea, 0 = avisa a admins
	ac_Detections, //enviar aviso cuando llege a este num en los seg de abajo
	ac_Interval
};
new ac_Info[][e_ac_Info] = /* Valores por defecto si no se carga de AC.txt */
{
	{"armas",					true, true,		1, 0},
	{"municion",				true, true,		1, 0},
	{"mod car",					true, true,		1, 0},
	{"vehicle speed",			true, true,		1, 0},
	{"pos",						true, false,	3, 10},
	{"text spammer",			true, true,		10, 5},
	{"command spammer",			true, true,		5, 5},
	{"death spammer",			true, false,	1, 0},
	{"state change spammer",	true, false,	1, 0},
	{"vehicle enter spammer",	true, false,	1, 0},
	{"jetpack",					true, true,		1, 0},
	{"player speed",			true, true,		1, 0},
	{"player health",			true, true,		1, 0},
	{"player armour",			true, true,		1, 0},
	{"vehicle health",			true, true,		1, 0},
	{"pwork != vwork",			true, true,		1, 0},
	{"enter closed vehicle",	true, false,	1, 0},
	{"vehicle nofuel cs",		true, false,	50, 10},
	{"player spectate",			true, false,	1, 0},
	{"pweapon != sweapon",		true, false,	1, 0},
	{"drive by",				true, false,	1, 0},
	{"unoccupied veh tp",		true, true,		1, 0},
	{"high pos",				true, true,		1, 0},
	{"car jacking",				true, true,		1, 0}
};

enum e_PLAYER_AC_INFO
{
	p_ac_info_DETECTIONS,
	p_ac_info_LAST_DETECTION,
	p_ac_info_IMMUNITY //gettime + seconds
};
new PLAYER_AC_INFO[MAX_PLAYERS][sizeof(ac_Info)][e_PLAYER_AC_INFO];


enum
{
	TYPE_LEGAL,
	TYPE_ILLEGAL
};



//Dialogos
enum
{
	ROLEPLAY_STATE_NORMAL,
	ROLEPLAY_STATE_HOSPITAL,
	ROLEPLAY_STATE_INTERIOR,
	ROLEPLAY_STATE_OWN_PROPERTY,
	ROLEPLAY_STATE_GUEST_PROPERTY,
	ROLEPLAY_STATE_ARRESTED,
	ROLEPLAY_STATE_JAIL,
	ROLEPLAY_STATE_CRACK
};

enum
{
	GAME_STATE_NONE,
	GAME_STATE_CONNECTED,
	GAME_STATE_OCCUPIED,
	GAME_STATE_DEAD, // Pantalla de la muerte solo (wasted)
	GAME_STATE_NORMAL
};

#define MAX_TIMERS_PER_PLAYER 29

/* Timers
0 = Kick
1 = Gangzone daño Rojo
2 = Añadir reputacion
3 = un/freeze player
4 = recuperar vida
5 = restart hambre sed
6 = esperando llamada
7 = esperar arrancar veh
8 = speedo
9 = cargando camion
10 = reciclando
11 = talando
12 = plantando
13 = gps mapa
14 = esposar
15 = jail time
16 = health down
17 = msg td
18 = intro 
19 = anti cj
*/

#define LevelAdmin(%0,%1); \
	if(EsAdmin(%0) < %1 && ! IsPlayerAdmin(%0)) \
	    return 0;

/* TUNING SYSTEM */
#define TOTAL_TUNING_PARTS	14
#define MAX_TUNING_PARTS_COMPONENTS	20
enum PLAYER_TUNING_MENU_Info
{
	tuning_menu_NAME[24], // o part
	tuning_menu_ID,
	tuning_menu_PIECES
};
new PLAYER_TUNING_MENU[MAX_PLAYERS][MAX_TUNING_PARTS_COMPONENTS][PLAYER_TUNING_MENU_Info];

/* GLOBAL_VEHICLES */
#define MAX_VEHICLE_COMPONENTS	14
#define MIN_VEHICLE_HEALTH		350.0
forward Float:GetDistanceBetweenPoints3D(Float:x1, Float:y1, Float:z1, Float:x2, Float:y2, Float:z2);
forward Float:GetVehicleSpeed(vehicleid);
forward Float:frandom(Float:max, Float:min, dp);

new VEHICLE_COLORS[256] = //SA-MP Wiki
{
	// The existing colours from San Andreas
	0x000000FF, 0xF5F5F5FF, 0x2A77A1FF, 0x840410FF, 0x263739FF, 0x86446EFF, 0xD78E10FF, 0x4C75B7FF, 0xBDBEC6FF, 0x5E7072FF,
	0x46597AFF, 0x656A79FF, 0x5D7E8DFF, 0x58595AFF, 0xD6DAD6FF, 0x9CA1A3FF, 0x335F3FFF, 0x730E1AFF, 0x7B0A2AFF, 0x9F9D94FF,
	0x3B4E78FF, 0x732E3EFF, 0x691E3BFF, 0x96918CFF, 0x515459FF, 0x3F3E45FF, 0xA5A9A7FF, 0x635C5AFF, 0x3D4A68FF, 0x979592FF,
	0x421F21FF, 0x5F272BFF, 0x8494ABFF, 0x767B7CFF, 0x646464FF, 0x5A5752FF, 0x252527FF, 0x2D3A35FF, 0x93A396FF, 0x6D7A88FF,
	0x221918FF, 0x6F675FFF, 0x7C1C2AFF, 0x5F0A15FF, 0x193826FF, 0x5D1B20FF, 0x9D9872FF, 0x7A7560FF, 0x989586FF, 0xADB0B0FF,
	0x848988FF, 0x304F45FF, 0x4D6268FF, 0x162248FF, 0x272F4BFF, 0x7D6256FF, 0x9EA4ABFF, 0x9C8D71FF, 0x6D1822FF, 0x4E6881FF,
	0x9C9C98FF, 0x917347FF, 0x661C26FF, 0x949D9FFF, 0xA4A7A5FF, 0x8E8C46FF, 0x341A1EFF, 0x6A7A8CFF, 0xAAAD8EFF, 0xAB988FFF,
	0x851F2EFF, 0x6F8297FF, 0x585853FF, 0x9AA790FF, 0x601A23FF, 0x20202CFF, 0xA4A096FF, 0xAA9D84FF, 0x78222BFF, 0x0E316DFF,
	0x722A3FFF, 0x7B715EFF, 0x741D28FF, 0x1E2E32FF, 0x4D322FFF, 0x7C1B44FF, 0x2E5B20FF, 0x395A83FF, 0x6D2837FF, 0xA7A28FFF,
	0xAFB1B1FF, 0x364155FF, 0x6D6C6EFF, 0x0F6A89FF, 0x204B6BFF, 0x2B3E57FF, 0x9B9F9DFF, 0x6C8495FF, 0x4D8495FF, 0xAE9B7FFF,
	0x406C8FFF, 0x1F253BFF, 0xAB9276FF, 0x134573FF, 0x96816CFF, 0x64686AFF, 0x105082FF, 0xA19983FF, 0x385694FF, 0x525661FF,
	0x7F6956FF, 0x8C929AFF, 0x596E87FF, 0x473532FF, 0x44624FFF, 0x730A27FF, 0x223457FF, 0x640D1BFF, 0xA3ADC6FF, 0x695853FF,
	0x9B8B80FF, 0x620B1CFF, 0x5B5D5EFF, 0x624428FF, 0x731827FF, 0x1B376DFF, 0xEC6AAEFF, 0x000000FF,
	// SA-MP extended colours (0.3x)
	0x177517FF, 0x210606FF, 0x125478FF, 0x452A0DFF, 0x571E1EFF, 0x010701FF, 0x25225AFF, 0x2C89AAFF, 0x8A4DBDFF, 0x35963AFF,
	0xB7B7B7FF, 0x464C8DFF, 0x84888CFF, 0x817867FF, 0x817A26FF, 0x6A506FFF, 0x583E6FFF, 0x8CB972FF, 0x824F78FF, 0x6D276AFF,
	0x1E1D13FF, 0x1E1306FF, 0x1F2518FF, 0x2C4531FF, 0x1E4C99FF, 0x2E5F43FF, 0x1E9948FF, 0x1E9999FF, 0x999976FF, 0x7C8499FF,
	0x992E1EFF, 0x2C1E08FF, 0x142407FF, 0x993E4DFF, 0x1E4C99FF, 0x198181FF, 0x1A292AFF, 0x16616FFF, 0x1B6687FF, 0x6C3F99FF,
	0x481A0EFF, 0x7A7399FF, 0x746D99FF, 0x53387EFF, 0x222407FF, 0x3E190CFF, 0x46210EFF, 0x991E1EFF, 0x8D4C8DFF, 0x805B80FF,
	0x7B3E7EFF, 0x3C1737FF, 0x733517FF, 0x781818FF, 0x83341AFF, 0x8E2F1CFF, 0x7E3E53FF, 0x7C6D7CFF, 0x020C02FF, 0x072407FF,
	0x163012FF, 0x16301BFF, 0x642B4FFF, 0x368452FF, 0x999590FF, 0x818D96FF, 0x99991EFF, 0x7F994CFF, 0x839292FF, 0x788222FF,
	0x2B3C99FF, 0x3A3A0BFF, 0x8A794EFF, 0x0E1F49FF, 0x15371CFF, 0x15273AFF, 0x375775FF, 0x060820FF, 0x071326FF, 0x20394BFF,
	0x2C5089FF, 0x15426CFF, 0x103250FF, 0x241663FF, 0x692015FF, 0x8C8D94FF, 0x516013FF, 0x090F02FF, 0x8C573AFF, 0x52888EFF,
	0x995C52FF, 0x99581EFF, 0x993A63FF, 0x998F4EFF, 0x99311EFF, 0x0D1842FF, 0x521E1EFF, 0x42420DFF, 0x4C991EFF, 0x082A1DFF,
	0x96821DFF, 0x197F19FF, 0x3B141FFF, 0x745217FF, 0x893F8DFF, 0x7E1A6CFF, 0x0B370BFF, 0x27450DFF, 0x071F24FF, 0x784573FF,
	0x8A653AFF, 0x732617FF, 0x319490FF, 0x56941DFF, 0x59163DFF, 0x1B8A2FFF, 0x38160BFF, 0x041804FF, 0x355D8EFF, 0x2E3F5BFF,
	0x561A28FF, 0x4E0E27FF, 0x706C67FF, 0x3B3E42FF, 0x2E2D33FF, 0x7B7E7DFF, 0x4A4442FF, 0x28344EFF
};

new Float:HARVEST_CHECKPOINTS[][] =
{
	{-328.332305, -1546.391357, 16.15409},
	{-250.803207, -1553.425415, 4.534295},
	{-224.260910, -1485.022827, 8.041003},
	{-308.437896, -1476.776977, 11.40934},
	{-283.487731, -1553.320068, 7.445997},
	{-258.756164, -1426.692993, 9.493670},
	{-178.887649, -1406.682250, 3.996473},
	{-177.676818, -1322.970581, 6.885325},
	{-305.899322, -1318.196533, 10.12089},
	{-325.471008, -1412.821777, 15.12606},
	{-191.962982, -1384.020019, 6.075732},
	{-214.637603, -1321.270507, 10.79362},
	{-263.975738, -1375.987426, 11.41642},
	{-308.705474, -1424.302001, 15.52844},
	{-287.710388, -1497.158325, 8.503927},
	{-387.908111, -1532.118774, 23.47214}
};
enum
{
	VEHICLE_TYPE_NONE,
	VEHICLE_TYPE_TEST,
	VEHICLE_TYPE_SELL,
	VEHICLE_TYPE_PERSONAL,
	VEHICLE_TYPE_WORK,
	VEHICLE_TYPE_RENT,
	VEHICLE_TYPE_FACCION
};

enum
{
	VEHICLE_STATE_NORMAL,
	VEHICLE_STATE_DAMAGED
};

enum Global_Vehicles_Info
{
	bool:gb_vehicle_VALID,
	bool:gb_vehicle_OCCUPIED,
	gb_vehicle_TYPE,
	gb_vehicle_MODELID,
	gb_vehicle_NUMBER_PLATE[32],
	Float:gb_vehicle_POS[3],
	Float:gb_vehicle_SPAWN_X,
	Float:gb_vehicle_SPAWN_Y,
	Float:gb_vehicle_SPAWN_Z,
	Float:gb_vehicle_SPAWN_ANGLE,
	Float:gb_vehicle_HEALTH,
	gb_vehicle_DAMAGE_PANELS,
	gb_vehicle_DAMAGE_DOORS,
	gb_vehicle_DAMAGE_LIGHTS,
	gb_vehicle_DAMAGE_TIRES,
	gb_vehicle_COLOR_1,
	gb_vehicle_COLOR_2,
	gb_vehicle_PAINTJOB,
	Float:gb_vehicle_GAS,
	Float:gb_vehicle_MAX_GAS,
	Float:gb_vehicle_ACEITE,
	Float:gb_vehicle_MAX_ACEITE,
	gb_vehicle_COMPONENTS[MAX_VEHICLE_COMPONENTS],
	gb_vehicle_STATE,
	gb_vehicle_INTERIOR,
	gb_vehicle_WORLD,
	gb_vehicle_PARAMS_ENGINE,
	gb_vehicle_PARAMS_LIGHTS,
	gb_vehicle_PARAMS_ALARM,
	gb_vehicle_PARAMS_DOORS,
	gb_vehicle_PARAMS_BONNET,
	gb_vehicle_PARAMS_BOOT,
	gb_vehicle_PARAMS_OBJECTIVE,
	gb_vehicle_DRIVER,
	gb_vehicle_LAST_DRIVER,
	gb_vehicle_LAST_CLOSED_TIME,
	gb_vehicle_LAST_REPAIR_TIME,
	
	bool:gb_vehicle_SPAWNED,
	gb_vehicle_TP_IMMUNITY,
	gp_vehicle_vip,
	gb_vehicle_ATTACHED_TO,
	Text3D:gb_vehicle_LABEL,
	RENT_OWNER,
	bool:IN_RENT,
	gb_vehicle_BAUL,
	/**/
	FACCION_NAME[30],
	FACCION_ID,
	/**/
	gb_vehicle_ACELERACION,
	gb_vehicle_ACELERACION_ACTIVE,
	gb_vehicle_ID,
	/**/
	bool:gb_vehicle_TRANSPORTISTA,
	gp_vehicle_TRANS_CONTIENE,
	gp_vehicle_TRANS_OBJETO,
	bool:carrier_vehicle_LOADED,
	bool:carrier_vehicle_LOADING,
	bool:carrier_vehicle_DELIVERED,
	bool:carrier_vehicle_UNLOADING,
	carrier_vehicle_POINT,
	gb_vehicle_RADIO,gb_vehicle_RADIO_LINK[120],
	gb_vehicle_SALTO_V,gb_vehicle_SALTO_V_1,gb_vehicle_SALTO_V_2
};
new GLOBAL_VEHICLES[MAX_VEHICLES][Global_Vehicles_Info];

enum Player_Vehicles_Info
{
	bool:player_vehicle_VALID,
	player_vehicle_ID,
	player_vehicle_OWNER_ID,
	bool:player_vehicle_ACCESSIBLE
};
new PLAYER_VEHICLES[MAX_VEHICLES][Player_Vehicles_Info];

#define MAX_VEHICLE_OBJECTS_INDEXS	5
enum
{
	VOBJECT_TYPE_OBJECT,
	VOBJECT_TYPE_TEXT,
	VOBJECT_TYPE_COUNTRY_FLAG,
	VOBJECT_TYPE_COUNTRY_PANEL
};
enum e_VEHICLE_OBJECTS
{
	bool:vobject_VALID,
	vobject_TYPE,
	vobject_NAME[32],
	vobject_ID,
	vobject_OBJECT_ID,
	vobject_MODELID,
	Float:vobject_OFFSET[3],
	Float:vobject_ROT[3],
	vobject_ATTACHED,
	vobject_COLORS[MAX_VEHICLE_OBJECTS_INDEXS],
	
	vobject_text_TEXT[32],
	vobject_text_FONT[24],
	vobject_text_FONT_SIZE,
	vobject_text_BOLD,
	vobject_text_FONT_COLOR
};
new VEHICLE_OBJECTS[MAX_VEHICLES][MAX_SU_VOBJECTS][e_VEHICLE_OBJECTS];

new male_medic_skins[] = {274, 275, 276};

enum
{
	WORK_TYPE_NONE,
	WORK_TYPE_NORMAL,
	WORK_TYPE_FAMILY
};
enum
{
	WORK_NONE,
	WORK_TAXI,
	WORK_TRUCK,
	WORK_MECHANIC,
	WORK_HARVESTER,
	WORK_TRASH,
	WORK_LUMBERJACK,
	WORK_FARMER,
	WORK_POLICE,
	WORK_PIZZA,
	WORK_MEDIC,
	WORK_MINER,
	WORK_PROTECTOR,
	WORK_CARRIER,
	WORK_PESCADOR,
	WORK_CANTERA

};
enum work_info_info
{
	work_info_TYPE,
	work_info_LEVEL,
	work_info_NAME[24],
	bool:work_info_NEED_DUTY, 	//si este trabajo es normal y tiene vehiculos indica si es necesario que el jugador este de servicio para subirse
	work_info_EXTRA_PAY,		//dejar en 0 para no paga extra.......Paga extra de 'work_info_EXTRA_PAY' cada 'work_info_EXTRA_PAY_EXP' con un limite de 'work_info_EXTRA_PAY_LIMIT'
	work_info_EXTRA_PAY_EXP,
	work_info_EXTRA_PAY_LIMIT	// dejar en 0 para sin limites
};
new work_info[][work_info_info] =
{
	{WORK_TYPE_NONE, 0, "ninguno",					false, 0, 0, 0},
	{WORK_TYPE_NORMAL, 1, "taxista",				false, 0, 0, 0},
	{WORK_TYPE_NORMAL, 1, "camionero",				false, 0, 50, 300},
	{WORK_TYPE_NORMAL, 3, "mecánico",				true, 20, 0, 0},
	{WORK_TYPE_NORMAL, 1, "cosechador",				false, 220, 30, 800},
	{WORK_TYPE_NORMAL, 1, "basurero", 				true, 260, 50, 200},
	{WORK_TYPE_NORMAL, 1, "leñador",				false, 200, 30, 80},
	{WORK_TYPE_NORMAL, 5, "agricultor",				false, 200, 0, 200},
	{WORK_TYPE_FAMILY, 0, "policía",				true, 1000, 1, 200},
	{WORK_TYPE_NORMAL, 1, "pizzero",				true, 60, 20, 800},
	{WORK_TYPE_NORMAL, 5, "médico",					true, 60, 50, 2000},
	{WORK_TYPE_NORMAL, 1, "Minero",					true, 60, 50, 500},
	{WORK_TYPE_NORMAL, 3, "Protector",				true, 60, 50, 0},
	{WORK_TYPE_NORMAL, 1, "Transportista",			true, 60, 50, 0},
	{WORK_TYPE_NORMAL, 1, "Pescador",				true, 60, 50, 0},
	{WORK_TYPE_NORMAL, 1, "Cantera",				true, 60, 50, 0}
};

new PLAYER_WORKS[MAX_PLAYERS][sizeof(work_info)];
new PLAYER_SKILLS[MAX_PLAYERS][sizeof(work_info)];

//??????????????????????????????????????????????????????????????
#define 						MAX_ZONE_NAME 				28
enum SAZONE_MAIN { //Betamaster
		SAZONE_NAME[28],
		Float:SAZONE_AREA[6]
};

static const gSAZones[][SAZONE_MAIN] = {  // Majority of names and area coordinates adopted from Mabako's 'Zones Script' v0.2
	//	NAME                            AREA (Xmin,Ymin,Zmin,Xmax,Ymax,Zmax)
	{"The Big Ear",	                {-410.00,1403.30,-3.00,-137.90,1681.20,200.00}},
	{"Aldea Malvada",               {-1372.10,2498.50,0.00,-1277.50,2615.30,200.00}},
	{"Angel Pine",                  {-2324.90,-2584.20,-6.10,-1964.20,-2212.10,200.00}},
	{"Arco del Oeste",              {-901.10,2221.80,0.00,-592.00,2571.90,200.00}},
	{"Avispa Country Club",         {-2646.40,-355.40,0.00,-2270.00,-222.50,200.00}},
	{"Avispa Country Club",         {-2831.80,-430.20,-6.10,-2646.40,-222.50,200.00}},
	{"Avispa Country Club",         {-2361.50,-417.10,0.00,-2270.00,-355.40,200.00}},
	{"Avispa Country Club",         {-2667.80,-302.10,-28.80,-2646.40,-262.30,71.10}},
	{"Avispa Country Club",         {-2470.00,-355.40,0.00,-2270.00,-318.40,46.10}},
	{"Avispa Country Club",         {-2550.00,-355.40,0.00,-2470.00,-318.40,39.70}},
	{"Back o Beyond",               {-1166.90,-2641.10,0.00,-321.70,-1856.00,200.00}},
	{"Battery Point",               {-2741.00,1268.40,-4.50,-2533.00,1490.40,200.00}},
	{"Bayside",                     {-2741.00,2175.10,0.00,-2353.10,2722.70,200.00}},
	{"Bayside Marina",              {-2353.10,2275.70,0.00,-2153.10,2475.70,200.00}},
	{"Beacon Hill",                 {-399.60,-1075.50,-1.40,-319.00,-977.50,198.50}},
	{"Blackfield",                  {964.30,1203.20,-89.00,1197.30,1403.20,110.90}},
	{"Blackfield",                  {964.30,1403.20,-89.00,1197.30,1726.20,110.90}},
	{"Blackfield Chapel",           {1375.60,596.30,-89.00,1558.00,823.20,110.90}},
	{"Blackfield Chapel",           {1325.60,596.30,-89.00,1375.60,795.00,110.90}},
	{"Blackfield Intersection",     {1197.30,1044.60,-89.00,1277.00,1163.30,110.90}},
	{"Blackfield Intersection",     {1166.50,795.00,-89.00,1375.60,1044.60,110.90}},
	{"Blackfield Intersection",     {1277.00,1044.60,-89.00,1315.30,1087.60,110.90}},
	{"Blackfield Intersection",     {1375.60,823.20,-89.00,1457.30,919.40,110.90}},
	{"Blueberry",                   {104.50,-220.10,2.30,349.60,152.20,200.00}},
	{"Blueberry",                   {19.60,-404.10,3.80,349.60,-220.10,200.00}},
	{"Blueberry Acres",             {-319.60,-220.10,0.00,104.50,293.30,200.00}},
	{"Caligula's Palace",           {2087.30,1543.20,-89.00,2437.30,1703.20,110.90}},
	{"Caligula's Palace",           {2137.40,1703.20,-89.00,2437.30,1783.20,110.90}},
	{"Calton Heights",              {-2274.10,744.10,-6.10,-1982.30,1358.90,200.00}},
	{"Chinatown",                   {-2274.10,578.30,-7.60,-2078.60,744.10,200.00}},
	{"City Hall",                   {-2867.80,277.40,-9.10,-2593.40,458.40,200.00}},
	{"Come-A-Lot",                  {2087.30,943.20,-89.00,2623.10,1203.20,110.90}},
	{"Commerce",                    {1323.90,-1842.20,-89.00,1701.90,-1722.20,110.90}},
	{"Commerce",                    {1323.90,-1722.20,-89.00,1440.90,-1577.50,110.90}},
	{"Commerce",                    {1370.80,-1577.50,-89.00,1463.90,-1384.90,110.90}},
	{"Commerce",                    {1463.90,-1577.50,-89.00,1667.90,-1430.80,110.90}},
	{"Commerce",                    {1583.50,-1722.20,-89.00,1758.90,-1577.50,110.90}},
	{"Commerce",                    {1667.90,-1577.50,-89.00,1812.60,-1430.80,110.90}},
	{"Conference Center",           {1046.10,-1804.20,-89.00,1323.90,-1722.20,110.90}},
	{"Conference Center",           {1073.20,-1842.20,-89.00,1323.90,-1804.20,110.90}},
	{"Cranberry Station",           {-2007.80,56.30,0.00,-1922.00,224.70,100.00}},
	{"Creek",                       {2749.90,1937.20,-89.00,2921.60,2669.70,110.90}},
	{"Dillimore",                   {580.70,-674.80,-9.50,861.00,-404.70,200.00}},
	{"Doherty",                     {-2270.00,-324.10,-0.00,-1794.90,-222.50,200.00}},
	{"Doherty",                     {-2173.00,-222.50,-0.00,-1794.90,265.20,200.00}},
	{"Downtown",                    {-1982.30,744.10,-6.10,-1871.70,1274.20,200.00}},
	{"Downtown",                    {-1871.70,1176.40,-4.50,-1620.30,1274.20,200.00}},
	{"Downtown",                    {-1700.00,744.20,-6.10,-1580.00,1176.50,200.00}},
	{"Downtown",                    {-1580.00,744.20,-6.10,-1499.80,1025.90,200.00}},
	{"Downtown",                    {-2078.60,578.30,-7.60,-1499.80,744.20,200.00}},
	{"Downtown",                    {-1993.20,265.20,-9.10,-1794.90,578.30,200.00}},
	{"Downtown Los Santos",         {1463.90,-1430.80,-89.00,1724.70,-1290.80,110.90}},
	{"Downtown Los Santos",         {1724.70,-1430.80,-89.00,1812.60,-1250.90,110.90}},
	{"Downtown Los Santos",         {1463.90,-1290.80,-89.00,1724.70,-1150.80,110.90}},
	{"Downtown Los Santos",         {1370.80,-1384.90,-89.00,1463.90,-1170.80,110.90}},
	{"Downtown Los Santos",         {1724.70,-1250.90,-89.00,1812.60,-1150.80,110.90}},
	{"Downtown Los Santos",         {1370.80,-1170.80,-89.00,1463.90,-1130.80,110.90}},
	{"Downtown Los Santos",         {1378.30,-1130.80,-89.00,1463.90,-1026.30,110.90}},
	{"Downtown Los Santos",         {1391.00,-1026.30,-89.00,1463.90,-926.90,110.90}},
	{"Downtown Los Santos",         {1507.50,-1385.20,110.90,1582.50,-1325.30,335.90}},
	{"East Beach",                  {2632.80,-1852.80,-89.00,2959.30,-1668.10,110.90}},
	{"East Beach",                  {2632.80,-1668.10,-89.00,2747.70,-1393.40,110.90}},
	{"East Beach",                  {2747.70,-1668.10,-89.00,2959.30,-1498.60,110.90}},
	{"East Beach",                  {2747.70,-1498.60,-89.00,2959.30,-1120.00,110.90}},
	{"East Los Santos",             {2421.00,-1628.50,-89.00,2632.80,-1454.30,110.90}},
	{"East Los Santos",             {2222.50,-1628.50,-89.00,2421.00,-1494.00,110.90}},
	{"East Los Santos",             {2266.20,-1494.00,-89.00,2381.60,-1372.00,110.90}},
	{"East Los Santos",             {2381.60,-1494.00,-89.00,2421.00,-1454.30,110.90}},
	{"East Los Santos",             {2281.40,-1372.00,-89.00,2381.60,-1135.00,110.90}},
	{"East Los Santos",             {2381.60,-1454.30,-89.00,2462.10,-1135.00,110.90}},
	{"East Los Santos",             {2462.10,-1454.30,-89.00,2581.70,-1135.00,110.90}},
	{"Easter Basin",                {-1794.90,249.90,-9.10,-1242.90,578.30,200.00}},
	{"Easter Basin",                {-1794.90,-50.00,-0.00,-1499.80,249.90,200.00}},
	{"Easter Bay Airport",          {-1499.80,-50.00,-0.00,-1242.90,249.90,200.00}},
	{"Easter Bay Airport",          {-1794.90,-730.10,-3.00,-1213.90,-50.00,200.00}},
	{"Easter Bay Airport",          {-1213.90,-730.10,0.00,-1132.80,-50.00,200.00}},
	{"Easter Bay Airport",          {-1242.90,-50.00,0.00,-1213.90,578.30,200.00}},
	{"Easter Bay Airport",          {-1213.90,-50.00,-4.50,-947.90,578.30,200.00}},
	{"Easter Bay Airport",          {-1315.40,-405.30,15.40,-1264.40,-209.50,25.40}},
	{"Easter Bay Airport",          {-1354.30,-287.30,15.40,-1315.40,-209.50,25.40}},
	{"Easter Bay Airport",          {-1490.30,-209.50,15.40,-1264.40,-148.30,25.40}},
	{"Easter Bay Chemicals",        {-1132.80,-768.00,0.00,-956.40,-578.10,200.00}},
	{"Easter Bay Chemicals",        {-1132.80,-787.30,0.00,-956.40,-768.00,200.00}},
	{"El Castillo del Diablo",      {-464.50,2217.60,0.00,-208.50,2580.30,200.00}},
	{"El Castillo del Diablo",      {-208.50,2123.00,-7.60,114.00,2337.10,200.00}},
	{"El Castillo del Diablo",      {-208.50,2337.10,0.00,8.40,2487.10,200.00}},
	{"El Corona",                   {1812.60,-2179.20,-89.00,1970.60,-1852.80,110.90}},
	{"El Corona",                   {1692.60,-2179.20,-89.00,1812.60,-1842.20,110.90}},
	{"El Quebrados",                {-1645.20,2498.50,0.00,-1372.10,2777.80,200.00}},
	{"Esplanade East",              {-1620.30,1176.50,-4.50,-1580.00,1274.20,200.00}},
	{"Esplanade East",              {-1580.00,1025.90,-6.10,-1499.80,1274.20,200.00}},
	{"Esplanade East",              {-1499.80,578.30,-79.60,-1339.80,1274.20,20.30}},
	{"Esplanade North",             {-2533.00,1358.90,-4.50,-1996.60,1501.20,200.00}},
	{"Esplanade North",             {-1996.60,1358.90,-4.50,-1524.20,1592.50,200.00}},
	{"Esplanade North",             {-1982.30,1274.20,-4.50,-1524.20,1358.90,200.00}},
	{"Fallen Tree",                 {-792.20,-698.50,-5.30,-452.40,-380.00,200.00}},
	{"Fallow Bridge",               {434.30,366.50,0.00,603.00,555.60,200.00}},
	{"Fern Ridge",                  {508.10,-139.20,0.00,1306.60,119.50,200.00}},
	{"Financial",                   {-1871.70,744.10,-6.10,-1701.30,1176.40,300.00}},
	{"Fisher's Lagoon",             {1916.90,-233.30,-100.00,2131.70,13.80,200.00}},
	{"Flint Intersection",          {-187.70,-1596.70,-89.00,17.00,-1276.60,110.90}},
	{"Flint Range",                 {-594.10,-1648.50,0.00,-187.70,-1276.60,200.00}},
	{"Fort Carson",                 {-376.20,826.30,-3.00,123.70,1220.40,200.00}},
	{"Foster Valley",               {-2270.00,-430.20,-0.00,-2178.60,-324.10,200.00}},
	{"Foster Valley",               {-2178.60,-599.80,-0.00,-1794.90,-324.10,200.00}},
	{"Foster Valley",               {-2178.60,-1115.50,0.00,-1794.90,-599.80,200.00}},
	{"Foster Valley",               {-2178.60,-1250.90,0.00,-1794.90,-1115.50,200.00}},
	{"Frederick Bridge",            {2759.20,296.50,0.00,2774.20,594.70,200.00}},
	{"Gant Bridge",                 {-2741.40,1659.60,-6.10,-2616.40,2175.10,200.00}},
	{"Gant Bridge",                 {-2741.00,1490.40,-6.10,-2616.40,1659.60,200.00}},
	{"Ganton",                      {2222.50,-1852.80,-89.00,2632.80,-1722.30,110.90}},
	{"Ganton",                      {2222.50,-1722.30,-89.00,2632.80,-1628.50,110.90}},
	{"Garcia",                      {-2411.20,-222.50,-0.00,-2173.00,265.20,200.00}},
	{"Garcia",                      {-2395.10,-222.50,-5.30,-2354.00,-204.70,200.00}},
	{"Garver Bridge",               {-1339.80,828.10,-89.00,-1213.90,1057.00,110.90}},
	{"Garver Bridge",               {-1213.90,950.00,-89.00,-1087.90,1178.90,110.90}},
	{"Garver Bridge",               {-1499.80,696.40,-179.60,-1339.80,925.30,20.30}},
	{"Glen Park",                   {1812.60,-1449.60,-89.00,1996.90,-1350.70,110.90}},
	{"Glen Park",                   {1812.60,-1100.80,-89.00,1994.30,-973.30,110.90}},
	{"Glen Park",                   {1812.60,-1350.70,-89.00,2056.80,-1100.80,110.90}},
	{"Green Palms",                 {176.50,1305.40,-3.00,338.60,1520.70,200.00}},
	{"Greenglass College",          {964.30,1044.60,-89.00,1197.30,1203.20,110.90}},
	{"Greenglass College",          {964.30,930.80,-89.00,1166.50,1044.60,110.90}},
	{"Hampton Barns",               {603.00,264.30,0.00,761.90,366.50,200.00}},
	{"Hankypanky Point",            {2576.90,62.10,0.00,2759.20,385.50,200.00}},
	{"Harry Gold Parkway",          {1777.30,863.20,-89.00,1817.30,2342.80,110.90}},
	{"Hashbury",                    {-2593.40,-222.50,-0.00,-2411.20,54.70,200.00}},
	{"Hilltop Farm",                {967.30,-450.30,-3.00,1176.70,-217.90,200.00}},
	{"Hunter Quarry",               {337.20,710.80,-115.20,860.50,1031.70,203.70}},
	{"Idlewood",                    {1812.60,-1852.80,-89.00,1971.60,-1742.30,110.90}},
	{"Idlewood",                    {1812.60,-1742.30,-89.00,1951.60,-1602.30,110.90}},
	{"Idlewood",                    {1951.60,-1742.30,-89.00,2124.60,-1602.30,110.90}},
	{"Idlewood",                    {1812.60,-1602.30,-89.00,2124.60,-1449.60,110.90}},
	{"Idlewood",                    {2124.60,-1742.30,-89.00,2222.50,-1494.00,110.90}},
	{"Idlewood",                    {1971.60,-1852.80,-89.00,2222.50,-1742.30,110.90}},
	{"Jefferson",                   {1996.90,-1449.60,-89.00,2056.80,-1350.70,110.90}},
	{"Jefferson",                   {2124.60,-1494.00,-89.00,2266.20,-1449.60,110.90}},
	{"Jefferson",                   {2056.80,-1372.00,-89.00,2281.40,-1210.70,110.90}},
	{"Jefferson",                   {2056.80,-1210.70,-89.00,2185.30,-1126.30,110.90}},
	{"Jefferson",                   {2185.30,-1210.70,-89.00,2281.40,-1154.50,110.90}},
	{"Jefferson",                   {2056.80,-1449.60,-89.00,2266.20,-1372.00,110.90}},
	{"Julius Thruway East",         {2623.10,943.20,-89.00,2749.90,1055.90,110.90}},
	{"Julius Thruway East",         {2685.10,1055.90,-89.00,2749.90,2626.50,110.90}},
	{"Julius Thruway East",         {2536.40,2442.50,-89.00,2685.10,2542.50,110.90}},
	{"Julius Thruway East",         {2625.10,2202.70,-89.00,2685.10,2442.50,110.90}},
	{"Julius Thruway North",        {2498.20,2542.50,-89.00,2685.10,2626.50,110.90}},
	{"Julius Thruway North",        {2237.40,2542.50,-89.00,2498.20,2663.10,110.90}},
	{"Julius Thruway North",        {2121.40,2508.20,-89.00,2237.40,2663.10,110.90}},
	{"Julius Thruway North",        {1938.80,2508.20,-89.00,2121.40,2624.20,110.90}},
	{"Julius Thruway North",        {1534.50,2433.20,-89.00,1848.40,2583.20,110.90}},
	{"Julius Thruway North",        {1848.40,2478.40,-89.00,1938.80,2553.40,110.90}},
	{"Julius Thruway North",        {1704.50,2342.80,-89.00,1848.40,2433.20,110.90}},
	{"Julius Thruway North",        {1377.30,2433.20,-89.00,1534.50,2507.20,110.90}},
	{"Julius Thruway South",        {1457.30,823.20,-89.00,2377.30,863.20,110.90}},
	{"Julius Thruway South",        {2377.30,788.80,-89.00,2537.30,897.90,110.90}},
	{"Julius Thruway West",         {1197.30,1163.30,-89.00,1236.60,2243.20,110.90}},
	{"Julius Thruway West",         {1236.60,2142.80,-89.00,1297.40,2243.20,110.90}},
	{"Juniper Hill",                {-2533.00,578.30,-7.60,-2274.10,968.30,200.00}},
	{"Juniper Hollow",              {-2533.00,968.30,-6.10,-2274.10,1358.90,200.00}},
	{"K.A.C.C. Military Fuels",     {2498.20,2626.50,-89.00,2749.90,2861.50,110.90}},
	{"Kincaid Bridge",              {-1339.80,599.20,-89.00,-1213.90,828.10,110.90}},
	{"Kincaid Bridge",              {-1213.90,721.10,-89.00,-1087.90,950.00,110.90}},
	{"Kincaid Bridge",              {-1087.90,855.30,-89.00,-961.90,986.20,110.90}},
	{"King's",                      {-2329.30,458.40,-7.60,-1993.20,578.30,200.00}},
	{"King's",                      {-2411.20,265.20,-9.10,-1993.20,373.50,200.00}},
	{"King's",                      {-2253.50,373.50,-9.10,-1993.20,458.40,200.00}},
	{"LVA Freight Depot",           {1457.30,863.20,-89.00,1777.40,1143.20,110.90}},
	{"LVA Freight Depot",           {1375.60,919.40,-89.00,1457.30,1203.20,110.90}},
	{"LVA Freight Depot",           {1277.00,1087.60,-89.00,1375.60,1203.20,110.90}},
	{"LVA Freight Depot",           {1315.30,1044.60,-89.00,1375.60,1087.60,110.90}},
	{"LVA Freight Depot",           {1236.60,1163.40,-89.00,1277.00,1203.20,110.90}},
	{"Las Barrancas",               {-926.10,1398.70,-3.00,-719.20,1634.60,200.00}},
	{"Las Brujas",                  {-365.10,2123.00,-3.00,-208.50,2217.60,200.00}},
	{"Las Colinas",                 {1994.30,-1100.80,-89.00,2056.80,-920.80,110.90}},
	{"Las Colinas",                 {2056.80,-1126.30,-89.00,2126.80,-920.80,110.90}},
	{"Las Colinas",                 {2185.30,-1154.50,-89.00,2281.40,-934.40,110.90}},
	{"Las Colinas",                 {2126.80,-1126.30,-89.00,2185.30,-934.40,110.90}},
	{"Las Colinas",                 {2747.70,-1120.00,-89.00,2959.30,-945.00,110.90}},
	{"Las Colinas",                 {2632.70,-1135.00,-89.00,2747.70,-945.00,110.90}},
	{"Las Colinas",                 {2281.40,-1135.00,-89.00,2632.70,-945.00,110.90}},
	{"Las Payasadas",               {-354.30,2580.30,2.00,-133.60,2816.80,200.00}},
	{"Las Venturas Airport",        {1236.60,1203.20,-89.00,1457.30,1883.10,110.90}},
	{"Las Venturas Airport",        {1457.30,1203.20,-89.00,1777.30,1883.10,110.90}},
	{"Las Venturas Airport",        {1457.30,1143.20,-89.00,1777.40,1203.20,110.90}},
	{"Las Venturas Airport",        {1515.80,1586.40,-12.50,1729.90,1714.50,87.50}},
	{"Last Dime Motel",             {1823.00,596.30,-89.00,1997.20,823.20,110.90}},
	{"Leafy Hollow",                {-1166.90,-1856.00,0.00,-815.60,-1602.00,200.00}},
	{"Liberty City",                {-1000.00,400.00,1300.00,-700.00,600.00,1400.00}},
	{"Lil' Probe Inn",              {-90.20,1286.80,-3.00,153.80,1554.10,200.00}},
	{"Linden Side",                 {2749.90,943.20,-89.00,2923.30,1198.90,110.90}},
	{"Linden Station",              {2749.90,1198.90,-89.00,2923.30,1548.90,110.90}},
	{"Linden Station",              {2811.20,1229.50,-39.50,2861.20,1407.50,60.40}},
	{"Little Mexico",               {1701.90,-1842.20,-89.00,1812.60,-1722.20,110.90}},
	{"Little Mexico",               {1758.90,-1722.20,-89.00,1812.60,-1577.50,110.90}},
	{"Los Flores",                  {2581.70,-1454.30,-89.00,2632.80,-1393.40,110.90}},
	{"Los Flores",                  {2581.70,-1393.40,-89.00,2747.70,-1135.00,110.90}},
	{"Los Santos International",    {1249.60,-2394.30,-89.00,1852.00,-2179.20,110.90}},
	{"Los Santos International",    {1852.00,-2394.30,-89.00,2089.00,-2179.20,110.90}},
	{"Los Santos International",    {1382.70,-2730.80,-89.00,2201.80,-2394.30,110.90}},
	{"Los Santos International",    {1974.60,-2394.30,-39.00,2089.00,-2256.50,60.90}},
	{"Los Santos International",    {1400.90,-2669.20,-39.00,2189.80,-2597.20,60.90}},
	{"Los Santos International",    {2051.60,-2597.20,-39.00,2152.40,-2394.30,60.90}},
	{"Marina",                      {647.70,-1804.20,-89.00,851.40,-1577.50,110.90}},
	{"Marina",                      {647.70,-1577.50,-89.00,807.90,-1416.20,110.90}},
	{"Marina",                      {807.90,-1577.50,-89.00,926.90,-1416.20,110.90}},
	{"Market",                      {787.40,-1416.20,-89.00,1072.60,-1310.20,110.90}},
	{"Market",                      {952.60,-1310.20,-89.00,1072.60,-1130.80,110.90}},
	{"Market",                      {1072.60,-1416.20,-89.00,1370.80,-1130.80,110.90}},
	{"Market",                      {926.90,-1577.50,-89.00,1370.80,-1416.20,110.90}},
	{"Market Station",              {787.40,-1410.90,-34.10,866.00,-1310.20,65.80}},
	{"Martin Bridge",               {-222.10,293.30,0.00,-122.10,476.40,200.00}},
	{"Missionary Hill",             {-2994.40,-811.20,0.00,-2178.60,-430.20,200.00}},
	{"Montgomery",                  {1119.50,119.50,-3.00,1451.40,493.30,200.00}},
	{"Montgomery",                  {1451.40,347.40,-6.10,1582.40,420.80,200.00}},
	{"Montgomery Intersection",     {1546.60,208.10,0.00,1745.80,347.40,200.00}},
	{"Montgomery Intersection",     {1582.40,347.40,0.00,1664.60,401.70,200.00}},
	{"Mulholland",                  {1414.00,-768.00,-89.00,1667.60,-452.40,110.90}},
	{"Mulholland",                  {1281.10,-452.40,-89.00,1641.10,-290.90,110.90}},
	{"Mulholland",                  {1269.10,-768.00,-89.00,1414.00,-452.40,110.90}},
	{"Mulholland",                  {1357.00,-926.90,-89.00,1463.90,-768.00,110.90}},
	{"Mulholland",                  {1318.10,-910.10,-89.00,1357.00,-768.00,110.90}},
	{"Mulholland",                  {1169.10,-910.10,-89.00,1318.10,-768.00,110.90}},
	{"Mulholland",                  {768.60,-954.60,-89.00,952.60,-860.60,110.90}},
	{"Mulholland",                  {687.80,-860.60,-89.00,911.80,-768.00,110.90}},
	{"Mulholland",                  {737.50,-768.00,-89.00,1142.20,-674.80,110.90}},
	{"Mulholland",                  {1096.40,-910.10,-89.00,1169.10,-768.00,110.90}},
	{"Mulholland",                  {952.60,-937.10,-89.00,1096.40,-860.60,110.90}},
	{"Mulholland",                  {911.80,-860.60,-89.00,1096.40,-768.00,110.90}},
	{"Mulholland",                  {861.00,-674.80,-89.00,1156.50,-600.80,110.90}},
	{"Mulholland Intersection",     {1463.90,-1150.80,-89.00,1812.60,-768.00,110.90}},
	{"North Rock",                  {2285.30,-768.00,0.00,2770.50,-269.70,200.00}},
	{"Ocean Docks",                 {2373.70,-2697.00,-89.00,2809.20,-2330.40,110.90}},
	{"Ocean Docks",                 {2201.80,-2418.30,-89.00,2324.00,-2095.00,110.90}},
	{"Ocean Docks",                 {2324.00,-2302.30,-89.00,2703.50,-2145.10,110.90}},
	{"Ocean Docks",                 {2089.00,-2394.30,-89.00,2201.80,-2235.80,110.90}},
	{"Ocean Docks",                 {2201.80,-2730.80,-89.00,2324.00,-2418.30,110.90}},
	{"Ocean Docks",                 {2703.50,-2302.30,-89.00,2959.30,-2126.90,110.90}},
	{"Ocean Docks",                 {2324.00,-2145.10,-89.00,2703.50,-2059.20,110.90}},
	{"Ocean Flats",                 {-2994.40,277.40,-9.10,-2867.80,458.40,200.00}},
	{"Ocean Flats",                 {-2994.40,-222.50,-0.00,-2593.40,277.40,200.00}},
	{"Ocean Flats",                 {-2994.40,-430.20,-0.00,-2831.80,-222.50,200.00}},
	{"Octane Springs",              {338.60,1228.50,0.00,664.30,1655.00,200.00}},
	{"Old Venturas Strip",          {2162.30,2012.10,-89.00,2685.10,2202.70,110.90}},
	{"Palisades",                   {-2994.40,458.40,-6.10,-2741.00,1339.60,200.00}},
	{"Palomino Creek",              {2160.20,-149.00,0.00,2576.90,228.30,200.00}},
	{"Paradiso",                    {-2741.00,793.40,-6.10,-2533.00,1268.40,200.00}},
	{"Pershing Square",             {1440.90,-1722.20,-89.00,1583.50,-1577.50,110.90}},
	{"Pilgrim",                     {2437.30,1383.20,-89.00,2624.40,1783.20,110.90}},
	{"Pilgrim",                     {2624.40,1383.20,-89.00,2685.10,1783.20,110.90}},
	{"Pilson Intersection",         {1098.30,2243.20,-89.00,1377.30,2507.20,110.90}},
	{"Pirates in Men's Pants",      {1817.30,1469.20,-89.00,2027.40,1703.20,110.90}},
	{"Playa del Seville",           {2703.50,-2126.90,-89.00,2959.30,-1852.80,110.90}},
	{"Prickle Pine",                {1534.50,2583.20,-89.00,1848.40,2863.20,110.90}},
	{"Prickle Pine",                {1117.40,2507.20,-89.00,1534.50,2723.20,110.90}},
	{"Prickle Pine",                {1848.40,2553.40,-89.00,1938.80,2863.20,110.90}},
	{"Prickle Pine",                {1938.80,2624.20,-89.00,2121.40,2861.50,110.90}},
	{"Queens",                      {-2533.00,458.40,0.00,-2329.30,578.30,200.00}},
	{"Queens",                      {-2593.40,54.70,0.00,-2411.20,458.40,200.00}},
	{"Queens",                      {-2411.20,373.50,0.00,-2253.50,458.40,200.00}},
	{"Randolph Industrial Estate",  {1558.00,596.30,-89.00,1823.00,823.20,110.90}},
	{"Redsands East",               {1817.30,2011.80,-89.00,2106.70,2202.70,110.90}},
	{"Redsands East",               {1817.30,2202.70,-89.00,2011.90,2342.80,110.90}},
	{"Redsands East",               {1848.40,2342.80,-89.00,2011.90,2478.40,110.90}},
	{"Redsands West",               {1236.60,1883.10,-89.00,1777.30,2142.80,110.90}},
	{"Redsands West",               {1297.40,2142.80,-89.00,1777.30,2243.20,110.90}},
	{"Redsands West",               {1377.30,2243.20,-89.00,1704.50,2433.20,110.90}},
	{"Redsands West",               {1704.50,2243.20,-89.00,1777.30,2342.80,110.90}},
	{"Regular Tom",                 {-405.70,1712.80,-3.00,-276.70,1892.70,200.00}},
	{"Richman",                     {647.50,-1118.20,-89.00,787.40,-954.60,110.90}},
	{"Richman",                     {647.50,-954.60,-89.00,768.60,-860.60,110.90}},
	{"Richman",                     {225.10,-1369.60,-89.00,334.50,-1292.00,110.90}},
	{"Richman",                     {225.10,-1292.00,-89.00,466.20,-1235.00,110.90}},
	{"Richman",                     {72.60,-1404.90,-89.00,225.10,-1235.00,110.90}},
	{"Richman",                     {72.60,-1235.00,-89.00,321.30,-1008.10,110.90}},
	{"Richman",                     {321.30,-1235.00,-89.00,647.50,-1044.00,110.90}},
	{"Richman",                     {321.30,-1044.00,-89.00,647.50,-860.60,110.90}},
	{"Richman",                     {321.30,-860.60,-89.00,687.80,-768.00,110.90}},
	{"Richman",                     {321.30,-768.00,-89.00,700.70,-674.80,110.90}},
	{"Robada Intersection",         {-1119.00,1178.90,-89.00,-862.00,1351.40,110.90}},
	{"Roca Escalante",              {2237.40,2202.70,-89.00,2536.40,2542.50,110.90}},
	{"Roca Escalante",              {2536.40,2202.70,-89.00,2625.10,2442.50,110.90}},
	{"Rockshore East",              {2537.30,676.50,-89.00,2902.30,943.20,110.90}},
	{"Rockshore West",              {1997.20,596.30,-89.00,2377.30,823.20,110.90}},
	{"Rockshore West",              {2377.30,596.30,-89.00,2537.30,788.80,110.90}},
	{"Rodeo",                       {72.60,-1684.60,-89.00,225.10,-1544.10,110.90}},
	{"Rodeo",                       {72.60,-1544.10,-89.00,225.10,-1404.90,110.90}},
	{"Rodeo",                       {225.10,-1684.60,-89.00,312.80,-1501.90,110.90}},
	{"Rodeo",                       {225.10,-1501.90,-89.00,334.50,-1369.60,110.90}},
	{"Rodeo",                       {334.50,-1501.90,-89.00,422.60,-1406.00,110.90}},
	{"Rodeo",                       {312.80,-1684.60,-89.00,422.60,-1501.90,110.90}},
	{"Rodeo",                       {422.60,-1684.60,-89.00,558.00,-1570.20,110.90}},
	{"Rodeo",                       {558.00,-1684.60,-89.00,647.50,-1384.90,110.90}},
	{"Rodeo",                       {466.20,-1570.20,-89.00,558.00,-1385.00,110.90}},
	{"Rodeo",                       {422.60,-1570.20,-89.00,466.20,-1406.00,110.90}},
	{"Rodeo",                       {466.20,-1385.00,-89.00,647.50,-1235.00,110.90}},
	{"Rodeo",                       {334.50,-1406.00,-89.00,466.20,-1292.00,110.90}},
	{"Royal Casino",                {2087.30,1383.20,-89.00,2437.30,1543.20,110.90}},
	{"San Andreas Sound",           {2450.30,385.50,-100.00,2759.20,562.30,200.00}},
	{"Santa Flora",                 {-2741.00,458.40,-7.60,-2533.00,793.40,200.00}},
	{"Santa Maria Beach",           {342.60,-2173.20,-89.00,647.70,-1684.60,110.90}},
	{"Santa Maria Beach",           {72.60,-2173.20,-89.00,342.60,-1684.60,110.90}},
	{"Shady Cabin",                 {-1632.80,-2263.40,-3.00,-1601.30,-2231.70,200.00}},
	{"Shady Creeks",                {-1820.60,-2643.60,-8.00,-1226.70,-1771.60,200.00}},
	{"Shady Creeks",                {-2030.10,-2174.80,-6.10,-1820.60,-1771.60,200.00}},
	{"Sobell Rail Yards",           {2749.90,1548.90,-89.00,2923.30,1937.20,110.90}},
	{"Spinybed",                    {2121.40,2663.10,-89.00,2498.20,2861.50,110.90}},
	{"Starfish Casino",             {2437.30,1783.20,-89.00,2685.10,2012.10,110.90}},
	{"Starfish Casino",             {2437.30,1858.10,-39.00,2495.00,1970.80,60.90}},
	{"Starfish Casino",             {2162.30,1883.20,-89.00,2437.30,2012.10,110.90}},
	{"Temple",                      {1252.30,-1130.80,-89.00,1378.30,-1026.30,110.90}},
	{"Temple",                      {1252.30,-1026.30,-89.00,1391.00,-926.90,110.90}},
	{"Temple",                      {1252.30,-926.90,-89.00,1357.00,-910.10,110.90}},
	{"Temple",                      {952.60,-1130.80,-89.00,1096.40,-937.10,110.90}},
	{"Temple",                      {1096.40,-1130.80,-89.00,1252.30,-1026.30,110.90}},
	{"Temple",                      {1096.40,-1026.30,-89.00,1252.30,-910.10,110.90}},
	{"The Camel's Toe",             {2087.30,1203.20,-89.00,2640.40,1383.20,110.90}},
	{"The Clown's Pocket",          {2162.30,1783.20,-89.00,2437.30,1883.20,110.90}},
	{"The Emerald Isle",            {2011.90,2202.70,-89.00,2237.40,2508.20,110.90}},
	{"The Farm",                    {-1209.60,-1317.10,114.90,-908.10,-787.30,251.90}},
	{"The Four Dragons Casino",     {1817.30,863.20,-89.00,2027.30,1083.20,110.90}},
	{"The High Roller",             {1817.30,1283.20,-89.00,2027.30,1469.20,110.90}},
	{"The Mako Span",               {1664.60,401.70,0.00,1785.10,567.20,200.00}},
	{"The Panopticon",              {-947.90,-304.30,-1.10,-319.60,327.00,200.00}},
	{"The Pink Swan",               {1817.30,1083.20,-89.00,2027.30,1283.20,110.90}},
	{"The Sherman Dam",             {-968.70,1929.40,-3.00,-481.10,2155.20,200.00}},
	{"The Strip",                   {2027.40,863.20,-89.00,2087.30,1703.20,110.90}},
	{"The Strip",                   {2106.70,1863.20,-89.00,2162.30,2202.70,110.90}},
	{"The Strip",                   {2027.40,1783.20,-89.00,2162.30,1863.20,110.90}},
	{"The Strip",                   {2027.40,1703.20,-89.00,2137.40,1783.20,110.90}},
	{"The Visage",                  {1817.30,1863.20,-89.00,2106.70,2011.80,110.90}},
	{"The Visage",                  {1817.30,1703.20,-89.00,2027.40,1863.20,110.90}},
	{"Unity Station",               {1692.60,-1971.80,-20.40,1812.60,-1932.80,79.50}},
	{"Valle Ocultado",              {-936.60,2611.40,2.00,-715.90,2847.90,200.00}},
	{"Verdant Bluffs",              {930.20,-2488.40,-89.00,1249.60,-2006.70,110.90}},
	{"Verdant Bluffs",              {1073.20,-2006.70,-89.00,1249.60,-1842.20,110.90}},
	{"Verdant Bluffs",              {1249.60,-2179.20,-89.00,1692.60,-1842.20,110.90}},
	{"Verdant Meadows",             {37.00,2337.10,-3.00,435.90,2677.90,200.00}},
	{"Verona Beach",                {647.70,-2173.20,-89.00,930.20,-1804.20,110.90}},
	{"Verona Beach",                {930.20,-2006.70,-89.00,1073.20,-1804.20,110.90}},
	{"Verona Beach",                {851.40,-1804.20,-89.00,1046.10,-1577.50,110.90}},
	{"Verona Beach",                {1161.50,-1722.20,-89.00,1323.90,-1577.50,110.90}},
	{"Verona Beach",                {1046.10,-1722.20,-89.00,1161.50,-1577.50,110.90}},
	{"Vinewood",                    {787.40,-1310.20,-89.00,952.60,-1130.80,110.90}},
	{"Vinewood",                    {787.40,-1130.80,-89.00,952.60,-954.60,110.90}},
	{"Vinewood",                    {647.50,-1227.20,-89.00,787.40,-1118.20,110.90}},
	{"Vinewood",                    {647.70,-1416.20,-89.00,787.40,-1227.20,110.90}},
	{"Whitewood Estates",           {883.30,1726.20,-89.00,1098.30,2507.20,110.90}},
	{"Whitewood Estates",           {1098.30,1726.20,-89.00,1197.30,2243.20,110.90}},
	{"Willowfield",                 {1970.60,-2179.20,-89.00,2089.00,-1852.80,110.90}},
	{"Willowfield",                 {2089.00,-2235.80,-89.00,2201.80,-1989.90,110.90}},
	{"Willowfield",                 {2089.00,-1989.90,-89.00,2324.00,-1852.80,110.90}},
	{"Willowfield",                 {2201.80,-2095.00,-89.00,2324.00,-1989.90,110.90}},
	{"Willowfield",                 {2541.70,-1941.40,-89.00,2703.50,-1852.80,110.90}},
	{"Willowfield",                 {2324.00,-2059.20,-89.00,2541.70,-1852.80,110.90}},
	{"Willowfield",                 {2541.70,-2059.20,-89.00,2703.50,-1941.40,110.90}},
	{"Yellow Bell Station",         {1377.40,2600.40,-21.90,1492.40,2687.30,78.00}},
	// Main Zones
	{"Los Santos",                  {44.60,-2892.90,-242.90,2997.00,-768.00,900.00}},
	{"Las Venturas",                {869.40,596.30,-242.90,2997.00,2993.80,900.00}},
	{"Bone County",                 {-480.50,596.30,-242.90,869.40,2993.80,900.00}},
	{"Tierra Robada",               {-2997.40,1659.60,-242.90,-480.50,2993.80,900.00}},
	{"Tierra Robada",               {-1213.90,596.30,-242.90,-480.50,1659.60,900.00}},
	{"San Fierro",                  {-2997.40,-1115.50,-242.90,-1213.90,1659.60,900.00}},
	{"Red County",                  {-1213.90,-768.00,-242.90,2997.00,596.30,900.00}},
	{"Flint County",                {-1213.90,-2892.90,-242.90,44.60,-768.00,900.00}},
	{"Whetstone",                   {-2997.40,-2892.90,-242.90,-1213.90,-1115.50,900.00}}
};

new VehicleName[212][] = {
	"Landstalker","Bravura","Buffalo","Linerunner","Pereniel","Sentinel","Dumper","Firetruck","Trashmaster","Stretch","Manana","Infernus",
	"Voodoo","Pony","Mule","Cheetah","Ambulance","Leviathan","Moonbeam","Esperanto","Taxi","Washington","Bobcat","Mr Whoopee","BF Injection",
	"Hunter","Premier","Enforcer","Securicar","Banshee","Predator","Bus","Rhino","Barracks","Hotknife","Trailer","Previon","Coach","Cabbie",
	"Stallion","Rumpo","RC Bandit","Romero","Packer","Monster","Admiral","Squalo","Seasparrow","Pizzaboy","Tram","Trailer","Turismo","Speeder",
	"Reefer","Tropic","Flatbed","Yankee","Caddy","Solair","Berkley's RC Van","Skimmer","PCJ-600","Faggio","Freeway","RC Baron","RC Raider",
	"Glendale","Oceanic","Sanchez","Sparrow","Patriot","Quad","Coastguard","Dinghy","Hermes","Sabre","Rustler","ZR3 50","Walton","Regina",
	"Comet","BMX","Burrito","Camper","Marquis","Baggage","Dozer","Maverick","News Chopper","Rancher","FBI Rancher","Virgo","Greenwood",
	"Jetmax","Hotring","Sandking","Blista Compact","Police Maverick","Boxville","Benson","Mesa","RC Goblin","Hotring Racer A","Hotring Racer B",
	"Bloodring Banger","Rancher","Super GT","Elegant","Journey","Bike","Mountain Bike","Beagle","Cropdust","Stunt","Tanker","RoadTrain",
	"Nebula","Majestic","Buccaneer","Shamal","Hydra","FCR-900","NRG-500","HPV1000","Cement Truck","Tow Truck","Fortune","Cadrona","FBI Truck",
	"Willard","Forklift","Tractor","Combine","Feltzer","Remington","Slamvan","Blade","Freight","Streak","Vortex","Vincent","Bullet","Clover",
	"Sadler","Firetruck","Hustler","Intruder","Primo","Cargobob","Tampa","Sunrise","Merit","Utility","Nevada","Yosemite","Windsor","Monster A",
	"Monster B","Uranus","Jester","Sultan","Stratum","Elegy","Raindance","RC Tiger","Flash","Tahoma","Savanna","Bandito","Freight","Trailer",
	"Kart","Mower","Duneride","Sweeper","Broadway","Tornado","AT-400","DFT-30","Huntley","Stafford","BF-400","Newsvan","Tug","Trailer A","Emperor",
	"Wayfarer","Euros","Hotdog","Club","Trailer B","Trailer C","Andromada","Dodo","RC Cam","Launch","Police Car (LSPD)","Police Car (SFPD)",
	"Police Car (LVPD)","Police Ranger","Picador","S.W.A.T. Van","Alpha","Phoenix","Glendale","Sadler","Luggage Trailer A","Luggage Trailer B",
	"Stair Trailer","Boxville","Farm Plow","Utility Trailer"
};

//Concesonarios
//Conce 1 

new VehiclesConce[][] =
{
	{565, 1},//565
	{566, 1},
	{567, 1},
	{575, 1},
	{576, 1},
	{579, 1},
	{580, 1},
	{585, 1},
	{587, 1},
	{589, 1},
	{600, 1},
	{602, 1},
	{603, 1},
	{402, 1},
	{405, 1}
	
	//
};
//Conce 2
new VehiclesConce2[][] =
{
	{546, 2},
	{549, 2},
	{547, 2},
	{543, 2},
	{551, 2},
	{533, 2},
	{534, 2},
	{535, 2},
	{536, 2},
	{529, 2},
	{526, 2},
	{518, 2},
	{517, 2},
	{516, 2},
	{500, 2},
	{540, 2},
	{400, 2},
	{489, 2},
	{561, 2},
	{560, 2},
	{562, 2},
	{558, 2},
	{559, 2},
	{554, 2},
	{555, 2}
};
//Conce 3
new VehiclesConce3[][] =
{
	{529, 3},
	{543, 3},
	{462, 3},
	{604, 3},
	{605, 3},
	{542, 3}
};
//Conce 4
new VehiclesConce4[][] =
{
	{401, 4},
	{404, 4},
	{405, 4},
	{410, 4},
	{412, 4},
	{413, 4},
	{419, 4},
	{421, 4},
	{422, 4},
	{426, 4},
	{439, 4},
	{445, 4},
	{458, 4},
	{459, 4},
	{466, 4},
	{467, 4},
	{474, 4},
	{475, 4},
	{477, 4},
	{478, 4},
	{479, 4},
	{483, 4},
	{489, 4},
	{491, 4},
	{496, 4},
	{531, 4}
};
//Conce 5
new VehiclesConce5[][] =
{
	{495, 5},
	{429, 5},
	{434, 5},
	{411, 5},
	{415, 5},
	{451, 5},
	{506, 5},
	{541, 5},
	{545, 5}
};
//Conce 6
new VehiclesConce6[][] =
{
	{578, 6},
	{495, 6},
	{573, 6},
	{411, 6},
	{504, 6},
	{502, 6},
	{503, 6},
	{480, 6},
	{482, 6},
	{470, 6},
	{444, 6},
	{556, 6},
	{409, 6},
	{515, 6},
	{457, 6},
	{461, 6},
	{462, 6},
	{463, 6},
	{468, 6},
	{471, 6},
	{522, 6},
	{521, 6},
	{586, 6},
	{581, 6},
	{571, 6}
};
//Conce 7
new VehiclesConce7[][] =
{
	{446, 7},
	{452, 7},
	{595, 7},
	{453, 7},
	{454, 7},
	{473, 7},
	{472, 7},
	{493, 7},
	{484, 7}
};


 
//
enum PlayerDatos
{
	INTROtextdraw,
	FadeTimer,              FadeStep,                       FadeStepOn,
	P_SHOP_WEAPON_INDEX,
	bool:P_SHOP_WEAPON,
	bool:P_SHOP_SKIN,
	P_SHOP_SKIN_INDEX,
	P_SHOP_SKIN_INDEX_NOMBRE,
	P_SHOP_SKIN_INDEX_TEXTURA,
	P_SHOP_SKIN_INDEX_INFORMACION,
	delay
};

new PI[MAX_PLAYERS][PlayerDatos];


new VehicleColoursTableRGBA[256] = {
// The existing colours from San Andreas
0x000000FF, 0xF5F5F5FF, 0x2A77A1FF, 0x840410FF, 0x263739FF, 0x86446EFF, 0xD78E10FF, 0x4C75B7FF, 0xBDBEC6FF, 0x5E7072FF,
0x46597AFF, 0x656A79FF, 0x5D7E8DFF, 0x58595AFF, 0xD6DAD6FF, 0x9CA1A3FF, 0x335F3FFF, 0x730E1AFF, 0x7B0A2AFF, 0x9F9D94FF,
0x3B4E78FF, 0x732E3EFF, 0x691E3BFF, 0x96918CFF, 0x515459FF, 0x3F3E45FF, 0xA5A9A7FF, 0x635C5AFF, 0x3D4A68FF, 0x979592FF,
0x421F21FF, 0x5F272BFF, 0x8494ABFF, 0x767B7CFF, 0x646464FF, 0x5A5752FF, 0x252527FF, 0x2D3A35FF, 0x93A396FF, 0x6D7A88FF,
0x221918FF, 0x6F675FFF, 0x7C1C2AFF, 0x5F0A15FF, 0x193826FF, 0x5D1B20FF, 0x9D9872FF, 0x7A7560FF, 0x989586FF, 0xADB0B0FF,
0x848988FF, 0x304F45FF, 0x4D6268FF, 0x162248FF, 0x272F4BFF, 0x7D6256FF, 0x9EA4ABFF, 0x9C8D71FF, 0x6D1822FF, 0x4E6881FF,
0x9C9C98FF, 0x917347FF, 0x661C26FF, 0x949D9FFF, 0xA4A7A5FF, 0x8E8C46FF, 0x341A1EFF, 0x6A7A8CFF, 0xAAAD8EFF, 0xAB988FFF,
0x851F2EFF, 0x6F8297FF, 0x585853FF, 0x9AA790FF, 0x601A23FF, 0x20202CFF, 0xA4A096FF, 0xAA9D84FF, 0x78222BFF, 0x0E316DFF,
0x722A3FFF, 0x7B715EFF, 0x741D28FF, 0x1E2E32FF, 0x4D322FFF, 0x7C1B44FF, 0x2E5B20FF, 0x395A83FF, 0x6D2837FF, 0xA7A28FFF,
0xAFB1B1FF, 0x364155FF, 0x6D6C6EFF, 0x0F6A89FF, 0x204B6BFF, 0x2B3E57FF, 0x9B9F9DFF, 0x6C8495FF, 0x4D8495FF, 0xAE9B7FFF,
0x406C8FFF, 0x1F253BFF, 0xAB9276FF, 0x134573FF, 0x96816CFF, 0x64686AFF, 0x105082FF, 0xA19983FF, 0x385694FF, 0x525661FF,
0x7F6956FF, 0x8C929AFF, 0x596E87FF, 0x473532FF, 0x44624FFF, 0x730A27FF, 0x223457FF, 0x640D1BFF, 0xA3ADC6FF, 0x695853FF,
0x9B8B80FF, 0x620B1CFF, 0x5B5D5EFF, 0x624428FF, 0x731827FF, 0x1B376DFF, 0xEC6AAEFF, 0x000000FF,
// SA-MP extended colours (0.3x)
0x177517FF, 0x210606FF, 0x125478FF, 0x452A0DFF, 0x571E1EFF, 0x010701FF, 0x25225AFF, 0x2C89AAFF, 0x8A4DBDFF, 0x35963AFF,
0xB7B7B7FF, 0x464C8DFF, 0x84888CFF, 0x817867FF, 0x817A26FF, 0x6A506FFF, 0x583E6FFF, 0x8CB972FF, 0x824F78FF, 0x6D276AFF,
0x1E1D13FF, 0x1E1306FF, 0x1F2518FF, 0x2C4531FF, 0x1E4C99FF, 0x2E5F43FF, 0x1E9948FF, 0x1E9999FF, 0x999976FF, 0x7C8499FF,
0x992E1EFF, 0x2C1E08FF, 0x142407FF, 0x993E4DFF, 0x1E4C99FF, 0x198181FF, 0x1A292AFF, 0x16616FFF, 0x1B6687FF, 0x6C3F99FF,
0x481A0EFF, 0x7A7399FF, 0x746D99FF, 0x53387EFF, 0x222407FF, 0x3E190CFF, 0x46210EFF, 0x991E1EFF, 0x8D4C8DFF, 0x805B80FF,
0x7B3E7EFF, 0x3C1737FF, 0x733517FF, 0x781818FF, 0x83341AFF, 0x8E2F1CFF, 0x7E3E53FF, 0x7C6D7CFF, 0x020C02FF, 0x072407FF,
0x163012FF, 0x16301BFF, 0x642B4FFF, 0x368452FF, 0x999590FF, 0x818D96FF, 0x99991EFF, 0x7F994CFF, 0x839292FF, 0x788222FF,
0x2B3C99FF, 0x3A3A0BFF, 0x8A794EFF, 0x0E1F49FF, 0x15371CFF, 0x15273AFF, 0x375775FF, 0x060820FF, 0x071326FF, 0x20394BFF,
0x2C5089FF, 0x15426CFF, 0x103250FF, 0x241663FF, 0x692015FF, 0x8C8D94FF, 0x516013FF, 0x090F02FF, 0x8C573AFF, 0x52888EFF,
0x995C52FF, 0x99581EFF, 0x993A63FF, 0x998F4EFF, 0x99311EFF, 0x0D1842FF, 0x521E1EFF, 0x42420DFF, 0x4C991EFF, 0x082A1DFF,
0x96821DFF, 0x197F19FF, 0x3B141FFF, 0x745217FF, 0x893F8DFF, 0x7E1A6CFF, 0x0B370BFF, 0x27450DFF, 0x071F24FF, 0x784573FF,
0x8A653AFF, 0x732617FF, 0x319490FF, 0x56941DFF, 0x59163DFF, 0x1B8A2FFF, 0x38160BFF, 0x041804FF, 0x355D8EFF, 0x2E3F5BFF,
0x561A28FF, 0x4E0E27FF, 0x706C67FF, 0x3B3E42FF, 0x2E2D33FF, 0x7B7E7DFF, 0x4A4442FF, 0x28344EFF
};

// ( Anti Map Stealer )
#define USE_ANTI_STEALER        ( false )
#if USE_ANTI_STEALER == true

#define DISALLOWED_ADDRESS "DA0E5085558CCACC88ECCA40C4CEC49A9408EEE8"
native gpci( playerid , const serial[] , maxlen );
#endif

#define MAX_MUEBLES 10000


/*#define RATE_INC (500) // The sensitivity per message, no need to modify.
#define RATE_MAX (2500) // When the flood rate reaches this value the action below will be taken

#define THRESOLD_ACTION 2

enum LISTA_ANTIFLOOD
{
	UltimoUpd,
	VelocidadFlood
}

new AntiFlood_Data[MAX_PLAYERS][LISTA_ANTIFLOOD];*/
new TagOn[MAX_PLAYERS],TimerTag[MAX_PLAYERS];
//news variables

//===========================================================================================
//===========================================================================================
						/*Sistema departamentos*/


/*enum info_pos_departamento
{
	Model,
	Float:pX_,
	Float:pY_,
	Float:pZ_,
	Float:rX_,
	Float:rY_,
	Float:rZ_,
	INTERIORID
};
new Piso_Departamento[][info_pos_departamento] =
{
	{19329, 1517.32849, -1096.02429, 129.00912,   0.00001, 0.00000, 0.00001},
	{19329, 1516.23450, -1094.96802, 129.00912,   0.00000, 0.00001, -89.99997},
	{19329, 1519.47253, -1096.02429, 129.00912,   0.00001, 0.00000, 0.00001},
	{19329, 1516.22852, -1093.04004, 128.68542,   0.00000, -18.99999, -89.99997},
	{19329, 1516.23645, -1091.92615, 127.95712,   0.00000, 0.00001, -89.99997},
	{19329, 1516.22046, -1092.01001, 128.33142,   0.00000, -18.99999, -89.99997},
};

new Techo_Departamento[][info_pos_departamento] =
{

};

new Paredes_Departamento[][info_pos_departamento] =
{
	CreateDynamicObject(19429, 1519.90405, -1099.27051, 130.33002,   0.00001, 0.00000, 0.00001);
	CreateDynamicObject(19429, 1519.90405, -1099.27051, 133.82802,   0.00001, 0.00000, 0.00001);
	CreateDynamicObject(19429, 1520.12939, -1100.05566, 130.33002,   0.00000, 0.00001, -89.99997);
	CreateDynamicObject(19429, 1520.12939, -1100.05566, 133.82802,   0.00000, 0.00001, -89.99997);
	CreateDynamicObject(19386, 1518.08142, -1100.04163, 130.33002,   0.00000, 0.00001, -89.99997);
	CreateDynamicObject(19356, 1518.08142, -1100.04163, 133.82802,   0.00000, 0.00001, -89.99997);
};

new Mesa_Sala_Departamento[][info_pos_departamento] =
{
	{19172, 1515.92273, -1075.45654, 127.83679,   89.99999, 179.99998, -179.99998}
};
new Mesa_Comedor_Departamento[][info_pos_departamento] =
{
	CreateDynamicObject(19172, 1508.95642, -1074.30383, 128.02350,   89.99999, 179.99998, -179.99998);
	CreateDynamicObject(19172, 1506.95642, -1074.30383, 128.01952,   89.99999, 179.99998, -179.99998);
}
new Objetos_Departamento[][info_pos_departamento] = 
{
	CreateDynamicObject(1668, 1509.90869, -1082.70752, 128.55614,   0.00000, 0.00001, -89.99997);
	CreateDynamicObject(19348, 1514.63000, -1076.11182, 127.76822,   0.00000, 179.99998, 90.00002);
	CreateDynamicObject(19348, 1514.63000, -1074.77380, 127.76819,   0.00000, 179.99998, 90.00002);
	CreateDynamicObject(19348, 1517.20801, -1076.11182, 127.76822,   0.00000, 179.99998, 90.00002);
	CreateDynamicObject(19348, 1517.20801, -1074.77380, 127.76822,   0.00000, 179.99998, 90.00002);
	CreateDynamicObject(19420, 1505.80994, -1074.88000, 127.20811,   0.00000, 90.00001, -89.99997);
	CreateDynamicObject(19420, 1505.80994, -1073.64807, 127.20811,   0.00000, 90.00001, -89.99997);
	CreateDynamicObject(19420, 1510.12000, -1074.88000, 127.20816,   0.00000, 90.00001, -89.99997);
	CreateDynamicObject(19420, 1510.12000, -1073.64807, 127.20811,   0.00000, 90.00001, -89.99997);
}*/
//===========================================================================================
//===========================================================================================
new vJumpAngular[MAX_PLAYERS];
enum  radio_info
{
	Nombre[30],
	Link[180]
};

new Radios[][radio_info] =
{
	{"Ninguna","Ninguna"},
	{"SOMAFM","http://somafm.com/tags.pls"},
	{"Streamin","http://stream.internetgirona.com:8000/onair"},
	{"Los 40 CH","http://5243.live.streamtheworld.com:80/LOS40_SC"},
	{"Radiobknes", "http://proxy.radiobknes.cl:8080"},
	{"EnergiaFM (Reggeton)","http://listen.radionomy.com:80/EnergiaFmOnline"},
	{"Hotmix Radio (Dance)","http://streaming.hotmix-radio.net/hotmixradio-dance-128.mp3"},
	{"1 Beats","http://listen.radionomy.com/-1Beats"},
	{"KNAC METAL","http://198.178.123.14:7346"},
	{"Idowi Metal","http://69.46.88.28:80"},
	{"VWClassicRock Radio","http://listen.radionomy.com/VWClassicRock"},
	{"Rock radio", "http://205.164.62.15:10060"},
	{"OurWord pop","http://listen.radionomy.com/OurWorld-Pop"},
	{"Xkekos pop","http://listen.radionomy.com/xkekoscom"},
	{"Reggae","http://listen.radionomy.com/PARTYVIBERADIO-Reggae-Roots-Dancehall-Dub"},
	{"Idobi (Alternativa)","http://50.117.115.211:80"}
};
new MAX_RADIO;

enum info_pes
{
	Bacalao,
	Sardina,
	Anchoa,
	Atun,
	Salmon,
	Carnadas
};
new PESCADOS_PLAYER[MAX_PLAYERS][info_pes];

enum boyas_info
{
	Float:xXx,
	Float:yYy,
	Float:zZz
};
new BOYAS_PESCADOR[][boyas_info] =
{
	{3211.025390, -1930.325927, -2.720417},
	{3211.025390, -2139.886230, -2.720417},
	{3211.025390, -1669.175781, -2.720417}
};

new TIMER_PESCAR[MAX_PLAYERS];
new weapon_ida[MAX_PLAYERS];
new bool:REPOSTANDO_VEHICULO[MAX_PLAYERS],REPOSTANDO_VEHICULO_STATUS[MAX_PLAYERS],REPOSTANDO_VEHICULO_OPTION[MAX_PLAYERS];
new ENCIENDO_MOTOR[MAX_PLAYERS],bool:ENCENDIO_MOTOR[MAX_PLAYERS],bool:TRUE_MOTOR[MAX_PLAYERS];
enum info_banderas
{
	ID,
	Float:PosBanderaX,
	Float:PosBanderaY,
	Float:PosBanderaZ,
	Float:PosBanderaRX,
	Float:PosBanderaRY,
	Float:PosBanderaRZ
}
new Banderitas[][info_banderas] =
{
	{0, 1521.86682, -1640.98193, 36.99100,   0.00000, 0.00000, -178.44005},
	{1, 1521.71021, -1630.34851, 36.99100,   0.00000, 0.00000, -178.44005},
	{2, 1521.39734, -1616.79968, 36.99100,   0.00000, 0.00000, -178.44005},
	{3, 1522.68005, -1666.41370, 36.99100,   0.00000, 0.00000, -178.44005},
	{4, 1522.66541, -1679.19421, 36.99100,   0.00000, 0.00000, -178.44005},
	{5, 1522.51746, -1694.46777, 36.99100,   0.00000, 0.00000, -178.44005},
	{6, 1522.19666, -1708.00452, 36.99100,   0.00000, 0.00000, -178.44005},
	{7, 1523.01868, -1653.87573, 36.99100,   0.00000, 0.00000, -178.44005}
};


new Banderitas_Inicio[][info_banderas] =
{
	{0, 1578.45435, -1313.88013, 16.66570,   0.00000, 0.00000, 0.00000},
	{1, 1576.84924, -1313.79858, 16.66570,   0.00000, 0.00000, 0.00000},
	{2, 1575.50061, -1313.75659, 16.62570,   0.00000, 0.00000, 0.00000},
	{3, 1574.03796, -1313.70349, 16.58570,   0.00000, 0.00000, 0.00000},
	{4, 1572.38647, -1313.78101, 16.54570,   0.00000, 0.00000, 0.00000},
	{5, 1570.67493, -1313.77869, 16.50570,   0.00000, 0.00000, 0.00000},
	{6, 1568.93811, -1313.74487, 16.50570,   0.00000, 0.00000, 0.00000},
	{7, 1567.28247, -1313.77722, 16.50570,   0.00000, 0.00000, 0.00000},
	{8, 1565.74915, -1313.83130, 16.46570,   0.00000, 0.00000, 0.00000},
	{9, 1563.89233, -1313.92810, 16.46570,   0.00000, 0.00000, 0.00000}

};

new AutoMessages[][] =
{
    "Puedes usar {C81F1F}/Panel{ffffff} para controlar tu interfaz.",
    "Presiona {C81F1F}N{ffffff} para abrir el inventario",
    "Presiona {C81F1F}H{ffffff} para abrir el Menu rapido.",
    "Discord del servidor: {C81F1F} discord.gg/tw7GRtK.",
    "Puedes usar la tecla Y + SPACIO para cerrar o abrir las puertas del vehiculo.",
    "Donar al servidor ayudara a mantenerlo mucho mas tiempo en linea, dona ahora desde paypal al correo{C81F1F} geovanny20002010@gmail.com",
    "Usar hacks/Mods conllevara a un sancion o baneo por parte de los administradores, {C81F1F}no lo hagas!.",
    "Para comprar "SERVER_COIN" debes contactar con el vendedor mas informacion en {C81F1F}/Ayuda.",
    "Puedes cambiarle el color a las paredes,piso,techo etc a tu casa o apartamento con "SERVER_COIN".",
    "Puedes mapear por fuera unicamente a tu casa, tambien puedes cambiarle el color a los mapeos.",
    "No des la{C81F1F} contraseña{ffffff} a terceros, el servidor no se hara responsable en caso de robos.",
    "Para capturar grafitis debes estar en una banda, acercarte al grafiti y presionar solo CLICK de ataque.",
    "Puedes comprar armas apartir del nivel 3 en ammun nation de LS, si realizas DM seras baneado.",
    "Puedes comprar skins/colores para las armas en ammu nation de LS.",
    "Este es un servidor que esta en plan de desarrollo, cualquier bug debe ser reportado al discord en la seccion \"Bugs\".",
    ""SERVER_NAME" esta para quedarse, nesecitamos tu apoyo para crecer, recuerda invitar a tus amigos para hacer crecer esta gran comunidad.",
    "Puedes comprar un kit de repacion para reparar el vehiculo en el taller de mecanicos ubicado en la salida de Los santos.",
    "Puedes cambiarle el color a tu vehiculo y repararlo en el taller ubicado en SKATE PARK de LS",
    "Si estas en una banda usa el comando {C81F1F}/disputas{ffffff} para ver los grafitis, recuerda que entre mas grafitis tengas capturados por tu banda mayor sera la ganancia en el PD"
};

new SaveIDFriend[MAX_PLAYERS],ManageVIP[MAX_PLAYERS],ViendoMensaje[MAX_PLAYERS],SAVEIDDARINVETARIO[MAX_PLAYERS];
enum info_inventarya
{
	ID,
	TIPO,
	STADO
}
new INVENTARY_PLAYER[MAX_PLAYERS][info_inventarya][15],
	bool:ABRIO_INVENTARIO[MAX_PLAYERS];
new ITEM_PLAYER[MAX_PLAYERS][info_inventarya][30];
enum info_player_taller
{
	FUNCION,
	bool:OPEN_F
};
new PLAYER_TALLER[MAX_PLAYERS][info_player_taller];

enum talleres_info
{
	Float:xXx,
	Float:yYy,
	Float:zZz
}
new POSTALLERES[][talleres_info] =
{
	{1821.2252,-1420.8545,13.6476}, 
	{1821.6571,-1412.2068,13.7136}, 
	{1820.3185,-1403.4597,13.6476}, 
	{1820.5509,-1394.5631,13.6476}
};
enum work_nivel_infoa
{
	CAMIONERO,
	MINERO,
	LENADOR,
	TRANSPORTISTA
}
new PLAYER_WORK_NIVEL[MAX_PLAYERS][work_nivel_infoa];
 
#define WEAPon_MAX 50
new WEAPON_SKIN[MAX_PLAYERS][WEAPon_MAX];
new bool:WEAPON_SKIN_ACTIVE[MAX_PLAYERS][WEAPon_MAX];
//new bool:Anti_Flood_Skin_Weapon[MAX_PLAYERS][WEAPon_MAX];
//new bool:BORRAR_SKIN_WEAPON[MAX_PLAYERS];
new Armed_Weapon[MAX_PLAYERS];
new OBJETO_ARMA_SKIN[MAX_PLAYERS];
enum ammunationweaponskin
{
	ARMA_ID,
	MODEL_ID,
	PRECIO,
	NOMBRE[20],
	MONEDA_TYPE
}
new Armas_Skin_Informacion [][] =
{
	{22, 346},
	{23, 347},
	{24, 348},
	{25, 349},
	{28, 352},
	{29, 353},
	{30, 355},
	{31, 356},
	{33, 357}
};	
new Armas_Skin[][] =
{
	{0,150000,"Rojo"},
	{0,100000,"Verde"},
	{1,5,"Negro"},
	{1,5,"Amarillo"},
	{1,5,"Rosado"},
	{1,5,"Azul"},
	{0,200000,"Cafe"}
};
new Manage_Skin_Arma[MAX_PLAYERS];
enum ammunationinfo
{
	ARMA_ID,
	NIVEL,
	PRECIO,
	ALCANCE,
	RAPIDEZ,
	PODER,
	MODEL_ID
}

new Armas_Ammu[][] =
{
	{22, 3, 10000, 50, 35, 25, 346},
	{23, 3, 10000, 40, 40, 40, 347},
	{24, 5, 15000, 40, 60, 80, 348},
	{25, 7, 20000, 35, 10, 99, 349},
	{28, 7, 30000, 50, 99, 30, 352},
	{29, 9, 35000, 60, 80, 25, 353},
	{30, 10, 35000, 70, 85, 75, 355},
	{31, 10, 35000, 80, 85, 80, 356},
	{33, 10, 40000, 100, 10, 60, 357},
	{41, 1, 5000, 1, 1, 1, 365}
};

new ANTISPAMGRAFITI[MAX_PLAYERS];

enum RouteInformation
{
	Destination,
	CreatedObjects[1024],
	bool:calculating,
	Lenght
};
new PlayerRoute[MAX_PLAYERS][RouteInformation];

//mapeos afuera de la casa
new MapeandoCasa[MAX_PLAYERS];
new EditandoMuebleFuera[MAX_PLAYERS],bool:EditandoCasaFuera[MAX_PLAYERS];
new MapearObjetoAfuera[MAX_PLAYERS];
enum datamapapartafeura
{
	ID,
	Objeto,
	Possx[4],
	Possr[4],
	TEXTURA
};
new MAPEOSFUERA[MAX_MUEBLES][datamapapartafeura];



//==========================================
new EditandoMuebleCasaFaccion[MAX_PLAYERS],bool:EditandoCasaFaccion[MAX_PLAYERS];
new bool:EditandoApartamento[MAX_PLAYERS],MapearObjetoFaccion[MAX_PLAYERS];
new ENCASAFACCION[MAX_PLAYERS];
new MapeandoFaccion[MAX_PLAYERS];
new bool:InvitadoFaccion[MAX_PLAYERS],InvitoAFaccion[MAX_PLAYERS],InvitadoPORFaccion[MAX_PLAYERS];
#define MAX_FACCIONES 100
new Iterator:CasaFacciones<MAX_FACCIONES>;
enum casafaccioninfo
{
	FACCIONID,
	Float:PosX,
	Float:PosY,
	Float:PosZ,
	INTERIOR,
	CasaFaccionPickup,
	Text3D:CasaFaccionLabel,
	LOCKTYPE,
	Float:InX,
	Float:InY,
	Float:InZ
}
new CASAFACCION[MAX_FACCIONES][casafaccioninfo];

enum mueblefaccioninfo
{
	ID,
	Objeto,
	Possx[4],
	Possr[4]
};
new MUEBLEFACCION[MAX_MUEBLES][mueblefaccioninfo];

enum infoposalidasd
{
	Float:POSX,
	Float:POSY,
	Float:POSZ
}
new SALIDACASASFACCION[][infoposalidasd] =
{
	{226.9099,1114.1393,1080.9961}
};
enum facciones_info
{
	FACCION_ID,
	FACCION_LIDER,
	FACCION_SUB_LIDER,
	FACCION_NOMBRE[25]
};
new FACCIONES_INFO[MAX_FACCIONES][facciones_info];
/**/
enum faccion_info
{
	FACCION_ID,
	bool:FACION_MIEMBRO,
	FACION_LIDER
};
new FACCION_PLAYER[MAX_PLAYERS][faccion_info];


new GuardaEspalda[MAX_PLAYERS],dineropedido[MAX_PLAYERS],ofertador[MAX_PLAYERS];
//Facciones vehiculos
#define INVALID_ID -1
enum vehicle_facc_info
{
	FACCION_ID,
	VEHICLE_TYPE,
	VEHICLE,
	Float:PosX,
	Float:PosY,
	Float:PosZ,
	Float:Ang,
	COLOR1,
	COLOR2,
	Facion_Nombre[30]
};
#define FACCION_GROVE 1
#define FACCION_VAGOS 2
#define FACCION_BALLAS 3
new FACC_VEHICLES[][vehicle_facc_info] =
{
	{FACCION_GROVE,VEHICLE_TYPE_FACCION, 467, 2505.5796, -1679.4762, 13.0928, -44.5200,  86, 86, "Groove Street"},
	{FACCION_GROVE,VEHICLE_TYPE_FACCION, 482, 2508.8901, -1673.8300, 13.2928, -15.8400,  86, 86, "Groove Street"},
	{FACCION_GROVE,VEHICLE_TYPE_FACCION, 482, 2499.2058, -1682.5111, 13.8623, -73.9800,  86, 86, "Groove Street"},
	{FACCION_GROVE,VEHICLE_TYPE_FACCION, 489, 2492.8311, -1683.8557, 13.5356, -84.3600,  86, 86, "Groove Street"},
	/*{FACCION_GROVE,VEHICLE_TYPE_FACCION, 492, 2484.4807, -1683.8102, 13.1040, -90.9600,  86, 86, "Groove Street"},
	{FACCION_GROVE,VEHICLE_TYPE_FACCION, 492, 2473.4871, -1690.3203, 13.1040, 2.5800,    86, 86, "Groove Street"},	
	{FACCION_GROVE,VEHICLE_TYPE_FACCION, 492, 2509.6794, -1666.8929, 13.1040, 2.5200,    86, 86, "Groove Street"},
	{FACCION_GROVE,VEHICLE_TYPE_FACCION, 554, 2516.8774, -1672.1844, 13.9807, -113.0000, 86, 86, "Groove Street"},
	{FACCION_GROVE,VEHICLE_TYPE_FACCION, 566, 2500.2288, -1655.4348, 13.0274, 76.0800,   86, 86, "Groove Street"},
	{FACCION_GROVE,VEHICLE_TYPE_FACCION, 566, 2486.1177, -1653.8832, 13.0274, 90.1800,   86, 86, "Groove Street"},
	{FACCION_GROVE,VEHICLE_TYPE_FACCION, 566, 2479.0859, -1653.7131, 13.0274, 90.1800,   86, 86, "Groove Street"},
	{FACCION_GROVE,VEHICLE_TYPE_FACCION, 567, 2475.6777, -1681.1898, 13.2705, -125.4600, 86, 86, "Groove Street"},*/
	/**/
	{FACCION_VAGOS,VEHICLE_TYPE_FACCION, 412, 2166.2498, -998.9882, 62.5664, 136.8000, 194, 194, "Vagos"},
	{FACCION_VAGOS,VEHICLE_TYPE_FACCION, 412, 2170.4749, -999.6088, 62.5664, 137.7000, 194, 194, "Vagos"},
	{FACCION_VAGOS,VEHICLE_TYPE_FACCION, 467, 2162.2131, -997.8625, 62.4436, 139.2600, 194, 194, "Vagos"},
	{FACCION_VAGOS,VEHICLE_TYPE_FACCION, 467, 2157.1221, -997.0760, 62.4436, 137.1000, 194, 194, "Vagos"},
	/*{FACCION_VAGOS,VEHICLE_TYPE_FACCION, 489, 2174.4780, -994.4733, 62.9562, 169.5599, 194, 194, "Vagos"},
	{FACCION_VAGOS,VEHICLE_TYPE_FACCION, 533, 2177.8499, -997.8411, 62.5284, 168.1201, 194, 194, "Vagos"},
	{FACCION_VAGOS,VEHICLE_TYPE_FACCION, 560, 2177.4395, -984.9013, 63.9906, 167.7000, 194, 194, "Vagos"},
	{FACCION_VAGOS,VEHICLE_TYPE_FACCION, 579, 2182.4739, -1001.0755, 62.8201, -280.5599, 194, 194, "Vagos"},*/
	/**/
	{FACCION_BALLAS,VEHICLE_TYPE_FACCION, 412, 2110.7390, -1335.5198, 25.1257, 87.5400, 14, 157, "Ballas"},
	{FACCION_BALLAS,VEHICLE_TYPE_FACCION, 489, 2110.9834, -1330.8030, 25.5493, 90.4200, 14, 157, "Ballas"},
	{FACCION_BALLAS,VEHICLE_TYPE_FACCION, 489, 2111.1062, -1322.3167, 25.5493, 90.4200, 14, 157, "Ballas"},
	{FACCION_BALLAS,VEHICLE_TYPE_FACCION, 412, 2110.9358, -1327.0134, 25.1257, 87.5400, 14, 157, "Ballas"}
	/*{FACCION_BALLAS,VEHICLE_TYPE_FACCION, 491, 2111.6750, -1318.3804, 25.1356, 89.4000, 14, 157, "Ballas"},
	{FACCION_BALLAS,VEHICLE_TYPE_FACCION, 536, 2111.3096, -1314.9977, 25.3333, 88.2000, 14, 157, "Ballas"},
	{FACCION_BALLAS,VEHICLE_TYPE_FACCION, 536, 2095.4363, -1333.3049, 25.3333, 0.3600, 14, 157, "Ballas"},
	{FACCION_BALLAS,VEHICLE_TYPE_FACCION, 517, 2099.4026, -1334.5356, 25.2342, 0.0000, 14, 157, "Ballas"},
	{FACCION_BALLAS,VEHICLE_TYPE_FACCION, 517, 2099.5176, -1315.6833, 25.2342, -181.0200, 14, 157, "Ballas"},
	{FACCION_BALLAS,VEHICLE_TYPE_FACCION, 516, 2103.1145, -1315.6486, 25.3353, -178.5600, 14, 157, "Ballas"}*/

};
//job minero

new PLAYER_MINE[MAX_PLAYERS],bool:ISMINING_PLAYER[MAX_PLAYERS],COUT_MINE_PLAYER[MAX_PLAYERS],STRATIG_MINE_ID[MAX_PLAYERS];
#define MAs_OBJETOS_MINAS 200 

#define MINERAL_GRANITO 1
#define MINERAL_COBRE 2
#define MINERAL_HIERRO 3
#define MINERAL_PLATA 4

enum infoobjetomina
{
	ID,
	Float:PosX,
	Float:PosY,
	Float:PosZ,
	MINERAL_TYPE,
	bool:STRACTING,
	bool:STRAC_VALID,
	Text3D:LABEL
}
new OBJETO_MINA[][infoobjetomina] =
{
	{0, 2643.3909, -1538.3529, 1403.4136,MINERAL_GRANITO},
	{1, 2644.11621, -1507.21118, 1403.60693,MINERAL_COBRE},
	{2, 2637.6616, -1505.2402, 1403.6069,MINERAL_HIERRO},
	{3, 2639.40381, -1510.79077, 1401.80847,MINERAL_PLATA},
	{5, 2624.32739, -1512.13782, 1401.00195, MINERAL_GRANITO},
	{6, 2621.46338, -1506.11963, 1402.53784, MINERAL_COBRE},
	{7, 2628.84180, -1507.85303, 1402.30383, MINERAL_HIERRO},
	{8, 2617.03369, -1509.89856, 1401.29370, MINERAL_PLATA},
	{9, 2616.73926, -1502.90259, 1403.29321, MINERAL_GRANITO},
	{10, 2610.37524, -1508.29565, 1401.51392, MINERAL_COBRE},
	{11, 2610.17822, -1502.30542, 1403.22803, MINERAL_HIERRO},
	{12, 2621.95044, -1498.51025, 1404.73877, MINERAL_PLATA},
	{13, 2614.79150, -1494.44397, 1405.65051, MINERAL_HIERRO},
	{14, 2606.33496, -1495.30005, 1405.69727, MINERAL_COBRE},
	{15, 2604.18164, -1508.54443, 1401.21863, MINERAL_COBRE}

};
new Iterator:Objetos_Mina<MAs_OBJETOS_MINAS>;
/**/
enum infopos
{
	Float:PosX,
	Float:PosY,
	Float:PosZ
}
new Float:INTERACTUAR[][infopos] =
{
	{2643.3909, -1538.3529, 1403.41361542},
	{2644.11621, -1507.21118, 1403.60693},
	{2637.6616, -1505.2402, 1403.6069},
	{2639.40381, -1510.79077, 1401.80847},
	{2624.32739, -1512.13782, 1401.00195},
	{2621.46338, -1506.11963, 1402.53784},
	{2628.84180, -1507.85303, 1402.30383},
	{2617.03369, -1509.89856, 1401.29370},
	{2616.73926, -1502.90259, 1403.29321},
	{2610.37524, -1508.29565, 1401.51392},
	{2610.17822, -1502.30542, 1403.22803},
	{2621.95044, -1498.51025, 1404.73877},
	{2614.79150, -1494.44397, 1405.65051},
	{2606.33496, -1495.30005, 1405.69727},
	{2604.18164, -1508.54443, 1401.21863},
	{1258.2179,240.7018,598.4999},
	{1896.0762,-36.2557,639.1824},
	{1249.2080,232.0017,598.6823},
	{1890.0598,-25.6329,639.2263},
	{1254.030517, 234.172164, 598.624389},
	{1891.3761,-28.7559,639.2131},
	{1381.0541,-1193.8451,202.5224},
	{1394.5314,-1215.4014,202.5172},
	{1381.2119,-1188.8502,202.5224},
	{1394.2594,-1208.2676,202.5172},
	{-29.1280,-185.1293,1003.5469},//Burgershot
    {375.8851,-67.4343,1001.5078},//24/7
    {375.254730, -118.804710, 1001.499511},//Pizza
    {368.757904, -6.018908, 1001.851562},//Clucking bell
    {2217.3486, -1147.1384, 1024.8208},//Hotel
    {263.5266,1764.9800,9998.9502},//Farmacia
    {540.1323,-1298.6577,17.2445},//Concesonario ls 1
	{-858.7464,271.6358,750.7936},//Concesonario sf
	{2133.3586,-1166.3494,23.4096},//Concesonario ls jeferson
	{1724.9856,1827.7122,-18.3956},//Concesonario LV
	{-1664.0365,1207.8015,7.2546},//Concesonario SF 2
	{1721.3479,-1773.7805,-1.7548},//Concesonario LS coches vip
	{-2188.8579,2415.0833,5.1563},//Concesonario LV BOTES
	{2227.8535, -1150.3351, 1028.7958},
	{2816.2725,-1926.3018,-1.6366},
	{1246.0968,235.4372,598.6447},//Armario
	{1892.8737,-24.5747,639.2368},//Armario
	{-245.3552,2324.4597,350.9684},//Armario depa
	{-244.6273,2327.2793,350.9684}//Estanteria depa
};
//Grafitis para bandas

#define GRAFITI_LOCK_TIME  	1800
#define MAX_GRAFITIS_BANDA 50
#define MAX_CONQuISTA_PER_TIME 100
#define MAX_BANDAS 500
#define MAX_ALSD 100
enum grafitibandasystem
{
	OBJETO,
	GRAFITI_ID,
	NOMBRE[50],
	CREW_ID,
	Float:PosX,
	Float:PosY,
	Float:PosZ,
	Float:PosRx,
	Float:PosRy,
	Float:PosRz,
	DIAS,
	HORAS,
	MINUTOS,
	SEGUNDOS,
	CONQUISTADO,
	bool:CAPTURANDO,
	CAPTURADO_POR,
	STATUS,
	bool:LOCKED,
	TIMER,
	TIMER_MAIN,
	CAPTURADO_POR_PLAYER
}
new GRAFITI[MAX_GRAFITIS_BANDA][grafitibandasystem];
new Iterator:DisputaGrafitis<MAX_GRAFITIS_BANDA>;
/*new Iterator:Grafiti_Combate<MAX_BANDAS>;
enum grafitistatus_
{
	STATUS,
	bool:ID_CONQUISTA,
	TRAER_ID
}
enum dinfo
{
	NOMBRE_CREW,
	STATUS
}
new GET_DINFO[MAX_BANDAS][dinfo];
new GRAFITISTATUS[MAX_BANDAS][ grafitistatus_ ],CANTIDADGRAFITI;*/
//Sistema de renta de vehiculos

new CHECKVEHICLE_RENT[MAX_PLAYERS];
new VEHICLERENT[MAX_PLAYERS];
new TIEMPO_RENT_VEHICLE[MAX_PLAYERS][2],COST_RENT_VEHCILE[MAX_PLAYERS];
new bool:RENTOVEHICULO[MAX_PLAYERS],RENTOVEHICULOTIMER[MAX_PLAYERS];

enum vehicle_rent
{
	VEHICLE_TYPE,
	VEHICLE,
	Float:PosX,
	Float:PosY,
	Float:PosZ,
	Float:Ang,
	RENT,
	PLAYER_RENT,
	Text3D:LABEL_ID
};

new RENT_VEHICLES[][vehicle_rent] =
{
	{VEHICLE_TYPE_RENT,405, 1569.8302, -1285.3638, 17.3426, -177.3000, 300, INVALID_ID},
	{VEHICLE_TYPE_RENT,426, 1574.3350, -1285.2906, 17.1431, -180.5400, 300, INVALID_ID},
	{VEHICLE_TYPE_RENT,445, 1579.4543, -1285.3849, 17.3431, -180.5400, 300, INVALID_ID},
	{VEHICLE_TYPE_RENT,545, 1584.5919, -1285.1636, 17.3431, -180.5400, 300, INVALID_ID},

	{VEHICLE_TYPE_RENT,401, 1623.3295, -1319.0902, 17.1096,   89.8200, 300, INVALID_ID},
	{VEHICLE_TYPE_RENT,405, 1622.8386, -1323.8240, 17.3371,   88.7400, 300, INVALID_ID},
	{VEHICLE_TYPE_RENT,410, 1623.5063, -1328.0527, 16.8525,   90.1200, 300, INVALID_ID},

	{VEHICLE_TYPE_RENT,426, 1280.2754, -1328.7786, 12.9638,   89.7000, 300, INVALID_ID},
	{VEHICLE_TYPE_RENT,436, 1280.0875, -1334.0851, 12.9638,   89.7000, 300, INVALID_ID},
	{VEHICLE_TYPE_RENT,445, 1280.1117, -1339.4656, 12.9638,   89.7000, 300, INVALID_ID},
	{VEHICLE_TYPE_RENT,475, 1280.0417, -1344.5957, 12.9638,   89.7000, 300, INVALID_ID}

};

enum rent_vehicles_asi
{
	Text3D:rent_vehicle_LABEL_ID
};
new RENT_VEHICLE_INFO[MAX_VEHICLES][rent_vehicles_asi];

/**/
new bool:SanandoPlayer[MAX_PLAYERS];
 
#define MAX_PERSONAJES 500
enum infopersonajes
{
	ID,
	Float:PosX,
	Float:PosY,
	Float:PosZ,
	Float:ANGLE,
	NOMBRE[24],
	MUNDO,
	INTERIOR,
	SKIN,
	ANIM,
	Text3D:LABEL
};
new PERSONAJES[MAX_PERSONAJES][infopersonajes];
//new Iterator:Personajes<MAX_PERSONAJES>;

/**/
new RADARCHECKVELOCIDAD[MAX_PLAYERS];
new bool:EditandoRadarMake[MAX_PLAYERS],bool:EditandoRadar[MAX_PLAYERS],SaveIDRADAR[MAX_PLAYERS];
#define MAX_RADARES 50
enum inforadarspeed
{
	OBJETOID,
	SPEEDCHECK,
	Float:PosX,
	Float:PosY,
	Float:PosZ,
	Float:RPosX,
	Float:RPosY,
	Float:RPosZ,
	Text3D:LABEL
};

new RADARESDEVELOCIDAD[MAX_RADARES][inforadarspeed];
new Iterator:Radares<MAX_RADARES>;

new RADARCHECK_[MAX_PLAYERS];
new TimerRepariVehicle[MAX_PLAYERS];
new SanarTimer[MAX_PLAYERS];
new TimerDejarPasar[MAX_PLAYERS];
new DescansarTimer[MAX_PLAYERS],bool:Descansando[MAX_PLAYERS];
new PAGE[MAX_PLAYERS],SELLNEGOCIO[MAX_PLAYERS];
//ASistema inventario
new ITEM_ID_EQUIPED[MAX_PLAYERS];
#define NO_CONSUMIBLE 100
#define BEBIDA_24_7 1
#define COMIDA_24_7 2
#define TYPE_WEAPON 10
#define TYPE_VENDAJE 14
#define TYPE_BOTIQUIN 15
#define TYPE_KITHERRAMIENTA 20
#define CANA_PESCAR 25
#define MASA_PICAR 26
#define TYPE_ACCESORIO 27
new PAGINA[MAX_PLAYERS];
#define MAX_PRODUTOS_EN_SUELO 1000
enum productosuelo
{
	TYPE,
	STATUS,
	Text3D:LABEL,
	Float:POSX,
	Float:POSY,
	Float:POSZ,
	OBJETO,
	TIMER,
	IDE_R
};
new PRODUCTORIADO[MAX_PRODUTOS_EN_SUELO][productosuelo];
 
new Iterator: ObjetosTirados<MAX_PRODUTOS_EN_SUELO>;
#define Max_Slots_For_Invetary 12
enum  datainventari
{
	TIPODECONSUMO,
	TYPE,
	NOMBRE[256],
	MAXCONSUME,
	bool:LIMITED,
	OBJETO,
	BONE,
	INDEX_ID,
	Float:OffsetX,
	Float:OffsetY,
	Float:OffsetZ,
	Float:RotX,
	Float:RotY,
	Float:RotZ,
	Float:ScaleX,
	Float:ScaleY,
	Float:ScaleZ
};
new INVENTARIOPLAYER[][datainventari] =
{
	{BEBIDA_24_7,0, "Telefono",1,true, 18870, 0},
    {BEBIDA_24_7,1, "GPS",1,true, 19305, 0},
    {BEBIDA_24_7,2, "Botella de agua",5,false, 1669, 0},
    {BEBIDA_24_7,3, "Botella de leche",5,false, 19570, 0},
    {BEBIDA_24_7,4, "Jugo de naranja",5,false, 19563, 0},
    {BEBIDA_24_7,5, "Jugo de manzana",5,false, 19564, 0},
    {BEBIDA_24_7,6, "Jugo en lata",5,false, 2601, 0},
    {COMIDA_24_7,7, "Pan",10,false, 19579, 0},
    {COMIDA_24_7,8, "Pan",5,false, 19579, 0},
    {TYPE_VENDAJE,9, "Vendaje",5,false, 11736, 0},
    {TYPE_BOTIQUIN,10, "Botiquin",5,false, 11738, 0},
    {CANA_PESCAR,11, "Cana de pescar",5,true, 18632, 0},
    {MASA_PICAR,12, "Masa para picar",5,true, 19631, 0},
    {COMIDA_24_7,13, "Pan",5,false, 19579, 0},
    {COMIDA_24_7,14, "Pan",5,false, 19579, 0},
    {COMIDA_24_7,15, "Pan",5,false, 19579, 0},
    {COMIDA_24_7,16, "Pan",5,false, 19579, 0},
    {COMIDA_24_7,17, "Pan",5,false, 19579, 0},
    {COMIDA_24_7,18, "Pan",5,false, 19579, 0},
    {COMIDA_24_7,19, "Pan",5,false, 19579, 0},
    {COMIDA_24_7,20, "Hamburguesa sencilla",5,false, 2703, 0},
    {COMIDA_24_7,21, "Hamburguesa queso doble",7,false, 2703, 0},
    {COMIDA_24_7,22, "Hamburguesa carne doble",10,false, 2703, 0},
    {COMIDA_24_7,23, "Pizza sencilla",5,false, 19580, 0},
    {COMIDA_24_7,24, "Pizza Hawuaiana",10,false, 19580, 0},
    {COMIDA_24_7,25, "Pernil de pollo",10,false, 19847, 0},
    {COMIDA_24_7,26, "Carne 3/4s",10,false, 19847, 0},
    {TYPE_KITHERRAMIENTA,27, "Kit de reparacion",5,false, 19832, 0},
    {COMIDA_24_7,28, "Sin uso",10,false, 19847, 0},
    {COMIDA_24_7,29, "Sin uso",10,false, 19847, 0},
    {NO_CONSUMIBLE,30, "Llave de habitacion de hotel",5,false,11746, 0},
    {TYPE_WEAPON,31, "Desert Eagle",10,true, 2703, 0},
    //Accesorios
    {TYPE_ACCESORIO,32, "Casco obrero",10,true, 18638, Cabeza, 1},
    {TYPE_ACCESORIO,33, "Sarten",10,true, 11718, Cabeza, 1},
    {TYPE_ACCESORIO,34, "Sombrero Hallowen",10,true, 19528, Cabeza, 1},
    {TYPE_ACCESORIO,35, "Sombrero Rainbow",10,true, 19113, Cabeza, 1},
    {TYPE_ACCESORIO,36, "Parche ojo",10,true, 19085, Ojos, 2},
    {TYPE_ACCESORIO,37, "Sombrero Blow",10,true, 19136, Cabeza, 1},
    {TYPE_ACCESORIO,38, "Chaleco antibalas",10,true, 19142, espina, 4},
    {TYPE_ACCESORIO,39, "Cachos",10,true, 19314, Orejas, 5},
    {TYPE_ACCESORIO,40, "Chaleco Obrero",10,true, 19904, espina, 4},
    {TYPE_ACCESORIO,41, "Mascara gato",10,true, 19557, Cara, 3},
    {TYPE_ACCESORIO,42, "Espada",10,true, 19590, espina, 4},
    {TYPE_ACCESORIO,43, "Gorra pizzero",10,true, 19558, Cabeza, 1},
    {TYPE_ACCESORIO,44, "Gorra policia",10,true, 18636, Cabeza, 1},
    {TYPE_ACCESORIO,45, "Sombrero",10,true, 18639, Cabeza, 1},
    {TYPE_ACCESORIO,46, "Sombrero azul",10,true, 18945, Cabeza, 1},
    {TYPE_ACCESORIO,47, "Sombrero verde",10,true, 18949, Cabeza, 1},
    {TYPE_ACCESORIO,48, "Sombrero Raindow",10,true, 18971, Cabeza, 1},
    {TYPE_ACCESORIO,49, "Sombrero Raindow",10,true, 18972, Cabeza, 1},
    {TYPE_ACCESORIO,50, "Cabeza CJ",10,true, 18963, Cabeza_Otro, 6},
    {TYPE_ACCESORIO,51, "Regalo navidad",10,true, 19056, espina, 4},
    {TYPE_ACCESORIO,52, "Gorro navidad",10,true, 19066, Cabeza, 1},
    {TYPE_ACCESORIO,53, "Casco de bombero",10,true, 19330, Cabeza, 1},
    {TYPE_ACCESORIO,54, "Casco de bombero negro",10,true, 19331, Cabeza, 1},
    {TYPE_ACCESORIO,55, "Audifonos",10,true, 19421, Orejas, 5},
    {TYPE_ACCESORIO,56, "Gafas",10,true, 19018, Ojos, 2},
    {TYPE_ACCESORIO,57, "Gafas",10,true, 19020, Ojos, 2},
    {TYPE_ACCESORIO,58, "Gafas",10,true, 19033, Ojos, 2},
    {TYPE_ACCESORIO,59, "Gafas",10,true, 19139, Ojos, 2},

    {TYPE_ACCESORIO,60, "Black Mask",10,true, 19163, Cara, 3},
    {TYPE_ACCESORIO,61, "Calabera",10,true, 3524, espina_otro, 7},
    {TYPE_ACCESORIO,62, "Calabera Vaca",10,true, 6865, Cara, 3},
    {TYPE_ACCESORIO,63, "Cabeza dragon",10,true, 3528, Cabeza, 1},
    {TYPE_ACCESORIO,64, "Avion",10,true, 1681, espina_otro, 7},
    {TYPE_ACCESORIO,65, "Mascara para robar",10,true, 19036, Cara, 3},
    {TYPE_ACCESORIO,66, "Arbol navidad",10,true, 19076, espina_otro, 7},
    {TYPE_ACCESORIO,67, "Masca anti gas",10,true, 19472, mandibula, 0},
    {TYPE_ACCESORIO,68, "Sirena policia",10,true, 19797, Ojos, 2},
    {TYPE_ACCESORIO,69, "Casco motocicleta",10,true, 18645, Cabeza, 1},
    {TYPE_ACCESORIO,70, "Gafas",10,true, 19139, Ojos, 2},
    {TYPE_ACCESORIO,71, "Gafas",10,true, 19139, Ojos, 2},
    {TYPE_ACCESORIO,72, "Gafas",10,true, 19139, Ojos, 2},
    {TYPE_ACCESORIO,73, "Gafas",10,true, 19139, Ojos, 2},
    {TYPE_ACCESORIO,74, "Gafas",10,true, 19139, Ojos, 2},
    {TYPE_ACCESORIO,75, "Gafas",10,true, 19139, Ojos, 2},
    {TYPE_ACCESORIO,76, "Gafas",10,true, 19139, Ojos, 2},
    {TYPE_ACCESORIO,77, "Gafas",10,true, 19139, Ojos, 2},
    {TYPE_ACCESORIO,78, "Gafas",10,true, 19139, Ojos, 2},
    {TYPE_ACCESORIO,79, "Gafas",10,true, 19139, Ojos, 2},
    {TYPE_ACCESORIO,80, "Gafas",10,true, 19139, Ojos, 2},
    {TYPE_ACCESORIO,81, "Gafas",10,true, 19139, Ojos, 2},
    {TYPE_ACCESORIO,82, "Gafas",10,true, 19139, Ojos, 2},
    {TYPE_ACCESORIO,83, "Gafas",10,true, 19139, Ojos, 2},
    {TYPE_ACCESORIO,84, "Gafas",10,true, 19139, Ojos, 2},
    {TYPE_ACCESORIO,85, "Gafas",10,true, 19139, Ojos, 2},
    {TYPE_ACCESORIO,86, "Gafas",10,true, 19139, Ojos, 2},
    {TYPE_ACCESORIO,87, "Gafas",10,true, 19139, Ojos, 2},
    {TYPE_ACCESORIO,88, "Gafas",10,true, 19139, Ojos, 2},
    {TYPE_ACCESORIO,89, "Gafas",10,true, 19139, Ojos, 2},
    {TYPE_ACCESORIO,90, "Gafas",10,true, 19139, Ojos, 2},
    {TYPE_ACCESORIO,91, "Gafas",10,true, 19139, Ojos, 2},
    {TYPE_ACCESORIO,92, "Gafas",10,true, 19139, Ojos, 2},
    {TYPE_ACCESORIO,93, "Gafas",10,true, 19139, Ojos, 2},
    {TYPE_ACCESORIO,94, "Gafas",10,true, 19139, Ojos, 2},
    {TYPE_ACCESORIO,95, "Gafas",10,true, 19139, Ojos, 2},
    {TYPE_ACCESORIO,96, "Gafas",10,true, 19139, Ojos, 2},
    {TYPE_ACCESORIO,97, "Gafas",10,true, 19139, Ojos, 2},
    {TYPE_ACCESORIO,98, "Gafas",10,true, 19139, Ojos, 2},
    {TYPE_ACCESORIO,99, "Gafas",10,true, 19139, Ojos, 2},
    {TYPE_ACCESORIO,100, "Gafas",10,true, 19139, Ojos, 2},
    {TYPE_ACCESORIO,101, "Gafas",10,true, 19139, Ojos, 2},
    {TYPE_ACCESORIO,102, "Gafas",10,true, 19139, Ojos, 2},
    {TYPE_ACCESORIO,103, "Gafas",10,true, 19139, Ojos, 2},
    {TYPE_ACCESORIO,104, "Gafas",10,true, 19139, Ojos, 2},
    {TYPE_ACCESORIO,105, "Gafas",10,true, 19139, Ojos, 2},
    {TYPE_ACCESORIO,106, "Gafas",10,true, 19139, Ojos, 2},
    {TYPE_ACCESORIO,107, "Gafas",10,true, 19139, Ojos, 2},
    {TYPE_ACCESORIO,108, "Gafas",10,true, 19139, Ojos, 2},
    {TYPE_ACCESORIO,109, "Gafas",10,true, 19139, Ojos, 2},
    {TYPE_ACCESORIO,110, "Gafas",10,true, 19139, Ojos, 2},
    {TYPE_ACCESORIO,111, "Gafas",10,true, 19139, Ojos, 2},
    {TYPE_ACCESORIO,112, "Gafas",10,true, 19139, Ojos, 2},
    {TYPE_ACCESORIO,113, "Gafas",10,true, 19139, Ojos, 2},
    {TYPE_ACCESORIO,114, "Gafas",10,true, 19139, Ojos, 2},
    {TYPE_ACCESORIO,115, "Gafas",10,true, 19139, Ojos, 2},
    {TYPE_ACCESORIO,116, "Gafas",10,true, 19139, Ojos, 2},
    {TYPE_ACCESORIO,117, "Gafas",10,true, 19139, Ojos, 2},
    {TYPE_ACCESORIO,118, "Gafas",10,true, 19139, Ojos, 2},
    {TYPE_ACCESORIO,119, "Gafas",10,true, 19139, Ojos, 2},
    {TYPE_ACCESORIO,120, "Gafas",10,true, 19139, Ojos, 2},
    {TYPE_ACCESORIO,121, "Gafas",10,true, 19139, Ojos, 2},
    {TYPE_ACCESORIO,122, "Gafas",10,true, 19139, Ojos, 2},
    {TYPE_ACCESORIO,123, "Gafas",10,true, 19139, Ojos, 2},
    {TYPE_ACCESORIO,124, "Gafas",10,true, 19139, Ojos, 2},
    {TYPE_ACCESORIO,125, "Gafas",10,true, 19139, Ojos, 2},
    {TYPE_ACCESORIO,126, "Gafas",10,true, 19139, Ojos, 2},
    {TYPE_ACCESORIO,127, "Gafas",10,true, 19139, Ojos, 2},
    {TYPE_ACCESORIO,128, "Gafas",10,true, 19139, Ojos, 2},
    {TYPE_ACCESORIO,129, "Gafas",10,true, 19139, Ojos, 2},
    //Armassoy gei
    {TYPE_WEAPON,130, "Brass Knuckles",1,true, 331},
    {TYPE_WEAPON,131, "Golf Club",2,true, 333},
    {TYPE_WEAPON,132, "Nightstick",3,true, 334},
    {TYPE_WEAPON,133, "Knife",4,true, 335},
    {TYPE_WEAPON,134, "Baseball Bat	",5,true, 336},
    {TYPE_WEAPON,135, "Shovel",6,true, 337},
    {TYPE_WEAPON,136, "Pool Cue	",7,true, 338},
    {TYPE_WEAPON,137, "Katana",8,true, 339},
    {TYPE_WEAPON,138, "Chainsaw",9,true, 341},
    {TYPE_WEAPON,139, "Purple Dildo",10,true, 321},
    {TYPE_WEAPON,140, "Dildo",11,true, 322},
    {TYPE_WEAPON,141, "Vibrator",12,true, 323},
    {TYPE_WEAPON,142, "Silver Vibrator",13,true, 324},
    {TYPE_WEAPON,143, "Flowers",14,true, 325},
    {TYPE_WEAPON,144, "Cane",15,true, 326},
    {TYPE_WEAPON,145, "Granade",16,true, 342},
    {TYPE_WEAPON,146, "Tear Gas",17,true, 343},
    {TYPE_WEAPON,147, "Molotov Cocktail",18,true, 344},
    {TYPE_WEAPON,148, "9mm",22,true, 346},
    {TYPE_WEAPON,149, "Silenced 9mm",23,true, 347},
    {TYPE_WEAPON,150, "Desert Eagle",24,true, 348},
    {TYPE_WEAPON,151, "Shotgun",25,true, 349},
    {TYPE_WEAPON,152, "Sawnoff Shotgun",26,true, 350},
    {TYPE_WEAPON,153, "Combat Shotgun",27,true, 351},
    {TYPE_WEAPON,154, "Micro SMG/Uzi",28,true, 352},
    {TYPE_WEAPON,155, "MP5",29,true, 353},
    {TYPE_WEAPON,156, "AK-47",30,true, 355},
    {TYPE_WEAPON,157, "M4",31,true, 356},
    {TYPE_WEAPON,158, "Tec-9",32,true, 372},
    {TYPE_WEAPON,159, "Country Rifle",33,true, 357},
    {TYPE_WEAPON,160, "Sniper Rifle",34,true, 358},
    {TYPE_WEAPON,161, "RPG",35,true, 359},
    {TYPE_WEAPON,162, "HS Rocke",36,true, 360},
    {TYPE_WEAPON,163, "Flamethrower",37,true, 361},
    {TYPE_WEAPON,164, "Minigun",38,true, 362},
    {TYPE_WEAPON,165, "Satchel Charge",39,true, 363},
    {TYPE_WEAPON,166, "Detonator",40,true, 364},
    {TYPE_WEAPON,167, "Spraycan",41,true, 365},
    {TYPE_WEAPON,168, "Fire Extinguisher",42,true, 366},
    {TYPE_WEAPON,169, "Camera",43,true, 367}
};

enum info_inventary
{
	bool:VALID_EQUIPED,
	TYPE,
	ESTADO
};
new Equiped_Inventary[MAX_PLAYERS][info_inventary];
new Saved_Invetary[MAX_PLAYERS];
new ANTIFLOODINVENTARY[MAX_PLAYERS];
new IVENTARIOID[MAX_PLAYERS];
 
enum  dataproductos
{
	Tipo,
	Nombre[32],
	Precio,
	ID
};
new Productos24_7[][dataproductos] =
{
	{BEBIDA_24_7, "Telefono",100},
    {BEBIDA_24_7, "GPS",300},
    {BEBIDA_24_7, "Botella de agua", 20},
    {BEBIDA_24_7, "Botella de leche", 30},
    {BEBIDA_24_7, "Jugo de naranja", 15},
    {BEBIDA_24_7, "Jugo de manzana", 15},
    {BEBIDA_24_7, "Jugo en lata", 25},
    {COMIDA_24_7, "Pan", 30},
    {BEBIDA_24_7, "Mp3", 150}
};

new ProductosBurgerShot[][dataproductos] =
{
	{COMIDA_24_7, "Hamburguesa Sencilla",50, 20},
	{COMIDA_24_7, "Hamburguesa Queso doble",60, 21},
	{COMIDA_24_7, "Hamburguesa Carne doble",70, 22}
};

new ProductosPizza[][dataproductos] =
{
	{COMIDA_24_7, "Pizza Sencilla",50, 23},
	{COMIDA_24_7, "Pizza Hawuaiana",10, 24}
};

new ProductosCluckin[][dataproductos] =
{
	{COMIDA_24_7, "Pernil de pollo",10, 25},
	{COMIDA_24_7, "Carne 3/4s",10, 26}
};
new ProductosHotel[][dataproductos] =
{
	{NO_CONSUMIBLE, "Llave de habitacion de hotel",90, 30}
};
new ProductosFarmacia[][dataproductos] =
{
	{TYPE_VENDAJE, "Vendajes",700, 9},
	{TYPE_BOTIQUIN, "Botiquin",400, 10}
};

//Sistema de apartamentos
#define INVALID_HOUSE_ID (-1)
#define MAX_APARTAMENTOS 500
#define MAX_OBJECTS_DEPA 100
#define MAX_CASAS_VIP 1000

enum apartamentoinfo
{
	PRECIO,
	CasaID,
	Lock,
	CasaDueno[24],
	ENVENTA,
	CasaPickup,
	CasaDuenoID,
	TIPOMONEDA,
	INTERIOR,
	Text3D:CasaLabel,
	Float:CasaX,Float:CasaY,Float:CasaZ,
	Float:MaxX,Float:MaxY,Float:MaxZ,
	TYPE_HOUSE
};
new APARTAMENTO[MAX_APARTAMENTOS][apartamentoinfo];
new Iterator:Apartamentos<MAX_APARTAMENTOS>;

enum infoposapat
{
	Float:POSX,
	Float:POSY,
	Float:POSZ
};
new SALIDAAPARTAMENTOS[][infoposapat] =
{
	{-240.7768, 2319.3252, 350.2729},
	{1810.0408, -1308.2994, 931.7675}
};

new ENAPARTAMENTO[MAX_PLAYERS];

enum infoobjetos_depa
{
	Model,
	Float:pX_,
	Float:pY_,
	Float:pZ_,
	Float:rX_,
	Float:rY_,
	Float:rZ_,
	INTERIORID
};
new PAREDES_DEPART[][infoobjetos_depa] =
{
	{19376, -243.64571, 2328.75171, 357.30853,   90.00000, 90.00000, -90.00002,		1},
	{19376, -249.01614, 2323.16821, 349.88251,   90.00000, 90.00000, -90.00002,		1},
	{19376, -239.18831, 2323.88477, 349.88251,   90.00000, 90.00000, -90.00002,		1},
	{19376, -244.48616, 2318.82764, 349.88251,   90.00000, 90.00000, 0.00000,		1},
	{19376, -248.86282, 2323.50391, 349.88251,   90.00000, 90.00000, 0.00000,		1},
	{19376, -243.65434, 2330.25488, 349.88251,   90.00000, 90.00000, -90.00002,		1},
	{19376, -243.82910, 2328.24731, 349.88251,   90.00000, 90.00000, 0.00000,		1},
	//Int 2
	{19375, 1811.27979, -1313.18933, 930.42078,   0.00000, 0.00000, 0.00000,		2},
	{19375, 1811.26721, -1303.59839, 930.42078,   0.00000, 0.00000, 0.00000,		2},
	{19375, 1790.53564, -1313.18372, 930.42078,   0.00000, 0.00000, 0.00000,		2},
	{19375, 1790.53564, -1303.57849, 930.42078,   0.00000, 0.00000, 0.00000,		2},
	{19375, 1795.34448, -1317.85974, 930.42078,   0.00000, 0.00000, -90.00000,		2},
	{19375, 1804.93958, -1317.84387, 930.42078,   0.00000, 0.00000, -90.00000,		2},
	{19375, 1814.55615, -1317.85254, 930.42078,   0.00000, 0.00000, -90.00000,		2},
	{19375, 1804.74146, -1298.99854, 930.42078,   0.00000, 0.00000, -90.00000,		2},
	{19375, 1795.22375, -1299.00635, 930.42078,   0.00000, 0.00000, -90.00000,		2},
	{19375, 1814.29785, -1298.98645, 930.42078,   0.00000, 0.00000, -90.00000,		2},
	{19375, 1795.27722, -1305.21838, 930.42078,   0.00000, 0.00000, -90.00000,		2},
	{19375, 1795.25854, -1311.04822, 930.42078,   0.00000, 0.00000, -90.00000,		2},
	{19375, 1796.93726, -1305.19836, 938.84381,   0.00000, 0.00000, -90.00000,		2},
	{19375, 1801.66895, -1300.48853, 930.42078,   0.00000, 0.00000, 0.00000,		2},
	{19375, 1801.66431, -1315.74207, 930.42078,   0.00000, 0.00000, 0.00000,		2},
	{19375, 1796.86438, -1311.05676, 938.73749,   0.00000, 0.00000, -90.00000,		2},
	{19375, 1812.81995, -1311.00037, 930.42078,   0.00000, 0.00000, -90.00000,		2},
	{19386, 1803.25220, -1311.01855, 932.66376,   0.00000, 0.00000, 90.00000,		2},
	{19402, 1806.43298, -1310.99658, 932.67828,   0.00000, 0.00000, 90.00000,		2},
	{19375, 1806.37573, -1311.02759, 939.62000,   0.00000, 0.00000, -90.00000,		2}
};
//new Iterator: Paredes_Depart<MAX_OBJECTS_DEPA>;
//=================================================
new PISO_DEPART[][infoobjetos_depa] =
{
	{19375, -244.03177, 2323.57300, 349.88251,   0.00000, 90.00000, 0.00000,		1},
	//Int
	{19376, 1806.12512, -1303.60974, 931.02393,   0.00000, 90.00000, 0.00000,		2},
	{19376, 1806.10645, -1313.23145, 931.02393,   0.00000, 90.00000, 0.00000,		2},
	{19376, 1795.72522, -1303.64514, 931.02393,   0.00000, 90.00000, 0.00000,		2},
	{19376, 1795.64392, -1313.21973, 931.02393,   0.00000, 90.00000, 0.06000,		2}
	
};
//new Iterator: Piso_Depart<MAX_OBJECTS_DEPA>;
//=================================================
new TECHO_DEPART[][infoobjetos_depa] =
{
	{19379, -244.27219, 2323.50757, 354.42661,   0.00000, 90.00000, 0.00000,		1},
	//Int
	{19377, 1806.12512, -1303.60974, 935.58722,   0.00000, 90.00000, 0.00000,		2},
	{19377, 1806.12451, -1313.19275, 935.58722,   0.00000, 90.00000, 0.00000,		2},
	{19377, 1795.68604, -1303.61157, 935.58722,   0.00000, 90.00000, 0.00000,		2},
	{19377, 1795.71130, -1313.22180, 935.58722,   0.00000, 90.00000, 0.00000,		2}
};
//new Iterator: Techo_Depart<MAX_OBJECTS_DEPA>;
//=================================================
new PUERTA_DEPART[][infoobjetos_depa] =
{
	{1502, -243.70091, 2325.05835, 349.96570,   0.00000, 0.00000, -90.30001	,		1},
	{1502, -241.56618, 2318.84595, 349.96570,   0.00000, 0.00000, 0.00000	,		1},
	//Int 2
	{1502, 1811.19873, -1307.65320, 931.08569,   0.00000, 0.00000, -90.12002,		2},
	{1502, 1801.59485, -1311.00464, 931.08569,   0.00000, 0.00000, -180.00000,		2},
	{1502, 1801.60718, -1305.22437, 931.08569,   0.00000, 0.00000, -180.00000,		2}
};
//new Iterator: Puerta_Depart<MAX_OBJECTS_DEPA>;
//=================================================
new CAMA_DEPART[][infoobjetos_depa] =
{
	{2090, -245.00014, 2326.39624, 349.96490,   0.00000, 0.00000, 90.77999,			1},
	//Int2
	{2090, 1796.76428, -1314.28784, 931.08209,   0.00000, 0.00000, 181.08000,		2},
	{2090, 1795.40100, -1302.47021, 931.08209,   0.00000, 0.00000, 0.08000,			2}
};
 
//=================================================
new COCINA_DEPART[][infoobjetos_depa] = 
{
	{2127, -248.45448, 2321.98560, 349.96695,   0.00000, 0.00000, 89.75999,			1},
	{2129, -246.59030, 2322.88696, 349.96692,   0.00000, 0.00000, -1.55998,			1},
	{2130, -248.47060, 2319.89917, 349.96722,   0.00000, 0.00000, 90.12001,			1},
	{2128, -246.31940, 2319.33203, 349.96732,   0.00000, 0.00000, 180.72003,		1},
	//Int 2
	{2127, 1803.25000, -1317.26550, 931.10840,   0.00000, 0.00000, -180.17986,		2},
	{2129, 1809.65112, -1317.23950, 931.10797,   0.00000, 0.00000, -178.92007,		2},
	{2130, 1806.67383, -1317.28638, 931.10852,   0.00000, 0.00000, -181.13988,		2},
	{2130, 1808.67041, -1317.27917, 931.10852,   0.00000, 0.00000, -181.13988,		2},
	{2129, 1804.67554, -1317.23596, 931.10797,   0.00000, 0.00000, -179.88004,		2},
	{2128, 1810.79602, -1313.54810, 931.11145,   0.00000, 0.00000, -90.42003,		2}
};

new ARMARIO_DEPART[][infoobjetos_depa] =
{
	{2167, -245.38214, 2323.62939, 349.92529,   0.00000, 0.00000, 178.92000,		1},
	//Int 2
	{2167, 1793.66321, -1311.10522, 931.09003,   0.00000, 0.00000, 0.00000,			2}
};

new ESTANTERIA_DEPART[][infoobjetos_depa] =
{
	{2463, -244.94640, 2328.11426, 349.78781,   0.00000, 0.00000, 0.00000,			1},
	//Int 2
	{2463, 1799.15710, -1299.17249, 930.73053,   0.00000, 0.00000, 0.00000,			2}
};
new EQUIPO_DEPART[][infoobjetos_depa]=
{
	{2100, -239.38280, 2324.91650, 349.97830,   0.00000, 0.00000, -89.70000,		1},
	//Int 2
	{2100, 1796.14355, -1305.42029, 931.10321,   0.00000, 0.00000, 0.00000,			2}
};

enum info_objetos_depa
{
	ID_OBJETO,
}
new OBJETOS_DEPA[MAX_CASAS_VIP][31][info_objetos_depa];

enum info_estanteria_depa
{
	ID,
	CASAID,
	ARMA,
	AMMO,
	OBJETO
}
new ESTANTERIA_DEPA[15][MAX_CASAS_VIP][info_estanteria_depa];

enum info_karen
{
	Cama,
	Sillon,
	Cocina,
	Techo,
	Paredes,
	Piso,
	Puerta,
	Sillon_Sala,
	Mesa_Sala,
	Sillas_Comedor,
	Mesa_Comedor,
	Armario,
	Equipo,
	Estanteria
}
new ObjetoDepartamento[MAX_APARTAMENTOS][MAX_OBJECTS_DEPA][ info_karen ];


enum datamapaparta
{
	ID,
	Objeto,
	Possx[4],
	Possr[4]
};
new MAPAPARTAMENTO[MAX_MUEBLES][datamapaparta];


enum infoposdealksd
{
	Float:POSX,
	Float:POSY,
	Float:POSZ
};

new POSICIONESARMERIADEPART[][infoposdealksd] =
{
	{-244.6273,2327.2793,350.9684}
};

new POSICIONESNEVERADEPART[][infoposdealksd] =
{
	{-246.2243,2319.9392,350.9684}
};

new TeveDepa;
//=/==/
//=
//===================================================================
//Sistema de casas VIP

enum addmapcasaas
{
	Objeto_,
	Nombre_[256],
	Costo_
};
new ADDMAP[MAX_PLAYERS][addmapcasaas];

new bool:EditandoCasa[MAX_PLAYERS],EditandoMueble[MAX_PLAYERS];
 
enum dataobjetomapearporfuera
{
	ID,
	Objeto,
	Possx[4],
	Possr[4]
};
new MAPCASA[MAX_MUEBLES][dataobjetomapearporfuera];

enum datamuel
{
	Float:qX,
	Float:qY,
	Float:qZ,
	Float:qrX,
	Float:qrY,
	Float:qrZ
};
new DATAMUEBLE[MAX_PLAYERS][datamuel];

new ManageObjeto[MAX_PLAYERS];
#define ObjetosCasa "SERVER/DataCasas.db"
new DB:DBCASA;


enum infoobjetos_
{
	Model,
	Float:pX_,
	Float:pY_,
	Float:pZ_,
	Float:rX_,
	Float:rY_,
	Float:rZ_,
	INTERIORID
};
new ObjetosParedes[][infoobjetos_] =
{
	{19376, 1259.052490, 235.781326, 601.525085, 0.000000, 0.000000, 0.000000,		1},
	{19376, 1259.053222, 245.271423, 601.525085, 0.000000, 0.000000, 0.000000,		1},
	{19376, 1240.372802, 245.271423, 601.525085, 0.000000, 0.000000, 0.000000,		1},
	{19376, 1240.372802, 235.751434, 601.525085, 0.000000, 0.000000, 0.000000,		1},
	{19376, 1244.718383, 230.923828, 601.525085, 0.000000, 0.000000, 90.599914,		1},
	{19376, 1254.349609, 249.835632, 601.525085, 0.000000, 0.000000, 90.5999114,	1},
	{19376, 1254.146728, 231.022445, 601.525085, 0.000000, 0.000000, 90.599914,		1},
	{19376, 1244.791259, 249.735534, 601.525085, 0.000000, 0.000000, 90.599914,		1},
	{19376, 1247.037597, 233.985626, 601.525085, 0.000000, 0.000000, 0.299909,		1},
	{19376, 1240.648071, 238.621704, 601.525085, 0.000000, 0.000000, 90.599914,		1},
	{19376, 1242.237792, 238.658401, 605.335144, 0.000000, 0.000000, 90.599914,		1},
	{19376, 1252.870605, 234.025833, 601.525085, 0.000000, 0.000000, 0.299909,		1},
	{19447, 1248.806640, 238.713027, 599.211364, -89.799942, -87.999969, 2.799999,	1},
	{19447, 1249.517456, 238.702880, 599.211242, -89.799942, -87.999969, 2.799999,	1},
	{19447, 1251.057861, 238.704345, 604.981018, -89.799942, -87.999969, 2.799999,	1},
	{19387, 1254.533081, 238.752777, 599.148803, 0.000000, 0.000000, -89.800010,	1},
	{19405, 1257.711059, 238.757690, 599.052185, 0.000000, 0.000000, -90.399993,	1},
	{19447, 1254.547363, 238.751434, 605.431091, -89.799942, -87.999969, 2.799999,	1},
	{19447, 1257.487060, 238.803039, 605.310424, -89.799942, -87.999969, 2.799999,	1},
	//Interior #2
	{19375, 1898.913574, -33.120349, 638.218322, 0.000000, 0.000000, 0.000000,   	2},
	{19375, 1898.913574, -23.490343, 638.218322, 0.000000, 0.000000, 0.000000,   	2},
	{19375, 1888.572998, -23.490343, 638.218322, 0.000000, 0.000000, 0.000000,   	2},
	{19375, 1888.571655, -33.120349, 638.218322, 0.000000, 0.000000, 0.000000,   	2},
	{19375, 1894.241088, -37.303604, 638.218322, 0.000000, 0.000000, 89.699989,  	2},
	{19375, 1884.671508, -37.253494, 638.218322, 0.000000, 0.000000, 89.699989,  	2},
	{19375, 1884.759643, -20.323720, 638.218322, 0.000000, 0.000000, 89.699989,  	2},
	{19375, 1894.328125, -20.383836, 638.218322, 0.000000, 0.000000, 89.699989,  	2},
	{19375, 1888.958496, -26.615774, 638.218322, 0.000000, 0.000000, 89.699989,		2},
	{19375, 1893.703613, -20.270341, 638.218322, 0.000000, 0.000000, 0.000000, 		2},
	{19375, 1893.673583, -21.860357, 645.978637, 0.000000, 0.000000, 0.000000,		2},
	{19375, 1888.942016, -29.865736, 638.218322, 0.000000, 0.000000, 89.699989, 	2},
	{19375, 1893.723632, -25.110378, 646.877807, 0.000000, 0.000000, 0.000000, 		2},
	{19398, 1893.663208, -28.297683, 639.874633, 0.000000, 0.000000, 0.000000, 		2}
 };
new ObjetosPiso[][infoobjetos_] =
{
	{19379, 1255.531982, 245.202621, 597.357299, -0.899998, 90.299995, -0.000000, 	1},
	{19379, 1255.531982, 235.593627, 597.508239, -0.899998, 90.299995, -0.000000, 	1},
	{19379, 1245.211669, 245.203353, 597.410949, -0.899998, 90.299995, -0.000000, 	1},
	{19379, 1245.211669, 235.644378, 597.560058, -0.899998, 90.299995, -0.000000, 	1},
	//Interior #2
	{19376, 1893.701293, -33.067874, 638.108825, 0.299999, 89.899978, -0.500000, 	2},
	{19376, 1893.772827, -25.078308, 638.149841, 0.299999, 89.899978, -0.500000, 	2}
	
};
new ObjetosTecho[][infoobjetos_] =
{
	{19379, 1245.236816, 235.714477, 602.018676, -0.899998, 90.299995, -0.000000, 1},
	{19379, 1255.665039, 235.713760, 601.975646, -0.899998, 90.299995, -0.000000, 1},
	{19379, 1255.665283, 245.172882, 601.847229, -0.899998, 90.299995, -0.000000, 1},
	{19379, 1245.326904, 245.144760, 601.969848, -0.899998, 90.299995, -0.000000, 1},
	//Interior #2
	{19380, 1893.694702, -25.094680, 643.246887, -0.099999, -90.499992, 0.299999, 2},
	{19380, 1893.743896, -34.644538, 643.263549, -0.099999, -90.499992, 0.299999, 2}
};
new ObjetosPuerta[][infoobjetos_] =
{
	{1502, 1245.439086, 238.703582, 597.570983, 0.000000, 0.000000, 0.000000, 		1},
	{1502, 1251.249633, 238.703582, 597.570983, 0.000000, 0.000000, 0.000000, 		1},
	{1502, 1258.999755, 240.168426, 597.400939, 0.000000, 0.000000, 89.800010, 		1},
	//Interior #2
	{1502, 1893.740722, -26.581872, 638.235656, 0.000000, 0.000000, 89.099967, 		2},
	{1502, 1897.232177, -37.218059, 638.095520, 0.000000, 0.000000, 178.600021, 	2}
 
};
new ObjetosCama[][infoobjetos_] =
{
	{2090, 1243.652099, 234.422302, 597.641113, 0.000000, 0.000000, 179.800018, 1},
	{2090, 1249.352905, 234.362091, 597.641113, 0.000000, 0.000000, -88.499984, 1},
	//Interior #2
	{2090, 1890.598632, -23.883470, 638.233459, 0.000000, 0.000000, 0.000000, 	2}
};
 
new ObjetosCocina[][infoobjetos_] = 
{
	{2127, 1258.411010, 236.651947, 597.593811, 0.000000, 0.000000, -89.200012,  	1},
	{2129, 1258.503295, 234.655029, 597.511901, 0.000000, 0.000000, -89.099990,  	1},
 	{2130, 1258.533325, 233.607482, 597.462158, 0.000000, 0.000000, -89.399986,  	1},
	{2304, 1258.506225, 231.607482, 597.522827, 0.000000, 0.000000, -90.500030,  	1},
 	{2128, 1253.421142, 234.178527, 597.593688, 0.000000, 0.000000, 92.599983, 		1},
 	//Interior #2
 	{2129, 1889.020019, -27.209648, 638.218444, 0.000000, 0.000000, 92.300010, 		2},
	{2130, 1889.152587, -29.171810, 638.211120, 1.099999, 0.000000, 90.399986, 		2},
	{2128, 1891.470092, -29.363801, 638.215454, 0.000000, 0.000000, -178.299926, 	2}
};
new ObjetosArmario[][infoobjetos_] = 
{
	{2167, 1246.92542, 235.44420, 597.65192,   -0.16000, 0.00000, -90.96000,		1},
	{2167, 1893.70044, -24.47510, 638.22369,   0.00000, 0.00000, -89.04000,			2}
};
new ObjetosEstanteria[][infoobjetos_] =
{
	{2463, 1249.04504, 231.12210, 597.38208,   0.00000, 0.00000, -178.70000,		1},
	//Interior #2
	{2463, 1890.02112, -26.47345, 638.22467,   0.00000, 0.00000, -180.35985,		2}
};
new ObjetosEquipo[][infoobjetos_] =
{
	{2100, 1248.38770, 249.57680, 597.42291,   0.00000, 0.00000, 0.00000,			1},
	{2100, 1896.32739, -20.58240, 638.26471,   0.00000, 0.00000, 0.00000,			2}
};
#define MAX_OBJECTS_CASA 100

enum info_objetos_casa
{
	ID_OBJETO,
}
new OBJETOS_CASA[MAX_CASAS_VIP][31][info_objetos_casa];

enum objectinfocsas
{
	Cama,
	Sillon,
	Cocina,
	Techo,
	Paredes,
	Piso,
	Puerta,
	Sillon_Sala,
	Mesa_Sala,
	Sillas_Comedor,
	Mesa_Comedor,
	Armario,
	Estanteria,
	Equipo
}
new ObjetoCasa[ MAX_CASAS_VIP ][ MAX_OBJECTS_CASA ][ objectinfocsas ];
new Televisor1,Televisor2;
 
enum info_estanteria_Casa
{
	ID,
	CASAID,
	ARMA,
	AMMO,
	OBJETO
}
new ESTANTERIA_CASA[15][MAX_CASAS_VIP][info_estanteria_Casa];



enum casavipinfo
{
	PRECIO,
	CasaID,
	Lock,
	CasaDueno[24],
	ENVENTA,
	CasaPickup,
	CasaDuenoID,
	TIPOMONEDA,
	INTERIOR,
	GARAJETIPO,
	Text3D:CasaLabel,
	Float:CasaX,Float:CasaY,Float:CasaZ,
	Float:EntradaX,Float:EntradaY,Float:EntradaZ,
	Float:MaxX,Float:MaxY,Float:MaxZ,
	Float:GARAJEX,Float:GARAJEY,Float:GARAJEZ,
	CAJAFUERTE,
	CAJASTATUS
};
new CASAVIP[MAX_CASAS_VIP][casavipinfo];
new Iterator: Casasvip<MAX_CASAS_VIP>;
new ENCASAVIP[MAX_PLAYERS] = {INVALID_HOUSE_ID, ...};
new ENGARAJE[MAX_PLAYERS] = {INVALID_HOUSE_ID, ...};

enum infoposcasas
{
	Float:POSX,
	Float:POSY,
	Float:POSZ
};
new SALIDACASAVIP[][infoposcasas] =
{
	{1258.2179,240.7018,598.4999},
	{1896.0762,-36.2557,639.1824}
};

new POSICIONESARMERIACASAVIP[][infoposcasas] =
{
	{1249.2080,232.0017,598.6823},
	{1890.0598,-25.6329,639.2263}
};
new POSICIONESNEVERACASAVIP[][infoposcasas] =
{
	{1254.030517, 234.172164, 598.624389},
	{1891.3761,-28.7559,639.2131}
};
new POSICIONESARMARIOCASAVIP[][infoposcasas] =
{
	{1246.0968,235.4372,598.6447},
	{1892.8737,-24.5747,639.2368}
};

new POSICIONESARMARIODEPA[][infoposcasas] =
{
	{-245.3552,2324.4597,350.9684}
};
new POSICIONESSALIDAGARAJEAUTO[][infoposcasas] =
{
	{1381.0541,-1193.8451,202.5224},
	{1394.5314,-1215.4014,202.5172}
};
new POSICIONESSALIDAGARAJEAPIE[][infoposcasas] =
{
	{1381.2119,-1188.8502,202.5224},
	{1394.2594,-1208.2676,202.5172}
};
//============================================================================

new SpeedChoqueCheck[MAX_PLAYERS],
	CrashTimer[MAX_PLAYERS],
	bool:IsSpeeding[MAX_PLAYERS];

new Float:AlarmaPos[MAX_PLAYERS][3],bool:EscuchandoAlarma[MAX_PLAYERS];
//Sistema de empresas
#define MAX_EMPRESAS 500
#define INVALID_EMPRESA_ID    (-1)
enum infosalidaasdasd
{
	Float:xXx,
	Float:yYy,
	Float:zZz,
	CONCEID
};

enum radarinfo
{
	Float:xXx,
	Float:yYy,
	Float:zZz,
	Float:rotX,
	Float:rotY,
	Float:rotZ
};
new RADARCHECK[][radarinfo] =
{
	{1411.16284, -1573.45886, 41.55810,   0.00000, 2.00000, -144.00000},
	{1475.92798, -2284.68701, 46.84186,   0.00000, 0.00000, -1798.92004},
	{124.89349, -1505.07617, 32.41415,   0.00000, 0.00000, 0.00000},
	{705.14343, -1082.68701, 58.53573,   0.00000, 0.00000, 0.00000},
	{1100.85339, -822.91711, 119.66611,   0.00000, 0.00000, 0.00000},
	{1805.38245, -1097.91003, 90.03327,   0.00000, 0.00000, 0.00000},
	{2592.06714, -1312.49243, 86.42504,   0.00000, 0.00000, 0.00000},
	{2450.09961, -2210.33838, 54.03194,   0.00000, 0.00000, 0.00000}
};
 
enum radarinfasaso
{
	OBJETO,
	Float:xXx,
	Float:yYy,
	Float:zZz,
	Float:rotX,
	Float:rotY,
	Float:rotZ,
	OBJETO_IDA
};
new OBJETO_ROTACION[][radarinfasaso] =
{
	//Radares
	{1682, 1411.16284, -1573.45886, 41.55810,   0.00000, 2.00000, -144.00000},
	{1682, 1475.92798, -2284.68701, 46.84186,   0.00000, 0.00000, -1798.92004},
	{1682, 124.89349, -1505.07617, 32.41415,   0.00000, 0.00000, 0.00000},
	{1682, 705.14343, -1082.68701, 58.53573,   0.00000, 0.00000, 0.00000},
	{1682, 1100.85339, -822.91711, 119.66611,   0.00000, 0.00000, 0.00000},
	{1682, 1805.38245, -1097.91003, 90.03327,   0.00000, 0.00000, 0.00000},
	{1682, 2592.06714, -1312.49243, 86.42504,   0.00000, 0.00000, 0.00000},
	{1682, 2450.09961, -2210.33838, 54.03194,   0.00000, 0.00000, 0.00000},
	{1682, 1411.16284, -1573.45886, 41.55810,   0.00000, 2.00000, -144.00000},
	//Telefonos
	{1363, 1829.00000, -1851.82996, 13.41000,   0.00000, 0.00000, 0.00000},
	{1363, 1802.16003, -1863.06006, 13.41000,   0.00000, 0.00000, 0.00000},
	{1363, 1775.76001, -1862.93005, 13.41000,   0.00000, 0.00000, 0.00000},
	{1363, 1759.46997, -1862.32996, 13.41000,   0.00000, 0.00000, 0.00000},
	{1363, 1463.68469, -1741.87927, 13.14198,   0.00000, 0.00000, 0.00000},
	{1363, 1451.31946, -1025.23792, 23.73974,   0.00000, 0.00000, 0.00000},
	{1363, 1211.65308, -1320.17712, 13.36682,   0.00000, 0.00000, 0.00000},
	{1363, 1584.81921, -1313.67944, 17.32330,   0.00000, 0.00000, 0.00000},
	//Gps turista
	{1444, 1829.06458, -1679.48926, 13.54690,   0.00000, 0.00000, -88.74001},
	{1444, 1934.27087, -1761.65796, 13.54690,   0.00000, 0.00000, -40.74000},
	{1444, 1832.55383, -1845.50586, 13.18170,   0.00000, 0.00000, -85.56002},
	{1444, 2047.20032, -1920.91223, 13.54690,   0.00000, 0.00000, 90.77998},
	{1444, 1738.11914, -1862.80811, 13.57580,   0.00000, 0.00000, 0.00000},
	{1444, 1544.65027, -1681.00806, 13.55880,   0.00000, 0.00000, -46.74000},
	{1444, 1355.60242, -1739.53064, 13.54690,   0.00000, 0.00000, 0.00000},
	{1444, 1205.83118, -1842.73230, 13.54320,   0.00000, 0.00000, 0.00000},
	{1444, 844.46057, -2059.82544, 12.86720,   0.00000, 0.00000, 0.00000},
	{1444, 805.96558, -1387.75488, 13.56020,   0.00000, 0.00000, -33.24000},
	{1444, 562.78448, -1250.29272, 17.25990,   0.00000, 0.00000, 0.00000},
	{1444, 981.88000, -1157.62000, 23.86000,   0.00000, 0.00000, 0.00000},
	{1444, 1185.37952, -1339.45801, 13.57420,   0.00000, 0.00000, -94.92000},
	{1444, 1195.76160, -919.63928, 43.15440,   0.00000, 0.00000, 0.00000},
	{1444, 1309.53369, -912.69019, 38.67410,   0.00000, 0.00000, 0.00000},
	{1444, 1756.70984, -1147.42981, 23.93360,   0.00000, 0.00000, 0.00000},
	{1444, 1593.89624, -1321.86316, 17.31230,   0.00000, 0.00000, 0.00000}
};
enum peajeinfo
{
	OBJETO,
	Float:xXx,
	Float:yYy,
	Float:zZz,
	Float:PosBx,
	Float:PosBy,
	Float:PosBz,
	Float:RotBx,
	Float:RotBy,
	Float:RotBz,
	STATUS,
	TIMER
};
new POSPEAJES[][peajeinfo] =
{
	{0, 54.9395,-1537.2535,4.0791,			52.73260,-1540.75476,5.18790,-180.00000,-90.00000,-92.00000},
	{1, 42.2780, -1526.8677, 4.4040,		45.80606, -1530.41028, 5.18790,   -180.00000, -90.00000, -100.40000}
};
new PEAJEID[MAX_PLAYERS];
new SALIDALUGAR[][infosalidaasdasd] =
{
	{362.8978,-75.1956,2001.5078},//DEBUG
	{362.8978,-75.1956,1001.5078},//Burgershot
    {-25.9672,-188.2543,1003.5469},//24/7
    {372.3844,-133.5227,1001.4922},//Pizza
    {364.9926,-11.8395,1001.8516},//Cluckin bell
    {2227.9512,-1150.4325,1025.7969},//Hotel
    {541.7547,-1295.3337,17.2445},//Salida conce ls
    {-861.2251,282.4485,750.7936},//Saida conce SF
    {2133.2393, -1162.6312, 23.4096},//Salida conce LS jeferson
    {1722.2621,1832.2690,-18.3956},//Salida conce LV
    {1724.7399,-1768.6321,-1.7548},//Salida conce LS coches vip
    {-1665.7751,1209.7400,7.2546},//SAlida conce SF 2
    {-2186.2344,2414.1938,5.1563},//Salida conce lv botes
    {264.0841,1778.6570,9998.9424}//Salida farmacia
};

new COMPRARENCONCESONARIO[][infosalidaasdasd] =
{
	{540.1323,-1298.6577,17.2445, 1},//Concesonario ls 1
	{-858.7464,271.6358,750.7936, 2},//Concesonario sf
	{2133.3586,-1166.3494,23.4096, 3},//Concesonario ls jeferson
	{1724.9856,1827.7122,-18.3956, 4},//Concesonario LV
	{-1664.0365,1207.8015,7.2546, 5},//Concesonario SF 2
	{1721.3479,-1773.7805,-1.7548, 6},//Concesonario LS coches vip
	{-2188.8579,2415.0833,5.1563, 7}//Concesonario LV BOTES
};
new COMPRARPRODUCTOPOS[][infosalidaasdasd] =
{
	{-29.1280,-185.1293,1003.5469},//Burgershot
    {375.8851,-67.4343,1001.5078},//24/7
    {375.254730, -118.804710, 1001.499511},//Pizza
    {368.757904, -6.018908, 1001.851562},//Clucking bell
    {2217.3486, -1147.1384, 1024.8208},//Hotel
    {263.5266,1764.9800,9998.9502}//Farmacia
    
};
 
new POS_DORMIR[][infosalidaasdasd] =
{
	{1508.4955, -1560.3329, 3480.4951},
	{-247.0955, 2325.6357, 350.9684},
	{1251.5090, 232.6391, 598.6617},
	{1891.0566, -23.2507, 639.2405}
};
enum infocompany
{
	EmpresaID,
	EmpresaDueno,
	Nota[256],
	Nombre[256],
	SeVende,
	Lock,
	PrecioDinero,
	Float:Iva,
	Float:EmpresaX,
	Float:EmpresaY,
	Float:EmpresaZ,
	Text3D:EmpresaLabel,
	EmpresaPickup,
	INTERIOR,
	Mundo,
	Ganancia,
	TIPONEGOCIO

};
new NEGOCIO[MAX_EMPRESAS][infocompany],Iterator: Negocios<MAX_EMPRESAS>,
    InNegocio[MAX_PLAYERS] = {INVALID_EMPRESA_ID, ...};

 
//Actores de robo
enum actorinfo_
{
	Float:_X_,
	Float:_Y_,
	Float:_Z_,
	Float:_A_,
	VW,
	INT,
	SKIN,
	NOMBRE[24],
	ID,
	ROBADO,
	bool:ROBAR,
	STATUS,
	Text3D:LABEL,
	bool:DEAD,
	bool:STEAL,
	ROBADOPOR,
	TIMER
};
new ACTOR[MAX_ACTORS][actorinfo_];
new Iterator: Actores<MAX_ACTORS>;

new gsBigString[4096],gsString[2048];
new string2[1200];//String global
new MensajeAyuda[MAX_PLAYERS];
new MENSAJE_AYUDA[MAX_PLAYERS][3];
new TIMER_MENSAJEAYUDA[MAX_PLAYERS][3];


enum infoiva
{

	Float:ALIMENTOS,
	Float:ELECTRONICOS
};
new IVA[infoiva];

/* Tuning Object System */

enum e_Tuning_Shop_Objects
{
	tuning_object_MODELID,
	tuning_object_NAME[24],
	tuning_object_PRICE
};
new Tuning_Shop_Objects[][e_Tuning_Shop_Objects] =
{
	{1000, "spl_b_mar_m", 3000},
    {1001, "spl_b_bab_m", 3000},
    {1002, "spl_b_bar_m", 3000},
    {1003, "spl_b_mab_m", 3000},
    {1004, "bnt_b_sc_m", 9000},
    {1005, "bnt_b_sc_l", 3000},
    {1007, "wg_l_b_ssk", 2000},
    {1018, "exh_b_ts", 3500},
    {1019, "exh_b_t", 3500},
    {1021, "exh_b_m", 3500},
    {1024, "lgt_b_sspt", 2000},
    {1029, "exh_c_s", 3000},
    {1043, "exh_lr_br2", 3500},
    {1044, "exh_lr_br1", 3000},
    {1047, "wg_l_a_f", 2500},
    {1048, "wg_l_c_f", 2500},
    {1049, "spl_a_f_r", 3000},
    {1050, "spl_c_f_r", 3000},
    {1056, "wg_l_a_st", 2500},
    {1090, "wg_l_a_u", 2500},
    {19078, "TheParrot1", 8000},
    {19917, "CutsceneEngine1", 10500},
    {19893, "LaptopSAMP1", 6000},
    {2768, "CJ_CB_BURG", 1000},
    {19838, "CoffeeCup1", 1000},
    {11736, "MedicCase1", 3000},
    {1247, "bribe", 8000},
    {19147, "PinSpotLight5", 5000},
    {19148, "PinSpotLight6", 5000},
    {19149, "PinSpotLight7", 5000},
    {19151, "PinSpotLight9", 5000},
    {19153, "PinSpotLight11", 5000},
    {19580, "Pizza1", 1000},
    {2690, "CJ_FIRE_EXT", 5000},
    {19308, "taxi01", 3000},
    {1550, "CJ_MONEY_BAG", 4000},
    {19306, "kmb_goflag2", 5000},
    {19307, "kmb_goflag3", 5000},
    {18647, "RedNeonTube1", 6000},
    {18648, "BlueNeonTube1", 6000},
    {18649, "GreenNeonTube1", 6000},
    {18650, "YellowNeonTube1", 6000},
    {18651, "PinkNeonTube1", 6000},
    {18652, "WhiteNeonTube1", 6000},
    {18749, "SAMPLogoSmall", 5000},
    {19054, "XmasBox1", 3000},
    {19133, "ArrowType4", 5000},
    {19471, "forsale02", 3000},
    {19878, "Skateboard1", 2000},
    {19314, "bullhorns01", 5000},
    {2404, "CJ_SURF_BOARD", 3000},
    {2405, "CJ_SURF_BOARD2", 3000},
    {2406, "CJ_SURF_BOARD3", 3000},
    {19317, "bassguitar01", 2000},
    {19318, "flyingv01", 2000},
    {2232, "MED_SPEAKER_4", 3000},
    {1840, "speaker_2", 2000},
    {2229, "SWANK_SPEAKER", 4000},
	{1025, "wheel_or1", 2500},
	{1073, "wheel_sr6", 2500},
	{1074, "wheel_sr3", 2500},
	{1075, "wheel_sr2", 2500},
	{1076, "wheel_lr4", 2500},
	{1077, "wheel_lr1", 2500},
	{1078, "wheel_lr3", 2500},
	{1079, "wheel_sr1", 2500},
	{1080, "wheel_sr5", 2500},
	{1081, "wheel_sr4", 2500},
	{1082, "wheel_gn1", 2500},
	{1083, "wheel_lr2", 2500},
	{1084, "wheel_lr5", 2500},
	{1085, "wheel_gn2", 2500},
	{1096, "wheel_gn3", 2500},
	{1097, "wheel_gn4", 2500},
	{1098, "wheel_gn5", 2500},
	{19894, "laptop", 4500},
	{19873, "toiletpaperroll1", 200},
	{19874, "soapbar1", 200},
	{19624, "case1", 600},
	{19621, "obj1", 1500},
	{19620, "police", 10500}
};

//ZONAS
enum
{
	AREA_TYPE_NONE,
	AREA_TYPE_GANGZONE
};

#define MAX_TERRITORIES	100
enum enum_TERRITORIES
{
	bool:territory_VALID,
	territory_ID,
	territory_NAME[32],
	bool:territory_OCCUPIED,
	territory_CREW_ID,
	territory_CREW_INDEX,
	territory_COLOR,
	Float:territory_MIN_X,
	Float:territory_MIN_Y,
	Float:territory_MIN_Z,
	Float:territory_MAX_X,
	Float:territory_MAX_Y,
	Float:territory_MAX_Z,
	
	territory_AREA,
	territory_GANG_ZONE,
	
	bool:territory_WAR,
	territory_ATTACKER_CREW_INDEX,
	territory_WAR_TIME_LEFT,
	Text:territory_TEXTDRAW,
	territory_TIMER,
	territory_LAST_ATTACK
};
new TERRITORIES[MAX_TERRITORIES][enum_TERRITORIES];

// Crews
#define MAX_CREWS		200
#define MAX_CREW_RANKS	10

enum enum_CREW_INFO
{
	bool:crew_VALID,
	crew_ID,
	crew_NAME[32],
	crew_COLOR,
	
	bool:crew_FIGHTING,
	crew_LAST_ATTACK,
	
	crew_MEMBERS,
	crew_ONLINE_MEMBERS
};
new CREW_INFO[MAX_CREWS][enum_CREW_INFO];


new RandomColors[] =
{
	0xFFFFFFFF,
	0x000000FF,
    0x99CC00FF,
    0xFF9900FF,
	0x6699CCFF,
	0x0099FFFF,
	0xCCCC99FF,
	
	0xFF8C13FF,	0xC715FFFF,	0x20B2AAFF,	0xDC143CFF,	0x6495EDFF,	0xf0e68cFF,	0x778899FF,	0xFF1493FF,	0xF4A460FF,
	0xEE82EEFF,	0xFFD720FF,	0x8b4513FF,	0x4949A0FF,	0x148b8bFF,	0x14ff7fFF,	0x556b2fFF,	0x0FD9FAFF,	0x10DC29FF,
	0x534081FF,	0x0495CDFF,	0xEF6CE8FF,	0xBD34DAFF,	0x247C1BFF,	0x0C8E5DFF,	0x635B03FF,	0xCB7ED3FF,	0x65ADEBFF,
	0x5C1ACCFF,	0xF2F853FF,	0x11F891FF,	0x7B39AAFF,	0x53EB10FF,	0x54137DFF,	0x275222FF,	0xF09F5BFF,	0x3D0A4FFF,
	0x22F767FF,	0xD63034FF,	0x9A6980FF,	0xDFB935FF,	0x3793FAFF,	0x90239DFF,	0xE9AB2FFF,	0xAF2FF3FF,	0x057F94FF,
	0xB98519FF,	0x388EEAFF,	0x028151FF,	0xA55043FF,	0x0DE018FF,	0x93AB1CFF,	0x95BAF0FF,	0x369976FF,	0x18F71FFF,
	0x4B8987FF,	0x491B9EFF,	0x829DC7FF,	0xBCE635FF,	0xCEA6DFFF,	0x20D4ADFF,	0x2D74FDFF,	0x3C1C0DFF,	0x12D6D4FF,
	0x48C000FF,	0x2A51E2FF,	0xE3AC12FF,	0xFC42A8FF,	0x2FC827FF,	0x1A30BFFF,	0xB740C2FF,	0x42ACF5FF,	0x2FD9DEFF,
	0xFAFB71FF,	0x05D1CDFF,	0xC471BDFF,	0x94436EFF,	0xC1F7ECFF,	0xCE79EEFF,	0xBD1EF2FF,	0x93B7E4FF,	0x3214AAFF,
	0x184D3BFF,	0xAE4B99FF,	0x7E49D7FF,	0x4C436EFF,	0xFA24CCFF,	0xCE76BEFF,	0xA04E0AFF,	0x9F945CFF,	0xDCDE3DFF,
	0x10C9C5FF,	0x70524DFF,	0x0BE472FF,	0x8A2CD7FF,	0x6152C2FF,	0xCF72A9FF,	0xE59338FF,	0xEEDC2DFF,	0xD8C762FF,
	0xD8C762FF,	0xFF8C13FF,	0xC715FFFF,	0x20B2AAFF,	0xDC143CFF,	0x6495EDFF,	0xf0e68cFF,	0x778899FF,	0xFF1493FF,
	0xF4A460FF,	0xEE82EEFF,	0xFFD720FF,	0x8b4513FF,	0x4949A0FF,	0x148b8bFF,	0x14ff7fFF,	0x556b2fFF,	0x0FD9FAFF,
	0x10DC29FF,	0x534081FF,	0x0495CDFF,	0xEF6CE8FF,	0xBD34DAFF,	0x247C1BFF,	0x0C8E5DFF,	0x635B03FF,	0xCB7ED3FF,
	0x65ADEBFF,	0x5C1ACCFF,	0xF2F853FF,	0x11F891FF,	0x7B39AAFF,	0x53EB10FF,	0x54137DFF,	0x275222FF,	0xF09F5BFF,
	0x3D0A4FFF,	0x22F767FF,	0xD63034FF,	0x9A6980FF,	0xDFB935FF,	0x3793FAFF,	0x90239DFF,	0xE9AB2FFF,	0xAF2FF3FF,
	0x057F94FF,	0xB98519FF,	0x388EEAFF,	0x028151FF,	0xA55043FF,	0x0DE018FF,	0x93AB1CFF,	0x95BAF0FF,	0x369976FF,
	0x18F71FFF,	0x4B8987FF,	0x491B9EFF,	0x829DC7FF,	0xBCE635FF,	0xCEA6DFFF,	0x20D4ADFF,	0x2D74FDFF,	0x3C1C0DFF,
	0x12D6D4FF,	0x48C000FF,	0x2A51E2FF,	0xE3AC12FF,	0xFC42A8FF,	0x2FC827FF,	0x1A30BFFF,	0xB740C2FF,	0x42ACF5FF,
	0x2FD9DEFF,	0xFAFB71FF,	0x05D1CDFF,	0xC471BDFF,	0x94436EFF,	0xC1F7ECFF,	0xCE79EEFF,	0xBD1EF2FF,	0x93B7E4FF,
	0x3214AAFF,	0x184D3BFF,	0xAE4B99FF,	0x7E49D7FF,	0x4C436EFF,	0xFA24CCFF,	0xCE76BEFF,	0xA04E0AFF,	0x9F945CFF,
	0xDCDE3DFF,	0x10C9C5FF,	0x70524DFF,	0x0BE472FF,	0x8A2CD7FF,	0x6152C2FF,	0xCF72A9FF,	0xE59338FF,	0xEEDC2DFF,
	0xD8C762FF,	0xD8C762FF
};


/* 
Permisos de rangos

0 - cambiar nombre
1 - invitar
2 - echar
3 - cambiar rango de miembros
4 - crear rangos y modificar rangos
5 - poner casas personales a casas de banda
6 - vender casas de banda
7 - cambiar color de la banda
8 - abandonar territorio
9 - destruir cbanda
*/

//permisos
enum
{
	CREW_RANK_CHANGE_NAME,
	CREW_RANK_INVITE,
	CREW_RANK_CAST_MEMBERS,
	CREW_RANK_MODIFY_MEMBERS,
	CREW_RANK_MODIFY_RANKS,
	CREW_RANK_ADD_PROPERTIES,
	CREW_RANK_DELETE_PROPERTIES,
	CREW_RANK_CHANGE_COLOR,
	CREW_RANK_LEAVE_TERRITORY,
	CREW_RANK_DELETE,
	CREW_RANK_DESC,	
	CREW_RANK_SIZE // dejar siempre el ultimo
};

new CREW_RANKS_PERMISSIONS[][] =
{
	"cambiar nombre de la banda",
	"invitar jugadores",
	"echar miembros",
	"cambiar rangos de miembros",
	"crear rangos o modificarlos",
	"poner propiedades de banda",
	"liberar propiedades de banda",
	"cambiar color de la banda",
	"abandonar territorios",
	"eliminar banda",
	"Descripcion"
};

enum enum_CREW_RANK_INFO
{
	bool:crew_rank_VALID,
	crew_rank_ID,
	crew_rank_NAME[32],
	crew_rank_PERMISSION[CREW_RANK_SIZE]
};
new CREW_RANK_INFO[MAX_CREWS][MAX_CREW_RANKS][enum_CREW_RANK_INFO];

enum enum_PLAYER_CREW
{
	bool:player_crew_VALID,
	player_crew_ID,
	player_crew_RANK,
	player_crew_INDEX
};
new PLAYER_CREW[MAX_PLAYERS][enum_PLAYER_CREW];




enum
{
	MISC_MECHANIC_PIECES,
	MISC_FUEL_DRUM,
	MISC_SEED_MEDICINE,
	MISC_SEED_CANNABIS,
	MISC_SEED_CRACK,
	MISC_MEDICINE,
	MISC_CANNABIS,
	MISC_CRACK,
	MISC_CONFIG_SOUNDS,
	MISC_CONFIG_AUDIO,
	MISC_CONFIG_TIME,
	MISC_CONFIG_HUD,
	MISC_CONFIG_ADMIN,
	MISC_MUTE,
	MISC_PLACA_PD,
	
	MISC_SIZE //Dejar siempre este al final
};
new PLAYER_MISC[MAX_PLAYERS][MISC_SIZE];

enum obtain_work_coords_info
{
	Float:obtain_work_X,
	Float:obtain_work_Y,
	Float:obtain_work_Z,
	obtain_work_INTERIOR,
	bool:obtain_work_MAP_ICON,
	obtain_work_MAP_ICON_ID,
	Float:obtain_work_MAP_ICON_X,
	Float:obtain_work_MAP_ICON_Y,
	Float:obtain_work_MAP_ICON_Z,
};
new Float:obtain_work_coords[][obtain_work_coords_info] =
{
	{0.0, 0.0, 0.0, 0,	false, 0, 0.0, 0.0, 0.0},
	{1490.285766, 1305.699340, 1093.296386, 3,	true, 61, 1752.603881, -1894.155883, 13.557376},
	{1297.107543, -65.027748, 1002.498046, 18, true, 61, 59.4220, -244.4633, 1.5781},//Camionero
	{-86.235771, -1183.517822, 2.940625, 0, true, 27, -86.235771, -1183.517822, 2.940625},
	{-372.126922, -1435.706298, 25.726562, 0,	true, 61, -372.126922, -1435.706298, 25.726562}, //Cosechador
	{-1884.997314, -1636.733642, 21.750000, 0, true, 61, -1884.997314, -1636.733642, 21.750000}, //Basurero
	{-532.029846, -97.514228, 63.296875, 0, true, 61, -532.029846, -97.514228, 63.296875},
	{1564.864257, 23.255302, 24.164062, 0, true, 61, 1564.864257, 23.255302, 24.164062},
	{-510.972015, 324.242736, 2004.585937, 20,	false, 0, 1480.966918, -1772.065673, 18.795755}, // policia
	{2101.4243,-1817.2490,13.5547, 0, false, 0, 2105.485107, -1806.400878, 13.554687},
	{-2033.237304, -117.411125, 1035.171875, 3,	false, 0, 0.0, 0.0, 0.0},
	{2412.4834, -1513.1104, 1398.2654, 18,	false, 61, 445.2300, -850.8131, 29.1990},//Mineros
	{2449.8030,-1762.0696,13.5849, 0,	false, 61, 2449.8030,-1762.0696,13.5849},//Protector
	{2748.0962,-2462.6909,13.6484, 0,	false, 51, 2748.0962,-2462.6909,13.6484},//Transportista
	{2840.9634,-1997.6227,-4.5838, 0,	false, 51, 2898.1497,-2004.3743,3.6757},//Pescador
	{2840.9634,-1997.6227,-4.5838, 0,	false, 51, 2898.1497,-2004.3743,3.6757}//Cantera
	
};
 
 
enum Work_Vehicles_Info
{
	bool:work_vehicle_VALID,
	work_vehicle_WORK,
	work_vehicle_EXP,
	bool:work_vehicle_NEED_DUTY
};
new WORK_VEHICLES[MAX_VEHICLES][Work_Vehicles_Info];

new valid_work_vehicle_colors[] = {84, 63, 91, 63, 102, 65, 105, 72, 110, 93, 121, 93, 12, 95, 23, 1};
enum San_Andreas_Vehicles_Info
{
	san_andreas_vehicle_TYPE,
	san_andreas_vehicle_TYPE_IN,
	san_andreas_vehicle_TYPE_IN_EXP,
	san_andreas_vehicle_MODELID,
	Float:san_andreas_vehicle_SPAWN_X,
	Float:san_andreas_vehicle_SPAWN_Y,
	Float:san_andreas_vehicle_SPAWN_Z,
	Float:san_andreas_vehicle_SPAWN_ANGLE,
	san_andreas_vehicle_COLOR_1,
	san_andreas_vehicle_COLOR_2,
	san_andreas_vehicle_vip
};
new San_Andreas_Vehicles[][San_Andreas_Vehicles_Info] =
{
	//Rent vehicle
	//{VEHICLE_TYPE_RENT, WORK_NONE, 0, 411, 1568.4988, -1285.2532, 17.1646,182.1429, 6, 1, 0},
	//cantera
	/*{VEHICLE_TYPE_WORK, WORK_CANTERA, 0, 420, 1792.5676, -1868.2953, 13.2887, 0.0000, 6, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_CANTERA, 0, 420, 1807.7679, -1868.5153, 13.2887, 0.0000, 6, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_CANTERA, 0, 420, 1805.2649, -1901.7776, 13.1195, 0.0000, 6, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_CANTERA, 0, 420, 1805.2053, -1932.5355, 13.0518, 0.0000, 6, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_CANTERA, 0, 420, 1775.7917, -1932.4465, 13.0518, 0.0000, 6, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_CANTERA, 0, 420, 1783.2333, -1932.4965, 13.0518, 0.0000, 6, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_CANTERA, 0, 420, 1798.8303, -1932.5427, 13.0518, 0.0000, 6, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_CANTERA, 0, 420, 1791.2925, -1932.4644, 13.0518, 0.0000, 6, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_CANTERA, 0, 438, 1775.7085, -1916.0463, 13.2772, 0.0000, 6, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_CANTERA, 0, 420, 1805.3810, -1917.4658, 13.1195, 0.0000, 6, 1, 0},*/
	//taxi ls
	{VEHICLE_TYPE_WORK, WORK_TAXI, 0, 420, 1792.5676, -1868.2953, 13.2887, 0.0000, 6, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_TAXI, 0, 420, 1807.7679, -1868.5153, 13.2887, 0.0000, 6, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_TAXI, 0, 420, 1805.2649, -1901.7776, 13.1195, 0.0000, 6, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_TAXI, 0, 420, 1805.2053, -1932.5355, 13.0518, 0.0000, 6, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_TAXI, 0, 420, 1775.7917, -1932.4465, 13.0518, 0.0000, 6, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_TAXI, 0, 420, 1783.2333, -1932.4965, 13.0518, 0.0000, 6, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_TAXI, 0, 420, 1798.8303, -1932.5427, 13.0518, 0.0000, 6, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_TAXI, 0, 420, 1791.2925, -1932.4644, 13.0518, 0.0000, 6, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_TAXI, 0, 438, 1775.7085, -1916.0463, 13.2772, 0.0000, 6, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_TAXI, 0, 420, 1805.3810, -1917.4658, 13.1195, 0.0000, 6, 1, 0},
	// taxi sf
	{VEHICLE_TYPE_WORK, WORK_TAXI, 0, 420, -1986.7380, 106.9412, 27.2298, 0.0000, 6, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_TAXI, 0, 438, -1986.7380, 114.9412, 27.2298, 0.0000, 6, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_TAXI, 0, 420, -1986.7380, 125.9412, 27.2298, 0.0000, 6, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_TAXI, 0, 420, -1986.7380, 138.4412, 27.2298, 0.0000, 6, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_TAXI, 0, 438, -1986.7380, 145.4412, 27.2298, 0.0000, 6, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_TAXI, 0, 420, -1986.7380, 155.9412, 27.2298, 0.0000, 6, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_TAXI, 0, 420, -1986.7380, 171.4412, 27.2298, 0.0000, 6, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_TAXI, 0, 420, -1986.7380, 178.4412, 27.2298, 0.0000, 6, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_TAXI, 0, 420, -1986.7380, 185.4412, 27.2298, 0.0000, 6, 1, 0},
	// taxi lv
	{VEHICLE_TYPE_WORK, WORK_TAXI, 0, 438, 1687.2935, 1297.4829, 10.5616, 180.0000, 6, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_TAXI, 0, 420, 1695.2935, 1297.4829, 10.5616, 180.0000, 6, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_TAXI, 0, 420, 1695.7935, 1305.9829, 10.5616, 0.0000, 6, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_TAXI, 0, 420, 1691.7935, 1305.9829, 10.5616, 0.0000, 6, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_TAXI, 0, 438, 1688.2935, 1305.9829, 10.5616, 0.0000, 6, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_TAXI, 0, 420, 1681.7935, 1305.9829, 10.5616, 0.0000, 6, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_TAXI, 0, 420, 1688.3271, 1287.1450, 10.5616, 0.0000, 6, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_TAXI, 0, 420, 1693.8271, 1287.1450, 10.5616, 0.0000, 6, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_TAXI, 0, 438, 1699.3271, 1287.1450, 10.5616, 0.0000, 6, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_TAXI, 0, 420, 1703.3271, 1287.1450, 10.5616, 0.0000, 6, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_TAXI, 0, 420, 1706.8271, 1287.1450, 10.5616, 0.0000, 6, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_TAXI, 0, 420, 1711.8271, 1287.1450, 10.5616, 0.0000, 6, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_TAXI, 0, 438, 1709.3271, 1316.1450, 10.5616, 180.0000, 6, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_TAXI, 0, 420, 1703.3271, 1316.1450, 10.5616, 180.0000, 6, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_TAXI, 0, 438, 1698.3271, 1316.1450, 10.5616, 180.0000, 6, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_TAXI, 0, 420, 1694.8271, 1316.1450, 10.5616, 180.0000, 6, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_TAXI, 0, 438, 1691.3271, 1316.1450, 10.5616, 180.0000, 6, 1, 0},

	//Camionero
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 456, 26.8316, -334.0323, 2.4590, 3.6000, -1, -1,  0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 456, 31.8797, -334.1994, 2.2416, 0.0000, -1, -1,  0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 456, 25.9487, -323.4895, 2.4590, 3.6000, -1, -1,  0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 456, 31.3822, -322.7670, 2.4590, 3.6000, -1, -1,  0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 456, 43.9127, -332.6555, 2.4590, 3.6000, -1, -1,  0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 456, 47.7416, -332.5807, 2.4590, 3.6000, -1, -1,  0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 456, 43.1342, -323.2747, 2.4590, 3.6000, -1, -1,  0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 456, 48.0707, -322.5560, 2.4590, 3.6000, -1, -1,  0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 456, 77.7974, -334.2102, 1.5127, 3.6000, -1, -1,  0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 456, 83.7400, -334.6476, 1.4499, 3.6000, -1, -1,  0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 456, 83.4722, -322.5985, 2.4590, 3.6000, -1, -1,  0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 456, 77.7564, -323.0141, 2.4590, 3.6000, -1, -1,  0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 456, 65.5846, -335.6667, 1.5305, 3.6000, -1, -1,  0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 456, 59.7499, -335.4740, 1.5305, 3.6000, -1, -1,  0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 456, 65.2836, -324.9847, 1.5305, 3.6000, -1, -1,  0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 456, 59.6125, -325.3713, 1.5305, 3.6000, -1, -1,  0},

	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 498, 98.5342, -333.2928, 1.4751, 0.0000,  0, 0, 1},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 498, 92.2110, -333.3673, 1.4751, 0.0000,  0, 0, 1},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 498, 98.6932, -321.6997, 1.4751, 0.0000,  0, 0, 1},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 498, 92.1675, -322.1609, 1.4751, 0.0000,  0, 0, 1},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 498, 110.1246, -334.2141, 1.4751, 0.0000, 0, 0, 1},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 498, 115.3674, -323.5599, 1.4751, 0.0000, 0, 0, 1},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 498, 116.5709, -333.7167, 1.4751, 4.5600, 0, 0, 1},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 498, 110.0279, -324.0735, 1.4751, 0.0000, 0, 0, 1},
	/*{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 414, -494.4160, -472.8649, 25.5098, 180.0000, -1, -1, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 456, -499.3518, -473.3605, 25.5404, 180.0000, -1, -1, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 498, -504.5551, -473.4075, 25.4323, 180.0000, -1, -1, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 498, -510.0538, -473.4275, 25.4323, 180.0000, -1, -1, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 498, -529.0538, -473.4275, 25.4323, 180.0000, -1, -1, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 498, -544.5538, -473.4275, 25.4323, 180.0000, -1, -1, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 498, -559.5538, -473.4275, 25.4323, 180.0000, -1, -1, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 498, -572.5538, -473.4275, 25.4323, 180.0000, -1, -1, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 498, -589.0538, -473.4275, 25.4323, 180.0000, -1, -1, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 456, -514.8518, -473.3605, 25.5404, 180.0000, -1, -1, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 456, -533.8518, -473.3605, 25.5404, 180.0000, -1, -1, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 456, -564.8518, -473.3605, 25.5408, 180.0000, -1, -1, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 456, -577.3518, -473.3605, 25.5404, 180.0000, -1, -1, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 456, -583.3518, -473.3605, 25.5404, 180.0000, -1, -1, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 414, -519.4160, -472.8649, 25.5098, 180.0000, -1, -1, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 414, -550.4160, -472.8649, 25.5098, 180.0000, -1, -1, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 456, -489.3518, -473.3605, 25.5404, 180.0000, -1, -1, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 456, -483.3518, -473.3605, 25.5404, 180.0000, -1, -1, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 414, -478.4160, -472.8649, 25.5098, 180.0000, -1, -1, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 414, -473.4160, -472.8649, 25.5098, 180.0000, -1, -1, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 414, -469.7829, -488.2091, 25.5098, 180.0000, -1, -1, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 414, -489.7829, -488.2091, 25.5098, 180.0000, -1, -1, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 414, -540.2829, -488.2091, 25.5098, 180.0000, -1, -1, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 414, -564.7829, -488.2091, 25.5098, 180.0000, -1, -1, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 414, -589.2829, -488.2091, 25.5098, 180.0000, -1, -1, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 456, -579.6942, -488.2058, 25.5404, 180.0000, -1, -1, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 456, -549.6942, -488.2058, 25.5404, 180.0000, -1, -1, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 456, -510.6942, -488.2058, 25.5404, 180.0000, -1, -1, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 498, -500.5240, -488.8626, 25.4323, 180.0000, -1, -1, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 498, -556.0240, -488.8626, 25.4323, 180.0000, -1, -1, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 498, -615.4958, -480.0750, 25.5963, 269.0000, 0, 0, 1},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 498, -615.3096, -490.5564, 25.5963, 269.0000, 0, 0, 1},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 498, -615.4363, -500.5580, 25.5963, 269.0000, 0, 0, 1},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 498, -615.4330, -527.0305, 25.5963, 269.0000, 0, 0, 1},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 498, -615.8846, -537.6530, 25.5963, 269.0000, 0, 0, 1},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 498, -616.0970, -547.9350, 25.5963, 269.0000, 0, 0, 1},*/
	//Mecanico
	{VEHICLE_TYPE_WORK, WORK_MECHANIC, 0, 525, -64.1689, -1160.0291, 3.0971, 150.8192, 1, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_MECHANIC, 0, 525, -70.7204, -1156.8854, 2.7596, 150.8192, 1, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_MECHANIC, 0, 525, -76.7969, -1153.1581, 2.6658, 150.8192, 1, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_MECHANIC, 0, 525, -82.2357, -1150.2081, 2.8056, 150.8192, 1, 1, 0},
	//Cosechador
	{VEHICLE_TYPE_WORK, WORK_HARVESTER, 0, 532, -390.604370, -1476.015747, 26.704042, 259.474060, 1, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_HARVESTER, 0, 532, -385.473022, -1464.722900, 26.711814, 227.251434, 1, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_HARVESTER, 0, 532, -372.544342, -1462.451293, 26.736181, 224.972244, 1, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_HARVESTER, 0, 532, -375.785583, -1473.692260, 26.720621, 224.966537, 1, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_HARVESTER, 0, 532, -379.832061, -1484.033203, 26.696950, 223.968917, 1, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_HARVESTER, 0, 532, -389.124328, -1491.877197, 26.187450, 314.527038, 1, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_HARVESTER, 0, 532, -382.092529, -1499.563842, 25.449359, 314.704895, 1, 1, 0},
	//Basurero
	{VEHICLE_TYPE_WORK, WORK_TRASH, 0, 408, -1913.5554, -1702.3322, 22.5969, 270.0000, 26, 26, 0},
	{VEHICLE_TYPE_WORK, WORK_TRASH, 0, 408, -1913.5554, -1707.8322, 22.5969, 270.0000, 26, 26, 0},
	{VEHICLE_TYPE_WORK, WORK_TRASH, 0, 408, -1914.0554, -1713.8322, 22.5969, 270.0000, 26, 26, 0},
	{VEHICLE_TYPE_WORK, WORK_TRASH, 0, 408, -1913.5554, -1719.8322, 22.5969, 270.0000, 26, 26, 0},
	{VEHICLE_TYPE_WORK, WORK_TRASH, 0, 408, -1913.5554, -1726.3322, 22.5969, 270.0000, 26, 26, 0},
	{VEHICLE_TYPE_WORK, WORK_TRASH, 0, 408, -1913.5554, -1732.8322, 22.5969, 270.0000, 26, 26, 0},
	{VEHICLE_TYPE_WORK, WORK_TRASH, 0, 408, -1901.7543, -1702.9012, 22.5969, 180.0000, 26, 26, 0},
	{VEHICLE_TYPE_WORK, WORK_TRASH, 0, 408, -1896.7543, -1702.9012, 22.5969, 180.0000, 26, 26, 0},
	{VEHICLE_TYPE_WORK, WORK_TRASH, 0, 408, -1892.2543, -1702.9012, 22.5969, 180.0000, 26, 26, 0},
	{VEHICLE_TYPE_WORK, WORK_TRASH, 0, 408, -1879.0313, -1739.9550, 22.5969, 33.7282,  26, 26, 0},
	{VEHICLE_TYPE_WORK, WORK_TRASH, 0, 408, -1884.2616, -1743.0443, 22.5969, 33.7282,  26, 26, 0},
	{VEHICLE_TYPE_WORK, WORK_TRASH, 0, 408, -1889.2466, -1746.0833, 22.5969, 33.7282,  26, 26, 0},
	{VEHICLE_TYPE_WORK, WORK_TRASH, 0, 408, -1894.2480, -1748.9353, 22.5969, 33.7282,  26, 26, 0},
	{VEHICLE_TYPE_WORK, WORK_TRASH, 0, 408, -1898.6696, -1751.6755, 22.5969, 33.7282,  26, 26, 0},
	//policia ls
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 596, 1601.9473, -1696.1240, 5.6107, 89.0810, 0, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 596, 1602.1748, -1691.9042, 5.6110, 88.4362, 0, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 596, 1602.0411, -1700.2920, 5.6110, 88.6648, 0, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 596, 1601.8983, -1704.0681, 5.6115, 89.3552, 0, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 596, 1587.3389, -1710.4362, 5.6118, 1.0410, 0, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 596, 1583.4728, -1710.5020, 5.6120, 359.4709, 0, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 6, 402, 1545.2308, -1680.1783, 5.7223, 89.2245, 0, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 11, 411, 1544.4467, -1676.0834, 5.6177, 89.6164, 0, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 1, 599, 1570.1743, -1710.9041, 6.0789, 0.5127, 0, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 1, 599, 1574.3672, -1710.9801, 6.0787, 0.3933, 0, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 5, 523, 1583.7402, -1668.5023, 5.4657, 88.7599, 0, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 5, 523, 1583.7308, -1671.5286, 5.4637, 87.6115, 0, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 5, 523, 1583.8281, -1674.2369, 5.4653, 89.9781, 0, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 9, 427, 1538.5195, -1645.3208, 6.0224, 178.7787, 0, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 9, 427, 1534.8190, -1645.2932, 6.0222, 178.9228, 0, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 11, 601, 1526.7194, -1644.9723, 5.6494, 179.5714, 0, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 596, 1601.9880, -1687.8237, 5.6110, 89.6723, 0, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 596, 1602.2769, -1684.0154, 5.6119, 89.6658, 0, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 596, 1591.4995, -1710.3190, 5.6105, 359.6988, 0, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 596, 1595.5188, -1710.3881, 5.6109, 358.7049, 0, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 11, 528, 1546.5891, -1654.8442, 5.9344, 90.4177, 0, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 11, 528, 1546.4629, -1650.9556, 5.9348, 90.2691, 0, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 11, 601, 1530.5052, -1644.9598, 5.6494, 179.5481, 0, 1, 0},
	//policia sf
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 597, -1588.1722, 749.2943, -5.5779, 0.0000, 0, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 597, -1592.2081, 749.1027, -5.5779, 0.0000, 0, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 597, -1596.2935, 749.4324, -5.5779, 0.0000, 0, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 597, -1600.3527, 749.0949, -5.5779, 0.0000, 0, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 597, -1604.2867, 749.3167, -5.5779, 0.0000, 0, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 597, -1575.0361, 742.6935, -5.5779, 90.0000, 0, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 597, -1574.9946, 738.4707, -5.5779, 90.0000, 0, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 597, -1575.1072, 735.0409, -5.5779, 90.0000, 0, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 597, -1575.0322, 730.9659, -5.5779, 90.0000, 0, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 597, -1575.1212, 722.3821, -5.5779, 90.0000, 0, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 597, -1575.0864, 718.5404, -5.5779, 90.0000, 0, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 599, -1574.7537, 714.1426, -5.1303, 90.0000, 0, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 599, -1574.6227, 710.4202, -5.1303, 90.0000, 0, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 599, -1574.6934, 706.5904, -5.1303, 90.0000, 0, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 597, -1599.5576, 693.3072, -5.5779, 180.0000, 0, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 597, -1608.8636, 693.0085, -5.5779, 180.0000, 0, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 597, -1612.5468, 692.6500, -5.5779, 180.0000, 0, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 11, 411, -1639.4524, 662.1886, -5.5417, -90.0000, 0, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 11, 415, -1639.3489, 666.1519, -5.5417, -90.0000, 0, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 11, 413, -1639.1108, 669.9014, -5.2635, -90.0000, 0, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 11, 601, -1638.7815, 678.3526, -5.4683, -90.0000, 0, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 11, 601, -1638.8115, 682.3326, -5.4683, -90.0000, 0, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 9, 427, -1628.3209, 691.4453, -5.0293, 180.0000, 0, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 9, 427, -1624.6458, 691.1703, -5.0293, 180.0000, 0, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 9, 427, -1621.0149, 691.4860, -5.0293, 180.0000, 0, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 9, 426, -1639.1274, 658.2158, -5.5682, -90.0000, 0, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 6, 523, -1617.3679, 731.1095, -5.6017, 0.0000, 0, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 6, 523, -1615.6661, 731.2083, -5.6017, 0.0000, 0, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 6, 523, -1613.6464, 731.1612, -5.6017, 0.0000, 0, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 6, 523, -1611.4475, 731.4107, -5.6017, 0.0000, 0, 1, 0},
	//Policia lvpd
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 598, 2314.1758, 2475.5225, 3.0620, 90.0000, 0, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 598, 2313.4473, 2480.4548, 3.0620, 90.0000, 0, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 598, 2313.9863, 2470.4392, 3.0620, 90.0000, 0, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 598, 2313.3777, 2466.1509, 3.0620, 90.0000, 0, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 598, 2313.2185, 2460.8066, 3.0620, 90.0000, 0, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 598, 2285.6572, 2474.5803, 3.0066, 0.0000, 0, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 598, 2281.5867, 2475.2078, 3.0066, 0.0000, 0, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 598, 2277.3740, 2475.5874, 3.0066, 0.0000, 0, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 598, 2272.8518, 2475.8105, 3.0066, 0.0000, 0, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 598, 2307.3750, 2431.3274, 2.9947, 0.0000, 0, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 598, 2298.9263, 2431.8225, 2.9947, 0.0000, 0, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 599, 2272.4565, 2431.9678, 3.3194, 0.0000, 0, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 599, 2267.9832, 2431.6877, 3.3194, 0.0000, 0, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 599, 2263.6194, 2431.6626, 3.3194, 0.0000, 0, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 11, 601, 2246.5898, 2431.7930, 3.0092, 0.0000, 0, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 6, 427, 2250.7744, 2431.9976, 3.2946, 0.0000, 0, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 6, 427, 2258.8242, 2431.7910, 3.2946, 0.0000, 0, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 6, 427, 2254.3489, 2432.4753, 3.2946, 0.0000, 0, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 9, 415, 2297.8123, 2451.5508, 3.0484, 90.0000, 0, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 9, 415, 2298.2183, 2455.7683, 3.0484, 90.0000, 0, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 6, 523, 2299.6643, 2459.1206, 2.8170, 90.0000, 0, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 6, 523, 2299.8755, 2460.9136, 2.8170, 90.0000, 0, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 6, 523, 2299.8306, 2463.0632, 2.8170, 90.0000, 0, 1, 0},
	//pizzero
	{VEHICLE_TYPE_WORK, WORK_PIZZA, 0, 448, 2094.2339, -1813.4716, 12.9325, 90.0000, 3, 6, 0},
	{VEHICLE_TYPE_WORK, WORK_PIZZA, 0, 448, 2094.2139, -1814.9722, 12.9325, 90.0000, 3, 6, 0},
	{VEHICLE_TYPE_WORK, WORK_PIZZA, 0, 448, 2094.2139, -1816.4722, 12.9325, 90.0000, 3, 6, 0},
	{VEHICLE_TYPE_WORK, WORK_PIZZA, 0, 448, 2094.2139, -1817.9722, 12.9325, 90.0000, 3, 6, 0},
	{VEHICLE_TYPE_WORK, WORK_PIZZA, 0, 448, 2094.2139, -1819.4722, 12.9325, 90.0000, 3, 6, 0},
	{VEHICLE_TYPE_WORK, WORK_PIZZA, 0, 448, 2094.2139, -1820.9722, 12.9325, 90.0000, 3, 6, 0},
	{VEHICLE_TYPE_WORK, WORK_PIZZA, 0, 448, 2098.2712, -1812.8209, 12.9325, 0.0000,  3, 6, 0},
	{VEHICLE_TYPE_WORK, WORK_PIZZA, 0, 448, 2096.7712, -1812.8209, 12.9325, 0.0000,  3, 6, 0},
	//ambulancias
	{VEHICLE_TYPE_WORK, WORK_MEDIC, 0, 416, 2036.2555, -1429.4966, 17.0571, 180.00, 1, 3, 0},
	{VEHICLE_TYPE_WORK, WORK_MEDIC, 0, 416, 2036.4742, -1439.7246, 17.0571, 180.00, 1, 3, 0},
	{VEHICLE_TYPE_WORK, WORK_MEDIC, 0, 416, 2016.8370, -1411.2896, 17.0571, 90.000, 1, 3, 0},
	{VEHICLE_TYPE_WORK, WORK_MEDIC, 0, 416, 2017.1022, -1416.2045, 17.0571, 90.000, 1, 3, 0},
	{VEHICLE_TYPE_WORK, WORK_MEDIC, 0, 416, 1180.2153, -1308.2330, 13.8244, -90.00, 1, 3, 0},
	{VEHICLE_TYPE_WORK, WORK_MEDIC, 0, 416, 1180.4480, -1338.4403, 13.8244, -90.00, 1, 3, 0},
	{VEHICLE_TYPE_WORK, WORK_MEDIC, 0, 416, 1226.9530, 302.3792, 19.7678, 66.10860, 1, 3, 0},
	{VEHICLE_TYPE_WORK, WORK_MEDIC, 0, 416, -2202.2329, -2294.7314, 30.7048, 320.0, 1, 3, 0},
	{VEHICLE_TYPE_WORK, WORK_MEDIC, 0, 416, -2544.5457, 610.1262, 14.4484, 90.0000, 1, 3, 0},
	{VEHICLE_TYPE_WORK, WORK_MEDIC, 0, 416, -2544.9500, 604.4023, 14.4484, 90.0000, 1, 3, 0},
	{VEHICLE_TYPE_WORK, WORK_MEDIC, 0, 416, -2545.0088, 598.3672, 14.4484, 90.0000, 1, 3, 0},
	{VEHICLE_TYPE_WORK, WORK_MEDIC, 0, 416, -2544.8770, 593.1545, 14.4484, 90.0000, 1, 3, 0},
	{VEHICLE_TYPE_WORK, WORK_MEDIC, 0, 416, -2545.2927, 587.3546, 14.4484, 90.0000, 1, 3, 0},
	{VEHICLE_TYPE_WORK, WORK_MEDIC, 0, 416, -330.0057, 1062.9534, 19.7507, -90.000, 1, 3, 0},
	{VEHICLE_TYPE_WORK, WORK_MEDIC, 0, 416, -1508.8683, 2526.5510, 55.9118, 0.0000, 1, 3, 0},
	{VEHICLE_TYPE_WORK, WORK_MEDIC, 0, 416, -1504.4027, 2526.4734, 55.9118, 0.0000, 1, 3, 0},
	{VEHICLE_TYPE_WORK, WORK_MEDIC, 0, 416, 1617.1790, 1841.2314, 10.6855, 0.00000, 1, 3, 0},
	{VEHICLE_TYPE_WORK, WORK_MEDIC, 0, 416, 1612.3330, 1841.6625, 10.6855, 0.00000, 1, 3, 0},
	{VEHICLE_TYPE_WORK, WORK_MEDIC, 0, 416, 1607.3164, 1841.8850, 10.6855, 0.00000, 1, 3, 0},
	{VEHICLE_TYPE_WORK, WORK_MEDIC, 0, 416, 1602.5084, 1841.9370, 10.6855, 0.00000, 1, 3, 0},
	{VEHICLE_TYPE_WORK, WORK_MEDIC, 0, 416, 1597.7699, 1841.7919, 10.6855, 0.00000, 1, 3, 0},
	/*trabajo pescador*/

	{VEHICLE_TYPE_WORK, WORK_PESCADOR, 0, 453, 2967.1772, -1932.5055, 0.6606, -92.4000, -1, -1, 0},
	{VEHICLE_TYPE_WORK, WORK_PESCADOR, 0, 453, 2933.8005, -1925.0187, 0.6606, 0.0000, -1, -1, 0},
	{VEHICLE_TYPE_WORK, WORK_PESCADOR, 0, 453, 2941.3325, -1925.2632, 0.6606, 0.0000, -1, -1, 0},
	{VEHICLE_TYPE_WORK, WORK_PESCADOR, 0, 453, 2950.1838, -1925.3286, 0.6606, 0.0000, -1, -1, 0},
	{VEHICLE_TYPE_WORK, WORK_PESCADOR, 0, 453, 2957.7546, -1925.5922, 0.6606, 0.0000, -1, -1, 0},
	{VEHICLE_TYPE_WORK, WORK_PESCADOR, 0, 453, 2966.5217, -1940.6863, 0.6606, -89.9399, -1, -1, 0},
	{VEHICLE_TYPE_WORK, WORK_PESCADOR, 0, 453, 2933.1150, -1947.1226, 0.6606, -179.9399, -1, -1, 0},
	{VEHICLE_TYPE_WORK, WORK_PESCADOR, 0, 453, 2940.6733, -1947.3416, 0.6606, -179.9399, -1, -1, 0},
	{VEHICLE_TYPE_WORK, WORK_PESCADOR, 0, 453, 2949.2212, -1947.5142, 0.6606, -179.9399, -1, -1, 0},
	{VEHICLE_TYPE_WORK, WORK_PESCADOR, 0, 453, 2958.0017, -1947.7806, 0.6606, -179.9399, -1, -1, 0},
	{VEHICLE_TYPE_WORK, WORK_PESCADOR, 0, 453, 2957.2842, -1987.2096, 0.6606, -179.9399, -1, -1, 0},
	{VEHICLE_TYPE_WORK, WORK_PESCADOR, 0, 453, 2949.9185, -1987.2130, 0.6606, -179.9399, -1, -1, 0},
	{VEHICLE_TYPE_WORK, WORK_PESCADOR, 0, 453, 2941.5405, -1987.0109, 0.6606, -179.9399, -1, -1, 0},
	{VEHICLE_TYPE_WORK, WORK_PESCADOR, 0, 453, 2934.0720, -1986.8248, 0.6606, -179.9399, -1, -1, 0},
	{VEHICLE_TYPE_WORK, WORK_PESCADOR, 0, 453, 2965.7339, -1972.7797, 0.6606, -92.5799, -1, -1, 0},
	{VEHICLE_TYPE_WORK, WORK_PESCADOR, 0, 453, 2965.9739, -1979.9991, 0.6606, -92.5799, -1, -1, 0}

	//renta.
	/*{VEHICLE_TYPE_NONE, WORK_NONE, 0, 509, 1769.0483, -1905.9906, 13.0658, 0.00000, -1, -1, 0},
	{VEHICLE_TYPE_NONE, WORK_NONE, 0, 509, 1766.8649, -1906.0200, 13.0658, 0.00000, -1, -1, 0},
	{VEHICLE_TYPE_NONE, WORK_NONE, 0, 509, 1756.9684, -1905.9261, 13.0658, 0.00000, -1, -1, 0},
	{VEHICLE_TYPE_NONE, WORK_NONE, 0, 509, 1764.8287, -1905.9766, 13.0658, 0.00000, -1, -1, 0},
	{VEHICLE_TYPE_NONE, WORK_NONE, 0, 509, 1762.6488, -1905.9103, 13.0658, 0.00000, -1, -1, 0},
	{VEHICLE_TYPE_NONE, WORK_NONE, 0, 509, 1760.6249, -1905.9413, 13.0658, 0.00000, -1, -1, 0},
	{VEHICLE_TYPE_NONE, WORK_NONE, 0, 509, 1758.7451, -1905.8674, 13.0658, 0.00000, -1, -1, 0}*/
};
/*
	//Facciones
	{VEHICLE_TYPE_FACCION, WORK_FACCION_GROVE, 0, 467, 2505.5796, -1679.4762, 13.0928, -44.5200,  86, 86, 0},
	{VEHICLE_TYPE_FACCION, WORK_FACCION_GROVE, 0, 482, 2508.8901, -1673.8300, 13.2928, -15.8400,  86, 86, 0},
	{VEHICLE_TYPE_FACCION, WORK_FACCION_GROVE, 0, 482, 2499.2058, -1682.5111, 13.8623, -73.9800,  86, 86, 0},
	{VEHICLE_TYPE_FACCION, WORK_FACCION_GROVE, 0, 489, 2492.8311, -1683.8557, 13.5356, -84.3600,  86, 86, 0},
	{VEHICLE_TYPE_FACCION, WORK_FACCION_GROVE, 0, 492, 2484.4807, -1683.8102, 13.1040, -90.9600,  86, 86, 0},
	{VEHICLE_TYPE_FACCION, WORK_FACCION_GROVE, 0, 492, 2473.4871, -1690.3203, 13.1040, 2.5800,    86, 86, 0},	
	{VEHICLE_TYPE_FACCION, WORK_FACCION_GROVE, 0, 492, 2509.6794, -1666.8929, 13.1040, 2.5200,    86, 86, 0},
	{VEHICLE_TYPE_FACCION, WORK_FACCION_GROVE, 0, 554, 2516.8774, -1672.1844, 13.9807, -113.0000, 86, 86, 0},
	{VEHICLE_TYPE_FACCION, WORK_FACCION_GROVE, 0, 566, 2500.2288, -1655.4348, 13.0274, 76.0800,   86, 86, 0},
	{VEHICLE_TYPE_FACCION, WORK_FACCION_GROVE, 0, 566, 2486.1177, -1653.8832, 13.0274, 90.1800,   86, 86, 0},
	{VEHICLE_TYPE_FACCION, WORK_FACCION_GROVE, 0, 566, 2479.0859, -1653.7131, 13.0274, 90.1800,   86, 86, 0},
	{VEHICLE_TYPE_FACCION, WORK_FACCION_GROVE, 0, 567, 2475.6777, -1681.1898, 13.2705, -125.4600, 86, 86, 0}
*/
enum San_Andreas_Barriers_Info
{
	barrier_VEHICLE_TYPE,
	barrier_VEHICLE_TYPE_IN,
	Float:barrier_X,
	Float:barrier_Y,
	Float:barrier_Z,
	Float:barrier_ROTATION,
	barrier_INTERIOR,
	barrier_WORLD,
	barrier_OBJECT_ID,
	barrier_TIMER,
	bool:barrier_CLOSING
};
new San_Andreas_Barriers[][San_Andreas_Barriers_Info] = // usar VEHICLE_TYPE_NONE para que puedan pasar todos
{
	{VEHICLE_TYPE_WORK, WORK_TAXI, 1811.32373, -1886.26331, 12.36843, 90.00000, 			0, 0, INVALID_STREAMER_ID, -1, false}, // barrera taxi ls
	{VEHICLE_TYPE_WORK, WORK_TAXI, 1717.0457, 1308.0387, 9.7157, 90.0, 						0, 0, INVALID_STREAMER_ID, -1, false}, // barrera taxi lv
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 71.1544, -221.4758, 1.0, 0.0, 							0, 0, INVALID_STREAMER_ID, -1, false}, // barrera camioneros
	{VEHICLE_TYPE_WORK, WORK_POLICE, 1544.69629, -1630.79651, 12.31840, -90.0, 				0, 0, INVALID_STREAMER_ID, -1, false}, // barrera POLICIA LS
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2238.19897, 2450.41797, 9.80680, -90.0, 				0, 0, INVALID_STREAMER_ID, -1, false}, // barrera POLICIA LV
	{VEHICLE_TYPE_WORK, WORK_POLICE, -1572.20313, 658.83588, 6.07810, -90.0, 				0, 0, INVALID_STREAMER_ID, -1, false}, // barrera POLICIA SF 1
	{VEHICLE_TYPE_WORK, WORK_POLICE, -1701.42969, 687.59381, 23.88280, 90.0, 				0, 0, INVALID_STREAMER_ID, -1, false}, // barrera POLICIA SF 2
	{VEHICLE_TYPE_NONE, WORK_NONE, -1526.39063, 481.38281, 6.17970, 0.0, 					0, 0, INVALID_STREAMER_ID, -1, false}, // ejercito??
	{VEHICLE_TYPE_NONE, WORK_NONE, -82.1645, -1123.0260, 0.0373, 67.1102, 					0, 0, INVALID_STREAMER_ID, -1, false} // grua
};

enum VEHICLE_INFO_enum
{
	bool:vehicle_info_VALID,
	vehicle_info_NAME[24],
	Float:vehicle_info_MAX_GAS, // Por defecto
	Float:vehicle_info_MAX_VEL,
	vehicle_info_PRICE,
	vehicle_info_LEVEL,
	vehicle_info_EXTRA,
	vehicle_info_BOOT_SLOTS,
	vehicle_info_SEATS,
	bool:vehicle_info_ENGINE,
	bool:vehicle_info_DRIVER_DOOR,
	bool:vehicle_info_PASSENGER_DOOR,
	vehicle_info_VIP_LEVEL,
	vehicle_info_COINS,
	bool:vehicle_info_MECHANIC_TRAILER,
	Float:vehicle_info_MAX_ACEITE//max aceite: 200
};
new VEHICLE_INFO[][VEHICLE_INFO_enum] =
{
	{true, "Landstalker", 80.0, 159.00, 25000, 6, 0, 10			, 4		, true, true, true, 0, 0, true,120.0},
	{true, "Bravura", 45.0, 148.00, 20000, 4, 0, 6				, 2		, true, true, true, 0, 0, true,120.0},
	{true, "Buffalo", 50.0, 188.00, 50000, 8, 0, 6				, 2		, true, true, true, 0, 0, true,80.0},
	{true, "Linerunner", 150.0, 110.00, 60000, 30, 0, 0			, 2		, true, true, true, 0, 0, false,200.0},
	{true, "Perrenial", 50.0, 134.00, 10000, 2, 0, 10			, 4		, true, true, true, 0, 0, true,100.0},
	{true, "Sentinel", 45.0, 165.00, 23000, 2, 0, 6				, 4		, true, true, true, 0, 0, true,120.0},
	{true, "Dumper", 20.0, 111.00, 70000, 30, 0, 0				, 1		, true, true, true, 0, 0, false,200.0},
	{true, "Firetruck", 120.0, 149.00, 150000, 30, 0, 0			, 2		, true, true, true, 0, 0, false,200.0},
	{true, "Trashmaster", 80.0, 101.00, 30000, 30, 0, 0			, 2		, true, true, true, 0, 0, false,200.0},
	{true, "Stretch", 80.0, 159.00, 30000, 1, 0, 12				, 4		, true, true, true, 0, 25, true,100.0},
	{true, "Manana", 40.0, 131.00, 10000, 2, 0, 4				, 2		, true, true, true, 0, 0, true,85.0},
	{true, "Infernus", 80.0, 223.00, 2500000, 1, 0, 6			, 2		, true, true, true, 1, 80, true,50.0},
	{true, "Voodoo", 45.0, 170.00, 22000, 2, 0, 4				, 2		, true, true, true, 0, 0, true,100.0},
	{true, "Pony", 60.0, 111.00, 17000, 2, 0, 12					, 4		, true, true, true, 0, 0, false,100.0},
	{true, "Mule", 60.0, 106.00, 13000, 3, 0, 0					, 2		, true, true, true, 0, 0, false,90.0},
	{true, "Cheetah", 65.0, 194.00, 50000, 15, 0, 4				, 2		, true, true, true, 1, 20, true,60.0},
	{true, "Ambulance", 120.0, 155.00, 60000, 30, 0, 0			, 4		, true, true, true, 0, 0, false,150.0},
	{false, "Leviathan", 1.0, 1.00, 350000, 30, 0, 0				, 2		, true, true, true, 0, 0, false,200.0}, // >>>> No.
	{true, "Moonbeam", 60.0, 116.00, 1000, 2, 0, 12				, 4		, true, true, true, 0, 0, false,100.0},
	{true, "Esperanto", 40.0, 150.00, 13000, 3, 0, 5				, 2		, true, true, true, 0, 0, true,110.0},
	{true, "Taxi", 60.0, 146.00, 50000, 5, 0, 8					, 4		, true, true, true, 0, 0, true,150.0}, // >>>> No.
	{true, "Washington", 50.0, 155.00, 15000, 2, 0, 6			, 4		, true, true, true, 0, 0, true,95.0},
	{true, "Bobcat", 70.0, 141.00, 11000, 3, 0, 8				, 2		, true, true, true, 0, 0, true,130.0},
	{true, "MrWhoopee", 60.0, 99.00, 8000, 4, 0, 0				, 2		, true, true, true, 0, 0, false,30.0},
	{true, "BFInjection", 30.0, 136.00, 35000, 8, 0, 4			, 2		, true, true, false, 1, 20, true,50.0},
	{false, "Hunter", 1.0, 1.00, 3000000000, 30, 0, 0				, 1		, true, true, true, 0, 0, false,200.0}, // >>>> No.
	{true, "Premier", 70.0, 175.00, 30000, 3, 0, 6				, 4		, true, true, true, 0, 0, true,130.0},
	{true, "Enforcer", 120.0, 167.00, 150000, 3, 0, 0			, 4		, true, true, true, 0, 0, false,100.0}, // >>>> No.
	{true, "Securicar", 80.0, 158.00, 1500000, 3, 0, 12			, 4		, true, true, true, 0, 0, false,100.0}, // >>>> No.
	{true, "Banshee", 65.0, 203.00, 40000, 9, 0, 4				, 2		, true, true, true, 1, 20, true,60.0},
	{false, "Predator", 1.0, 1.00, 80000, 5, 0, 0				, 1		, true, true, true, 0, 0, false,200.0},
	{true, "Bus", 180.0, 131.00, 500000, 20, 0, 20				, 500	, true, true, true, 0, 0, false,200.0},
	{true, "Rhino", 200.0, 95.00, 100000000, 100, 0, 0				, 1		, true, true, true, 0, 0, false,200.0}, // >>>> No.
	{true, "Barracks", 150.0, 111.00, 60000, 80, 0, 0			, 2		, true, true, true, 0, 0, false,150.0},
	{true, "Hotknife", 50.0, 168.00, 300000, 5, 0, 4			, 2		, true, true, true, 1, 30, true,200.0}, // >>>> No.
	{false, "Trailer1", 1.0, 1.00, 500000, 5, 0, 0				, 0		, false, false, false, 0, 0, false,200.0}, // >>>> No.
	{true, "Previon", 40.0, 150.00, 80000, 2, 0, 6				, 2		, true, true, true, 0, 0, true,200.0},
	{true, "Coach", 150.0, 159.00, 450000, 30, 0, 20				, 500	, true, true, true, 0, 0, false,200.0},
	{true, "Cabbie", 80.0, 144.00, 54000, 5, 0, 6				, 4		, true, true, true, 0, 0, true,200.0}, // >>>> No.
	{true, "Stallion", 60.0, 170.00, 25000, 2, 0, 6				, 2		, true, true, true, 0, 0, true,200.0},
	{true, "Rumpo", 60.0, 137.00, 20000, 5, 0, 12					, 4		, true, true, true, 0, 0, false,200.0},
	{false, "RCBandit", 1.0, 1.00, 500, 1, 0, 0						, 1		, true, true, true, 0, 0, false,200.0}, // >>>> No.
	{true, "Romero", 60.0, 140.00, 8000, 3, 0, 0					, 2		, true, true, true, 0, 0, true,200.0},
	{true, "Packer", 150.0, 127.00, 5000, 3, 0, 0				, 2		, true, true, true, 0, 0, false,200.0},
	{true, "Monster", 80.0, 111.00, 200000, 1, 0, 20				, 2		, true, true, true, 2, 50, false,200.0},
	{true, "Admiral", 65.0, 165.00, 350000, 1, 0, 4				, 4		, true, true, true, 0, 0, true,200.0},
	{false, "Squalo", 1.0, 1.00, 200000, 1, 0, 0					, 1		, true, true, true, 2, 35, false,1.0},
	{false, "Seasparrow", 1.0, 1.00, 500000, 16, 0, 0			, 2		, true, true, true, 0, 0, false,200.0}, // >>>> No.
	{true, "Pizzaboy", 20.0, 116.00, 1600, 1, 0, 0				, 1		, true, true, true, 0, 0, false,200.0}, // >>>> No.
	{false, "Tram", 1.0, 1.00, 0, 0, 0, 0							, 0		, false, false, false, 0, 0, false,50.0}, // >>>> No.
	{false, "Trailer2", 1.0, 1.00, 0, 0, 0, 0						, 0		, false, false, false, 0, 0, false,200.0}, // >>>> No.
	{true, "Turismo", 80.0, 195.00, 150000, 10, 0, 6				, 2		, true, true, true, 1, 50, true,200.0},
	{false, "Speeder", 1.0, 1.00, 1500000, 1, 0, 0				, 1		, true, true, true, 0, 0, false,1.0},
	{false, "Reefer", 1.0, 1.00, 1000000, 10, 0, 0				, 1		, true, true, true, 0, 0, false,1.0},
	{false, "Tropic", 1.0, 1.00, 300000000, 1, 0, 0					, 1		, true, true, true, 2, 35, false,1.0},
	{true, "Flatbed", 120.0, 159.00, 45000, 10, 0, 0				, 2		, true, true, true, 0, 0, false,200.0}, // >>>> No.
	{true, "Yankee", 50.0, 107.00, 40000, 8, 0, 15				, 2		, true, true, true, 0, 0, false,200.0}, // >>>> No.
	{true, "Caddy", 10.0, 96.00, 20000, 1, 0, 0					, 2		, true, true, false, 1, 30, false,200.0}, // >>>> No.
	{true, "Solair", 80.0, 158.00, 20000, 3, 0, 8				, 4		, true, true, true, 0, 0, true,200.0},
	{true, "BerkleyRCVan", 60.0, 137.00, 5000, 5, 0, 12			, 4		, true, true, true, 0, 0, false,200.0}, // >>>> No.
	{false, "Skimmer", 1.0, 1.00, 160000, 5, 0, 0				, 2		, true, true, true, 0, 0, false,200.0},
	{true, "PCJ-600", 45.0, 167.00, 5000, 1, 0, 0				, 2		, true, true, false, 0, 0, false,80.0},
	{true, "Faggio", 20.0, 107.00, 1500, 1, 0, 0					, 2		, true, true, false, 0, 0, false,80.0},
	{true, "Freeway", 60.0, 142.00, 7000, 1, 0, 0				, 2		, true, true, false, 0, 15, false,80.0},
	{false, "RCBaron", 1.0, 1.00, 500, 1, 0, 0						, 1		, true, true, true, 0, 0, false,80.0}, // >>>> No.
	{false, "RCRaider", 1.0, 1.00, 500, 1, 0, 0						, 1		, true, true, true, 0, 0, false,80.0}, // >>>> No.
	{true, "Glendale", 50.0, 148.00, 20000, 1, 0, 6				, 4		, true, true, true, 0, 0, true,100.0},
	{true, "Oceanic", 50.0, 141.00, 16000, 1, 0, 6				, 4		, true, true, true, 0, 0, true,100.0},
	{true, "Sanchez", 40.0, 143.00, 5000, 2, 0, 0				, 2		, true, true, false, 0, 0, false,80.0},
	{false, "Sparrow", 1.0, 1.00, 50000, 30, 0, 0				, 2		, true, true, true, 0, 0, false,100.0}, // >>>> No.
	{true, "Patriot", 120.0, 158.00, 20000, 1, 0, 8				, 4		, true, true, true, 1, 30, true,200.0},
	{true, "Quad", 25.0, 111.00, 10000, 1, 0, 0					, 2		, true, true, false, 1, 20, false,100.0},
	{false, "Coastguard", 1.0, 1.00, 1500000, 5, 0, 0				, 1		, true, true, true, 0, 0, false,1.0}, // >>>> No.
	{false, "Dinghy", 1.0, 1.00, 1000000, 5, 0, 0					, 1		, true, true, true, 0, 0, false,1.0},
	{true, "Hermes", 80.0, 150.00, 90000, 2, 0, 6					, 2		, true, true, true, 0, 0, true,110.0},
	{true, "Sabre", 45.0, 174.00, 1000, 2, 0, 6					, 2		, true, true, true, 0, 0, true,120.0},
	{false, "Rustler", 1.0, 1.00, 300000, 15, 0, 0				, 1		, true, true, true, 0, 0, false,130.0},
	{true, "ZR-350", 60.0, 188.00, 320000, 3, 0, 4				, 2		, true, true, true, 0, 0, true,80.0},
	{true, "Walton", 50.0, 118.00, 1000, 1, 0, 6					, 2		, true, true, true, 0, 0, true,100.0},
	{true, "Regina", 80.0, 141.00, 10000, 5, 0, 10				, 4		, true, true, true, 0, 0, true,100.0},
	{true, "Comet", 80.0, 186.00, 50000, 1, 0, 4				, 2		, true, true, true, 0, 30, true,100.0},
	{false, "BMX", 1.0, 1.00, 150, 1, 0, 0							, 1		, false, true, true, 0, 0, false,100.0},
	{true, "Burrito", 60.0, 158.00, 10000, 1, 0, 12				, 4		, true, true, true, 0, 15, false,100.0},
	{true, "Camper", 50.0, 124.00, 5000, 2, 0, 10				, 3		, true, true, true, 0, 0, false,100.0},
	{false, "Marquis", 1.0, 1.00, 250000, 1, 0, 0				, 1		, true, true, true, 0, 0, false,1.0},
	{true, "Baggage", 20.0, 100.00, 6000, 1, 0, 0				, 1		, true, true, true, 0, 0, false,100.0}, // >>>> No.
	{true, "Dozer", 25.0, 65.00, 15000, 5, 0, 0					, 1		, true, true, true, 0, 0, false,100.0}, // >>>> No.
	{false, "Maverick", 1.0, 1.00, 200000, 1, 0, 0				, 4		, true, true, true, 1, 60, false,100.0}, // >>>> No.
	{false, "NewsChopper", 1.0, 1.00, 200000, 1, 0, 0			, 2		, true, true, true, 0, 0, false,100.0}, // >>>> No.
	{true, "Rancher", 90.0, 140.00, 45000, 3, 0, 10				, 2		, true, true, true, 0, 0, true,150.0},
	{true, "FBIRancher", 90.0, 158.00, 45000, 4, 0, 12			, 4		, true, true, true, 0, 0, true,100.0}, // >>>> No.
	{true, "Virgo", 45.0, 150.00, 45000, 1, 0, 4					, 2		, true, true, true, 0, 0, true,100.0},
	{true, "Greenwood", 45.0, 141.00, 45000, 2, 0, 4				, 4		, true, true, true, 0, 0, true,100.0},
	{false, "Jetmax", 1.0, 1.00, 500000, 1, 0, 0					, 1		, true, true, true, 1, 35, false,100.0},
	{true, "Hotring", 80.0, 216.00, 100000, 1, 0, 0				, 2		, true, true, true, 1, 35, true,100.0},
	{true, "Sandking", 60.0, 178.00, 80000, 1, 0, 0				, 2		, true, true, true, 1, 60, true,100.0},
	{true, "Blista Compact", 60.0, 164.00, 24000, 1, 0, 4		, 2		, true, true, true, 0, 0, true,100.0},
	{false, "Police Maverick", 1.0, 1.00, 60000, 20, 0, 0		, 4		, true, true, true, 0, 0, false,100.0},
	{true, "Boxville", 60.0, 109.00, 8000, 3, 0, 12				, 4		, true, true, true, 0, 0, false,100.0},
	{true, "Benson", 70.0, 124.00, 8000, 3, 0, 12				, 2		, true, true, true, 0, 0, false,100.0},
	{true, "Mesa", 60.0, 141.00, 3000, 5, 0, 2					, 2		, true, true, true, 0, 0, true,100.0},
	{false, "RCGoblin", 1.0, 1.00, 500, 1, 0, 0						, 1		, true, true, true, 0, 0, false,100.0}, // >>>> No.
	{true, "HotringRacer A", 80.0, 216.00, 40000, 1, 0, 0		, 2		, true, true, true, 1, 30, true,100.0},
	{true, "HotringRacer B", 80.0, 216.00, 40000, 1, 0, 0		, 2		, true, true, true, 1, 30, true,100.0},
	{true, "BloodringBanger", 40.0, 174.00, 40000, 1, 0, 0		, 2		, true, true, true, 1, 20, true,100.0},
	{true, "Rancher", 80.0, 140.00, 80000, 1, 0, 10				, 2		, true, true, true, 0, 0, true,150.0},
	{true, "SuperGT", 60.0, 180.00, 50000, 1, 0, 4				, 2		, true, true, true, 0, 30, true,200.0},
	{true, "Elegant", 65.0, 167.00, 20000, 1, 0, 6				, 4		, true, true, true, 0, 0, true,100.0},
	{true, "Journey", 90.0, 108.00, 40000, 4, 0, 12				, 2		, true, true, true, 0, 0, false,100.0},
	{false, "Bike", 1.0, 1.00, 500, 1, 0, 0							, 1		, false, true, true, 0, 0, false,100.0}, // >>>> No.
	{false, "MountainBike", 1.0, 1.00, 500, 1, 0, 0					, 1		, false, true, true, 0, 0, false,100.0}, // >>>> No.
	{false, "Beagle", 1.0, 1.00, 600000, 1, 0, 0				, 2		, true, true, true, 0, 0, false,100.0}, // >>>> No.
	{false, "Cropdust", 1.0, 1.00, 100000, 1, 0, 0				, 1		, true, true, true, 0, 0, false,100.0}, // >>>> No.
	{false, "Stunt", 1.0, 1.00, 200000, 1, 0, 0					, 1		, true, true, true, 0, 0, false,100.0}, // >>>> No.
	{true, "Tanker", 130.0, 121.00, 650000, 1, 0, 0				, 2		, true, true, true, 0, 0, false,200.0},
	{true, "Roadtrain", 150.0, 143.00, 600000, 1, 0, 0			, 2		, true, true, true, 1, 25, false,200.0},
	{true, "Nebula", 60.0, 158.00, 23000, 1, 0, 4				, 4		, true, true, true, 0, 0, true,100.0},
	{true, "Majestic", 45.0, 158.00, 17000, 1, 0, 4				, 2		, true, true, true, 0, 0, true,100.0},
	{true, "Buccaneer", 50.0, 165.00, 20000, 1, 0, 4				, 2		, true, true, true, 0, 0, true,100.0},
	{false, "Shamal", 1.0, 1.00, 200000, 1, 0, 0				, 1		, true, true, true, 0, 0, false,100.0},
	{false, "Hydra", 1.0, 1.00	, 500000, 100, 0, 0				, 1		, true, true, true, 0, 0, false,100.0},
	{true, "FCR-900", 50.0, 169.00, 6000, 1, 0, 0				, 2		, true, true, false, 1, 35, false,80.0},
	{true, "NRG-500", 40.0, 190.00, 8000, 1, 0, 0				, 2		, true, true, false, 1, 35, false,80.0},
	{true, "HPV1000", 60.0, 168.00, 5000, 1, 0, 0				, 2		, true, true, false, 0, 0, false,100.0}, // >>>> No.
	{true, "CementTruck", 30.0, 131.00, 8000, 8, 0, 0			, 2		, true, true, true, 0, 0, false,100.0}, // >>>> No.
	{true, "TowTruck", 60.0, 162.00, 30000, 1, 0, 4				, 2		, true, true, true, 0, 0, false,100.0}, // >>>> No.
	{true, "Fortune", 40.0, 159.00, 15000, 2, 0, 4				, 2		, true, true, true, 0, 0, true,100.0},
	{true, "Cadrona", 45.0, 150.00, 15000, 2, 0, 4				, 2		, true, true, true, 0, 0, true,100.0},
	{true, "FBITruck", 80.0, 178.00, 15000, 1, 0, 12			, 2		, true, true, true, 0, 0, true,100.0}, // >>>> No.
	{true, "Willard", 55.0, 150.00, 15000, 1, 0, 6				, 4		, true, true, true, 0, 0, true,100.0},
	{true, "Forklift", 10.0, 61.00, 15000, 1, 0, 0				, 1		, true, true, true, 0, 0, false,100.0},
	{true, "Tractor", 30.0, 71.00, 1000, 1, 0, 0					, 1		, true, true, true, 0, 0, false,100.0}, // >>>> No.
	{true, "Combine", 20.0, 111.00, 10000, 2, 0, 0				, 1		, true, true, true, 0, 0, false,100.0}, // >>>> No.
	{true, "Feltzer", 50.0, 168.00, 15000, 3, 0, 6				, 2		, true, true, true, 0, 0, true,100.0},
	{true, "Remington", 60.0, 170.00, 20000, 3, 0, 4				, 2		, true, true, true, 0, 0, true,100.0},
	{true, "Slamvan", 60.0, 159.00, 25000, 1, 0, 4				, 2		, true, true, true, 0, 0, true,100.0},
	{true, "Blade", 62.0, 174.00, 30000, 4, 0, 6					, 2		, true, true, true, 0, 0, true,100.0},
	{false, "Freight", 1.0, 1.00, 1000, 100, 0, 0				, 500	, true, true, true, 0, 0, false,100.0}, // >>>> No.
	{false, "Streak", 1.0, 1.00, 10000, 100, 0, 0					, 500	, true, true, true, 0, 0, false,100.0}, // >>>> No.
	{true, "Vortex", 20.0, 100.00, 200000, 20, 0, 0				, 1		, true, true, true, 0, 0, false,100.0}, // >>>> No.
	{true, "Vincent", 40.0, 150.00, 25000, 1, 0, 6				, 4		, true, true, true, 0, 0, true,100.0},
	{true, "Bullet", 60.0, 204.00, 70000, 5, 0, 4				, 2		, true, true, true, 1, 30, true,200.0},
	{true, "Clover", 45.0, 165.00, 1000, 1, 0, 4					, 2		, true, true, true, 0, 0, true,100.0},
	{true, "Sadler", 60.0, 152.00, 7000, 1, 0, 8					, 2		, true, true, true, 0, 0, true,100.0},
	{true, "FiretruckLA", 120.0, 149.00, 20000, 20, 0, 0			, 2		, true, true, true, 0, 0, false,100.0}, // >>>> No.
	{true, "Hustler", 80.0, 148.00, 35000, 1, 0, 6				, 2		, true, true, true, 0, 0, true,100.0},
	{true, "Intruder", 60.0, 150.00, 16000, 3, 0, 6				, 4		, true, true, true, 0, 0, true,100.0},
	{true, "Primo", 55.0, 144.00, 16000, 1, 0, 6					, 4		, true, true, true, 0, 0, true,100.0},
	{false, "Cargobob", 1.0, 1.00, 160000, 20, 0, 0				, 2		, true, true, true, 0, 0, false,100.0},
	{true, "Tampa", 60.0, 154.00, 16000, 2, 0, 4					, 2		, true, true, true, 0, 0, true,100.0},
	{true, "Sunrise", 60.0, 146.00, 16000, 2, 0, 6				, 4		, true, true, true, 0, 0, true,100.0},
	{true, "Merit", 55.0, 158.00, 16000, 2, 0, 6					, 4		, true, true, true, 0, 0, true,100.0},
	{true, "Utility", 60.0, 122.00, 16000, 3, 0, 6				, 2		, true, true, true, 0, 0, true,100.0}, // >>>> No.
	{false, "Nevada", 1.0, 1.00, 500000, 30, 0, 0				, 1		, true, true, true, 0, 0, false,100.0},
	{true, "Yosemite", 60.0, 145.00, 16000, 3, 0, 8				, 2		, true, true, true, 0, 0, true,100.0},
	{true, "Windsor", 45.0, 159.00, 36000, 3, 0, 4				, 2		, true, true, true, 1, 20, true,100.0},
	{true, "MonsterA", 45.0, 111.00, 66000, 1, 0, 20			, 2		, true, true, true, 1, 50, false,200.0},
	{true, "MonsterB", 60.0, 111.00, 66000, 1, 0, 20			, 2		, true, true, true, 1, 50, false,200.0},
	{true, "Uranus", 80.0, 157.00, 16000, 3, 0, 4				, 2		, true, true, true, 0, 0, true,100.0},
	{true, "Jester", 60.0, 179.00, 26000, 2, 0, 4				, 2		, true, true, true, 1, 15, true,100.0},
	{true, "Sultan", 60.0, 170.00, 46000, 3, 0, 6				, 4		, true, true, true, 0, 0, true,160.0},
	{true, "Stratum", 60.0, 155.00, 16000, 4, 0, 8				, 4		, true, true, true, 0, 0, true,100.0},
	{true, "Elegy", 60.0, 179.00, 16000, 5, 0, 6					, 2		, true, true, true, 1, 15, true,100.0},
	{false, "Raindance", 1.0, 1.00, 160000, 15, 0, 0				, 2		, true, true, true, 0, 0, false,100.0},
	{false, "RC Tiger", 1.0, 1.00, 500, 1, 0, 0						, 1		, true, true, true, 0, 0, false,100.0},
	{true, "Flash", 60.0, 166.00, 300000, 1, 0, 8					, 2		, true, true, true, 0, 0, true,100.0},
	{true, "Tahoma", 40.0, 161.00, 15000, 1, 0, 6				, 4		, true, true, true, 0, 0, true,100.0},
	{true, "Savanna", 50.0, 174.00, 56000, 1, 0, 6				, 4		, true, true, true, 0, 0, true,100.0},
	{true, "Bandito", 30.0, 147.00, 90000, 1, 0, 0				, 1		, true, true, true, 1, 30, true,150.0},
	{false, "FreightFlat", 1.0, 1.00, 5000, 50, 0, 0				, 0		, true, true, true, 0, 0, false,100.0},
	{false, "StreakCarriage", 1.0, 1.00, 5000, 50, 0, 0			, 0		, true, true, true, 0, 0, false,100.0}, // >>>> No.
	{true, "Kart", 10.0, 94.00, 5000, 1, 0, 0					, 1		, true, true, true, 1, 15, false,100.0}, // >>>> No.
	{true, "Mower", 15.0, 61.00, 50000, 1, 0, 0					, 1		, true, true, true, 0, 0, false,100.0},
	{true, "Duneride", 80.0, 111.00, 50000, 1, 0, 20			, 2		, true, true, true, 2, 50, false,100.0},
	{true, "Sweeper", 20.0, 61.00, 50000, 1, 0, 2					, 1		, true, true, true, 0, 0, false,100.0}, // >>>> No.
	{true, "Broadway", 45.0, 159.00, 9000, 2, 0, 4				, 2		, true, true, true, 0, 0, true,100.0},
	{true, "Tornado", 40.0, 159.00, 9000, 1, 0, 4				, 2		, true, true, true, 0, 0, true,100.0},
	{false, "AT-400", 1.0, 1.00, 1000000, 50, 0, 0				, 1		, true, true, true, 0, 0, false,100.0}, // >>>> No.
	{true, "DFT-30", 80.0, 131.00, 100000, 1, 0, 4				, 2		, true, true, true, 0, 0, false,100.0},
	{true, "Huntley", 80.0, 159.00, 95000, 1, 0, 8				, 4		, true, true, true, 0, 0, true,100.0},
	{true, "Stafford", 60.0, 154.00, 90000, 2, 0, 6				, 4		, true, true, true, 0, 10, true,100.0},
	{true, "BF-400", 35.0, 168.00, 5300, 1, 0, 0					, 2		, true, true, false, 0, 10, false,100.0},
	{true, "Newsvan", 60.0, 137.00, 5300, 3, 0, 10				, 4		, false, false, false, 0, 0, false,100.0},
	{true, "Tug", 15.0, 86.00, 5300, 1, 0, 0						, 1		, true, true, true, 0, 0, false,100.0}, // >>>> No.
	{false, "Trailer 3", 1.0, 1.00, 5300, 15, 0, 0				, 0		, true, true, true, 0, 0, false,100.0},
	{true, "Emperor", 60.0, 154.00, 15300, 1, 0, 6				, 4		, true, true, true, 0, 0, true,100.0},
	{true, "Wayfarer", 50.0, 158.00, 60000, 1, 0, 0				, 2		, true, true, false, 0, 10, false,100.0},
	{true, "Euros", 50.0, 166.00, 20000, 3, 0, 4					, 2		, true, true, true, 0, 0, true,100.0},
	{true, "Hotdog", 60.0, 109.00, 20000, 5, 0, 12				, 2		, true, true, true, 0, 0, false,100.0},
	{true, "Club", 65.0, 164.00, 69000, 5, 0, 6					, 2		, true, true, true, 0, 0, true,100.0},
	{false, "FreightCarriage", 1.0, 1.00, 10000, 100, 0, 0		, 0		, false, false, false, 0, 0, false,100.0}, // >>>> No.
	{false, "Trailer3", 1.0, 1.00, 10000, 100, 0, 0				, 0		, false, false, false, 0, 0, false,100.0}, // >>>> No.
	{false, "Andromada", 1.0, 1.00, 10000, 100, 0, 0				, 500	, true, true, true, 0, 0, false,100.0}, // >>>> No.
	{false, "Dodo", 1.0, 1.00, 60000, 2, 0, 0					, 2		, true, true, true, 0, 0, false,100.0}, // >>>> No.
	{false, "RCCam", 1.0, 1.00, 500, 1, 0, 0						, 2		, true, true, true, 0, 0, false,100.0}, // >>>> No.
	{false, "Launch", 1.0, 1.00, 300000, 10, 0, 0				, 1		, true, true, true, 0, 0, false,1.0}, // >>>> No.
	{true, "LSPD", 60.0, 177.00, 300000, 10, 0, 8				, 4		, true, true, true, 0, 0, true,100.0}, // >>>> No.
	{true, "SFPD", 60.0, 177.00, 300000, 10, 0, 8				, 4		, true, true, true, 0, 0, true,100.0}, // >>>> No.
	{true, "LVPD", 60.0, 177.00, 300000, 10, 0, 8				, 4		, true, true, true, 0, 0, true,100.0},
	{true, "PoliceRanger", 90.0, 159.00, 300000, 10, 0, 12		, 2		, true, true, true, 0, 0, true,100.0}, // // >>>> No. >>>> No.
	{true, "Picador", 40.0, 152.00, 10000, 1, 0, 6				, 2		, true, true, true, 0, 0, true,100.0},
	{true, "S.W.A.T.Van", 30.0, 111.00, 300000, 50, 0, 0			, 2		, true, true, true, 0, 0, true,100.0}, // >>>> No.
	{true, "Alpha", 60.0, 170.00, 35000, 8, 0, 4					, 2		, true, true, true, 0, 0, true,200.0},
	{true, "Phoenix", 60.0, 172.00, 30000, 10, 0, 4				, 2		, true, true, true, 0, 0, true,200.0},
	{true, "Glendale", 30.0, 148.00, 7008, 1, 0, 6				, 4		, true, true, true, 0, 0, true,100.0},
	{true, "Sadler Shit", 40.0, 152.00, 7000, 1, 0, 6				, 2		, true, true, true, 0, 0, true,100.0},
	{false, "LuggageTrailerA", 1.0, 1.00, 500, 1, 0, 0				, 0		, true, true, true, 0, 0, false,100.0},
	{false, "LuggageTrailerB", 1.0, 1.00, 500, 1, 0, 0				, 0		, true, true, true, 0, 0, false,100.0}, // >>>> No.
	{false, "StairTrailer", 1.0, 1.00, 500, 1, 0, 0					, 0		, true, true, true, 0, 0, false,100.0}, // >>>> No.
	{true, "Boxville", 90.0, 108.00, 70000, 6, 0, 15				, 4		, true, true, true, 0, 0, false,100.0}, // >>>> No.
	{false, "FarmPlow", 1.0, 1.00, 3000, 1, 0, 0					, 0		, true, true, true, 0, 0, false,100.0}, // >>>> No.
	{false, "UtilityTrailer", 1.0, 1.00, 1000, 1, 0, 0         		, 0		, true, true, true, 0, 0, false,100.0} // >>>> No.
};

#define MAX_BOOT_SLOTS	20
enum
{
	BOOT_TYPE_WEAPON
};
enum enum_VEHICLE_BOOT
{
	bool:vehicle_boot_VALID,
	vehicle_boot_OBJECT_ID,
	vehicle_boot_TYPE,
	vehicle_boot_INT,
	vehicle_boot_INT_EXTRA
};
new VEHICLE_BOOT[MAX_VEHICLES][MAX_BOOT_SLOTS][enum_VEHICLE_BOOT];

enum SELL_INFO_VEHICLES_Enum
{
	sel_info_vehicle_MODELID,
	Float:sell_info_SPAWN_X,
	Float:sell_info_SPAWN_Y,
	Float:sell_info_SPAWN_Z,
	Float:sell_info_SPAWN_ANGLE,
	sell_info_COLOR_1,
	sell_info_COLOR_2,
	sell_info_SHOP
};
new SELL_INFO_VEHICLES[][SELL_INFO_VEHICLES_Enum] =
{
	{400, -1971.730834, 305.717071, 35.281467, 112.761856, -1, -1, 0}, //conce0
	{489, -1972.303588, 299.899291, 35.315319, 113.739143, -1, -1, 0}, //conce0
	{500, -1989.106811, 267.932830, 35.276290, 267.933868, -1, -1, 0}, //conce0
	{516, -1988.849243, 262.505828, 35.014682, 273.633972, -1, -1, 0}, //conce0
	{517, -1989.152587, 257.527374, 35.020854, 278.511993, -1, -1, 0}, //0
	{518, -1990.650756, 252.367614, 34.853424, 260.343750, -1, -1, 0}, //0
	{526, -1991.783203, 247.102294, 34.938541, 263.152526, -1, -1, 0}, //0
	{529, -1992.195556, 241.864547, 34.804782, 265.900787, -1, -1, 0}, //0
	{533, -1970.909790, 271.824432, 34.874591, 92.208198, -1, -1, 0}, //0
	{534, -1971.686889, 266.768585, 34.897808, 90.052833, -1, -1, 0}, //0
	{535, -1972.078857, 261.530334, 34.940402, 91.687599, -1, -1, 0}, //0
	{536, -1971.535644, 255.783843, 34.909259, 90.030273, -1, -1, 0}, //0
	{540, -1985.110107, 303.989593, 35.031871, 247.498382, -1, -1, 0}, //0
	{543, -1959.895751, 272.834747, 35.330417, 315.005645, -1, -1, 0}, //0
	{546, -1947.004760, 265.553222, 35.208316, 44.999832, -1, -1, 0}, //0
	{547, -1957.724731, 261.617736, 35.244117, 134.999298, -1, -1, 0}, //0
	{549, -1950.561035, 258.919067, 35.165855, 23.361270, -1, -1, 0}, //0
	{551, -1961.752929, 284.531127, 35.270526, 0.696665, -1, -1, 0}, //0
	{554, -1946.718139, 257.937591, 41.083919, 45.030506, -1, -1, 0}, //0
	{555, -1955.544677, 257.741241, 40.755210, 315.004882, -1, -1, 0}, //0
	{558, -1945.867919, 273.318969, 40.666416, 135.659255, -1, -1, 0}, //0
	{559, -1946.407836, 264.562194, 40.705158, 70.021125, -1, -1, 0}, //0
	{560, -1953.854003, 295.461822, 40.762950, 141.442657, -1, -1, 0}, //0
	{561, -1954.960693, 302.385498, 40.873092, 45.000858, -1, -1, 0}, //0
	{562, -1955.735351, 274.163513, 40.699062, 224.775680, -1, -1, 0}, //0
	{565, 561.566101, -1290.956542, 16.871730, 13.598201, -1, -1, 1}, //1
	{566, 555.651794, -1290.101562, 17.030550, 12.250467, -1, -1, 1}, //1
	{567, 548.681701, -1288.398803, 17.121070, 2.627753, -1, -1, 1}, //1
	{575, 543.408569, -1290.018676, 16.844970, 12.805674, -1, -1, 1}, //1
	{576, 537.712585, -1289.785278, 16.853311, 8.072924, -1, -1, 1}, //1
	{579, 531.610229, -1289.627563, 17.179222, 0.727972, -1, -1, 1}, //1
	{580, 524.575805, -1290.402587, 17.038362, 347.873016, -1, -1, 1}, //1
	{585, 519.242980, -1287.057373, 16.828090, 306.424560, -1, -1, 1}, //1
	{587, 527.172241, -1282.828613, 16.988870, 225.000015, -1, -1, 1}, //1
	{589, 531.867553, -1279.575195, 16.918565, 225.000091, -1, -1, 1}, //1
	{600, 536.016235, -1276.898681, 16.963094, 225.002395, -1, -1, 1}, //1
	{602, 539.315979, -1273.561767, 17.073772, 224.999908, -1, -1, 1}, //1
	{603, 543.021911, -1270.594482, 17.126434, 224.998825, -1, -1, 1}, //1
	{402, 547.388854, -1268.065185, 17.089252, 225.000061, -1, -1, 1}, //1
	{405, 550.830261, -1264.989990, 17.167030, 225.000000, -1, -1, 1}, //1
	{604, 2123.362304, -1144.851196, 24.472566, 314.818267, -1, -1, 2}, //2
	{605, 2120.166748, -1141.430053, 24.722545, 314.695739, -1, -1, 2}, //2
	{542, 2120.096923, -1136.088378, 24.996570, 314.858062, -1, -1, 2}, //2
	{462, 2126.857177, -1147.089843, 24.115188, 314.773010, -1, -1, 2}, //2
	{543, 2132.541748, -1142.541259, 24.895196, 44.777957, -1, -1, 2}, //2
	{529, 2135.447509, -1140.396362, 24.948331, 45.030994, -1, -1, 2}, //2

	{401, 1731.2760, 1889.3112, 10.4737, 64.2000, -1, -1,3},//3
	{404, 1730.9078, 1893.8679, 10.4557, 64.2000, -1, -1,3},//3
	{405, 1731.1250, 1897.8456, 10.5776, 64.2000, -1, -1,3},//3
	{410, 1730.8790, 1901.8336, 10.5593, 64.2000, -1, -1,3},//3
	{412, 1730.6003, 1906.1891, 10.4649, 62.6400, -1, -1,3},//3
	{413, 1730.9932, 1911.4681, 10.8659, 62.6400, -1, -1,3},//3
	{418, 1730.8671, 1916.4330, 10.8659, 62.6400, -1, -1,3},//3
	{419, 1731.1063, 1922.2522, 10.8659, 62.6400, -1, -1,3},//3
	{421, 1731.0332, 1927.2554, 10.8659, 62.6400, -1, -1,3},//3
	{422, 1730.5853, 1931.5979, 10.8659, 62.6400, -1, -1,3},//3
	{426, 1731.3004, 1936.6873, 10.8659, 62.6400, -1, -1,3},//3
	{439, 1731.1484, 1941.1829, 10.8659, 62.6400, -1, -1,3},//3
	{445, 1731.0350, 1946.3596, 10.8659, 62.6400, -1, -1,3},//3
	{458, 1731.4557, 1950.8707, 10.8659, 62.6400, -1, -1,3},//3
	{459, 1731.9862, 1955.7605, 10.8659, 62.6400, -1, -1,3},//3
	{466, 1731.8481, 1961.7721, 10.8659, 62.6400, -1, -1,3},//3
	{467, 1731.8699, 1967.4963, 10.8659, 62.6400, -1, -1,3},//3
	{474, 1731.0065, 1973.0747, 10.8659, 62.6400, -1, -1,3},//3
	{475, 1730.5632, 1977.2893, 10.8659, 62.6400, -1, -1,3},//3
	{477, 1730.2535, 1982.1498, 10.8659, 62.6400, -1, -1,3},//3
	{478, 1730.8508, 1986.1486, 10.8659, 62.6400, -1, -1,3},//3
	{479, 1730.4799, 1991.1726, 10.8659, 62.6400, -1, -1,3},//3
	{483, 1730.8340, 1994.8955, 10.8659, 62.6400, -1, -1,3},//3
	{489, 1730.9491, 1999.2275, 10.8659, 62.6400, -1, -1,3},//3
	{491, 1730.9967, 2004.6899, 10.8659, 62.6400, -1, -1,3},//3
	{496, 1730.8256, 2009.2533, 10.8659, 62.6400, -1, -1,3},//3
	{531, 1730.5708, 2014.3196, 10.8659, 62.6400, -1, -1,3},//3


	{495, -1660.500610, 1214.428955, 7.081802, 245.781250, -1, -1, 4}, //
	{411, -1659.630004, 1216.934814, 13.398953, 332.907165, -1, -1, 4}, //
	{415, -1653.029663, 1210.681518, 13.444266, 253.155578, -1, -1, 4}, //
	{429, -1669.283081, 1206.197265, 13.351553, 294.647796, -1, -1, 4}, //
	{434, -1665.829223, 1222.459350, 13.684193, 224.999526, -1, -1, 4}, //
	{451, -1666.966186, 1205.829345, 20.861524, 324.716613, -1, -1, 4}, //
	{506, -1658.944458, 1206.433837, 20.860774, 17.348609, -1, -1, 4}, //
	{541, -1649.423461, 1206.491821, 20.775476, 133.478042, -1, -1, 4}, //
	{545, -1656.527587, 1216.405029, 21.003622, 44.999988, -1, -1, 4}, //
	{446, -2231.2676, 2451.4797, 0.0119, 228.6364, -1, -1, 5},
	{452, -2241.1306, 2440.2146, 0.0119, 226.4393, -1, -1, 5},
	{453, -2250.6514, 2428.3452, 0.0119, 226.4393, -1, -1, 5},
	{454, -2262.2539, 2419.0127, 0.0119, 226.4393, -1, -1, 5},
	{454, -2202.1697, 2421.1807, 0.0119, 45.7924, -1, -1,  5},
	{472, -2234.6467, 2394.7185, 0.2970, 42.8398, -1, -1,  5},
	{484, -2213.1201, 2411.4111, 0.0119, 46.0592, -1, -1,  5},
	{473, -2237.2305, 2390.8669, 0.2970, 42.8398, -1, -1,  5},
	{493, -2223.5603, 2400.2893, -0.0596, 46.0592, -1, -1, 5},
	{595, -2245.3577, 2433.8679, 0.5854, 226.4393, -1, -1, 5},
	//
	{480, 1793.9066, -1768.4683, 13.1211, 	0.0000, -1, -1, 6},
	{482, 1789.6460, -1768.1300, 13.4221, 	0.0000, -1, -1, 6},
	{470, 1784.9331, -1767.9015, 13.4221, 	0.0000, -1, -1, 6},
	{444, 1779.6066, -1767.8217, 13.4221, 	0.0000, -1, -1, 6},
	{556, 1774.5763, -1767.7250, 13.4221,   0.0000, -1, -1, 6},
	{409, 1770.0468, -1766.9967, 13.4221, 	0.0000, -1, -1, 6},
	{573, 1773.0548, -1750.9081, 13.8251, -180.6600, -1, -1, 6},
	{495, 1768.3264, -1750.0797, 13.8251, -178.6200, -1, -1, 6},
	{411, 1778.3606, -1750.7072, 13.8251, -179.8800, -1, -1, 6},
	{504, 1783.2231, -1750.5615, 13.1398, -179.2199, -1, -1, 6},
	{502, 1788.2909, -1750.5448, 13.3037, -182.1000, -1, -1, 6},
	{503, 1792.4851, -1750.5486, 13.3037, -182.1000, -1, -1, 6},
	{515, 1765.1333, -1766.5422, 14.4386,    0.0000, -1, -1, 6},
	{578, 1764.0702, -1752.8569, 13.9767, -180.3600, -1, -1, 6},
	{461, 1792.8105, -1786.6429, 13.0543, -358.7401, -1, -1, 6},
	{462, 1790.2697, -1786.7231, 13.0543, -358.7401, -1, -1, 6},
	{463, 1788.1666, -1786.5494, 13.0543, -358.7401, -1, -1, 6},
	{468, 1785.6843, -1786.6768, 13.0543, -358.7401, -1, -1, 6},
	{471, 1783.1288, -1786.5280, 13.0543, -358.7401, -1, -1, 6},
	{522, 1780.2401, -1786.2385, 13.0543, -358.7401, -1, -1, 6},
	{521, 1777.5660, -1786.0862, 13.0543, -358.7401, -1, -1, 6},
	{581, 1774.8108, -1786.0327, 13.0543, -358.7401, -1, -1, 6},
	{586, 1771.7045, -1786.0394, 13.0543, -358.7401, -1, -1, 6},
	{571, 1768.1021, -1785.9183, 13.0543, -358.7401, -1, -1, 6},
	{457, 1790.8088, -1776.1788, 13.0478, -183.0000, -1, -1, 6},
	{568, 1786.8014, -1776.1086, 13.2478, -183.0000, -1, -1, 6}
};
new Float:SELL_VEHICLES_SHOPS_SPAWN[][] =
{
	{-1920.1965, 302.7697, 40.5643, -90.0000},
	{563.774475, -1273.510986, 16.867170, 12.636687},
	{2133.863037, -1129.836791, 25.270145, 71.406616},
	{1677.705078, 1790.098144, 10.445111, 89.955596},
	{-1645.245361, 1217.047973, 6.732273, 224.517120},
	{-2258.0054, 2477.0315, 0.2512, 313.4971}, //barcos
	{1722.7098,-1755.5043,13.5609,274.7646}//Vehiculos VIP
};

enum SELL_VEHICLES_Enum
{
	bool:sell_vehicle_VALID,
	sell_vehicle_SHOP,
	sell_vehicle_PRICE,
	sell_vehicle_LEVEL,
	sell_vehicle_EXTRA,
	sell_vehicle_VIP_LEVEL,
	Text3D:sell_vehicle_LABEL_ID
};
new SELL_VEHICLES[MAX_VEHICLES][SELL_VEHICLES_Enum];

/* RESULT_YOUTUBE */
#define MAX_RESULTS	10
enum yt_result
{
	videoID[11 + 1],
	yt_title[100 + 1]
};

new RESULT_YOUTUBE[MAX_RESULTS][yt_result],
	PLAYER_DIALOG_MP3_RESULT[MAX_PLAYERS][MAX_RESULTS][yt_result];

// AGRICULTOR
enum
{
	PLANT_TYPE_MEDICINE, 	// VIDA
	PLANT_TYPE_CANNABIS,	// YOKSETIOXD
	PLANT_TYPE_CRACK		//CHALECO
}

enum seed_info_enum
{
	seed_info_TYPE,
	seed_info_PLANT_TYPE,
	seed_info_EXP,
	seed_info_NAME[24],
	seed_info_PRICE
};
new seed_info[][seed_info_enum] =
{
	{TYPE_LEGAL, PLANT_TYPE_MEDICINE, 0, "Poliskap", 50},
	{TYPE_ILLEGAL, PLANT_TYPE_CANNABIS, 100, "Marihuana", 150},
	{TYPE_ILLEGAL, PLANT_TYPE_CRACK, 200, "Coca", 300}
};

enum plant_info_enum
{
	plant_info_SEEDS,
	plant_info_NAME[24]
};
new plant_info[][plant_info_enum] =
{
	{2, "Medicamento"},
	{4, "Marihuana"},
	{10, "Crack"}
};


#define MAX_PLANTS	500
enum PLANTS_ENUM
{
	bool:plant_VALID,
	bool:plant_GROWING,
	bool:plant_INVISIBLE,
	Float:plant_GROWING_PROGRESS,
	plant_TYPE,
	plant_PLANTED_BY_ACCOUNT_ID,
	plant_PLANTED_BY_NAME[24],
	plant_OBJECT_ID,
	Text3D:plant_LABEL_ID,
	plant_EXPIRE_TIME,
	plant_TIMER
};
new PLANTS[MAX_PLANTS][PLANTS_ENUM];

enum
{
	OBJECT_TYPE_NONE,
	OBJECT_TYPE_PLANT
};

/* SYSTEM - GPS */
enum 
{
	CHECKPOINT_TYPE_NONE,
	CHECKPOINT_TYPE_GPS,
	CHECKPOINT_TYPE_UNLOAD_TRUCK,
	CHECKPOINT_TYPE_FINISH_TRUCK,
	CHECKPOINT_TYPE_HARVEST,
	CHECKPOINT_TYPE_TRASH,
	CHECKPOINT_TYPE_FINISH_TRASH,
	CHECKPOINT_TYPE_LUMBERJACK,
	CHECKPOINT_TYPE_PIZZA_DEL,
	CHECKPOINT_TYPE_PIZZA_FINISH,
	/**/
	CHECKPOINT_TYPE_FINISH_CARRIER,
	CHECKPOINT_TYPE_UNLOAD_CARRIER
};

#define MAX_PLAYER_GPS_SAVES	10
#define MAX_LISTITEMS			35
enum Player_GPS_Enum
{
	player_gps_VALID,
	player_gps_ID,
	player_gps_NAME[24],
	Float:player_gps_X,
	Float:player_gps_Y,
	Float:player_gps_Z,
	player_gps_WORLD,
	player_gps_INTERIOR
};
new PLAYER_GPS[MAX_PLAYERS][MAX_PLAYER_GPS_SAVES][Player_GPS_Enum];

/* SYSTEM - PLAYER OBJECTS */
enum Player_Objects_Enum
{
	po_GPS,
	po_MP3,
	po_PHONE_RESOLVER
};
new PLAYER_OBJECT[MAX_PLAYERS][Player_Objects_Enum];



/* SYSTEM - PHONE */
enum
{
	CALL_GAME_STATE_NONE,
	CALL_STATE_WAITING_RESPONSE,
	CALL_STATE_INCOMING_CALL,
	CALL_STATE_ESTABLISHED
};

enum
{
	PHONE_STATE_ON,
	PHONE_STATE_OFF
};
enum Phone_Info_Enum
{
	player_phone_VALID,
	player_phone_NUMBER,
	player_phone_STATE,
	player_phone_VISIBLE_NUMBER // para elegir si quieres aparecer en la guia o no
};
new PLAYER_PHONE[MAX_PLAYERS][Phone_Info_Enum]; //PPI (PlayerPhoneInfo)

#define MAX_PHONE_CONTACTS	20
enum Phone_Book_Enum
{
	phone_book_contact_VALID,
	
	phone_book_contact_ID,
	phone_book_contact_NAME[24],
	phone_book_contact_PHONE_NUMBER
};
new PLAYER_PHONE_BOOK[MAX_PLAYERS][MAX_PHONE_CONTACTS][Phone_Book_Enum]; //PB = PhoneBook

enum
{
	SEX_MALE,
	SEX_FEMALE
};

enum e_ZONEINFO
{
	z_Name[45],
    Float:z_MinX,
    Float:z_MinY,
    Float:z_MinZ,
    Float:z_MaxX,
    Float:z_MaxY,
    Float:z_MaxZ
};
new g_Zones[][e_ZONEINFO] =
{
	// Indoor zones
	{"Caligula's Palace",            2087.30,  1543.20,   900.00,  2437.30,  1703.20,   1200.90},
	{"The Four Dragons Casino",      1817.30,   863.20,   900.00,  2027.30,  1083.20,   1200.90},
	// Outdoor Zones list by mabako, from gta client files
	{"The Big Ear",                -410.00,  1403.30,    -3.00,  -137.90,  1681.20,   200.00},
	{"Aldea Malvada",               -1372.10,  2498.50,     0.00, -1277.50,  2615.30,   200.00},
	{"Angel Pine",                  -2324.90, -2584.20,    -6.10, -1964.20, -2212.10,   200.00},
	{"Arco del Oeste",               -901.10,  2221.80,     0.00,  -592.00,  2571.90,   200.00},
	{"Avispa Country Club",         -2646.40,  -355.40,     0.00, -2270.00,  -222.50,   200.00},
	{"Avispa Country Club",         -2831.80,  -430.20,    -6.10, -2646.40,  -222.50,   200.00},
	{"Avispa Country Club",         -2361.50,  -417.10,     0.00, -2270.00,  -355.40,   200.00},
	{"Avispa Country Club",         -2667.80,  -302.10,   -28.80, -2646.40,  -262.30,    71.10},
	{"Avispa Country Club",         -2470.00,  -355.40,     0.00, -2270.00,  -318.40,    46.10},
	{"Avispa Country Club",         -2550.00,  -355.40,     0.00, -2470.00,  -318.40,    39.70},
	{"Back o Beyond",               -1166.90, -2641.10,     0.00,  -321.70, -1856.00,   200.00},
	{"Battery Point",               -2741.00,  1268.40,    -4.50, -2533.00,  1490.40,   200.00},
	{"Bayside",                     -2741.00,  2175.10,     0.00, -2353.10,  2722.70,   200.00},
	{"Bayside Marina",              -2353.10,  2275.70,     0.00, -2153.10,  2475.70,   200.00},
	{"Beacon Hill",                  -399.60, -1075.50,    -1.40,  -319.00,  -977.50,   198.50},
	{"Blackfield",                    964.30,  1203.20,   -89.00,  1197.30,  1403.20,   110.90},
	{"Blackfield",                    964.30,  1403.20,   -89.00,  1197.30,  1726.20,   110.90},
	{"Blackfield Chapel",            1375.60,   596.30,   -89.00,  1558.00,   823.20,   110.90},
	{"Blackfield Chapel",            1325.60,   596.30,   -89.00,  1375.60,   795.00,   110.90},
	{"Blackfield Intersection",      1197.30,  1044.60,   -89.00,  1277.00,  1163.30,   110.90},
	{"Blackfield Intersection",      1166.50,   795.00,   -89.00,  1375.60,  1044.60,   110.90},
	{"Blackfield Intersection",      1277.00,  1044.60,   -89.00,  1315.30,  1087.60,   110.90},
	{"Blackfield Intersection",      1375.60,   823.20,   -89.00,  1457.30,   919.40,   110.90},
	{"Blueberry",                     104.50,  -220.10,     2.30,   349.60,   152.20,   200.00},
	{"Blueberry",                      19.60,  -404.10,     3.80,   349.60,  -220.10,   200.00},
	{"Blueberry Acres",              -319.60,  -220.10,     0.00,   104.50,   293.30,   200.00},
	{"Caligula's Palace",            2087.30,  1543.20,   -89.00,  2437.30,  1703.20,   110.90},
	{"Caligula's Palace",            2137.40,  1703.20,   -89.00,  2437.30,  1783.20,   110.90},
	{"Calton Heights",              -2274.10,   744.10,    -6.10, -1982.30,  1358.90,   200.00},
	{"Chinatown",                   -2274.10,   578.30,    -7.60, -2078.60,   744.10,   200.00},
	{"City Hall",                   -2867.80,   277.40,    -9.10, -2593.40,   458.40,   200.00},
	{"Come-A-Lot",                   2087.30,   943.20,   -89.00,  2623.10,  1203.20,   110.90},
	{"Commerce",                     1323.90, -1842.20,   -89.00,  1701.90, -1722.20,   110.90},
	{"Commerce",                     1323.90, -1722.20,   -89.00,  1440.90, -1577.50,   110.90},
	{"Commerce",                     1370.80, -1577.50,   -89.00,  1463.90, -1384.90,   110.90},
	{"Commerce",                     1463.90, -1577.50,   -89.00,  1667.90, -1430.80,   110.90},
	{"Commerce",                     1583.50, -1722.20,   -89.00,  1758.90, -1577.50,   110.90},
	{"Commerce",                     1667.90, -1577.50,   -89.00,  1812.60, -1430.80,   110.90},
	{"Conference Center",            1046.10, -1804.20,   -89.00,  1323.90, -1722.20,   110.90},
	{"Conference Center",            1073.20, -1842.20,   -89.00,  1323.90, -1804.20,   110.90},
	{"Cranberry Station",           -2007.80,    56.30,     0.00, -1922.00,   224.70,   100.00},
	{"Creek",                        2749.90,  1937.20,   -89.00,  2921.60,  2669.70,   110.90},
	{"Dillimore",                     580.70,  -674.80,    -9.50,   861.00,  -404.70,   200.00},
	{"Doherty",                     -2270.00,  -324.10,    -0.00, -1794.90,  -222.50,   200.00},
	{"Doherty",                     -2173.00,  -222.50,    -0.00, -1794.90,   265.20,   200.00},
	{"Downtown",                    -1982.30,   744.10,    -6.10, -1871.70,  1274.20,   200.00},
	{"Downtown",                    -1871.70,  1176.40,    -4.50, -1620.30,  1274.20,   200.00},
	{"Downtown",                    -1700.00,   744.20,    -6.10, -1580.00,  1176.50,   200.00},
	{"Downtown",                    -1580.00,   744.20,    -6.10, -1499.80,  1025.90,   200.00},
	{"Downtown",                    -2078.60,   578.30,    -7.60, -1499.80,   744.20,   200.00},
	{"Downtown",                    -1993.20,   265.20,    -9.10, -1794.90,   578.30,   200.00},
	{"Downtown Los Santos",          1463.90, -1430.80,   -89.00,  1724.70, -1290.80,   110.90},
	{"Downtown Los Santos",          1724.70, -1430.80,   -89.00,  1812.60, -1250.90,   110.90},
	{"Downtown Los Santos",          1463.90, -1290.80,   -89.00,  1724.70, -1150.80,   110.90},
	{"Downtown Los Santos",          1370.80, -1384.90,   -89.00,  1463.90, -1170.80,   110.90},
	{"Downtown Los Santos",          1724.70, -1250.90,   -89.00,  1812.60, -1150.80,   110.90},
	{"Downtown Los Santos",          1370.80, -1170.80,   -89.00,  1463.90, -1130.80,   110.90},
	{"Downtown Los Santos",          1378.30, -1130.80,   -89.00,  1463.90, -1026.30,   110.90},
	{"Downtown Los Santos",          1391.00, -1026.30,   -89.00,  1463.90,  -926.90,   110.90},
	{"Downtown Los Santos",          1507.50, -1385.20,   110.90,  1582.50, -1325.30,   335.90},
	{"East Beach",                   2632.80, -1852.80,   -89.00,  2959.30, -1668.10,   110.90},
	{"East Beach",                   2632.80, -1668.10,   -89.00,  2747.70, -1393.40,   110.90},
	{"East Beach",                   2747.70, -1668.10,   -89.00,  2959.30, -1498.60,   110.90},
	{"East Beach",                   2747.70, -1498.60,   -89.00,  2959.30, -1120.00,   110.90},
	{"East Los Santos",              2421.00, -1628.50,   -89.00,  2632.80, -1454.30,   110.90},
	{"East Los Santos",              2222.50, -1628.50,   -89.00,  2421.00, -1494.00,   110.90},
	{"East Los Santos",              2266.20, -1494.00,   -89.00,  2381.60, -1372.00,   110.90},
	{"East Los Santos",              2381.60, -1494.00,   -89.00,  2421.00, -1454.30,   110.90},
	{"East Los Santos",              2281.40, -1372.00,   -89.00,  2381.60, -1135.00,   110.90},
	{"East Los Santos",              2381.60, -1454.30,   -89.00,  2462.10, -1135.00,   110.90},
	{"East Los Santos",              2462.10, -1454.30,   -89.00,  2581.70, -1135.00,   110.90},
	{"Easter Basin",                -1794.90,   249.90,    -9.10, -1242.90,   578.30,   200.00},
	{"Easter Basin",                -1794.90,   -50.00,    -0.00, -1499.80,   249.90,   200.00},
	{"Easter Bay Airport",          -1499.80,   -50.00,    -0.00, -1242.90,   249.90,   200.00},
	{"Easter Bay Airport",          -1794.90,  -730.10,    -3.00, -1213.90,   -50.00,   200.00},
	{"Easter Bay Airport",          -1213.90,  -730.10,     0.00, -1132.80,   -50.00,   200.00},
	{"Easter Bay Airport",          -1242.90,   -50.00,     0.00, -1213.90,   578.30,   200.00},
	{"Easter Bay Airport",          -1213.90,   -50.00,    -4.50,  -947.90,   578.30,   200.00},
	{"Easter Bay Airport",          -1315.40,  -405.30,    15.40, -1264.40,  -209.50,    25.40},
	{"Easter Bay Airport",          -1354.30,  -287.30,    15.40, -1315.40,  -209.50,    25.40},
	{"Easter Bay Airport",          -1490.30,  -209.50,    15.40, -1264.40,  -148.30,    25.40},
	{"Easter Bay Chemicals",        -1132.80,  -768.00,     0.00,  -956.40,  -578.10,   200.00},
	{"Easter Bay Chemicals",        -1132.80,  -787.30,     0.00,  -956.40,  -768.00,   200.00},
	{"El Castillo del Diablo",       -464.50,  2217.60,     0.00,  -208.50,  2580.30,   200.00},
	{"El Castillo del Diablo",       -208.50,  2123.00,    -7.60,   114.00,  2337.10,   200.00},
	{"El Castillo del Diablo",       -208.50,  2337.10,     0.00,     8.40,  2487.10,   200.00},
	{"El Corona",                    1812.60, -2179.20,   -89.00,  1970.60, -1852.80,   110.90},
	{"El Corona",                    1692.60, -2179.20,   -89.00,  1812.60, -1842.20,   110.90},
	{"El Quebrados",                -1645.20,  2498.50,     0.00, -1372.10,  2777.80,   200.00},
	{"Esplanade East",              -1620.30,  1176.50,    -4.50, -1580.00,  1274.20,   200.00},
	{"Esplanade East",              -1580.00,  1025.90,    -6.10, -1499.80,  1274.20,   200.00},
	{"Esplanade East",              -1499.80,   578.30,   -79.60, -1339.80,  1274.20,    20.30},
	{"Esplanade North",             -2533.00,  1358.90,    -4.50, -1996.60,  1501.20,   200.00},
	{"Esplanade North",             -1996.60,  1358.90,    -4.50, -1524.20,  1592.50,   200.00},
	{"Esplanade North",             -1982.30,  1274.20,    -4.50, -1524.20,  1358.90,   200.00},
	{"Fallen Tree",                  -792.20,  -698.50,    -5.30,  -452.40,  -380.00,   200.00},
	{"Fallow Bridge",                 434.30,   366.50,     0.00,   603.00,   555.60,   200.00},
	{"Fern Ridge",                    508.10,  -139.20,     0.00,  1306.60,   119.50,   200.00},
	{"Financial",                   -1871.70,   744.10,    -6.10, -1701.30,  1176.40,   300.00},
	{"Fisher's Lagoon",              1916.90,  -233.30,  -100.00,  2131.70,    13.80,   200.00},
	{"Flint Intersection",           -187.70, -1596.70,   -89.00,    17.00, -1276.60,   110.90},
	{"Flint Range",                  -594.10, -1648.50,     0.00,  -187.70, -1276.60,   200.00},
	{"Fort Carson",                  -376.20,   826.30,    -3.00,   123.70,  1220.40,   200.00},
	{"Foster Valley",               -2270.00,  -430.20,    -0.00, -2178.60,  -324.10,   200.00},
	{"Foster Valley",               -2178.60,  -599.80,    -0.00, -1794.90,  -324.10,   200.00},
	{"Foster Valley",               -2178.60, -1115.50,     0.00, -1794.90,  -599.80,   200.00},
	{"Foster Valley",               -2178.60, -1250.90,     0.00, -1794.90, -1115.50,   200.00},
	{"Frederick Bridge",             2759.20,   296.50,     0.00,  2774.20,   594.70,   200.00},
	{"Gant Bridge",                 -2741.40,  1659.60,    -6.10, -2616.40,  2175.10,   200.00},
	{"Gant Bridge",                 -2741.00,  1490.40,    -6.10, -2616.40,  1659.60,   200.00},
	{"Ganton",                       2222.50, -1852.80,   -89.00,  2632.80, -1722.30,   110.90},
	{"Ganton",                       2222.50, -1722.30,   -89.00,  2632.80, -1628.50,   110.90},
	{"Garcia",                      -2411.20,  -222.50,    -0.00, -2173.00,   265.20,   200.00},
	{"Garcia",                      -2395.10,  -222.50,    -5.30, -2354.00,  -204.70,   200.00},
	{"Garver Bridge",               -1339.80,   828.10,   -89.00, -1213.90,  1057.00,   110.90},
	{"Garver Bridge",               -1213.90,   950.00,   -89.00, -1087.90,  1178.90,   110.90},
	{"Garver Bridge",               -1499.80,   696.40,  -179.60, -1339.80,   925.30,    20.30},
	{"Glen Park",                    1812.60, -1449.60,   -89.00,  1996.90, -1350.70,   110.90},
	{"Glen Park",                    1812.60, -1100.80,   -89.00,  1994.30,  -973.30,   110.90},
	{"Glen Park",                    1812.60, -1350.70,   -89.00,  2056.80, -1100.80,   110.90},
	{"Green Palms",                   176.50,  1305.40,    -3.00,   338.60,  1520.70,   200.00},
	{"Greenglass College",            964.30,  1044.60,   -89.00,  1197.30,  1203.20,   110.90},
	{"Greenglass College",            964.30,   930.80,   -89.00,  1166.50,  1044.60,   110.90},
	{"Hampton Barns",                 603.00,   264.30,     0.00,   761.90,   366.50,   200.00},
	{"Hankypanky Point",             2576.90,    62.10,     0.00,  2759.20,   385.50,   200.00},
	{"Harry Gold Parkway",           1777.30,   863.20,   -89.00,  1817.30,  2342.80,   110.90},
	{"Hashbury",                    -2593.40,  -222.50,    -0.00, -2411.20,    54.70,   200.00},
	{"Hilltop Farm",                  967.30,  -450.30,    -3.00,  1176.70,  -217.90,   200.00},
	{"Hunter Quarry",                 337.20,   710.80,  -115.20,   860.50,  1031.70,   203.70},
	{"Idlewood",                     1812.60, -1852.80,   -89.00,  1971.60, -1742.30,   110.90},
	{"Idlewood",                     1812.60, -1742.30,   -89.00,  1951.60, -1602.30,   110.90},
	{"Idlewood",                     1951.60, -1742.30,   -89.00,  2124.60, -1602.30,   110.90},
	{"Idlewood",                     1812.60, -1602.30,   -89.00,  2124.60, -1449.60,   110.90},
	{"Idlewood",                     2124.60, -1742.30,   -89.00,  2222.50, -1494.00,   110.90},
	{"Idlewood",                     1971.60, -1852.80,   -89.00,  2222.50, -1742.30,   110.90},
	{"Jefferson",                    1996.90, -1449.60,   -89.00,  2056.80, -1350.70,   110.90},
	{"Jefferson",                    2124.60, -1494.00,   -89.00,  2266.20, -1449.60,   110.90},
	{"Jefferson",                    2056.80, -1372.00,   -89.00,  2281.40, -1210.70,   110.90},
	{"Jefferson",                    2056.80, -1210.70,   -89.00,  2185.30, -1126.30,   110.90},
	{"Jefferson",                    2185.30, -1210.70,   -89.00,  2281.40, -1154.50,   110.90},
	{"Jefferson",                    2056.80, -1449.60,   -89.00,  2266.20, -1372.00,   110.90},
	{"Julius Thruway East",          2623.10,   943.20,   -89.00,  2749.90,  1055.90,   110.90},
	{"Julius Thruway East",          2685.10,  1055.90,   -89.00,  2749.90,  2626.50,   110.90},
	{"Julius Thruway East",          2536.40,  2442.50,   -89.00,  2685.10,  2542.50,   110.90},
	{"Julius Thruway East",          2625.10,  2202.70,   -89.00,  2685.10,  2442.50,   110.90},
	{"Julius Thruway North",         2498.20,  2542.50,   -89.00,  2685.10,  2626.50,   110.90},
	{"Julius Thruway North",         2237.40,  2542.50,   -89.00,  2498.20,  2663.10,   110.90},
	{"Julius Thruway North",         2121.40,  2508.20,   -89.00,  2237.40,  2663.10,   110.90},
	{"Julius Thruway North",         1938.80,  2508.20,   -89.00,  2121.40,  2624.20,   110.90},
	{"Julius Thruway North",         1534.50,  2433.20,   -89.00,  1848.40,  2583.20,   110.90},
	{"Julius Thruway North",         1848.40,  2478.40,   -89.00,  1938.80,  2553.40,   110.90},
	{"Julius Thruway North",         1704.50,  2342.80,   -89.00,  1848.40,  2433.20,   110.90},
	{"Julius Thruway North",         1377.30,  2433.20,   -89.00,  1534.50,  2507.20,   110.90},
	{"Julius Thruway South",         1457.30,   823.20,   -89.00,  2377.30,   863.20,   110.90},
	{"Julius Thruway South",         2377.30,   788.80,   -89.00,  2537.30,   897.90,   110.90},
	{"Julius Thruway West",          1197.30,  1163.30,   -89.00,  1236.60,  2243.20,   110.90},
	{"Julius Thruway West",          1236.60,  2142.80,   -89.00,  1297.40,  2243.20,   110.90},
	{"Juniper Hill",                -2533.00,   578.30,    -7.60, -2274.10,   968.30,   200.00},
	{"Juniper Hollow",              -2533.00,   968.30,    -6.10, -2274.10,  1358.90,   200.00},
	{"K.A.C.C. Military Fuels",      2498.20,  2626.50,   -89.00,  2749.90,  2861.50,   110.90},
	{"Kincaid Bridge",              -1339.80,   599.20,   -89.00, -1213.90,   828.10,   110.90},
	{"Kincaid Bridge",              -1213.90,   721.10,   -89.00, -1087.90,   950.00,   110.90},
	{"Kincaid Bridge",              -1087.90,   855.30,   -89.00,  -961.90,   986.20,   110.90},
	{"King's",                      -2329.30,   458.40,    -7.60, -1993.20,   578.30,   200.00},
	{"King's",                      -2411.20,   265.20,    -9.10, -1993.20,   373.50,   200.00},
	{"King's",                      -2253.50,   373.50,    -9.10, -1993.20,   458.40,   200.00},
	{"LVA Freight Depot",            1457.30,   863.20,   -89.00,  1777.40,  1143.20,   110.90},
	{"LVA Freight Depot",            1375.60,   919.40,   -89.00,  1457.30,  1203.20,   110.90},
	{"LVA Freight Depot",            1277.00,  1087.60,   -89.00,  1375.60,  1203.20,   110.90},
	{"LVA Freight Depot",            1315.30,  1044.60,   -89.00,  1375.60,  1087.60,   110.90},
	{"LVA Freight Depot",            1236.60,  1163.40,   -89.00,  1277.00,  1203.20,   110.90},
	{"Las Barrancas",                -926.10,  1398.70,    -3.00,  -719.20,  1634.60,   200.00},
	{"Las Brujas",                   -365.10,  2123.00,    -3.00,  -208.50,  2217.60,   200.00},
	{"Las Colinas",                  1994.30, -1100.80,   -89.00,  2056.80,  -920.80,   110.90},
	{"Las Colinas",                  2056.80, -1126.30,   -89.00,  2126.80,  -920.80,   110.90},
	{"Las Colinas",                  2185.30, -1154.50,   -89.00,  2281.40,  -934.40,   110.90},
	{"Las Colinas",                  2126.80, -1126.30,   -89.00,  2185.30,  -934.40,   110.90},
	{"Las Colinas",                  2747.70, -1120.00,   -89.00,  2959.30,  -945.00,   110.90},
	{"Las Colinas",                  2632.70, -1135.00,   -89.00,  2747.70,  -945.00,   110.90},
	{"Las Colinas",                  2281.40, -1135.00,   -89.00,  2632.70,  -945.00,   110.90},
	{"Las Payasadas",                -354.30,  2580.30,     2.00,  -133.60,  2816.80,   200.00},
	{"Las Venturas Airport",         1236.60,  1203.20,   -89.00,  1457.30,  1883.10,   110.90},
	{"Las Venturas Airport",         1457.30,  1203.20,   -89.00,  1777.30,  1883.10,   110.90},
	{"Las Venturas Airport",         1457.30,  1143.20,   -89.00,  1777.40,  1203.20,   110.90},
	{"Las Venturas Airport",         1515.80,  1586.40,   -12.50,  1729.90,  1714.50,    87.50},
	{"Last Dime Motel",              1823.00,   596.30,   -89.00,  1997.20,   823.20,   110.90},
	{"Leafy Hollow",                -1166.90, -1856.00,     0.00,  -815.60, -1602.00,   200.00},
	{"Lil' Probe Inn",                -90.20,  1286.80,    -3.00,   153.80,  1554.10,   200.00},
	{"Linden Side",                  2749.90,   943.20,   -89.00,  2923.30,  1198.90,   110.90},
	{"Linden Station",               2749.90,  1198.90,   -89.00,  2923.30,  1548.90,   110.90},
	{"Linden Station",               2811.20,  1229.50,   -39.50,  2861.20,  1407.50,    60.40},
	{"Little Mexico",                1701.90, -1842.20,   -89.00,  1812.60, -1722.20,   110.90},
	{"Little Mexico",                1758.90, -1722.20,   -89.00,  1812.60, -1577.50,   110.90},
	{"Los Flores",                   2581.70, -1454.30,   -89.00,  2632.80, -1393.40,   110.90},
	{"Los Flores",                   2581.70, -1393.40,   -89.00,  2747.70, -1135.00,   110.90},
	{"Los Santos International",     1249.60, -2394.30,   -89.00,  1852.00, -2179.20,   110.90},
	{"Los Santos International",     1852.00, -2394.30,   -89.00,  2089.00, -2179.20,   110.90},
	{"Los Santos International",     1382.70, -2730.80,   -89.00,  2201.80, -2394.30,   110.90},
	{"Los Santos International",     1974.60, -2394.30,   -39.00,  2089.00, -2256.50,    60.90},
	{"Los Santos International",     1400.90, -2669.20,   -39.00,  2189.80, -2597.20,    60.90},
	{"Los Santos International",     2051.60, -2597.20,   -39.00,  2152.40, -2394.30,    60.90},
	{"Marina",                        647.70, -1804.20,   -89.00,   851.40, -1577.50,   110.90},
	{"Marina",                        647.70, -1577.50,   -89.00,   807.90, -1416.20,   110.90},
	{"Marina",                        807.90, -1577.50,   -89.00,   926.90, -1416.20,   110.90},
	{"Market",                        787.40, -1416.20,   -89.00,  1072.60, -1310.20,   110.90},
	{"Market",                        952.60, -1310.20,   -89.00,  1072.60, -1130.80,   110.90},
	{"Market",                       1072.60, -1416.20,   -89.00,  1370.80, -1130.80,   110.90},
	{"Market",                        926.90, -1577.50,   -89.00,  1370.80, -1416.20,   110.90},
	{"Market Station",                787.40, -1410.90,   -34.10,   866.00, -1310.20,    65.80},
	{"Martin Bridge",                -222.10,   293.30,     0.00,  -122.10,   476.40,   200.00},
	{"Missionary Hill",             -2994.40,  -811.20,     0.00, -2178.60,  -430.20,   200.00},
	{"Montgomery",                   1119.50,   119.50,    -3.00,  1451.40,   493.30,   200.00},
	{"Montgomery",                   1451.40,   347.40,    -6.10,  1582.40,   420.80,   200.00},
	{"Montgomery Intersection",      1546.60,   208.10,     0.00,  1745.80,   347.40,   200.00},
	{"Montgomery Intersection",      1582.40,   347.40,     0.00,  1664.60,   401.70,   200.00},
	{"Mulholland",                   1414.00,  -768.00,   -89.00,  1667.60,  -452.40,   110.90},
	{"Mulholland",                   1281.10,  -452.40,   -89.00,  1641.10,  -290.90,   110.90},
	{"Mulholland",                   1269.10,  -768.00,   -89.00,  1414.00,  -452.40,   110.90},
	{"Mulholland",                   1357.00,  -926.90,   -89.00,  1463.90,  -768.00,   110.90},
	{"Mulholland",                   1318.10,  -910.10,   -89.00,  1357.00,  -768.00,   110.90},
	{"Mulholland",                   1169.10,  -910.10,   -89.00,  1318.10,  -768.00,   110.90},
	{"Mulholland",                    768.60,  -954.60,   -89.00,   952.60,  -860.60,   110.90},
	{"Mulholland",                    687.80,  -860.60,   -89.00,   911.80,  -768.00,   110.90},
	{"Mulholland",                    737.50,  -768.00,   -89.00,  1142.20,  -674.80,   110.90},
	{"Mulholland",                   1096.40,  -910.10,   -89.00,  1169.10,  -768.00,   110.90},
	{"Mulholland",                    952.60,  -937.10,   -89.00,  1096.40,  -860.60,   110.90},
	{"Mulholland",                    911.80,  -860.60,   -89.00,  1096.40,  -768.00,   110.90},
	{"Mulholland",                    861.00,  -674.80,   -89.00,  1156.50,  -600.80,   110.90},
	{"Mulholland Intersection",      1463.90, -1150.80,   -89.00,  1812.60,  -768.00,   110.90},
	{"North Rock",                   2285.30,  -768.00,     0.00,  2770.50,  -269.70,   200.00},
	{"Ocean Docks",                  2373.70, -2697.00,   -89.00,  2809.20, -2330.40,   110.90},
	{"Ocean Docks",                  2201.80, -2418.30,   -89.00,  2324.00, -2095.00,   110.90},
	{"Ocean Docks",                  2324.00, -2302.30,   -89.00,  2703.50, -2145.10,   110.90},
	{"Ocean Docks",                  2089.00, -2394.30,   -89.00,  2201.80, -2235.80,   110.90},
	{"Ocean Docks",                  2201.80, -2730.80,   -89.00,  2324.00, -2418.30,   110.90},
	{"Ocean Docks",                  2703.50, -2302.30,   -89.00,  2959.30, -2126.90,   110.90},
	{"Ocean Docks",                  2324.00, -2145.10,   -89.00,  2703.50, -2059.20,   110.90},
	{"Ocean Flats",                 -2994.40,   277.40,    -9.10, -2867.80,   458.40,   200.00},
	{"Ocean Flats",                 -2994.40,  -222.50,    -0.00, -2593.40,   277.40,   200.00},
	{"Ocean Flats",                 -2994.40,  -430.20,    -0.00, -2831.80,  -222.50,   200.00},
	{"Octane Springs",                338.60,  1228.50,     0.00,   664.30,  1655.00,   200.00},
	{"Old Venturas Strip",           2162.30,  2012.10,   -89.00,  2685.10,  2202.70,   110.90},
	{"Palisades",                   -2994.40,   458.40,    -6.10, -2741.00,  1339.60,   200.00},
	{"Palomino Creek",               2160.20,  -149.00,     0.00,  2576.90,   228.30,   200.00},
	{"Paradiso",                    -2741.00,   793.40,    -6.10, -2533.00,  1268.40,   200.00},
	{"Pershing Square",              1440.90, -1722.20,   -89.00,  1583.50, -1577.50,   110.90},
	{"Pilgrim",                      2437.30,  1383.20,   -89.00,  2624.40,  1783.20,   110.90},
	{"Pilgrim",                      2624.40,  1383.20,   -89.00,  2685.10,  1783.20,   110.90},
	{"Pilson Intersection",          1098.30,  2243.20,   -89.00,  1377.30,  2507.20,   110.90},
	{"Pirates in Men's Pants",       1817.30,  1469.20,   -89.00,  2027.40,  1703.20,   110.90},
	{"Playa del Seville",            2703.50, -2126.90,   -89.00,  2959.30, -1852.80,   110.90},
	{"Prickle Pine",                 1534.50,  2583.20,   -89.00,  1848.40,  2863.20,   110.90},
	{"Prickle Pine",                 1117.40,  2507.20,   -89.00,  1534.50,  2723.20,   110.90},
	{"Prickle Pine",                 1848.40,  2553.40,   -89.00,  1938.80,  2863.20,   110.90},
	{"Prickle Pine",                 1938.80,  2624.20,   -89.00,  2121.40,  2861.50,   110.90},
	{"Queens",                      -2533.00,   458.40,     0.00, -2329.30,   578.30,   200.00},
	{"Queens",                      -2593.40,    54.70,     0.00, -2411.20,   458.40,   200.00},
	{"Queens",                      -2411.20,   373.50,     0.00, -2253.50,   458.40,   200.00},
	{"Randolph Industrial Estate",   1558.00,   596.30,   -89.00,  1823.00,   823.20,   110.90},
	{"Redsands East",                1817.30,  2011.80,   -89.00,  2106.70,  2202.70,   110.90},
	{"Redsands East",                1817.30,  2202.70,   -89.00,  2011.90,  2342.80,   110.90},
	{"Redsands East",                1848.40,  2342.80,   -89.00,  2011.90,  2478.40,   110.90},
	{"Redsands West",                1236.60,  1883.10,   -89.00,  1777.30,  2142.80,   110.90},
	{"Redsands West",                1297.40,  2142.80,   -89.00,  1777.30,  2243.20,   110.90},
	{"Redsands West",                1377.30,  2243.20,   -89.00,  1704.50,  2433.20,   110.90},
	{"Redsands West",                1704.50,  2243.20,   -89.00,  1777.30,  2342.80,   110.90},
	{"Regular Tom",                  -405.70,  1712.80,    -3.00,  -276.70,  1892.70,   200.00},
	{"Richman",                       647.50, -1118.20,   -89.00,   787.40,  -954.60,   110.90},
	{"Richman",                       647.50,  -954.60,   -89.00,   768.60,  -860.60,   110.90},
	{"Richman",                       225.10, -1369.60,   -89.00,   334.50, -1292.00,   110.90},
	{"Richman",                       225.10, -1292.00,   -89.00,   466.20, -1235.00,   110.90},
	{"Richman",                        72.60, -1404.90,   -89.00,   225.10, -1235.00,   110.90},
	{"Richman",                        72.60, -1235.00,   -89.00,   321.30, -1008.10,   110.90},
	{"Richman",                       321.30, -1235.00,   -89.00,   647.50, -1044.00,   110.90},
	{"Richman",                       321.30, -1044.00,   -89.00,   647.50,  -860.60,   110.90},
	{"Richman",                       321.30,  -860.60,   -89.00,   687.80,  -768.00,   110.90},
	{"Richman",                       321.30,  -768.00,   -89.00,   700.70,  -674.80,   110.90},
	{"Robada Intersection",         -1119.00,  1178.90,   -89.00,  -862.00,  1351.40,   110.90},
	{"Roca Escalante",               2237.40,  2202.70,   -89.00,  2536.40,  2542.50,   110.90},
	{"Roca Escalante",               2536.40,  2202.70,   -89.00,  2625.10,  2442.50,   110.90},
	{"Rockshore East",               2537.30,   676.50,   -89.00,  2902.30,   943.20,   110.90},
	{"Rockshore West",               1997.20,   596.30,   -89.00,  2377.30,   823.20,   110.90},
	{"Rockshore West",               2377.30,   596.30,   -89.00,  2537.30,   788.80,   110.90},
	{"Rodeo",                          72.60, -1684.60,   -89.00,   225.10, -1544.10,   110.90},
	{"Rodeo",                          72.60, -1544.10,   -89.00,   225.10, -1404.90,   110.90},
	{"Rodeo",                         225.10, -1684.60,   -89.00,   312.80, -1501.90,   110.90},
	{"Rodeo",                         225.10, -1501.90,   -89.00,   334.50, -1369.60,   110.90},
	{"Rodeo",                         334.50, -1501.90,   -89.00,   422.60, -1406.00,   110.90},
	{"Rodeo",                         312.80, -1684.60,   -89.00,   422.60, -1501.90,   110.90},
	{"Rodeo",                         422.60, -1684.60,   -89.00,   558.00, -1570.20,   110.90},
	{"Rodeo",                         558.00, -1684.60,   -89.00,   647.50, -1384.90,   110.90},
	{"Rodeo",                         466.20, -1570.20,   -89.00,   558.00, -1385.00,   110.90},
	{"Rodeo",                         422.60, -1570.20,   -89.00,   466.20, -1406.00,   110.90},
	{"Rodeo",                         466.20, -1385.00,   -89.00,   647.50, -1235.00,   110.90},
	{"Rodeo",                         334.50, -1406.00,   -89.00,   466.20, -1292.00,   110.90},
	{"Royal Casino",                 2087.30,  1383.20,   -89.00,  2437.30,  1543.20,   110.90},
	{"San Andreas Sound",            2450.30,   385.50,  -100.00,  2759.20,   562.30,   200.00},
	{"Santa Flora",                 -2741.00,   458.40,    -7.60, -2533.00,   793.40,   200.00},
	{"Santa Maria Beach",             342.60, -2173.20,   -89.00,   647.70, -1684.60,   110.90},
	{"Santa Maria Beach",              72.60, -2173.20,   -89.00,   342.60, -1684.60,   110.90},
	{"Shady Cabin",                 -1632.80, -2263.40,    -3.00, -1601.30, -2231.70,   200.00},
	{"Shady Creeks",                -1820.60, -2643.60,    -8.00, -1226.70, -1771.60,   200.00},
	{"Shady Creeks",                -2030.10, -2174.80,    -6.10, -1820.60, -1771.60,   200.00},
	{"Sobell Rail Yards",            2749.90,  1548.90,   -89.00,  2923.30,  1937.20,   110.90},
	{"Spinybed",                     2121.40,  2663.10,   -89.00,  2498.20,  2861.50,   110.90},
	{"Starfish Casino",              2437.30,  1783.20,   -89.00,  2685.10,  2012.10,   110.90},
	{"Starfish Casino",              2437.30,  1858.10,   -39.00,  2495.00,  1970.80,    60.90},
	{"Starfish Casino",              2162.30,  1883.20,   -89.00,  2437.30,  2012.10,   110.90},
	{"Temple",                       1252.30, -1130.80,   -89.00,  1378.30, -1026.30,   110.90},
	{"Temple",                       1252.30, -1026.30,   -89.00,  1391.00,  -926.90,   110.90},
	{"Temple",                       1252.30,  -926.90,   -89.00,  1357.00,  -910.10,   110.90},
	{"Temple",                        952.60, -1130.80,   -89.00,  1096.40,  -937.10,   110.90},
	{"Temple",                       1096.40, -1130.80,   -89.00,  1252.30, -1026.30,   110.90},
	{"Temple",                       1096.40, -1026.30,   -89.00,  1252.30,  -910.10,   110.90},
	{"The Camel's Toe",              2087.30,  1203.20,   -89.00,  2640.40,  1383.20,   110.90},
	{"The Clown's Pocket",           2162.30,  1783.20,   -89.00,  2437.30,  1883.20,   110.90},
	{"The Emerald Isle",             2011.90,  2202.70,   -89.00,  2237.40,  2508.20,   110.90},
	{"The Farm",                    -1209.60, -1317.10,   114.90,  -908.10,  -787.30,   251.90},
	{"The Four Dragons Casino",      1817.30,   863.20,   -89.00,  2027.30,  1083.20,   110.90},
	{"The High Roller",              1817.30,  1283.20,   -89.00,  2027.30,  1469.20,   110.90},
	{"The Mako Span",                1664.60,   401.70,     0.00,  1785.10,   567.20,   200.00},
	{"The Panopticon",               -947.90,  -304.30,    -1.10,  -319.60,   327.00,   200.00},
	{"The Pink Swan",                1817.30,  1083.20,   -89.00,  2027.30,  1283.20,   110.90},
	{"The Sherman Dam",              -968.70,  1929.40,    -3.00,  -481.10,  2155.20,   200.00},
	{"The Strip",                    2027.40,   863.20,   -89.00,  2087.30,  1703.20,   110.90},
	{"The Strip",                    2106.70,  1863.20,   -89.00,  2162.30,  2202.70,   110.90},
	{"The Strip",                    2027.40,  1783.20,   -89.00,  2162.30,  1863.20,   110.90},
	{"The Strip",                    2027.40,  1703.20,   -89.00,  2137.40,  1783.20,   110.90},
	{"The Visage",                   1817.30,  1863.20,   -89.00,  2106.70,  2011.80,   110.90},
	{"The Visage",                   1817.30,  1703.20,   -89.00,  2027.40,  1863.20,   110.90},
	{"Unity Station",                1692.60, -1971.80,   -20.40,  1812.60, -1932.80,    79.50},
	{"Valle Ocultado",               -936.60,  2611.40,     2.00,  -715.90,  2847.90,   200.00},
	{"Verdant Bluffs",                930.20, -2488.40,   -89.00,  1249.60, -2006.70,   110.90},
	{"Verdant Bluffs",               1073.20, -2006.70,   -89.00,  1249.60, -1842.20,   110.90},
	{"Verdant Bluffs",               1249.60, -2179.20,   -89.00,  1692.60, -1842.20,   110.90},
	{"Verdant Meadows",                37.00,  2337.10,    -3.00,   435.90,  2677.90,   200.00},
	{"Verona Beach",                  647.70, -2173.20,   -89.00,   930.20, -1804.20,   110.90},
	{"Verona Beach",                  930.20, -2006.70,   -89.00,  1073.20, -1804.20,   110.90},
	{"Verona Beach",                  851.40, -1804.20,   -89.00,  1046.10, -1577.50,   110.90},
	{"Verona Beach",                 1161.50, -1722.20,   -89.00,  1323.90, -1577.50,   110.90},
	{"Verona Beach",                 1046.10, -1722.20,   -89.00,  1161.50, -1577.50,   110.90},
	{"Vinewood",                      787.40, -1310.20,   -89.00,   952.60, -1130.80,   110.90},
	{"Vinewood",                      787.40, -1130.80,   -89.00,   952.60,  -954.60,   110.90},
	{"Vinewood",                      647.50, -1227.20,   -89.00,   787.40, -1118.20,   110.90},
	{"Vinewood",                      647.70, -1416.20,   -89.00,   787.40, -1227.20,   110.90},
	{"Whitewood Estates",             883.30,  1726.20,   -89.00,  1098.30,  2507.20,   110.90},
	{"Whitewood Estates",            1098.30,  1726.20,   -89.00,  1197.30,  2243.20,   110.90},
	{"Willowfield",                  1970.60, -2179.20,   -89.00,  2089.00, -1852.80,   110.90},
	{"Willowfield",                  2089.00, -2235.80,   -89.00,  2201.80, -1989.90,   110.90},
	{"Willowfield",                  2089.00, -1989.90,   -89.00,  2324.00, -1852.80,   110.90},
	{"Willowfield",                  2201.80, -2095.00,   -89.00,  2324.00, -1989.90,   110.90},
	{"Willowfield",                  2541.70, -1941.40,   -89.00,  2703.50, -1852.80,   110.90},
	{"Willowfield",                  2324.00, -2059.20,   -89.00,  2541.70, -1852.80,   110.90},
	{"Willowfield",                  2541.70, -2059.20,   -89.00,  2703.50, -1941.40,   110.90},
	{"Yellow Bell Station",          1377.40,  2600.40,   -21.90,  1492.40,  2687.30,    78.00}
};

new g_Cities[][e_ZONEINFO] =
{
	// Main Zones
	{"Los Santos",                     44.60, -2892.90,  -242.90,  2997.00,  -768.00,   900.00},
	{"Las Venturas",                  869.40,   596.30,  -242.90,  2997.00,  2993.80,   900.00},
	{"Bone County",                  -480.50,   596.30,  -242.90,   869.40,  2993.80,   900.00},
	{"Tierra Robada",               -2997.40,  1659.60,  -242.90,  -480.50,  2993.80,   900.00},
	{"Tierra Robada",               -1213.90,   596.30,  -242.90,  -480.50,  1659.60,   900.00},
	{"San Fierro",                  -2997.40, -1115.50,  -242.90, -1213.90,  1659.60,   900.00},
	{"Red County",                  -1213.90,  -768.00,  -242.90,  2997.00,   596.30,   900.00},
	{"Flint County",                -1213.90, -2892.90,  -242.90,    44.60,  -768.00,   900.00},
	{"Whetstone",                   -2997.40, -2892.90,  -242.90, -1213.90, -1115.50,   900.00}
};

enum enum_SAFE_ZONES
{
	safe_zone_AREA_ID,
	Float:safe_zone_MIN_X,
	Float:safe_zone_MIN_Y,
	Float:safe_zone_MAX_X,
	Float:safe_zone_MAX_Y,
	safe_zone_INTERIOR,
	safe_zone_WORLD
};
new SAFE_ZONES[][enum_SAFE_ZONES] =
{
	{INVALID_STREAMER_ID, 1996.91,	-1449.67,	2056.86,	-1350.719, 0, 0},
	{INVALID_STREAMER_ID, 1323.9,	-1842.27,	1701.9,	-1722.26, 0, 0},
	{INVALID_STREAMER_ID, 1440.9,	-1722.26,	1583.5,	-1577.589, 0, 0},
	{INVALID_STREAMER_ID, 1249.619,	-2394.33,	1852.0,	-2179.25, 0, 0},
	{INVALID_STREAMER_ID, 1382.729,	-2730.879,	2201.82,	-2394.33, 0, 0},
	{INVALID_STREAMER_ID, -2078.669,	578.395,	-1499.89,	744.267, 0, 0},
	{INVALID_STREAMER_ID, -2741.07,	458.411,	-2533.04,	793.411, 0, 0},
	{INVALID_STREAMER_ID, -1794.92,	-730.117,	-1213.91,	-50.096, 0, 0},
	{INVALID_STREAMER_ID, -792.254,	-698.554,	-452.403,	-380.042, 0, 0},
	{INVALID_STREAMER_ID, -594.19,	-1648.55,	-187.699,	-1276.599, 0, 0},
	{INVALID_STREAMER_ID, 2237.399,	2202.76,	2536.429,	2542.55, 0, 0},
	{INVALID_STREAMER_ID, 1236.63,	1203.28,	1457.369,	1883.109, 0, 0},
	{INVALID_STREAMER_ID, 1457.369,	1203.28,	1777.39,	1883.109, 0, 0},
	{INVALID_STREAMER_ID, -91.585,	1655.05,	421.234,	2123.01, 0, 0},
	{INVALID_STREAMER_ID, -613.953796, -209.777252, -381.961181, -6.355076, 0, 0},
	{INVALID_STREAMER_ID, -115.255050, -1211.812377, -54.539089, -1179.635253, 0, 0}
};

/* Rangos Policias */
enum enum_POLICE_SHOP_WEAPONS
{
	police_shop_RANK,
	police_shop_WEAPON_ID,
	police_shop_WEAPON_PRICE
};
new POLICE_SHOP_WEAPONS[][enum_POLICE_SHOP_WEAPONS] = 
{
	{1, 3, 0},
	{1, 22, 0},
	{2, 17, 0},
	{2, 24, 0},
	{2, 25, 0},
	{2, 27, 0},
	{2, 28, 0},
	{2, 29, 0},
	{2, 30, 0},
	{2, 31, 0},
	{2, 33, 0},
	{3, 34, 0}
};


enum enum_POLICE_SKINS
{
	police_skin_TYPE,
	police_skin_SKIN,
	police_skin_RANK
};
new POLICE_SKINS[][enum_POLICE_SKINS] =
{
	{SEX_MALE, 71, 1},
	{SEX_MALE, 280, 2},
	{SEX_MALE, 284, 4},
	{SEX_MALE, 281, 6},
	{SEX_MALE, 285, 9},
	{SEX_MALE, 282, 10},
	{SEX_MALE, 283, 11},
	{SEX_MALE, 288, 12},
	
	{SEX_FEMALE, 306, 1},
	{SEX_FEMALE, 307, 1},
	{SEX_FEMALE, 309, 1}
};

new POLICE_RANKS[][] =
{
	/* 0 */ "Civil",
	/* 1 */ "Cadete",
	/* 2 */ "Oficial I",	
	/* 3 */ "Oficial II",	
	/* 4 */ "Oficial III",	
	/* 5 */ "Oficial III+",
	/* 6 */ "Detective I",
	/* 7 */ "Detective II",
	/* 8 */ "Detective III",
	/* 9 */ "Sargento I",
	/* 10 */ "Sargento II",
	/* 11 */ "Capitán I",
	/* 12 */ "Jefe Policía"
};

#define MAX_POLICE_OBJECTS	300
enum enum_POLICE_OBJECTS
{
	bool:police_object_VALID,
	police_object_USER[24],
	police_object_OBJECT_ID
};
new POLICE_OBJECTS[MAX_POLICE_OBJECTS][enum_POLICE_OBJECTS];

enum enum_POLICE_GARAGE_DOORS
{
	police_gdoor_MODELID,
	Float:police_gdoor_CLOSED_X,
	Float:police_gdoor_CLOSED_Y,
	Float:police_gdoor_CLOSED_Z,
	Float:police_gdoor_CLOSED_RX,
	Float:police_gdoor_CLOSED_RY,
	Float:police_gdoor_CLOSED_RZ,
	Float:police_gdoor_OPENED_X,
	Float:police_gdoor_OPENED_Y,
	Float:police_gdoor_OPENED_Z,
	Float:police_gdoor_OPENED_RX,
	Float:police_gdoor_OPENED_RY,
	Float:police_gdoor_OPENED_RZ,
	Float:police_gdoor_MOVE_SPEED,
	bool:police_gdoor_CLOSING,
	police_gdoor_OBJECT_ID,
	police_gdoor_TIMER
};
new POLICE_GARAGE_DOORS[][enum_POLICE_GARAGE_DOORS] =
{
	{3055, 1588.48853, -1637.85852, 14.57500, 0.0, 0.0, 0.0, 1588.48853, -1637.85852, 16.45880, 90.0, 0.0, 0.0, 1.3, false, INVALID_STREAMER_ID, -1},
	{3055, 2294.04102, 2498.81396, 4.47113,   0.00000, 0.00000, 90.00000, 2294.0410, 2498.8140, 9.0059, 0.0, 0.0, 90.0, 1.6, false, INVALID_STREAMER_ID, -1},
	{3055, 2335.13086, 2443.66895, 6.97370,   0.00000, 0.00000, 60.00000, 2335.1309, 2443.6689, 11.6876, 0.0, 0.0, 60.0, 1.6, false, INVALID_STREAMER_ID, -1},
	{10184, -1631.69556, 688.56641, 8.70960,   0.00000, 0.00000, 90.00000, -1631.6956, 688.5664, 13.2064, 0.0, 0.0, 90.0, 1.6, false, INVALID_STREAMER_ID, -1}
};

enum enum_POLICE_DOORS
{
	police_door_MODELID,
	Float:police_door_X,
	Float:police_door_Y,
	Float:police_door_Z,
	Float:police_door_RZ,
	police_door_INTERIOR,
	police_door_WORLD,
	bool:police_door_CLOSED,
	police_door_OBJECT_ID,
	police_door_TIMER
};
new POLICE_DOORS[][enum_POLICE_DOORS] =
{
	{1495, 1582.6055, -1638.0713, 12.3384, 0.0, 0, 0, true, INVALID_STREAMER_ID, -1},//lspd
	{1495, 245.62910, 72.53300, 1002.54999, 0.0, 6, 0, true, INVALID_STREAMER_ID, -1},//lspd
	{1495, 250.65849, 62.58540, 1002.54999, 90.0, 6, 0, true, INVALID_STREAMER_ID, -1},//lspd
	{1495, 226.16409, 71.01760, 1003.95050, 90.0, 6, 0, true, INVALID_STREAMER_ID, -1},//lspd
	{1497, 222.14630, 70.52970, 1003.95050, -90.0, 6, 0, true, INVALID_STREAMER_ID, -1},//lspd
	{1495, -1619.70764, 688.41058, 6.17220, 180.00000, 0, 0, true, INVALID_STREAMER_ID, -1},//sfpd
	{1495, 239.58211, 116.84430, 1002.20319, 90.00000, 10, 0, true, INVALID_STREAMER_ID, -1},//sfpd
	{1495, 253.19209, 108.35700, 1002.20319, 90.00000, 10, 0, true, INVALID_STREAMER_ID, -1},//sfpd
	{1497, 266.59210, 112.56570, 1003.60992, 180.0, 10, 0, true, INVALID_STREAMER_ID, -1},//sfpd
	{1495, 228.27240, 150.46510, 1002.01813, 90.0, 3, 0, true, INVALID_STREAMER_ID, -1},//lvpd
	{1495, 228.27240, 160.45010, 1002.01813, 90.0, 3, 0, true, INVALID_STREAMER_ID, -1},//lvpd
	{1495, 232.21030, 169.83350, 1002.01813, 180.0, 3, 0, true, INVALID_STREAMER_ID, -1},//lvpd
	{1495, 2294.03516, 2492.91528, 2.26740, 90.0, 0, 0, true, INVALID_STREAMER_ID, -1},//lvpd
	{1497, 221.95570, 181.21680, 1002.02142, 0.0, 3, 0, true, INVALID_STREAMER_ID, -1}//lvpd
};


/* SYSTEM - PROPERTIES */
#define MAX_PROPERTIES	2000
enum Property_Info_Enum
{
	property_VALID,
	property_ID,
	Float:property_EXT_X,
	Float:property_EXT_Y,
	Float:property_EXT_Z,
	Float:property_EXT_ANGLE,
	property_EXT_INTERIOR,
	property_EXT_FREEZE,
	property_ID_INTERIOR,
	
	bool:property_SOLD,
	bool:property_CREW,
	property_OWNER_ID,
	property_CREW_ID,
	property_NAME[24],
	property_PRICE,
	property_LEVEL,
	property_EXTRA,
	property_VIP_LEVEL,
	
	Text3D:property_EXT_LABEL_ID,
	Text3D:property_INT_LABEL_ID,
	property_EXT_PICKUP_ID,
	property_INT_PICKUP_ID,
	
	property_PRICE_BASE
};
new PROPERTY_INFO[MAX_PROPERTIES][Property_Info_Enum];


/* PROPERTY CONSTRUCTOR */
new TOTAL_PROPERTIES_LOADED;
enum PROPERTY_INTERIOR_ENUM
{
	property_creator_LEVEL,
	property_creator_PRICE,
	Float:property_INT_X,
	Float:property_INT_Y,
	Float:property_INT_Z,
	Float:property_INT_ANGLE,
	property_INT_INTERIOR,
	bool:property_INT_FREEZE
};
new PROPERTY_INTERIORS[][PROPERTY_INTERIOR_ENUM] =
{
	{6, 180000, 140.249008, 1366.197509, 1083.859375, 0.0, 5, false},
	{6, 160000, 2324.530029, -1149.540039, 1050.710083, 0.0, 12, false},
	{6, 270000, 225.679992, 1021.450012, 1084.017700, 0.0, 7, false},
	{6, 190000, 234.190002, 1063.729980, 1084.212280, 0.0, 6, false},
	{6, 120000, 226.300003, 1114.239990, 1080.992919, 270.0, 5, false},
	{6, 180000, 2317.889892, -1026.760009, 1050.217773, 0.0, 9, false},
	{6, 120000, 2495.979980, -1692.079956, 1014.742187, 180.0, 3, false},
	{6, 90000,  2196.626464, -1204.321411, 1049.023437, 90.0, 6, false},
	{6, 105000, 2270.143554, -1210.490600, 1047.562500, 90.0, 10, false},
	{4, 90000,  2365.199951, -1135.595825, 1050.882568, 0.0, 8, false},
	{3, 75000,  2237.590087, -1081.640014, 1049.023437, 0.0, 2, false},
	{4, 65000,  2468.840087, -1698.239990, 1013.507812, 90.0, 2, false},
	{3, 45000,  2282.928955, -1140.004516, 1050.898437, 0.0, 11, false},
	{4, 50000,  2308.775878, -1212.731689, 1049.023437, 0.0, 6, false},
	{6, 135000, 2233.681396, -1114.973510, 1050.882812, 0.0, 5, false},
	{6, 230000, 2218.162597, -1076.148315, 1050.484375, 90.0, 1, false},
	{6, 220000, 266.654327, 304.961791, 999.148437, 270.0, 2, false},
	{6, 30000,  243.720001, 304.910003, 999.148437, 270.0, 1, false},
	{6, 65000,  2259.440673, -1135.905883, 1050.640258, 270.0, 10, false},
	{12, 3000000, 1260.910034, -785.320068, 1091.906250, 280.0, 5, false}
};

enum PLAYER_PROPERTY_CONSTRUCTOR_ENU
{
	bool:player_property_creator_ENABLED,
	player_property_creator_INTERIO,
	Float:player_property_creator_EXT_X,
	Float:player_property_creator_EXT_Y,
	Float:player_property_creator_EXT_Z,
	Float:player_property_creator_EXT_ANG,
	player_property_creator_EXT_INT
};
new PLAYER_PROPERTY_CONSTRUCTOR[MAX_PLAYERS][PLAYER_PROPERTY_CONSTRUCTOR_ENU];

//Taxis
enum TAXI_METER_VEHICLE_Info
{
	bool:veh_taxi_meter_ENABLED,
	veh_taxi_meter_PRICE,
	veh_taxi_meter_PAYMENT,
	Float:veh_taxi_meter_OLD_X,
	Float:veh_taxi_meter_OLD_Y,
	Float:veh_taxi_meter_OLD_Z,
	Float:veh_taxi_meter_DISTANCE,
	veh_taxi_meter_TIMER
};
new TAXI_METER_VEHICLE[MAX_VEHICLES][TAXI_METER_VEHICLE_Info];


// Grua
new Float:CRANE_POINTS[][] = 
{
	{-28.8145, -1124.5767, 0.6990, 157.4051},
	{-34.1703, -1122.5664, 0.6990, 157.4051},
	{-39.7803, -1119.8870, 0.6990, 157.4051},
	{-45.1235, -1117.3114, 0.6990, 157.4051},
	{-49.8637, -1115.2751, 0.6990, 157.4051},
	{-42.4484, -1154.7849, 0.6990, 333.7967},
	{-46.8119, -1152.4274, 0.6990, 333.7967},
	{-50.6488, -1150.6056, 0.6990, 333.7967},
	{-54.1760, -1149.1364, 0.6990, 333.7967},
	{-57.8852, -1147.4999, 0.6990, 333.7967},
	{-62.2619, -1145.2260, 0.6990, 333.7967},
	{-66.4254, -1143.2191, 0.6990, 333.7967},
	{-70.7787, -1140.9065, 0.6990, 333.7967},
	{-75.1332, -1138.9713, 0.6990, 333.7967},
	{-79.8642, -1136.7786, 0.6990, 333.7967},
	{-33.8437, -1135.5642, 0.6990, 333.7967},
	{-36.8147, -1141.7927, 0.6990, 157.4051},
	{-40.9361, -1140.1613, 0.6990, 157.4051},
	{-45.5692, -1138.2747, 0.6990, 157.4051},
	{-50.3522, -1136.1228, 0.6990, 157.4051},
	{-54.4753, -1134.3014, 0.6990, 157.4051},
	{-38.0563, -1133.7695, 0.6990, 333.7967},
	{-42.4517, -1132.0298, 0.6990, 333.7967},
	{-47.2834, -1129.8915, 0.6990, 333.7967},
	{-51.6219, -1127.9185, 0.6990, 333.7967}
};

//Pizzero
new Float:PIZZA_DELIVERY_POINT[][] = 
{
	{2232.147460, -1785.597656, 13.560449, 82.756179    },
	{2290.242675, -1796.022583, 13.546875, 267.344024   },
	{1739.314575, -1582.890747, 14.158246, 174.783370   },
	{1694.923339, -1583.478881, 13.546875, 179.829818   },
	{1241.816406, -2032.996093, 60.041099, 263.972076   },
	{1187.268798, -1666.487915, 13.634441, 172.332916   },
	{998.998962, -1868.162231, 12.820312, 333.677734    },
	{891.677551, -1695.211669, 13.546875, 182.046417    },
	{507.502838, -1606.101684, 16.247840, 359.563903    },
	{305.462341, -1748.736816, 4.546875, 356.093139     },
	{159.034683, -1906.259521, 3.773437, 0.044234       },
	{387.668762, -2083.981689, 7.835937, 11.638330      },
	{902.655456, -930.055786, 42.601562, 185.516662     },
	{1809.700439, -1166.832885, 24.226562, 168.451568   },
	{2007.953857, -985.501953, 33.888450, 203.231872    },
	{2580.753906, -969.438110, 81.363517, 50.412715     },
	{2796.151855, -1088.867187, 30.719810, 234.631011   },
	{2819.019287, -1614.678588, 11.079871, 245.630599   },
	{2756.354492, -1979.312011, 13.547579, 270.360687   },
	{931.654541, -1231.159545, 16.928218, 262.568939    },
	{952.439208, -913.921447, 45.729900, 180.787841     },
	{824.417663, -2031.578857, 12.867187, 331.166229    },
	{1714.394531, -1629.683593, 20.203384, 332.709594   }
};

enum PIZZA_VEHICLE_Info
{
	bool:pizza_vehicle_STARTED,
	pizza_vehicle_DRIVER_AID,
	pizza_vehicle_PIZZAS,
	pizza_vehicle_PIZZA_POINT,
	bool:pizza_vehicle_PIZZA_POINT_DELI
};
new PIZZA_VEHICLE[MAX_VEHICLES][PIZZA_VEHICLE_Info];


//Transportsta
new Float:LoadCarrierPoints[][] =
{
	{2775.2275,-2498.5554,15.1093, 0.0}
};
//Camioneros
new Float:LoadTrucksPoints[][] =
{
	{115.4362,-257.3507,2.4483, 0.0},
	{115.1411,-268.1090,2.5001, 0.0}
};
new Float:Pos_Actor_Truck_Load[][] =
{
	{119.4602,-257.4635,3.8534,85.0841},
	{119.4984,-268.4088,3.8566,93.3019}
};
enum info_actor_truck
{
	ID
}
new ACTOR_TRUCK[MAX_ACTORS][info_actor_truck];
enum TRUCK_VEHICLE_Info
{
	bool:truck_vehicle_LOADED,
	bool:truck_vehicle_LOADING,
	bool:truck_vehicle_UNLOADING,
	bool:truck_vehicle_DELIVERED,
	truck_vehicle_DRIVER_USER_ID,
	truck_vehicle_POINT,
};
new TRUCK_VEHICLE[MAX_VEHICLES][TRUCK_VEHICLE_Info];

enum Truck_Content_Info
{
	truck_content_EXP,
	truck_content_NAME[24],
	truck_content_MONEY,
	Float:truck_content_X,
	Float:truck_content_Y,
	Float:truck_content_Z
};

new Carrier_Contents[][Truck_Content_Info] =
{
	{0, "Elementos de granja", 3000, -2210.4802,-2326.7036,30.6250},
	{0, "Red electrica", 4120, 223.3456,24.0674,2.5781},
	{10, "Quimicos toxicos", 5500, 579.8362,1215.3116,11.8173},
	{20, "Partes de avion", 6700, -2096.593017, -2243.229492, 30.352083},
	{30, "Partes aero nauticas", 7975,-1522.2689,500.2466,7.1797},
	{60, "Quimicos", 8220, 270.5548,1412.3070,10.4587}
};



new Truck_Contents[][Truck_Content_Info] =
{
	{0, "Partes de Vehículos", 280, -72.730911, -1176.907714, 2.940625},
	{0, "Productos Agrícolas", 350, -379.4214,-1059.8140,59.0409},
	{0, "Productos Industriales", 450, 2168.514404, -2275.264892, 13.128628},
	{0, "Madera y Leña", 700, -2096.593017, -2243.229492, 30.352083},
	{0, "Ropa y Complementos", 975, 2834.454833, 958.061462, 10.479191},
	{25, "Productos de Limpieza", 1250, 2524.153076, 2816.919189, 10.547390},
	{50, "Productos de Pesca", 1760, -1789.979858, 1421.842895, 6.914581},
	{50, "Productos Químicos", 1960, -1862.919433, -202.232727, 18.125516},
	{80, "Productos Tecnológicos", 2050, 1039.057983, 2132.961425, 10.547390}
};

new Float:ACTOR_TRUCK_UN_LOAD[][] =
{
	{-72.7309,-1176.9077,2.9406,5.8491},
	{-379.4905,-1059.8199,59.0392,94.8092}, // actor 2
	{2168.5601,-2275.3159,13.4023,222.0591}, // actor 3
	{-2096.6384,-2243.2791,30.6250,137.8512}, // actor 4
	{2834.3875,958.0574,10.7500,93.4764}, // actor 5
	{2524.1509,2816.8491,10.8203,178.0916}, // actor 6
	{-1789.9799,1421.8429,7.1875,178.0916}, // actor 7
	{-1862.8870,-202.2926,18.3984,208.6668}, // actor 8
	{1038.9894,2132.9644,10.8203,87.1695} // actor 9
};
new ACTOR_TRUCUNLOAD[MAX_ACTORS][info_actor_truck];
/* Leñador */
enum
{
	LUMBER_TREE_STATE_NORMAL,
	LUMBER_TREE_STATE_CUTTING,
	LUMBER_TREE_STATE_CUTTED
}
enum LUMBER_TREES_Info
{
	lumber_tree_MODELID,
	Float:lumber_tree_X,
	Float:lumber_tree_Y,
	Float:lumber_tree_Z,
	Float:lumber_tree_RX,
	Float:lumber_tree_RY,
	Float:lumber_tree_RZ,
	lumber_tree_OBJECT_ID,
	Text3D:lumber_tree_LABEL,
	lumber_tree_STATE,
	lumber_tree_GROW_TIMER,
	lumber_tree_GROW_COUNTER
};
new LUMBER_TREES[][LUMBER_TREES_Info] =
{
	{657, -467.31256, -47.68515, 59.00023,   0.00000, 0.00000, 0.00000, INVALID_STREAMER_ID, Text3D:INVALID_3DTEXT_ID, LUMBER_TREE_STATE_NORMAL, -1, -1},
	{657, -480.88443, -53.57695, 59.39736,   0.00000, 0.00000, 0.00000, INVALID_STREAMER_ID, Text3D:INVALID_3DTEXT_ID, LUMBER_TREE_STATE_NORMAL, -1, -1},
	{657, -491.79199, -45.14817, 59.24156,   0.00000, 0.00000, 0.00000, INVALID_STREAMER_ID, Text3D:INVALID_3DTEXT_ID, LUMBER_TREE_STATE_NORMAL, -1, -1},
	{657, -493.84619, -54.35930, 59.48059,   0.00000, 0.00000, 0.00000, INVALID_STREAMER_ID, Text3D:INVALID_3DTEXT_ID, LUMBER_TREE_STATE_NORMAL, -1, -1},
	{657, -473.43958, -40.64830, 59.00023,   0.00000, 0.00000, 0.00000, INVALID_STREAMER_ID, Text3D:INVALID_3DTEXT_ID, LUMBER_TREE_STATE_NORMAL, -1, -1},
	{657, -468.32245, -61.54378, 58.98302,   0.00000, 0.00000, 0.00000, INVALID_STREAMER_ID, Text3D:INVALID_3DTEXT_ID, LUMBER_TREE_STATE_NORMAL, -1, -1},
	{657, -458.69937, -75.32365, 58.80302,   0.00000, 0.00000, 0.00000, INVALID_STREAMER_ID, Text3D:INVALID_3DTEXT_ID, LUMBER_TREE_STATE_NORMAL, -1, -1},
	{657, -453.17416, -65.31260, 58.98302,   0.00000, 0.00000, 0.00000, INVALID_STREAMER_ID, Text3D:INVALID_3DTEXT_ID, LUMBER_TREE_STATE_NORMAL, -1, -1},
	{657, -444.92609, -78.80465, 57.97836,   0.00000, 0.00000, 0.00000, INVALID_STREAMER_ID, Text3D:INVALID_3DTEXT_ID, LUMBER_TREE_STATE_NORMAL, -1, -1},
	{657, -465.78470, -85.49714, 58.96302,   0.00000, 0.00000, 0.00000, INVALID_STREAMER_ID, Text3D:INVALID_3DTEXT_ID, LUMBER_TREE_STATE_NORMAL, -1, -1},
	{657, -454.24377, -86.58199, 58.46635,   0.00000, 0.00000, 0.00000, INVALID_STREAMER_ID, Text3D:INVALID_3DTEXT_ID, LUMBER_TREE_STATE_NORMAL, -1, -1},
	{657, -440.20041, -92.70150, 57.60720,   0.00000, 0.00000, 0.00000, INVALID_STREAMER_ID, Text3D:INVALID_3DTEXT_ID, LUMBER_TREE_STATE_NORMAL, -1, -1},
	{657, -484.98972, -65.79082, 59.82284,   0.00000, 0.00000, 0.00000, INVALID_STREAMER_ID, Text3D:INVALID_3DTEXT_ID, LUMBER_TREE_STATE_NORMAL, -1, -1},
	{657, -460.57928, -95.55928, 59.25615,   0.00000, 0.00000, 0.00000, INVALID_STREAMER_ID, Text3D:INVALID_3DTEXT_ID, LUMBER_TREE_STATE_NORMAL, -1, -1},
	{657, -521.20569, -44.74903, 60.62712,   0.00000, 0.00000, 0.00000, INVALID_STREAMER_ID, Text3D:INVALID_3DTEXT_ID, LUMBER_TREE_STATE_NORMAL, -1, -1},
	{657, -534.94348, -50.98387, 61.66861,   0.00000, 0.00000, 0.00000, INVALID_STREAMER_ID, Text3D:INVALID_3DTEXT_ID, LUMBER_TREE_STATE_NORMAL, -1, -1},
	{657, -533.45081, -41.45306, 61.64992,   0.00000, 0.00000, 0.00000, INVALID_STREAMER_ID, Text3D:INVALID_3DTEXT_ID, LUMBER_TREE_STATE_NORMAL, -1, -1},
	{657, -495.74197, -64.77782, 59.94119,   0.00000, 0.00000, 0.00000, INVALID_STREAMER_ID, Text3D:INVALID_3DTEXT_ID, LUMBER_TREE_STATE_NORMAL, -1, -1},
	{657, -519.74005, -72.02750, 61.19377,   0.00000, 0.00000, 0.00000, INVALID_STREAMER_ID, Text3D:INVALID_3DTEXT_ID, LUMBER_TREE_STATE_NORMAL, -1, -1},
	{657, -518.47144, -57.24505, 60.76774,   0.00000, 0.00000, 0.00000, INVALID_STREAMER_ID, Text3D:INVALID_3DTEXT_ID, LUMBER_TREE_STATE_NORMAL, -1, -1}
};

/* Basurero */

#define MAX_ROUTES	5
#define MAX_OBJECTS_PER_ROUTE	20

enum Trash_Object_Info
{
	bool:trash_route_VALID,
	trash_route_OBJECTS,
	Float:trash_route_DISTANCE,
	trash_route_MONEY,
	trash_object_MODELID[MAX_OBJECTS_PER_ROUTE],
	Float:trash_object_X[MAX_OBJECTS_PER_ROUTE],
	Float:trash_object_Y[MAX_OBJECTS_PER_ROUTE],
	Float:trash_object_Z[MAX_OBJECTS_PER_ROUTE],
	Float:trash_object_RX[MAX_OBJECTS_PER_ROUTE],
	Float:trash_object_RY[MAX_OBJECTS_PER_ROUTE],
	Float:trash_object_RZ[MAX_OBJECTS_PER_ROUTE]
};
new TRASH_OBJECTS[MAX_ROUTES][Trash_Object_Info];
new TRASH_PLAYER_OBJECTS[MAX_PLAYERS][MAX_OBJECTS_PER_ROUTE];

enum TRASH_VEHICLES_INFO
{
	bool:trash_vehicle_JOB_STARTED, 
	trash_vehicle_ROUTE,
	trash_vehicle_CP,
	trash_vehicle_DRIVER_ID,
	trash_vehicle_PASSENGER_ID
};
new TRASH_VEHICLES[MAX_VEHICLES][TRASH_VEHICLES_INFO];

/* SYSTEM - PLAYERTEMP */
enum
{
	PED_STOPPED,
	PED_WALKING,
	PED_RUNNING,
	PED_SPRINTING,
	PED_BYCICLING
};

enum Temp_Enum
{
	pt_GAME_STATE,
	pt_NAME[24],
	pt_IP[16],
	bool:pt_USER_EXIT, // Esta registrado?
	bool:pt_USER_LOGGED, // 1 = ha cargado todos los datos del user
	pt_TIME_PLAYING, // tiempo jugando en segundos sesion actual
	pt_ANTIFLOOD_COMMANDS,
	pt_ANTIFLOOD_TALK,
	pt_TIMERS[MAX_TIMERS_PER_PLAYER],
	bool:pt_USER_VALID_NAME,
	pt_RP_NAME[24],
	pt_BAD_LOGIN_ATTEMP,
	pt_DOUBT_CHANNEL_TIME,
	pt_LAST_PICKUP_ID,
	pt_HOSPITAL,
	Float:pt_HOSPITAL_LIFE,
	pt_TIME_PASSED_LAST_REP,
	pt_INTERIOR_INDEX,
	pt_CLOTHING_SHOP,
	pt_CLOTHING_SHOP_SELECTED_SKIN,
	bool:pt_SELECT_TEXTDRAW,
	bool:pt_HUD_TEXTDRAWS, // Barra de hambre y sed
	bool:pt_REGISTER_SELECTING_SKIN,
	pt_REGISTER_SELECTED_SKIN,
	bool:pt_REGISTER_SELECTING_STYLE,
	pt_REGISTER_SELECTED_STYLE,
	pt_REGISTER_ACTOR,
	bool:pt_THIRST_MESSAGE,
	bool:CANSANCIO_MESSAGE,
	bool:pt_HUNGRY_MESSAGE,
	bool:pt_TOYS_SHOP,
	pt_TOYS_SHOP_TOY_SELECTED,
	pt_SELECTED_TOY_SLOT,
	pt_SELECT_BANK_TRANSFER_ACCOUNT,
	bool:pt_PLAYER_IN_ATM,
	pt_POCKET_SLOT_SELECTED,
	bool:pt_PHONE_COMMANDS_MESSAGE,
	bool:pt_PLAYER_IN_CALL,
	pt_PLAYER_PHONE_CALL_STATE,
	pt_PLAYER_PHONE_CALL_PLAYERID,
	pt_PLAYER_LISTITEM[MAX_LISTITEMS],
	pt_PLAYER_PHONE_BOOK_ADD_NUMBER,
	pt_PLAYER_PHONE_BOOK_SELECTED,
	pt_PLAYER_PHONE_NUMBER_SELECTED,
	pt_BUY_HOUSE_INDEX,
	bool:pt_PLAYER_FINISH_HOSPITAL,
	pt_ANTIFLOOD_KNOCK_PROPERTY,
	pt_KNOCK_PLAYER_ID,
	pt_GPS_CHECKPOINT,
	pt_GPS_PLAYER_SELECTED,
	pt_PLAYER_GPS_SELECTED_PROPERTY[MAX_SU_PROPERTIES],
	pt_PLAYER_PROPERTY_SELECTED,
	bool:pt_PLAYER_WAITING_MP3_HTTP,
	bool:pt_MUSIC_FOR_PROPERTY,
	bool:pt_MUSIC_FOR_VEHICLE,
	pt_FUEL_DOWN_TIME,
	pt_ACEITE_DOWN_TIME,
	pt_SELECTED_BUY_VEHICLE_ID,
	pt_LAST_VEHICLE_ID,
	pt_NOTARY_OPTION, //0 al banco, 1 a persona
	pt_NOTARY_PRICE,
	pt_NOTARY_TO_PLAYER,
	pt_PLAYER_VEHICLE_SELECTED,
	bool:pt_TAXI_METER_ENABLED,
	bool:pt_WANT_TAXI,
	Float:pt_TRUCK_LOADING_VALUE,
	pt_TRUCK_CHECKPOINT,
	pt_TUNING_SELECTED_PART[24],
	pt_TUNING_SELECTED_COMPONENT[24],
	pt_TUNING_SELECTED_COMPONENT_ID,
	pt_TUNING_SELECTED_PIECES,
	pt_PAINTJOB_SELECTED_ID,
	pt_WORKING_IN,
	pt_SELECTED_MECHANIC_VEHICLE_ID,
	pt_MECHANIC_COLOR_SLOT,
	bool:pt_WANT_MECHANIC,
	pt_HARVERT_CHECKPOINT,
	pt_HARVERT_PROCCESS,
	pt_PIZZA_CHECKPOINT,
	bool:pt_TRASH_DRIVER,
	bool:pt_TRASH_PASSENGER,
	pt_TRASH_VEHICLE_ID,
	pt_TRASH_CHECKPOINT,
	Float:pt_RECYCLE_BIN_VALUE,
	bool:pt_PLAYER_CARRYING_TREE,
	pt_PLAYER_LUMBERJACK_TREE,
	Float:pt_PLAYER_LUMBERJACK_TREE_PROG,
	pt_LUMBERJACK_CHECKPOINT,
	pt_LAST_GOT_WORK_TIME,
	pt_LAST_GIVE_MONEY_TIME,
	pt_SELECTED_BUY_SEED_ID,
	Float:pt_PLANTING_PROGRESS,
	bool:pt_PLANTING,
	pt_PLANTING_PLANT_SELECTED,
	bool:pt_GPS_MAP,
	pt_PROPERTY_INDEX,
	bool:pt_KICKED,
	pt_SELECTED_DIALOG_WEAPON_SLOT,
	pt_TRICK_SELLER_PID,
	pt_TRICK_SELLER_AID,
	pt_TRICK_SELLER_EXTRA,
	pt_TRICK_PRICE,
	pt_TRICK_TIME,
	pt_DIALOG_BOT_VEHICLE,
	pt_DIALOG_BOT_VEHICLE_BOOT_SLOT,
	pt_POLICE_RADIO,
	bool:pt_CUFFING,
	bool:pt_CUFFED,
	pt_ENTER_JAIL_TIME,
	pt_DIALOG_DB_LIMIT,
	pt_DIALOG_DB_PAGE,
	pt_SELECTED_DB_AC_ID,
	bool:pt_POLICE_CALL_NAME,
	bool:pt_POLICE_CALL_DESCRIPTION,
	pt_POLICE_CALL_NAME_STR[24],
	pt_SAVE_ACCOUNT_TIME,
	pt_ANTIFLOOD_REPORT,
	bool:pt_SEE_ACMD_LOG,
	pt_LAST_CHEAT_DETECTED_TIME,
	bool:pt_SEE_AC_LOG,
	pt_ANTIFLOOD_DEATH,
	pt_ANTIFLOOD_STATE,
	pt_ANTIFLOOD_ENTER_VEHICLE,
	pt_SELECTED_AC_LISTITEM,
	pt_ADMIN_PM_PID,
	pt_ADMIN_PM_AID,
	pt_ADMIN_PM_TIME,
	pt_MECHANIC_PID,
	pt_MECHANIC_AID,
	pt_MECHANIC_PRICE,
	pt_MECHANIC_TEXT[64],
	pt_MECHANIC_TYPE,
	pt_MECHANIC_EXTRA,
	pt_MECHANIC_VEHICLE_ID,
	pt_MECHANIC_PIECES,
	pt_MECHANIC_TIME,
	pt_MECHANIC_SELECTED_COLOR,
	bool:pt_SHOP,
	pt_SHOP_STATE,
	pt_SHOP_ARTICLE_ID[6],
	pt_SHOP_SELECTED_ARTICLE_ID,
	bool:pt_SHOP_COME_FROM_MY_ADS,
	pt_ANTIFLOOD_SHOP,	
	pt_SHOP_ADD_TYPE,
	pt_SHOP_ADD_TEXT[24],
	pt_SHOP_ADD_MODELID,
	pt_SHOP_ADD_VCOL1,
	pt_SHOP_ADD_VCOL2,
	pt_VIRTUAL_WORLD,
	bool:pt_PLAYER_SPECTATE,
	pt_LAST_BM_BUY,
	pt_PIZZA_PROCCESS,
	pt_DELIVERED_PIZZAS,
	pt_PIZZA_ACTOR,
	pt_LAST_PLANT_TIME,
	Float:pt_INJURED_POS[4],
	pt_CREATE_CREW_NAME[32],
	pt_CREATE_CREW_COLOR,
	pt_CREW_INVITE_PID,
	pt_CREW_INVITE_CUENTA,
	pt_CREW_INVITE_AID,
	pt_CREW_INVITE_INFO[4],
	pt_CREW_SELECTED_RANK,
	pt_CREW_SELECTED_NEW_RANK,
	pt_LAST_TERRITORY,
	pt_PLAYER_TERRITORY_PRO,
	pt_PLAYER_COLOR,
	pt_LAST_GOT_CREW,
	pt_POLICE_PEN_PID,
	pt_POLICE_PEN_AID,
	pt_POLICE_PEN_IM,
	pt_POLICE_PEN_TIME,
	pt_DIALOG_ECO_SELECTED,
	pt_LAST_SU_CHECK,
	pt_PIVOT_OBJECT,
	pt_SELECT_TUNING_OBJECT,
	pt_TUNING_PICKUP,
	bool:pt_IN_TUNING_GARAGE,
	bool:pt_TUNING_GARAGE_SHOP,
	pt_TUNING_GARAGE_VEHICLEID,
	pt_TUNING_EDIT_SLOT,
	Float:pt_OLD_EDIT_VOBJECT_POS[6],
	pt_TUNING_EDIT_COLOR_SLOT,
	pt_COUNTRY_TYPE,
	pt_LAST_SHOT_TIME,
	bool:pt_READING_GUIDE,
	pt_GUIDE_STEP,
	pt_PASSWD[24],
	bool:pt_CONTROL,
	bool:pt_NEW_USER,
	pt_SELECTING_STYLE,
	pt_SELECTED_STYLE,
	pt_PROPERTY_CINFO[4],
	pt_CJ_WARNINGS,
	pt_FIRST_NAME[24],
	pt_SUB_NAME[24],
	Text3D:pt_POLICE_LABEL,
	bool:pt_ADMIN_SERVICE,
	Text3D:pt_ADMIN_LABEL,
	Float:pt_OLD_HEALTH,
	Float:pt_OLD_ARMOUR,
	pt_LAST_SAFE_ZONE_WARNING,
	pt_SELECTED_POLICE_OBJECT_INDEX,
	pt_SELECTED_BYC_ID,
	pt_SELECTED_BYC_USER_ID,
	bool:pt_DIALOG_RESPONDED,
	P_SHOPCARINDEX,
	P_CHOPCONCEID,
	bool:P_SHOPCAR,
	CHANGE_TEXTURE,
	CHANGE_TEXTURE_TIPE,
	TIPOVENTACASA,CANTIDADVENTA,SAVEVAR,
	MAKECASA,Float:CasaPosX,Float:CasaPosY,Float:CasaPosZ,
	Float:GarajePosX,Float:GarajePosY,Float:GarajePosZ,
	MAKECASAINTERIOR,MAKECASACOSTO,line_tutorial,

	MAKEAPARTAMENTO,MAKEDEPARTAMENTOINTERIOR,MAKEAPARTAMENTOCOSTO,
	Float:GrafitiX,Float:GrafitiY,Float:GrafitiZ,bool:Capturando_Grafiti,Capturando_Grafiti_ID,
	bool:CHECK_RADAR,Float:RADAR_CHECK_POS_X,Float:RADAR_CHECK_POS_Y,Float:RADAR_CHECK_POS_Z,
	M_SIN_LEER,pt_ACTOR_TRUCK,bool:pt_MENU,bool:pt_EDITANDO_GRAFITI,pt_EDITANDO_GRAFITI_ID,
	pt_CARRIER_CHECKPOINT,
	pt_PESCA,bool:pt_PESCAR,pt_PESCO,bool:pt_PUEDE_PESCAR,
	pt_ASR_WARNINGS,pt_LAST_RADIO,bool:pt_LLAMADO_TAXI,pt_NOVEDAD_,bool:pt_VIENDO_NOVE,Contrasena[256],
	bool:pt_LOGUEAR,pt_OPCION_LOGIN,pt_TIMER_LOGIN,pt_CANJEAR_RP_FOR_IC,INDEX_SHOP_PRENDA,bool:COMPRANDO_ACCESORIOS,
	Float:INDEX_ABAJO,Float:INDEX_ARRIBA,Float:INDEX_DERECHA,Float:INDEX_IZQUIERDA,bool:INTERCAMBIANDO_NEVERA,
	bool:ABRIENDO_BAUL,BAUL_VEHICLE,bool:ABRIO_ARMARIO,bool:ABRIO_ARMERIA,pt_TEXTURA_ID,pt_VIENDO_TEXTURA,bool:pt_VIENDO_TEXTURAS,
	bool:pt_MENU_CASA,bool:pt_CHANGE_INTERIOR,pt_TYPE_MONEDA_TEXTURA,pt_PRECIO_TEXTURA,bool:LOGUEADO,
	bool:pt_COMPRANDO_ROPA,bool:pt_COMPRAR_MUEBLES,pt_COMPRAR_MUEBLE_ID,pt_COMPRAR_MUEBLE_MONEDA,pt_COMPRAR_MUEBLE_PRECIO,
	bool:pt_BORRAR_MUEBLES,bool:pt_MENU_APARTAMeNTO,bool:pt_TEXTURA_APARTAMENTO,bool:pt_COMPRANDO_DPA,bool:NEVERA_DEPA,
	bool:ABRIO_ARMARIO_DEPA,bool:ABRIO_ARMERIA_DEPA,pt_BANDA_ID,bool:pt_INV_BANDA,pt_OPTION_INV_BANDA,get_ID_BANDA_INV,
	tp_VEHICLE,Float:pt_Pos_corre_x,Float:pt_Pos_corre_y,Float:pt_Pos_corre_z,bool:pt_EVENTO,pt_DUDA[256],Text3D:pt_LABEL
};
 
#define LOGUEARSE		5
#define REGISTRARSE 	10

new PLAYER_TEMP[MAX_PLAYERS][Temp_Enum]; // PT (PlayerTemp), variables que no van a ser guardadas en base de datos.

#define MAX_ADS_PER_PLAYER	3
enum
{
	PLAYER_SHOP_STATE_ALL,
	PLAYER_SHOP_STATE_AD,
	PLAYER_SHOP_STATE_MY_ADS
};

enum
{
	SHOP_ARTICLE_TYPE_PROPERTY,
	SHOP_ARTICLE_TYPE_VEHICLE,
	SHOP_ARTICLE_TYPE_OTHER
};

enum
{
	MECHANIC_OPTION_REPAIR,
	MECHANIC_OPTION_COLOR_1,
	MECHANIC_OPTION_COLOR_2,
	MECHANIC_OPTION_TUNING,
	MECHANIC_OPTION_PAINTJOB
};

//EnterExits
enum
{
	INTERIOR_NO_INFO,
	//INTERIOR_GENERAL_HOSPITAL,
	INTERIOR_BINCO,
	INTERIOR_SUBURBAN,
	INTERIOR_PROLAPS,
	INTERIOR_DIDIER_SACHS,
	INTERIOR_VICTIM,
	INTERIOR_ZIP,
	INTERIOR_247,
	INTERIOR_PIZZA,
	INTERIOR_CLUCKIN_BELL,
	INTERIOR_BURGER_SHOT,
	INTERIOR_BANK_LS,
	INTERIOR_BANK_SF,
	INTERIOR_BANK_LV,
	INTERIOR_CITY_HALL_LS,
	INTERIOR_UNITY_STATION,
	INTERIOR_TRUCK,
	INTERIOR_POLICE_LS,
	INTERIOR_POLICE_SF,
	INTERIOR_POLICE_LV,
	INTERIOR_ALHAMBRA,
	INTERIOR_POLICE_GARAGE,
	INTERIOR_HOSPITAL,
	INTERIOR_CLUB,
	INTERIOR_BLACKMARKET,
	INTERIOR_MINERS,
	INTERIOR_PESCADORES,
	INTERIOR_PRVEEDOR,
	INTERIOR_AMMU_NATION
};
enum Enter_Exits
{
	ee_ID,
	ee_NAME[32],

	ee_INTERIOR_TYPE,
	
	ee_INT_MAPICON,
	ee_INT_FREEZE,
	ee_INT_WORLD,
	ee_INT_INTERIOR,
	Float:ee_INT_X,
	Float:ee_INT_Y,
	Float:ee_INT_Z,
	Float:ee_INT_ANGLE,
	
	ee_EXT_MAPICON,
	ee_EXT_FREEZE,
	ee_EXT_WORLD,
	ee_EXT_INTERIOR,
	Float:ee_EXT_X,
	Float:ee_EXT_Y,
	Float:ee_EXT_Z,
	Float:ee_EXT_ANGLE,
	
	ee_TIME_OPEN,
	ee_TIME_CLOSE,
	
	ee_INT_MAPICON_ID,
	ee_EXT_MAPICON_ID,
	Text3D:ee_INT_LABEL_ID,
	Text3D:ee_EXT_LABEL_ID,
	
	
	ee_INT_PICKUP_ID,	/* No son pickups decorativos */
	ee_EXT_PICKUP_ID	/* Son pickups para identificar el id */
};

new ENTER_EXIT[][Enter_Exits] = // EE = EnterExits
{
	//{-1, "Hospital General", INTERIOR_GENERAL_HOSPITAL, -1, true, 0, 10, 1976.126342, 1163.504028, -5.208700, 90.0,		-1, false, 0, 0, 1172.832763, -1323.269531, 15.400051, 270.0, 0, 0,		-1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Binco", INTERIOR_BINCO, -1, false, 0, 15, 207.744949, -111.073318, 1005.132812, 0.0,	45, false, 0, 0, 2244.484863, -1665.223510, 15.476562, 0.0, 9, 20, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Binco", INTERIOR_BINCO, -1, false, 1, 15, 207.744949, -111.073318, 1005.132812, 0.0,	45, false, 0, 0, -2374.125976, 910.103271, 45.433864, 90.0, 9, 22, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Binco", INTERIOR_BINCO, -1, false, 2, 15, 207.744949, -111.073318, 1005.132812, 0.0,	45, false, 0, 0, 2101.902832, 2257.391845, 11.023437, 270.0, 8, 22, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Binco", INTERIOR_BINCO, -1, false, 3, 15, 207.744949, -111.073318, 1005.132812, 0.0,	45, false, 0, 0, 1656.993408, 1733.450195, 10.828111, 90.0, 8, 22, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "SubUrban", INTERIOR_SUBURBAN, -1, false, 0, 1, 203.906326, -50.494247, 1001.804687, 0.0,	45, false, 0, 0, 2112.835205, -1211.456665, 23.962865, 180.0, 9, 21, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "SubUrban", INTERIOR_SUBURBAN, -1, false, 1, 1, 203.906326, -50.494247, 1001.804687, 0.0,	45, false, 0, 0, -2490.140869, -29.123632, 25.617187, 90.0, 9, 22, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "SubUrban", INTERIOR_SUBURBAN, -1, false, 2, 1, 203.906326, -50.494247, 1001.804687, 0.0,	45, false, 0, 0, 2779.590087, 2453.658203, 11.062500, 136.0, 9, 22, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "ProLaps", INTERIOR_PROLAPS, -1, false, 0, 3, 206.995925, -140.021163, 1003.507812, 0.0,	45, false, 0, 0, 499.498168, -1360.616088, 16.368682, 340.0, 8, 22, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "ProLaps", INTERIOR_PROLAPS, -1, false, 1, 3, 206.995925, -140.021163, 1003.507812, 0.0,	45, false, 0, 0, 2825.891357, 2407.322265, 11.062500, 133.0, 8, 22, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Didier Sachs", INTERIOR_DIDIER_SACHS, -1, false, 0, 14, 204.348281, -168.678985, 1000.523437, 0.0,	45, false, 0, 0, 453.858032, -1478.098632, 30.813968, 111.110641, 8, 23, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Didier Sachs", INTERIOR_DIDIER_SACHS, -1, false, 1, 14, 204.348281, -168.678985, 1000.523437, 0.0,	45, false, 0, 0, 1642.838012, -2284.760742, -1.195312, 270.0, 8, 23, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Victim", INTERIOR_VICTIM, -1, false, 0, 5, 227.350250, -8.188652, 1002.210937, 90.0,	45, false, 0, 0, 461.541320, -1500.892333, 31.049194, 98.0, 8, 21, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Victim", INTERIOR_VICTIM, -1, false, 1, 5, 227.350250, -8.188652, 1002.210937, 90.0,	45, false, 0, 0, -1694.747558, 951.613464, 24.890625, 135.0, 8, 21, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Victim", INTERIOR_VICTIM, -1, false, 2, 5, 227.350250, -8.188652, 1002.210937, 90.0,	45, false, 0, 0, 2802.926269, 2430.682861, 11.062500, 130.0, 8, 22, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "ZIP", INTERIOR_ZIP, -1, false, 0, 18, 161.401184, -96.887367, 1001.804687, 0.0,	45, false, 0, 0, 1456.611816, -1137.818969, 23.961400, 215.0, 9, 22, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "ZIP", INTERIOR_ZIP, -1, false, 1, 18, 161.401184, -96.887367, 1001.804687, 0.0,	45, false, 0, 0, -1882.421997, 866.394836, 35.171875, 138.0, 9, 22, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "ZIP", INTERIOR_ZIP, -1, false, 2, 18, 161.401184, -96.887367, 1001.804687, 0.0,	45, false, 0, 0, 2090.534667, 2224.481933, 11.023437, 180.0, 9, 22, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "ZIP", INTERIOR_ZIP, -1, false, 3, 18, 161.401184, -96.887367, 1001.804687, 0.0,	45, false, 0, 0, 2572.074218, 1904.711181, 11.023437, 180.0, 9, 22, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	//{-1, "Mercado negro", INTERIOR_BLACKMARKET, -1, false, 0, 0,290.3143,-126.5096,1004.0625,193.9181, 23, false, 0, 0,2458.6445,-1763.9479,13.5808,108.9201, 20, 8, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	//{-1, "Ammu nation", INTERIOR_AMMU_NATION, -1, false, 0, 7,1244.3646, -1314.6182, 1005.7089,193.9181, 6, false, 0, 0,1367.8408,-1280.0161,13.5469,108.9201, 20, 8, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Mineros", INTERIOR_MINERS, -1, false, 25, 18,2402.5508, -1510.6914, 1401.5043,193.9181, 23, false, 0, 0,445.2300, -850.8131, 29.1990,108.9201, 20, 8, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Pescadores", INTERIOR_PESCADORES, -1, false, 0, 0,2846.1431,-1997.7563,-4.5760,88.7848, 2, false, 0, 0,2898.1497,-2004.3743,3.6757,281.0269, 20, 8, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Proveedor", INTERIOR_PRVEEDOR, -1, false, 0, 0,2821.8462,-1929.1078,-1.6366,88.7848, 2, false, 0, 0,2898.3843,-2015.8136,3.6659,281.0269, 20, 8, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	/*{-1, "24/7", INTERIOR_247, -1, false, 0, 18, -30.958774, -91.807441, 1003.546875, 0.0,	17, false, 0, 0, 2194.734130, 1991.022216, 12.296875, 90.0,	0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "24/7", INTERIOR_247, -1, false, 1, 18, -30.958774, -91.807441, 1003.546875, 0.0,	17, false, 0, 0, -180.966003, 1034.823242, 19.742187, 90.0,	0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "24/7", INTERIOR_247, -1, false, 2, 18, -30.958774, -91.807441, 1003.546875, 0.0,	17, false, 0, 0, 1352.314941, -1758.961425, 13.507812, 0.0,	0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "24/7", INTERIOR_247, -1, false, 3, 18, -30.958774, -91.807441, 1003.546875, 0.0,	17, false, 0, 0, 1833.540771, -1842.542724, 13.578125, 90.0, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "24/7", INTERIOR_247, -1, false, 4, 18, -30.958774, -91.807441, 1003.546875, 0.0,	17, false, 0, 0, 2884.694335, 2453.865478, 11.068956, 225.0, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "24/7", INTERIOR_247, -1, false, 5, 18, -30.958774, -91.807441, 1003.546875, 0.0,	17, false, 0, 0, 2097.616210, 2224.081298, 11.023437, 180.0, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "24/7", INTERIOR_247, -1, false, 6, 18, -30.958774, -91.807441, 1003.546875, 0.0,	17, false, 0, 0, 2247.650146, 2396.417236, 10.820312, 0.0, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "24/7", INTERIOR_247, -1, false, 7, 18, -30.958774, -91.807441, 1003.546875, 0.0,	17, false, 0, 0, 1315.453247, -897.967102, 39.578125, 180.0, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "24/7", INTERIOR_247, -1, false, 8, 18, -30.958774, -91.807441, 1003.546875, 0.0,	17, false, 0, 0, 1000.317199, -919.933349, 42.328125, 105.0, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "24/7", INTERIOR_247, -1, false, 9, 18, -30.958774, -91.807441, 1003.546875, 0.0,	17, false, 0, 0, 2452.572021, 2064.924316, 10.820312, 180.0, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "24/7", INTERIOR_247, -1, false, 10, 18, -30.958774, -91.807441, 1003.546875, 0.0,	17, false, 0, 0, 2546.502929, 1972.397338, 10.820312, 180.0, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "24/7", INTERIOR_247, -1, false, 11, 18, -30.958774, -91.807441, 1003.546875, 0.0,	17, false, 0, 0, 1937.592773, 2307.269042, 10.820312, 90.0, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "24/7", INTERIOR_247, -1, false, 12, 18, -30.958774, -91.807441, 1003.546875, 0.0,	17, false, 0, 0, -1562.437744, -2733.189941, 48.743457, 234.0, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "24/7", INTERIOR_247, -1, false, 13, 18, -30.958774, -91.807441, 1003.546875, 0.0,	17, false, 0, 0, -2442.718994, 755.316589, 35.171875, 180.0, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Well Stacked Pizza", INTERIOR_PIZZA, -1, false, 0, 5, 372.310729, -133.246292, 1001.492187, 0.0,	29, false, 0, 0, 2105.234619, -1806.479614, 13.554687, 90.0, 13, 6, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Well Stacked Pizza", INTERIOR_PIZZA, -1, false, 1, 5, 372.310729, -133.246292, 1001.492187, 0.0,	29, false, 0, 0, -1721.211425, 1359.705932, 7.185316, 90.0, 13, 6, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Well Stacked Pizza", INTERIOR_PIZZA, -1, false, 2, 5, 372.310729, -133.246292, 1001.492187, 0.0,	29, false, 0, 0, 2756.652099, 2477.132812, 11.062500, 135.0, 13, 6, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Well Stacked Pizza", INTERIOR_PIZZA, -1, false, 3, 5, 372.310729, -133.246292, 1001.492187, 0.0,	29, false, 0, 0, 2083.380615, 2224.687988, 11.023437, 180.0, 13, 6, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Well Stacked Pizza", INTERIOR_PIZZA, -1, false, 4, 5, 372.310729, -133.246292, 1001.492187, 0.0,	29, false, 0, 0, 2351.770996, 2533.328369, 10.820312, 180.0, 13, 6, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Well Stacked Pizza", INTERIOR_PIZZA, -1, false, 5, 5, 372.310729, -133.246292, 1001.492187, 0.0,	29, false, 0, 0, 2638.568847, 1849.818481, 11.023437, 90.0, 13, 6, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Well Stacked Pizza", INTERIOR_PIZZA, -1, false, 6, 5, 372.310729, -133.246292, 1001.492187, 0.0,	29, false, 0, 0, 372.310729, -133.246292, 1001.492187, 0.0, 13, 6, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Well Stacked Pizza", INTERIOR_PIZZA, -1, false, 7, 5, 372.310729, -133.246292, 1001.492187, 0.0,	29, false, 0, 0, 375.114501, -117.272621, 1001.492187, 180.0, 13, 6, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	
	{-1, "Cluckin Bell", INTERIOR_CLUCKIN_BELL, -1, false, 0, 9, 364.914093, -11.778851, 1001.851562, 0.0,	14, false, 0, 0, 2419.926025, -1509.024780, 24.000000, 270.0, 13, 2, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Cluckin Bell", INTERIOR_CLUCKIN_BELL, -1, false, 1, 9, 364.914093, -11.778851, 1001.851562, 0.0,	14, false, 0, 0, 2397.772949, -1898.847778, 13.546875, 0.0, 13, 2, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Cluckin Bell", INTERIOR_CLUCKIN_BELL, -1, false, 2, 9, 364.914093, -11.778851, 1001.851562, 0.0,	14, false, 0, 0, 928.553466 , -1352.848876, 13.343750, 90.0, 13, 2, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Cluckin Bell", INTERIOR_CLUCKIN_BELL, -1, false, 3, 9, 364.914093, -11.778851, 1001.851562, 0.0,	14, false, 0, 0, 2838.312011, 2407.552978, 11.068956, 225.0, 13, 2, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Cluckin Bell", INTERIOR_CLUCKIN_BELL, -1, false, 4, 9, 364.914093, -11.778851, 1001.851562, 0.0,	14, false, 0, 0, 2101.901367, 2228.776855, 11.023437, 270.0, 13, 2, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Cluckin Bell", INTERIOR_CLUCKIN_BELL, -1, false, 5, 9, 364.914093, -11.778851, 1001.851562, 0.0,	14, false, 0, 0, 2393.372070, 2041.856323, 10.820312, 0.0, 13, 2, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Cluckin Bell", INTERIOR_CLUCKIN_BELL, -1, false, 6, 9, 364.914093, -11.778851, 1001.851562, 0.0,	14, false, 0, 0, 2638.423828, 1671.904296, 11.023437, 90.0, 13, 2, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Cluckin Bell", INTERIOR_CLUCKIN_BELL, -1, false, 7, 9, 364.914093, -11.778851, 1001.851562, 0.0,	14, false, 0, 0, -1816.567382, 618.417419, 35.171875, 180.0, 13, 2, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Cluckin Bell", INTERIOR_CLUCKIN_BELL, -1, false, 8, 9, 364.914093, -11.778851, 1001.851562, 0.0,	14, false, 0, 0, -2671.401611, 257.927551, 4.632812, 0.0, 13, 2, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Cluckin Bell", INTERIOR_CLUCKIN_BELL, -1, false, 9, 9, 364.914093, -11.778851, 1001.851562, 0.0,	14, false, 0, 0, 364.914093  , -11.778851, 1001.851562, 0.0, 13, 2, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Cluckin Bell", INTERIOR_CLUCKIN_BELL, -1, false, 10, 9, 364.914093, -11.778851, 1001.851562, 0.0,	14, false, 0, 0, 368.652679  , -4.492218, 1001.851562, 180.0, 13, 2, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},

	{-1, "Burger Shot", INTERIOR_BURGER_SHOT, -1, false, 0, 10, 362.869354, -75.153747, 1001.507812, 315.0,	10, false, 0, 0, 810.715270, -1616.163330, 13.546875, 270.0, 9, 6, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Burger Shot", INTERIOR_BURGER_SHOT, -1, false, 1, 10, 362.869354, -75.153747, 1001.507812, 315.0,	10, false, 0, 0, 1199.272216, -918.372253, 43.121376, 180.0, 9, 6, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Burger Shot", INTERIOR_BURGER_SHOT, -1, false, 2, 10, 362.869354, -75.153747, 1001.507812, 315.0,	10, false, 0, 0, 2366.805419, 2071.106201, 10.820312, 90.0, 9, 6, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Burger Shot", INTERIOR_BURGER_SHOT, -1, false, 3, 10, 362.869354, -75.153747, 1001.507812, 315.0,	10, false, 0, 0, 2472.626464, 2034.173339, 11.062500, 90.0, 9, 6, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Burger Shot", INTERIOR_BURGER_SHOT, -1, false, 4, 10, 362.869354, -75.153747, 1001.507812, 315.0,	10, false, 0, 0, 1872.485351, 2071.812255, 11.062500, 270.0, 9, 6, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Burger Shot", INTERIOR_BURGER_SHOT, -1, false, 5, 10, 362.869354, -75.153747, 1001.507812, 315.0,	10, false, 0, 0, 2169.620117, 2795.799072, 10.820312, 270.0, 9, 6, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Burger Shot", INTERIOR_BURGER_SHOT, -1, false, 6, 10, 362.869354, -75.153747, 1001.507812, 315.0,	10, false, 0, 0, 1157.925659, 2072.159912, 11.062500, 270.0, 9, 6, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Burger Shot", INTERIOR_BURGER_SHOT, -1, false, 7, 10, 362.869354, -75.153747, 1001.507812, 315.0,	10, false, 0, 0, -2356.003173, 1008.051147, 50.898437, 90.0, 9, 6, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Burger Shot", INTERIOR_BURGER_SHOT, -1, false, 8, 10, 362.869354, -75.153747, 1001.507812, 315.0,	10, false, 0, 0, -2336.861816, -166.945022, 35.554687, 270.0, 9, 6, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Burger Shot", INTERIOR_BURGER_SHOT, -1, false, 9, 10, 362.869354, -75.153747, 1001.507812, 315.0,	10, false, 0, 0, -1912.406860, 827.900634, 35.227863, 315.0, 9, 6, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},*/
	{-1, "Banco Los Santos", INTERIOR_BANK_LS, -1, true, 5, 5, 1412.077880, 1315.779907, 1501.087890, 90.0,	52, false, 0, 0, 1477.583740, -1010.425170, 26.843750, 180.0, 8, 22, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Banco San Fierro", INTERIOR_BANK_SF, -1, true, 10, 10, 1104.824462, 1515.503173, 1452.807128, 0.0, 52, false, 0, 0, -1961.384887, 441.804687, 35.171875, 90.0, 8, 22, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Banco Las Venturas", INTERIOR_BANK_LV, -1, true, 15, 15, 2673.430908, -610.844604, -71.658203, 270.0, 52, false, 0, 0, 2474.557861, 1024.154052, 10.820312, 180.0, 8, 22, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Gobierno San Andreas", INTERIOR_CITY_HALL_LS, -1, true, 20, 20, -501.181243, 286.212188, 2001.094970, 0.0, 3, false, 0, 0, 1480.966918, -1772.065673, 18.795755, 0.0, 8, 21, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Unity Station", INTERIOR_UNITY_STATION, -1, false, 0, 3, 1494.416015, 1303.681884, 1093.289062, 0.0, -1, false, 0, 0, 1752.603881, -1894.155883, 13.557376, 270.0, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Camioneros", INTERIOR_TRUCK, -1, true, 25, 18, 1297.457031, -61.437820, 1002.498046, 180.0, -1, false, 0, 0, 59.4220, -244.4633, 1.5781, 180.0, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Policía Los Santos", INTERIOR_POLICE_LS, -1, false, 0, 6, 246.827011, 62.424068, 1003.640625, 0.0, 30, false, 0, 0, 1555.400390, -1675.611694, 16.195312, 90.0, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Policía San Fierro", INTERIOR_POLICE_SF, -1, false, 0, 10, 246.425857, 107.400123, 1003.218750, 0.0, 30, false, 0, 0, -1605.511840, 710.382507, 13.867187, 0.0, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Policía Las Venturas", INTERIOR_POLICE_LV, -1, false, 0, 3, 238.758178, 138.726867, 1003.023437, 0.0, 30, false, 0, 0, 2287.059082, 2432.260742, 10.820312, 180.0, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Club Alhambra", INTERIOR_ALHAMBRA, -1, false, 0, 17, 493.487731, -24.662528, 1000.679687, 0.0, 48, false, 0, 0, 1836.876586, -1682.407104, 13.329626, 90.0, 22, 8, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Policía Los Santos", INTERIOR_POLICE_GARAGE, -1, false, 0, 6, 246.407897, 87.903236, 1003.640625, 180.0, -1, false, 0, 0, 1568.651977, -1690.080688, 6.218750, 180.0, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1}, // garaje lspd
	{-1, "Policía San Fierro", INTERIOR_POLICE_GARAGE, -1, false, 0, 10, 278.369232, 117.561325, 1004.617187, 90.0, -1, false, 0, 0, -1594.110107, 716.163024, -4.906250, 270.0, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1}, // garaje lspd
	{-1, "Policía Las Venturas", INTERIOR_POLICE_GARAGE, -1, false, 0, 3, 231.671142, 181.048477, 1003.031250, 90.0, -1, false, 0, 0, 2282.221923, 2423.218505, 3.476562, 0.0, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1}, // garaje lspd
	{-1, "Hospital", INTERIOR_HOSPITAL, -1, false, 1, 3, -2029.700683, -119.617759, 1035.171875, 0.0, 22, false, 0, 0,	2034.197875, -1403.040039, 17.294845, 180.0	, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Hospital", INTERIOR_HOSPITAL, -1, false, 2, 3, -2029.700683, -119.617759, 1035.171875, 0.0, 22, false, 0, 0,	1172.832763, -1323.269531, 15.400051, 270.0	, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Hospital", INTERIOR_HOSPITAL, -1, false, 3, 3, -2029.700683, -119.617759, 1035.171875, 0.0, 22, false, 0, 0,	1242.235595, 328.113281, 19.755510, 0.0	, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Hospital", INTERIOR_HOSPITAL, -1, false, 4, 3, -2029.700683, -119.617759, 1035.171875, 0.0, 22, false, 0, 0,	-2201.566162, -2307.610839, 30.625000, 320.0	, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Hospital", INTERIOR_HOSPITAL, -1, false, 5, 3, -2029.700683, -119.617759, 1035.171875, 0.0, 22, false, 0, 0,	-2655.108886, 639.278625, 14.453125, 180.0	, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Hospital", INTERIOR_HOSPITAL, -1, false, 6, 3, -2029.700683, -119.617759, 1035.171875, 0.0, 22, false, 0, 0,	-318.812774, 1050.359130, 20.340259, 0.0	, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Hospital", INTERIOR_HOSPITAL, -1, false, 7, 3, -2029.700683, -119.617759, 1035.171875, 0.0, 22, false, 0, 0,	-1514.855590, 2520.366699, 55.909828, 0.0	, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Hospital", INTERIOR_HOSPITAL, -1, false, 8, 3, -2029.700683, -119.617759, 1035.171875, 0.0, 22, false, 0, 0,	1583.311401, 1768.952758, 10.820312, 90.0	, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Club", INTERIOR_CLUB, -1, false, 0, 3, 1212.160522, -26.097007, 1000.953125, 180.0, 21, false, 0, 0, 693.761047, 1967.498168, 5.539062, 180.0, 20, 8, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1}
};

 
enum enum_JAIL_POSITIONS
{
	jail_INT,
	Float:jail_X,
	Float:jail_Y,
	Float:jail_Z,
	Float:jail_ANGLE,
	jail_INTERIOR
};
new JAIL_POSITIONS[][enum_JAIL_POSITIONS] = 
{
	{INTERIOR_POLICE_LS, 265.070129, 77.518280, 1001.039062, 270.0, 6}, //jaills
	{INTERIOR_POLICE_SF, 215.681945, 110.177680, 999.015625, 0.0, 10}, //jailsf
	{INTERIOR_POLICE_LV, 197.925323, 174.997573, 1003.023437, 0.0, 3} //jaillv
};

enum BUY_PROPERTIES_SITES_INFO
{
	site_INTERIOR_TYPE,
	Float:site_X,
	Float:site_Y,
	Float:site_Z,
	site_WORLD,
	site_INTERIOR
};
new BUY_PROPERTIES_SITES[][BUY_PROPERTIES_SITES_INFO] =
{
	{INTERIOR_BANK_LS, 1396.613403, 1320.551635, 1501.090698, 5, 5},
	{INTERIOR_BANK_SF, 1116.351684, 1540.468750, 1451.827148, 10, 10},
	{INTERIOR_BANK_LV, 2681.990966, -615.470520, -71.658203, 15, 15}
};



enum
{
	PRODUCT_TYPE_NONE,
	PRODUCT_TYPE_FOOD,
	PRODUCT_TYPE_PHONE,
	PRODUCT_TYPE_GPS,
	PRODUCT_TYPE_MP3,
	PRODUCT_TYPE_PHONE_RESOLVER
};
enum Supermarket_Enum
{
	product_TYPE,
	product_NAME[24],
	product_PRICE,
	Float:product_HUNGRY,
	Float:product_THIRST,
	product_DRUNK
};
new Supermarket_Product_List[][Supermarket_Enum] =  
{
	{PRODUCT_TYPE_PHONE, "Teléfono", 350, 0.0, 0.0, 0},
	{PRODUCT_TYPE_PHONE_RESOLVER, "Guía telefónica", 200, 0.0, 0.0, 0},
	{PRODUCT_TYPE_GPS, "Localizador GPS", 300, 0.0, 0.0, 0},
	{PRODUCT_TYPE_MP3, "Reproductor MP3", 200, 0.0, 0.0, 0},
	{PRODUCT_TYPE_FOOD, "Botella de agua mineral", 80, 0.0, 25.0, 0},
	{PRODUCT_TYPE_FOOD, "Lata de refresco Sprunk", 40, 0.0, 12.0, 0},
	{PRODUCT_TYPE_FOOD, "Lata de refresco cola", 30, 0.0, 10.0, 0},
	{PRODUCT_TYPE_FOOD, "Barrita energética", 80, 15.0, 0.0, 0},
	{PRODUCT_TYPE_FOOD, "Porción de pizza", 60, 20.0, 0.0, 0},
	{PRODUCT_TYPE_FOOD, "Ensalada", 50, 15.0, 2.0, 0},
	{PRODUCT_TYPE_FOOD, "Sándwich", 45, 10.0, 2.0, 0},
	{PRODUCT_TYPE_FOOD, "Lata de cerveza", 40, 0.0, 3.0, 1000},
	{PRODUCT_TYPE_FOOD, "Vodka", 80, 0.0, 3.0, 2500},
	{PRODUCT_TYPE_FOOD, "Whisky", 200, 0.0, 3.0, 3000}
};


enum Clothing_Shop_Info
{
	clothing_shop_INTERIOR_TYPE,
	clothing_shop_NAME[24],
	Float:clothing_shop_X,
	Float:clothing_shop_Y,
	Float:clothing_shop_Z,
	Float:clothing_shop_ANGLE,
	clothing_shop_INTERIOR
};
new Clothing_Shop_Positions[][Clothing_Shop_Info] =  
{ 
	{INTERIOR_BINCO, "Binco", 207.733657, -100.633468, 1005.257812, 180.0, 15}, //Binco
	{INTERIOR_SUBURBAN, "SubUrban", 203.905395, -43.450450, 1001.804687, 180.0, 1}, //SubUrban
	{INTERIOR_PROLAPS, "ProLaps", 207.049148, -129.177581, 1003.507812, 180.0, 3}, //prolaps
	{INTERIOR_DIDIER_SACHS, "Didier Sachs", 204.348281, -159.493728, 1000.523437, 180.0, 14}, //Didier
	{INTERIOR_VICTIM, "Victim", 206.374328, -7.241514, 1001.210937, 270.0, 5}, //Victim
	{INTERIOR_ZIP, "ZIP", 161.443634, -83.589271, 1001.804687, 180.0, 18} //Zip
};


enum Fast_Food_Info
{
	fast_food_INTERIOR_TYPE,
	fast_food_NAME[24],
	Float:fast_food_X,
	Float:fast_food_Y,
	Float:fast_food_Z,
	fast_food_INTERIOR
};
new Fast_Food_Positions[][Fast_Food_Info] =
{
	{INTERIOR_BURGER_SHOT, "Burger Shot", 375.913238, -67.435272, 1001.507812, 10}, // BurgerShot
	{INTERIOR_PIZZA, "Well Stacked Pizza", 375.254730, -118.804710, 1001.499511, 5}, //Pizza
	{INTERIOR_CLUCKIN_BELL, "Cluckin Bell", 368.757904, -6.018908, 1001.851562, 9} //Cluckin Bell
};

enum fone_public_info
{
	atm_modelid,
	Float:atm_X,
	Float:atm_Y,
	Float:atm_Z,
	Float:atm_RX,
	Float:atm_RY,
	Float:atm_RZ,
	atm_WORLD,
	atm_INTERIOR
};
new FONE_PUBLICS[][fone_public_info] =
{
	{1363, 1829.00000, -1851.82996, 13.41000,   0.00000, 0.00000, 0.00000},
	{1363, 1802.16003, -1863.06006, 13.41000,   0.00000, 0.00000, 0.00000},
	{1363, 1775.76001, -1862.93005, 13.41000,   0.00000, 0.00000, 0.00000},
	{1363, 1759.46997, -1862.32996, 13.41000,   0.00000, 0.00000, 0.00000},
	{1363, 1463.68469, -1741.87927, 13.14198,   0.00000, 0.00000, 0.00000},
	{1363, 1451.31946, -1025.23792, 23.73974,   0.00000, 0.00000, 0.00000},
	{1363, 1211.65308, -1320.17712, 13.36682,   0.00000, 0.00000, 0.00000},
	{1363, 1584.81921, -1313.67944, 17.32330,   0.00000, 0.00000, 0.00000}
};
enum gps_gelp_info
{
	atm_modelid,
	Float:atm_X,
	Float:atm_Y,
	Float:atm_Z,
	Float:atm_RX,
	Float:atm_RY,
	Float:atm_RZ,
	atm_WORLD,
	atm_INTERIOR
};
new GPS_HELP[][gps_gelp_info] =
{
	{1444, 1829.06458, -1679.48926, 13.54690,   0.00000, 0.00000, -88.74001},
	{1444, 1934.27087, -1761.65796, 13.54690,   0.00000, 0.00000, -40.74000},
	{1444, 1832.55383, -1845.50586, 13.18170,   0.00000, 0.00000, -85.56002},
	{1444, 2047.20032, -1920.91223, 13.54690,   0.00000, 0.00000, 90.77998},
	{1444, 1738.11914, -1862.80811, 13.57580,   0.00000, 0.00000, 0.00000},
	{1444, 1544.65027, -1681.00806, 13.55880,   0.00000, 0.00000, -46.74000},
	{1444, 1355.60242, -1739.53064, 13.54690,   0.00000, 0.00000, 0.00000},
	{1444, 1205.83118, -1842.73230, 13.54320,   0.00000, 0.00000, 0.00000},
	{1444, 844.46057, -2059.82544, 12.86720,   0.00000, 0.00000, 0.00000},
	{1444, 805.96558, -1387.75488, 13.56020,   0.00000, 0.00000, -33.24000},
	{1444, 562.78448, -1250.29272, 17.25990,   0.00000, 0.00000, 0.00000},
	{1444, 981.88000, -1157.62000, 23.86000,   0.00000, 0.00000, 0.00000},
	{1444, 1185.37952, -1339.45801, 13.57420,   0.00000, 0.00000, -94.92000},
	{1444, 1195.76160, -919.63928, 43.15440,   0.00000, 0.00000, 0.00000},
	{1444, 1309.53369, -912.69019, 38.67410,   0.00000, 0.00000, 0.00000},
	{1444, 1756.70984, -1147.42981, 23.93360,   0.00000, 0.00000, 0.00000},
	{1444, 1593.89624, -1321.86316, 17.31230,   0.00000, 0.00000, 0.00000}
};
enum atm_bank_info
{
	atm_modelid,
	Float:atm_X,
	Float:atm_Y,
	Float:atm_Z,
	Float:atm_RX,
	Float:atm_RY,
	Float:atm_RZ,
	atm_WORLD,
	atm_INTERIOR
};
new ATM_BANK[][atm_bank_info] =
{
	{2754, 2833.38672, 2402.91553, 10.93546,   0.00000, 0.00000, 131.44171},
	{2754, 2088.78442, 1510.00574, 10.69234,   0.00000, 0.00000, 45.39682},
	{2754, 1662.92346, 1723.03162, 10.53258,   0.00000, 0.00000, 90.27153},
	{2754, -16.17070, 1219.33813, 19.17369,   0.00000, 0.00000, 179.53238},
	{2754, -1505.91687, 2612.09058, 55.63910,   0.00000, 0.00000, 178.85609},
	{2754, -2540.67188, 2340.96143, 4.79166,   0.00000, 0.00000, 90.97625},
	{2754, -1690.23547, 1327.11902, 7.04427,   0.00000, 0.00000, 43.44909},
	{2754, -1980.48608, 155.24883, 27.49554,   0.00000, 0.00000, 359.06995},
	{2754, -2631.60693, -6.86652, 5.97444,   0.00000, 0.00000, 181.99303},
	{2754, -2146.54395, -2332.90283, 30.43888,   0.00000, 0.00000, 232.48808},
	{2754, 574.90155, -1419.96509, 14.22211,   0.00000, 0.00000, 283.89526},
	{2754, 1227.24524, -1428.54846, 13.29063,   0.00000, 0.00000, 269.20294},
	{2754, 1810.57153, -1873.97852, 13.38759,   0.00000, 0.00000, 180.44339},
	{2754, 1493.07471, -1022.08618, 23.63997,   0.00000, 0.00000, 91.19178},
	{2754, 2330.78149, 81.79469, 26.33336,   0.00000, 0.00000, 269.20883},
	{2754, 711.71503, -542.69287, 16.04271,   0.00000, 0.00000, 180.17184},
	{2754, 242.68755, -54.72442, 1.31352,   0.00000, 0.00000, 0.00000},
	{2754, 1381.12219, 233.81693, 19.28907,   0.00000, 0.00000, 154.79193}
};

#define MAX_BANK_TRANSACTIONS_DIALOG	20
enum
{
	BANK_TRANSACTION_WITHDRAW,
	BANK_TRANSACTION_DEPOSIT,
	BANK_TRANSACTION_TRANSFER_SENT,
	BANK_TRANSACTION_TRANSFER_RECE,
	BANK_TRANSACTION_CREATE_ACCOUNT,
	BANK_TRANSACTION_BUY_PROPERTY,
	BANK_TRANSACTION_SOLD_PROPERTY,
	BANK_TRANSACTION_BUY_VEHICLE,
	BANK_TRANSACTION_SOLD_VEHICLE
};
enum Bank_Interior_Info
{
	bank_INTERIOR_TYPE,
	Float:bank_X,
	Float:bank_Y,
	Float:bank_Z,
	bank_WORLD,
	bank_INTERIOR
};
new Bank_Interior_Positions[][Bank_Interior_Info] =
{
	{INTERIOR_BANK_LS, 1407.356201, 1320.171142, 1501.083984, 5, 5},
	{INTERIOR_BANK_SF, 1105.033935, 1529.565795, 1452.480957, 10, 10},
	{INTERIOR_BANK_LV, 2690.869628, -610.943664, -71.658203, 15, 15}
};

enum Food_Info
{
	food_NAME[24],
	food_PRICE,
	Float:food_HUNGRY,
	Float:food_THIRST,
};
new PIZZA_FOOD[][Food_Info] =
{
	{"Pizza de verduras", 25, 10.0, -0.1},
	{"Pizza de jamón y queso", 60, 16.0, -0.1},
	{"Pizza barbacoa", 40, 15.0, -0.1},
	{"Pizza 4 quesos", 55, 14.0, -0.1},
	{"Ensalada", 20, 10.0, 5.0},
	{"Refresco de Sprunk", 30, 0.0, 12.0},
	{"Refresco de Cola", 50, 0.0, 13.5},
	{"Agua mineral", 30, 0.0, 19.0}
};
new BURGER_SHOT_FOOD[][Food_Info] =
{
	{"Hamburguesa de ternera", 60, 16.0, -0.1},
	{"Hamburguesa de pollo", 80, 10.0, -0.1},
	{"Hamburguesa especial", 60, 12.0, -3.0},
	{"Ensalada", 20, 10.0, 5.0},
	{"Refresco de Sprunk", 30, 0.0, 12.0},
	{"Refresco de Cola", 50, 0.0, 13.5},
	{"Agua mineral", 30, 0.0, 19.0}
};
new CLUCKIN_BELL_FOOD[][Food_Info] =
{
	{"Alitas de pollo", 60, 16.0, -0.1},
	{"Plato especial", 80, 18.0, -2.0},
	{"Ensalada", 20, 10.0, 5.0},
	{"Refresco de Sprunk", 30, 0.0, 12.0},
	{"Refresco de Cola", 50, 0.0, 13.5},
	{"Agua mineral", 30, 0.0, 19.0}
};


enum Player_Toys_Info
{
	player_toy_VALID,
	
	player_toy_ID,
	player_toy_NAME[24],
	player_toy_ATTACHED,
	player_toy_MODELID,
	player_toy_BONE,
	Float:player_toy_OFFSET_X,
	Float:player_toy_OFFSET_Y,
	Float:player_toy_OFFSET_Z,
	Float:player_toy_ROT_X,
	Float:player_toy_ROT_Y,
	Float:player_toy_ROT_Z,
	Float:player_toy_SCALE_X,
	Float:player_toy_SCALE_Y,
	Float:player_toy_SCALE_Z,
	player_toy_COLOR_1,
	player_toy_COLOR_2
};
new PLAYER_TOYS[MAX_PLAYERS][MAX_PLAYER_ATTACHED_OBJECTS][Player_Toys_Info]; //PTOYS = PlayerToys

new Toys_Bones[][24] = 
{
	{"Espalda"},
	{"Cabeza"},
	{"Brazo izquierdo"},
	{"Brazo derecho"},
	{"Mano izquierda"},
	{"Mano derecha"},
	{"Muslo izquierdo"},
	{"Muslo derecho"},
	{"Pie izquierdo"},
	{"Pie derecho"},
	{"Pantorrilla derecha"},
	{"Pantorrilla izquierda"},
	{"Antebrazo izquierdo"},
	{"Antebrazo derecho"},
	{"Hombro izquierdo"},
	{"Hombro derecho"},
	{"Cuello"},
	{"Boca"}
};

enum Toys_Info
{
	shop_toy_model[24],
	shop_toy_modelid,
	shop_toy_price_base,
	shop_toy_price,
}
new Toys_Shop[][Toys_Info] =
{
	{"motorcyclehelmet2", 18976, 2000, 0},
	{"motorcyclehelmet3", 18977, 500, 0},
	{"motorcyclehelmet4", 18978, 500, 0},
	{"motorcyclehelmet5", 18979, 500, 0},
	{"sillyhelmet2", 19114, 100, 0},
	{"sillyhelmet3", 19115, 200, 0},
	{"plainhelmet1", 19116, 75, 0},
	{"plainhelmet2", 19117, 75, 0},
	{"plainhelmet3", 19118, 75, 0},
	{"plainhelmet4", 19119, 75, 0},
	{"plainhelmet5", 19120, 75, 0},
	{"glassestype1", 19006, 2000, 0},
	{"glassestype2", 19007, 2000, 0},
	{"glassestype3", 19008, 2000, 0},
	{"glassestype4", 19009, 2000, 0},
	{"glassestype5", 19010, 2000, 0},
	{"glassestype6", 19011, 2000, 0},
	{"glassestype7", 19012, 2000, 0},
	{"glassestype8", 19013, 2000, 0},
	{"glassestype9", 19014, 2000, 0},
	{"glassestype10", 19015, 2000, 0},
	{"glassestype11", 19016, 2000, 0},
	{"glassestype12", 19017, 2000, 0},
	{"glassestype13", 19018, 2000, 0},
	{"glassestype14", 19019, 2000, 0},
	{"glassestype15", 19020, 2000, 0},
	{"glassestype16", 19021, 2000, 0},
	{"glassestype17", 19022, 2000, 0},
	{"glassestype18", 19023, 2000, 0},
	{"glassestype19", 19024, 2000, 0},
	{"glassestype20", 19025, 2000, 0},
	{"glassestype21", 19026, 2000, 0},
	{"glassestype22", 19027, 2000, 0},
	{"glassestype23", 19028, 2000, 0},
	{"glassestype24", 19029, 2000, 0},
	{"glassestype25", 19030, 2000, 0},
	{"glassestype26", 19031, 2000, 0},
	{"glassestype27", 19032, 2000, 0},
	{"glassestype28", 19033, 2000, 0},
	{"glassestype29", 19034, 2000, 0},
	{"glassestype30", 19035, 2000, 0},
	{"policeglasses1", 19138, 2300, 0},
	{"policeglasses2", 19139, 2300, 0},
	{"policeglasses3", 19140, 2300, 0},
	{"bandana1", 18891, 600, 0},	
	{"bandana2", 18892, 600, 0},
	{"bandana3", 18893, 600, 0},
	{"bandana4", 18894, 600, 0},
	{"bandana5", 18895, 600, 0},
	{"bandana6", 18896, 600, 0},
	{"bandana7", 18897, 600, 0},
	{"bandana8", 18898, 600, 0},
	{"bandana9", 18899, 600, 0},
	{"bandana10", 18900, 600, 0},
	{"bandana11", 18901, 600, 0},
	{"bandana12", 18902, 600, 0},
	{"bandana13", 18903, 600, 0},
	{"bandana14", 18904, 600, 0},
	{"bandana15", 18905, 600, 0},
	{"bandana16", 18906, 600, 0},
	{"bandana17", 18907, 600, 0},
	{"bandana18", 18908, 600, 0},
	{"bandana19", 18909, 600, 0},
	{"bandana20", 18910, 600, 0},
	{"mask1", 18911, 500, 0},
	{"mask2", 18912, 500, 0},
	{"mask3", 18913, 500, 0},
	{"mask4", 18914, 500, 0},
	{"mask5", 18915, 500, 0},
	{"mask6", 18916, 500, 0},
	{"mask7", 18917, 500, 0},
	{"mask8", 18918, 500, 0},
	{"mask9", 18919, 500, 0},
	{"mask10", 18920, 500, 0},
	{"watchtype1", 19039, 3000, 0},
	{"watchtype2", 19040, 3000, 0},
	{"watchtype3", 19041, 3000, 0},
	{"watchtype4", 19042, 3000, 0},
	{"watchtype5", 19043, 3000, 0},
	{"watchtype6", 19044, 3000, 0},
	{"watchtype7", 19045, 3000, 0},
	{"watchtype8", 19046, 3000, 0},
	{"watchtype9", 19047, 3000, 0},
	{"watchtype10", 19048, 3000, 0},
	{"watchtype11", 19049, 3000, 0},
	{"watchtype12", 19050, 3000, 0},
	{"watchtype13", 19051, 3000, 0},
	{"watchtype14", 19052, 3000, 0},
	{"watchtype15", 19053, 3000, 0},
	{"beret1", 18921, 1150, 0},
	{"beret2", 18922, 1150, 0},
	{"beret3", 18923, 1150, 0},
	{"beret4", 18924, 1150, 0},
	{"beret5", 18925, 1150, 0},
	{"cj_tommy_hat", 2052, 200, 0},
	{"cj_jerry_hat", 2053, 200, 0},
	{"cj_capt_hat", 2054, 2000, 0},
	{"hardhat1", 18638, 300, 0},
	{"hardhat2", 19093, 450, 0},
	{"hardhat3", 19160, 450, 0},
	{"blackhat1", 18639, 600, 0},
	{"hat1", 18926, 650, 0},
	{"hat2", 18927, 650, 0},
	{"hat3", 18928, 650, 0},
	{"hat4", 18929, 650, 0},
	{"hat5", 18930, 650, 0},
	{"hat6", 18931, 650, 0},
	{"hat7", 18932, 650, 0},
	{"hat8", 18933, 650, 0},
	{"hat9", 18934, 650, 0},
	{"hat10", 18935, 650, 0},
	{"hatboater1", 18944, 800, 0},
	{"hatboater2", 18945, 800, 0},
	{"hatboater3", 18946, 800, 0},
	{"hatbowler1", 18947, 1200, 0},
	{"hatbowler2", 18948, 1200, 0},
	{"hatbowler3", 18949, 1200, 0},
	{"hatbowler4", 18950, 1200, 0},
	{"hatbowler5", 18951, 1200, 0},
	{"hatbowler6", 19488, 1200, 0},
	{"cowboyhat1", 19095, 1150, 0},
	{"cowboyhat2", 18962, 1150, 0},
	{"cowboyhat3", 19096, 1150, 0},
	{"cowboyhat4", 19097, 1150, 0},
	{"cowboyhat5", 19098, 1150, 0},
	{"hatman1", 18967, 650, 0},
	{"hatman2", 18968, 650, 0},
	{"hatman3", 18969, 650, 0},
	{"hatman3", 18969, 650, 0},
	{"hattiger1", 18970, 1500, 0},
	{"hatcool1", 18971, 1500, 0},
	{"hatcool2", 18972, 1500, 0},
	{"hatcool3", 18973, 1500, 0},
	{"santahat1", 19064, 100, 0},
	{"santahat2", 19065, 100, 0},
	{"santahat3", 19066, 100, 0},
	{"hoodyhat1", 19067, 500, 0},
	{"hoodyhat2", 19068, 500, 0},
	{"hoodyhat3", 19069, 500, 0},
	{"policehat1", 19161, 2500, 0},
	{"policehat2", 19162, 2500, 0},
	{"tophat01", 19352, 700, 0},
	{"tophat02", 19487, 700, 0},
	{"pilothat01", 19520, 3000, 0},
	{"policehat01", 19521, 3000, 0},
	{"witcheshat1", 19528, 150, 0},
	{"strawhat1", 19553, 450, 0},
	{"pizzahat1", 19558, 100, 0},
	{"hikerbackpack1", 19559, 600, 0},
	{"hair1", 19517, 1000, 0},
    {"hair2", 19516, 1000, 0},
    {"hair3", 19077, 1000, 0},
    {"hair4", 18975, 1000, 0},
    {"cluckinbellhat", 19137, 2500, 0},
    {"firehat01", 19330, 3000, 0},
    {"firehat02", 19331, 3000, 0},
    {"burgershothat1", 19094, 2000, 0},
    {"captruker1", 18961, 1000, 0},
    {"bassguitar01", 19317, 2100, 0},
    {"bassguitar02", 19318, 2100, 0},
    {"boxinghelmet01", 18952, 1500, 0},
    {"hockeymas1", 19036, 1700, 0},
    {"theparrot1", 19078, 7500, 0},
    {"armour", 19515, 7000, 0},
    {"bdupsmask1", 11704, 3500, 0},
    {"glimpmask1", 19163, 2500, 0},
    {"headphones02", 19422, 1500, 0},
    {"parachute", 371, 2200, 0}
};

new 
Binco_Shop_Male_Skins[][] =  
{
	/* BINCO - HOMBRE */
	{4, 75      , 0},
	{5, 75      , 0},
	{6, 90      , 0},
	{7, 80      , 0},
	{21, 121    , 0},
	{44, 65     , 0},
	{47, 119    , 0},
	{101, 149   , 0},
	{127, 89    , 0},
	{128, 25    , 0},
	{134, 25    , 0},
	{135, 25    , 0},
	{137, 19    , 0},
	{160, 55    , 0},
	{161, 68    , 0},
	{168, 39    , 0},
	{176, 79    , 0},
	{177, 65    , 0},
	{179, 110   , 0},
	{184, 150   , 0},
	{188, 160   , 0},
	{200, 15    , 0},
	{212, 30    , 0},
	{230, 10    , 0},
	{258, 69    , 0},
	{259, 69    , 0},
	{262, 50	, 0},
	{86, 70		, 0},
	{102, 100	, 0},
	{103, 100	, 0},
	{104, 100	, 0},
	{105, 100	, 0},
	{106, 100	, 0},
	{107, 100	, 0},
	{108, 100	, 0},
	{109, 100	, 0},
	{110, 100	, 0},
	{111, 100	, 0},
	{112, 100	, 0},
	{113, 100	, 0},
	{114, 100	, 0},
	{115, 100	, 0},
	{116, 100	, 0},
	{117, 100	, 0},
	{118, 100	, 0},
	{119, 100	, 0},
	{120, 100	, 0},
	{121, 100	, 0},
	{122, 100	, 0},
	{123, 100	, 0},
	{124, 100	, 0},
	{125, 100	, 0},
	{126, 100	, 0}
},

Binco_Shop_Female_Skins[][] =  
{
	/* BINCO - MUJER */
	{13, 120   , 0},
	{41, 59    , 0},
	{56, 190   , 0},
	{65, 110   , 0},
	{69, 100   , 0},
	{75, 50    , 0},
	{89, 69    , 0},
	{151, 89   , 0},
	{152, 3000 , 0},
	{207, 500  , 0},
	{226, 120  , 0},
	{298, 900  , 0}
},

Suburban_Shop_Male_Skins[][] =  
{
	/* SUBURBAN - HOMBRE */
	{2, 100   , 0},
	{3, 140   , 0},
	{20, 190  , 0},
	{43, 180  , 0},
	{48, 145  , 0},
	{60, 250  , 0},
	{100, 300 , 0},
	{112, 200 , 0},
	{119, 49  , 0},
	{143, 199 , 0},
	{180, 150 , 0},
	{183, 100 , 0},
	{184, 140 , 0},
	{241, 200 , 0},
	{242, 190 , 0},
	{247, 450 , 0},
	{248, 499 , 0},
	{249, 650 , 0},
	{264, 5   , 0}
},

Suburban_Shop_Female_Skins[][] =  
{
	/* SUBURBAN - MUJER */
	{39, 109  , 0},
	{56, 100  , 0},
	{88, 140  , 0},
	{131, 200 , 0},
	{195, 199 , 0}
},

Prolaps_Shop_Male_Skins[][] =  
{
	/* PROLAPS - HOMBRE */
	{29, 129  , 0},
	{36, 140  , 0},
	{37, 150  , 0},
	{51, 160  , 0},
	{52, 170  , 0},
	{96, 200  , 0},
	{99, 700  , 0},
	{206, 499 , 0},
	{154, 199 , 0}
},

Prolaps_Shop_Female_Skins[][] =  
{
	/* PROLAPS - MUJER */
	{41, 199 , 0},
	{90, 250 , 0},
	{92, 860 , 0},
	{138, 150, 0},
	{139, 150, 0},
	{140, 159, 0},
	{190, 150, 0},
	{192, 180, 0},
	{193, 195, 0}
},

Didier_Shop_Male_Skins[][] =  
{
	/* DIDIER - HOMBRE */
	{17, 1500  , 0},
	{46, 1900  , 0},
	{57, 1220  , 0},
	{82, 3400  , 0},
	{83, 3400  , 0},
	{84, 3400  , 0},
	{124, 3500 , 0},
	{147, 6000 , 0},
	{163, 3000 , 0},
	{166, 3000 , 0},
	{171, 4000 , 0},
	{187, 4500 , 0},
	{223, 3100 , 0},
	{240, 1500 , 0},
	{295, 3000 , 0}
},

Didier_Shop_Female_Skins[][] =  
{
	/* DIDIER - MUJER */
	{11, 1500  , 0},
	{12, 3000  , 0},
	{40, 2500  , 0},
	{91, 8000  , 0},
	{141, 3500 , 0},
	{169, 4000 , 0},
	{172, 2100 , 0},
	{194, 2000 , 0},
	{214, 25000, 0},
	{215, 3200 , 0},
	{216, 10500, 0},
	{219, 9500 , 0}
},

Victim_Shop_Male_Skins[][] =  
{
	/* VICTIM - HOMBRE */
	{19, 400   , 0},
	{46, 1200  , 0},
	{59, 900   , 0},
	{72, 599   , 0},
	{73, 699   , 0},
	{98, 339   , 0},
	{121, 200  , 0},
	{170, 500  , 0},
	{185, 400  , 0},
	{186, 900  , 0},
	{188, 350  , 0},
	{221, 700  , 0},
	{223, 1200 , 0},
	{250, 50000, 0},
	{289, 699  , 0},
	{299, 700  , 0},
	{303, 500  , 0},
	{304, 700  , 0}
},

Victim_Shop_Female_Skins[][] =  
{
	/* VICTIM - MUJER */
	{12, 2900  , 0},
	{40, 3000  , 0},
	{55, 1010  , 0},
	{56, 400   , 0},
	{192, 3000 , 0},
	{211, 3500 , 0},
	{226, 600  , 0},
	{233, 900  , 0}
},

Zip_Shop_Male_Skins[][] =  
{
	/* ZIP - HOMBRE */
	{121, 190  , 0},
	{170, 500  , 0},
	{185, 400  , 0},
	{186, 900  , 0},
	{19, 400   , 0},
	{46, 1200  , 0},
	{59, 905   , 0},
	{72, 400   , 0},
	{73, 650   , 0},
	{98, 320   , 0},
	{250, 49999, 0},
	{289, 622  , 0},
	{299, 730  , 0},
	{303, 550  , 0},
	{188, 350  , 0},
	{221, 700  , 0},
	{223, 1200 , 0},
	{304, 700  , 0}
},

Zip_Shop_Female_Skins[][] =  
{
	/* ZIP - MUJER */
	{56, 405    , 0},
	{192, 3010  , 0},
	{211, 3520  , 0},
	{226, 620   , 0},
	{233, 950   , 0},
	{12, 2904   , 0},
	{40, 3002   , 0},
	{55, 1011   , 0}
};

enum
{
	PICKUP_TYPE_NONE,
	PICKUP_TYPE_ENTER_EXIT,
	PICKUP_TYPE_ATM,
	PICKUP_TYPE_PROPERTY
};


new Intro_Skins[][] =
{
	{ // HOMBRE 	
		170,
		158,
		184,
		220,
		183,
		73
	},
	
	{ // MUJER
		192,
		40, 
		226,
		41, 
		13, 
		298,
	}
};

new Intro_Music[][] =
{
	"https://www.cjoint.com/doc/22_11/LKxv2Lu6tVI_audio-intro.mp3"
};


new Float:Fuel_Stations[][] =
{
	{1942.679443, -1771.374511, 13.390598},
	{654.678710, -570.627807, 16.335937},
	{1384.011962, 457.825012, 19.995258},
	{-1669.027221, 411.541076, 7.179687},
	{-2409.644042, 976.147644, 45.307708},
	{-1328.633666, 2675.913818, 50.062500},
	{612.890563, 1692.938720, 6.992187},
	{-1607.715820, -2717.499023, 48.539062},
	{2146.831542, 2743.855224, 10.820312},
	{2197.993408, 2475.015625, 10.820312},
	{2115.124267, 926.094909, 10.960937},
	{1595.974731, 2193.016845, 10.820312},
	{-1477.559326, 1858.962524, 32.639846},
	{-100.281738, -1178.148193, 2.940625}
};

new Float:Hospital_Spawn_Positions[][] =  
{ 
	{2034.197875, -1403.040039, 17.294845, 180.0},
	{1172.832763, -1323.269531, 15.400051, 270.0},
	{1242.235595, 328.113281, 19.755510, 0.0},
	{-2201.566162, -2307.610839, 30.625000, 320.0},
	{-2655.108886, 639.278625, 14.453125, 180.0},
	{-318.812774, 1050.359130, 20.340259, 0.0},
	{-1514.855590, 2520.366699, 55.909828, 0.0},
	{1583.311401, 1768.952758, 10.820312, 90.0}
};

new Float:Hospital_Cameras_Positions[][] =
{
	{2007.3301, -1442.3809, 26.7332, 2008.0043, -1441.6445, 26.4982},
	{1209.2427, -1314.4705, 23.4945, 1208.5284, -1315.1681, 23.3195},
	{1260.2025, 342.6251, 22.3913, 1259.4681, 341.9478, 22.2512},
	{-2200.5859, -2316.3057, 31.7932, -2200.8340, -2315.3367, 31.6932},
	{-2530.8450, 568.0942, 29.4603, -2531.6973, 568.6146, 29.4553},
	{-305.5014, 1068.6696, 24.2657, -306.1943, 1067.9514, 24.0607},
	{-1504.2892, 2553.1243, 61.1113, -1504.5568, 2552.1619, 60.8414},
	{1624.5881, 1837.4691, 12.5740, 1623.9382, 1836.7124, 12.4690}
};


// CONCEPTOS	
enum RuleInfo
{
	Rule_Title[64],
	Rule_Info[512],
	Rule_Pages
};
new Server_Rules[][RuleInfo] =
{
	{
		"RolePlay_(RP)", 
			"Un_modo_de_juego_donde_vamos_a_crear_nuestro~n~\
			propio_personaje,_y_hacernos_un_hueco_en_el~n~\
			juego,_donde_serás_conocido_por_tus_acciones,~n~\
			mentalidad,_forma_de_actuar_y_mucho_más.~n~\
			~n~\
			Teniendo_esto_en_cuenta,_vamos_a_explicarte~n~\
			los_conceptos_básicos_de_"SERVER_NAME".", 7
	},
	{
		"PowerGaming_(PG)",
			"Se_conoce_como_realizar_acciones_que_son~n~\
			imposibles_de_realizar_en_la_vida_real.~n~\
			~n~\
			Un_ejemplo_de_PowerGaming_podría_sería_empujar~n~\
			un_camion_siendo_una_sola_persona.", 5
	},
	{
		"DeathMatch_(DM)_y_FreeKill_(FK)",
			"Consiste_en_realizar_daño_a_otro_jugador~n~\
			sin_razones_que_justifiquen_la_agresión.~n~\
			~n~\
			Realizar_DM_a_un_gran_número_de_jugadores_se~n~\
			conoce_como_FreeKill_(FK).~n~\
			~n~\
			"SERVER_NAME"_no_es_el_sitio_para_realizar~n~\
			DM.", 8
	},
    {
		"InCharacter(IC)_y_OutOfCharacter(OOC)",
			"IC_es_la_información_o_charla_obtenida~n~\
			por_el_personaje_dentro_del_juego.~n~\
			~n~\
			OOC_es_la_información_obtenida_fuera_del_juego~n~\
			o_por_canales_OOC_del_servidor.~n~", 5
	},
	{
		"MetaGaming(MG)",
			"Éste_término_aplica_al_obtener_información_de~n~\
			un_medio_Out_of_Channel_para_beneficiarse_de.~n~\
			ella_de_manera_InCharacter.~n~\
			~n~\
			Además_se_considera_MG_gran_al_uso_de_información~n~\
			obtenida_de_modo_Out_of_Channel.", 6
	},
    {
		"CarJack(CJ)_e_InsultosOOC(IOOC)",
			"CJ_hace_referencia_a_robar_vehículos_sin~n~\
			rol_previo.~n~\
			~n~\
			IOOC_es_insultar_a_un_usuario_por_canales~n~\
			OOC_del_servidor. Ésto_está_totalmente~n~\
			prohíbido.", 6
	},
    {
		"Spam_y_Flood",
			"Spam_es_mencionar_una_comunidad_externa_a~n~\
			"SERVER_NAME"_o_un_programa_que_de_ventajas_ante~n~\
			otros_usuarios.~n~\
			~n~\
			Flood_hace_referencia_a_mandar_el_mismo_texto~n~\
			repetidas_veces.", 6
	},
    {
		""SERVER_NAME"",
			"Para_más_conceptos_para_así_no_tener_problemas~n~\
			en_un_futuro_te_recomendamos_visitar_en_nuestro~n~\
			foro_(www.sa-mp.com)_la_sección_guías.~n~\
			ahí_te_informas_todo_al_respecto_del_GM_y_las~n~\
			reglas.", 5
	}	
};

/* TEXTDRAWS */
#define MAX_PLAYER_MAP_GPS_POINTS 20
enum Player_Textdraws_Enum
{
	PlayerText:textdraw_login[19],
	PlayerText:ptextdraw_GUIDE[5],
	PlayerText:ptextdraw_HOSPITAL[3], //Barra recuperando vida despues de morir
	PlayerText:ptextdraw_CLOTHING_SHOP[6], //Tiendas de ropas
	PlayerText:ptextdraw_REGISTER_SKIN[10],
	PlayerText:ptextdraw_TOYS_SHOP[10],
	PlayerText:ptextdraw_PROPERTY_CONSTRUCTOR[6],
	PlayerText:ptextdraw_SPEEDO_METER[19],
	PlayerText:ptextdraw_TAXI_METER[2],
	PlayerText:ptextdraw_TRUCK_LOAD[4],
	PlayerText:ptextdraw_RECYCLE_TRASH[3],
	PlayerText:ptextdraw_PLANT_PLANT[4],
	PlayerText:ptextdraw_PLAYER_GPS_MAP[MAX_PLAYER_MAP_GPS_POINTS],
	PlayerText:ptextdraw_SHOP_BUTTONS[5],
	PlayerText:ptextdraw_SHOP_ARTICLES_PAGE,
	PlayerText:ptextdraw_SHOP_ARTICLES_MODEL[6],
	PlayerText:ptextdraw_SHOP_ARTICLES_PRICE[6],
	PlayerText:ptextdraw_SHOP_ARTICLE_NUMBER,
	PlayerText:ptextdraw_SHOP_ARTICLE_INFO,
	PlayerText:ptextdraw_SHOP_ARTICLE_MODELID,
	PlayerText:ptextdraw_TUNING_SHOP,
	PlayerText:ptextdraw_MESSAGE,
	PlayerText:ptextdraw_HUD[5],
	PlayerText:texdrawsbarras[15],
	PlayerText:textdraw_ayuda[4],
	PlayerText:textdraw_encendido,
	PlayerText:textdraw_gps,
	PlayerText:textdraw_statusproducto[4],
	PlayerText:textdraw_comprarvehiculoconce[25],
	PlayerText:Textdrawtutorial,
	PlayerText:Textdraw_Vehicle_Rent[7],
	PlayerText:Textdraws_Ammu_Nation[29],
	PlayerText:Textdraws_Ammu_Skins[19],
	PlayerText:textdraws_nivel_trabajo[5],
	PlayerText:textdraw_taller[5],
	PlayerText:textdraw_estrellas_buscado[6],
	PlayerText:textdraw_menu[9],
	PlayerText:textdraw_enciendomoto[4],
	PlayerText:textdraw_pesca[6],
 
};
new PlayerTextdraws[MAX_PLAYERS][Player_Textdraws_Enum];
 
#define map_td_X 3.0
#define map_td_Y 134.0
#define map_td_SIZE_X 175.0
#define map_td_SIZE_Y 190.0

enum Textdraws_Enum
{
	Text:textdraw_PLAYER_REP_BACK[2],
	Text:textdraw_LOAD_SCREEN[5],
	Text:textdraw_SERVER_TIME,
	Text:textdraw_GPS_MAP[3],
	Text:textdraw_SHOP[5],
	Text:textdraw_SHOP_ARTICLES_BOX[6],
	Text:textdraw_SHOP_ARTICLE_BOX,
	Text:textdraw_TERRITORY_BOX,
	Text:textdraw_SHOP_TUNING[5],
	Text:textdraw_HUD[11],
	Text:TextdrawFechaGlobal,
	Text:textdraw_grafiti,
	Text:textdraw_actualizaciones[19],
	Text:textdraw_login_imagine[13]
};
new Textdraws[Textdraws_Enum];


/*enum
{
	ACCOUNT_STATE_NORMAL,
	ACCOUNT_STATE_BANNED,
	ACCOUNT_STATE_TEMPBAN
};*/

#define MIN_PASS_LENGTH	6
#define MAX_PASS_LENGTH	18

enum Account_Enum
{
	ac_ID,
	ac_IP[16],
	ac_NAME[24],
	ac_EMAIL[32],
	ac_PASS[64 + 1],
	ac_SALT[16],
	ac_LAST_CONNECTION[256],
	ac_TIME_PLAYING,
	ac_LEVEL,
	ac_REP,
	ac_STATE,
	reg_DATE[24], //Fecha de registro de la tabla REGISTRO
	ac_DOUBT_CHANNEL,
	ac_TIME_FOR_REP, // En MS
	ac_ADMIN_LEVEL,
	ac_PAYDAY_REP,
	ac_SU,
	ac_SU_EXPIRE_DATE[24],
	ac_SD,
	ac_CARGOS,
	ac_ASESINATOS
};
new ACCOUNT_INFO[MAX_PLAYERS][Account_Enum]; // AI (AccountInfo)



enum Character_Enum
{
	ch_SKIN,
	ch_CASH,
	Float:ch_POS[3],
	Float:ch_ANGLE,
	ch_STATE,
	ch_INTERIOR,
	ch_INTERIOR_EXTRA,
	ch_FIGHT_STYLE,
	Float:ch_HEALTH,
	Float:ch_ARMOUR,
	ch_SEX,
	Float:ch_HUNGRY,
	Float:ch_THIRST,
	ch_BLACK_MARKET_LEVEL,
	ch_POLICE_JAIL_TIME,
	ch_POLICE_JAIL_ID, //interior
	Float:CANSANCIO,
	ac_FACCION,ac_FACCIONLIDER
};
new CHARACTER_INFO[MAX_PLAYERS][Character_Enum]; // CI (CharacterInfo)

enum Bank_Account_Enum
{
	bank_account_ID,
	bank_account_BALANCE
};
new BANK_ACCOUNT[MAX_PLAYERS][Bank_Account_Enum]; //BA (BankAccount)


#define MAX_PLAYER_POCKET_OBJECTS 10
enum Player_Pocket_Enum
{
	bool:player_pocket_VALID,
	player_pocket_object_ID,
	player_pocket_object_NAME[24],
	Float:player_pocket_object_HUNGRY,
	Float:player_pocket_object_THIRST,
	player_pocket_object_DRUNK
};
new PLAYER_POCKET[MAX_PLAYERS][MAX_PLAYER_POCKET_OBJECTS][Player_Pocket_Enum]; // PP (PlayerPocket)


new 
	DIALOG_FOOD_PIZZA_String[800],
	DIALOG_FOOD_CLUCKIN_String[800],
	DIALOG_FOOD_BURGER_String[800],
	DIALOG_247_LIST_String[34 + 55 * sizeof Supermarket_Product_List],
	DIALOG_ANIMS_String[1000],
	DIALOG_PLAYER_GPS_SITE_0_String[90 * (sizeof(Hospital_Spawn_Positions) + 1)],
	DIALOG_PLAYER_GPS_SITE_7_String[90 * (sizeof(SELL_VEHICLES_SHOPS_SPAWN) + 1)],
	DIALOG_CREATE_CREW_COLOR_String[4200];


#define HidePlayerDialog(%1)		ShowPlayerDialog(%1, -1, 0, " ", " ", " ", " ")


// PLAYER WEAPONS
#define NO_WEAPON 0
enum enum_WEAPON_INFO
{
	bool:weapon_info_ANTI_CHEAT,
	bool:weapon_info_AMMO,
	weapon_info_TYPE,
	weapon_info_NAME[32],
	weapon_info_SLOT,
	weapon_info_SHOT_TIME
};
new WEAPON_INFO[][enum_WEAPON_INFO] = 
{
	{false, false, NO_WEAPON, "Puño", 0, 250},
	{true, false, WEAPON_BRASSKNUCKLE, "Manopla", 0, 250},
	{true, false, WEAPON_GOLFCLUB, "Palo de golf", 1, 250},
	{true, false, WEAPON_NITESTICK, "Porra", 1, 250},
	{true, false, WEAPON_KNIFE, "Cuchillo", 1, 250},
	{true, false, WEAPON_BAT, "Bate", 1, 250},
	{true, false, WEAPON_SHOVEL, "Pala", 1, 250},
	{true, false, WEAPON_POOLSTICK, "Taco", 1, 250},
	{true, false, WEAPON_KATANA, "Katana", 1, 250},
	{true, false, WEAPON_CHAINSAW, "Motosierra", 1, 30},
	{true, false, WEAPON_DILDO, "Dildo morado", 10, 250},
	{true, false, WEAPON_DILDO2, "Dildo", 10, 250},
	{true, false, WEAPON_VIBRATOR, "Vibrador", 10, 250},
	{true, false, WEAPON_VIBRATOR2, "Vibrador plateado", 10, 250},
	{true, false, WEAPON_FLOWER, "Flores", 10, 250},
	{true, false, WEAPON_CANE, "Bastón", 10, 250},
	{true, true, WEAPON_GRENADE, "Granada", 8, 500},
	{true, true, WEAPON_TEARGAS, "Gas lacrimógeno", 8, 500},
	{true, true, WEAPON_MOLTOV, "Cocktail Molotov", 8, 500},
	{false, false, NO_WEAPON, "", 0, 0},
	{false, false, NO_WEAPON, "", 0, 0},
	{false, false, NO_WEAPON, "", 0, 0},
	{true, true, WEAPON_COLT45, "9mm", 2, 160},
	{true, true, WEAPON_SILENCED, "9mm silenciada", 2, 120},
	{true, true, WEAPON_DEAGLE, "Desert Eagle", 2, 950},
	{true, true, WEAPON_SHOTGUN, "Escopeta", 3, 800},
	{true, true, WEAPON_SAWEDOFF, "Escopeta recortada", 3, 120},
	{true, true, WEAPON_SHOTGSPA, "Escopeta de combate", 3, 120},
	{true, true, WEAPON_UZI, "Micro UZI", 4, 70},
	{true, true, WEAPON_MP5, "MP5", 4, 70},
	{true, true, WEAPON_AK47, "Ak-47", 5, 80},
	{true, true, WEAPON_M4, "M4", 5, 80},
	{true, true, WEAPON_TEC9, "TEC-9", 4, 70},
	{true, true, WEAPON_RIFLE, "Rifle", 6, 1000},
	{true, true, WEAPON_SNIPER, "Sniper", 6, 1000},
	{true, true, WEAPON_ROCKETLAUNCHER, "Lanzacohetes RPG", 7, 1000},
	{true, true, WEAPON_HEATSEEKER, "Lanzacohetes HS", 7, 1000},
	{true, true, WEAPON_FLAMETHROWER, "Lanzallamas", 7, 500},
	{true, true, WEAPON_MINIGUN, "Minigun", 7, 0},
	{true, true, WEAPON_SATCHEL, "Bomba detonadora", 8, 500},
	{false, false, WEAPON_BOMB, "Detonador", 12, 500},
	{true, true, WEAPON_SPRAYCAN, "Bote de spray", 9, 10},
	{true, true, WEAPON_FIREEXTINGUISHER, "Extintor", 9, 10},
	{true, false, WEAPON_CAMERA, "Cámara", 9, 500},
	{true, false, NO_WEAPON, "Gafas de visión nocturna", 11, 0},
	{true, false, NO_WEAPON, "Gafas térmicas", 11, 0},
	{false, false, WEAPON_PARACHUTE, "Paracaídas", 11, 0}
};

enum enum_BLACK_MARKT_WEAPONS
{
	black_market_EXP,
	black_market_WEAPON_ID,
	black_market_WEAPON_PRICE_BASE,
	black_market_WEAPON_PRICE
};
new BLACK_MARKT_WEAPONS[][enum_BLACK_MARKT_WEAPONS] = 
{
	{0, 4, 100, 0},
	{0, 5, 100, 0},
	{0, 10, 500, 0},
	{0, 22, 600, 0},
	{0, 23, 650, 0},
	{100, 24, 1200, 0},
	{100, 33, 1500, 0},
	{100, 25, 1600, 0},
	{200, 26, 2200, 0},
	{200, 27, 2800, 0},
	{200, 28, 2500, 0},
	{200, 32, 2800, 0},
	{250, 29, 3500, 0},
	{250, 30, 3600, 0},
	{250, 31, 3800, 0},
	{300, 34, 6500, 0}
};

enum enum_PLAYER_WEAPONS
{
	bool:player_weapon_VALID,
	player_weapon_DB_ID,
	player_weapon_ID,
	player_weapon_AMMO
};
new PLAYER_WEAPONS[MAX_PLAYERS][13][enum_PLAYER_WEAPONS];


enum
{
	TYPE_WARNING,
	TYPE_KICK,
	TYPE_BAN,
	TYPE_TEMP_BAN
};

enum
{
	CMD_USER,
	CMD_HELPER,
	CMD_MODERATOR,
	CMD_SUPER_MODERATOR,
	CMD_GAME_OPERATOR,
	CMD_ADMIN,
	CMD_OWNER
};
new ADMIN_LEVELS[][] = 
{
	"Ciudadano",
	"Moderador de Ayuda",
	"Moderador",
	"Moderador Global",
	"Administrador",
	"Encargado",
	"FUNDADOR"
};

public OnPlayerFloodControl(playerid, iCount, iTimeSpan)
{
	new string[145];
    format(string, sizeof(string), "[AC - KICK] %s Fue baneado por JoinFlood", ACCOUNT_INFO[playerid][ac_NAME]);
	SendMessageToAdmins(0xFF0000FF, string);
    if(iCount > 2 && iTimeSpan < 5000) BanEx(playerid,"JoinFlood");
    return 1;
}

public OnPlayerConnect(playerid)
{
	//assert( Antiflood( playerid ) );

	GameTextForPlayer(playerid, "_~n~_~n~_~n~_~n~_~n~_~n~_~n~_~n~_~n~~r~~h~~h~La Zona RP", 5000, 6);
	new player_version[32];
	GetPlayerVersion(playerid, player_version, sizeof player_version);

	/*if(strcmp(player_version, "0.3.7-R3")) 
	{
		SendClientMessage(playerid, -1, "{00FF80}Nesecitas la version de Samp 0.3.7 R3, Actualiza tu versión de SA-MP desde: {ffffff}wwww.sa-mp.com");
		KickEx(playerid, 100);
	}*/
	for(new i=0; i < 3; i++) TextDrawShowForPlayer(playerid, Jugador_Textdraws[ playerid ][textdraw_tiendarp][i]);

	PlayerRoute[playerid][Destination] = -1;
	PLAYER_TEMP[playerid][pt_ASR_WARNINGS] = 0;
	PLAYER_TEMP[playerid][pt_GAME_STATE] = GAME_STATE_CONNECTED;
	PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] = -1;
	PLAYER_TEMP[playerid][pt_PROPERTY_INDEX] = -1;
	PLAYER_TEMP[playerid][pt_CLOTHING_SHOP] = -1;
	PLAYER_TEMP[playerid][pt_HUD_TEXTDRAWS] = false;
	PLAYER_TEMP[playerid][pt_SEE_ACMD_LOG] = true;
	PLAYER_TEMP[playerid][pt_SEE_AC_LOG] = true;
	PLAYER_TEMP[playerid][pt_REGISTER_ACTOR] = INVALID_ACTOR_ID;
	PLAYER_TEMP[playerid][pt_PLAYER_PHONE_CALL_PLAYERID] = INVALID_PLAYER_ID;
	PLAYER_TEMP[playerid][pt_KNOCK_PLAYER_ID] = INVALID_PLAYER_ID;
	PLAYER_TEMP[playerid][pt_GPS_CHECKPOINT] = INVALID_STREAMER_ID;
	PLAYER_TEMP[playerid][pt_PIZZA_CHECKPOINT] = INVALID_STREAMER_ID;
	PLAYER_TEMP[playerid][pt_LUMBERJACK_CHECKPOINT] = INVALID_STREAMER_ID;
	PLAYER_TEMP[playerid][pt_HARVERT_CHECKPOINT] = INVALID_STREAMER_ID;
	PLAYER_TEMP[playerid][pt_TRUCK_CHECKPOINT] = INVALID_STREAMER_ID;
	PLAYER_TEMP[playerid][pt_PIZZA_ACTOR] = INVALID_STREAMER_ID;
	PLAYER_TEMP[playerid][pt_NOTARY_TO_PLAYER] = INVALID_PLAYER_ID;
	PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] = INVALID_VEHICLE_ID;
	PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] = INVALID_VEHICLE_ID;
	PLAYER_TEMP[playerid][pt_PIVOT_OBJECT] = INVALID_OBJECT_ID;
	PLAYER_TEMP[playerid][pt_PLAYER_LUMBERJACK_TREE] = -1;

	//OBJETO_ARMA_SKIN[playerid] = CreatePlayerObject(playerid, 347, 1380.41028, -1297.44067, 21.64950,   0.00000, 0.00000, 0.00000);

	for(new i = 0; i != MAX_OBJECTS_PER_ROUTE; i ++) TRASH_PLAYER_OBJECTS[playerid][i] = INVALID_STREAMER_ID;
	ResetVars(playerid);
	GetPlayerName(playerid, PLAYER_TEMP[playerid][pt_NAME], 24);
	GetPlayerIp(playerid, PLAYER_TEMP[playerid][pt_IP], 16);
	
	if(!strcmp(PLAYER_TEMP[playerid][pt_IP],"255.255.255.255", false)) return BanEx(playerid,"Netmask bot");

    #if USE_ANTI_STEALER == true
   	new str[ 100 ];
	gpci( playerid , str , sizeof( str ) );
	if( !strcmp( str , DISALLOWED_ADDRESS ,true ) )
	{
		SendClientMessage( playerid , ~1 ,"Anti Stealer");
		BanEx( playerid, "# Map Stealer / RakSampClient" );
    }
    #endif


	EnablePlayerCameraTarget(playerid, true);
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	TogglePlayerControllableEx(playerid, true);
	HidePlayerDialog(playerid);
	ResetPlayerMoney(playerid);
	CancelSelectTextDrawEx(playerid);
	SetPlayerTime(playerid, 12, 0);
	SetPlayerWeather(playerid, 0);
	SetPlayerScore(playerid, 0);
	ResetPlayerWeapons(playerid);
	SetPlayerColorEx(playerid, PLAYER_COLOR);
	CancelEdit(playerid);
	
	/*TextDrawShowForPlayer(playerid, Textdraws[textdraw_LOAD_SCREEN][0]);
	TextDrawShowForPlayer(playerid, Textdraws[textdraw_LOAD_SCREEN][1]);
	TextDrawShowForPlayer(playerid, Textdraws[textdraw_LOAD_SCREEN][2]);
	TextDrawShowForPlayer(playerid, Textdraws[textdraw_LOAD_SCREEN][3]);
	TextDrawShowForPlayer(playerid, Textdraws[textdraw_LOAD_SCREEN][4]);*/
	CamaraInicio(playerid);
	//if(!strcmp("Michael_Angelus",PLAYER_TEMP[playerid][pt_NAME],true)){}else
	//{
	new DB_Query[550], DBResult:Resulti;
	format(DB_Query, sizeof DB_Query, "SELECT NAME FROM VIP_NAME WHERE NAME='%s';", PLAYER_TEMP[playerid][pt_NAME]);
	Resulti = db_query(Database, DB_Query);
	if(!db_num_rows(Resulti))
	{
		if(!IsValidRPName(PLAYER_TEMP[playerid][pt_NAME]))
		{
			PLAYER_TEMP[playerid][pt_USER_VALID_NAME] = false;
			ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Aviso", "Bienvenido, has entrado a un servidor de rol.\n\nTu nombre no cumple con el formato necesario.\nPor favor utilice el formato: Nombre_Apellido.", "Entiendo", "");
			KickEx(playerid, 500);
			return 1;
		}
	}
	db_free_result(Resulti);

	//}
	new num_players_on_ip = GetNumberOfPlayersOnThisIP(PLAYER_TEMP[playerid][pt_IP]);
	if(num_players_on_ip > 3)
	{
		ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Aviso", "Ha sido expulsado por exceder el máximo de conexiones desde una IP.", "Entiendo", "");
		KickEx(playerid, 500);
		return 1;
	}
	
	//SpeedChoqueCheck[playerid] = SetTimerEx("CheckChoque", 100, 1, "i", playerid);

	
	new DBResult:ban_Result;
	format(DB_Query, sizeof DB_Query, "SELECT DATETIME('NOW') AS `NOW`, `BANS`.*, `BAD_HISTORY`.* FROM `BANS`, `BAD_HISTORY` WHERE (`BANS`.`NAME` = '%q' OR `BANS`.`IP` = '%q') AND `BAD_HISTORY`.`ID` = `BANS`.`ID_HISTORY`;", PLAYER_TEMP[playerid][pt_NAME], PLAYER_TEMP[playerid][pt_IP]);
	ban_Result = db_query(Database, DB_Query);
	
	if(db_num_rows(ban_Result))
	{
		new now[24], name[24], expire_date[24], type, by, text[128], date[24];
		
		db_get_field_assoc(ban_Result, "NOW", now, 24);
		db_get_field_assoc(ban_Result, "NAME", name, 24);
		db_get_field_assoc(ban_Result, "EXPIRE_DATE", expire_date, 24);
		type = db_get_field_assoc_int(ban_Result, "TYPE");
		by = db_get_field_assoc_int(ban_Result, "BY");
		db_get_field_assoc(ban_Result, "TEXT", text, 128);
		db_get_field_assoc(ban_Result, "DATE", date, 24);
		
		if(type == TYPE_BAN)
		{
			new dialog[480];
			format(dialog, sizeof dialog, 
				
				"\
					Esta IP o cuenta está expulsada permanentemente, detalles:\n\
					\n\
					Tu nombre: %s\n\
					\n\
					Nombre: %s\n\
					Expulsado por: %d\n\
					Fecha expulsión: %s\n\
					Razón: %s\n\
					\n\
				",
				
				PLAYER_TEMP[playerid][pt_NAME],
				name, by, date, text
			);
				
			ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Aviso", dialog, "Entiendo", "");
			KickEx(playerid, 500);
		}
		else if(type == TYPE_TEMP_BAN)
		{
			new DBResult:still_banned_Result;
			format(DB_Query, sizeof DB_Query, "SELECT * FROM `BANS` WHERE (`NAME` = '%q' OR `IP` = '%q') AND DATETIME('NOW') >= `EXPIRE_DATE`;", PLAYER_TEMP[playerid][pt_NAME], PLAYER_TEMP[playerid][pt_IP]);
			still_banned_Result = db_query(Database, DB_Query);
			
			if(db_num_rows(still_banned_Result))
			{
				format(DB_Query, sizeof DB_Query, "DELETE FROM `BANS` WHERE (`NAME` = '%q' OR `IP` = '%q');", PLAYER_TEMP[playerid][pt_NAME], PLAYER_TEMP[playerid][pt_IP]);
				db_query(Database, DB_Query);
			}
			else
			{
				new dialog[600];
				format(dialog, sizeof dialog, 
					
					"\
						Esta IP o cuenta está expulsada temporalmente, detalles:\n\
						\n\
						Tu nombre: %s\n\
						Tu IP: %s\n\
						\n\
						Nombre: %s\n\
						Expulsado por: %d\n\
						Fecha expulsión: %s\n\
						Razón: %s\n\
						\n\
						Fecha actual: %s\n\
						Fecha readmisión: %s\n\
						\n\
					",
					
					PLAYER_TEMP[playerid][pt_NAME], PLAYER_TEMP[playerid][pt_IP],
					name, by, date, text, now, expire_date
				);
					
				ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Aviso", dialog, "Entiendo", "");
				KickEx(playerid, 500);
			}
			db_free_result(still_banned_Result);
		}
	}
	db_free_result(ban_Result);
	
	if(PLAYER_TEMP[playerid][pt_KICKED]) return 1;
	
	
	PLAYER_TEMP[playerid][pt_USER_VALID_NAME] = true;
	SetRolePlayNames(playerid);
	
	new DBResult:Result;
	new isdbquery[256];
	format(DB_Query, sizeof(DB_Query), 
	"\
		SELECT CUENTA.*, REGISTRO.DATE, PERSONAJE.INTERIOR, PERSONAJE.LOCAL_INTERIOR, PERSONAJE.POS_X, PERSONAJE.POS_Y, PERSONAJE.POS_Z, PERSONAJE.ANGLE, PERSONAJE.STATE AS PSTATE FROM `CUENTA`, `REGISTRO`, `PERSONAJE` WHERE CUENTA.`NAME` = '%q' AND REGISTRO.`ID_USER` = CUENTA.`ID` AND PERSONAJE.`ID_USER` = CUENTA.`ID`\
	", PLAYER_TEMP[playerid][pt_NAME]);
	Result = db_query(Database, DB_Query);
	
	if(db_num_rows(Result))
	{
		
		format(isdbquery, sizeof isdbquery, "UPDATE `CUENTA` SET `CONNECTED` = '1', `PLAYERID` = '%d' WHERE `NAME` = '%q'", playerid, PLAYER_TEMP[playerid][pt_NAME]);
		db_query(Database, isdbquery);

		ACCOUNT_INFO[playerid][ac_ID] = db_get_field_assoc_int(Result, "ID");
		db_get_field_assoc(Result, "IP", ACCOUNT_INFO[playerid][ac_IP], 16);
		db_get_field_assoc(Result, "NAME", ACCOUNT_INFO[playerid][ac_NAME], 24);
		db_get_field_assoc(Result, "EMAIL", ACCOUNT_INFO[playerid][ac_EMAIL], 32);
		db_get_field_assoc(Result, "PASS", ACCOUNT_INFO[playerid][ac_PASS], 64 + 1);
		db_get_field_assoc(Result, "SALT", ACCOUNT_INFO[playerid][ac_SALT], 16);
	 
		db_get_field_assoc(Result, "LAST_CONNECTION", ACCOUNT_INFO[playerid][ac_LAST_CONNECTION], 256);
		ACCOUNT_INFO[playerid][ac_TIME_PLAYING] = db_get_field_assoc_int(Result, "TIME-PLAYING");
		ACCOUNT_INFO[playerid][ac_LEVEL] = db_get_field_assoc_int(Result, "LEVEL");
		ACCOUNT_INFO[playerid][ac_REP] = db_get_field_assoc_int(Result, "REP");
		ACCOUNT_INFO[playerid][ac_STATE] = db_get_field_assoc_int(Result, "STATE");
		db_get_field_assoc(Result, "DATE", ACCOUNT_INFO[playerid][reg_DATE], 24);
		ACCOUNT_INFO[playerid][ac_DOUBT_CHANNEL] = db_get_field_assoc_int(Result, "DOUBT_CHANNEL");
		ACCOUNT_INFO[playerid][ac_TIME_FOR_REP] = db_get_field_assoc_int(Result, "TIME_FOR_REP");
		ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] = db_get_field_assoc_int(Result, "ADMIN_LEVEL");
		ACCOUNT_INFO[playerid][ac_PAYDAY_REP] = db_get_field_assoc_int(Result, "PAYDAY_REP");
		ACCOUNT_INFO[playerid][ac_SU] = db_get_field_assoc_int(Result, "SU");
		db_get_field_assoc(Result, "SU_EXPIRE_DATE", ACCOUNT_INFO[playerid][ac_SU_EXPIRE_DATE], 24);
		ACCOUNT_INFO[playerid][ac_SD] = db_get_field_assoc_int(Result, "SD");

		FACCION_PLAYER[playerid][FACCION_ID] = db_get_field_assoc_int(Result, "FACCION");
		FACCION_PLAYER[playerid][FACION_LIDER] = db_get_field_assoc_int(Result, "FACCIONLIDER");

		

		if(FACCION_PLAYER[playerid][FACCION_ID] != 0)
		{
			FACCION_PLAYER[playerid][FACION_MIEMBRO]=true;
		}
		else
		{
			FACCION_PLAYER[playerid][FACION_MIEMBRO]=false;
		}
		CHARACTER_INFO[playerid][ch_INTERIOR] = db_get_field_assoc_int(Result, "INTERIOR");
		CHARACTER_INFO[playerid][ch_INTERIOR_EXTRA] = db_get_field_assoc_int(Result, "LOCAL_INTERIOR");
		CHARACTER_INFO[playerid][ch_POS][0] = db_get_field_assoc_float(Result, "POS_X");
		CHARACTER_INFO[playerid][ch_POS][1] = db_get_field_assoc_float(Result, "POS_Y");
		CHARACTER_INFO[playerid][ch_POS][2] = db_get_field_assoc_float(Result, "POS_Z");
		CHARACTER_INFO[playerid][ch_ANGLE] = db_get_field_assoc_float(Result, "ANGLE");
		CHARACTER_INFO[playerid][ch_STATE] = db_get_field_assoc_int(Result, "PSTATE");
		LoadInto(playerid);
		switch(CHARACTER_INFO[playerid][ch_STATE])
		{
			case ROLEPLAY_STATE_INTERIOR:
			{
				new index = GetEnterExitIndexById(CHARACTER_INFO[playerid][ch_INTERIOR_EXTRA]);
				if(index == -1)
				{
					CHARACTER_INFO[playerid][ch_STATE] = ROLEPLAY_STATE_NORMAL;
					CHARACTER_INFO[playerid][ch_INTERIOR_EXTRA] = 0;
					CHARACTER_INFO[playerid][ch_POS][0] = New_User_Pos[0];
					CHARACTER_INFO[playerid][ch_POS][1] = New_User_Pos[1];
					CHARACTER_INFO[playerid][ch_POS][2] = New_User_Pos[2];
					CHARACTER_INFO[playerid][ch_ANGLE] = New_User_Pos[3];
					CHARACTER_INFO[playerid][ch_INTERIOR] = 0;
				}
				else
				{
					CHARACTER_INFO[playerid][ch_STATE] = ROLEPLAY_STATE_NORMAL;
					CHARACTER_INFO[playerid][ch_INTERIOR_EXTRA] = 0;
					CHARACTER_INFO[playerid][ch_POS][0] = ENTER_EXIT[index][ee_EXT_X];
					CHARACTER_INFO[playerid][ch_POS][1] = ENTER_EXIT[index][ee_EXT_Y];
					CHARACTER_INFO[playerid][ch_POS][2] = ENTER_EXIT[index][ee_EXT_Z];
					CHARACTER_INFO[playerid][ch_ANGLE] = ENTER_EXIT[index][ee_EXT_ANGLE];
					CHARACTER_INFO[playerid][ch_INTERIOR] = ENTER_EXIT[index][ee_EXT_INTERIOR];
				}
			}
			case ROLEPLAY_STATE_OWN_PROPERTY:
			{
				new index = GetPropertyIndexByID(CHARACTER_INFO[playerid][ch_INTERIOR_EXTRA]);
				if(index == -1)
				{
					CHARACTER_INFO[playerid][ch_STATE] = ROLEPLAY_STATE_NORMAL;
					CHARACTER_INFO[playerid][ch_INTERIOR_EXTRA] = 0;
					CHARACTER_INFO[playerid][ch_POS][0] = New_User_Pos[0];
					CHARACTER_INFO[playerid][ch_POS][1] = New_User_Pos[1];
					CHARACTER_INFO[playerid][ch_POS][2] = New_User_Pos[2];
					CHARACTER_INFO[playerid][ch_ANGLE] = New_User_Pos[3];
					CHARACTER_INFO[playerid][ch_INTERIOR] = 0;
				}
				else
				{
					if(PROPERTY_INFO[index][property_OWNER_ID] == ACCOUNT_INFO[playerid][ac_ID])
					{
						CHARACTER_INFO[playerid][ch_POS][0] = PROPERTY_INTERIORS[ PROPERTY_INFO[index][property_ID_INTERIOR] ][property_INT_X];
						CHARACTER_INFO[playerid][ch_POS][1] = PROPERTY_INTERIORS[ PROPERTY_INFO[index][property_ID_INTERIOR] ][property_INT_Y];
						CHARACTER_INFO[playerid][ch_POS][2] = PROPERTY_INTERIORS[ PROPERTY_INFO[index][property_ID_INTERIOR] ][property_INT_Z];
						CHARACTER_INFO[playerid][ch_ANGLE] = PROPERTY_INTERIORS[ PROPERTY_INFO[index][property_ID_INTERIOR] ][property_INT_ANGLE];
						CHARACTER_INFO[playerid][ch_INTERIOR] = PROPERTY_INTERIORS[ PROPERTY_INFO[index][property_ID_INTERIOR] ][property_INT_INTERIOR];
					}
					else
					{
						CHARACTER_INFO[playerid][ch_STATE] = ROLEPLAY_STATE_NORMAL;
						CHARACTER_INFO[playerid][ch_INTERIOR_EXTRA] = 0;
						CHARACTER_INFO[playerid][ch_POS][0] = PROPERTY_INFO[index][property_EXT_X];
						CHARACTER_INFO[playerid][ch_POS][1] = PROPERTY_INFO[index][property_EXT_Y];
						CHARACTER_INFO[playerid][ch_POS][2] = PROPERTY_INFO[index][property_EXT_Z];
						CHARACTER_INFO[playerid][ch_ANGLE] = PROPERTY_INFO[index][property_EXT_ANGLE];
						CHARACTER_INFO[playerid][ch_INTERIOR] = PROPERTY_INFO[index][property_EXT_INTERIOR];
					}
				}
			}
			case ROLEPLAY_STATE_GUEST_PROPERTY:
			{
				new index = GetPropertyIndexByID(CHARACTER_INFO[playerid][ch_INTERIOR_EXTRA]);
				if(index == -1)
				{
					CHARACTER_INFO[playerid][ch_STATE] = ROLEPLAY_STATE_NORMAL;
					CHARACTER_INFO[playerid][ch_INTERIOR_EXTRA] = 0;
					CHARACTER_INFO[playerid][ch_POS][0] = New_User_Pos[0];
					CHARACTER_INFO[playerid][ch_POS][1] = New_User_Pos[1];
					CHARACTER_INFO[playerid][ch_POS][2] = New_User_Pos[2];
					CHARACTER_INFO[playerid][ch_ANGLE] = New_User_Pos[3];
					CHARACTER_INFO[playerid][ch_INTERIOR] = 0;
				}
				else
				{
					CHARACTER_INFO[playerid][ch_STATE] = ROLEPLAY_STATE_NORMAL;
					CHARACTER_INFO[playerid][ch_INTERIOR_EXTRA] = 0;
					CHARACTER_INFO[playerid][ch_POS][0] = PROPERTY_INFO[index][property_EXT_X];
					CHARACTER_INFO[playerid][ch_POS][1] = PROPERTY_INFO[index][property_EXT_Y];
					CHARACTER_INFO[playerid][ch_POS][2] = PROPERTY_INFO[index][property_EXT_Z];
					CHARACTER_INFO[playerid][ch_ANGLE] = PROPERTY_INFO[index][property_EXT_ANGLE];
					CHARACTER_INFO[playerid][ch_INTERIOR] = PROPERTY_INFO[index][property_EXT_INTERIOR];
				}
			}
		}
		
		PlayAudioStreamForPlayer(playerid, Intro_Music[random(sizeof(Intro_Music))]); // Música
		PLAYER_TEMP[playerid][pt_USER_EXIT] = true;
	}
	else
	{
		PlayAudioStreamForPlayer(playerid, Intro_Music[0]); // Música
		// Nuevo usuario
	}
	db_free_result(Result);
	/*new query[520];
    mysql_format(DatabaseMysql, query, sizeof(query), "SELECT * FROM `CUENTASLa Zona` WHERE `NAME`= '%q' ",PLAYER_TEMP[playerid][pt_NAME]);
    mysql_pquery(DatabaseMysql, query, "VerificarUsuario","d", playerid);*/
	
	CreatePlayerTextDraws(playerid);
 
    new city[25],str[25];
    GetPlayerCountry(playerid, str, sizeof(str));
    GetPlayerCity(playerid, city, sizeof(city));
	new connecting_ip[16];
	GetPlayerIp( playerid, connecting_ip, 16 );
 	if(!strcmp("Michael_Angelus",PLAYER_TEMP[playerid][pt_NAME],true))
 	{
 		new strings2[500];
	    format(strings2, sizeof(strings2),"@Admins: Michael_Angelus (ID:%i) Se ha conectado al servidor desde: {CCCCCC}Bloqueado - Bloqueado{ffffff} IP: Bloqueado");
	    SendMessageToAdmins(0xCCCCCCFF,strings2);
 	}
 	else
	{
	    new strings2[500];
	    format(strings2, sizeof(strings2),"@Admins: %s (ID:%i) Se ha conectado al servidor desde: {CCCCCC}%s - %s{ffffff} IP: %s", PLAYER_TEMP[playerid][pt_NAME], playerid, str,city,connecting_ip);
	    SendMessageToAdmins(0xCCCCCCFF,strings2);

	    new Query5[128],ipxd[16];
        new DBResult:Result5;
        GetPlayerIp(playerid,ipxd,16);
        format(Query5,sizeof(Query5),"SELECT `IP` FROM `AKAS` WHERE `NICK`='%q'", PLAYER_TEMP[playerid][pt_NAME]);
        Result5 = db_query(Database,Query5);
        switch(db_num_rows(Result5))
        {
        case 0: format(Query5,sizeof(Query5),"INSERT INTO `AKAS` (`NICK`,`IP`) VALUES ('%q','%q')",PLAYER_TEMP[playerid][pt_NAME],ipxd);
        default: format(Query5,sizeof(Query5),"UPDATE `AKAS` SET `IP`='%q' WHERE `NICK`='%q'",ipxd,PLAYER_TEMP[playerid][pt_NAME]);
        }
        db_free_result(Result5);
        db_query(Database,Query5);


        new accounts[10][MAX_PLAYER_NAME], final_string[128];
        AKA(playerid,accounts);

        if(accounts[0][0] != '\0')
        {
        	new string[500];
            for(new e; e<sizeof(accounts); e++)
            {
                if(accounts[e][0] == '\0') break;
                format(string, sizeof(string), "%s,", accounts[e]);
                strcat(final_string, string);
            }
            format(string,sizeof(string),"~ AKAS: [%s]",final_string);
            SendMessageToAdmins(0x848484FF,string);
        }

	}
	return 1;
}


/*forward VerificarUsuario(playerid);
public VerificarUsuario(playerid)
{
    ////assert( Antiflood( playerid ) );
	new Rows;
    Rows = cache_get_row_count();
    if(!Rows)
    {
	    CamaraInicio(playerid);
	    format(string2,sizeof(string2),"Hola: {0080FF}%s {FFFFFF}Tu cuenta no está registrada\npor favor ingresa su contraseña en el cuadro de abajo\n\nContraseña:",PLAYER_TEMP[playerid][pt_NAME]);
		ShowPlayerDialog(playerid, DIALOG_REGISTER, DIALOG_STYLE_INPUT, "{0080FF}Registro",string2, "Registrar", "Cancelar");
	}
	else
	{
		CamaraInicio(playerid);
		format(string2,sizeof(string2),"Hola: {0080FF}%s {FFFFFF}Ingrese su contraseña para ingresar al servidor\n\nContraseña:",PLAYER_TEMP[playerid][pt_NAME]);
		ShowPlayerDialog(playerid, DIALOG_LOGIN, DIALOG_STYLE_INPUT, "{0080FF}Ingreso",string2, "Aceptar", "Cancelar");
	}
	return 1;
}*/
CamaraInicio(playerid)
{
	InterpolateCameraPos(playerid, 1428.876953, -1276.953979, 160.701248, 1428.876953, -1276.953979, 160.701248, 1000);
	InterpolateCameraLookAt(playerid, 1433.353515, -1278.253173, 158.892105, 1433.353515, -1278.253173, 158.892105, 1000);
	SetPlayerPos(playerid,1587.8212,-1318.6857,17.5407);
	TogglePlayerControllable(playerid,0);
	return 1;
}
public OnPlayerDisconnect(playerid, reason)
{
 	//assert( Antiflood( playerid ) );
 	if(Capturing[playerid]==true)
    {
    	SalioDeConquista(playerid);
	}
 	if(IsValidVehicle(PLAYER_TEMP[playerid][tp_VEHICLE]))
 	{
 		DestroyVehicle(PLAYER_TEMP[playerid][tp_VEHICLE]);
 	}
 	if(InfoCorredor[playerid][ENCORRE]==true)
    {
        KickFromCorredor(playerid);
    }
	if(ESTAEDITANDO_Objeto_Depa[playerid])
 	{
        DestroyDynamicObject(OBJETO_DE_EDITAR_CASA[playerid]);
    }
	if(PLAYER_TEMP[playerid][pt_VIENDO_TEXTURAS]==true)
	{	
		LoadTextureForCasa(playerid);
		PLAYER_TEMP[playerid][pt_VIENDO_TEXTURAS]=false;
	}
	if(ESTAEDITANDO_Objeto[playerid])
	{
		DestroyDynamicObject(OBJETO_DE_EDITAR_CASA[playerid]);
	}
 	if(PLAYER_TEMP[playerid][Capturando_Grafiti]==true)
	{
		new id = PLAYER_TEMP[playerid][Capturando_Grafiti_ID];
		PLAYER_TEMP[playerid][Capturando_Grafiti]=false;
		GRAFITI[id][STATUS]=0;
		GRAFITI[id][CAPTURADO_POR]=0;
		GRAFITI[id][CAPTURANDO]=false;
		GRAFITI[id][CAPTURADO_POR_PLAYER] = -1;
		GRAFITI[id][LOCKED]=true;
		GRAFITI[id][TIMER] = GRAFITI_LOCK_TIME;
	    GRAFITI[id][TIMER_MAIN] = SetTimerEx("UNLOCKGRAFITI",1000,true,"i",id);
	}
	if(GetPVarInt(playerid, "Reconnecting") == 1)
   	{
	    new iStr[128],iP[16];
	    GetPVarString(playerid, "RecIP", iP, sizeof(iP));
	    format(iStr, sizeof(iStr), "unbanip %s", iP);
	    SendRconCommand(iStr);
	    SendRconCommand("reloadbans");
	    SetPVarInt(playerid, "Reconnecting", 0);
    }

	if(PlayerRoute[playerid][Destination] != -1) 
	{
		//DisableGPS(playerid);
	}
	if(ACCOUNT_INFO[playerid][ac_ID] != 0)
	{
		new DB_Query[128];
		format(DB_Query, sizeof DB_Query, "UPDATE `CUENTA` SET `CONNECTED` = '0', PLAYERID = '-1' WHERE `ID` = '%d';", ACCOUNT_INFO[playerid][ac_ID]);
		db_query(Database, DB_Query);
	}
	if(PLAYER_TEMP[playerid][pt_REGISTER_ACTOR] != INVALID_ACTOR_ID)
	{
		DestroyActor(PLAYER_TEMP[playerid][pt_REGISTER_ACTOR]);
		PLAYER_TEMP[playerid][pt_REGISTER_ACTOR] = INVALID_ACTOR_ID;
	}
	DestroyPlayerObject(playerid,OBJETO_ARMA_SKIN[playerid]);
	KillTimer(TimerRepariVehicle[playerid]);
	KillTimer(DescansarTimer[playerid]);
	KillTimer(TIMER_MENSAJEAYUDA[playerid][0]);
	KillTimer(TIMER_MENSAJEAYUDA[playerid][1]);
	KillTimer(TIMER_MENSAJEAYUDA[playerid][2]);
	KillTimer(SanarTimer[playerid]);
	KillTimer(PI[playerid][FadeTimer]);
	KillTimer(TIMER_PESCAR[playerid]);
	KillTimer(TimerTag[playerid]);
	KillTimer(Timer_Vendaje[playerid]);
	/**/
 
	/**/
	//Restablecer un vehiculo en renta
	if(RENTOVEHICULO[playerid]==true)
	{
		RestablecerVehiculoRenta(VEHICLERENT[playerid]);
		HideRentVehicle(playerid);
		RENTOVEHICULO[playerid]=false;
	}
	KillTimer(RENTOVEHICULOTIMER[playerid]);
	/**/
	if(PLAYER_TEMP[playerid][pt_USER_LOGGED]) // ha pasado la pantalla de registro/login y ha estado jugando
	{
		ACCOUNT_INFO[playerid][ac_TIME_PLAYING] += gettime() - PLAYER_TEMP[playerid][pt_TIME_PLAYING];
		if(PLAYER_TEMP[playerid][pt_USER_EXIT])
		{
			if(PLAYER_CREW[playerid][player_crew_VALID]) CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_ONLINE_MEMBERS] --;
			
			if(PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] != INVALID_VEHICLE_ID)
			{
				if(GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][gb_vehicle_LAST_DRIVER] == playerid) GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][gb_vehicle_LAST_DRIVER] = INVALID_PLAYER_ID;
			}
			
			if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
			{
				new vehicleid = GetPlayerVehicleID(playerid);
				if(vehicleid)
				{
					GLOBAL_VEHICLES[ vehicleid ][gb_vehicle_TP_IMMUNITY] = gettime() + 5;
					GLOBAL_VEHICLES[ vehicleid ][gb_vehicle_DRIVER] = INVALID_PLAYER_ID;
					GLOBAL_VEHICLES[ vehicleid ][gb_vehicle_LAST_DRIVER] = INVALID_PLAYER_ID;
					GLOBAL_VEHICLES[ vehicleid ][gb_vehicle_OCCUPIED] = false;
				}
			}
			
			if(PLAYER_TEMP[playerid][pt_PIVOT_OBJECT] != INVALID_OBJECT_ID) DestroyPlayerObject(playerid, PLAYER_TEMP[playerid][pt_PIVOT_OBJECT]);
			
			EndPlayerJob(playerid, false);
			
			if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_JAIL) CHARACTER_INFO[playerid][ch_POLICE_JAIL_TIME] -= gettime() - PLAYER_TEMP[playerid][pt_ENTER_JAIL_TIME];
			
			GetPlayerPos(playerid, CHARACTER_INFO[playerid][ch_POS][0], CHARACTER_INFO[playerid][ch_POS][1], CHARACTER_INFO[playerid][ch_POS][2]);
			GetPlayerFacingAngle(playerid, CHARACTER_INFO[playerid][ch_ANGLE]);
			CHARACTER_INFO[playerid][ch_INTERIOR] = GetPlayerInterior(playerid);
			PLAYER_TEMP[playerid][pt_TIME_PASSED_LAST_REP] = gettime() * 1000 - PLAYER_TEMP[playerid][pt_TIME_PASSED_LAST_REP];
			ACCOUNT_INFO[playerid][ac_TIME_FOR_REP] -= PLAYER_TEMP[playerid][pt_TIME_PASSED_LAST_REP];
			
			if(CHARACTER_INFO[playerid][ch_HEALTH] <= 0.0) CHARACTER_INFO[playerid][ch_HEALTH] = 1.0;
			if(CHARACTER_INFO[playerid][ch_HEALTH] > 100.0) CHARACTER_INFO[playerid][ch_HEALTH] = 100.0;
			if(CHARACTER_INFO[playerid][ch_ARMOUR] > 100.0) CHARACTER_INFO[playerid][ch_ARMOUR] = 100.0;
			
			SaveUserData(playerid);
			SaveInto(playerid);
			SavePlayerToysData(playerid);
			SavePlayerVehicles(playerid, true);
			SavePlayerSkills(playerid);
			SavePlayerWorks(playerid);
			SavePlayerMisc(playerid);
			SavePlayerWeaponsData(playerid);
			
			new disconnect_message[128];
			switch(reason)
			{
				case 0: format(disconnect_message, sizeof disconnect_message, "%s se ha desconectado por error (crash).", PLAYER_TEMP[playerid][pt_RP_NAME]);
				case 1: format(disconnect_message, sizeof disconnect_message, "%s se ha desconectado.", PLAYER_TEMP[playerid][pt_RP_NAME]);
				case 2: format(disconnect_message, sizeof disconnect_message, "%s se ha desconectado porque fue expulsado del servidor.", PLAYER_TEMP[playerid][pt_RP_NAME]);
			}
			NearbyMessage(CHARACTER_INFO[playerid][ch_POS][0], CHARACTER_INFO[playerid][ch_POS][1], CHARACTER_INFO[playerid][ch_POS][2], CHARACTER_INFO[playerid][ch_INTERIOR], GetPlayerVirtualWorld(playerid), 15.0, 0x909D95FF, disconnect_message);
		
			if(PLAYER_TEMP[playerid][pt_PLAYER_IN_CALL]) EndPhoneCall(playerid);
		}
	}
	
	KillTimer(SpeedChoqueCheck[playerid]);
    KillTimer(CrashTimer[playerid]);
    IsSpeeding[playerid] = false;

	new pip[16];
	format(pip, sizeof pip, "%s", ACCOUNT_INFO[playerid][ac_IP]);
	
	DestroyPlayerCheckpoints(playerid);
	DestroyPlayerTextDraws(playerid);
	for(new i = 0; i != MAX_TIMERS_PER_PLAYER; i++) KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][i]);
	ResetPlayerVariables(playerid);
	
	BlockIpAddress(pip, 6000);
	return 1;
}

ResetPlayerVariables(playerid)
{
	new temp_PLAYER_TEMP[Temp_Enum]; PLAYER_TEMP[playerid] = temp_PLAYER_TEMP;
	new temp_ACCOUNT_INFO[Account_Enum]; ACCOUNT_INFO[playerid] = temp_ACCOUNT_INFO;
	new temp_CHARACTER_INFO[Character_Enum]; CHARACTER_INFO[playerid] = temp_CHARACTER_INFO;
	new temp_BANK_ACCOUNT[Bank_Account_Enum]; BANK_ACCOUNT[playerid] = temp_BANK_ACCOUNT;	
	
	new temp_PLAYER_TOYS[Player_Toys_Info];
	for(new i = 0; i != MAX_PLAYER_ATTACHED_OBJECTS; i ++) PLAYER_TOYS[playerid][i] = temp_PLAYER_TOYS;
	
	new temp_PLAYER_POCKET[Player_Pocket_Enum];
	for(new i = 0; i != MAX_PLAYER_POCKET_OBJECTS; i ++) PLAYER_POCKET[playerid][i] = temp_PLAYER_POCKET;
	
	
	new temp_PLAYER_PHONE[Phone_Info_Enum]; PLAYER_PHONE[playerid] = temp_PLAYER_PHONE;
	
	new temp_PLAYER_PHONE_BOOK[Phone_Book_Enum]; 
	for(new i = 0; i != MAX_PHONE_CONTACTS; i ++) PLAYER_PHONE_BOOK[playerid][i] = temp_PLAYER_PHONE_BOOK;
	
	new temp_PLAYER_GPS[Player_GPS_Enum]; 
	for(new i = 0; i != MAX_PLAYER_GPS_SAVES; i ++) PLAYER_GPS[playerid][i] = temp_PLAYER_GPS;
	
	new temp_PLAYER_OBJECT[Player_Objects_Enum]; PLAYER_OBJECT[playerid] = temp_PLAYER_OBJECT;
	
	for(new i = 0; i != sizeof(PLAYER_SKILLS[]); i ++) PLAYER_SKILLS[playerid][i] = 0;
	
	for(new i = 0; i != sizeof(PLAYER_WORKS[]); i ++) PLAYER_WORKS[playerid][i] = 0;
	
	for(new i = 0; i != sizeof(PLAYER_MISC[]); i ++) PLAYER_MISC[playerid][i] = 0;
	
	new temp_PLAYER_PROPERTY_CONSTRUCTO[PLAYER_PROPERTY_CONSTRUCTOR_ENU]; PLAYER_PROPERTY_CONSTRUCTOR[playerid] = temp_PLAYER_PROPERTY_CONSTRUCTO;
	
	PLAYER_TEMP[playerid][pt_NOTARY_TO_PLAYER] = INVALID_PLAYER_ID;
	PLAYER_TEMP[playerid][pt_ADMIN_SERVICE] = false;

	new tmp_PLAYER_WEAPONS[enum_PLAYER_WEAPONS];
	for(new i = 0; i != 13; i ++) PLAYER_WEAPONS[playerid][i] = tmp_PLAYER_WEAPONS;
	
	new tmp_PLAYER_AC_INFO[e_PLAYER_AC_INFO];
	for(new i = 0; i != sizeof(ac_Info); i ++) PLAYER_AC_INFO[playerid][i] = tmp_PLAYER_AC_INFO;
	
	new tmp_PLAYER_CREW[enum_PLAYER_CREW]; PLAYER_CREW[playerid] = tmp_PLAYER_CREW;
	return 1;
}

DestroyPlayerCheckpoints(playerid)
{
	if(IsValidDynamic3DTextLabel(PLAYER_TEMP[playerid][pt_POLICE_LABEL]))
	{
		DestroyDynamic3DTextLabel(PLAYER_TEMP[playerid][pt_POLICE_LABEL]);
		PLAYER_TEMP[playerid][pt_POLICE_LABEL] = Text3D:INVALID_STREAMER_ID;
	}
	if(IsValidDynamic3DTextLabel(PLAYER_TEMP[playerid][pt_ADMIN_LABEL]))
	{
		DestroyDynamic3DTextLabel(PLAYER_TEMP[playerid][pt_ADMIN_LABEL]);
		PLAYER_TEMP[playerid][pt_ADMIN_LABEL] = Text3D:INVALID_STREAMER_ID;
	}
	if(IsValidDynamic3DTextLabel(PLAYER_TEMP[playerid][pt_LABEL]))
	{
		DestroyDynamic3DTextLabel(PLAYER_TEMP[playerid][pt_LABEL]);
		PLAYER_TEMP[playerid][pt_LABEL] = Text3D:INVALID_STREAMER_ID;
	}
	if(IsValidDynamicCP(PLAYER_TEMP[playerid][pt_GPS_CHECKPOINT]))
	{
		DestroyDynamicCP(PLAYER_TEMP[playerid][pt_GPS_CHECKPOINT]);
		PLAYER_TEMP[playerid][pt_GPS_CHECKPOINT] = INVALID_STREAMER_ID;
	}
	if(IsValidDynamicCP(PLAYER_TEMP[playerid][pt_TRUCK_CHECKPOINT]))
	{
		DestroyDynamicCP(PLAYER_TEMP[playerid][pt_TRUCK_CHECKPOINT]);
		PLAYER_TEMP[playerid][pt_TRUCK_CHECKPOINT] = INVALID_STREAMER_ID;
	}
	if(IsValidDynamicCP(PLAYER_TEMP[playerid][pt_TRASH_CHECKPOINT]))
	{
		DestroyDynamicCP(PLAYER_TEMP[playerid][pt_TRASH_CHECKPOINT]);
		PLAYER_TEMP[playerid][pt_TRASH_CHECKPOINT] = INVALID_STREAMER_ID;
	}
	if(IsValidDynamicRaceCP(PLAYER_TEMP[playerid][pt_HARVERT_CHECKPOINT]))
	{
		DestroyDynamicRaceCP(PLAYER_TEMP[playerid][pt_HARVERT_CHECKPOINT]);
		PLAYER_TEMP[playerid][pt_HARVERT_CHECKPOINT] = INVALID_STREAMER_ID;
	}
	if(IsValidDynamicCP(PLAYER_TEMP[playerid][pt_LUMBERJACK_CHECKPOINT]))
	{
		DestroyDynamicCP(PLAYER_TEMP[playerid][pt_LUMBERJACK_CHECKPOINT]);
		PLAYER_TEMP[playerid][pt_LUMBERJACK_CHECKPOINT] = INVALID_STREAMER_ID;
	}
	if(IsValidDynamicCP(PLAYER_TEMP[playerid][pt_PIZZA_CHECKPOINT]))
	{
		DestroyDynamicCP(PLAYER_TEMP[playerid][pt_PIZZA_CHECKPOINT]);
		PLAYER_TEMP[playerid][pt_PIZZA_CHECKPOINT] = INVALID_STREAMER_ID;
	}
	if(IsValidDynamicActor(PLAYER_TEMP[playerid][pt_PIZZA_ACTOR]))
	{
		DestroyDynamicActor(PLAYER_TEMP[playerid][pt_PIZZA_ACTOR]);
		PLAYER_TEMP[playerid][pt_PIZZA_ACTOR] = INVALID_STREAMER_ID;
	}
	return 1;
}

GetEnterExitIndexById(id)
{
	for(new i = 0; i != sizeof ENTER_EXIT; i ++)
	{
		if(ENTER_EXIT[i][ee_ID] == 0) continue;
		if(ENTER_EXIT[i][ee_ID] == id) return i;
	}
	return -1;
}

public OnRconLoginAttempt(ip[], password[], success)
{
	if(!success) BlockIpAddress(ip, 12000);
    return 1;
}
CheckCargos(playerid)
{
	if(ACCOUNT_INFO[playerid][ac_CARGOS] >= 1)
    {
    	CHARACTER_INFO[playerid][ch_STATE]= ROLEPLAY_STATE_JAIL;
    	switch(ACCOUNT_INFO[playerid][ac_CARGOS])
    	{
    		case 1: CHARACTER_INFO[playerid][ch_POLICE_JAIL_TIME] = 300;
    		case 2: CHARACTER_INFO[playerid][ch_POLICE_JAIL_TIME] = 500;
    		case 3: CHARACTER_INFO[playerid][ch_POLICE_JAIL_TIME] = 900;
    		case 4: CHARACTER_INFO[playerid][ch_POLICE_JAIL_TIME] = 1200;
    		case 5: CHARACTER_INFO[playerid][ch_POLICE_JAIL_TIME] = 1800;
    		case 6: CHARACTER_INFO[playerid][ch_POLICE_JAIL_TIME] = 3600;
    	}
    	KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][26]);
    	ACCOUNT_INFO[playerid][ac_CARGOS]=0;
    	Update_Cargos(playerid);
    }
    return 1;
}
public OnPlayerSpawn(playerid)
{
	//assert( Antiflood( playerid ) );
	if(PLAYER_TEMP[playerid][LOGUEADO]==false) return Kick(playerid);
    PLAYER_TEMP[playerid][M_SIN_LEER] = GetCountMensajesSinLeer(playerid);
    if(PLAYER_TEMP[playerid][M_SIN_LEER] >= 1)
    {
    	SendClientMessageEx(playerid,0xFED600FF,"~ Tienes %d mensajes sin leer usa /Mensajes",PLAYER_TEMP[playerid][M_SIN_LEER]);
    	new string[60];
    	format(string,sizeof(string),"Tienes %d mensajes sin leer usa~n~~r~~h~/Mensajes",PLAYER_TEMP[playerid][M_SIN_LEER]);
    	MensajesAyuda(playerid,string);
    }
    CheckCargos(playerid);

    if(InfoCorredor[playerid][ENCORRE]==true)
    {
    	SetPlayerTime(playerid, SERVER_TIME[0], SERVER_TIME[1]);
		SetPlayerWeather(playerid, SERVER_WEATHER);
		
		PLAYER_TEMP[playerid][pt_GAME_STATE] = GAME_STATE_NORMAL;
		SetPlayerSkin(playerid, CHARACTER_INFO[playerid][ch_SKIN]);
		SetPlayerArmedWeapon(playerid, 0);
		SetPlayerNormalColor(playerid);
		PLAYER_TEMP[playerid][pt_CONTROL] = false;
		
		PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_IMMUNITY] = gettime() + 3;
		PLAYER_AC_INFO[playerid][CHEAT_STATE_SPAMMER][p_ac_info_IMMUNITY] = gettime() + 3;
		PLAYER_AC_INFO[playerid][CHEAT_PLAYER_HEALTH][p_ac_info_IMMUNITY] = gettime() + 3;
		PLAYER_AC_INFO[playerid][CHEAT_PLAYER_ARMOUR][p_ac_info_IMMUNITY] = gettime() + 3;
		PLAYER_AC_INFO[playerid][CHEAT_UNOCCUPIED_VEHICLE_TP][p_ac_info_IMMUNITY] = gettime() + 5;

        if(INFOCORREDOR[STATUS]==1)
        {
            InfoCorredor[playerid][ENCORRE]=true;
            TeleCorredor(playerid,-1600.6445,3858.8530,121.6122+1.5);
        }
        if(InfoCorredor[playerid][ESCORREDOR]==true)
        {
            SetPlayerTeam(playerid, TEAM_CTFBLUE);
            SetPlayerArmourEx(playerid, 0.0);
            SetPlayerHealthEx(playerid, 15);
            SetPlayerVirtualWorld(playerid, 1);
            TeleCorredor(playerid,-1824.4897,3769.7463,127.8142);
            ResetPlayerWeapons(playerid);
        }
        if(InfoCorredor[playerid][ESATROPELLAR]==true)
        {
            new gustavitho[354];
            strcat(gustavitho, " {6D5ADD}Infernus (RAPIDO)\n");
            strcat(gustavitho, " {ffffff}Sandking (Rapido - grande)\n");
            strcat(gustavitho, " {ffffff}Monster (Lento - enorme)\n");
            strcat(gustavitho, " {ffffff}Bullet (Rapido - pequeño)\n");
            strcat(gustavitho, " {ffffff}Dumped (Muy lento - gigante)\n");
            ShowPlayerDialog(playerid, DIALOG_CORREDOR, DIALOG_STYLE_LIST, "| Selecciona un vehiculo |",gustavitho,"Aceptar", "");
            SetPlayerTeam(playerid, TEAM_CTFRED);    
            SetPlayerHealthEx(playerid, 100);
            SetPlayerVirtualWorld(playerid, 1);
            ResetPlayerWeapons(playerid);
            new randompos=random(21);
            switch (randompos)
            {
                case 0: TeleCorredor(playerid,-1809.5148,3639.7666,120.7457 );
                case 1: TeleCorredor(playerid,-1798.6221,3642.4661,120.7457 );
                case 2: TeleCorredor(playerid,-1781.0298,3644.7856,120.7457 );
                case 3: TeleCorredor(playerid,-1769.9420,3643.1892,120.7457 );
                case 4: TeleCorredor(playerid,-1759.2043,3642.2380,120.7457 );
                case 5: TeleCorredor(playerid,-1740.8889,3641.9180,120.7457 );
                case 6: TeleCorredor(playerid,-1726.8300,3642.1257,120.7457 );
                case 7: TeleCorredor(playerid,-1717.3171,3642.2051,120.7457 );
                case 8: TeleCorredor(playerid,-1701.7502,3641.6660,120.7457 );
                case 9: TeleCorredor(playerid,-1678.4973,3641.5413,120.7457 );
                case 10: TeleCorredor(playerid,-1810.9531,3879.6899,120.7457 );
                case 11: TeleCorredor(playerid,-1798.8694,3877.2891,120.7457 );
                case 12: TeleCorredor(playerid,-1789.0646,3875.4287,120.7457 );
                case 13: TeleCorredor(playerid,-1779.8759,3875.5264,120.7457 );
                case 14: TeleCorredor(playerid,-1766.6306,3875.9016,120.7457 );
                case 15: TeleCorredor(playerid,-1756.5004,3875.8809,120.7457 );
                case 16: TeleCorredor(playerid,-1746.0198,3875.7688,120.7457 );
                case 17: TeleCorredor(playerid,-1733.9930,3875.7932,120.7457 );
                case 18: TeleCorredor(playerid,-1723.9497,3876.0347,120.7457 );
                case 19: TeleCorredor(playerid,-1714.1434,3875.0637,120.7457 );
                case 20: TeleCorredor(playerid,-1706.5140,3875.2742,120.7457 );
                case 21: TeleCorredor(playerid,-1699.3419,3875.6921,120.7457 );
            }
        }
        return 1;
    }

	if(PLAYER_TEMP[playerid][pt_GAME_STATE] == GAME_STATE_OCCUPIED) // Primer spawn
	{
		PLAYER_TEMP[playerid][pt_TIME_PLAYING] = gettime();
		PLAYER_TEMP[playerid][pt_USER_LOGGED] = true;
		
		if(PLAYER_CREW[playerid][player_crew_VALID]) SetPlayerGangZones(playerid);
		SetPlayerSkillLevels(playerid);
		ApplyAnimation(playerid,"SWAT","null",0.0,0,0,0,0,0);
		ApplyAnimation(playerid,"MEDIC","null",0.0,0,0,0,0,0);
		
		switch(CHARACTER_INFO[playerid][ch_STATE])
		{
			case ROLEPLAY_STATE_NORMAL:
			{
				SetPlayerHud(playerid);
				SetCameraBehindPlayer(playerid);
				TogglePlayerControllableEx(playerid, false);
				if(!PLAYER_TEMP[playerid][pt_NEW_USER]) 
				{
					KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][3]);
					PLAYER_TEMP[playerid][pt_TIMERS][3] = SetTimerEx("TogglePlayerControl", 2000, false, "ib", playerid, true);
				}
				else SetPlayerVirtualWorld(playerid, playerid);
			}
			case ROLEPLAY_STATE_JAIL:
			{
				CHARACTER_INFO[playerid][ch_STATE] = ROLEPLAY_STATE_JAIL;
				if(CHARACTER_INFO[playerid][ch_POLICE_JAIL_TIME] < 5) CHARACTER_INFO[playerid][ch_POLICE_JAIL_TIME] = 5;
				KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][15]);
				PLAYER_TEMP[playerid][pt_TIMERS][15] = SetTimerEx("UnjailPlayer", CHARACTER_INFO[playerid][ch_POLICE_JAIL_TIME] * 1000, false, "i", playerid);
				
				PLAYER_TEMP[playerid][pt_ENTER_JAIL_TIME] = gettime();
				SetPlayerPosEx(playerid, JAIL_POSITIONS[ CHARACTER_INFO[playerid][ch_POLICE_JAIL_ID] ][jail_X], JAIL_POSITIONS[ CHARACTER_INFO[playerid][ch_POLICE_JAIL_ID]  ][jail_Y], JAIL_POSITIONS[ CHARACTER_INFO[playerid][ch_POLICE_JAIL_ID]  ][jail_Z], JAIL_POSITIONS[ CHARACTER_INFO[playerid][ch_POLICE_JAIL_ID]  ][jail_ANGLE], JAIL_POSITIONS[ CHARACTER_INFO[playerid][ch_POLICE_JAIL_ID]  ][jail_INTERIOR], 0, true);
				
				new time = CHARACTER_INFO[playerid][ch_POLICE_JAIL_TIME] - (gettime() - PLAYER_TEMP[playerid][pt_ENTER_JAIL_TIME]);
				SendClientMessageEx(playerid, -1, "{E6F8E0}Te quedan %s minutos de condena.", TimeConvert(time));
				
				SetPlayerHud(playerid);
				SetCameraBehindPlayer(playerid);
				TogglePlayerControllableEx(playerid, false);
				KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][3]);
				PLAYER_TEMP[playerid][pt_TIMERS][3] = SetTimerEx("TogglePlayerControl", 2000, false, "ib", playerid, true);
			}
			case ROLEPLAY_STATE_ARRESTED:
			{
				CHARACTER_INFO[playerid][ch_POLICE_JAIL_TIME] = 300;
				
				CHARACTER_INFO[playerid][ch_STATE] = ROLEPLAY_STATE_JAIL;
				if(CHARACTER_INFO[playerid][ch_POLICE_JAIL_TIME] < 5) CHARACTER_INFO[playerid][ch_POLICE_JAIL_TIME] = 5;
				KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][15]);
				PLAYER_TEMP[playerid][pt_TIMERS][15] = SetTimerEx("UnjailPlayer", CHARACTER_INFO[playerid][ch_POLICE_JAIL_TIME] * 1000, false, "i", playerid);
				
				PLAYER_TEMP[playerid][pt_ENTER_JAIL_TIME] = gettime();
				SetPlayerPosEx(playerid, JAIL_POSITIONS[ CHARACTER_INFO[playerid][ch_POLICE_JAIL_ID] ][jail_X], JAIL_POSITIONS[ CHARACTER_INFO[playerid][ch_POLICE_JAIL_ID]  ][jail_Y], JAIL_POSITIONS[ CHARACTER_INFO[playerid][ch_POLICE_JAIL_ID]  ][jail_Z], JAIL_POSITIONS[ CHARACTER_INFO[playerid][ch_POLICE_JAIL_ID]  ][jail_ANGLE], JAIL_POSITIONS[ CHARACTER_INFO[playerid][ch_POLICE_JAIL_ID]  ][jail_INTERIOR], 0, true);
				
				new time = CHARACTER_INFO[playerid][ch_POLICE_JAIL_TIME] - (gettime() - PLAYER_TEMP[playerid][pt_ENTER_JAIL_TIME]);
				SendClientMessageEx(playerid, -1, "{E6F8E0}Te quedan %s minutos de condena.", TimeConvert(time));
				
				SetPlayerHud(playerid);
				SetCameraBehindPlayer(playerid);
				TogglePlayerControllableEx(playerid, false);
				KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][3]);
				PLAYER_TEMP[playerid][pt_TIMERS][3] = SetTimerEx("TogglePlayerControl", 2000, false, "ib", playerid, true);
			}
			case ROLEPLAY_STATE_OWN_PROPERTY:
			{
				new index = GetPropertyIndexByID(CHARACTER_INFO[playerid][ch_INTERIOR_EXTRA]);
				if(index == -1)
				{
					CHARACTER_INFO[playerid][ch_STATE] = ROLEPLAY_STATE_NORMAL;
					CHARACTER_INFO[playerid][ch_INTERIOR_EXTRA] = 0;
					CHARACTER_INFO[playerid][ch_POS][0] = New_User_Pos[0];
					CHARACTER_INFO[playerid][ch_POS][1] = New_User_Pos[1];
					CHARACTER_INFO[playerid][ch_POS][2] = New_User_Pos[2];
					CHARACTER_INFO[playerid][ch_ANGLE] = New_User_Pos[3];
					CHARACTER_INFO[playerid][ch_INTERIOR] = 0;
					
					SetPlayerPosEx(playerid, CHARACTER_INFO[playerid][ch_POS][0], CHARACTER_INFO[playerid][ch_POS][1], CHARACTER_INFO[playerid][ch_POS][2], CHARACTER_INFO[playerid][ch_ANGLE], CHARACTER_INFO[playerid][ch_INTERIOR], 0);
				}
				else
				{
					if(PROPERTY_INFO[index][property_OWNER_ID] == ACCOUNT_INFO[playerid][ac_ID])
					{
						SetPlayerInterior(playerid, PROPERTY_INTERIORS[ PROPERTY_INFO[index][property_ID_INTERIOR] ][property_INT_INTERIOR]);
						SetPlayerVirtualWorld(playerid, PROPERTY_INFO[index][property_ID]);
					}
					else
					{
						CHARACTER_INFO[playerid][ch_STATE] = ROLEPLAY_STATE_NORMAL;
						CHARACTER_INFO[playerid][ch_INTERIOR_EXTRA] = 0;
						CHARACTER_INFO[playerid][ch_POS][0] = PROPERTY_INFO[index][property_EXT_X];
						CHARACTER_INFO[playerid][ch_POS][1] = PROPERTY_INFO[index][property_EXT_Y];
						CHARACTER_INFO[playerid][ch_POS][2] = PROPERTY_INFO[index][property_EXT_Z];
						CHARACTER_INFO[playerid][ch_ANGLE] = PROPERTY_INFO[index][property_EXT_ANGLE];
						CHARACTER_INFO[playerid][ch_INTERIOR] = PROPERTY_INFO[index][property_EXT_INTERIOR];
						
						SetPlayerPosEx(playerid, CHARACTER_INFO[playerid][ch_POS][0], CHARACTER_INFO[playerid][ch_POS][1], CHARACTER_INFO[playerid][ch_POS][2], CHARACTER_INFO[playerid][ch_ANGLE], CHARACTER_INFO[playerid][ch_INTERIOR], 0);
					}
				}
					
				SetPlayerHud(playerid);
				SetCameraBehindPlayer(playerid);
				TogglePlayerControllableEx(playerid, false);
				KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][3]);
				PLAYER_TEMP[playerid][pt_TIMERS][3] = SetTimerEx("TogglePlayerControl", 2000, false, "ib", playerid, true);
			}
			case ROLEPLAY_STATE_HOSPITAL:
			{
				PLAYER_TEMP[playerid][pt_HOSPITAL] = GetNearestHospitalForPlayer(playerid);
				PLAYER_TEMP[playerid][pt_PLAYER_FINISH_HOSPITAL] = false;
				PLAYER_TEMP[playerid][pt_GAME_STATE] = GAME_STATE_DEAD;
				
				TogglePlayerControllableEx(playerid, true);
				TogglePlayerSpectatingEx(playerid, true);
				SetPlayerInterior(playerid, 0);
				CHARACTER_INFO[playerid][ch_INTERIOR_EXTRA] = 0;
				PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] = -1;
				PLAYER_TEMP[playerid][pt_PROPERTY_INDEX] = -1;
				
				PLAYER_TEMP[playerid][pt_HOSPITAL_LIFE] = 35.0;
				UpdateHospitalSizeTextdrawLife(playerid);
				KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][4]);
				PLAYER_TEMP[playerid][pt_TIMERS][4] = SetTimerEx("HealthUp", 1000, false, "i", playerid);
				if(!ACCOUNT_INFO[playerid][ac_SU]) 
				{
					DeleteIlegalInv(playerid);
				}
				PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][0]);
				PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][1]);
				PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][2]);
								
				MensajesAyuda(playerid,"Te llevaron al centro medico, espera a que curen tus heridas");
				InterpolateCameraPos(playerid, Hospital_Cameras_Positions[PLAYER_TEMP[playerid][pt_HOSPITAL]][0], Hospital_Cameras_Positions[PLAYER_TEMP[playerid][pt_HOSPITAL]][1], Hospital_Cameras_Positions[PLAYER_TEMP[playerid][pt_HOSPITAL]][2], Hospital_Cameras_Positions[PLAYER_TEMP[playerid][pt_HOSPITAL]][0], Hospital_Cameras_Positions[PLAYER_TEMP[playerid][pt_HOSPITAL]][1], Hospital_Cameras_Positions[PLAYER_TEMP[playerid][pt_HOSPITAL]][2], 1000, CAMERA_CUT);
				InterpolateCameraLookAt(playerid, Hospital_Cameras_Positions[PLAYER_TEMP[playerid][pt_HOSPITAL]][3], Hospital_Cameras_Positions[PLAYER_TEMP[playerid][pt_HOSPITAL]][4], Hospital_Cameras_Positions[PLAYER_TEMP[playerid][pt_HOSPITAL]][5], Hospital_Cameras_Positions[PLAYER_TEMP[playerid][pt_HOSPITAL]][3], Hospital_Cameras_Positions[PLAYER_TEMP[playerid][pt_HOSPITAL]][4], Hospital_Cameras_Positions[PLAYER_TEMP[playerid][pt_HOSPITAL]][5], 1000, CAMERA_CUT);
			}
			case ROLEPLAY_STATE_CRACK:
			{
				SetPlayerHud(playerid);
				SetCameraBehindPlayer(playerid);
				SendAlertToMedics(playerid);
				TogglePlayerControllableEx(playerid, false);
				KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][3]);
				PLAYER_TEMP[playerid][pt_TIMERS][3] = SetTimerEx("TogglePlayerControl", 2000, false, "ib", playerid, true);
				
				KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][16]);
				PLAYER_TEMP[playerid][pt_TIMERS][16] = SetTimerEx("HealthDown", 3000, false, "i", playerid);
				
				PLAYER_TEMP[playerid][pt_INJURED_POS][0] = CHARACTER_INFO[playerid][ch_POS][0];
				PLAYER_TEMP[playerid][pt_INJURED_POS][1] = CHARACTER_INFO[playerid][ch_POS][1];
				PLAYER_TEMP[playerid][pt_INJURED_POS][2] = CHARACTER_INFO[playerid][ch_POS][2];
				PLAYER_TEMP[playerid][pt_INJURED_POS][3] = CHARACTER_INFO[playerid][ch_ANGLE];
				
				ApplyAnimation(playerid, "SWAT", "gnstwall_injurd", 4.1, true, 0, 0, 1, 0, 1);
				SendClientMessage(playerid, -1, "Estás herido, puedes esperar a un médico o usar {eddd2f}/morir.");
			}
		}
		
		
		if(!PLAYER_TEMP[playerid][pt_NEW_USER]) TextDrawHideForPlayer(playerid, Textdraws[textdraw_LOAD_SCREEN][0]);
		TextDrawHideForPlayer(playerid, Textdraws[textdraw_LOAD_SCREEN][1]);
		TextDrawHideForPlayer(playerid, Textdraws[textdraw_LOAD_SCREEN][2]);
		TextDrawHideForPlayer(playerid, Textdraws[textdraw_LOAD_SCREEN][3]);
		TextDrawHideForPlayer(playerid, Textdraws[textdraw_LOAD_SCREEN][4]);
		
		new neccessary_rep = ACCOUNT_INFO[playerid][ac_LEVEL] * REP_MULTIPLIER;
		if(ACCOUNT_INFO[playerid][ac_REP] < neccessary_rep)
		{
			if(ACCOUNT_INFO[playerid][ac_TIME_FOR_REP] > TIME_FOR_REP) ACCOUNT_INFO[playerid][ac_TIME_FOR_REP] = TIME_FOR_REP;
			if(ACCOUNT_INFO[playerid][ac_TIME_FOR_REP] <= 900) ACCOUNT_INFO[playerid][ac_TIME_FOR_REP] = 3000;
			format(string2,sizeof(string2),"Eres nivel ~y~%d, ~w~te faltan ~y~%s ~w~min/s para la siguiente reputacion",ACCOUNT_INFO[playerid][ac_LEVEL],TimeConvert(ACCOUNT_INFO[playerid][ac_TIME_FOR_REP] / 1000));
			
			if(!PLAYER_TEMP[playerid][pt_NEW_USER]) MensajesAyuda(playerid,string2);
			//SendClientMessageEx(playerid, -1, "Eres {58ACFA}nivel %d, {FFFFFF}te quedan {58ACFA}%s minutos {FFFFFF}para la siguiente reputación.", ACCOUNT_INFO[playerid][ac_LEVEL], TimeConvert(ACCOUNT_INFO[playerid][ac_TIME_FOR_REP] / 1000));
			PLAYER_TEMP[playerid][pt_TIME_PASSED_LAST_REP] = gettime() * 1000;
			PLAYER_TEMP[playerid][pt_TIMERS][2] = SetTimerEx("AddPlayerReputation", ACCOUNT_INFO[playerid][ac_TIME_FOR_REP], false, "i", playerid);
		}
		else 
		{
			format(string2,sizeof(string2),"Escribe: ~y~/Comprarnivel ~w~para subir de nivel, costo: ~y~%d",ACCOUNT_INFO[playerid][ac_LEVEL] * 500);
			MensajesAyuda(playerid,string2);
		}
		//SendClientMessageEx(playerid, -1, "Escribe {58ACFA}/comprarnivel {FFFFFF}para subir al nivel {58ACFA}%d {FFFFFF}por {58ACFA}%d$.", ACCOUNT_INFO[playerid][ac_LEVEL] + 1, ACCOUNT_INFO[playerid][ac_LEVEL] * 150);
		
		if(PLAYER_PHONE[playerid][player_phone_VALID])
		{
			new DBResult:Result, DB_Query[220];
			format(DB_Query, sizeof(DB_Query), 
				"\
					SELECT COUNT() FROM `PHONE_MESSAGES` WHERE `TO` = '%d' AND `OFFLINE` = '1' ORDER BY `DATE` DESC LIMIT 10;\
					UPDATE `PHONE_MESSAGES` SET `OFFLINE` = '0' WHERE `TO` = '%d';\
				",
			PLAYER_PHONE[playerid][player_phone_NUMBER],
			PLAYER_PHONE[playerid][player_phone_NUMBER]);
			
			Result = db_query(Database, DB_Query);
			if(db_num_rows(Result))
			{
				new new_messages = db_get_field_int(Result, 0);
				format(string2,sizeof(string2),"Tienes %d nuevos mensajes desde tu ultima conexion",new_messages);
				if(new_messages > 0) MensajesAyuda(playerid,string2);//SendClientMessageEx(playerid, -1, "Tienes {f1f442}%d {FFFFFF}mensajes nuevos desde tu última conexión.", new_messages);
			}
			db_free_result(Result);
		}
	}
	else if(PLAYER_TEMP[playerid][pt_GAME_STATE] == GAME_STATE_DEAD) // Viene de morir
	{
		if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_HOSPITAL)
		{
			if(!PLAYER_TEMP[playerid][pt_PLAYER_FINISH_HOSPITAL])
			{
				TogglePlayerSpectatingEx(playerid, true);
				SetPlayerInterior(playerid, 0);
				SetPlayerVirtualWorld(playerid, 0);
				PLAYER_TEMP[playerid][pt_PLAYER_FINISH_HOSPITAL] = false;
				CHARACTER_INFO[playerid][ch_STATE] = ROLEPLAY_STATE_HOSPITAL;
				CHARACTER_INFO[playerid][ch_INTERIOR_EXTRA] = 0;
				PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] = -1;
				PLAYER_TEMP[playerid][pt_PROPERTY_INDEX] = -1;
				
				PLAYER_TEMP[playerid][pt_HOSPITAL_LIFE] = 35.0;
				UpdateHospitalSizeTextdrawLife(playerid);
				KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][4]);
				PLAYER_TEMP[playerid][pt_TIMERS][4] = SetTimerEx("HealthUp", 1000, false, "i", playerid);

				if(!ACCOUNT_INFO[playerid][ac_SU]) 
				{
					DeleteIlegalInv(playerid);
				}
				PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][0]);
				PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][1]);
				PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][2]);
				
				ClearPlayerChat(playerid);
				if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED)
				{
					MensajesAyuda(playerid,"Fuiste llevado al centro medico, cuando te recuperes seras llevado a la carcel.");
				}
				else
				{
					MensajesAyuda(playerid,"Fuiste llevado al centro medico, espera mientras te recuperas.");
				}
				
				InterpolateCameraPos(playerid, Hospital_Cameras_Positions[PLAYER_TEMP[playerid][pt_HOSPITAL]][0], Hospital_Cameras_Positions[PLAYER_TEMP[playerid][pt_HOSPITAL]][1], Hospital_Cameras_Positions[PLAYER_TEMP[playerid][pt_HOSPITAL]][2], Hospital_Cameras_Positions[PLAYER_TEMP[playerid][pt_HOSPITAL]][0], Hospital_Cameras_Positions[PLAYER_TEMP[playerid][pt_HOSPITAL]][1], Hospital_Cameras_Positions[PLAYER_TEMP[playerid][pt_HOSPITAL]][2], 1000, CAMERA_CUT);
				InterpolateCameraLookAt(playerid, Hospital_Cameras_Positions[PLAYER_TEMP[playerid][pt_HOSPITAL]][3], Hospital_Cameras_Positions[PLAYER_TEMP[playerid][pt_HOSPITAL]][4], Hospital_Cameras_Positions[PLAYER_TEMP[playerid][pt_HOSPITAL]][5], Hospital_Cameras_Positions[PLAYER_TEMP[playerid][pt_HOSPITAL]][3], Hospital_Cameras_Positions[PLAYER_TEMP[playerid][pt_HOSPITAL]][4], Hospital_Cameras_Positions[PLAYER_TEMP[playerid][pt_HOSPITAL]][5], 1000, CAMERA_CUT);
			}
		}
		else if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK)
		{
			SetPlayerHud(playerid);
			SetPlayerHealthEx(playerid, 60.0);
			SendAlertToMedics(playerid);
			TogglePlayerControllableEx(playerid, false);
			KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][3]);
			PLAYER_TEMP[playerid][pt_TIMERS][3] = SetTimerEx("TogglePlayerControl", 2000, false, "ib", playerid, true);
			
			KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][16]);
			PLAYER_TEMP[playerid][pt_TIMERS][16] = SetTimerEx("HealthDown", 3000, false, "i", playerid);
			
			ApplyAnimation(playerid, "SWAT", "gnstwall_injurd", 4.1, true, 0, 0, 1, 0, 1);
			MensajesAyuda(playerid,"Estas herido, puedes esperar a un medico o usar ~y~/morir.");
		}
	}
	
	if(PLAYER_TEMP[playerid][pt_PLAYER_FINISH_HOSPITAL])
	{
		if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_JAIL)
		{
			KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][15]);
			PLAYER_TEMP[playerid][pt_TIMERS][15] = SetTimerEx("UnjailPlayer", CHARACTER_INFO[playerid][ch_POLICE_JAIL_TIME] * 1000, false, "i", playerid);
		}
		SetPlayerInterior(playerid, CHARACTER_INFO[playerid][ch_INTERIOR]);
		SetPlayerVirtualWorld(playerid, 0);
		SetPlayerHud(playerid);
		TogglePlayerControllableEx(playerid, false);
		PLAYER_TEMP[playerid][pt_PLAYER_FINISH_HOSPITAL] = false;
		KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][3]);
		SetCameraBehindPlayer(playerid);
		PLAYER_TEMP[playerid][pt_TIMERS][3] = SetTimerEx("TogglePlayerControl", 2000, false, "ib", playerid, true);
	}
	
	SetPlayerTime(playerid, SERVER_TIME[0], SERVER_TIME[1]);
	SetPlayerWeather(playerid, SERVER_WEATHER);
	
	PLAYER_TEMP[playerid][pt_GAME_STATE] = GAME_STATE_NORMAL;
	SetPlayerSkin(playerid, CHARACTER_INFO[playerid][ch_SKIN]);
	SetPlayerToys(playerid);
	if(CHARACTER_INFO[playerid][ch_STATE] != ROLEPLAY_STATE_JAIL && CHARACTER_INFO[playerid][ch_STATE] != ROLEPLAY_STATE_CRACK) SetWeaponsForPlayer(playerid);
	SetPlayerArmedWeapon(playerid, 0);
	SetPlayerNormalColor(playerid);
	PLAYER_TEMP[playerid][pt_CONTROL] = false;
	
	PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_IMMUNITY] = gettime() + 3;
	PLAYER_AC_INFO[playerid][CHEAT_STATE_SPAMMER][p_ac_info_IMMUNITY] = gettime() + 3;
	PLAYER_AC_INFO[playerid][CHEAT_PLAYER_HEALTH][p_ac_info_IMMUNITY] = gettime() + 3;
	PLAYER_AC_INFO[playerid][CHEAT_PLAYER_ARMOUR][p_ac_info_IMMUNITY] = gettime() + 3;
	PLAYER_AC_INFO[playerid][CHEAT_UNOCCUPIED_VEHICLE_TP][p_ac_info_IMMUNITY] = gettime() + 5;

    if(ENCASAVIP[playerid] != -1)
    {
     	SetPlayerVirtualWorld(playerid, ENCASAVIP[playerid]);
    }
    if(ENAPARTAMENTO[playerid] != -1)
    {
    	SetPlayerVirtualWorld(playerid, ENAPARTAMENTO[playerid]);
    }
    if(InNegocio[playerid] != -1)
    {
    	//SetPlayerInterior(playerid, 0);
       	SetPlayerVirtualWorld(playerid, InNegocio[playerid]+1);
    }
    if(ENCASAFACCION[playerid] != -1)
    {
    	SetPlayerVirtualWorld(playerid, ENCASAFACCION[playerid]);
    }
    CargarPrendas(playerid);
	return 1;
}

CMD:capturar(playerid)
{
	if(CHARACTER_INFO[playerid][ch_STATE] != ROLEPLAY_STATE_NORMAL) return SendClientMessage(playerid,-1,"* No puedes capturar zonas en este momento"); 
	if(!PLAYER_CREW[playerid][player_crew_VALID]) return SendClientMessage(playerid,-1,"* No eres miembro de una banda!");
	if(CapturoZona[playerid]==1) return SendClientMessage(playerid,-1,"* Espera 1 minuto para capturar de nuevo una zona!");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, 0xFFFF0050, "** Baja De Tu Vehiculo e Intentalo De Nuevo");



	new bool:inzone = false,i;
	foreach( i : Zones)
	{

		if(IsPlayerInArea(playerid, ZInfo[i][ZminX] ,ZInfo[i][ZminY],ZInfo[i][ZmaxX],ZInfo[i][ZmaxY]))
		{
			inzone = true;
			break;
		}
	}
	if(!inzone) return SendClientMessage(playerid,-1,"* Debes estar en una zona de banda para poder usar el comando!");
	if(ZInfo[i][locked])
	{
		new str[100];
		format(str,sizeof str,"Esta zona sera desbloqueada en %s  ",ConvertirSegundosAFK(ZInfo[i][timer]));
		return SendClientMessage(playerid,-1,str);
	}
    new a = GetGZoneID(playerid),Count;
    foreach(new y : Player) if(PLAYER_CREW[y][player_crew_ID] == PLAYER_CREW[playerid][player_crew_ID])
    {
        if(IsPlayerInDynamicArea(y, ZInfo[a][ZoneRectangleZone]) == IsPlayerInDynamicArea(playerid, ZInfo[a][ZoneRectangleZone]))
        {
        	Count++; 
        }
    }
    //if(Count < 3) return SendClientMessage(playerid,-1,"~ Error: Deben de haber minimo 3 miembros de la banda en la zona, para poder conquistarla.");
	if(Capturing[playerid]) return SendClientMessage(playerid,-1,"* Ya estas capturando esta zona! ");
	if(ZInfo[i][U_Attack]) return SendClientMessage(playerid,-1,"* Otra banda ya esta atacando esta zona!");
	if(ZInfo[i][BANDA]  == PLAYER_CREW[playerid][player_crew_ID]) return SendClientMessage(playerid,amarillo,"* Tu banda ya domina esta zona");
	GangZoneFlashForAll(ZInfo[i][_Zone], HexToInt("FF0000AA"));
	Capturing[playerid] = true;
	ZInfo[i][U_Attack] = true;
	CapturoZona[playerid]=1;
	SetTimerEx("Yazonas", 60000, false, "d", playerid);

	new city[45], zone[45];
	GetPlayerZones(playerid, city, zone);
	foreach(new e : Player)
    {
		if(PLAYER_CREW[e][player_crew_ID] == PLAYER_CREW[playerid][player_crew_ID])
		{
			format(string2,sizeof (string2),"~Conquista: '%s'(ID:%d) de tu banda (%s) ha iniciado la captura de una zona en {00FF00}['%s, %s']",PLAYER_TEMP[playerid][pt_NAME],playerid,CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_NAME],city, zone);
	    	SendClientMessage(e,0x81F7D8FF,string2);
	    }
	}
	if(TieneMask[playerid]==false)
	{
		MensajesAyuda(playerid,"Fuiste visto por las camaras se ha dado aviso a las autoridades");
		new message[145];
		format(message, sizeof message, "{4286f4}[Central policía] {FFFFFF}la banda %s esta causando disturbios en {4286f4}%s, %s.",CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_NAME], city, zone);
		SendPoliceRadioMessage(-1, -1, message);
	}
	else
	{
		MensajesAyuda(playerid,"Tienes la mascara para robar");
	}
    foreach(new l : Player)
    {
        if(PLAYER_CREW[l][player_crew_ID] == ZInfo[i][BANDA])
        {
            SendClientMessage(l,0xD2E328FF,"=========================================================");
            format(string2,sizeof(string2),"* La zona en '%s,%s' de tu banda esta asiendo ataca!!",city, zone);
            SendClientMessage(l,0xD2E328FF,string2);
            format(string2,sizeof(string2),"~n~~n~~n~~n~~n~~n~~w~ La zona en~n~~r~~h~~h~'%s,%s' ~n~~w~de tu banda esta asiendo ataca!!",city, zone);
            GameTextForPlayer(l, string2, 7000, 3);
            SendClientMessage(l,0xD2E328FF,"=========================================================");
        }
    }
	ZInfo[i][timercap] = 180;
	ZInfo[i][timercap_main] = SetTimerEx("CaptureZone", 999, true, "ii", playerid, i);
	for(new k=0; k < 7; k ++)
	{
		TextDrawShowForPlayer(playerid, Jugador_Textdraws[ playerid ][textdraw_capturar_zona][k]);
	}
	return 1;
}
/*CMD:fakeping(playerid, params[])
{
	LevelAdmin(playerid, 5);
    new fakeping;
    if(sscanf(params, "d", fakeping)) return SendClientMessage(playerid, 0xFF0000AA, "USAGE: /fakeping <value> (-1 = disable)");

    if(fakeping == -1)
    {
        TogglePlayerFakePing(playerid, false);
    }
    else
    {
        TogglePlayerFakePing(playerid, true);
        SetPlayerFakePing(playerid, fakeping);
    }
    SendClientMessagef(playerid, -1, "fakeping = %d", fakeping);

    return 1;
}
 
CMD:nameforme(playerid, params[])
{
	LevelAdmin(playerid, 5);
	new playertwo, szName[24];
	if(sscanf(params, "us[24]", playertwo, szName)) return SendClientMessage(playerid, 0xFF0000AA, "USAGE: /nameforme <playertwo> <name>");

	SetPlayerNameForPlayer(playerid, playertwo, szName);
	return 1;
}*/

CMD:corredor(playerid,params[])
{
    if(INFOCORREDOR[STATUS]==0 && ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]>=5) return StartCorredor();
    if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_NONE ) return SendClientMessage(playerid,-1,"Debes dejar de trabajar en lo que estes trabajando para entrar");
    if(GetPlayerVirtualWorld(playerid) != 0) return SendClientMessageEx(playerid,-1,"Debes estar en mundo virtual 0, tu mundo es: %d",GetPlayerVirtualWorld(playerid));
    if(GetPlayerInterior(playerid) != 0) return SendClientMessageEx(playerid,-1,"Sal del interior tu interior actual es: %d",GetPlayerInterior(playerid));
    if(INFOCORREDOR[STATUS]==0) return SendClientMessage(playerid, -1, "* El evento aún no da inicio.");
    if(INFOCORREDOR[STATUS]==2) return SendClientMessage(playerid, -1, "* El evento ya empezo.");
    if(InfoCorredor[playerid][ENCORRE]==true) return SendClientMessage(playerid, -1, "* Ya estas en el evento.");
    if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, 0xFFFF0050, "** Baja De Tu Vehiculo e Intentalo De Nuevo");
    if(INFOCORREDOR[STATUS]==1)
    {
    	GetPlayerPos(playerid,PLAYER_TEMP[playerid][pt_Pos_corre_x],PLAYER_TEMP[playerid][pt_Pos_corre_y],PLAYER_TEMP[playerid][pt_Pos_corre_z]);
        SetPlayerHealthEx(playerid, 100);
        new gustavitho[900];
        strcat(gustavitho, " {6D5ADD}"SERVER_NAME" Roleplay\n\n");
        strcat(gustavitho, " {ffffff}Corre que te atropellan:\n");
        strcat(gustavitho, " {ffffff}Es un modo de juego en el que debes correr y evitar ser atropellado por el team contrario\n");
        strcat(gustavitho, " {ffffff}Son 3 rondas, tienes 1 oportunidad para atropellar y para correr, la 3° es la difinitiva\n\n");
        strcat(gustavitho, " {ffffff}Objetivos:\n");
        strcat(gustavitho, " {ffffff}Corredores: Correr y evitar se atropellado, llegar a la meta en maximo 7 minutos.\n");
        strcat(gustavitho, " {ffffff}Atropelladores: Atropellar y evitar que el equipo enemigo llegue a la meta para ganar\n\n");
        strcat(gustavitho, " {ffffff}Habilidades de atropelladores:\n");
        strcat(gustavitho, " {ffffff}CTRL: Cambio de direccion - CLick: Speed bost - Num2: Voltear el vehiculo\n");
        ShowPlayerDialog(playerid, DIALOG_NULL, DIALOG_STYLE_MSGBOX, "| Corre que te atropello |",gustavitho,"Aceptar", "");
        SendClientMessage(playerid,0x00FFFFFF,"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~/ Corre que te atropello /~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
        SendClientMessage(playerid,0x00FFFFFF,"~ Corredores: Correr y evitar se atropellado, llegar a la meta en maximo 7 minutos. ~");
        SendClientMessage(playerid,0x00FFFFFF,"~ Atropelladores: Atropellar y evitar que el equipo enemigo llegue a la meta para ganar. ~");
        SendClientMessage(playerid,0x00FFFFFF,"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
        SetPlayerPosEx(playerid,-1640.5645, 3769.7068, 188.1784,0,0,1);
        PLAYER_TEMP[playerid][pt_EVENTO] = true;
        ResetPlayerWeaponsEx(playerid);
        TextDrawShowForPlayer(playerid, TextdrawCorredores);
        InfoCorredor[playerid][ENCORRE]=true;
        HiveIntaruil(playerid);
        if(Equiped_Inventary[playerid][VALID_EQUIPED]==true)
	 	{
			Equiped_Inventary[playerid][VALID_EQUIPED]=false;
			Equiped_Inventary[playerid][ESTADO]=0;
	 		Equiped_Inventary[playerid][TYPE]=0;
	 	}
        if(Debugcorredor==0)
        {
            Debugcorredor=1;
            InfoCorredor[playerid][ESCORREDOR]=true;
            InfoCorredor[playerid][ESATROPELLAR]=false;
        }
        else if(Debugcorredor==1)
        {
            Debugcorredor=0;
            InfoCorredor[playerid][ESATROPELLAR]=true;
            InfoCorredor[playerid][ESCORREDOR]=false;
            
        }
    }
    return 1;
}
KickFromSalir(playerid)
{
	if(InfoCorredor[playerid][ENCORRE]==true)
    {
        KickFromCorredor(playerid);
    }
	return 1;
}
KickFromCorredor(playerid)
{
    foreach(new i : Player)
    {
        if(InfoCorredor[i][ENCORRE]==true)
        {
            SendClientMessageEx(i, 0x00FF00FF, "* %s(ID:%d) Salió de corre que te atropellan.",PLAYER_TEMP[playerid][pt_NAME],playerid);
        }
    }
    if(InfoCorredor[playerid][ENCORRE]==true)
    {
    	PLAYER_TEMP[playerid][pt_EVENTO] = false;
        InfoCorredor[playerid][ESATROPELLAR]=false;
        TextDrawHideForPlayer(playerid, TextdrawCorredores);
        InfoCorredor[playerid][ESCORREDOR]=false;
        InfoCorredor[playerid][ENCORRE]=false;
        PosicionDeRegreso(playerid);
    }
    return 1;
}
PosicionDeRegreso(playerid)
{
	return SetPlayerPosEx(playerid,PLAYER_TEMP[playerid][pt_Pos_corre_x],PLAYER_TEMP[playerid][pt_Pos_corre_y],PLAYER_TEMP[playerid][pt_Pos_corre_z],0,0,0);
}

CMD:killcorredor(playerid)
{
    if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]>=5)
    {
        format(string2, sizeof(string2), "* Administrador %s(ID:%d) a destruido el evento [CORRE QUE TE ATROPELLAN]",PLAYER_TEMP[playerid][pt_NAME],playerid);
        SendClientMessageToAll(-1,string2);
        DestroyCorredor();
    }
    return 1;
}

CrearVehiculoPRO(playerid,model)
{
	if(InfoCorredor[playerid][ENCORRE]==false) return 1;
    if(IsPlayerInAnyVehicle(playerid))  SendClientMessage(playerid,amarillo,"** {ffffff}Ya estas en un vehiculo, Sal del vehiculo e intentalo nuevamente");
    else
    {
        new Float:x, Float:y, Float:z, Float:ang,vVW,vINT;
        if(IsValidVehicle(PLAYER_TEMP[playerid][tp_VEHICLE]))
	 	{
	 		DestroyVehicle(PLAYER_TEMP[playerid][tp_VEHICLE]);
	 	}
        GetPlayerPos(playerid, x, y, z);
        GetPlayerFacingAngle(playerid, ang);
        PLAYER_TEMP[playerid][tp_VEHICLE] = CreateVehicle(model, x, y, z, ang, 255, 255, 0);
        vVW = GetPlayerVirtualWorld(playerid);
        vINT = GetPlayerInterior(playerid);
        SetVehicleVirtualWorld(PLAYER_TEMP[playerid][tp_VEHICLE], vVW);
        LinkVehicleToInterior(PLAYER_TEMP[playerid][tp_VEHICLE], vINT);
        SetVehicleNumberPlate(PLAYER_TEMP[playerid][tp_VEHICLE], "La Zona");
        PutPlayerInVehicle(playerid, PLAYER_TEMP[playerid][tp_VEHICLE], 0);

        new vehicleid = PLAYER_TEMP[playerid][tp_VEHICLE];

        GLOBAL_VEHICLES[vehicleid][gb_vehicle_GAS] = GLOBAL_VEHICLES[vehicleid][gb_vehicle_MAX_GAS];
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_ACEITE] = GLOBAL_VEHICLES[vehicleid][gb_vehicle_MAX_ACEITE];
	
        GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE] = 1;
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_LIGHTS] = 0;
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ALARM] = 0;
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_DOORS] = 0;
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_BONNET] = 0;
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_BOOT] = 0;
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_OBJECTIVE] = 0;
		UpdateVehicleParams(vehicleid);
         
    }
    return 1;
}

StartCorredor()
{   
    SendClientMessageToAll(amarillo, "* =============================================================================");
    SendClientMessageToAll(amarillo, "* Corre que te atropellan comenzara en 60 segundos, participa usando /Corredor");
    SendClientMessageToAll(amarillo, "* =============================================================================");
    INFOCORREDOR[STATUS]=1;
    Debugcorredor=0;
    INFOCORREDOR[TIEMPO]=0;
    INFOCORREDOR[PUNTOSTUMADORES]=0;
    INFOCORREDOR[PUNTOSCORREDORES]=0;
    GameTextForAll("~n~~n~~n~~r~~h~~h~/~g~~h~~h~Corredor", 10000, 3);
    SetTimer("EmpezarCorredor",60000,false);
    KillTimer(INFOCORREDOR[TIMER]);
    INFOCORREDOR[TIMER] = SetTimer("CheckCorredor",999,true);
    new release1[256];
    format(release1,sizeof(release1),"Cargando...",ConvertirSegundosP(INFOCORREDOR[TIEMPO]));
    TextDrawSetString(TextdrawCorredores,release1);
    return 1;
}
funcion EmpezarCorredor()
{
    
    INFOCORREDOR[STATUS]=2;
    foreach(new i : Player)
    {
        if(InfoCorredor[i][ENCORRE]==true)
        {
            if(InfoCorredor[i][ESCORREDOR]==true)
            {
                SetPlayerTeam(i, TEAM_CTFBLUE);
                TeleCorredor(i,-1824.4897,3769.7463,127.8142);
                SetPlayerArmourEx(i, 0);
                SetPlayerHealthEx(i, 15);
                SendClientMessage(i, amarillo, "* Eres corredor a correr, intenta llegar a la meta, pero cuidado te tumban!");
                GameTextForPlayer(i, "~n~~n~~n~~r~~h~Eres corredor, a correrrr!!", 5000, 3);
                SetPlayerVirtualWorld(i, 1);
            }
            if(InfoCorredor[i][ESATROPELLAR]==true)
            {
                SetPlayerTeam(i, TEAM_CTFRED);
                new gustavitho[354];
                strcat(gustavitho, " {6D5ADD}Infernus (RAPIDO)\n");
                strcat(gustavitho, " {ffffff}Sandking (Rapido - grande)\n");
                strcat(gustavitho, " {ffffff}Monster (Lento - enorme)\n");
                strcat(gustavitho, " {ffffff}Bullet (Rapido - pequeño)\n");
                strcat(gustavitho, " {ffffff}Dumped (Muy lento - gigante)\n");
                ShowPlayerDialog(i, DIALOG_CORREDOR, DIALOG_STYLE_LIST, "| Selecciona un vehiculo |",gustavitho,"Aceptar", "");
                SetPlayerArmourEx(i, 100);
                SetPlayerHealthEx(i, 100);
                SendClientMessage(i, amarillo, "* Eres tumbador, tumbalos y no permitas que llegan a la meta o perderas!");
                GameTextForPlayer(i, "~n~~n~~n~~r~~h~Eres tumbador, a tumbarrr!!", 5000, 3);
                new randompos=random(21);
                switch (randompos)
                {
                        case 0: TeleCorredor(i,-1809.5148,3639.7666,120.7457 );
                        case 1: TeleCorredor(i,-1798.6221,3642.4661,120.7457 );
                        case 2: TeleCorredor(i,-1781.0298,3644.7856,120.7457 );
                        case 3: TeleCorredor(i,-1769.9420,3643.1892,120.7457 );
                        case 4: TeleCorredor(i,-1759.2043,3642.2380,120.7457 );
                        case 5: TeleCorredor(i,-1740.8889,3641.9180,120.7457 );
                        case 6: TeleCorredor(i,-1726.8300,3642.1257,120.7457 );
                        case 7: TeleCorredor(i,-1717.3171,3642.2051,120.7457 );
                        case 8: TeleCorredor(i,-1701.7502,3641.6660,120.7457 );
                        case 9: TeleCorredor(i,-1678.4973,3641.5413,120.7457 );
                        case 10: TeleCorredor(i,-1810.9531,3879.6899,120.7457 );
                        case 11: TeleCorredor(i,-1798.8694,3877.2891,120.7457 );
                        case 12: TeleCorredor(i,-1789.0646,3875.4287,120.7457 );
                        case 13: TeleCorredor(i,-1779.8759,3875.5264,120.7457 );
                        case 14: TeleCorredor(i,-1766.6306,3875.9016,120.7457 );
                        case 15: TeleCorredor(i,-1756.5004,3875.8809,120.7457 );
                        case 16: TeleCorredor(i,-1746.0198,3875.7688,120.7457 );
                        case 17: TeleCorredor(i,-1733.9930,3875.7932,120.7457 );
                        case 18: TeleCorredor(i,-1723.9497,3876.0347,120.7457 );
                        case 19: TeleCorredor(i,-1714.1434,3875.0637,120.7457 );
                        case 20: TeleCorredor(i,-1706.5140,3875.2742,120.7457 );
                        case 21: TeleCorredor(i,-1699.3419,3875.6921,120.7457 );
                }
                SetPlayerVirtualWorld(i, 1);
            }
        }
    }
    return 1;
}
PlayersCorredor()
{
    new count;
    foreach (new i : Player)
    {
      if(InfoCorredor[i][ENCORRE] == true)
      {
        count++;
      }
    }
    return count;
}
PlayersTumbadores()
{
    new count;
    foreach (new i : Player)
    {
      if(InfoCorredor[i][ESATROPELLAR] == true)
      {
        count++;
      }
    }
    return count;
}
PlayersCorredores()
{
    new count;
    foreach (new i : Player)
    {
      if(InfoCorredor[i][ESCORREDOR] == true)
      {
        count++;
      }
    }
    return count;
}
funcion CheckCorredor()
{
    new Float:jX, Float:jY, Float:jZ[MAX_PLAYERS];
    if(INFOCORREDOR[STATUS]==2)
    {
        INFOCORREDOR[TIEMPO]++;
        new release1[256];
        format(release1,sizeof(release1),"~r~~h~~h~Tiempo: ~w~%s - ~r~~h~~h~Limite: ~w~7:00",ConvertirSegundosP(INFOCORREDOR[TIEMPO]));
        TextDrawSetString(TextdrawCorredores,release1);

        if(INFOCORREDOR[PUNTOSTUMADORES]==2)
        {
            return TumbadoresGanan();
        }
        if(INFOCORREDOR[PUNTOSCORREDORES]==2)
        {
            return CorredoresGanan();
        }
        if(PlayersCorredor() ==0)
        {
            DestroyCorredor();
            return SendClientMessageToAll(amarillo, "~ [CORRE QUE TE ATROPELLAN]: Fue cancelado por falta de jugadores");
        }
        if(PlayersCorredores() ==0)
        {
            DestroyCorredor();
            return SendClientMessageToAll(amarillo, "~ [CORRE QUE TE ATROPELLAN]: Fue cancelado por falta de jugadores");
        }
        if(PlayersTumbadores() ==0)
        {
            DestroyCorredor();
            return SendClientMessageToAll(amarillo, "~ [CORRE QUE TE ATROPELLAN]: Fue cancelado por falta de jugadores");
        }
        if(INFOCORREDOR[TIEMPO]==421)
        {
            WinTumbadores();
            INFOCORREDOR[STATUS]=3;
        }
    }
    foreach(new i : Player)
    {
        if(INFOCORREDOR[STATUS]==2)
        {
            if(InfoCorredor[i][ESATROPELLAR]==true)
            {
                if(!IsPlayerInAnyVehicle(i))
                {
                new gustavitho[354];
                strcat(gustavitho, " {6D5ADD}Infernus (RAPIDO)\n");
                strcat(gustavitho, " {ffffff}Sandking (Rapido - grande)\n");
                strcat(gustavitho, " {ffffff}Monster (Lento - enorme)\n");
                strcat(gustavitho, " {ffffff}Bullet (Rapido - pequeño)\n");
                strcat(gustavitho, " {ffffff}Dumped (Muy lento - gigante)\n");
                ShowPlayerDialog(i, DIALOG_CORREDOR, DIALOG_STYLE_LIST, "| Selecciona un vehiculo |",gustavitho,"Aceptar", "");
                }
            }
        }
        GetPlayerPos(i, jX, jY, jZ[i]);
        if(InfoCorredor[i][ENCORRE]==true)
        {
            if(INFOCORREDOR[STATUS]==2)
            {
                if(jZ[i] < 121)
                {
                    if(InfoCorredor[i][ESCORREDOR]==true)
                    {
                        GameTextForPlayer(i, "~n~~n~~n~~r~~h~Te caiste'", 5000, 3);
                        TeleCorredor(i,-1824.4897,3769.7463,127.8142);
                    }
                }
            }
            if(jZ[i] < 115)
            {
                if(INFOCORREDOR[STATUS]==1)
                {
                    TeleCorredor(i,-1600.6445,3858.8530,121.6122);
                    GameTextForPlayer(i, "~n~~n~~n~~r~~h~¿Khe?", 5000, 3);
                }
                if(INFOCORREDOR[STATUS]==2)
                {

                    if(InfoCorredor[i][ESATROPELLAR]==true)
                    {
                        if(!IsPlayerInAnyVehicle(i))
                        {
                        new gustavitho[354];
                        strcat(gustavitho, " {6D5ADD}Infernus (RAPIDO)\n");
                        strcat(gustavitho, " {ffffff}Sandking (Rapido - grande)\n");
                        strcat(gustavitho, " {ffffff}Monster (Lento - enorme)\n");
                        strcat(gustavitho, " {ffffff}Bullet (Rapido - pequeño)\n");
                        strcat(gustavitho, " {ffffff}Dumped (Muy lento - gigante)\n");
                        ShowPlayerDialog(i, DIALOG_CORREDOR, DIALOG_STYLE_LIST, "| Selecciona un vehiculo |",gustavitho,"Aceptar", "");
                        }

                        GameTextForPlayer(i, "~n~~n~~n~~r~~h~Te caiste!", 5000, 3);
                        new randompos=random(21);
                        switch (randompos)
                        {
                        case 0: TeleCorredor(i,-1809.5148,3639.7666,120.7457 );
                        case 1: TeleCorredor(i,-1798.6221,3642.4661,120.7457 );
                        case 2: TeleCorredor(i,-1781.0298,3644.7856,120.7457 );
                        case 3: TeleCorredor(i,-1769.9420,3643.1892,120.7457 );
                        case 4: TeleCorredor(i,-1759.2043,3642.2380,120.7457 );
                        case 5: TeleCorredor(i,-1740.8889,3641.9180,120.7457 );
                        case 6: TeleCorredor(i,-1726.8300,3642.1257,120.7457 );
                        case 7: TeleCorredor(i,-1717.3171,3642.2051,120.7457 );
                        case 8: TeleCorredor(i,-1701.7502,3641.6660,120.7457 );
                        case 9: TeleCorredor(i,-1678.4973,3641.5413,120.7457 );
                        case 10: TeleCorredor(i,-1810.9531,3879.6899,120.7457 );
                        case 11: TeleCorredor(i,-1798.8694,3877.2891,120.7457 );
                        case 12: TeleCorredor(i,-1789.0646,3875.4287,120.7457 );
                        case 13: TeleCorredor(i,-1779.8759,3875.5264,120.7457 );
                        case 14: TeleCorredor(i,-1766.6306,3875.9016,120.7457 );
                        case 15: TeleCorredor(i,-1756.5004,3875.8809,120.7457 );
                        case 16: TeleCorredor(i,-1746.0198,3875.7688,120.7457 );
                        case 17: TeleCorredor(i,-1733.9930,3875.7932,120.7457 );
                        case 18: TeleCorredor(i,-1723.9497,3876.0347,120.7457 );
                        case 19: TeleCorredor(i,-1714.1434,3875.0637,120.7457 );
                        case 20: TeleCorredor(i,-1706.5140,3875.2742,120.7457 );
                        case 21: TeleCorredor(i,-1699.3419,3875.6921,120.7457 );
                        }
                    }
                }
            }
        }
    }
    return 1;
}
WinTumbadores()
{
    SendClientMessageToAll(amarillo, "=====================================================================");
    SendClientMessageToAll(amarillo, "~ [CORRE QUE TE ATROPPELO]: Los tumbadores han ganado la ronda");
    SendClientMessageToAll(amarillo, "=====================================================================");
    INFOCORREDOR[STATUS]=3;
    INFOCORREDOR[PUNTOSTUMADORES]++;
    INFOCORREDOR[TIEMPO]=0;
    foreach(new i : Player)
    {
        if(InfoCorredor[i][ESATROPELLAR]==true)
        {
            if(IsValidVehicle(PLAYER_TEMP[i][tp_VEHICLE]))
		 	{
		 		DestroyVehicle(PLAYER_TEMP[i][tp_VEHICLE]);
		 	}
            SendClientMessageEx(i, amarillo, "~ Tu equipo a ganado esta ronda %d/2, ahora te toca correr!",INFOCORREDOR[PUNTOSTUMADORES]);
        }
        if(InfoCorredor[i][ESCORREDOR]==true)
        {
            InfoCorredor[i][ESCORREDOR]=false;
            InfoCorredor[i][ESATROPELLAR]=true;
            SetPlayerTeam(i, TEAM_CTFRED);
            new gustavitho[354];
            strcat(gustavitho, " {6D5ADD}Infernus (RAPIDO)\n");
            strcat(gustavitho, " {ffffff}Sandking (Rapido - grande)\n");
            strcat(gustavitho, " {ffffff}Monster (Lento - enorme)\n");
            strcat(gustavitho, " {ffffff}Bullet (Rapido - pequeño)\n");
            strcat(gustavitho, " {ffffff}Dumped (Muy lento - gigante)\n");
            ShowPlayerDialog(i, DIALOG_CORREDOR, DIALOG_STYLE_LIST, "| Selecciona un vehiculo |",gustavitho,"Aceptar", "");
            SetPlayerArmourEx(i, 100);
            SetPlayerHealthEx(i, 100);
            SendClientMessage(i, amarillo, "* Eres tumbador, tumbalos y no permitas que llegan a la meta o perderas!");
            GameTextForPlayer(i, "~n~~n~~n~~r~~h~Eres tumbador, a tumbarrr!!", 5000, 3);
            new randompos=random(21);
            switch (randompos)
            {
                case 0: TeleCorredor(i,-1809.5148,3639.7666,120.7457 );
                case 1: TeleCorredor(i,-1798.6221,3642.4661,120.7457 );
                case 2: TeleCorredor(i,-1781.0298,3644.7856,120.7457 );
                case 3: TeleCorredor(i,-1769.9420,3643.1892,120.7457 );
                case 4: TeleCorredor(i,-1759.2043,3642.2380,120.7457 );
                case 5: TeleCorredor(i,-1740.8889,3641.9180,120.7457 );
                case 6: TeleCorredor(i,-1726.8300,3642.1257,120.7457 );
                case 7: TeleCorredor(i,-1717.3171,3642.2051,120.7457 );
                case 8: TeleCorredor(i,-1701.7502,3641.6660,120.7457 );
                case 9: TeleCorredor(i,-1678.4973,3641.5413,120.7457 );
                case 10: TeleCorredor(i,-1810.9531,3879.6899,120.7457 );
                case 11: TeleCorredor(i,-1798.8694,3877.2891,120.7457 );
                case 12: TeleCorredor(i,-1789.0646,3875.4287,120.7457 );
                case 13: TeleCorredor(i,-1779.8759,3875.5264,120.7457 );
                case 14: TeleCorredor(i,-1766.6306,3875.9016,120.7457 );
                case 15: TeleCorredor(i,-1756.5004,3875.8809,120.7457 );
                case 16: TeleCorredor(i,-1746.0198,3875.7688,120.7457 );
                case 17: TeleCorredor(i,-1733.9930,3875.7932,120.7457 );
                case 18: TeleCorredor(i,-1723.9497,3876.0347,120.7457 );
                case 19: TeleCorredor(i,-1714.1434,3875.0637,120.7457 );
                case 20: TeleCorredor(i,-1706.5140,3875.2742,120.7457 );
                case 21: TeleCorredor(i,-1699.3419,3875.6921,120.7457 );
            }
            SetPlayerVirtualWorld(i, 1);
        }
        else if(InfoCorredor[i][ESATROPELLAR]==true)
        {
            if(IsValidVehicle(PLAYER_TEMP[i][tp_VEHICLE]))
		 	{
		 		DestroyVehicle(PLAYER_TEMP[i][tp_VEHICLE]);
		 	}
            InfoCorredor[i][ESATROPELLAR]=false;
            InfoCorredor[i][ESCORREDOR]=true;
            SetPlayerTeam(i, TEAM_CTFBLUE);
            TeleCorredor(i,-1824.4897,3769.7463,127.8142);
            SetPlayerArmourEx(i, 0);
            SetPlayerHealthEx(i, 15);
            SendClientMessage(i, amarillo, "* Eres corredor a correr, intenta llegar a la meta, pero cuidado te tumban!");
            GameTextForPlayer(i, "~n~~n~~n~~r~~h~Eres corredor, a correrrr!!", 5000, 3);
            SetPlayerVirtualWorld(i, 1);
        }
    }
    SetTimer("ResetCheck",2000,false);
    return 1;
}
WinCorredores()
{
    SendClientMessageToAll(amarillo, "=====================================================================");
    SendClientMessageToAll(amarillo, "~ [CORRE QUE TE ATROPPELO]: Los corredores han ganado la ronda");
    SendClientMessageToAll(amarillo, "=====================================================================");
    INFOCORREDOR[PUNTOSCORREDORES]++;
    INFOCORREDOR[TIEMPO]=0;
    INFOCORREDOR[STATUS]=3;
    foreach(new i : Player)
    {
        if(InfoCorredor[i][ESCORREDOR]==true)
        {
            SendClientMessageEx(i, amarillo, "~ Tu equipo a ganado esta ronda %d/2, ahora te toca correr!",INFOCORREDOR[PUNTOSCORREDORES]);
        }
        if(InfoCorredor[i][ESCORREDOR]==true)
        {
            InfoCorredor[i][ESATROPELLAR]=true;
            InfoCorredor[i][ESCORREDOR]=false;
            SetPlayerTeam(i, TEAM_CTFRED);
            new gustavitho[354];
            strcat(gustavitho, " {6D5ADD}Infernus (RAPIDO)\n");
            strcat(gustavitho, " {ffffff}Sandking (Rapido - grande)\n");
            strcat(gustavitho, " {ffffff}Monster (Lento - enorme)\n");
            strcat(gustavitho, " {ffffff}Bullet (Rapido - pequeño)\n");
            strcat(gustavitho, " {ffffff}Dumped (Muy lento - gigante)\n");
            ShowPlayerDialog(i, DIALOG_CORREDOR, DIALOG_STYLE_LIST, "| Selecciona un vehiculo |",gustavitho,"Aceptar", "");
            SetPlayerArmourEx(i, 100);
            SetPlayerHealthEx(i, 100);
            SendClientMessage(i, amarillo, "* Eres tumbador, tumbalos y no permitas que llegan a la meta o perderas!");
            GameTextForPlayer(i, "~n~~n~~n~~r~~h~Eres tumbador, a tumbarrr!!", 5000, 3);
            new randompos=random(21);
            switch (randompos)
            {
                case 0: TeleCorredor(i,-1809.5148,3639.7666,120.7457 );
                case 1: TeleCorredor(i,-1798.6221,3642.4661,120.7457 );
                case 2: TeleCorredor(i,-1781.0298,3644.7856,120.7457 );
                case 3: TeleCorredor(i,-1769.9420,3643.1892,120.7457 );
                case 4: TeleCorredor(i,-1759.2043,3642.2380,120.7457 );
                case 5: TeleCorredor(i,-1740.8889,3641.9180,120.7457 );
                case 6: TeleCorredor(i,-1726.8300,3642.1257,120.7457 );
                case 7: TeleCorredor(i,-1717.3171,3642.2051,120.7457 );
                case 8: TeleCorredor(i,-1701.7502,3641.6660,120.7457 );
                case 9: TeleCorredor(i,-1678.4973,3641.5413,120.7457 );
                case 10: TeleCorredor(i,-1810.9531,3879.6899,120.7457 );
                case 11: TeleCorredor(i,-1798.8694,3877.2891,120.7457 );
                case 12: TeleCorredor(i,-1789.0646,3875.4287,120.7457 );
                case 13: TeleCorredor(i,-1779.8759,3875.5264,120.7457 );
                case 14: TeleCorredor(i,-1766.6306,3875.9016,120.7457 );
                case 15: TeleCorredor(i,-1756.5004,3875.8809,120.7457 );
                case 16: TeleCorredor(i,-1746.0198,3875.7688,120.7457 );
                case 17: TeleCorredor(i,-1733.9930,3875.7932,120.7457 );
                case 18: TeleCorredor(i,-1723.9497,3876.0347,120.7457 );
                case 19: TeleCorredor(i,-1714.1434,3875.0637,120.7457 );
                case 20: TeleCorredor(i,-1706.5140,3875.2742,120.7457 );
                case 21: TeleCorredor(i,-1699.3419,3875.6921,120.7457 );
            }
            SetPlayerVirtualWorld(i, 1);
        }
        else if(InfoCorredor[i][ESATROPELLAR]==true)
        {
            if(IsValidVehicle(PLAYER_TEMP[i][tp_VEHICLE]))
		 	{
		 		DestroyVehicle(PLAYER_TEMP[i][tp_VEHICLE]);
		 	}
            InfoCorredor[i][ESATROPELLAR]=false;
            InfoCorredor[i][ESCORREDOR]=true;
            SetPlayerTeam(i, TEAM_CTFBLUE);
            TeleCorredor(i,-1824.4897,3769.7463,127.8142);
            SetPlayerArmourEx(i, 0);
            SetPlayerHealthEx(i, 15);
            SendClientMessage(i, amarillo, "* Eres corredor a correr, intenta llegar a la meta, pero cuidado te tumban!");
            GameTextForPlayer(i, "~n~~n~~n~~r~~h~Eres corredor, a correrrr!!", 5000, 3);
            SetPlayerVirtualWorld(i, 1);
        }
    }
    SetTimer("ResetCheck",2000,false);
    return 1;
}
funcion ResetCheck()
{
    INFOCORREDOR[STATUS]=2;
    return 1;
}
TumbadoresGanan()
{
    INFOCORREDOR[STATUS]=0;
    Debugcorredor=0;
    INFOCORREDOR[TIEMPO]=0;
    INFOCORREDOR[PUNTOSTUMADORES]=0;
    INFOCORREDOR[PUNTOSCORREDORES]=0;
    KillTimer(INFOCORREDOR[TIMER]);
    SendClientMessageToAll(amarillo, "=====================================================================");
    SendClientMessageToAll(amarillo, "~ [CORRE QUE TE ATROPPELO]: Los {FF0000}tumbadores{FFFF00} han ganado!");
    SendClientMessageToAll(amarillo, "=====================================================================");
    foreach(new i : Player)
    {
        if(InfoCorredor[i][ESATROPELLAR]==true)
        {
            ACCOUNT_INFO[i][ac_SD] += 10;
			PlayerPlaySoundEx(i, 1058, 0.0, 0.0, 0.0);
			new DB_Query[128];
			format(DB_Query, sizeof DB_Query, "UPDATE `CUENTA` SET `SD` = '%d' WHERE `ID` = '%d';", ACCOUNT_INFO[i][ac_SD], ACCOUNT_INFO[i][ac_ID]);
			db_query(Database, DB_Query);
            GivePlayerCash(i,50000);
            SendClientMessage(i, amarillo, "* Tu equipo a ganado, ganaste 10 "SERVER_COIN" y $50,000!");
            GameTextForPlayer(i, "~n~~n~~n~~r~~h~Ganaste!!", 5000, 3);
        }
        if(InfoCorredor[i][ENCORRE]==true)
        {
            InfoCorredor[i][ESATROPELLAR]=false;
            TextDrawHideForPlayer(i, TextdrawCorredores);
            InfoCorredor[i][ESCORREDOR]=false;
            InfoCorredor[i][ENCORRE]=false;
            PosicionDeRegreso(i);
        }
    }
    return 1;
}
CorredoresGanan()
{
    INFOCORREDOR[STATUS]=0;
    Debugcorredor=0;
    INFOCORREDOR[TIEMPO]=0;
    INFOCORREDOR[PUNTOSTUMADORES]=0;
    INFOCORREDOR[PUNTOSCORREDORES]=0;
    KillTimer(INFOCORREDOR[TIMER]);
    SendClientMessageToAll(amarillo, "=====================================================================");
    SendClientMessageToAll(amarillo, "~ [CORRE QUE TE ATROPPELO]: Los {00FFFF}corredores{FFFF00} han ganado!");
    SendClientMessageToAll(amarillo, "=====================================================================");
    foreach(new i : Player)
    {
        if(InfoCorredor[i][ESCORREDOR]==true)
        {
        	ACCOUNT_INFO[i][ac_SD] += 10;
			PlayerPlaySoundEx(i, 1058, 0.0, 0.0, 0.0);
			new DB_Query[128];
			format(DB_Query, sizeof DB_Query, "UPDATE `CUENTA` SET `SD` = '%d' WHERE `ID` = '%d';", ACCOUNT_INFO[i][ac_SD], ACCOUNT_INFO[i][ac_ID]);
			db_query(Database, DB_Query);
            GivePlayerCash(i,50000);
            SendClientMessage(i, amarillo, "* Tu equipo a ganado, ganaste 10 "SERVER_COIN" y $50,000!");
            GameTextForPlayer(i, "~n~~n~~n~~r~~h~Ganaste!!", 5000, 3);
        }
        if(InfoCorredor[i][ENCORRE]==true)
        {
            InfoCorredor[i][ESATROPELLAR]=false;
            TextDrawHideForPlayer(i, TextdrawCorredores);
            InfoCorredor[i][ESCORREDOR]=false;
            InfoCorredor[i][ENCORRE]=false;
            PosicionDeRegreso(i);
        }
    }
    return 1;
}
DestroyCorredor()
{
    INFOCORREDOR[STATUS]=0;
    Debugcorredor=0;
    INFOCORREDOR[TIEMPO]=0;
    INFOCORREDOR[PUNTOSTUMADORES]=0;
    INFOCORREDOR[PUNTOSCORREDORES]=0;
    KillTimer(INFOCORREDOR[TIMER]);
    foreach(new i : Player)
    {
        if(InfoCorredor[i][ENCORRE]==true)
        {
        	if(IsValidVehicle(PLAYER_TEMP[i][tp_VEHICLE]))
		 	{
		 		DestroyVehicle(PLAYER_TEMP[i][tp_VEHICLE]);
		 	}
            InfoCorredor[i][ESATROPELLAR]=false;
            TextDrawHideForPlayer(i, TextdrawCorredores);
            InfoCorredor[i][ESCORREDOR]=false;
            InfoCorredor[i][ENCORRE]=false;
            PosicionDeRegreso(i);
        }
    }
    return 1;
}

CMD:mensajesenviados(playerid,params[])
{
	new bQuery[100],DBResult:jResult;
	format(bQuery, sizeof(bQuery), "SELECT * FROM `MENSAJESENVIADOS` WHERE `YO` = '%d'", ACCOUNT_INFO[playerid][ac_ID]);
    jResult = db_query(Database, bQuery);
    if(!db_num_rows(jResult))
    {
      	 SendClientMessage(playerid,0xCCCCCCFF,"* No has enviado ningun mensaje.");
	     return 1;
	}
    db_free_result(jResult);

	ManagePlayerMensajesE(playerid);
	return 1;
}

ManagePlayerMensajesE(playerid)
{
    new string[2820],query[256],DBResult:Result,enviador,Enviador_[22],leido,leidogg[20];
    format(query,sizeof(query),"SELECT * FROM `MENSAJESENVIADOS` WHERE YO = '%d' limit 20 OFFSET %d",ACCOUNT_INFO[playerid][ac_ID],PAGE[playerid]);
    Result = db_query(Database,query);

    if(!db_num_rows(Result))
    {
    	PAGE[playerid]=0;
	  	SendClientMessage(playerid,0xCCCCCCFF,"* No hay mas mensajes enviados.");
	  	ManagePlayerMensajesE(playerid);
	    return 1;
	}

    new dialog[2671];
    format(dialog, sizeof dialog, "{FFFFFF}#ID\tLeido\tEnviado a:\tFecha y hora\n");
    new lineas;
    for(new i; i < db_num_rows(Result); i++)
    {
    lineas++;
    new text[256], labelid;
    db_get_field_assoc(Result, "Fecha",text, 256);
    db_get_field_assoc(Result, "AID",query, 20);
    enviador = strval(query);
    db_get_field_assoc(Result, "Leido",query, 20);
    leido = strval(query);
    db_get_field_assoc(Result, "ID",query, 20);
    labelid = strval(query);
	switch(leido)
	{
	    case 0: leidogg="{EA0000}No{ffffff}";
	    case 1: leidogg="{00D900}Si{ffffff}";
	}

 	format(Enviador_,sizeof(Enviador_),"%s",GetNamePlayerFromDB(enviador));

    for(new l = 0; l < strlen(text); ++l)
        if(text[l] == '{')
            if(text[l+7] == '}')
                strdel(text, l, l+8);

    if(strlen(text) > 37)
    {
        strdel(text, 34, strlen(text));
        strcat(text, "...", sizeof(text));
    }

    format(string, sizeof(string), "ID %d \t| '%s' \t| {%s}\"%s\" \t{ffffff}| %s\n", labelid,leidogg,Randomcolor(),Enviador_,text);
    strcat(dialog, string);
    db_next_row(Result);
    }
    format(string, sizeof(string), "{FF0000}Cerrar");
    strcat(dialog, string);

    PAGINA[playerid] = lineas;
    ShowPlayerDialog(playerid, DIALOG_MENSAJEENVIADO, DIALOG_STYLE_TABLIST_HEADERS, "| MENSAJES ENVIADOS |", dialog, "Seleccionar", "Ver mas");
    db_free_result(Result);
    return 1;
}

GetCountMensajesSinLeer(playerid)
{
	new Query1[70], DBResult: qresult;
	new count = 0;
	format(Query1, sizeof(Query1), "SELECT Leido FROM `MENSAJES` WHERE `AID` = '%d' AND Leido='0';",ACCOUNT_INFO[playerid][ac_ID]);
	qresult = db_query(Database, Query1);
	count = db_num_rows(qresult);
	db_free_result(qresult);
	return count;
}
CMD:mensajes(playerid,params[])
{
	new bQuery[100],DBResult:jResult;
	format(bQuery, sizeof(bQuery), "SELECT * FROM `MENSAJES` WHERE `AID` = '%d'", ACCOUNT_INFO[playerid][ac_ID]);
    jResult = db_query(Database, bQuery);
    if(!db_num_rows(jResult))
    {
      	 SendClientMessage(playerid,0xCCCCCCFF,"* No tienes ningun mensaje en tu data");
	     return 1;
	}
    db_free_result(jResult);
    
	ManagePlayerMensajes(playerid);
	return 1;
}

ManagePlayerMensajes(playerid)
{
	new string[2820],query[256],DBResult:Result,enviador,Enviador_[22],leido,leidogg[20];
    format(query,sizeof(query),"SELECT * FROM `MENSAJES` WHERE AID = '%d' limit 20 OFFSET %d",ACCOUNT_INFO[playerid][ac_ID],PAGE[playerid]);
    Result = db_query(Database,query);

    if(!db_num_rows(Result))
    {
    	PAGE[playerid]=0;
	  	SendClientMessage(playerid,0xCCCCCCFF,"* No hay mas mensajes enviados.");
	  	ManagePlayerMensajes(playerid);
	    return 1;
	}

    new dialog[2671];
    format(dialog, sizeof dialog, "{FFFFFF}#ID\tLeido\tEnviado por:\tFecha y hora\n");
    new lineas;
    for(new i; i < db_num_rows(Result); i++)
    {
    lineas++;
    new text[256], labelid;
    db_get_field_assoc(Result, "Fecha",text, 256);
    db_get_field_assoc(Result, "Enviador",query, 20);
    enviador = strval(query);
    db_get_field_assoc(Result, "Leido",query, 20);
    leido = strval(query);
    db_get_field_assoc(Result, "ID",query, 20);
    labelid = strval(query);
	switch(leido)
	{
	    case 0: leidogg="{EA0000}No{ffffff}";
	    case 1: leidogg="{00D900}Si{ffffff}";
	}

 	format(Enviador_,sizeof(Enviador_),"%s",GetNamePlayerFromDB(enviador));

    for(new l = 0; l < strlen(text); ++l)
        if(text[l] == '{')
            if(text[l+7] == '}')
                strdel(text, l, l+8);

    if(strlen(text) > 37)
    {
        strdel(text, 34, strlen(text));
        strcat(text, "...", sizeof(text));
    }

    format(string, sizeof(string), "ID %d \t| '%s' \t| {%s}\"%s\" \t{ffffff}| %s\n", labelid,leidogg,Randomcolor(),Enviador_,text);
    strcat(dialog, string);
    db_next_row(Result);
    }
    format(string, sizeof(string), "{FF0000}Cerrar");
    strcat(dialog, string);

    PAGINA[playerid] = lineas;
    ShowPlayerDialog(playerid, DIALOG_MENSAJEENVIADO_ME, DIALOG_STYLE_TABLIST_HEADERS, "| MENSAJES RECIBIDOS |", dialog, "Seleccionar", "Ver mas");
    db_free_result(Result);
    return 1;
}

CMD:amigos(playerid, params[])
{
	new string[256];
	format(string,sizeof(string),"{ffffff}Agregar amigo\nMis amigos");
    ShowPlayerDialog(playerid, DIALOG_AMIGOS, DIALOG_STYLE_LIST, " PANEL AMIGO ", string, ">>", "X");
    PlayerPlaySound(playerid,1139,0.0,0.0,0.0);
	return 1;
}
ShowPlayerFriends(playerid)
{
	new string[2820],query[256],DBResult:Result,userid,on_;
    format(query,sizeof(query),"SELECT ID1,ID2 FROM `AMIGOS` WHERE ID1 ='%d'",ACCOUNT_INFO[playerid][ac_ID]);
    Result = db_query(Database,query);
    for(new i; i < db_num_rows(Result); i++)
    {
	    new text[256];
	    db_get_field_assoc(Result, "ID2",query, 20);
	    userid = strval(query);

        format(text,sizeof(text),"%s",GetNamePlayerFromDB(userid));

        on_=GetConectedPlayer(userid);
        //
        new enlinea[25];
        switch(on_)
        {
            case 0:
            {
				enlinea="{FF0000}Desconectado";
			}
			case 1:
			{
			    enlinea="{00FF00}Conectado";
			}
		}
		
	    for(new l = 0; l < strlen(text); ++l)
	        if(text[l] == '{')
	            if(text[l+7] == '}')
	                strdel(text, l, l+8);

	    if(strlen(text) > 37)
	    {
	        strdel(text, 34, strlen(text));
	        strcat(text, "...", sizeof(text));
	    }

	    if(!i)
	        format(string, sizeof(string), "ID %d Nombre: %s %s", userid,text,enlinea);
	    else

	        format(string, sizeof(string), "%s\nID %d Nombre: %s %s", string, userid,text,enlinea);
        db_next_row(Result);
    }
    ShowPlayerDialog(playerid, DIALOG_AMIGOS_MANAGE, DIALOG_STYLE_LIST, "| TUS AMIG@S |", string, ">>", "X");
    db_free_result(Result);
	return 1;
}
GetCountFriends(playerid)
{
	new count=0;
	new DBResult:Result,Query[256];
	format(Query, sizeof(Query), "SELECT * FROM `AMIGOS` WHERE `ID1` = '%d';",ACCOUNT_INFO[playerid][ac_ID]);
    Result = db_query(Database, Query);
	for(new a; a < db_num_rows(Result); a++)
    {
		count++;
		db_next_row(Result);
    }
    db_free_result(Result);
	return count;
}
IsAlreadyFriend(playerid,id)
{
	new isv,DBResult:Result,Query[100];
	format(Query, sizeof(Query), "SELECT * FROM `AMIGOS` WHERE `ID2` = '%d' AND `ID1` = '%d'",id,ACCOUNT_INFO[playerid][ac_ID]);
    Result = db_query(Database, Query);
	if(db_num_rows(Result))
    {
		isv =1;
    }
    else
    {
        isv = 0;
    }
    db_free_result(Result);
	return isv;
}
CMD:ah(playerid,params[])
{
	LevelAdmin(playerid, 1);
	SendClientMessage(playerid,-1,"________________");
	SendClientMessage(playerid,-1,"Level 1: muteard,desmuteard");
	SendClientMessage(playerid,-1,"Level 2: a,trabajos,getid,getname,aka,adv,kick,spec,specoff,freeze,unfreeze");
	SendClientMessage(playerid,-1,"Level 3: pest,pinv,pexp,pbank,unjail,traerveh,goto,get,unban,jail,ban,cls,tban,dban,revivir,borrarop");
	SendClientMessage(playerid,-1,"dtban,rac,rac2,rv,pm,deletead,setthirst,setcansancio,sethungry,setgas,repairveh,sethealth,ls,lsdb");
	SendClientMessage(playerid,-1,"Level 4: ip,cls,pm,settime,sethealth,setarmour");
	SendClientMessage(playerid,-1,"Level 5: setlevel,setwork,setworkexp,setbmlevel,asay,spos,v,dv");
	SendClientMessage(playerid,-1,"setname,setpass,delete,eco,darskin,setfstyle,vpcar,admac,fakeping");
	SendClientMessage(playerid,-1,"________________");
	return 1;
}
CMD:sonido(playerid, params[])
{
	new sonido;
	if(sscanf(params, "d", sonido)) return SendClientMessage(playerid, -1," USO: /sonido [id]");
	PlayerPlaySound(playerid, sonido, 0.0, 0.0, 0.0);
	format(string2,sizeof(string2),"sonido: %d reproduciendose",sonido);
	SendClientMessage(playerid,-1,string2);
	return 1;
}

CMD:morir(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] != ROLEPLAY_STATE_CRACK) return ShowPlayerMessage(playerid, "No estás malherido", 3);
	
	SetPlayerHealthEx(playerid, 0.0);
	Auto_SendPlayerAction(playerid, "ha elegido la salida rápida.");
	return 1;
}

public OnPlayerDeath(playerid, killerid, reason)
{
	 
	if(PLAYER_TEMP[playerid][pt_KICKED]) return 1;
	
	KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][16]);
	PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_IMMUNITY] = gettime() + 3;
	PLAYER_AC_INFO[playerid][CHEAT_STATE_SPAMMER][p_ac_info_IMMUNITY] = gettime() + 3;
	PLAYER_AC_INFO[playerid][CHEAT_PLAYER_HEALTH][p_ac_info_IMMUNITY] = gettime() + 3;
	PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_NOFUEL][p_ac_info_IMMUNITY] = gettime() + 15;
	if(!ACCOUNT_INFO[playerid][ac_SU]) SetPlayerArmourEx(playerid, 0.0);
	
	if(ac_Info[CHEAT_DEATH_SPAMMER][ac_Enabled])
	{
		if(gettime() > PLAYER_AC_INFO[playerid][CHEAT_DEATH_SPAMMER][p_ac_info_IMMUNITY])
		{
			new interval = GetTickDiff(GetTickCount(), PLAYER_TEMP[playerid][pt_ANTIFLOOD_DEATH]);
			if(interval < 50)
			{
				if(!ac_Info[CHEAT_DEATH_SPAMMER][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_DEATH_SPAMMER, float(interval));
				else
				{
					if(gettime() - PLAYER_AC_INFO[playerid][CHEAT_DEATH_SPAMMER][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_DEATH_SPAMMER][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_DEATH_SPAMMER][p_ac_info_DETECTIONS] = 0;
					else PLAYER_AC_INFO[playerid][CHEAT_DEATH_SPAMMER][p_ac_info_DETECTIONS] ++;
					
					PLAYER_AC_INFO[playerid][CHEAT_DEATH_SPAMMER][p_ac_info_LAST_DETECTION] = gettime();
					if(PLAYER_AC_INFO[playerid][CHEAT_DEATH_SPAMMER][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_DEATH_SPAMMER][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_DEATH_SPAMMER, float(interval));
				}
			}
			PLAYER_TEMP[playerid][pt_ANTIFLOOD_DEATH] = GetTickCount();
		}
	}
	if(Capturing[playerid]==true)
    {
    	SalioDeConquista(playerid);
	}
	HidePlayerMessage(playerid);

	ENAPARTAMENTO[playerid] = -1;
	ENCASAVIP[playerid]=-1;
	InNegocio[playerid]=-1;
	ENGARAJE[playerid]=-1;
	ENCASAFACCION[playerid]=-1;
	if(PLAYER_TEMP[playerid][pt_NEW_USER])
	{
		PLAYER_MISC[playerid][MISC_CONFIG_HUD] = true;
		PLAYER_MISC[playerid][MISC_CONFIG_TIME] = true;
		PLAYER_MISC[playerid][MISC_CONFIG_ADMIN] = true;
		
		SavePlayerMisc(playerid);
		PLAYER_TEMP[playerid][pt_NEW_USER] = false;
		SetPlayerVirtualWorld(playerid, 0);
		SetCameraBehindPlayer(playerid);
		KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][18]);
	}
	
	if(IsPlayerConnected(killerid) && CHARACTER_INFO[killerid][ch_STATE] == ROLEPLAY_STATE_NORMAL && CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_NORMAL)
	{
		if(!PLAYER_WORKS[killerid][WORK_POLICE])
		{
			if(gettime() > PLAYER_TEMP[killerid][pt_LAST_SAFE_ZONE_WARNING] + 60)
			{
				if(IsPlayerInSafeZone(killerid))
				{
					SendClientMessage(killerid, -1, "Estás en una zona segura, la policía ha sido avisada del homicidio.");
					
					
					new city[45], zone[45];
					GetPlayerZones(killerid, city, zone);
	
					new message[145];
					format(message, sizeof message, "{4286f4}[Central policía] {FFFFFF}%s ha causado un asesinato en {4286f4}%s, %s.", PLAYER_TEMP[killerid][pt_RP_NAME], city, zone);
					SendPoliceRadioMessage(-1, -1, message);
					
					PLAYER_TEMP[killerid][pt_LAST_SAFE_ZONE_WARNING] = gettime();
				}
			}
		}
	}
	
	if(PLAYER_TEMP[playerid][pt_CHANGE_INTERIOR]) Hide_Select_Interior_Casa(playerid);
	if(PLAYER_TEMP[playerid][COMPRANDO_ACCESORIOS]) Hide_Buy_Toys(playerid);
	if(PLAYER_TEMP[playerid][pt_VIENDO_TEXTURAS] == true) LoadTextureForCasa(playerid), HideShowTexturaCasa(playerid);
	if(PLAYER_TEMP[playerid][ABRIO_ARMERIA] == true) Hide_Armeria_Casa(playerid);
	if(PLAYER_TEMP[playerid][ABRIO_ARMARIO]==true) Hide_Armario_Casavip(playerid);
	if(PLAYER_TEMP[playerid][ABRIENDO_BAUL]==true) Hide_Baul_Vehicle(playerid);
	if(PLAYER_TEMP[playerid][INTERCAMBIANDO_NEVERA] == true) Hide_Nevera_Casa(playerid);
	if(ABRIO_INVENTARIO[playerid]==true) HiveIntaruil(playerid);

	if(PLAYER_TEMP[playerid][pt_SELECT_TEXTDRAW])
	{
		if(PLAYER_TEMP[playerid][pt_CLOTHING_SHOP] != -1) ClosePlayerClothingMenu(playerid);
		if(PLAYER_TEMP[playerid][pt_TOYS_SHOP]) ClosePlayerToysMenu(playerid);
		if(PLAYER_TEMP[playerid][pt_SHOP]) HidePlayerShop(playerid);
	}
	if(PLAYER_TEMP[playerid][P_SHOPCAR]) HideBuyVehicleMenu(playerid);
	if(PI[playerid][P_SHOP_WEAPON]) HidePlayerTextdrawsAmmu(playerid);
	if(PI[playerid][P_SHOP_SKIN]) HidePlayerTextdrawsSkin(playerid);
	if(PLAYER_TALLER[playerid][OPEN_F]) HideTaller(playerid);
	StopAudioStreamForPlayer(playerid);
	SetPlayerDrunkLevel(playerid, 0);
	KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][3]);
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	GetPlayerPos(playerid, CHARACTER_INFO[playerid][ch_POS][0], CHARACTER_INFO[playerid][ch_POS][1], CHARACTER_INFO[playerid][ch_POS][2]);
	GetPlayerFacingAngle(playerid, CHARACTER_INFO[playerid][ch_ANGLE]);
	CHARACTER_INFO[playerid][ch_INTERIOR] = GetPlayerInterior(playerid);
	HidePlayerHud(playerid);
	CancelEdit(playerid);
	HidePlayerDialog(playerid);
	SetNormalPlayerMarkers(playerid);
	EndPlayerJob(playerid, false);
	PLAYER_TEMP[playerid][pt_HUNGRY_MESSAGE] = false;
	PLAYER_TEMP[playerid][pt_THIRST_MESSAGE] = false;
	PLAYER_TEMP[playerid][CANSANCIO_MESSAGE] = false;
	PLAYER_TEMP[playerid][pt_PLAYER_IN_ATM] = false;
	PLAYER_TEMP[playerid][pt_CUFFED] = false;
	PLAYER_TEMP[playerid][pt_CUFFING] = false;
	PLAYER_TEMP[playerid][pt_PLAYER_WAITING_MP3_HTTP] = false;
	if(PLAYER_TEMP[playerid][pt_WANT_TAXI])
	{
		PLAYER_TEMP[playerid][pt_WANT_TAXI] = false;
		DisablePlayerTaxiMark(playerid);
	}
	if(PLAYER_TEMP[playerid][pt_WANT_MECHANIC])
	{
		PLAYER_TEMP[playerid][pt_WANT_MECHANIC] = false;
		DisablePlayerMechanicMark(playerid);
	}
	if(PLAYER_TEMP[playerid][pt_PLAYER_IN_CALL]) EndPhoneCall(playerid);
	if(PLAYER_TEMP[playerid][pt_GPS_MAP]) HidePlayerGpsMap(playerid);
	if(PLAYER_TEMP[playerid][pt_TUNING_GARAGE_SHOP]) CancelPlayerTuningShop(playerid);
	if(PLAYER_TEMP[playerid][pt_IN_TUNING_GARAGE])
	{
		PLAYER_TEMP[playerid][pt_IN_TUNING_GARAGE] = false;
		SetVehicleVirtualWorldEx(PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID], 0);
		SetVehiclePosEx(PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID], 246.551910, 17.474195, 2.363841);
		SetVehicleZAngle(PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID], 0.0);
	}
	if(PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] != INVALID_VEHICLE_ID)
	{
		if(TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_JOB_STARTED])
		{
			if(PLAYER_TEMP[playerid][pt_TRASH_DRIVER])
			{
				SendClientMessage(TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_PASSENGER_ID], -1, "{E6F8E0}El trabajo se ha cancelado porque tu compañero ha dejado de trabajar.");
				CancelTrashWork(playerid, TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_PASSENGER_ID], PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID]);
			}
			if(PLAYER_TEMP[playerid][pt_TRASH_PASSENGER])
			{
				SendClientMessage(TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_DRIVER_ID], -1, "{E6F8E0}El trabajo se ha cancelado porque tu compañero ha dejado de trabajar.");
				CancelTrashWork(TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_DRIVER_ID], playerid, PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID]);
			}
		}
	}
	
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_JAIL)
	{
		KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][15]);
		PLAYER_TEMP[playerid][pt_PLAYER_FINISH_HOSPITAL] = true;
		CHARACTER_INFO[playerid][ch_POLICE_JAIL_TIME] -= gettime() - PLAYER_TEMP[playerid][pt_ENTER_JAIL_TIME];
		if(CHARACTER_INFO[playerid][ch_POLICE_JAIL_TIME] < 5) CHARACTER_INFO[playerid][ch_POLICE_JAIL_TIME] = 5;
		PLAYER_TEMP[playerid][pt_ENTER_JAIL_TIME] = gettime();
		SetSpawnInfo(playerid, NO_TEAM, CHARACTER_INFO[playerid][ch_SKIN], JAIL_POSITIONS[ CHARACTER_INFO[playerid][ch_POLICE_JAIL_ID] ][jail_X], JAIL_POSITIONS[ CHARACTER_INFO[playerid][ch_POLICE_JAIL_ID]  ][jail_Y], JAIL_POSITIONS[ CHARACTER_INFO[playerid][ch_POLICE_JAIL_ID]  ][jail_Z], JAIL_POSITIONS[ CHARACTER_INFO[playerid][ch_POLICE_JAIL_ID]  ][jail_ANGLE], 0, 0, 0, 0, 0, 0);
		CHARACTER_INFO[playerid][ch_INTERIOR] = JAIL_POSITIONS[ CHARACTER_INFO[playerid][ch_POLICE_JAIL_ID]  ][jail_INTERIOR];
	}
	else
	{
		if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || GetPlayerInterior(playerid) != 0 || GetPlayerVirtualWorld(playerid) != 0)
		{
			DisablePlayerInjuredMark(playerid);
			if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_NORMAL || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) PLAYER_TEMP[playerid][pt_HOSPITAL] = GetNearestHospitalForPlayer(playerid);
			if(PLAYER_TEMP[playerid][pt_HOSPITAL] == -1) PLAYER_TEMP[playerid][pt_HOSPITAL] = 1;
			CHARACTER_INFO[playerid][ch_STATE] = ROLEPLAY_STATE_HOSPITAL;
			PLAYER_TEMP[playerid][pt_PLAYER_FINISH_HOSPITAL] = false;
			KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][16]);
			SetSpawnInfo(playerid, NO_TEAM, CHARACTER_INFO[playerid][ch_SKIN], CHARACTER_INFO[playerid][ch_POS][0], CHARACTER_INFO[playerid][ch_POS][1], CHARACTER_INFO[playerid][ch_POS][2], CHARACTER_INFO[playerid][ch_ANGLE], 0, 0, 0, 0, 0, 0);
			if(IsPlayerConnected(killerid) && killerid != INVALID_PLAYER_ID)
			{
				new string[200];
				format(string,sizeof(string),"Has asesinado a ~r~%s",PLAYER_TEMP[playerid][pt_NAME]);
				PlayerTextDrawSetString(killerid,PlayerTextdraws[killerid][textdraw_ayuda][3],string);
				PlayerTextDrawShow(killerid,PlayerTextdraws[killerid][textdraw_ayuda][3]); 
				TIMER_MENSAJEAYUDA[killerid][2] = SetTimerEx("OcultarAyuda4", 7000, 0,"d",killerid); 
			}
		}
		else
		{
			CHARACTER_INFO[playerid][ch_STATE] = ROLEPLAY_STATE_CRACK;
			
			GetPlayerPos(playerid, PLAYER_TEMP[playerid][pt_INJURED_POS][0], PLAYER_TEMP[playerid][pt_INJURED_POS][1], PLAYER_TEMP[playerid][pt_INJURED_POS][2]);
			GetPlayerFacingAngle(playerid, PLAYER_TEMP[playerid][pt_INJURED_POS][3]);
			
			SetSpawnInfo(playerid, NO_TEAM, CHARACTER_INFO[playerid][ch_SKIN], PLAYER_TEMP[playerid][pt_INJURED_POS][0], PLAYER_TEMP[playerid][pt_INJURED_POS][1], PLAYER_TEMP[playerid][pt_INJURED_POS][2], PLAYER_TEMP[playerid][pt_INJURED_POS][3], 0, 0, 0, 0, 0, 0);
			//if(IsPlayerConnected(killerid) && CHARACTER_INFO[killerid][ch_STATE] == ROLEPLAY_STATE_NORMAL && CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_NORMAL)
			if(IsPlayerConnected(killerid) && killerid != INVALID_PLAYER_ID)
			{
				new string[200];
				format(string,sizeof(string),"Has herido a ~y~%s",PLAYER_TEMP[playerid][pt_NAME]);
				MensajeAyuda_4(killerid,string);
			}
		}
	}
	
	PLAYER_TEMP[playerid][pt_GAME_STATE] = GAME_STATE_DEAD;
   	return 1;
}

ptask SavePlayerData[360000](playerid)
{
	SaveUserData(playerid);
	SavePlayerToysData(playerid);
	SavePlayerVehicles(playerid, false);
	SavePlayerSkills(playerid);
	SavePlayerWorks(playerid);
	SavePlayerMisc(playerid);
	SavePlayerWeaponsData(playerid);
	return 1;
}
public OnPlayerRequestClass(playerid, classid)
{
	//assert( Antiflood( playerid ) );
	if(PLAYER_TEMP[playerid][pt_GAME_STATE] == GAME_STATE_CONNECTED) // Recién conectado
	{
		if(!PLAYER_TEMP[playerid][pt_USER_VALID_NAME] || PLAYER_TEMP[playerid][pt_KICKED]) return 0;
		
		TogglePlayerSpectatingEx(playerid, true);
		ClearPlayerChat(playerid);
		PLAYER_TEMP[playerid][pt_LABEL] = CreateDynamic3DTextLabel("¬[°]¬", -1, 0.0, 0.0, 0.3, 20.0, playerid, .testlos = true);
	    PLAYER_TEMP[playerid][pt_LOGUEAR]=true;
	    SendClientMessage(playerid,-1,"Presiona \"Tu contra\" para ingresar tu contraseña, para loguearte o registrarte oprime \"PLAY\"");
	    SendClientMessage(playerid,-1,"Seguido de ingresar tu contraseña mayor a 6 caracteres");
	    new reele[25];

	 	format(reele,sizeof(reele),"Tu contra");
	 	PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][textdraw_login][2], reele);
		format(reele,sizeof(reele),"%s",PLAYER_TEMP[playerid][pt_NAME]);
	 	PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][textdraw_login][1], reele);
 
	 	PLAYER_TEMP[playerid][pt_TIMER_LOGIN]=60;
	 	PLAYER_TEMP[playerid][pt_TIMERS][20] = SetTimerEx("UpdateGamePlay",999,true,"d",playerid);

		for(new i=0; i <= 5; i++) PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][textdraw_login][i]);
		for(new i=0; i <= 12; i++) TextDrawShowForPlayer(playerid, Textdraws[textdraw_login_imagine][i]);
	    
		if(PLAYER_TEMP[playerid][pt_USER_EXIT])
		{
			// Usuario registrado
			if(ACCOUNT_INFO[playerid][ac_ID] == 0 || strcmp(PLAYER_TEMP[playerid][pt_NAME], ACCOUNT_INFO[playerid][ac_NAME], false)) // No coincide
			{
				Kick(playerid);
				return 1;
			}
			
			if(strcmp(PLAYER_TEMP[playerid][pt_IP], ACCOUNT_INFO[playerid][ac_IP], false)) // La IP actual no es la misma IP de la última conexión
			{
				/*SendClientMessage(playerid, -1, "{00FF80}Tu dirección IP cambio desde tu última conexión.");
				format(ACCOUNT_INFO[playerid][ac_IP], 16, "%s", PLAYER_TEMP[playerid][pt_IP]);*/
			}
			CamaraInicio(playerid);

			//ShowDialog(playerid, DIALOG_LOGIN);

			PLAYER_TEMP[playerid][pt_OPCION_LOGIN] = LOGUEARSE;
			SelectTextDraw(playerid, 0xe8d08fFF);
		}
		else
		{
			// Nuevo usuario
			/*PLAYER_TEMP[playerid][pt_REGISTER_ACTOR] = CreateActor(Intro_Skins[0][0], 444.200225, 514.112182, 1001.419494, 0.939619); //ACTOR DE LA HABITACION DE LA INTRO
			SetActorVirtualWorld(PLAYER_TEMP[playerid][pt_REGISTER_ACTOR], playerid + 10);
			ApplyActorAnimation(PLAYER_TEMP[playerid][pt_REGISTER_ACTOR], "INT_SHOP", "shop_loop", 4.1, 1, 1, 1, 0, 0);
			
			SetPlayerVirtualWorld(playerid, playerid + 10);
			InterpolateCameraPos(playerid, 447.1717, 512.9380, 1001.6884, 447.1717, 512.9380, 1001.6884, 4000);
			InterpolateCameraLookAt(playerid, 446.4043, 513.5767, 1001.7037, 446.4043, 513.5767, 1001.7037, 4000);
			SetPlayerInterior(playerid, 12);*/
			CamaraInicio(playerid);
			//ShowDialog(playerid, DIALOG_REGISTER);

			PLAYER_TEMP[playerid][pt_OPCION_LOGIN] = REGISTRARSE;
			SelectTextDraw(playerid, 0xe8d08fFF);
		}
	}
	else if(PLAYER_TEMP[playerid][pt_GAME_STATE] == GAME_STATE_NORMAL || PLAYER_TEMP[playerid][pt_GAME_STATE] == GAME_STATE_DEAD) // Viene de jugar
	{
		SetSpawnInfo(playerid, NO_TEAM, CHARACTER_INFO[playerid][ch_SKIN], CHARACTER_INFO[playerid][ch_POS][0], CHARACTER_INFO[playerid][ch_POS][1], CHARACTER_INFO[playerid][ch_POS][2], CHARACTER_INFO[playerid][ch_ANGLE], 0, 0, 0, 0, 0, 0);
		SpawnPlayer(playerid);
		return 0;
	}
	
	PLAYER_TEMP[playerid][pt_GAME_STATE] = GAME_STATE_OCCUPIED;
	return 1;
}

public OnPlayerRequestSpawn(playerid) // Intentar 'spawnear' mediante la selección de skin << spawn >>
{
	//assert( Antiflood( playerid ) );
	if(PLAYER_TEMP[playerid][pt_GAME_STATE] == GAME_STATE_CONNECTED) CallLocalFunction("OnPlayerRequestClass", "dd", playerid, 0);


    return 0;
}

public OnGameModeInit()
{	
	//Mysql
	/*DatabaseMysql = mysql_connect(SQL_HOST,SQL_USUARIO,SQL_DB,SQL_CONTRA);
	print("Conectando...");
	if(mysql_errno() != 0)
	{
		print("No se pudo conectar.");
	}
	else
	{
	    print("LA CONEXION CON LA BASE DE DATOS FUNCIONA.");
	    print("LA CONEXION CON LA BASE DE DATOS FUNCIONA.");
	    print("LA CONEXION CON LA BASE DE DATOS FUNCIONA.");
		print("LA CONEXION CON LA BASE DE DATOS FUNCIONA.");
	}*/

	PickcupCorredores = CreatePickup(1276, 2, -1343.5343, 3766.6404, 193.1861,1);
	//=========
	SetGameModeText(SERVER_GAMEMODE);
    SendRconCommand("hostname "SERVER_HOSTNAME"");
    SendRconCommand("language "SERVER_LANGUAGE"");
	SendRconCommand("weburl "SERVER_WEBSITE"");
	/*SendRconCommand("minconnectiontime 6000");
    SendRconCommand("ackslimit 6000");*/
    SendRconCommand("messageslimit 100");
    SendRconCommand("conncookies 1");
	SendRconCommand("cookielogging 0");

	SendRconCommand("minconnectiontime 	300");
	SendRconCommand("ackslimit 			5000");
	SendRconCommand("rcon 0");

	SendRconCommand("chatlogging 1");
	SendRconCommand("output 0");
	SendRconCommand("logqueries 0");
	SendRconCommand("timestamp 0");
	SendRconCommand("announce 1");
	SendRconCommand("query 1");
	SendRconCommand("stream_rate 1000");
	SendRconCommand("loadfs fs-block-player-list");

	ConnectDatabase();
	UsePlayerPedAnims();
	
	
	//UsePlayerPedAnims();
	DisableInteriorEnterExits();
	ShowPlayerMarkers(PLAYER_MARKERS_MODE_GLOBAL);
	EnableStuntBonusForAll(false);
	ManualVehicleEngineAndLights();
	FormatDialogStrings();
	//UpdateFecha();
	SanAndreas();
	
	LoadServerInfo();
	UpdateEconomy();
	CrearInformacionInicio();
	LoadTextdrawsPlayers();
	SetTimer("AFKChecker",1000,true);
	return 1;
}


FormatDialogStrings()
{
	new Dialog_Lines_String[256];
	
		/* PIZZA FOOD */
	format(DIALOG_FOOD_PIZZA_String, sizeof DIALOG_FOOD_PIZZA_String, "Producto\tPrecio\n");
	for(new i; i != sizeof PIZZA_FOOD; i ++)
	{
		format(Dialog_Lines_String, sizeof Dialog_Lines_String, "{FFFFFF}%d. %s\t{90C3D4}%d$\n", i + 1, PIZZA_FOOD[i][food_NAME], PIZZA_FOOD[i][food_PRICE]);
		strcat(DIALOG_FOOD_PIZZA_String, Dialog_Lines_String);
	}
	
		/* CLUCKIN FOOD */
	format(DIALOG_FOOD_CLUCKIN_String, sizeof DIALOG_FOOD_CLUCKIN_String, "Producto\tPrecio\n");
	for(new i; i != sizeof CLUCKIN_BELL_FOOD; i ++)
	{
		format(Dialog_Lines_String, sizeof Dialog_Lines_String, "{FFFFFF}%d. %s\t{90C3D4}%d$\n", i + 1, CLUCKIN_BELL_FOOD[i][food_NAME], CLUCKIN_BELL_FOOD[i][food_PRICE]);
		strcat(DIALOG_FOOD_CLUCKIN_String, Dialog_Lines_String);
	}
	
		/* BURGER_SHOT FOOD */
	format(DIALOG_FOOD_BURGER_String, sizeof DIALOG_FOOD_BURGER_String, "Producto\tPrecio\n");
	for(new i; i != sizeof BURGER_SHOT_FOOD; i ++)
	{
		format(Dialog_Lines_String, sizeof Dialog_Lines_String, "{FFFFFF}%d. %s\t{90C3D4}%d$\n", i + 1, BURGER_SHOT_FOOD[i][food_NAME], BURGER_SHOT_FOOD[i][food_PRICE]);
		strcat(DIALOG_FOOD_BURGER_String, Dialog_Lines_String);
	}
	
		/* 24/7 LIST */
	format(DIALOG_247_LIST_String, sizeof DIALOG_247_LIST_String, "Producto\tPrecio\n");
	for(new i = 0; i != sizeof Supermarket_Product_List; i ++)
	{
		format(Dialog_Lines_String, sizeof(Dialog_Lines_String), "{FFFFFF}%d. %s\t{90C3D4}%d$\n", i + 1, Supermarket_Product_List[i][product_NAME], Supermarket_Product_List[i][product_PRICE]);
		strcat(DIALOG_247_LIST_String, Dialog_Lines_String);
	}
	
	//GPS
	new city[45], zone[45];
	
	//GPS Hospitales
	format(DIALOG_PLAYER_GPS_SITE_0_String, sizeof DIALOG_PLAYER_GPS_SITE_0_String, "{E6F8E0}Lugar\t{90C3D4}Zona\n");
	for(new i = 0; i != sizeof(Hospital_Spawn_Positions); i++ )
	{
		GetPointZone(Hospital_Spawn_Positions[i][0], Hospital_Spawn_Positions[i][1], city, zone);
		format(Dialog_Lines_String, sizeof Dialog_Lines_String, "{FFFFFF}Hospital %d\t{90C3D4}%s, %s\n", i + 1, city, zone);
		strcat(DIALOG_PLAYER_GPS_SITE_0_String, Dialog_Lines_String);
	}
	
	//GPS CONCES
	format(DIALOG_PLAYER_GPS_SITE_7_String, sizeof DIALOG_PLAYER_GPS_SITE_7_String, "{E6F8E0}Lugar\t{90C3D4}Zona\n");
	for(new i = 0; i != sizeof(SELL_VEHICLES_SHOPS_SPAWN); i++ )
	{
		GetPointZone(SELL_VEHICLES_SHOPS_SPAWN[i][0], SELL_VEHICLES_SHOPS_SPAWN[i][1], city, zone);
		format(Dialog_Lines_String, sizeof Dialog_Lines_String, "{FFFFFF}# %d\t{90C3D4}%s, %s\n", i + 1, city, zone);
		strcat(DIALOG_PLAYER_GPS_SITE_7_String, Dialog_Lines_String);
	}
	
	//Colores bandas
	format(DIALOG_CREATE_CREW_COLOR_String, sizeof DIALOG_CREATE_CREW_COLOR_String, "");
	for(new i = 0; i != sizeof(RandomColors); i++)
	{
		format(Dialog_Lines_String, sizeof(Dialog_Lines_String), "{%06x}color %d\n", RandomColors[i] >>> 8, i + 1);
		strcat(DIALOG_CREATE_CREW_COLOR_String, Dialog_Lines_String);
	}
	
	//Animaciones
	format(DIALOG_ANIMS_String, sizeof DIALOG_ANIMS_String, "");
	strcat(DIALOG_ANIMS_String, "{E6F8E0}>> /rendirse\n");
	strcat(DIALOG_ANIMS_String, "{E6F8E0}>> /blowjob\n");
	strcat(DIALOG_ANIMS_String, "{E6F8E0}>> /rodar\n");
	strcat(DIALOG_ANIMS_String, "{E6F8E0}>> /borracho\n");
	strcat(DIALOG_ANIMS_String, "{E6F8E0}>> /bomba\n");
	strcat(DIALOG_ANIMS_String, "{E6F8E0}>> /apuntar\n");
	strcat(DIALOG_ANIMS_String, "{E6F8E0}>> /reir\n");
	strcat(DIALOG_ANIMS_String, "{E6F8E0}>> /amenazar\n");
	strcat(DIALOG_ANIMS_String, "{E6F8E0}>> /paja\n");
	strcat(DIALOG_ANIMS_String, "{E6F8E0}>> /herido\n");
	strcat(DIALOG_ANIMS_String, "{E6F8E0}>> /cruzarbrazos\n");
	strcat(DIALOG_ANIMS_String, "{E6F8E0}>> /recostarse\n");
	strcat(DIALOG_ANIMS_String, "{E6F8E0}>> /cubrirse\n");
	strcat(DIALOG_ANIMS_String, "{E6F8E0}>> /vomitar\n");
	strcat(DIALOG_ANIMS_String, "{E6F8E0}>> /comer\n");
	strcat(DIALOG_ANIMS_String, "{E6F8E0}>> /despedir\n");
	strcat(DIALOG_ANIMS_String, "{E6F8E0}>> /nalgada\n");
	strcat(DIALOG_ANIMS_String, "{E6F8E0}>> /agonizar\n");
	strcat(DIALOG_ANIMS_String, "{E6F8E0}>> /besar\n");
	strcat(DIALOG_ANIMS_String, "{E6F8E0}>> /crack\n");
	strcat(DIALOG_ANIMS_String, "{E6F8E0}>> /mear\n");
	strcat(DIALOG_ANIMS_String, "{E6F8E0}>> /sentarse\n");
	strcat(DIALOG_ANIMS_String, "{E6F8E0}>> /fucku\n");
	strcat(DIALOG_ANIMS_String, "{E6F8E0}>> /llamar\n");
	strcat(DIALOG_ANIMS_String, "{E6F8E0}>> /taichi\n");
	strcat(DIALOG_ANIMS_String, "{E6F8E0}>> /beber\n");
	strcat(DIALOG_ANIMS_String, "{E6F8E0}>> /boxear\n");
	strcat(DIALOG_ANIMS_String, "{E6F8E0}>> /saludar\n");
	strcat(DIALOG_ANIMS_String, "{E6F8E0}>> /llorar\n");
	strcat(DIALOG_ANIMS_String, "{E6F8E0}>> /dormir\n");
	strcat(DIALOG_ANIMS_String, "{E6F8E0}>> /rapear\n");
	strcat(DIALOG_ANIMS_String, "{E6F8E0}>> /astrip\n");
	strcat(DIALOG_ANIMS_String, "{E6F8E0}>> /bailar\n");
	strcat(DIALOG_ANIMS_String, "{E6F8E0}>> /alentar\n");
	strcat(DIALOG_ANIMS_String, "{E6F8E0}>> /hablar\n");
	strcat(DIALOG_ANIMS_String, "{E6F8E0}>> /asiento\n");
			
	return 1;
}


new 
	Club_Strippers_Actor[2],
	Club_Bar_Actor,
	Club_Actors[7];
	
new RandomStripAnimations[][] =
{
	"STR_A2B",
	"strip_G",
	"STR_B2C",
	"STR_C1",
	"STR_C2"
};

new RandomPayStripAnimations[][] =
{
	"PLY_CASH",
	"PUN_CASH",
	"PUN_HOLLER",
	"PUN_LOOP"
};
	
SanAndreas()
{
	CreateTextDraws();
	LoadEnterExits();
	//LoadProperties();
	LoadCrews();

	SetMyWorldTime(180); // 3 horas reales = 24 horas en juego
	
	//HABITACION INTRO PARA REGISTRARSE
	SetDynamicObjectMaterialText(CreateDynamicObject(19353, 445.2722, 514.8859, 1001.42, 0.0000, 0.3999, 0.3542), 0, SERVER_SHORT_NAME, 140, "Gabriola", 55, 1, -8092540, 0, 1); //TEXTO SA:MP DE LA HABITACION DE LA INTRO
	SetDynamicObjectMaterialText(CreateDynamicObject(19353, 445.2722, 514.8859, 1001.3, 0.0000, 0.3999, 0.3542), 0, "roleplay", 140, "Gabriola", 55, 1, -8092540, 0, 1); //TEXTO 'SERVER 1.01' DE LA HABITACION DE LA INTRO
	//CreateDynamicObject(19624, 446.51517, 514.81940, 1001.63550,   0.00000, 0.00000, 29.44436); //MALETA ROCKSTAR DE LA HABITACION DE LA INTRO
	SetDynamicObjectMaterial(CreateDynamicObject(19893, 444.1881, 514.5712, 1001.3964,   0.0000, 0.0000, 0.0), 1, 18646, "matcolours", "grey-50-percent", 0xFFFFFFFF); //LAPTOP DE LA HABITACION DE LA INTRO
	SetDynamicObjectMaterial(CreateDynamicObject(18981, 444.61780, 510.80801, 1004.14160,   0.00000, 90.00000, 0.00000), 0, 18646, "matcolours", "black", 0xFFFFFFFF); //TECHO NEGRO PRIMERA HABITACION DE LA INTRO
	CreateDynamicObject(2102, 443.90033, 514.92853, 1001.66467,   0.00000, 0.00000, 38.35522); //RADIO DE LA HABITACION DE LA INTRO

	
	//Putis
	for(new i = 0; i < sizeof Banderitas; i++)
	{
		Banderitas[i][ID] = CreateDynamicObject(17951, Banderitas[i][PosBanderaX],Banderitas[i][PosBanderaY],Banderitas[i][PosBanderaZ],Banderitas[i][PosBanderaRX],Banderitas[i][PosBanderaRY],Banderitas[i][PosBanderaRZ], -1, -1, -1, 300.00, 300.00);
		SetTimerEx("ChangeBanderita", 60000, true, "d",i);
		TextureCountryFlagBandera(Banderitas[i][ID],0,random(33));
	}

	for(new i = 0; i < sizeof Banderitas_Inicio; i++)
	{
		Banderitas_Inicio[i][ID] = CreateDynamicObject(19306, Banderitas_Inicio[i][PosBanderaX],Banderitas_Inicio[i][PosBanderaY],Banderitas_Inicio[i][PosBanderaZ],Banderitas_Inicio[i][PosBanderaRX],Banderitas_Inicio[i][PosBanderaRY],Banderitas_Inicio[i][PosBanderaRZ], -1, -1, -1, 300.00, 300.00);
		SetTimerEx("ChangeBanderita_Inicio", 60000, true, "d",i);
		TextureCountryFlagBandera(Banderitas_Inicio[i][ID],1,random(33));
	}

	for(new i = 0; i < sizeof SALIDALUGAR; i++)
	{
		CreateDynamicObject(19902, SALIDALUGAR[i][xXx],SALIDALUGAR[i][yYy],SALIDALUGAR[i][zZz],0,0,0, .worldid = -1, .interiorid = -1);
		//CreateDynamic3DTextLabel("Oprime {c9c244}'ENTER' {FFFFFF}para salir del lugar.", 0xFFFFFFFF, SALIDALUGAR[i][xXx],SALIDALUGAR[i][yYy],SALIDALUGAR[i][zZz], 5.0, .testlos = true, .worldid = -1);
	}
	/*for(new i = 0; i < sizeof RADARCHECK; i++)
	{
		CreateDynamicObject(1682, RADARCHECK[i][xXx],RADARCHECK[i][yYy],RADARCHECK[i][zZz],RADARCHECK[i][rotX],RADARCHECK[i][rotY],RADARCHECK[i][rotZ], .worldid = -1, .interiorid = -1);
	}*/
	for(new i = 0; i < sizeof OBJETO_ROTACION; i++)
	{
		OBJETO_ROTACION[i][OBJETO_IDA] = CreateDynamicPickup(OBJETO_ROTACION[i][OBJETO], 1, OBJETO_ROTACION[i][xXx],OBJETO_ROTACION[i][yYy],OBJETO_ROTACION[i][zZz], .worldid = -1, .interiorid = -1, .streamdistance = 300);
	}

	for(new i = 0; i < sizeof SALIDACASAVIP; i++)
	{
		CreateDynamicObject(19902, SALIDACASAVIP[i][POSX],SALIDACASAVIP[i][POSY],SALIDACASAVIP[i][POSZ],0,0,0, .worldid = -1, .interiorid = -1);
	}
 
	for(new i=0; i < sizeof(Radios); ++i)
	{
		MAX_RADIO++;
	}

	for(new i = 0; i < sizeof POSTALLERES; i++)
	{
		CreateDynamic3DTextLabel("Oprime 'Y' para reparar/pintar el vehiculo\n        /Mejoras para mejorar el motor.", 0xFFFF0080, POSTALLERES[i][xXx],POSTALLERES[i][yYy],POSTALLERES[i][zZz]+0.5, 10.0, .testlos = true, .worldid = -1);
	}

	for(new i = 0; i < sizeof POSPEAJES; i++)
	{
		POSPEAJES[i][STATUS] = 0;
		CreateDynamic3DTextLabel("PEAJE\nOprime 'Y' para ingresar a la ciudad.", 0xFFFF0080, POSPEAJES[i][xXx],POSPEAJES[i][yYy],POSPEAJES[i][zZz]+0.5, 50.0, .testlos = true, .worldid = -1);
		POSPEAJES[i][OBJETO] = CreateDynamicObject(968, POSPEAJES[i][PosBx],POSPEAJES[i][PosBy],POSPEAJES[i][PosBz],POSPEAJES[i][RotBx],POSPEAJES[i][RotBy],POSPEAJES[i][RotBz],-1);
	}
	CreateDynamicObject(19902, 1462.7211,-1064.6125,213.4975,0,0,0, .worldid = -1, .interiorid = -1);
	CreateDynamicObject(19902, 1458.6122,-1071.2032,213.4975,0,0,0, .worldid = -1, .interiorid = -1);
 
	//Minero
	for(new i =0; i < sizeof OBJETO_MINA; i++)
	{

		i = Iter_Free(Objetos_Mina);
	    if(i==-1) return printf("Ocurrio un error al crear el objeto de minas");
	    new randa=random(2);
	    switch(randa)
	    {
	    	case 0:OBJETO_MINA[i][ID] = CreateDynamicObject(905, OBJETO_MINA[i][PosX],OBJETO_MINA[i][PosY],OBJETO_MINA[i][PosZ],0,0,0, .worldid = -1, .interiorid = -1);
	    	case 1:OBJETO_MINA[i][ID] = CreateDynamicObject(2936, OBJETO_MINA[i][PosX],OBJETO_MINA[i][PosY],OBJETO_MINA[i][PosZ],0,0,0, .worldid = -1, .interiorid = -1);
	    	case 2:OBJETO_MINA[i][ID] = CreateDynamicObject(2936, OBJETO_MINA[i][PosX],OBJETO_MINA[i][PosY],OBJETO_MINA[i][PosZ],0,0,0, .worldid = -1, .interiorid = -1);
	    }
	    switch(OBJETO_MINA[i][MINERAL_TYPE])
	    {
	    	case MINERAL_GRANITO: format(string2,sizeof(string2),"Granito");
	    	case MINERAL_COBRE: format(string2,sizeof(string2),"Cobre");
	    	case MINERAL_HIERRO: format(string2,sizeof(string2),"Hierro");
	    	case MINERAL_PLATA: format(string2,sizeof(string2),"Plata");
	    }
		
		OBJETO_MINA[i][LABEL]=CreateDynamic3DTextLabel(string2, 0xFFFF0080,OBJETO_MINA[i][PosX],OBJETO_MINA[i][PosY],OBJETO_MINA[i][PosZ]+0.5, 30.0, .testlos = false, .worldid = -1);

		OBJETO_MINA[i][STRACTING]=false;
		OBJETO_MINA[i][STRAC_VALID]=false;
		Iter_Add(Objetos_Mina, i);
	}
	
	CreateDynamic3DTextLabel("Caja fuerte\n'Y'", 0xFFFFFFFF,1241.8928,234.8473,598.6759, 10.0, .testlos = true, .worldid = -1);
	CreateDynamic3DTextLabel("Caja fuerte\n'Y'", 0xFFFFFFFF,1889.2452,-21.7584,639.2450, 10.0, .testlos = true, .worldid = -1);

	CreateDynamic3DTextLabel("Suelta el mineral aqui para procesarlo.", 0xFF543990,2635.6230, -1524.6859, 1402.9672, 15.0, .testlos = false, .worldid = -1);
	//Habitacion del hotel
	CreateDynamicObject(19902, 2227.8535, -1150.3351, 1028.7958,0,0,0, .worldid = -1, .interiorid = -1);
	CreateDynamic3DTextLabel("Habitacion.", 0xFFFFFFFF,2227.8535, -1150.3351, 1028.7958, 5.0, .testlos = true, .worldid = -1, .interiorid = 15);
	CreateDynamic3DTextLabel("Oprime {c9c244}'Y' {FFFFFF}para salir de la habitacion.", 0xFFFFFFFF,1513.9270, -1556.3319, 3480.4951, 10.0, .testlos = true, .worldid = -1);
	//CreateDynamic3DTextLabel("Oprime {c9c244}'Y' {FFFFFF}para descansar.", 0xFFFFFFFF,1508.4955, -1560.3329, 3480.4951, 10.0, .testlos = true, .worldid = -1);
	CreateDynamic3DTextLabel("Oprime {c9c244}'Y' {FFFFFF}para para comprar llaves.", 0xFFFFFFFF, 2217.44, -1146.95, 1025.80, 10.0, .testlos = true, .worldid = -1, .interiorid = 15);
	CreateDynamic3DTextLabel("Escribe {c9c244}'/Comprarkitreparacion' {FFFFFF}para comprar un kit de reparacion.", 0xFFFFFFFF, -85.1399,-1206.0212,2.9406, 10.0, .testlos = true, .worldid = -1);
	
	CreateDynamic3DTextLabel("Oprime 'Y' para comprar armas.", 0xFFFFFFFF,1380.4633, -1296.6357, 20.8112, 5.0, .testlos = true, .worldid = -1);
	
	///======================
	//Mansion 1
	for(new i = 0; i < sizeof POS_DORMIR; i++)
	{
		CreateDynamic3DTextLabel("Oprime {c9c244}'Y' {FFFFFF}para descansar.", 0xFFFFFFFF,POS_DORMIR[i][xXx],POS_DORMIR[i][yYy],POS_DORMIR[i][zZz], 10.0, .testlos = true, .worldid = -1);
	}
	for(new i = 0; i < sizeof POSICIONESSALIDAGARAJEAPIE; i++)
	{
		CreateDynamicObject(19902, POSICIONESSALIDAGARAJEAPIE[i][POSX],POSICIONESSALIDAGARAJEAPIE[i][POSY],POSICIONESSALIDAGARAJEAPIE[i][POSZ],0,0,0, .worldid = -1, .interiorid = -1);
	}
	for(new i = 0; i < sizeof POSICIONESSALIDAGARAJEAUTO; i++)
	{
		CreateDynamicObject(19902, POSICIONESSALIDAGARAJEAUTO[i][POSX],POSICIONESSALIDAGARAJEAUTO[i][POSY],POSICIONESSALIDAGARAJEAUTO[i][POSZ],0,0,0, .worldid = -1, .interiorid = -1);
	}
	//
	/*for(new i = 0; i < sizeof POSICIONESARMERIACASAVIP; i++)
	{
		CreateDynamic3DTextLabel("Armeria.\n\nOprime 'Y'", 0xFFFFFFFF,POSICIONESARMERIACASAVIP[i][POSX],POSICIONESARMERIACASAVIP[i][POSY],POSICIONESARMERIACASAVIP[i][POSZ], 5.0, .testlos = true, .worldid = -1);
	}*/
	 
	/*for(new i = 0; i < sizeof POSICIONESNEVERADEPART; i++)
	{
		CreateDynamic3DTextLabel("Nevera.\n\nOprime 'Y'", 0xFFFFFFFF,POSICIONESNEVERADEPART[i][POSX],POSICIONESNEVERADEPART[i][POSY],POSICIONESNEVERADEPART[i][POSZ], 5.0, .testlos = true, .worldid = -1);
	}

	for(new i = 0; i < sizeof POSICIONESNEVERACASAVIP; i++)
	{
		CreateDynamic3DTextLabel("Nevera.\n\nOprime 'Y'", 0xFFFFFFFF,POSICIONESNEVERACASAVIP[i][POSX],POSICIONESNEVERACASAVIP[i][POSY],POSICIONESNEVERACASAVIP[i][POSZ], 5.0, .testlos = true, .worldid = -1);
	}*/
	//Conce
	for(new i = 0; i < sizeof COMPRARENCONCESONARIO; i++)
	{
		CreateDynamic3DTextLabel("Oprime {c9c244}'Y' {FFFFFF}para comprar vehiculos.", 0xFFFFFFFF, COMPRARENCONCESONARIO[i][xXx],COMPRARENCONCESONARIO[i][yYy],COMPRARENCONCESONARIO[i][zZz], 10.0, .testlos = true, .worldid = -1);
	}
    CreateDynamic3DTextLabel("Pulsa {c9c244}'F' {FFFFFF}para soltar unos cuantos billetes.", 0xFFFFFFFF, 1213.738037, -33.667881, 1000.953125, 5.0, .testlos = true, .worldid = 0, .interiorid = 3);

	Club_Strippers_Actor[0] = CreateDynamicActor(246, 1209.416503, -36.272216, 1001.484375, 17.0, .worldid = 0, .interiorid = 3);
    Club_Strippers_Actor[1] = CreateDynamicActor(87, 1215.355712, -33.439422, 1001.382812, 85.3, .worldid = 0, .interiorid = 3);
	CreateDynamic3DTextLabel("Osvalda", 0xFFFFFFAA, 1209.416503, -36.272216, 1001.484375 + 0.3, 5.0, .testlos = false, .worldid = 0, .interiorid = 3);
	CreateDynamic3DTextLabel("Tamara", 0xFFFFFFAA, 1215.355712, -33.439422, 1001.382812 + 0.3, 5.0, .testlos = false, .worldid = 0, .interiorid = 3);
    Club_Bar_Actor = CreateDynamicActor(195, 1206.232788, -29.325387, 1000.953125, 270.0, .worldid = 0, .interiorid = 3);
	Club_Actors[0] = CreateDynamicActor(1, 1209.846191, -33.879096, 1000.953125, 180.626205, .worldid = 0, .interiorid = 3);
	Club_Actors[1] = CreateDynamicActor(15, 1207.873535, -34.441837, 1000.953125, 213.213790, .worldid = 0, .interiorid = 3);
	Club_Actors[2] = CreateDynamicActor(21, 1215.694702, -31.700962, 1000.953125, 158.379913, .worldid = 0, .interiorid = 3);
	Club_Actors[3] = CreateDynamicActor(73, 1214.740356, -35.461227, 1000.953125, 337.608306, .worldid = 0, .interiorid = 3);
	Club_Actors[4] = CreateDynamicActor(78, 1213.713012, -34.496170, 1000.953125, 293.427886, .worldid = 0, .interiorid = 3);
	Club_Actors[5] = CreateDynamicActor(127, 1211.037963, -36.378440, 1000.960571, 74.092475, .worldid = 0, .interiorid = 3);
	Club_Actors[6] = CreateDynamicActor(131, 1207.190307, -36.132881, 1000.953125, 277.761077, .worldid = 0, .interiorid = 3);
	UpdateThePutis();
	SetTimer("UpdateThePutis", 3000, true);
	
	//SetTimer("UpdateFecha",360000,true);
	
	SetTimer("MensajedeAyuda",180000,true);
	// Map Icons Hospitales
	//for(new i = 0; i < sizeof Hospital_Spawn_Positions; i++) CreateDynamicMapIcon(Hospital_Spawn_Positions[i][0], Hospital_Spawn_Positions[i][1], Hospital_Spawn_Positions[i][2], 22, -1, 0, 0);
	
	//Tuning
	CreateDynamicMapIcon(263.592102, 22.960014, 2.170951, 63, -1, 0, 0);
	CreateDynamic3DTextLabel("Usa {b9f442}/tuning {FFFFFF}para tunear tu vehículo", 0xFFFFFFFF, 263.592102, 22.960014, 2.170951, 10.0, .testlos = true, .worldid = 0, .interiorid = 0);
	
	CreateDynamic3DTextLabel("Oprime {97c142}'Y' {FFFFFF}para ver los productos disponibles", 0xFFFFFFFF, -29.1280,-185.1293,1003.5469, 10.0, .testlos = true, .worldid = -1);
	CreateDynamic3DTextLabel("Oprime {97c142}'Y' {FFFFFF}para ver los productos disponibles", 0xFFFFFFFF, 263.5266,1764.9800,9998.9502 , 10.0, .testlos = true, .worldid = -1);	
	// 3D Texts Ropas
	for(new i = 0; i < sizeof Clothing_Shop_Positions; i++)
	{
		new label_str[256];
		format(label_str, sizeof label_str, "{97c142}%s\n\n{FFFFFF}Escribe {c9c244}/ropa {FFFFFF}para cambiar de ropa\n{FFFFFF}Escribe {c9c244}/toys {FFFFFF}para comprar accesorios", Clothing_Shop_Positions[i][clothing_shop_NAME]);
		CreateDynamic3DTextLabel(label_str, 0xFFFFFFFF, Clothing_Shop_Positions[i][clothing_shop_X], Clothing_Shop_Positions[i][clothing_shop_Y], Clothing_Shop_Positions[i][clothing_shop_Z] + 0.25, 10.0, .testlos = true, .interiorid = Clothing_Shop_Positions[i][clothing_shop_INTERIOR]);
	}
	
	// 3D Texts Pedir comida
	for(new i = 0; i < sizeof Fast_Food_Positions; i++)
	{
		new label_str[128];
		format(label_str, sizeof label_str, "{97c142}%s\n\n{FFFFFF}Oprime {97c142}'Y' {FFFFFF}para ver los productos disponibles", Fast_Food_Positions[i][fast_food_NAME]);
		CreateDynamic3DTextLabel(label_str, 0xFFFFFFFF, Fast_Food_Positions[i][fast_food_X], Fast_Food_Positions[i][fast_food_Y], Fast_Food_Positions[i][fast_food_Z] + 0.25, 10.0, .testlos = true, .interiorid = Fast_Food_Positions[i][fast_food_INTERIOR]);
	}
	
	// 3D Texts Bank
	for(new i = 0; i < sizeof Bank_Interior_Positions; i++) CreateDynamic3DTextLabel("Escribe {6a98e2}/banco {FFFFFF}para realizar una operación", 0xFFFFFFFF, Bank_Interior_Positions[i][bank_X], Bank_Interior_Positions[i][bank_Y], Bank_Interior_Positions[i][bank_Z] + 0.25, 10.0, .testlos = true, .worldid = Bank_Interior_Positions[i][bank_WORLD], .interiorid = Bank_Interior_Positions[i][bank_INTERIOR]);
	for(new i = 0; i < sizeof BUY_PROPERTIES_SITES; i++) CreateDynamic3DTextLabel("Escribe {6a98e2}/comprarcasa [ID] {FFFFFF}para comprar una propiedad", 0xFFFFFFFF, BUY_PROPERTIES_SITES[i][site_X], BUY_PROPERTIES_SITES[i][site_Y], BUY_PROPERTIES_SITES[i][site_Z] + 0.25, 10.0, .testlos = true, .worldid = BUY_PROPERTIES_SITES[i][site_WORLD], .interiorid = BUY_PROPERTIES_SITES[i][site_INTERIOR]);
	//Gps de ayuda
	for(new i = 0; i < sizeof GPS_HELP; i ++)
	{
		//CreateDynamicObject(GPS_HELP[i][atm_modelid], GPS_HELP[i][atm_X], GPS_HELP[i][atm_Y], GPS_HELP[i][atm_Z], GPS_HELP[i][atm_RX], GPS_HELP[i][atm_RY], GPS_HELP[i][atm_RZ], GPS_HELP[i][atm_WORLD], GPS_HELP[i][atm_INTERIOR]);
		CreateDynamic3DTextLabel("GPS Para turistas\n\npresiona 'Y'", 0xFFFF0080,GPS_HELP[i][atm_X], GPS_HELP[i][atm_Y], GPS_HELP[i][atm_Z]+0.5, 30.0, .testlos = false, .worldid = -1);
	}
	//Telefonos publicos
	for(new i = 0; i < sizeof FONE_PUBLICS; i ++)
	{
		//CreateDynamicObject(FONE_PUBLICS[i][atm_modelid], FONE_PUBLICS[i][atm_X], FONE_PUBLICS[i][atm_Y], FONE_PUBLICS[i][atm_Z], FONE_PUBLICS[i][atm_RX], FONE_PUBLICS[i][atm_RY], FONE_PUBLICS[i][atm_RZ], FONE_PUBLICS[i][atm_WORLD], FONE_PUBLICS[i][atm_INTERIOR]);
		CreateDynamic3DTextLabel("Telefono publico\n\npresiona 'Y'", 0xFFFF0080,FONE_PUBLICS[i][atm_X], FONE_PUBLICS[i][atm_Y], FONE_PUBLICS[i][atm_Z]+0.5, 30.0, .testlos = false, .worldid = -1);
	}
	//Cajeros
	for(new i = 0; i < sizeof ATM_BANK; i ++)
	{
		CreateDynamicObject(ATM_BANK[i][atm_modelid], ATM_BANK[i][atm_X], ATM_BANK[i][atm_Y], ATM_BANK[i][atm_Z], ATM_BANK[i][atm_RX], ATM_BANK[i][atm_RY], ATM_BANK[i][atm_RZ], ATM_BANK[i][atm_WORLD], ATM_BANK[i][atm_INTERIOR]);
		CreateDynamic3DTextLabel("Cajero automatico\n\npresiona 'Y'", 0xFFFF0080,ATM_BANK[i][atm_X], ATM_BANK[i][atm_Y], ATM_BANK[i][atm_Z]+0.5, 30.0, .testlos = false, .worldid = -1);
		ATM_BANK[i][atm_X] += (-0.5 * floatsin(-(ATM_BANK[i][atm_RZ] - 90.0), degrees));
		ATM_BANK[i][atm_Y] += (-0.5 * floatcos(-(ATM_BANK[i][atm_RZ] - 90.0), degrees));
		CreateDynamicMapIcon(ATM_BANK[i][atm_X], ATM_BANK[i][atm_Y], ATM_BANK[i][atm_Z], 52, -1, ATM_BANK[i][atm_WORLD], ATM_BANK[i][atm_INTERIOR]);
	
		new atm_pickup_id = CreateDynamicPickup(0, 1, ATM_BANK[i][atm_X], ATM_BANK[i][atm_Y], ATM_BANK[i][atm_Z] + 0.10, ATM_BANK[i][atm_WORLD], ATM_BANK[i][atm_INTERIOR]), info[3];
		info[0] = PICKUP_TYPE_ATM;
		info[1] = i; // Index
		info[2] = 0; // Nada
		Streamer_SetArrayData(STREAMER_TYPE_PICKUP, atm_pickup_id, E_STREAMER_EXTRA_ID, info);
	}
	
	// 3D Texts Gasolinera
	for(new i = 0; i < sizeof Fuel_Stations; i++) CreateDynamic3DTextLabel("{97c142}Gasolinera\n\n{FFFFFF}Precio: {c9c244}9$/Litro\n{FFFFFF}Escribe {c9c244}/gasolina [litros / lleno] {FFFFFF}para repostar\n\nCompra {c9c244}/bidon {FFFFFF}de 20 litros por 250$", 0xFFFFFFFF, Fuel_Stations[i][0], Fuel_Stations[i][1], Fuel_Stations[i][2] + 0.25, 10.0, .testlos = true, .worldid = 0, .interiorid = 0);
	
		
	//24/7 Int
	CreateDynamic3DTextLabel("Escribe {b3f442}/productos {FFFFFF}para comprar", 0xFFFFFFFF, -27.964675, -89.948631, 1003.546875 + 0.25, 10.0, .testlos = true, .interiorid = 18);

	//Mercado negro
	CreateDynamic3DTextLabel("Escribe {b3f442}/mercado {FFFFFF}para comprar", 0xFFFFFFFF, 281.4502,-140.7273,1004.0625, 10.0, .testlos = true, .interiorid = -1, .worldid = -1);

	//Vehs venta
	for(new i = 0; i != sizeof SELL_INFO_VEHICLES; i ++)
	{
		if(SELL_INFO_VEHICLES[i][sell_info_COLOR_1] == -1) SELL_INFO_VEHICLES[i][sell_info_COLOR_1] = valid_work_vehicle_colors[random(sizeof(valid_work_vehicle_colors))];
		if(SELL_INFO_VEHICLES[i][sell_info_COLOR_2] == -1) SELL_INFO_VEHICLES[i][sell_info_COLOR_2] = valid_work_vehicle_colors[random(sizeof(valid_work_vehicle_colors))];
		
		new vehicle_id = INVALID_VEHICLE_ID;
		new idcarpues = SELL_INFO_VEHICLES[i][sel_info_vehicle_MODELID];
		vehicle_id = CreateVehicle(SELL_INFO_VEHICLES[i][sel_info_vehicle_MODELID], SELL_INFO_VEHICLES[i][sell_info_SPAWN_X], SELL_INFO_VEHICLES[i][sell_info_SPAWN_Y], SELL_INFO_VEHICLES[i][sell_info_SPAWN_Z], SELL_INFO_VEHICLES[i][sell_info_SPAWN_ANGLE], SELL_INFO_VEHICLES[i][sell_info_COLOR_1], SELL_INFO_VEHICLES[i][sell_info_COLOR_2], -1, false);
		
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_VALID] = true;
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_TYPE] = VEHICLE_TYPE_SELL;
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MODELID] = SELL_INFO_VEHICLES[i][sel_info_vehicle_MODELID];
		format(GLOBAL_VEHICLES[vehicle_id][gb_vehicle_NUMBER_PLATE], 32, "EN VENTA");
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_X] = SELL_INFO_VEHICLES[i][sell_info_SPAWN_X];
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_Y] = SELL_INFO_VEHICLES[i][sell_info_SPAWN_Y];
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_Z] = SELL_INFO_VEHICLES[i][sell_info_SPAWN_Z];
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_ANGLE] = SELL_INFO_VEHICLES[i][sell_info_SPAWN_ANGLE];
		
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_POS][0] = GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_X];
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_POS][1] = GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_Y];
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_POS][2] = GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_Z];
		
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_HEALTH] = 1000.0;
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DAMAGE_PANELS] = 0;
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DAMAGE_DOORS] = 0;
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DAMAGE_LIGHTS] = 0;
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DAMAGE_TIRES] = 0;
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_COLOR_1] = SELL_INFO_VEHICLES[i][sell_info_COLOR_1];
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_COLOR_2] = SELL_INFO_VEHICLES[i][sell_info_COLOR_2];
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_PAINTJOB] = 3; // No paintjob
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MAX_GAS] = 0.0;
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_GAS] = 0.0;
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MAX_ACEITE] = 0.0;
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_ACEITE] = 0.0;
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_STATE] = VEHICLE_STATE_NORMAL;

		SELL_VEHICLES[vehicle_id][sell_vehicle_VALID] = true;
		SELL_VEHICLES[vehicle_id][sell_vehicle_SHOP] = SELL_INFO_VEHICLES[i][sell_info_SHOP];
		SELL_VEHICLES[vehicle_id][sell_vehicle_PRICE] = VEHICLE_INFO[ idcarpues - 400][vehicle_info_PRICE];
		SELL_VEHICLES[vehicle_id][sell_vehicle_LEVEL] = VEHICLE_INFO[GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MODELID] - 400][vehicle_info_LEVEL];
		SELL_VEHICLES[vehicle_id][sell_vehicle_EXTRA] = VEHICLE_INFO[GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MODELID] - 400][vehicle_info_COINS];
		SELL_VEHICLES[vehicle_id][sell_vehicle_VIP_LEVEL] = VEHICLE_INFO[GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MODELID] - 400][vehicle_info_VIP_LEVEL];
		
		if(SELL_VEHICLES[vehicle_id][sell_vehicle_VIP_LEVEL]) SELL_VEHICLES[vehicle_id][sell_vehicle_LEVEL] = 1;
		if(SELL_VEHICLES[vehicle_id][sell_vehicle_EXTRA]) SELL_VEHICLES[vehicle_id][sell_vehicle_PRICE] = 0;
		
		SetVehicleToRespawnEx(vehicle_id);
		
		
		new label_str[256];
		
		if(SELL_VEHICLES[vehicle_id][sell_vehicle_VIP_LEVEL])
		{
			if(SELL_VEHICLES[vehicle_id][sell_vehicle_EXTRA])
			{
				format
				(
					label_str, 
						sizeof label_str, 
						"\
							{F4DC42}Membresía VIP%d requerida\n\
							\n\
							{58ACFA}%s\n\n\
							{FFFFFF}Coste: {58ACFA}%d "SERVER_COIN"\n\
							{FFFFFF}Nivel: {58ACFA}%d\
						", SELL_VEHICLES[vehicle_id][sell_vehicle_VIP_LEVEL], VEHICLE_INFO[GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MODELID] - 400][vehicle_info_NAME], SELL_VEHICLES[vehicle_id][sell_vehicle_EXTRA], SELL_VEHICLES[vehicle_id][sell_vehicle_LEVEL]
				);
			}
			else
			{
				format
				(
					label_str, 
						sizeof label_str, 
						"\
							{F4DC42}Membresía VIP%d requerida\n\
							\n\
							{58ACFA}%s\n\n\
							{FFFFFF}Precio: {58ACFA}%s$\n\
							{FFFFFF}Nivel: {58ACFA}%d\
						", SELL_VEHICLES[vehicle_id][sell_vehicle_VIP_LEVEL], VEHICLE_INFO[GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MODELID] - 400][vehicle_info_NAME], number_format_thousand(SELL_VEHICLES[vehicle_id][sell_vehicle_PRICE]), SELL_VEHICLES[vehicle_id][sell_vehicle_LEVEL]
				);
			}
		}
		else
		{
			if(SELL_VEHICLES[vehicle_id][sell_vehicle_EXTRA])
			{
				format
				(
					label_str, 
						sizeof label_str, 
						"\
							{58ACFA}%s\n\n\
							{FFFFFF}Coste: {58ACFA}%d "SERVER_COIN"\n\
							{FFFFFF}Nivel: {58ACFA}%d\
						", VEHICLE_INFO[GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MODELID] - 400][vehicle_info_NAME], SELL_VEHICLES[vehicle_id][sell_vehicle_EXTRA], SELL_VEHICLES[vehicle_id][sell_vehicle_LEVEL]
				);
			}
			else
			{
				format
				(
					label_str, 
						sizeof label_str, 
						"\
							{58ACFA}%s\n\n\
							{FFFFFF}Precio: {58ACFA}%s$\n\
							{FFFFFF}Nivel: {58ACFA}%d\
						", VEHICLE_INFO[GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MODELID] - 400][vehicle_info_NAME], number_format_thousand(SELL_VEHICLES[vehicle_id][sell_vehicle_PRICE]), SELL_VEHICLES[vehicle_id][sell_vehicle_LEVEL]
				);
			}
		}
		
		
		SELL_VEHICLES[vehicle_id][sell_vehicle_LABEL_ID] = CreateDynamic3DTextLabel(label_str, 0xFFFFFFFF, 0.0, 0.0, 1.5, 10.0, .attachedvehicle = vehicle_id, .testlos = true, .worldid = 0, .interiorid = 0);
	}
	
	//Concesionarios
	for(new i = 0; i < sizeof SELL_VEHICLES_SHOPS_SPAWN; i++)
	{
		CreateDynamicMapIcon(SELL_VEHICLES_SHOPS_SPAWN[i][0], SELL_VEHICLES_SHOPS_SPAWN[i][1], SELL_VEHICLES_SHOPS_SPAWN[i][2], 55, -1, 0, 0);
		CreateDynamic3DTextLabel("{ffdf2d}SALIDA DE VEHICULOS\n\n(Vehiculo que se quede en este punto es eliminado)", 0xFFFFFFFF, SELL_VEHICLES_SHOPS_SPAWN[i][0], SELL_VEHICLES_SHOPS_SPAWN[i][1], SELL_VEHICLES_SHOPS_SPAWN[i][2], 10.0, .testlos = true, .worldid = 0, .interiorid = 0);
	}
	
	//Notario
	CreateDynamic3DTextLabel("Escribe {79abfc}/pvender {FFFFFF}para vender\nalguna propiedad o vehículo", 0xFFFFFFFF, -474.596282, 289.679107, 2004.584960, 10.0, .testlos = true, .worldid = 20, .interiorid = 20);
	//Grua
	CreateDynamic3DTextLabel("Escribe {79abfc}/grua {FFFFFF}para solicitar\nel servicio de grúa a un vehículo", 0xFFFFFFFF, -508.645385, 322.147644, 2004.585937, 10.0, .testlos = true, .worldid = 20, .interiorid = 20);
	
	 
	//San Andreas Vehicles
	for(new i = 0; i != sizeof FACC_VEHICLES; i ++)
	{
		new vehicle_id = INVALID_VEHICLE_ID, respawn_time = 300;
		vehicle_id = CreateVehicle(FACC_VEHICLES[i][VEHICLE], FACC_VEHICLES[i][PosX], FACC_VEHICLES[i][PosY], FACC_VEHICLES[i][PosZ], FACC_VEHICLES[i][Ang], FACC_VEHICLES[i][COLOR1], FACC_VEHICLES[i][COLOR2], respawn_time, false);
		if(vehicle_id == INVALID_VEHICLE_ID) continue;


		format(GLOBAL_VEHICLES[vehicle_id][FACCION_NAME],30,"%s",FACC_VEHICLES[i][Facion_Nombre]);

		GLOBAL_VEHICLES[vehicle_id][FACCION_ID] = FACC_VEHICLES[i][FACCION_ID];
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_TYPE] = FACC_VEHICLES[i][VEHICLE_TYPE];
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MODELID] = FACC_VEHICLES[i][VEHICLE];
		format(GLOBAL_VEHICLES[vehicle_id][gb_vehicle_NUMBER_PLATE], 32, "%c%c%c-%04d", getRandomLetter(), getRandomLetter(), getRandomLetter(), random(9999));
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_X] = FACC_VEHICLES[i][PosX];
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_Y] = FACC_VEHICLES[i][PosY];
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_Z] = FACC_VEHICLES[i][PosZ];
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_ANGLE] = FACC_VEHICLES[i][Ang];
		
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_POS][0] = GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_X];
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_POS][1] = GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_Y];
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_POS][2] = GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_Z];
		
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_HEALTH] = 1000.0;
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DAMAGE_PANELS] = 0;
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DAMAGE_DOORS] = 0;
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DAMAGE_LIGHTS] = 0;
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DAMAGE_TIRES] = 0;
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_COLOR_1] = FACC_VEHICLES[i][COLOR1];
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_COLOR_2] = FACC_VEHICLES[i][COLOR2];
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_PAINTJOB] = 3; // No paintjob 
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MAX_GAS] = VEHICLE_INFO[ GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MODELID] - 400][vehicle_info_MAX_GAS];
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_GAS] = frandom(GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MAX_GAS], GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MAX_GAS] / 3, 2);

		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MAX_ACEITE] = VEHICLE_INFO[ GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MODELID] - 400][vehicle_info_MAX_ACEITE];
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_ACEITE] = frandom(GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MAX_ACEITE], GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MAX_ACEITE] / 3, 2);
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_STATE] = VEHICLE_STATE_NORMAL;
		GLOBAL_VEHICLES[vehicle_id][gp_vehicle_vip] = 0;

	}
	/**===========================================*/
	for(new i = 0; i != sizeof RENT_VEHICLES; i ++)
	{
		new vehicle_id = INVALID_VEHICLE_ID, respawn_time = 300;
		vehicle_id = CreateVehicle(RENT_VEHICLES[i][VEHICLE], RENT_VEHICLES[i][PosX], RENT_VEHICLES[i][PosY], RENT_VEHICLES[i][PosZ], RENT_VEHICLES[i][Ang], random(255), random(255), respawn_time, false);
		if(vehicle_id == INVALID_VEHICLE_ID) continue;

		GLOBAL_VEHICLES[vehicle_id][IN_RENT] = false;
		GLOBAL_VEHICLES[vehicle_id][RENT_OWNER] = -1;
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_VALID] = true;
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_TYPE] = RENT_VEHICLES[i][VEHICLE_TYPE];
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MODELID] = RENT_VEHICLES[i][VEHICLE];
		format(GLOBAL_VEHICLES[vehicle_id][gb_vehicle_NUMBER_PLATE], 32, "%c%c%c-%04d", getRandomLetter(), getRandomLetter(), getRandomLetter(), random(9999));
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_X] = RENT_VEHICLES[i][PosX];
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_Y] = RENT_VEHICLES[i][PosY];
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_Z] = RENT_VEHICLES[i][PosZ];
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_ANGLE] = RENT_VEHICLES[i][Ang];
		
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_POS][0] = GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_X];
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_POS][1] = GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_Y];
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_POS][2] = GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_Z];
		
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_HEALTH] = 1000.0;
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DAMAGE_PANELS] = 0;
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DAMAGE_DOORS] = 0;
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DAMAGE_LIGHTS] = 0;
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DAMAGE_TIRES] = 0;
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_COLOR_1] = random(255);
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_COLOR_2] = random(255);
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_PAINTJOB] = 3; // No paintjob 
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MAX_GAS] = VEHICLE_INFO[ GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MODELID] - 400][vehicle_info_MAX_GAS];
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_GAS] = frandom(GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MAX_GAS], GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MAX_GAS] / 3, 2);

		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MAX_ACEITE] = VEHICLE_INFO[ GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MODELID] - 400][vehicle_info_MAX_ACEITE];
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_ACEITE] = frandom(GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MAX_ACEITE], GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MAX_ACEITE] / 3, 2);
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_STATE] = VEHICLE_STATE_NORMAL;
		GLOBAL_VEHICLES[vehicle_id][gp_vehicle_vip] = 0;
		new label_str[150];
		format(label_str, sizeof label_str,"{E33213}%s en alquiler\n{FFFFFF}Sube para alquilarlo\n",VEHICLE_INFO[GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MODELID] - 400][vehicle_info_NAME]);
		RENT_VEHICLE_INFO[vehicle_id][rent_vehicle_LABEL_ID] = CreateDynamic3DTextLabel(label_str, 0xFFFFFFFF, 0.0, 0.0, 1.5, 10.0, .attachedvehicle = vehicle_id, .testlos = true, .worldid = 0, .interiorid = 0);
	}

	//===============================================
	for(new i = 0; i != sizeof San_Andreas_Vehicles; i ++)
	{
		
		if(San_Andreas_Vehicles[i][san_andreas_vehicle_COLOR_1] == -1) San_Andreas_Vehicles[i][san_andreas_vehicle_COLOR_1] = valid_work_vehicle_colors[random(sizeof(valid_work_vehicle_colors))];
		if(San_Andreas_Vehicles[i][san_andreas_vehicle_COLOR_2] == -1) San_Andreas_Vehicles[i][san_andreas_vehicle_COLOR_2] = valid_work_vehicle_colors[random(sizeof(valid_work_vehicle_colors))];
		
		new vehicle_id = INVALID_VEHICLE_ID, respawn_time = 300;
		
		if(San_Andreas_Vehicles[i][san_andreas_vehicle_TYPE] == VEHICLE_TYPE_WORK)
		{
			if(work_info[ San_Andreas_Vehicles[i][san_andreas_vehicle_TYPE_IN] ][work_info_TYPE] == WORK_TYPE_FAMILY)
			{
				respawn_time = 900;
			}
		}
		
		vehicle_id = CreateVehicle(San_Andreas_Vehicles[i][san_andreas_vehicle_MODELID], San_Andreas_Vehicles[i][san_andreas_vehicle_SPAWN_X], San_Andreas_Vehicles[i][san_andreas_vehicle_SPAWN_Y], San_Andreas_Vehicles[i][san_andreas_vehicle_SPAWN_Z], San_Andreas_Vehicles[i][san_andreas_vehicle_SPAWN_ANGLE], San_Andreas_Vehicles[i][san_andreas_vehicle_COLOR_1], San_Andreas_Vehicles[i][san_andreas_vehicle_COLOR_2], respawn_time, false);
		if(vehicle_id == INVALID_VEHICLE_ID) continue;
		
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_VALID] = true;
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_TYPE] = San_Andreas_Vehicles[i][san_andreas_vehicle_TYPE];
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MODELID] = San_Andreas_Vehicles[i][san_andreas_vehicle_MODELID];
		format(GLOBAL_VEHICLES[vehicle_id][gb_vehicle_NUMBER_PLATE], 32, "%c%c%c-%04d", getRandomLetter(), getRandomLetter(), getRandomLetter(), random(9999));
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_X] = San_Andreas_Vehicles[i][san_andreas_vehicle_SPAWN_X];
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_Y] = San_Andreas_Vehicles[i][san_andreas_vehicle_SPAWN_Y];
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_Z] = San_Andreas_Vehicles[i][san_andreas_vehicle_SPAWN_Z];
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_ANGLE] = San_Andreas_Vehicles[i][san_andreas_vehicle_SPAWN_ANGLE];
		
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_POS][0] = GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_X];
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_POS][1] = GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_Y];
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_POS][2] = GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_Z];
		
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_HEALTH] = 1000.0;
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DAMAGE_PANELS] = 0;
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DAMAGE_DOORS] = 0;
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DAMAGE_LIGHTS] = 0;
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DAMAGE_TIRES] = 0;
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_COLOR_1] = San_Andreas_Vehicles[i][san_andreas_vehicle_COLOR_1];
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_COLOR_2] = San_Andreas_Vehicles[i][san_andreas_vehicle_COLOR_2];
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_PAINTJOB] = 3; // No paintjob 
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MAX_GAS] = VEHICLE_INFO[ GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MODELID] - 400][vehicle_info_MAX_GAS];
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_GAS] = frandom(GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MAX_GAS], GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MAX_GAS] / 3, 2);

		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MAX_ACEITE] = VEHICLE_INFO[ GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MODELID] - 400][vehicle_info_MAX_ACEITE];
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_ACEITE] = frandom(GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MAX_ACEITE], GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MAX_ACEITE] / 3, 2);
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_STATE] = VEHICLE_STATE_NORMAL;
		GLOBAL_VEHICLES[vehicle_id][gp_vehicle_vip] = San_Andreas_Vehicles[i][san_andreas_vehicle_vip];
		
		if(GLOBAL_VEHICLES[vehicle_id][gb_vehicle_TYPE] == VEHICLE_TYPE_WORK)
		{
			WORK_VEHICLES[vehicle_id][work_vehicle_VALID] = true;
			WORK_VEHICLES[vehicle_id][work_vehicle_WORK] = San_Andreas_Vehicles[i][san_andreas_vehicle_TYPE_IN];
			WORK_VEHICLES[vehicle_id][work_vehicle_EXP] = San_Andreas_Vehicles[i][san_andreas_vehicle_TYPE_IN_EXP];
			WORK_VEHICLES[vehicle_id][work_vehicle_NEED_DUTY] = work_info[ WORK_VEHICLES[vehicle_id][work_vehicle_WORK] ][work_info_NEED_DUTY];
		}
		
		SetVehicleToRespawnEx(vehicle_id);
	}
	
	//Barreras
	for(new i = 0; i != sizeof San_Andreas_Barriers; i ++)
	{
		CreateDynamicObject(966, San_Andreas_Barriers[i][barrier_X], San_Andreas_Barriers[i][barrier_Y], San_Andreas_Barriers[i][barrier_Z], 0.0, 0.0, San_Andreas_Barriers[i][barrier_ROTATION], San_Andreas_Barriers[i][barrier_WORLD], San_Andreas_Barriers[i][barrier_INTERIOR]);
		San_Andreas_Barriers[i][barrier_OBJECT_ID] = CreateDynamicObject(968, San_Andreas_Barriers[i][barrier_X], San_Andreas_Barriers[i][barrier_Y], San_Andreas_Barriers[i][barrier_Z] + 0.72967, 0.0, -90.0, San_Andreas_Barriers[i][barrier_ROTATION], San_Andreas_Barriers[i][barrier_WORLD], San_Andreas_Barriers[i][barrier_INTERIOR]);

		if(San_Andreas_Barriers[i][barrier_VEHICLE_TYPE])
		{
			new label_str[128];
			format(label_str, sizeof label_str, "{b2f441}%c%s", toupper(work_info[ San_Andreas_Barriers[i][barrier_VEHICLE_TYPE_IN] ][work_info_NAME][0]), work_info[ San_Andreas_Barriers[i][barrier_VEHICLE_TYPE_IN] ][work_info_NAME][1]);
			
			CreateDynamic3DTextLabel(label_str, 0xFFFFFFFF, San_Andreas_Barriers[i][barrier_X], San_Andreas_Barriers[i][barrier_Y], San_Andreas_Barriers[i][barrier_Z] + 1.5, 15.0, .worldid = San_Andreas_Barriers[i][barrier_WORLD], .interiorid = San_Andreas_Barriers[i][barrier_INTERIOR]);
		}
	}
	
	//polciais
	for(new i = 0; i != sizeof POLICE_GARAGE_DOORS; i ++)
	{
		POLICE_GARAGE_DOORS[i][police_gdoor_OBJECT_ID] = CreateDynamicObject(POLICE_GARAGE_DOORS[i][police_gdoor_MODELID], POLICE_GARAGE_DOORS[i][police_gdoor_CLOSED_X], POLICE_GARAGE_DOORS[i][police_gdoor_CLOSED_Y], POLICE_GARAGE_DOORS[i][police_gdoor_CLOSED_Z], POLICE_GARAGE_DOORS[i][police_gdoor_CLOSED_RX], POLICE_GARAGE_DOORS[i][police_gdoor_CLOSED_RY], POLICE_GARAGE_DOORS[i][police_gdoor_CLOSED_RZ], 0, 0);
	}
	for(new i = 0; i != sizeof POLICE_DOORS; i ++)
	{
		POLICE_DOORS[i][police_door_OBJECT_ID] = CreateDynamicObject(POLICE_DOORS[i][police_door_MODELID], POLICE_DOORS[i][police_door_X], POLICE_DOORS[i][police_door_Y], POLICE_DOORS[i][police_door_Z], 0.0, 0.0, POLICE_DOORS[i][police_door_RZ], POLICE_DOORS[i][police_door_WORLD], POLICE_DOORS[i][police_door_INTERIOR]);
	}
	CreateDynamic3DTextLabel("Usa {b9f442}/policia {FFFFFF}para empezar a trabajar\no para dejar de trabajar", 0xFFFFFFFF, 253.280288, 76.219017, 1003.640625, 5.0, .testlos = true, .worldid = 0, .interiorid = 6);
	CreateDynamic3DTextLabel("Usa {b9f442}/policia {FFFFFF}para empezar a trabajar\no para dejar de trabajar", 0xFFFFFFFF, 266.547180, 119.652816, 1004.617187, 5.0, .testlos = true, .worldid = 0, .interiorid = 10);
	CreateDynamic3DTextLabel("Usa {b9f442}/policia {FFFFFF}para empezar a trabajar\no para dejar de trabajar", 0xFFFFFFFF, 217.816406, 187.667922, 1003.031250, 5.0, .testlos = true, .worldid = 0, .interiorid = 3);

	CreateDynamic3DTextLabel("Usa {b9f442}/equiparse {FFFFFF}para equiparte", 0xFFFFFFFF, 219.244018, 69.982215, 1005.039062, 5.0, .testlos = true, .worldid = 0, .interiorid = 6);
	CreateDynamic3DTextLabel("Usa {b9f442}/equiparse {FFFFFF}para equiparte", 0xFFFFFFFF, 262.945587, 109.785270, 1004.617187, 5.0, .testlos = true, .worldid = 0, .interiorid = 10);
	CreateDynamic3DTextLabel("Usa {b9f442}/equiparse {FFFFFF}para equiparte", 0xFFFFFFFF, 222.683914, 186.956054, 1003.031250, 5.0, .testlos = true, .worldid = 0, .interiorid = 3);

	Jail_Areas[0] = CreateDynamicRectangle(258.236938, 72.319061, 273.117279, 95.841438, 0, 6);
	Jail_Areas[1] = CreateDynamicRectangle(211.001739, 117.171920, 236.010986, 104.004219, 0, 10);
	Jail_Areas[2] = CreateDynamicRectangle(204.957885, 180.868392, 183.743148, 168.624618, 0, 3);

	//Safe Zones
	for(new i = 0; i != sizeof SAFE_ZONES; i ++)
	{
		SAFE_ZONES[i][safe_zone_AREA_ID] = CreateDynamicRectangle(SAFE_ZONES[i][safe_zone_MIN_X], SAFE_ZONES[i][safe_zone_MIN_Y], SAFE_ZONES[i][safe_zone_MAX_X], SAFE_ZONES[i][safe_zone_MAX_Y], SAFE_ZONES[i][safe_zone_WORLD], SAFE_ZONES[i][safe_zone_INTERIOR]);
	}
	
	//Trabajos
	for(new i = 1; i != sizeof obtain_work_coords; i ++)
	{
		new label_str[256];
		
		switch(work_info[i][work_info_TYPE])
		{
			case WORK_TYPE_NORMAL:
			{
				format(label_str, sizeof label_str, "Trabajo {95F442}%s\n{FFFFFF}Nivel: {95f442}%d\n\n{FFFFFF}Usa {caf441}/trabajar", work_info[i][work_info_NAME], work_info[i][work_info_LEVEL]);
				CreateDynamic3DTextLabel(label_str, 0xFFFFFFFF, obtain_work_coords[i][obtain_work_X], obtain_work_coords[i][obtain_work_Y], obtain_work_coords[i][obtain_work_Z], 10.0, .testlos = true, .interiorid = obtain_work_coords[i][obtain_work_INTERIOR]);
				CreateDynamicPickup(1314, 1, obtain_work_coords[i][obtain_work_X], obtain_work_coords[i][obtain_work_Y], obtain_work_coords[i][obtain_work_Z], -1, obtain_work_coords[i][obtain_work_INTERIOR]);
				if(obtain_work_coords[i][obtain_work_MAP_ICON]) CreateDynamicMapIcon(obtain_work_coords[i][obtain_work_MAP_ICON_X], obtain_work_coords[i][obtain_work_MAP_ICON_Y], obtain_work_coords[i][obtain_work_MAP_ICON_Z], obtain_work_coords[i][obtain_work_MAP_ICON_ID], -1, 0, 0);
			}
		}
	}
	
	//Random taximeters
	for(new i = 0; i != MAX_VEHICLES; i ++) TAXI_METER_VEHICLE[i][veh_taxi_meter_PRICE] = minrand(2, 8);
	

	//Carga camioneros
	for(new i = 0; i != sizeof LoadCarrierPoints; i ++)
	{
		CreateDynamic3DTextLabel("Presiona {b9f442}'H' {FFFFFF}para cargar el DFT", 0xFFFFFFFF, LoadCarrierPoints[i][0], LoadCarrierPoints[i][1], LoadCarrierPoints[i][2], 10.0, .testlos = true, .worldid = 0, .interiorid = 0);
		CreateDynamicPickup(19135, 1, LoadCarrierPoints[i][0], LoadCarrierPoints[i][1], LoadCarrierPoints[i][2], 0, 0);
	}
	//Carga camioneros
	for(new i = 0; i != sizeof LoadTrucksPoints; i ++)
	{
		CreateDynamic3DTextLabel("Presiona {b9f442}'H' {FFFFFF}para cargar el camión", 0xFFFFFFFF, LoadTrucksPoints[i][0], LoadTrucksPoints[i][1], LoadTrucksPoints[i][2], 10.0, .testlos = true, .worldid = 0, .interiorid = 0);
		CreateDynamicPickup(19135, 1, LoadTrucksPoints[i][0], LoadTrucksPoints[i][1], LoadTrucksPoints[i][2], 0, 0);
	}
	for(new i= 0; i != sizeof Pos_Actor_Truck_Load; i++)
	{
		ACTOR_TRUCK[i][ID]=CreateDynamicActor(261, Pos_Actor_Truck_Load[i][0],Pos_Actor_Truck_Load[i][1],Pos_Actor_Truck_Load[i][2],Pos_Actor_Truck_Load[i][3], true, 100.0, -1, -1);
	}
	for(new i = 0; i != sizeof ACTOR_TRUCK_UN_LOAD; i++)
	{
		new skina;
		new rskin=random(5);
		switch(rskin)
		{
			case 0: skina=8;
			case 1: skina=15;
			case 2: skina=47;
			case 3: skina=58;
			case 4: skina=161;
		}
		ACTOR_TRUCUNLOAD[i][ID]=CreateDynamicActor(skina, ACTOR_TRUCK_UN_LOAD[i][0],ACTOR_TRUCK_UN_LOAD[i][1],ACTOR_TRUCK_UN_LOAD[i][2],ACTOR_TRUCK_UN_LOAD[i][3], true, 100.0, -1, -1);
	}
	//Mecánico
	Mechanic_Area = CreateDynamicRectangle(-115.255050, -1211.812377, -54.539089, -1179.635253, 0, 0);
	CreateDynamic3DTextLabel("Usa {b9f442}/mecanico {FFFFFF}para empezar a trabajar\no para dejar de trabajar", 0xFFFFFFFF, -89.087181, -1184.843627, 2.940625, 5.0, .testlos = true, .worldid = 0, .interiorid = 0);
	CreateDynamic3DTextLabel("Piezas de mecánico\nEscribe {b9f442}/piezas [cantidad] {FFFFFF}para comprar piezas\nPrecio de pieza: {b9f442}50$", 0xFFFFFFFF, -80.710136, -1193.329956, 2.947619, 5.0, .testlos = true, .worldid = 0, .interiorid = 0);
	
	//Leñador
	CreateDynamicPickup(19793, 1, -527.670349, -97.338562, 63.176174, 0, 0);
	CreateDynamic3DTextLabel("Usa {b9f442}/talar {FFFFFF}para empezar a trabajar\no para dejar de trabajar", 0xFFFFFFFF, -527.670349, -97.338562, 63.176174, 5.0, .testlos = true, .worldid = 0, .interiorid = 0);

	//Pizzero
	CreateDynamicPickup(1582, 1, 2097.355712, -1818.040771, 13.382812, 0, 0);
	CreateDynamic3DTextLabel("Usa {b9f442}/pizzero {FFFFFF}para empezar a trabajar\no para dejar de trabajar", 0xFFFFFFFF, 2097.355712, -1818.040771, 13.382812, 5.0, .testlos = true, .worldid = 0, .interiorid = 0);
	
	//Pescador
	for(new i = 0; i != sizeof BOYAS_PESCADOR; i ++)
	{
		CreateDynamicMapIcon(BOYAS_PESCADOR[i][xXx], BOYAS_PESCADOR[i][yYy], BOYAS_PESCADOR[i][zZz], 9, -1, 0, 0);
	}
	CreateDynamicActor(14, 2888.1606,-1986.3562,5.5981,271.2509, true, 100.0, -1, -1);

	CreateDynamicActor(144, 2816.2725,-1926.3018,-1.6366,267.3366, true, 100.0, -1, -1);
	CreateDynamicPickup(1213, 1, 2897.5376,-1993.8373,3.7561, 0, 0);
	CreateDynamic3DTextLabel("Usa {b9f442}/Pescador {FFFFFF}para empezar a trabajar\no para dejar de trabajar", 0xFFFFFFFF, 2897.5376,-1993.8373,3.7561, 5.0, .testlos = false, .worldid = 0, .interiorid = 0);
	CreateDynamic3DTextLabel("{D5230B}Comprar caña de pescar\n{ffffff}1 producto disponble.", 0xFFFFFFFF, 2889.42554, -1986.32715, 5.54610, 10.0, .testlos = false, .worldid = 0, .interiorid = 0);
	CreateDynamic3DTextLabel("{D5230B}Te compro pescado\n{ffffff}muestrame que tienes.", 0xFFFFFFFF, 2816.2725,-1926.3018,-1.6366, 10.0, .testlos = false, .worldid = 0, .interiorid = 0);
	CreateDynamic3DTextLabel("{D5230B}Comprar carnadas\n{ffffff}1 producto disponble.", 0xFFFFFFFF, 2889.70703, -1980.50537, 5.56910, 10.0, .testlos = false, .worldid = 0, .interiorid = 0);
	CreateDynamic3DTextLabel("{D5230B}Comprar masa para picar\n{ffffff}1 producto disponble.", 0xFFFFFFFF, 422.4710, -862.5123, 26.3487, 10.0, .testlos = false, .worldid = 0, .interiorid = 0);

	
	//Transportista
	CreateDynamicPickup(1213, 1, 2745.1729,-2453.7588,13.8623, 0, 0);
	CreateDynamic3DTextLabel("Usa {b9f442}/Transportista {FFFFFF}para empezar a trabajar\no para dejar de trabajar", 0xFFFFFFFF, 2745.1729,-2453.7588,13.8623, 5.0, .testlos = true, .worldid = 0, .interiorid = 0);
	
	//Minero
	CreateDynamicPickup(1582, 1, 2407.4590, -1513.2579, 1398.5747, 0, 0);
	CreateDynamic3DTextLabel("Usa {b9f442}/Minero {FFFFFF}para empezar a trabajar\no para dejar de trabajar", 0xFFFFFFFF, 2407.4590, -1513.2579, 1398.5747, 5.0, .testlos = true, .worldid = 25);
	
	//Medico
	CreateDynamicPickup(1275, 1, -2029.751342, -114.503044, 1035.171875, -1, 3);
	CreateDynamic3DTextLabel("Usa {b9f442}/medico {FFFFFF}para empezar a trabajar\no para dejar de trabajar", 0xFFFFFFFF, -2029.751342, -114.503044, 1035.171875, 5.0, .testlos = true, .interiorid = 3);
	

	//mercado
	CreateDynamicActor(28, 281.3401,-143.2680,1004.0625,356.2667, true, 100.0, -1, -1);
	
	//Trash
	CreateDynamic3DTextLabel("Usa {b9f442}/basurero {FFFFFF}para empezar a trabajar\no para dejar de trabajar", 0xFFFFFFFF, -1906.577514, -1756.457519, 22.079319, 5.0, .testlos = true, .worldid = 0, .interiorid = 0);
		//Ruta 0
	CreateTrashCheckpoint(0, 1440, -1812.46228, -558.37744, 15.73948,   0.00000, 0.00000, 274.24359);
	CreateTrashCheckpoint(0, 1440, -1793.84106, -312.50452, 24.46057,   0.00000, 0.00000, 268.49271);
	CreateTrashCheckpoint(0, 1440, -1801.20825, 115.39587, 14.55550,   0.00000, 0.00000, 280.09882);
	CreateTrashCheckpoint(0, 1440, -1750.40051, 323.11810, 6.61720,   0.00000, 0.00000, 319.06424);
	CreateTrashCheckpoint(0, 1440, -1814.43311, 511.15622, 28.66113,   0.00000, 9.00000, 304.31201);
	CreateTrashCheckpoint(0, 1440, -1982.79871, 614.85687, 34.61121,   0.00000, 0.00000, 0.00000);
	CreateTrashCheckpoint(0, 1440, -2229.42896, 575.27448, 34.58952,   0.00000, 0.00000, 0.00000);
	CreateTrashCheckpoint(0, 1440, -2385.20020, 513.64594, 28.11606,   0.00000, 0.00000, 282.48959);
	CreateTrashCheckpoint(0, 1440, -2258.51782, 221.79150, 34.74878,   0.00000, 0.00000, 90.00000);
	CreateTrashCheckpoint(0, 1440, -2266.30273, -206.86926, 34.86986,   0.00000, 0.00000, 90.00000);
	CreateTrashCheckpoint(0, 1440, -1995.48499, -771.90076, 31.56746,   0.00000, 0.00000, 90.00000);
		//Ruta 1
	CreateTrashCheckpoint(1, 1440, -2211.24414, -964.98248, 38.68247,   0.00000, 2.50000, 286.39740);
	CreateTrashCheckpoint(1, 1440, -2424.54443, -595.71997, 131.88649,   0.00000, -4.50000, 303.65921);
	CreateTrashCheckpoint(1, 1440, -2602.82544, -478.18484, 68.15035,   0.00000, 0.00000, 21.71607);
	CreateTrashCheckpoint(1, 1440, -2353.62256, -396.48764, 78.42006,   0.00000, -3.50000, 305.07410);
	CreateTrashCheckpoint(1, 1440, -2756.29199, -500.66721, 6.77589,   0.00000, 0.00000, 316.44635);
	CreateTrashCheckpoint(1, 1440, -2811.07056, -346.85269, 6.66456,   0.00000, 0.00000, 259.86459);
	CreateTrashCheckpoint(1, 1440, -2415.51563, -128.34013, 34.82273,   0.00000, 0.00000, 250.60507);
	CreateTrashCheckpoint(1, 1440, -2028.09985, -76.42242, 34.70956,   0.00000, 0.00000, 0.00000);
		//Ruta 2
	CreateTrashCheckpoint(2, 1440, -2193.88306, -2156.55347, 46.46848,   0.00000, -10.00000, 46.48320);
	CreateTrashCheckpoint(2, 1440, -2208.01904, -2280.10645, 30.12751,   0.00000, 0.00000, 331.91882);
	CreateTrashCheckpoint(2, 1440, -2125.33594, -2256.24902, 30.10599,   0.00000, 0.00000, 326.47290);
	CreateTrashCheckpoint(2, 1440, -2101.86353, -2313.20093, 30.14946,   0.00000, 0.00000, 42.68287);
	CreateTrashCheckpoint(2, 1440, -2183.69775, -2449.03003, 30.01783,   0.00000, 0.00000, 51.16318);
	CreateTrashCheckpoint(2, 1440, -2328.98047, -2704.17358, 44.41791,   6.17998, 5.88000, 340.20822);
	CreateTrashCheckpoint(2, 1440, -2601.78345, -2334.39746, 10.50614,   0.00000, 0.00000, 41.64481);

	
	
	//Leñador arboles
	Lumberjack_Area = CreateDynamicRectangle(-613.953796, -209.777252, -381.961181, -6.355076, 0, 0);
	for(new i = 0; i != sizeof LUMBER_TREES; i ++)
	{
		LUMBER_TREES[i][lumber_tree_OBJECT_ID] = CreateDynamicObject(LUMBER_TREES[i][lumber_tree_MODELID], LUMBER_TREES[i][lumber_tree_X], LUMBER_TREES[i][lumber_tree_Y], LUMBER_TREES[i][lumber_tree_Z], LUMBER_TREES[i][lumber_tree_RX], LUMBER_TREES[i][lumber_tree_RY], LUMBER_TREES[i][lumber_tree_RZ], 0, 0);
		
		new label_str[256];
		format(label_str, sizeof label_str, "{f46530}Árbol (%d)\n\n{FFFFFF}Pulsa {f9d834}~k~~Alt Izq~ {FFFFFF}para talar el árbol.", i);
		LUMBER_TREES[i][lumber_tree_LABEL] = CreateDynamic3DTextLabel(label_str, 0xFFFFFFFF, LUMBER_TREES[i][lumber_tree_X], LUMBER_TREES[i][lumber_tree_Y], LUMBER_TREES[i][lumber_tree_Z] + 1.5, 5.0, .testlos = false, .worldid = 0, .interiorid = 0);
	}
	
	//Agricultor
	Farmer_Area = CreateDynamicCircle(1461.8894, -83.2621, 65.0, 0, 0);
	CreateDynamicMapIcon(1461.8894, -83.2621, 65.0, 53, -1, 0, 0);
	CreateDynamic3DTextLabel("Usa {b9f442}/semillas {FFFFFF}para comprar semillas", 0xFFFFFFFF, 1566.521606, 31.370532, 24.16406, 5.0, .testlos = true, .worldid = 0, .interiorid = 0);
	
	//Cosechador
	Harvest_Area = CreateDynamicRectangle(-428.336059, -1667.658569, -116.565414, -1220.122070, 0, 0);
	return 1;
}

forward UpdateThePutis();
public UpdateThePutis()
{
	ApplyDynamicActorAnimation(Club_Bar_Actor, "BAR", "BARman_idle", 4.1, 1, 0, 0, 0, 0);
	
	new 
		strip_anim = random(sizeof(RandomStripAnimations)),
		stripper = random(sizeof(Club_Strippers_Actor));
	ApplyDynamicActorAnimation(Club_Strippers_Actor[stripper], "STRIP", RandomStripAnimations[strip_anim], 4.1, 1, 0, 0, 0, 0);
	
	
	for(new i = 0; i != sizeof(Club_Actors); i ++)
	{
		ApplyDynamicActorAnimation(Club_Actors[i], "STRIP", RandomPayStripAnimations[random(sizeof(RandomPayStripAnimations))], 4.1, 1, 0, 0, 0, 0);
	}
	return 1;
}

stock PrintPropertiesDatabaseInserts()
{
	new DBResult:Result;
	Result = db_query(Database, "SELECT `PROPERTY`.*, `PROPERTY_INFO`.* FROM `PROPERTY`, `PROPERTY_INFO` WHERE `PROPERTY_INFO`.ID_PROPERTY = `PROPERTY`.ID;");
	
	new 
		Float:ext_X, Float:ext_Y, Float:ext_Z, Float:ext_ANGLE, ext_INTERIOR, ext_FREEZE,
		id_Interior,
		
		property_price, property_level, property_extra, property_vip_level
	;
	
	new File:handle = fopen("properties.txt", io_write), line_str[512];
	if(!handle) return print("Error - properties.txt");
	
	for(new i = 0; i < db_num_rows(Result); i ++)
	{
		
		ext_X = db_get_field_assoc_float(Result, "EXT_X");
		ext_Y = db_get_field_assoc_float(Result, "EXT_Y");
		ext_Z = db_get_field_assoc_float(Result, "EXT_Z");
		ext_ANGLE = db_get_field_assoc_float(Result, "EXT_ANGLE");
		ext_INTERIOR = db_get_field_assoc_int(Result, "EXT_INTERIOR");
		ext_FREEZE = db_get_field_assoc_int(Result, "EXT_FREEZE");
	
		id_Interior = db_get_field_assoc_int(Result, "ID_INTERIOR");
		
		property_price = db_get_field_assoc_int(Result, "PRICE");
		property_level = db_get_field_assoc_int(Result, "LEVEL");
		property_extra = db_get_field_assoc_int(Result, "EXTRA");
		property_vip_level = db_get_field_assoc_int(Result, "VIP_LEVEL");
		
		
		format
		(line_str, sizeof line_str,
			"INSERT INTO `PROPERTY` (`EXT_X`, `EXT_Y`, `EXT_Z`, `EXT_ANGLE`, `EXT_INTERIOR`, `EXT_FREEZE`, `ID_INTERIOR`) VALUES ('%f', '%f', '%f', '%f', '%d', '%d', '%d');\r\n",
			ext_X, ext_Y, ext_Z, ext_ANGLE, ext_INTERIOR, ext_FREEZE,
			id_Interior
		);
		fwrite(handle, line_str);
		
		format
		(line_str, sizeof line_str,
			"INSERT INTO `PROPERTY_INFO` (`ID_PROPERTY`, `PRICE`, `LEVEL`, `EXTRA`, `VIP_LEVEL`) SELECT MAX(`ID`), '%d', '%d', '%d', '%d' FROM `PROPERTY`;\r\n\r\n",
			property_price, property_level, property_extra, property_vip_level
		);
		fwrite(handle, line_str);
		
		db_next_row(Result);
	}
	db_free_result(Result);
	fclose(handle);
	return 1;
}

CreateTrashCheckpoint(route, modelid, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
	if(route >= MAX_ROUTES) return print("---> Límite superado en array 'TRASH_OBJECTS, route' en la función 'CreateTrashCheckpoint'.");
	if(!TRASH_OBJECTS[route][trash_route_VALID]) TRASH_OBJECTS[route][trash_route_VALID] = true;
	if(TRASH_OBJECTS[route][trash_route_OBJECTS] >= MAX_OBJECTS_PER_ROUTE) return print("---> Límite superado en array 'TRASH_OBJECTS, objects' en la función 'CreateTrashCheckpoint'.");

	if(TRASH_OBJECTS[route][trash_route_OBJECTS] == 0) TRASH_OBJECTS[route][trash_route_DISTANCE] = GetDistanceBetweenPoints3D(x, y, z, obtain_work_coords[WORK_TRASH][obtain_work_X], obtain_work_coords[WORK_TRASH][obtain_work_Y], obtain_work_coords[WORK_TRASH][obtain_work_Z]);
	else
	{
		TRASH_OBJECTS[route][trash_route_DISTANCE] -= GetDistanceBetweenPoints3D(TRASH_OBJECTS[route][trash_object_X][ TRASH_OBJECTS[route][trash_route_OBJECTS] - 1], TRASH_OBJECTS[route][trash_object_Y][ TRASH_OBJECTS[route][trash_route_OBJECTS] - 1 ], TRASH_OBJECTS[route][trash_object_Z][ TRASH_OBJECTS[route][trash_route_OBJECTS] - 1 ], obtain_work_coords[WORK_TRASH][obtain_work_X], obtain_work_coords[WORK_TRASH][obtain_work_Y], obtain_work_coords[WORK_TRASH][obtain_work_Z]);
		TRASH_OBJECTS[route][trash_route_DISTANCE] += GetDistanceBetweenPoints3D(x, y, z, TRASH_OBJECTS[route][trash_object_X][ TRASH_OBJECTS[route][trash_route_OBJECTS] - 1], TRASH_OBJECTS[route][trash_object_Y][ TRASH_OBJECTS[route][trash_route_OBJECTS] - 1 ], TRASH_OBJECTS[route][trash_object_Z][ TRASH_OBJECTS[route][trash_route_OBJECTS] - 1 ]);
	}
	
	TRASH_OBJECTS[route][trash_object_MODELID][ TRASH_OBJECTS[route][trash_route_OBJECTS] ] = modelid;
	TRASH_OBJECTS[route][trash_object_X][ TRASH_OBJECTS[route][trash_route_OBJECTS] ] = x;
	TRASH_OBJECTS[route][trash_object_Y][ TRASH_OBJECTS[route][trash_route_OBJECTS] ] = y;
	TRASH_OBJECTS[route][trash_object_Z][ TRASH_OBJECTS[route][trash_route_OBJECTS] ] = z;
	TRASH_OBJECTS[route][trash_object_RX][ TRASH_OBJECTS[route][trash_route_OBJECTS] ] = rx;
	TRASH_OBJECTS[route][trash_object_RY][ TRASH_OBJECTS[route][trash_route_OBJECTS] ] = ry;
	TRASH_OBJECTS[route][trash_object_RZ][ TRASH_OBJECTS[route][trash_route_OBJECTS] ] = rz;
	//CreateDynamicObject(modelid, x, y, z, rx, ry, rz, 0, 0);
	
	TRASH_OBJECTS[route][trash_route_DISTANCE] += GetDistanceBetweenPoints3D(x, y, z, obtain_work_coords[WORK_TRASH][obtain_work_X], obtain_work_coords[WORK_TRASH][obtain_work_Y], obtain_work_coords[WORK_TRASH][obtain_work_Z]);
	TRASH_OBJECTS[route][trash_route_MONEY] = floatround(0.3 * TRASH_OBJECTS[route][trash_route_DISTANCE]);
	
	TRASH_OBJECTS[route][trash_route_OBJECTS] ++;
	return 1;
}

stock Float:GetDistanceBetweenPoints3D(Float:x1, Float:y1, Float:z1, Float:x2, Float:y2, Float:z2)
{
    return VectorSize(x1-x2,y1-y2,z1-z2);
}  

CreateTextDraws()
{
	for(new i; i < sizeof(Textdraws); i++) Textdraws[Textdraws_Enum:i] = INVALID_TEXT_DRAW;

	Textdraws[textdraw_login_imagine][0] = TextDrawCreate(243.916473, 145.666687, "ld_poke:cd6s");
	TextDrawLetterSize(Textdraws[textdraw_login_imagine][0], 0.000000, 0.000000);
	TextDrawTextSize(Textdraws[textdraw_login_imagine][0], 144.000000, 139.000000);
	TextDrawAlignment(Textdraws[textdraw_login_imagine][0], 1);
	TextDrawColor(Textdraws[textdraw_login_imagine][0], 255);
	TextDrawSetShadow(Textdraws[textdraw_login_imagine][0], 0);
	TextDrawSetOutline(Textdraws[textdraw_login_imagine][0], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_login_imagine][0], 255);
	TextDrawFont(Textdraws[textdraw_login_imagine][0], 4);
	TextDrawSetProportional(Textdraws[textdraw_login_imagine][0], 0);
	TextDrawSetShadow(Textdraws[textdraw_login_imagine][0], 0);

	Textdraws[textdraw_login_imagine][1] = TextDrawCreate(316.705841, 148.583328, "La Zona~n~~r~~h~Roleplay");
	TextDrawLetterSize(Textdraws[textdraw_login_imagine][1], 0.400000, 1.600000);
	TextDrawAlignment(Textdraws[textdraw_login_imagine][1], 2);
	TextDrawColor(Textdraws[textdraw_login_imagine][1], -1);
	TextDrawSetShadow(Textdraws[textdraw_login_imagine][1], 0);
	TextDrawSetOutline(Textdraws[textdraw_login_imagine][1], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_login_imagine][1], 255);
	TextDrawFont(Textdraws[textdraw_login_imagine][1], 1);
	TextDrawSetProportional(Textdraws[textdraw_login_imagine][1], 1);
	TextDrawSetShadow(Textdraws[textdraw_login_imagine][1], 0);

	Textdraws[textdraw_login_imagine][2] = TextDrawCreate(253.455108, 198.750030, "_");
	TextDrawLetterSize(Textdraws[textdraw_login_imagine][2], 0.402810, 0.748332);
	TextDrawTextSize(Textdraws[textdraw_login_imagine][2], 379.000000, 0.000000);
	TextDrawAlignment(Textdraws[textdraw_login_imagine][2], 1);
	TextDrawColor(Textdraws[textdraw_login_imagine][2], -1);
	TextDrawUseBox(Textdraws[textdraw_login_imagine][2], 1);
	TextDrawBoxColor(Textdraws[textdraw_login_imagine][2], -1378294017);
	TextDrawSetShadow(Textdraws[textdraw_login_imagine][2], 0);
	TextDrawSetOutline(Textdraws[textdraw_login_imagine][2], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_login_imagine][2], 255);
	TextDrawFont(Textdraws[textdraw_login_imagine][2], 1);
	TextDrawSetProportional(Textdraws[textdraw_login_imagine][2], 1);
	TextDrawSetShadow(Textdraws[textdraw_login_imagine][2], 0);

	Textdraws[textdraw_login_imagine][3] = TextDrawCreate(252.818344, 198.166671, "hud:radar_north");
	TextDrawLetterSize(Textdraws[textdraw_login_imagine][3], 0.000000, 0.000000);
	TextDrawTextSize(Textdraws[textdraw_login_imagine][3], 8.000000, 7.000000);
	TextDrawAlignment(Textdraws[textdraw_login_imagine][3], 1);
	TextDrawColor(Textdraws[textdraw_login_imagine][3], -1);
	TextDrawSetShadow(Textdraws[textdraw_login_imagine][3], 0);
	TextDrawSetOutline(Textdraws[textdraw_login_imagine][3], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_login_imagine][3], 255);
	TextDrawFont(Textdraws[textdraw_login_imagine][3], 4);
	TextDrawSetProportional(Textdraws[textdraw_login_imagine][3], 0);
	TextDrawSetShadow(Textdraws[textdraw_login_imagine][3], 0);

	Textdraws[textdraw_login_imagine][4] = TextDrawCreate(252.818344, 220.333358, "hud:radar_catalinapink");
	TextDrawLetterSize(Textdraws[textdraw_login_imagine][4], 0.000000, 0.000000);
	TextDrawTextSize(Textdraws[textdraw_login_imagine][4], 8.000000, 7.000000);
	TextDrawAlignment(Textdraws[textdraw_login_imagine][4], 1);
	TextDrawColor(Textdraws[textdraw_login_imagine][4], -1);
	TextDrawSetShadow(Textdraws[textdraw_login_imagine][4], 0);
	TextDrawSetOutline(Textdraws[textdraw_login_imagine][4], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_login_imagine][4], 255);
	TextDrawFont(Textdraws[textdraw_login_imagine][4], 4);
	TextDrawSetProportional(Textdraws[textdraw_login_imagine][4], 0);
	TextDrawSetShadow(Textdraws[textdraw_login_imagine][4], 0);

	Textdraws[textdraw_login_imagine][5] = TextDrawCreate(317.174407, 235.500000, "Te puedes ~y~loguear~w~ o ~y~registrar~w~ clickeando~r~~h~ PLAY");
	TextDrawLetterSize(Textdraws[textdraw_login_imagine][5], 0.178387, 1.249999);
	TextDrawAlignment(Textdraws[textdraw_login_imagine][5], 2);
	TextDrawColor(Textdraws[textdraw_login_imagine][5], -1);
	TextDrawSetShadow(Textdraws[textdraw_login_imagine][5], 0);
	TextDrawSetOutline(Textdraws[textdraw_login_imagine][5], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_login_imagine][5], 255);
	TextDrawFont(Textdraws[textdraw_login_imagine][5], 1);
	TextDrawSetProportional(Textdraws[textdraw_login_imagine][5], 1);
	TextDrawSetShadow(Textdraws[textdraw_login_imagine][5], 0);

	Textdraws[textdraw_login_imagine][6] = TextDrawCreate(254.392303, 263.500091, "_");
	TextDrawLetterSize(Textdraws[textdraw_login_imagine][6], 0.391566, 0.800831);
	TextDrawTextSize(Textdraws[textdraw_login_imagine][6], 307.000000, 0.000000);
	TextDrawAlignment(Textdraws[textdraw_login_imagine][6], 1);
	TextDrawColor(Textdraws[textdraw_login_imagine][6], -1);
	TextDrawUseBox(Textdraws[textdraw_login_imagine][6], 1);
	TextDrawBoxColor(Textdraws[textdraw_login_imagine][6], -1378294017);
	TextDrawSetShadow(Textdraws[textdraw_login_imagine][6], 0);
	TextDrawSetOutline(Textdraws[textdraw_login_imagine][6], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_login_imagine][6], 255);
	TextDrawFont(Textdraws[textdraw_login_imagine][6], 1);
	TextDrawSetProportional(Textdraws[textdraw_login_imagine][6], 1);
	TextDrawSetShadow(Textdraws[textdraw_login_imagine][6], 0);

	Textdraws[textdraw_login_imagine][7] = TextDrawCreate(327.950439, 263.016754, "_");
	TextDrawLetterSize(Textdraws[textdraw_login_imagine][7], 0.391566, 0.870832);
	TextDrawTextSize(Textdraws[textdraw_login_imagine][7], 379.000000, 0.000000);
	TextDrawAlignment(Textdraws[textdraw_login_imagine][7], 1);
	TextDrawColor(Textdraws[textdraw_login_imagine][7], -1);
	TextDrawUseBox(Textdraws[textdraw_login_imagine][7], 1);
	TextDrawBoxColor(Textdraws[textdraw_login_imagine][7], -1378294017);
	TextDrawSetShadow(Textdraws[textdraw_login_imagine][7], 0);
	TextDrawSetOutline(Textdraws[textdraw_login_imagine][7], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_login_imagine][7], 255);
	TextDrawFont(Textdraws[textdraw_login_imagine][7], 1);
	TextDrawSetProportional(Textdraws[textdraw_login_imagine][7], 1);
	TextDrawSetShadow(Textdraws[textdraw_login_imagine][7], 0);

	Textdraws[textdraw_login_imagine][8] = TextDrawCreate(372.760040, 254.166748, "ld_chat:thumbdn");
	TextDrawLetterSize(Textdraws[textdraw_login_imagine][8], 0.000000, 0.000000);
	TextDrawTextSize(Textdraws[textdraw_login_imagine][8], 15.000000, 10.000000);
	TextDrawAlignment(Textdraws[textdraw_login_imagine][8], 1);
	TextDrawColor(Textdraws[textdraw_login_imagine][8], -1378294017);
	TextDrawSetShadow(Textdraws[textdraw_login_imagine][8], 0);
	TextDrawSetOutline(Textdraws[textdraw_login_imagine][8], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_login_imagine][8], 255);
	TextDrawFont(Textdraws[textdraw_login_imagine][8], 4);
	TextDrawSetProportional(Textdraws[textdraw_login_imagine][8], 0);
	TextDrawSetShadow(Textdraws[textdraw_login_imagine][8], 0);

	Textdraws[textdraw_login_imagine][9] = TextDrawCreate(259.846313, 251.833435, "ld_chat:thumbup");
	TextDrawLetterSize(Textdraws[textdraw_login_imagine][9], 0.000000, 0.000000);
	TextDrawTextSize(Textdraws[textdraw_login_imagine][9], -15.000000, 10.000000);
	TextDrawAlignment(Textdraws[textdraw_login_imagine][9], 1);
	TextDrawColor(Textdraws[textdraw_login_imagine][9], -1378294017);
	TextDrawSetShadow(Textdraws[textdraw_login_imagine][9], 0);
	TextDrawSetOutline(Textdraws[textdraw_login_imagine][9], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_login_imagine][9], 255);
	TextDrawFont(Textdraws[textdraw_login_imagine][9], 4);
	TextDrawSetProportional(Textdraws[textdraw_login_imagine][9], 0);
	TextDrawSetShadow(Textdraws[textdraw_login_imagine][9], 0);

	Textdraws[textdraw_login_imagine][10] = TextDrawCreate(265.637145, 282.750061, "~r~~h~Tiempo para loguearse");
	TextDrawLetterSize(Textdraws[textdraw_login_imagine][10], 0.276309, 1.179998);
	TextDrawAlignment(Textdraws[textdraw_login_imagine][10], 1);
	TextDrawColor(Textdraws[textdraw_login_imagine][10], -1);
	TextDrawSetShadow(Textdraws[textdraw_login_imagine][10], 0);
	TextDrawSetOutline(Textdraws[textdraw_login_imagine][10], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_login_imagine][10], 255);
	TextDrawFont(Textdraws[textdraw_login_imagine][10], 1);
	TextDrawSetProportional(Textdraws[textdraw_login_imagine][10], 1);
	TextDrawSetShadow(Textdraws[textdraw_login_imagine][10], 0);

	Textdraws[textdraw_login_imagine][11] = TextDrawCreate(251.112487, 296.166687, "_");
	TextDrawLetterSize(Textdraws[textdraw_login_imagine][11], 0.390628, 0.678331);
	TextDrawTextSize(Textdraws[textdraw_login_imagine][11], 381.000000, 0.000000);
	TextDrawAlignment(Textdraws[textdraw_login_imagine][11], 1);
	TextDrawColor(Textdraws[textdraw_login_imagine][11], -1);
	TextDrawUseBox(Textdraws[textdraw_login_imagine][11], 1);
	TextDrawBoxColor(Textdraws[textdraw_login_imagine][11], 255);
	TextDrawSetShadow(Textdraws[textdraw_login_imagine][11], 0);
	TextDrawSetOutline(Textdraws[textdraw_login_imagine][11], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_login_imagine][11], 255);
	TextDrawFont(Textdraws[textdraw_login_imagine][11], 1);
	TextDrawSetProportional(Textdraws[textdraw_login_imagine][11], 1);
	TextDrawSetShadow(Textdraws[textdraw_login_imagine][11], 0);

	Textdraws[textdraw_login_imagine][12] = TextDrawCreate(232.203475, 293.250122, "ld_grav:timer");
	TextDrawLetterSize(Textdraws[textdraw_login_imagine][12], 0.000000, 0.000000);
	TextDrawTextSize(Textdraws[textdraw_login_imagine][12], 16.000000, 11.000000);
	TextDrawAlignment(Textdraws[textdraw_login_imagine][12], 1);
	TextDrawColor(Textdraws[textdraw_login_imagine][12], -16776961);
	TextDrawSetShadow(Textdraws[textdraw_login_imagine][12], 0);
	TextDrawSetOutline(Textdraws[textdraw_login_imagine][12], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_login_imagine][12], 255);
	TextDrawFont(Textdraws[textdraw_login_imagine][12], 4);
	TextDrawSetProportional(Textdraws[textdraw_login_imagine][12], 0);
	TextDrawSetShadow(Textdraws[textdraw_login_imagine][12], 0);
	//actualizaciones
	Textdraws[textdraw_actualizaciones][0] = TextDrawCreate(169.121536, 144.500000, "_");
	TextDrawLetterSize(Textdraws[textdraw_actualizaciones][0], 0.359706, 16.224174);
	TextDrawTextSize(Textdraws[textdraw_actualizaciones][0], 478.000000, 0.000000);
	TextDrawAlignment(Textdraws[textdraw_actualizaciones][0], 1);
	TextDrawColor(Textdraws[textdraw_actualizaciones][0], -1);
	TextDrawUseBox(Textdraws[textdraw_actualizaciones][0], 1);
	TextDrawBoxColor(Textdraws[textdraw_actualizaciones][0], 255);
	TextDrawSetShadow(Textdraws[textdraw_actualizaciones][0], 0);
	TextDrawSetOutline(Textdraws[textdraw_actualizaciones][0], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_actualizaciones][0], 255);
	TextDrawFont(Textdraws[textdraw_actualizaciones][0], 1);
	TextDrawSetProportional(Textdraws[textdraw_actualizaciones][0], 1);
	TextDrawSetShadow(Textdraws[textdraw_actualizaciones][0], 0);

	Textdraws[textdraw_actualizaciones][1] = TextDrawCreate(275.944335, 144.500030, "Actulizaciones");
	TextDrawLetterSize(Textdraws[textdraw_actualizaciones][1], 0.400000, 1.600000);
	TextDrawAlignment(Textdraws[textdraw_actualizaciones][1], 1);
	TextDrawColor(Textdraws[textdraw_actualizaciones][1], -1);
	TextDrawSetShadow(Textdraws[textdraw_actualizaciones][1], 2);
	TextDrawSetOutline(Textdraws[textdraw_actualizaciones][1], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_actualizaciones][1], -2147483393);
	TextDrawFont(Textdraws[textdraw_actualizaciones][1], 1);
	TextDrawSetProportional(Textdraws[textdraw_actualizaciones][1], 1);
	TextDrawSetShadow(Textdraws[textdraw_actualizaciones][1], 2);

	Textdraws[textdraw_actualizaciones][2] = TextDrawCreate(478.345825, 143.916641, "v3.2");
	TextDrawLetterSize(Textdraws[textdraw_actualizaciones][2], 0.397657, 1.022498);
	TextDrawAlignment(Textdraws[textdraw_actualizaciones][2], 3);
	TextDrawColor(Textdraws[textdraw_actualizaciones][2], -1);
	TextDrawSetShadow(Textdraws[textdraw_actualizaciones][2], 1);
	TextDrawSetOutline(Textdraws[textdraw_actualizaciones][2], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_actualizaciones][2], -1523963137);
	TextDrawFont(Textdraws[textdraw_actualizaciones][2], 3);
	TextDrawSetProportional(Textdraws[textdraw_actualizaciones][2], 1);
	TextDrawSetShadow(Textdraws[textdraw_actualizaciones][2], 1);

	Textdraws[textdraw_actualizaciones][3] = TextDrawCreate(169.421661, 171.916641, "hud:radar_modgarage");
	TextDrawLetterSize(Textdraws[textdraw_actualizaciones][3], 0.000000, 0.000000);
	TextDrawTextSize(Textdraws[textdraw_actualizaciones][3], 11.000000, 12.000000);
	TextDrawAlignment(Textdraws[textdraw_actualizaciones][3], 1);
	TextDrawColor(Textdraws[textdraw_actualizaciones][3], -1);
	TextDrawSetShadow(Textdraws[textdraw_actualizaciones][3], 0);
	TextDrawSetOutline(Textdraws[textdraw_actualizaciones][3], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_actualizaciones][3], 255);
	TextDrawFont(Textdraws[textdraw_actualizaciones][3], 4);
	TextDrawSetProportional(Textdraws[textdraw_actualizaciones][3], 0);
	TextDrawSetShadow(Textdraws[textdraw_actualizaciones][3], 0);

	Textdraws[textdraw_actualizaciones][4] = TextDrawCreate(168.484619, 188.833328, "hud:radar_modgarage");
	TextDrawLetterSize(Textdraws[textdraw_actualizaciones][4], 0.000000, 0.000000);
	TextDrawTextSize(Textdraws[textdraw_actualizaciones][4], 11.000000, 12.000000);
	TextDrawAlignment(Textdraws[textdraw_actualizaciones][4], 1);
	TextDrawColor(Textdraws[textdraw_actualizaciones][4], -1);
	TextDrawSetShadow(Textdraws[textdraw_actualizaciones][4], 0);
	TextDrawSetOutline(Textdraws[textdraw_actualizaciones][4], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_actualizaciones][4], 255);
	TextDrawFont(Textdraws[textdraw_actualizaciones][4], 4);
	TextDrawSetProportional(Textdraws[textdraw_actualizaciones][4], 0);
	TextDrawSetShadow(Textdraws[textdraw_actualizaciones][4], 0);

	Textdraws[textdraw_actualizaciones][5] = TextDrawCreate(168.484619, 204.583282, "hud:radar_modgarage");
	TextDrawLetterSize(Textdraws[textdraw_actualizaciones][5], 0.000000, 0.000000);
	TextDrawTextSize(Textdraws[textdraw_actualizaciones][5], 11.000000, 12.000000);
	TextDrawAlignment(Textdraws[textdraw_actualizaciones][5], 1);
	TextDrawColor(Textdraws[textdraw_actualizaciones][5], -1);
	TextDrawSetShadow(Textdraws[textdraw_actualizaciones][5], 0);
	TextDrawSetOutline(Textdraws[textdraw_actualizaciones][5], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_actualizaciones][5], 255);
	TextDrawFont(Textdraws[textdraw_actualizaciones][5], 4);
	TextDrawSetProportional(Textdraws[textdraw_actualizaciones][5], 0);
	TextDrawSetShadow(Textdraws[textdraw_actualizaciones][5], 0);

	Textdraws[textdraw_actualizaciones][6] = TextDrawCreate(168.484619, 221.499938, "hud:radar_modgarage");
	TextDrawLetterSize(Textdraws[textdraw_actualizaciones][6], 0.000000, 0.000000);
	TextDrawTextSize(Textdraws[textdraw_actualizaciones][6], 11.000000, 12.000000);
	TextDrawAlignment(Textdraws[textdraw_actualizaciones][6], 1);
	TextDrawColor(Textdraws[textdraw_actualizaciones][6], -1);
	TextDrawSetShadow(Textdraws[textdraw_actualizaciones][6], 0);
	TextDrawSetOutline(Textdraws[textdraw_actualizaciones][6], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_actualizaciones][6], 255);
	TextDrawFont(Textdraws[textdraw_actualizaciones][6], 4);
	TextDrawSetProportional(Textdraws[textdraw_actualizaciones][6], 0);
	TextDrawSetShadow(Textdraws[textdraw_actualizaciones][6], 0);

	Textdraws[textdraw_actualizaciones][7] = TextDrawCreate(168.016098, 237.249908, "hud:radar_modgarage");
	TextDrawLetterSize(Textdraws[textdraw_actualizaciones][7], 0.000000, 0.000000);
	TextDrawTextSize(Textdraws[textdraw_actualizaciones][7], 11.000000, 12.000000);
	TextDrawAlignment(Textdraws[textdraw_actualizaciones][7], 1);
	TextDrawColor(Textdraws[textdraw_actualizaciones][7], -1);
	TextDrawSetShadow(Textdraws[textdraw_actualizaciones][7], 0);
	TextDrawSetOutline(Textdraws[textdraw_actualizaciones][7], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_actualizaciones][7], 255);
	TextDrawFont(Textdraws[textdraw_actualizaciones][7], 4);
	TextDrawSetProportional(Textdraws[textdraw_actualizaciones][7], 0);
	TextDrawSetShadow(Textdraws[textdraw_actualizaciones][7], 0);

	Textdraws[textdraw_actualizaciones][8] = TextDrawCreate(168.484619, 252.416595, "hud:radar_modgarage");
	TextDrawLetterSize(Textdraws[textdraw_actualizaciones][8], 0.000000, 0.000000);
	TextDrawTextSize(Textdraws[textdraw_actualizaciones][8], 11.000000, 12.000000);
	TextDrawAlignment(Textdraws[textdraw_actualizaciones][8], 1);
	TextDrawColor(Textdraws[textdraw_actualizaciones][8], -1);
	TextDrawSetShadow(Textdraws[textdraw_actualizaciones][8], 0);
	TextDrawSetOutline(Textdraws[textdraw_actualizaciones][8], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_actualizaciones][8], 255);
	TextDrawFont(Textdraws[textdraw_actualizaciones][8], 4);
	TextDrawSetProportional(Textdraws[textdraw_actualizaciones][8], 0);
	TextDrawSetShadow(Textdraws[textdraw_actualizaciones][8], 0);

	Textdraws[textdraw_actualizaciones][9] = TextDrawCreate(168.953140, 265.249847, "hud:radar_modgarage");
	TextDrawLetterSize(Textdraws[textdraw_actualizaciones][9], 0.000000, 0.000000);
	TextDrawTextSize(Textdraws[textdraw_actualizaciones][9], 11.000000, 12.000000);
	TextDrawAlignment(Textdraws[textdraw_actualizaciones][9], 1);
	TextDrawColor(Textdraws[textdraw_actualizaciones][9], -1);
	TextDrawSetShadow(Textdraws[textdraw_actualizaciones][9], 0);
	TextDrawSetOutline(Textdraws[textdraw_actualizaciones][9], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_actualizaciones][9], 255);
	TextDrawFont(Textdraws[textdraw_actualizaciones][9], 4);
	TextDrawSetProportional(Textdraws[textdraw_actualizaciones][9], 0);
	TextDrawSetShadow(Textdraws[textdraw_actualizaciones][9], 0);

	Textdraws[textdraw_actualizaciones][10] = TextDrawCreate(169.421661, 279.249908, "hud:radar_modgarage");
	TextDrawLetterSize(Textdraws[textdraw_actualizaciones][10], 0.000000, 0.000000);
	TextDrawTextSize(Textdraws[textdraw_actualizaciones][10], 11.000000, 12.000000);
	TextDrawAlignment(Textdraws[textdraw_actualizaciones][10], 1);
	TextDrawColor(Textdraws[textdraw_actualizaciones][10], -1);
	TextDrawSetShadow(Textdraws[textdraw_actualizaciones][10], 0);
	TextDrawSetOutline(Textdraws[textdraw_actualizaciones][10], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_actualizaciones][10], 255);
	TextDrawFont(Textdraws[textdraw_actualizaciones][10], 4);
	TextDrawSetProportional(Textdraws[textdraw_actualizaciones][10], 0);
	TextDrawSetShadow(Textdraws[textdraw_actualizaciones][10], 0);

	Textdraws[textdraw_actualizaciones][11] = TextDrawCreate(180.834533, 172.500015, "Nueva tienda de ZonCoins donde puedes comprar beneficios y otras cosas con la moneda del servidor /Tiendarp");
	TextDrawLetterSize(Textdraws[textdraw_actualizaciones][11], 0.160117, 1.249999);
	TextDrawAlignment(Textdraws[textdraw_actualizaciones][11], 1);
	TextDrawColor(Textdraws[textdraw_actualizaciones][11], -1);
	TextDrawSetShadow(Textdraws[textdraw_actualizaciones][11], 0);
	TextDrawSetOutline(Textdraws[textdraw_actualizaciones][11], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_actualizaciones][11], 255);
	TextDrawFont(Textdraws[textdraw_actualizaciones][11], 1);
	TextDrawSetProportional(Textdraws[textdraw_actualizaciones][11], 1);
	TextDrawSetShadow(Textdraws[textdraw_actualizaciones][11], 0);

	Textdraws[textdraw_actualizaciones][12] = TextDrawCreate(179.897491, 187.666656, "Nueva tienda de ZonCoins donde puedes comprar beneficios y otras cosas con la moneda del servidor /Tiendarp");
	TextDrawLetterSize(Textdraws[textdraw_actualizaciones][12], 0.160117, 1.249999);
	TextDrawAlignment(Textdraws[textdraw_actualizaciones][12], 1);
	TextDrawColor(Textdraws[textdraw_actualizaciones][12], -1);
	TextDrawSetShadow(Textdraws[textdraw_actualizaciones][12], 0);
	TextDrawSetOutline(Textdraws[textdraw_actualizaciones][12], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_actualizaciones][12], 255);
	TextDrawFont(Textdraws[textdraw_actualizaciones][12], 1);
	TextDrawSetProportional(Textdraws[textdraw_actualizaciones][12], 1);
	TextDrawSetShadow(Textdraws[textdraw_actualizaciones][12], 0);

	Textdraws[textdraw_actualizaciones][13] = TextDrawCreate(179.428970, 203.999969, "Nueva tienda de ZonCoins donde puedes comprar beneficios y otras cosas con la moneda del servidor /Tiendarp");
	TextDrawLetterSize(Textdraws[textdraw_actualizaciones][13], 0.160117, 1.249999);
	TextDrawAlignment(Textdraws[textdraw_actualizaciones][13], 1);
	TextDrawColor(Textdraws[textdraw_actualizaciones][13], -1);
	TextDrawSetShadow(Textdraws[textdraw_actualizaciones][13], 0);
	TextDrawSetOutline(Textdraws[textdraw_actualizaciones][13], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_actualizaciones][13], 255);
	TextDrawFont(Textdraws[textdraw_actualizaciones][13], 1);
	TextDrawSetProportional(Textdraws[textdraw_actualizaciones][13], 1);
	TextDrawSetShadow(Textdraws[textdraw_actualizaciones][13], 0);

	Textdraws[textdraw_actualizaciones][14] = TextDrawCreate(179.428970, 220.916610, "Nueva tienda de ZonCoins donde puedes comprar beneficios y otras cosas con la moneda del servidor /Tiendarp");
	TextDrawLetterSize(Textdraws[textdraw_actualizaciones][14], 0.160117, 1.249999);
	TextDrawAlignment(Textdraws[textdraw_actualizaciones][14], 1);
	TextDrawColor(Textdraws[textdraw_actualizaciones][14], -1);
	TextDrawSetShadow(Textdraws[textdraw_actualizaciones][14], 0);
	TextDrawSetOutline(Textdraws[textdraw_actualizaciones][14], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_actualizaciones][14], 255);
	TextDrawFont(Textdraws[textdraw_actualizaciones][14], 1);
	TextDrawSetProportional(Textdraws[textdraw_actualizaciones][14], 1);
	TextDrawSetShadow(Textdraws[textdraw_actualizaciones][14], 0);

	Textdraws[textdraw_actualizaciones][15] = TextDrawCreate(179.428970, 236.617568, "Nueva tienda de ZonCoins donde puedes comprar beneficios y otras cosas con la moneda del servidor /Tiendarp");
	TextDrawLetterSize(Textdraws[textdraw_actualizaciones][15], 0.160117, 1.249999);
	TextDrawAlignment(Textdraws[textdraw_actualizaciones][15], 1);
	TextDrawColor(Textdraws[textdraw_actualizaciones][15], -1);
	TextDrawSetShadow(Textdraws[textdraw_actualizaciones][15], 0);
	TextDrawSetOutline(Textdraws[textdraw_actualizaciones][15], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_actualizaciones][15], 255);
	TextDrawFont(Textdraws[textdraw_actualizaciones][15], 1);
	TextDrawSetProportional(Textdraws[textdraw_actualizaciones][15], 1);
	TextDrawSetShadow(Textdraws[textdraw_actualizaciones][15], 0);

	Textdraws[textdraw_actualizaciones][16] = TextDrawCreate(179.428970, 251.818496, "Nueva tienda de ZonCoins donde puedes comprar beneficios y otras cosas con la moneda del servidor /Tiendarp");
	TextDrawLetterSize(Textdraws[textdraw_actualizaciones][16], 0.160117, 1.249999);
	TextDrawAlignment(Textdraws[textdraw_actualizaciones][16], 1);
	TextDrawColor(Textdraws[textdraw_actualizaciones][16], -1);
	TextDrawSetShadow(Textdraws[textdraw_actualizaciones][16], 0);
	TextDrawSetOutline(Textdraws[textdraw_actualizaciones][16], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_actualizaciones][16], 255);
	TextDrawFont(Textdraws[textdraw_actualizaciones][16], 1);
	TextDrawSetProportional(Textdraws[textdraw_actualizaciones][16], 1);
	TextDrawSetShadow(Textdraws[textdraw_actualizaciones][16], 0);

	Textdraws[textdraw_actualizaciones][17] = TextDrawCreate(179.428970, 264.019226, "Nueva tienda de ZonCoins donde puedes comprar beneficios y otras cosas con la moneda del servidor /Tiendarp");
	TextDrawLetterSize(Textdraws[textdraw_actualizaciones][17], 0.160117, 1.249999);
	TextDrawAlignment(Textdraws[textdraw_actualizaciones][17], 1);
	TextDrawColor(Textdraws[textdraw_actualizaciones][17], -1);
	TextDrawSetShadow(Textdraws[textdraw_actualizaciones][17], 0);
	TextDrawSetOutline(Textdraws[textdraw_actualizaciones][17], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_actualizaciones][17], 255);
	TextDrawFont(Textdraws[textdraw_actualizaciones][17], 1);
	TextDrawSetProportional(Textdraws[textdraw_actualizaciones][17], 1);
	TextDrawSetShadow(Textdraws[textdraw_actualizaciones][17], 0);

	Textdraws[textdraw_actualizaciones][18] = TextDrawCreate(179.428970, 278.620117, "Nueva tienda de ZonCoins donde puedes comprar beneficios y otras cosas con la moneda del servidor /Tiendarp");
	TextDrawLetterSize(Textdraws[textdraw_actualizaciones][18], 0.160117, 1.249999);
	TextDrawAlignment(Textdraws[textdraw_actualizaciones][18], 1);
	TextDrawColor(Textdraws[textdraw_actualizaciones][18], -1);
	TextDrawSetShadow(Textdraws[textdraw_actualizaciones][18], 0);
	TextDrawSetOutline(Textdraws[textdraw_actualizaciones][18], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_actualizaciones][18], 255);
	TextDrawFont(Textdraws[textdraw_actualizaciones][18], 1);
	TextDrawSetProportional(Textdraws[textdraw_actualizaciones][18], 1);
	TextDrawSetShadow(Textdraws[textdraw_actualizaciones][18], 0);	

	//grafiti
	Textdraws[textdraw_grafiti] = TextDrawCreate(520.731994, 204.600036, "Grafiti en 'Las colinas'~n~Bluemans : 50 %~n~Bendito motors: 60%");
	TextDrawLetterSize(Textdraws[textdraw_grafiti], 0.209780, 1.209166);
	TextDrawTextSize(Textdraws[textdraw_grafiti], 612.000000, 0.000000);
	TextDrawAlignment(Textdraws[textdraw_grafiti], 1);
	TextDrawColor(Textdraws[textdraw_grafiti], -1);
	TextDrawUseBox(Textdraws[textdraw_grafiti], 1);
	TextDrawBoxColor(Textdraws[textdraw_grafiti], 128);
	TextDrawSetShadow(Textdraws[textdraw_grafiti], 0);
	TextDrawSetOutline(Textdraws[textdraw_grafiti], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_grafiti], 255);
	TextDrawFont(Textdraws[textdraw_grafiti], 1);
	TextDrawSetProportional(Textdraws[textdraw_grafiti], 1);
	TextDrawSetShadow(Textdraws[textdraw_grafiti], 0);

	Textdraws[TextdrawFechaGlobal] = TextDrawCreate(565.490722, 2.166646, "Jueves 18 de enero del 2019");
	TextDrawLetterSize(Textdraws[TextdrawFechaGlobal], 0.212123, 1.582500);
	TextDrawAlignment(Textdraws[TextdrawFechaGlobal], 2);
	TextDrawColor(Textdraws[TextdrawFechaGlobal], -286331824);
	TextDrawSetShadow(Textdraws[TextdrawFechaGlobal], 0);
	TextDrawSetOutline(Textdraws[TextdrawFechaGlobal], 0);
	TextDrawBackgroundColor(Textdraws[TextdrawFechaGlobal], 255);
	TextDrawFont(Textdraws[TextdrawFechaGlobal], 1);
	TextDrawSetProportional(Textdraws[TextdrawFechaGlobal], 1);
	TextDrawSetShadow(Textdraws[TextdrawFechaGlobal], 0);

	Textdraws[textdraw_HUD][0] = TextDrawCreate(-1.741168, 438.066955, "_");//Barra reputacion
	TextDrawLetterSize(Textdraws[textdraw_HUD][0], 0.401873, 1.051664);
	TextDrawTextSize(Textdraws[textdraw_HUD][0], 638.000000, 0.000000);
	TextDrawAlignment(Textdraws[textdraw_HUD][0], 1);
	TextDrawColor(Textdraws[textdraw_HUD][0], -1);
	TextDrawUseBox(Textdraws[textdraw_HUD][0], 1);
	TextDrawBoxColor(Textdraws[textdraw_HUD][0], 128);
	TextDrawSetShadow(Textdraws[textdraw_HUD][0], 0);
	TextDrawSetOutline(Textdraws[textdraw_HUD][0], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_HUD][0], 255);
	TextDrawFont(Textdraws[textdraw_HUD][0], 1);
	TextDrawSetProportional(Textdraws[textdraw_HUD][0], 1);
	TextDrawSetShadow(Textdraws[textdraw_HUD][0], 0);

	Textdraws[textdraw_HUD][1] = TextDrawCreate(521.128540, 142.900146, "_");//BarraAtrasRep
	TextDrawLetterSize(Textdraws[textdraw_HUD][1], 0.407027, 0.252499);
	TextDrawTextSize(Textdraws[textdraw_HUD][1], 611.000000, 0.000000);
	TextDrawAlignment(Textdraws[textdraw_HUD][1], 1);
	TextDrawColor(Textdraws[textdraw_HUD][1], -1);
	TextDrawUseBox(Textdraws[textdraw_HUD][1], 1);
	TextDrawBoxColor(Textdraws[textdraw_HUD][1], -1061109505);
	TextDrawSetShadow(Textdraws[textdraw_HUD][1], 0);
	TextDrawSetOutline(Textdraws[textdraw_HUD][1], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_HUD][1], 255);
	TextDrawFont(Textdraws[textdraw_HUD][1], 1);
	TextDrawSetProportional(Textdraws[textdraw_HUD][1], 1);
	TextDrawSetShadow(Textdraws[textdraw_HUD][1], 0);

	Textdraws[textdraw_HUD][2] = TextDrawCreate(521.449035, 111.250007, "_");//BarraAtrasHambre
	TextDrawLetterSize(Textdraws[textdraw_HUD][2], 0.406089, 0.170831);
	TextDrawTextSize(Textdraws[textdraw_HUD][2], 611.000000, 0.000000);
	TextDrawAlignment(Textdraws[textdraw_HUD][2], 1);
	TextDrawColor(Textdraws[textdraw_HUD][2], -1);
	TextDrawUseBox(Textdraws[textdraw_HUD][2], 1);
	TextDrawBoxColor(Textdraws[textdraw_HUD][2], 190909439);
	TextDrawSetShadow(Textdraws[textdraw_HUD][2], 0);
	TextDrawSetOutline(Textdraws[textdraw_HUD][2], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_HUD][2], 255);
	TextDrawFont(Textdraws[textdraw_HUD][2], 1);
	TextDrawSetProportional(Textdraws[textdraw_HUD][2], 1);
	TextDrawSetShadow(Textdraws[textdraw_HUD][2], 0);

	Textdraws[textdraw_HUD][3] = TextDrawCreate(521.092041, 120.183372, "_");//BarraAtrasSed
	TextDrawLetterSize(Textdraws[textdraw_HUD][3], 0.407027, 0.135831);
	TextDrawTextSize(Textdraws[textdraw_HUD][3], 611.000000, 0.000000);
	TextDrawAlignment(Textdraws[textdraw_HUD][3], 1);
	TextDrawColor(Textdraws[textdraw_HUD][3], -1);
	TextDrawUseBox(Textdraws[textdraw_HUD][3], 1);
	TextDrawBoxColor(Textdraws[textdraw_HUD][3], -43696);
	TextDrawSetShadow(Textdraws[textdraw_HUD][3], 0);
	TextDrawSetOutline(Textdraws[textdraw_HUD][3], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_HUD][3], 255);
	TextDrawFont(Textdraws[textdraw_HUD][3], 1);
	TextDrawSetProportional(Textdraws[textdraw_HUD][3], 1);
	TextDrawSetShadow(Textdraws[textdraw_HUD][3], 0);

	Textdraws[textdraw_HUD][4] = TextDrawCreate(637.000000, 427.000000, ""SERVER_NAME" "SERVER_VERSION"");
	TextDrawLetterSize(Textdraws[textdraw_HUD][4], 0.221333, 1.077334);
	TextDrawAlignment(Textdraws[textdraw_HUD][4], 3);
	TextDrawColor(Textdraws[textdraw_HUD][4], -156);
	TextDrawSetShadow(Textdraws[textdraw_HUD][4], 0);
	TextDrawSetOutline(Textdraws[textdraw_HUD][4], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_HUD][4], 255);
	TextDrawFont(Textdraws[textdraw_HUD][4], 1);
	TextDrawSetProportional(Textdraws[textdraw_HUD][4], 1);
	TextDrawSetShadow(Textdraws[textdraw_HUD][4], 0);

	Textdraws[textdraw_HUD][5] = TextDrawCreate(505.314758, 108.699951, "hud:radar_datefood");
	TextDrawLetterSize(Textdraws[textdraw_HUD][5], 0.000000, 0.000000);
	TextDrawTextSize(Textdraws[textdraw_HUD][5], 10.000000, 7.000000);
	TextDrawAlignment(Textdraws[textdraw_HUD][5], 1);
	TextDrawColor(Textdraws[textdraw_HUD][5], 16777215);
	TextDrawSetShadow(Textdraws[textdraw_HUD][5], 0);
	TextDrawSetOutline(Textdraws[textdraw_HUD][5], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_HUD][5], 255);
	TextDrawFont(Textdraws[textdraw_HUD][5], 4);
	TextDrawSetProportional(Textdraws[textdraw_HUD][5], 0);
	TextDrawSetShadow(Textdraws[textdraw_HUD][5], 0);

	Textdraws[textdraw_HUD][6] = TextDrawCreate(506.446319, 117.849967, "hud:radar_datedrink");
	TextDrawLetterSize(Textdraws[textdraw_HUD][6], 0.000000, 0.000000);
	TextDrawTextSize(Textdraws[textdraw_HUD][6], 8.000000, 8.000000);
	TextDrawAlignment(Textdraws[textdraw_HUD][6], 1);
	TextDrawColor(Textdraws[textdraw_HUD][6], 16777215);
	TextDrawSetShadow(Textdraws[textdraw_HUD][6], 0);
	TextDrawSetOutline(Textdraws[textdraw_HUD][6], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_HUD][6], 255);
	TextDrawFont(Textdraws[textdraw_HUD][6], 4);
	TextDrawSetProportional(Textdraws[textdraw_HUD][6], 0);
	TextDrawSetShadow(Textdraws[textdraw_HUD][6], 0);

	Textdraws[textdraw_HUD][7] = TextDrawCreate(634.195007, 100.166687, "ld_chat:dpad_lr");
	TextDrawLetterSize(Textdraws[textdraw_HUD][7], 0.000000, 0.000000);
	TextDrawTextSize(Textdraws[textdraw_HUD][7], -90.000000, 53.000000);
	TextDrawAlignment(Textdraws[textdraw_HUD][7], 1);
	TextDrawColor(Textdraws[textdraw_HUD][7], -1);
	TextDrawSetShadow(Textdraws[textdraw_HUD][7], 0);
	TextDrawSetOutline(Textdraws[textdraw_HUD][7], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_HUD][7], 255);
	TextDrawFont(Textdraws[textdraw_HUD][7], 4);
	TextDrawSetProportional(Textdraws[textdraw_HUD][7], 0);
	TextDrawSetShadow(Textdraws[textdraw_HUD][7], 0);

	Textdraws[textdraw_HUD][8] = TextDrawCreate(495.043975, 100.166671, "ld_chat:dpad_lr");
	TextDrawLetterSize(Textdraws[textdraw_HUD][8], 0.000000, 0.000000);
	TextDrawTextSize(Textdraws[textdraw_HUD][8], 87.000000, 53.000000);
	TextDrawAlignment(Textdraws[textdraw_HUD][8], 1);
	TextDrawColor(Textdraws[textdraw_HUD][8], -1);
	TextDrawSetShadow(Textdraws[textdraw_HUD][8], 0);
	TextDrawSetOutline(Textdraws[textdraw_HUD][8], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_HUD][8], 255);
	TextDrawFont(Textdraws[textdraw_HUD][8], 4);
	TextDrawSetProportional(Textdraws[textdraw_HUD][8], 0);
	TextDrawSetShadow(Textdraws[textdraw_HUD][8], 0);

	Textdraws[textdraw_HUD][9]  = TextDrawCreate(500.834686, 104.249992, "__");//Barra atras reputacion y nivel
	TextDrawLetterSize(Textdraws[textdraw_HUD][9] , 0.409837, 4.971665);
	TextDrawTextSize(Textdraws[textdraw_HUD][9] , 630.000000, 0.000000);
	TextDrawAlignment(Textdraws[textdraw_HUD][9] , 1);
	TextDrawColor(Textdraws[textdraw_HUD][9] , -1);
	TextDrawUseBox(Textdraws[textdraw_HUD][9] , 1);
	TextDrawBoxColor(Textdraws[textdraw_HUD][9] , 128);
	TextDrawSetShadow(Textdraws[textdraw_HUD][9] , 0);
	TextDrawSetOutline(Textdraws[textdraw_HUD][9] , 0);
	TextDrawBackgroundColor(Textdraws[textdraw_HUD][9] , 255);
	TextDrawFont(Textdraws[textdraw_HUD][9] , 1);
	TextDrawSetProportional(Textdraws[textdraw_HUD][9] , 1);
	TextDrawSetShadow(Textdraws[textdraw_HUD][9] , 0);

	Textdraws[textdraw_HUD][10] = TextDrawCreate(504.883178, 132.833358, "hud:radar_cash");//Sprite de banco
	TextDrawLetterSize(Textdraws[textdraw_HUD][10], 0.000000, 0.000000);
	TextDrawTextSize(Textdraws[textdraw_HUD][10], 12.000000, 12.000000);
	TextDrawAlignment(Textdraws[textdraw_HUD][10], 1);
	TextDrawColor(Textdraws[textdraw_HUD][10], -1);
	TextDrawSetShadow(Textdraws[textdraw_HUD][10], 0);
	TextDrawSetOutline(Textdraws[textdraw_HUD][10], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_HUD][10], 255);
	TextDrawFont(Textdraws[textdraw_HUD][10], 4);
	TextDrawSetProportional(Textdraws[textdraw_HUD][10], 0);
	TextDrawSetShadow(Textdraws[textdraw_HUD][10], 0);
	//==
	Textdraws[textdraw_GPS_MAP][0] = TextDrawCreate(-5.000000, 132.000000, "box");
	TextDrawLetterSize(Textdraws[textdraw_GPS_MAP][0], 0.000000, 22.498472);
	TextDrawTextSize(Textdraws[textdraw_GPS_MAP][0], 180.130477, 0.000000);
	TextDrawAlignment(Textdraws[textdraw_GPS_MAP][0], 1);
	TextDrawColor(Textdraws[textdraw_GPS_MAP][0], -1);
	TextDrawUseBox(Textdraws[textdraw_GPS_MAP][0], 1);
	TextDrawBoxColor(Textdraws[textdraw_GPS_MAP][0], 120);
	TextDrawSetShadow(Textdraws[textdraw_GPS_MAP][0], 0);
	TextDrawSetOutline(Textdraws[textdraw_GPS_MAP][0], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_GPS_MAP][0], 255);
	TextDrawFont(Textdraws[textdraw_GPS_MAP][0], 1);
	TextDrawSetProportional(Textdraws[textdraw_GPS_MAP][0], 1);
	TextDrawSetShadow(Textdraws[textdraw_GPS_MAP][0], 0);

	Textdraws[textdraw_GPS_MAP][1] = TextDrawCreate(map_td_X, map_td_Y, "samaps:map");
	TextDrawLetterSize(Textdraws[textdraw_GPS_MAP][1], 0.000000, 0.000000);
	TextDrawTextSize(Textdraws[textdraw_GPS_MAP][1], map_td_SIZE_X, map_td_SIZE_Y);
	TextDrawAlignment(Textdraws[textdraw_GPS_MAP][1], 1);
	TextDrawColor(Textdraws[textdraw_GPS_MAP][1], -1);
	TextDrawSetShadow(Textdraws[textdraw_GPS_MAP][1], 0);
	TextDrawSetOutline(Textdraws[textdraw_GPS_MAP][1], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_GPS_MAP][1], 255);
	TextDrawFont(Textdraws[textdraw_GPS_MAP][1], 4);
	TextDrawSetProportional(Textdraws[textdraw_GPS_MAP][1], 0);
	TextDrawSetShadow(Textdraws[textdraw_GPS_MAP][1], 0);

	Textdraws[textdraw_GPS_MAP][2] = TextDrawCreate(90.000000, 324.000000, "GPS_-_/mapa");
	TextDrawLetterSize(Textdraws[textdraw_GPS_MAP][2], 0.197330, 1.027553);
	TextDrawAlignment(Textdraws[textdraw_GPS_MAP][2], 2);
	TextDrawColor(Textdraws[textdraw_GPS_MAP][2], -186);
	TextDrawSetShadow(Textdraws[textdraw_GPS_MAP][2], 0);
	TextDrawSetOutline(Textdraws[textdraw_GPS_MAP][2], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_GPS_MAP][2], 255);
	TextDrawFont(Textdraws[textdraw_GPS_MAP][2], 1);
	TextDrawSetProportional(Textdraws[textdraw_GPS_MAP][2], 1);
	TextDrawSetShadow(Textdraws[textdraw_GPS_MAP][2], 0);
	
	
	Textdraws[textdraw_PLAYER_REP_BACK][0] = TextDrawCreate(500.000000, 13.000000, "box");
	TextDrawLetterSize(Textdraws[textdraw_PLAYER_REP_BACK][0], 0.000000, 0.633333);
	TextDrawTextSize(Textdraws[textdraw_PLAYER_REP_BACK][0], 605.000000, 0.000000);
	TextDrawAlignment(Textdraws[textdraw_PLAYER_REP_BACK][0], 1);
	TextDrawColor(Textdraws[textdraw_PLAYER_REP_BACK][0], -1);
	TextDrawUseBox(Textdraws[textdraw_PLAYER_REP_BACK][0], 1);
	TextDrawBoxColor(Textdraws[textdraw_PLAYER_REP_BACK][0], 255);
	TextDrawSetShadow(Textdraws[textdraw_PLAYER_REP_BACK][0], 0);
	TextDrawSetOutline(Textdraws[textdraw_PLAYER_REP_BACK][0], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_PLAYER_REP_BACK][0], 255);
	TextDrawFont(Textdraws[textdraw_PLAYER_REP_BACK][0], 1);
	TextDrawSetProportional(Textdraws[textdraw_PLAYER_REP_BACK][0], 1);
	TextDrawSetShadow(Textdraws[textdraw_PLAYER_REP_BACK][0], 0);

	Textdraws[textdraw_PLAYER_REP_BACK][1] = TextDrawCreate(502.000000, 15.000000, "box");
	TextDrawLetterSize(Textdraws[textdraw_PLAYER_REP_BACK][1], 0.000000, 0.200000);
	TextDrawTextSize(Textdraws[textdraw_PLAYER_REP_BACK][1], 603.000000, 0.000000);
	TextDrawAlignment(Textdraws[textdraw_PLAYER_REP_BACK][1], 1);
	TextDrawColor(Textdraws[textdraw_PLAYER_REP_BACK][1], -1);
	TextDrawUseBox(Textdraws[textdraw_PLAYER_REP_BACK][1], 1);
	TextDrawBoxColor(Textdraws[textdraw_PLAYER_REP_BACK][1], 5787296);
	TextDrawSetShadow(Textdraws[textdraw_PLAYER_REP_BACK][1], 0);
	TextDrawSetOutline(Textdraws[textdraw_PLAYER_REP_BACK][1], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_PLAYER_REP_BACK][1], 255);
	TextDrawFont(Textdraws[textdraw_PLAYER_REP_BACK][1], 1);
	TextDrawSetProportional(Textdraws[textdraw_PLAYER_REP_BACK][1], 1);
	TextDrawSetShadow(Textdraws[textdraw_PLAYER_REP_BACK][1], 0);
	
	Textdraws[textdraw_LOAD_SCREEN][0] = TextDrawCreate(320.000000, 0.000000, "box");
	TextDrawLetterSize(Textdraws[textdraw_LOAD_SCREEN][0], 0.000000, 60.0);
	TextDrawTextSize(Textdraws[textdraw_LOAD_SCREEN][0], 0.000000, 700.000000);
	TextDrawAlignment(Textdraws[textdraw_LOAD_SCREEN][0], 2);
	TextDrawColor(Textdraws[textdraw_LOAD_SCREEN][0], -1);
	TextDrawUseBox(Textdraws[textdraw_LOAD_SCREEN][0], 1);
	TextDrawBoxColor(Textdraws[textdraw_LOAD_SCREEN][0], 255);
	TextDrawSetShadow(Textdraws[textdraw_LOAD_SCREEN][0], 0);
	TextDrawSetOutline(Textdraws[textdraw_LOAD_SCREEN][0], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_LOAD_SCREEN][0], 255);
	TextDrawFont(Textdraws[textdraw_LOAD_SCREEN][0], 1);
	TextDrawSetProportional(Textdraws[textdraw_LOAD_SCREEN][0], 1);
	TextDrawSetShadow(Textdraws[textdraw_LOAD_SCREEN][0], 0);

	Textdraws[textdraw_LOAD_SCREEN][1] = TextDrawCreate(320.000000, 30.000000, SERVER_SHORT_NAME);
	TextDrawLetterSize(Textdraws[textdraw_LOAD_SCREEN][1], 0.535332, 2.230517);
	TextDrawAlignment(Textdraws[textdraw_LOAD_SCREEN][1], 2);
	TextDrawColor(Textdraws[textdraw_LOAD_SCREEN][1], -1);
	TextDrawSetShadow(Textdraws[textdraw_LOAD_SCREEN][1], 0);
	TextDrawSetOutline(Textdraws[textdraw_LOAD_SCREEN][1], 1);
	TextDrawBackgroundColor(Textdraws[textdraw_LOAD_SCREEN][1], 1094795655);
	TextDrawFont(Textdraws[textdraw_LOAD_SCREEN][1], 3);
	TextDrawSetProportional(Textdraws[textdraw_LOAD_SCREEN][1], 1);
	TextDrawSetShadow(Textdraws[textdraw_LOAD_SCREEN][1], 0);

	Textdraws[textdraw_LOAD_SCREEN][2] = TextDrawCreate(320.000000, 52.000000, "RolePlay");
	TextDrawLetterSize(Textdraws[textdraw_LOAD_SCREEN][2], 0.494332, 2.081182);
	TextDrawAlignment(Textdraws[textdraw_LOAD_SCREEN][2], 2);
	TextDrawColor(Textdraws[textdraw_LOAD_SCREEN][2], 255);
	TextDrawSetShadow(Textdraws[textdraw_LOAD_SCREEN][2], 0);
	TextDrawSetOutline(Textdraws[textdraw_LOAD_SCREEN][2], 1);
	TextDrawBackgroundColor(Textdraws[textdraw_LOAD_SCREEN][2], -124);
	TextDrawFont(Textdraws[textdraw_LOAD_SCREEN][2], 0);
	TextDrawSetProportional(Textdraws[textdraw_LOAD_SCREEN][2], 1);
	TextDrawSetShadow(Textdraws[textdraw_LOAD_SCREEN][2], 0);

	Textdraws[textdraw_LOAD_SCREEN][3] = TextDrawCreate(320.000000, 360.000000, "box");
	TextDrawLetterSize(Textdraws[textdraw_LOAD_SCREEN][3], 0.000000, -0.133331);
	TextDrawTextSize(Textdraws[textdraw_LOAD_SCREEN][3], 0.000000, 663.000000);
	TextDrawAlignment(Textdraws[textdraw_LOAD_SCREEN][3], 2);
	TextDrawColor(Textdraws[textdraw_LOAD_SCREEN][3], -1);
	TextDrawUseBox(Textdraws[textdraw_LOAD_SCREEN][3], 1);
	TextDrawBoxColor(Textdraws[textdraw_LOAD_SCREEN][3], 1010580735);
	TextDrawSetShadow(Textdraws[textdraw_LOAD_SCREEN][3], 0);
	TextDrawSetOutline(Textdraws[textdraw_LOAD_SCREEN][3], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_LOAD_SCREEN][3], 255);
	TextDrawFont(Textdraws[textdraw_LOAD_SCREEN][3], 1);
	TextDrawSetProportional(Textdraws[textdraw_LOAD_SCREEN][3], 1);
	TextDrawSetShadow(Textdraws[textdraw_LOAD_SCREEN][3], 0);

	Textdraws[textdraw_LOAD_SCREEN][4] = TextDrawCreate(320.000000, 90.000000, "box");
	TextDrawLetterSize(Textdraws[textdraw_LOAD_SCREEN][4], 0.000000, -0.133331);
	TextDrawTextSize(Textdraws[textdraw_LOAD_SCREEN][4], 0.000000, 663.000000);
	TextDrawAlignment(Textdraws[textdraw_LOAD_SCREEN][4], 2);
	TextDrawColor(Textdraws[textdraw_LOAD_SCREEN][4], -1);
	TextDrawUseBox(Textdraws[textdraw_LOAD_SCREEN][4], 1);
	TextDrawBoxColor(Textdraws[textdraw_LOAD_SCREEN][4], 1010580735);
	TextDrawSetShadow(Textdraws[textdraw_LOAD_SCREEN][4], 0);
	TextDrawSetOutline(Textdraws[textdraw_LOAD_SCREEN][4], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_LOAD_SCREEN][4], 255);
	TextDrawFont(Textdraws[textdraw_LOAD_SCREEN][4], 1);
	TextDrawSetProportional(Textdraws[textdraw_LOAD_SCREEN][4], 1);
	TextDrawSetShadow(Textdraws[textdraw_LOAD_SCREEN][4], 0);
	
	Textdraws[textdraw_SERVER_TIME] = TextDrawCreate(577.5, 23.0, "00:00");
	TextDrawLetterSize(Textdraws[textdraw_SERVER_TIME], 0.424666, 1.661777);
	TextDrawAlignment(Textdraws[textdraw_SERVER_TIME], 2);
	TextDrawColor(Textdraws[textdraw_SERVER_TIME], -1);
	TextDrawSetShadow(Textdraws[textdraw_SERVER_TIME], 0);
	TextDrawSetOutline(Textdraws[textdraw_SERVER_TIME], 1);
	TextDrawBackgroundColor(Textdraws[textdraw_SERVER_TIME], 255);
	TextDrawFont(Textdraws[textdraw_SERVER_TIME], 3);
	TextDrawSetProportional(Textdraws[textdraw_SERVER_TIME], 1);
	TextDrawSetShadow(Textdraws[textdraw_SERVER_TIME], 0);
	
	
	Textdraws[textdraw_SHOP][0] = TextDrawCreate(320.000000, 120.000000, "box");
	TextDrawLetterSize(Textdraws[textdraw_SHOP][0], 0.000000, 24.936986);
	TextDrawTextSize(Textdraws[textdraw_SHOP][0], 0.000000, 254.000000);
	TextDrawAlignment(Textdraws[textdraw_SHOP][0], 2);
	TextDrawColor(Textdraws[textdraw_SHOP][0], -1);
	TextDrawUseBox(Textdraws[textdraw_SHOP][0], 1);
	TextDrawBoxColor(Textdraws[textdraw_SHOP][0], 201);
	TextDrawSetShadow(Textdraws[textdraw_SHOP][0], 0);
	TextDrawSetOutline(Textdraws[textdraw_SHOP][0], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_SHOP][0], 255);
	TextDrawFont(Textdraws[textdraw_SHOP][0], 1);
	TextDrawSetProportional(Textdraws[textdraw_SHOP][0], 1);
	TextDrawSetShadow(Textdraws[textdraw_SHOP][0], 0);

	Textdraws[textdraw_SHOP][1] = TextDrawCreate(320.000000, 125.000000, "box");
	TextDrawLetterSize(Textdraws[textdraw_SHOP][1], 0.000000, 23.766672);
	TextDrawTextSize(Textdraws[textdraw_SHOP][1], 0.000000, 254.000000);
	TextDrawAlignment(Textdraws[textdraw_SHOP][1], 2);
	TextDrawColor(Textdraws[textdraw_SHOP][1], -1);
	TextDrawUseBox(Textdraws[textdraw_SHOP][1], 1);
	TextDrawBoxColor(Textdraws[textdraw_SHOP][1], 11117257);
	TextDrawSetShadow(Textdraws[textdraw_SHOP][1], 0);
	TextDrawSetOutline(Textdraws[textdraw_SHOP][1], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_SHOP][1], 255);
	TextDrawFont(Textdraws[textdraw_SHOP][1], 1);
	TextDrawSetProportional(Textdraws[textdraw_SHOP][1], 1);
	TextDrawSetShadow(Textdraws[textdraw_SHOP][1], 0);

	Textdraws[textdraw_SHOP][2] = TextDrawCreate(207.000000, 128.000000, "Compra_y_venta");
	TextDrawLetterSize(Textdraws[textdraw_SHOP][2], 0.295333, 1.388446);
	TextDrawAlignment(Textdraws[textdraw_SHOP][2], 1);
	TextDrawColor(Textdraws[textdraw_SHOP][2], -1);
	TextDrawSetShadow(Textdraws[textdraw_SHOP][2], 0);
	TextDrawSetOutline(Textdraws[textdraw_SHOP][2], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_SHOP][2], 255);
	TextDrawFont(Textdraws[textdraw_SHOP][2], 1);
	TextDrawSetProportional(Textdraws[textdraw_SHOP][2], 1);
	TextDrawSetShadow(Textdraws[textdraw_SHOP][2], 0);

	Textdraws[textdraw_SHOP][3] = TextDrawCreate(320.000000, 145.000000, "box");
	TextDrawLetterSize(Textdraws[textdraw_SHOP][3], 0.000000, -0.266666);
	TextDrawTextSize(Textdraws[textdraw_SHOP][3], 0.000000, 222.000000);
	TextDrawAlignment(Textdraws[textdraw_SHOP][3], 2);
	TextDrawColor(Textdraws[textdraw_SHOP][3], -1);
	TextDrawUseBox(Textdraws[textdraw_SHOP][3], 1);
	TextDrawBoxColor(Textdraws[textdraw_SHOP][3], 255);
	TextDrawSetShadow(Textdraws[textdraw_SHOP][3], 0);
	TextDrawSetOutline(Textdraws[textdraw_SHOP][3], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_SHOP][3], 255);
	TextDrawFont(Textdraws[textdraw_SHOP][3], 1);
	TextDrawSetProportional(Textdraws[textdraw_SHOP][3], 1);
	TextDrawSetShadow(Textdraws[textdraw_SHOP][3], 0);

	Textdraws[textdraw_SHOP][4] = TextDrawCreate(320.000000, 301.000000, "box");
	TextDrawLetterSize(Textdraws[textdraw_SHOP][4], 0.000000, -0.266666);
	TextDrawTextSize(Textdraws[textdraw_SHOP][4], 0.000000, 222.000000);
	TextDrawAlignment(Textdraws[textdraw_SHOP][4], 2);
	TextDrawColor(Textdraws[textdraw_SHOP][4], -1);
	TextDrawUseBox(Textdraws[textdraw_SHOP][4], 1);
	TextDrawBoxColor(Textdraws[textdraw_SHOP][4], 255);
	TextDrawSetShadow(Textdraws[textdraw_SHOP][4], 0);
	TextDrawSetOutline(Textdraws[textdraw_SHOP][4], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_SHOP][4], 255);
	TextDrawFont(Textdraws[textdraw_SHOP][4], 1);
	TextDrawSetProportional(Textdraws[textdraw_SHOP][4], 1);
	TextDrawSetShadow(Textdraws[textdraw_SHOP][4], 0);
	
	
	Textdraws[textdraw_SHOP_ARTICLES_BOX][0] = TextDrawCreate(208.000000, 148.000000, "LD_SPAC:white");
	TextDrawLetterSize(Textdraws[textdraw_SHOP_ARTICLES_BOX][0], 0.000000, 0.000000);
	TextDrawTextSize(Textdraws[textdraw_SHOP_ARTICLES_BOX][0], 70.000000, 70.000000);
	TextDrawAlignment(Textdraws[textdraw_SHOP_ARTICLES_BOX][0], 1);
	TextDrawColor(Textdraws[textdraw_SHOP_ARTICLES_BOX][0], 255);
	TextDrawSetShadow(Textdraws[textdraw_SHOP_ARTICLES_BOX][0], 0);
	TextDrawSetOutline(Textdraws[textdraw_SHOP_ARTICLES_BOX][0], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_SHOP_ARTICLES_BOX][0], 255);
	TextDrawFont(Textdraws[textdraw_SHOP_ARTICLES_BOX][0], 4);
	TextDrawSetProportional(Textdraws[textdraw_SHOP_ARTICLES_BOX][0], 0);
	TextDrawSetShadow(Textdraws[textdraw_SHOP_ARTICLES_BOX][0], 0);
	TextDrawSetSelectable(Textdraws[textdraw_SHOP_ARTICLES_BOX][0], true);

	Textdraws[textdraw_SHOP_ARTICLES_BOX][1] = TextDrawCreate(285.000000, 148.000000, "LD_SPAC:white");
	TextDrawLetterSize(Textdraws[textdraw_SHOP_ARTICLES_BOX][1], 0.000000, 0.000000);
	TextDrawTextSize(Textdraws[textdraw_SHOP_ARTICLES_BOX][1], 70.000000, 70.000000);
	TextDrawAlignment(Textdraws[textdraw_SHOP_ARTICLES_BOX][1], 1);
	TextDrawColor(Textdraws[textdraw_SHOP_ARTICLES_BOX][1], 255);
	TextDrawSetShadow(Textdraws[textdraw_SHOP_ARTICLES_BOX][1], 0);
	TextDrawSetOutline(Textdraws[textdraw_SHOP_ARTICLES_BOX][1], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_SHOP_ARTICLES_BOX][1], 255);
	TextDrawFont(Textdraws[textdraw_SHOP_ARTICLES_BOX][1], 4);
	TextDrawSetProportional(Textdraws[textdraw_SHOP_ARTICLES_BOX][1], 0);
	TextDrawSetShadow(Textdraws[textdraw_SHOP_ARTICLES_BOX][1], 0);
	TextDrawSetSelectable(Textdraws[textdraw_SHOP_ARTICLES_BOX][1], true);

	Textdraws[textdraw_SHOP_ARTICLES_BOX][2] = TextDrawCreate(362.000000, 148.000000, "LD_SPAC:white");
	TextDrawLetterSize(Textdraws[textdraw_SHOP_ARTICLES_BOX][2], 0.000000, 0.000000);
	TextDrawTextSize(Textdraws[textdraw_SHOP_ARTICLES_BOX][2], 70.000000, 70.000000);
	TextDrawAlignment(Textdraws[textdraw_SHOP_ARTICLES_BOX][2], 1);
	TextDrawColor(Textdraws[textdraw_SHOP_ARTICLES_BOX][2], 255);
	TextDrawSetShadow(Textdraws[textdraw_SHOP_ARTICLES_BOX][2], 0);
	TextDrawSetOutline(Textdraws[textdraw_SHOP_ARTICLES_BOX][2], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_SHOP_ARTICLES_BOX][2], 255);
	TextDrawFont(Textdraws[textdraw_SHOP_ARTICLES_BOX][2], 4);
	TextDrawSetProportional(Textdraws[textdraw_SHOP_ARTICLES_BOX][2], 0);
	TextDrawSetShadow(Textdraws[textdraw_SHOP_ARTICLES_BOX][2], 0);
	TextDrawSetSelectable(Textdraws[textdraw_SHOP_ARTICLES_BOX][2], true);

	Textdraws[textdraw_SHOP_ARTICLES_BOX][3] = TextDrawCreate(208.000000, 225.000000, "LD_SPAC:white");
	TextDrawLetterSize(Textdraws[textdraw_SHOP_ARTICLES_BOX][3], 0.000000, 0.000000);
	TextDrawTextSize(Textdraws[textdraw_SHOP_ARTICLES_BOX][3], 70.000000, 70.000000);
	TextDrawAlignment(Textdraws[textdraw_SHOP_ARTICLES_BOX][3], 1);
	TextDrawColor(Textdraws[textdraw_SHOP_ARTICLES_BOX][3], 255);
	TextDrawSetShadow(Textdraws[textdraw_SHOP_ARTICLES_BOX][3], 0);
	TextDrawSetOutline(Textdraws[textdraw_SHOP_ARTICLES_BOX][3], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_SHOP_ARTICLES_BOX][3], 255);
	TextDrawFont(Textdraws[textdraw_SHOP_ARTICLES_BOX][3], 4);
	TextDrawSetProportional(Textdraws[textdraw_SHOP_ARTICLES_BOX][3], 0);
	TextDrawSetShadow(Textdraws[textdraw_SHOP_ARTICLES_BOX][3], 0);
	TextDrawSetSelectable(Textdraws[textdraw_SHOP_ARTICLES_BOX][3], true);

	Textdraws[textdraw_SHOP_ARTICLES_BOX][4] = TextDrawCreate(285.000000, 225.000000, "LD_SPAC:white");
	TextDrawLetterSize(Textdraws[textdraw_SHOP_ARTICLES_BOX][4], 0.000000, 0.000000);
	TextDrawTextSize(Textdraws[textdraw_SHOP_ARTICLES_BOX][4], 70.000000, 70.000000);
	TextDrawAlignment(Textdraws[textdraw_SHOP_ARTICLES_BOX][4], 1);
	TextDrawColor(Textdraws[textdraw_SHOP_ARTICLES_BOX][4], 255);
	TextDrawSetShadow(Textdraws[textdraw_SHOP_ARTICLES_BOX][4], 0);
	TextDrawSetOutline(Textdraws[textdraw_SHOP_ARTICLES_BOX][4], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_SHOP_ARTICLES_BOX][4], 255);
	TextDrawFont(Textdraws[textdraw_SHOP_ARTICLES_BOX][4], 4);
	TextDrawSetProportional(Textdraws[textdraw_SHOP_ARTICLES_BOX][4], 0);
	TextDrawSetShadow(Textdraws[textdraw_SHOP_ARTICLES_BOX][4], 0);
	TextDrawSetSelectable(Textdraws[textdraw_SHOP_ARTICLES_BOX][4], true);

	Textdraws[textdraw_SHOP_ARTICLES_BOX][5] = TextDrawCreate(362.000000, 225.000000, "LD_SPAC:white");
	TextDrawLetterSize(Textdraws[textdraw_SHOP_ARTICLES_BOX][5], 0.000000, 0.000000);
	TextDrawTextSize(Textdraws[textdraw_SHOP_ARTICLES_BOX][5], 70.000000, 70.000000);
	TextDrawAlignment(Textdraws[textdraw_SHOP_ARTICLES_BOX][5], 1);
	TextDrawColor(Textdraws[textdraw_SHOP_ARTICLES_BOX][5], 255);
	TextDrawSetShadow(Textdraws[textdraw_SHOP_ARTICLES_BOX][5], 0);
	TextDrawSetOutline(Textdraws[textdraw_SHOP_ARTICLES_BOX][5], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_SHOP_ARTICLES_BOX][5], 255);
	TextDrawFont(Textdraws[textdraw_SHOP_ARTICLES_BOX][5], 4);
	TextDrawSetProportional(Textdraws[textdraw_SHOP_ARTICLES_BOX][5], 0);
	TextDrawSetShadow(Textdraws[textdraw_SHOP_ARTICLES_BOX][5], 0);
	TextDrawSetSelectable(Textdraws[textdraw_SHOP_ARTICLES_BOX][5], true);
	
	Textdraws[textdraw_SHOP_ARTICLE_BOX] = TextDrawCreate(208.000000, 175.000000, "LD_SPAC:white");
	TextDrawLetterSize(Textdraws[textdraw_SHOP_ARTICLE_BOX], 0.000000, 0.000000);
	TextDrawTextSize(Textdraws[textdraw_SHOP_ARTICLE_BOX], 100.000000, 100.000000);
	TextDrawAlignment(Textdraws[textdraw_SHOP_ARTICLE_BOX], 1);
	TextDrawColor(Textdraws[textdraw_SHOP_ARTICLE_BOX], 255);
	TextDrawSetShadow(Textdraws[textdraw_SHOP_ARTICLE_BOX], 0);
	TextDrawSetOutline(Textdraws[textdraw_SHOP_ARTICLE_BOX], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_SHOP_ARTICLE_BOX], 255);
	TextDrawFont(Textdraws[textdraw_SHOP_ARTICLE_BOX], 4);
	TextDrawSetProportional(Textdraws[textdraw_SHOP_ARTICLE_BOX], 0);
	TextDrawSetShadow(Textdraws[textdraw_SHOP_ARTICLE_BOX], 0);
	
	Textdraws[textdraw_TERRITORY_BOX] = TextDrawCreate(320.000000, 355.000000, "Cerrar");
	TextDrawLetterSize(Textdraws[textdraw_TERRITORY_BOX], 12.321674, 9.937778);
	TextDrawAlignment(Textdraws[textdraw_TERRITORY_BOX], 2);
	TextDrawColor(Textdraws[textdraw_TERRITORY_BOX], 167);
	TextDrawSetShadow(Textdraws[textdraw_TERRITORY_BOX], 0);
	TextDrawSetOutline(Textdraws[textdraw_TERRITORY_BOX], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_TERRITORY_BOX], 255);
	TextDrawFont(Textdraws[textdraw_TERRITORY_BOX], 1);
	TextDrawSetProportional(Textdraws[textdraw_TERRITORY_BOX], 1);
	TextDrawSetShadow(Textdraws[textdraw_TERRITORY_BOX], 0);
	
	Textdraws[textdraw_SHOP_TUNING][0] = TextDrawCreate(320.000000, 330.000000, "box");
	TextDrawLetterSize(Textdraws[textdraw_SHOP_TUNING][0], 0.000000, 6.966667);
	TextDrawTextSize(Textdraws[textdraw_SHOP_TUNING][0], 0.000000, 152.000000);
	TextDrawAlignment(Textdraws[textdraw_SHOP_TUNING][0], 2);
	TextDrawColor(Textdraws[textdraw_SHOP_TUNING][0], -1);
	TextDrawUseBox(Textdraws[textdraw_SHOP_TUNING][0], 1);
	TextDrawBoxColor(Textdraws[textdraw_SHOP_TUNING][0], 95);
	TextDrawSetShadow(Textdraws[textdraw_SHOP_TUNING][0], 0);
	TextDrawSetOutline(Textdraws[textdraw_SHOP_TUNING][0], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_SHOP_TUNING][0], 255);
	TextDrawFont(Textdraws[textdraw_SHOP_TUNING][0], 1);
	TextDrawSetProportional(Textdraws[textdraw_SHOP_TUNING][0], 1);
	TextDrawSetShadow(Textdraws[textdraw_SHOP_TUNING][0], 0);

	Textdraws[textdraw_SHOP_TUNING][1] = TextDrawCreate(320.000000, 330.000000, ""SERVER_SHORT_NAME"_Tuning_Club");
	TextDrawLetterSize(Textdraws[textdraw_SHOP_TUNING][1], 0.354000, 1.533629);
	TextDrawTextSize(Textdraws[textdraw_SHOP_TUNING][1], 0.000000, 152.000000);
	TextDrawAlignment(Textdraws[textdraw_SHOP_TUNING][1], 2);
	TextDrawColor(Textdraws[textdraw_SHOP_TUNING][1], -1);
	TextDrawUseBox(Textdraws[textdraw_SHOP_TUNING][1], 1);
	TextDrawBoxColor(Textdraws[textdraw_SHOP_TUNING][1], 10205093);
	TextDrawSetShadow(Textdraws[textdraw_SHOP_TUNING][1], 0);
	TextDrawSetOutline(Textdraws[textdraw_SHOP_TUNING][1], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_SHOP_TUNING][1], 255);
	TextDrawFont(Textdraws[textdraw_SHOP_TUNING][1], 0);
	TextDrawSetProportional(Textdraws[textdraw_SHOP_TUNING][1], 1);
	TextDrawSetShadow(Textdraws[textdraw_SHOP_TUNING][1], 0);

	Textdraws[textdraw_SHOP_TUNING][2] = TextDrawCreate(320.000000, 376.000000, "COMPRAR");
	TextDrawLetterSize(Textdraws[textdraw_SHOP_TUNING][2], 0.219666, 1.031703);
	TextDrawTextSize(Textdraws[textdraw_SHOP_TUNING][2], 10.000000, 43.000000);
	TextDrawAlignment(Textdraws[textdraw_SHOP_TUNING][2], 2);
	TextDrawColor(Textdraws[textdraw_SHOP_TUNING][2], -1);
	TextDrawUseBox(Textdraws[textdraw_SHOP_TUNING][2], 1);
	TextDrawBoxColor(Textdraws[textdraw_SHOP_TUNING][2], -1936945921);
	TextDrawSetShadow(Textdraws[textdraw_SHOP_TUNING][2], 0);
	TextDrawSetOutline(Textdraws[textdraw_SHOP_TUNING][2], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_SHOP_TUNING][2], 255);
	TextDrawFont(Textdraws[textdraw_SHOP_TUNING][2], 1);
	TextDrawSetProportional(Textdraws[textdraw_SHOP_TUNING][2], 1);
	TextDrawSetShadow(Textdraws[textdraw_SHOP_TUNING][2], 0);
	TextDrawSetSelectable(Textdraws[textdraw_SHOP_TUNING][2], true);

	Textdraws[textdraw_SHOP_TUNING][3] = TextDrawCreate(370.000000, 376.000000, "SIGUIENTE");
	TextDrawLetterSize(Textdraws[textdraw_SHOP_TUNING][3], 0.219666, 1.031703);
	TextDrawTextSize(Textdraws[textdraw_SHOP_TUNING][3], 10.000000, 43.000000);
	TextDrawAlignment(Textdraws[textdraw_SHOP_TUNING][3], 2);
	TextDrawColor(Textdraws[textdraw_SHOP_TUNING][3], -1);
	TextDrawUseBox(Textdraws[textdraw_SHOP_TUNING][3], 1);
	TextDrawBoxColor(Textdraws[textdraw_SHOP_TUNING][3], -1936945921);
	TextDrawSetShadow(Textdraws[textdraw_SHOP_TUNING][3], 0);
	TextDrawSetOutline(Textdraws[textdraw_SHOP_TUNING][3], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_SHOP_TUNING][3], 255);
	TextDrawFont(Textdraws[textdraw_SHOP_TUNING][3], 1);
	TextDrawSetProportional(Textdraws[textdraw_SHOP_TUNING][3], 1);
	TextDrawSetShadow(Textdraws[textdraw_SHOP_TUNING][3], 0);
	TextDrawSetSelectable(Textdraws[textdraw_SHOP_TUNING][3], true);

	Textdraws[textdraw_SHOP_TUNING][4] = TextDrawCreate(270.000000, 376.000000, "ANTERIOR");
	TextDrawLetterSize(Textdraws[textdraw_SHOP_TUNING][4], 0.219666, 1.031703);
	TextDrawTextSize(Textdraws[textdraw_SHOP_TUNING][4], 10.000000, 43.000000);
	TextDrawAlignment(Textdraws[textdraw_SHOP_TUNING][4], 2);
	TextDrawColor(Textdraws[textdraw_SHOP_TUNING][4], -1);
	TextDrawUseBox(Textdraws[textdraw_SHOP_TUNING][4], 1);
	TextDrawBoxColor(Textdraws[textdraw_SHOP_TUNING][4], -1936945921);
	TextDrawSetShadow(Textdraws[textdraw_SHOP_TUNING][4], 0);
	TextDrawSetOutline(Textdraws[textdraw_SHOP_TUNING][4], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_SHOP_TUNING][4], 255);
	TextDrawFont(Textdraws[textdraw_SHOP_TUNING][4], 1);
	TextDrawSetProportional(Textdraws[textdraw_SHOP_TUNING][4], 1);
	TextDrawSetShadow(Textdraws[textdraw_SHOP_TUNING][4], 0);
	TextDrawSetSelectable(Textdraws[textdraw_SHOP_TUNING][4], true);
	return 1;
}

stock DestroyTextDraws()
{
	for(new i; i < sizeof(Textdraws); i++)
	{
		if(Textdraws[Textdraws_Enum:i] == INVALID_TEXT_DRAW) continue;
		TextDrawDestroy(Text:Textdraws[Textdraws_Enum:i]);
		Textdraws[Textdraws_Enum:i] = INVALID_TEXT_DRAW;
	}
	return 1;
}

public OnGameModeExit()
{
	foreach(new i : Zones)
	{
		GangZoneDestroy(ZInfo[i][_Zone]);
		Area_Delete(ZInfo[i][Region]);
	}

    for(new a=0;a<MAX_GZONES;a++)
    {
   	 	DestroyDynamicArea(ZInfo[a][ZoneRectangleZone]);
    }

	print("\n\n\n----> Saliendo\n\n");
	db_close(Database);
	return 1;
}

CMD:a(playerid, params[])
{
	if(isnull(params)) return SendClientMessage(playerid, -1, "Syntax: /a <texto>");

  	new string[145];
    format(string, sizeof(string), "Admin Chat: {90D496}%s (%s): {E6F8E0}%s", ACCOUNT_INFO[playerid][ac_NAME], ADMIN_LEVELS[ ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] ], params);
	SendMessageToAdmins(0x90C3D4FF, string);
	return 1;
}

#define MIN_SECONDS_BETWEEN_TALKS 100 // Deben pasar al menos 1 segundos para volver a hablar.
public OnPlayerText(playerid, text[])
{
	if(PLAYER_TEMP[playerid][LOGUEADO]==false) return Kick(playerid);
	//assert( Antiflood( playerid ) );
	if(PLAYER_TEMP[playerid][pt_KICKED]) return 0;
	
	if(DetectarSpamSpam(playerid,text))
    {
        KickBot(playerid,"Spam");
    }
    if(PLAYER_TEMP[playerid][pt_EVENTO] == true)
	{
		for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
		{
			if(IsPlayerConnected(i))
			{
				if(PLAYER_TEMP[i][pt_EVENTO] == true)
				{
					new string[145];
			        format(string, sizeof(string), "Chat Evento: %s: {FFFFFF}%s", ACCOUNT_INFO[playerid][ac_NAME], text[1]);
					SendClientMessage(i,0x90C3D4FF, string);
				}
			}
		}
		return 0;
	}
	if(PLAYER_TEMP[playerid][pt_GAME_STATE] != GAME_STATE_NORMAL || PLAYER_TEMP[playerid][pt_SELECT_TEXTDRAW] || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_HOSPITAL || PLAYER_TEMP[playerid][pt_NEW_USER]) { SendClientMessage(playerid, 0xA9F5A9AA, "Ahora no puedes hablar."); return 0; }
	if(text[0] == '#' && ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] > 1)
	{
		if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] > 1 && ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 7)
		{
	      	new string[145];
	        format(string, sizeof(string), "Admin Chat: {90D496}%s (%s): {E6F8E0}%s", ACCOUNT_INFO[playerid][ac_NAME], ADMIN_LEVELS[ ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] ], text[1]);
			SendMessageToAdmins(0x90C3D4FF, string);
			return 0;
		}
		
	}
	
	new interval = GetTickDiff(GetTickCount(), PLAYER_TEMP[playerid][pt_ANTIFLOOD_TALK]);
	if(interval < MIN_SECONDS_BETWEEN_TALKS)
	{
		if(ac_Info[CHEAT_TEXT_SPAMMER][ac_Enabled])
		{
			if(gettime() > PLAYER_AC_INFO[playerid][CHEAT_TEXT_SPAMMER][p_ac_info_IMMUNITY])
			{
				if(interval < 50)
				{
					if(!ac_Info[CHEAT_TEXT_SPAMMER][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_TEXT_SPAMMER, float(interval));
					else
					{
						if(gettime() - PLAYER_AC_INFO[playerid][CHEAT_TEXT_SPAMMER][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_TEXT_SPAMMER][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_TEXT_SPAMMER][p_ac_info_DETECTIONS] = 0;
						else PLAYER_AC_INFO[playerid][CHEAT_TEXT_SPAMMER][p_ac_info_DETECTIONS] ++;
						
						PLAYER_AC_INFO[playerid][CHEAT_TEXT_SPAMMER][p_ac_info_LAST_DETECTION] = gettime();
						if(PLAYER_AC_INFO[playerid][CHEAT_TEXT_SPAMMER][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_TEXT_SPAMMER][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_TEXT_SPAMMER, float(interval));
					}
				}
			}
		}
		SendClientMessage(playerid, 0xA9F5A9AA, "Cálmate."); 
		return 0; 
	}
	PLAYER_TEMP[playerid][pt_ANTIFLOOD_TALK] = GetTickCount();
	
	if(PLAYER_TEMP[playerid][pt_POLICE_CALL_NAME])
	{
		format(PLAYER_TEMP[playerid][pt_POLICE_CALL_NAME_STR], 24, "%s", text);
		SendClientMessage(playerid, -1, "{E6F8E0}Operadora: De acuerdo, describe brevemente lo que sucede para enviar una patrulla.");
		PLAYER_TEMP[playerid][pt_POLICE_CALL_NAME] = false;
		PLAYER_TEMP[playerid][pt_POLICE_CALL_DESCRIPTION] = true;
		return 0;
	}
	if(PLAYER_TEMP[playerid][pt_POLICE_CALL_DESCRIPTION])
	{
		PLAYER_TEMP[playerid][pt_PLAYER_IN_CALL] = false;
		PLAYER_TEMP[playerid][pt_POLICE_CALL_NAME] = false;
		PLAYER_TEMP[playerid][pt_POLICE_CALL_DESCRIPTION] = false;
		
		
		new city[45], zone[45];
		GetPlayerZones(playerid, city, zone);
			
		new message[145];
		format(message, sizeof message, "{4286f4}[Central policía] {FFFFFF}Reporte {E6F8E0}[%s (%d), gps: %s, %s]: {FFFFFF}%s", PLAYER_TEMP[playerid][pt_POLICE_CALL_NAME_STR], playerid, city, zone, text);
		SendPoliceRadioMessage(-1, -1, message);

		SendClientMessage(playerid, -1, "{E6F8E0}Operadora: Su petición fue enviada, en breve una patrulla acudirá.");
		SendClientMessage(playerid, -1, "{f47d42}Llamada finalizada.");
		return 0;
	}
	
	new str_text[190];
	if(text[0] == '$')
	{
		if(FACCION_PLAYER[playerid][FACION_MIEMBRO]==true)
		{
			foreach(new i : Player)
			{
				if(FACCION_PLAYER[i][FACCION_ID] == FACCION_PLAYER[playerid][FACCION_ID])
				{
					format(str_text, sizeof str_text, "** [Radio Faccion] (( %s: %s ))", PLAYER_TEMP[playerid][pt_RP_NAME], text[2]);
					SendClientMessage(i, 0xCCCCCCCC, str_text);

				}
			}
		}
		return 0;
	}
	if(text[0] == '!')
	{
		if(PLAYER_WORKS[playerid][WORK_POLICE] && PLAYER_TEMP[playerid][pt_WORKING_IN] == WORK_POLICE)
		{
			if(text[1] == '!') format(str_text, sizeof str_text, "** [Radio Policia] (( %s: %s ))", PLAYER_TEMP[playerid][pt_RP_NAME], text[2]);
			else format(str_text, sizeof str_text, "{8D8DFF}** [Radio Policia] %s %s: %s", PLAYER_TEMP[playerid][pt_RP_NAME], POLICE_RANKS[ PLAYER_SKILLS[playerid][WORK_POLICE] ], text[1]);
			
			SendPoliceRadioMessage(PLAYER_TEMP[playerid][pt_POLICE_RADIO], 0xCCCCCCCC, str_text);
			return 0;
		}
		
		if(PLAYER_CREW[playerid][player_crew_VALID])
		{
			if(text[1] == '!') format(str_text, sizeof str_text, "** [Radio Banda] (( %s: %s ))", PLAYER_TEMP[playerid][pt_RP_NAME], text[2]);
			else format(str_text, sizeof str_text, "{8D8DFF}** [Radio Banda] %s %s: %s", PLAYER_TEMP[playerid][pt_RP_NAME], CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_NAME], text[1]);
			
			SendMessageToCrewMembers(PLAYER_CREW[playerid][player_crew_ID], 0xCCCCCCCC, str_text);
			return 0;
		}
	}
	
	if(PLAYER_TEMP[playerid][pt_PLAYER_PHONE_CALL_STATE] == CALL_STATE_ESTABLISHED)
	{
		format(str_text, 145, "%s dice (por teléfono): %s", PLAYER_TEMP[playerid][pt_RP_NAME], text);
		SendClientMessageEx(PLAYER_TEMP[playerid][pt_PLAYER_PHONE_CALL_PLAYERID], -1, "{E6F8E0}Teléfono: %s: %s", convertPhoneNumber(PLAYER_TEMP[playerid][pt_PLAYER_PHONE_CALL_PLAYERID], PLAYER_PHONE[playerid][player_phone_NUMBER]), text);
	}
	else
	{
		if(GetPlayerDrunkLevel(playerid) > 2000) format(str_text, 145, "%s dice (ebrio): %s", PLAYER_TEMP[playerid][pt_RP_NAME], text);
		else 
		{
			/*new karem = 0;
		    while(text[karem] != '\0')
		    {
				switch(text[karem])
				{
					case '-': text[karem] = '{EB835E} -';
					case '*': text[karem] = '{EB835E} *';
				}
				karem++;
		    }*/
			new karenmiamo[195],prosin=0;
			format(karenmiamo, sizeof karenmiamo,"%s",text);
			strreplace(karenmiamo,"-",""R" -");
			strreplace(karenmiamo,"*",""R" *");
			if(strlen(karenmiamo) > 195) return SendClientMessage(playerid,-1,"Error de formato"); 
			if(strfind(text, "-", true) != -1)
			{
				prosin=1;
			} 
			else if(strfind(text, "*", true) != -1)
			{
				prosin=2;
			}
			switch(prosin)
			{
				case 1: format(str_text, 190, "%s dice: %s -", PLAYER_TEMP[playerid][pt_RP_NAME], karenmiamo);
				case 2: format(str_text, 190, "%s dice: %s *", PLAYER_TEMP[playerid][pt_RP_NAME], karenmiamo);
				default: 
				{
					new buscartext[2];
					format(buscartext, sizeof buscartext,"%s",text);
					if(strfind(buscartext, "¡", true) != -1)
					{
						format(karenmiamo, sizeof karenmiamo,"%s",text);
						strreplace(karenmiamo,"¡","");
						format(str_text, 190, "%s Grita: ¡ %s !", PLAYER_TEMP[playerid][pt_RP_NAME], karenmiamo);
						ProxDetector(playerid, 25.0, str_text, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5, 85);
						return 0;
					}
					if(strfind(buscartext, "?", true) != -1 || strfind(buscartext, "¿", true) != -1)
					{
						format(karenmiamo, sizeof karenmiamo,"%s",text);
						strreplace(karenmiamo,"?","");
						strreplace(karenmiamo,"¿","");
						format(str_text, 190, "%s Pregunta: ¿ %s ?.", PLAYER_TEMP[playerid][pt_RP_NAME], karenmiamo);
						ProxDetector(playerid, 15.0, str_text, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5, 85);
						return 0;
					}
					format(str_text, 190, "%s dice: %s", PLAYER_TEMP[playerid][pt_RP_NAME], text);
				}
			}
			//format(str_text, 190, "%s dice: %s", PLAYER_TEMP[playerid][pt_RP_NAME], text);
		}
	}
	ProxDetector(playerid, 15.0, str_text, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5, 85);
	return 0;
}
stock strreplace(string[], const search[], const replacement[], bool:ignorecase = false, pos = 0, limit = -1, maxlength = sizeof(string)) 
{
    // No need to do anything if the limit is 0.
    if (limit == 0)
        return 0;
    
    new
             sublen = strlen(search),
             replen = strlen(replacement),
        bool:packed = ispacked(string),
             maxlen = maxlength,
             len = strlen(string),
             count = 0
    ;
    
    
    // "maxlen" holds the max string length (not to be confused with "maxlength", which holds the max. array size).
    // Since packed strings hold 4 characters per array slot, we multiply "maxlen" by 4.
    if (packed)
        maxlen *= 4;
    
    // If the length of the substring is 0, we have nothing to look for..
    if (!sublen)
        return 0;
    
    // In this line we both assign the return value from "strfind" to "pos" then check if it's -1.
    while (-1 != (pos = strfind(string, search, ignorecase, pos))) {
        // Delete the string we found
        strdel(string, pos, pos + sublen);
        
        len -= sublen;
        
        // If there's anything to put as replacement, insert it. Make sure there's enough room first.
        if (replen && len + replen < maxlen) {
            strins(string, replacement, pos, maxlength);
            
            pos += replen;
            len += replen;
        }
        
        // Is there a limit of number of replacements, if so, did we break it?
        if (limit != -1 && ++count >= limit)
            break;
    }
    
    return count;
}
CMD:bebida(playerid, params[])
{
	if(PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] != -1)
	{
		if(ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_INTERIOR_TYPE] == INTERIOR_CLUB)
		{
			if(IsPlayerInRangeOfPoint(playerid, 1.5, 1207.234375, -29.231435, 1000.953125))
			{
				if(GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DRINK_WINE)
				{
					if(CHARACTER_INFO[playerid][ch_CASH] <= 50) return SendClientMessage(playerid, -1, "{00FF80}La bebida cuesta 50$.");
					
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_BEER);
					GivePlayerCash(playerid, -50, false);
				}
				return 1;
			}
		}
	}
	
	ShowPlayerMessage(playerid, "No estás en el lugar adecuado.", 3);
	return 1;
}

#define MIN_TIME_BETWEEN_DOUBT	60
#define IP_SPAM_MUTE_TIME		5 //minutos
CMD:duda(playerid, params[])
{
	if(!ACCOUNT_INFO[playerid][ac_DOUBT_CHANNEL]) return SendClientMessage(playerid, -1, "Para enviar una duda primero debes activar el canal de dudas con {58ACFA}/dudas");
	if(isnull(params)) return SendClientMessage(playerid, -1, "Error: {58ACFA}/duda {FFFFFF}[DUDA]");
	if(PLAYER_MISC[playerid][MISC_MUTE] > gettime())
	{
		new seconds = PLAYER_MISC[playerid][MISC_MUTE] - gettime();
		SendClientMessageEx(playerid, -1, "Estás silenciado en el canal de dudas por %s minutos.", TimeConvert(seconds));
		return 1;
	}
	if(!ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL])
	{
		if(gettime() < PLAYER_TEMP[playerid][pt_DOUBT_CHANNEL_TIME] + MIN_TIME_BETWEEN_DOUBT)
		{
			new time = (MIN_TIME_BETWEEN_DOUBT-(gettime()-PLAYER_TEMP[playerid][pt_DOUBT_CHANNEL_TIME]));
			SendClientMessageEx(playerid, 0xA9F5A9AA, "Tienes que esperar %s minutos para volver a realizar otra consulta.", TimeConvert(time));
			return 1;
		}
		if(StringContainsIP(params))
		{
			SendClientMessage(playerid, -1, "Hemos detectado una dirección IP en tu mensaje.");
			PLAYER_MISC[playerid][MISC_MUTE] = gettime() + (IP_SPAM_MUTE_TIME * 60);
			
			new str[145]; format(str, 145, "{ff782b}[ADMIN] {FFFFFF}%s ha sido expulsado: SPAM en canal de dudas.", ACCOUNT_INFO[playerid][ac_NAME]);
			SendAdminAd(-1, str);
			
			KickEx(playerid, 500);
			return 1;
		}
	}

	format(PLAYER_TEMP[playerid][pt_DUDA],256,"%s",params);

	ShowPlayerDialog(playerid, DIALOG_DUDA, DIALOG_STYLE_MSGBOX, "Dudas", "¿Estas seguro de enviar este mensaje? Si haces mal uso de esta canal puedes ser muteado o sancionado\n\n\
		Este canal es solo para tratar dudas del servidor\npara mencionar a un jugador se hace de esta forma para que su nombre se vea resaltado:\n\n\
		Michael_Angelus, usa /Ayuda", "Aceptar", "Cerrar");
 	
	return 1;
}

CMD:dudas(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_DOUBT_CHANNEL])
	{
		ACCOUNT_INFO[playerid][ac_DOUBT_CHANNEL] = false;
		SendClientMessage(playerid, -1, "Canal de dudas {58ACFA}deshabilitado.");
	}
	else
	{
		ACCOUNT_INFO[playerid][ac_DOUBT_CHANNEL] = true;
		SendClientMessage(playerid, -1, "Canal de dudas {58ACFA}habilitado.");
	}
	return 1;
}

CMD:g(playerid, params[])
{
	if(isnull(params)) return SendClientMessage(playerid, -1, "Error: {58ACFA}/g{FFFFFF}ritar [TEXTO]");
	
	new str_text[190];
	format(str_text, 190, "%s grita: ¡%s!", PLAYER_TEMP[playerid][pt_RP_NAME], params);
	ProxDetector(playerid, 25.0, str_text, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5, 85);
	return 1;
}

CMD:s(playerid, params[])
{
	if(isnull(params)) return SendClientMessage(playerid, -1, "Error: {58ACFA}/s{FFFFFF}usurrar [TEXTO]");
	
	new str_text[190];
	format(str_text, sizeof(str_text), "%s susurra: %s", PLAYER_TEMP[playerid][pt_RP_NAME], params);
	ProxDetector(playerid, 5.0, str_text, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5, 85);
	return 1;
}
alias:s("susurrar", "gritar");


CMD:b(playerid, params[])
{
	if(isnull(params)) return SendClientMessage(playerid, -1, "Error: {58ACFA}/b {FFFFFF}[TEXTO]");
	
    new str_text[190];
    format(str_text, sizeof(str_text), "ID: %d | %s: (( %s ))", playerid, PLAYER_TEMP[playerid][pt_RP_NAME], params);
	ProxDetector(playerid, 15.0, str_text, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5, 85);
	return 1;
}

CMD:do(playerid, params[])
{
	if(isnull(params)) return SendClientMessage(playerid, -1, "Error: {58ACFA}/do {FFFFFF}[TEXTO]");

    new str_text[190];
    format(str_text, sizeof(str_text), "*[%d] %s (( %s ))",playerid, PLAYER_TEMP[playerid][pt_RP_NAME], params);
	ProxDetector(playerid, 15.0, str_text, 0xEEFF1CFF, 0xEEFF1CFF, 0xEEFF1CFF, 0xEEFF1CFF, 0xEEFF1CFF, 85);
	return 1;
}

CMD:me(playerid, params[])
{
	if(isnull(params)) return SendClientMessage(playerid, -1, "Error: {58ACFA}/me {FFFFFF}[TEXTO]");
	
	SendPlayerAction(playerid, params);
	return 1;
}
alias:me("y");


CMD:inventario(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_JAIL || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1, "{00FF80}Ahora no puedes usar este comando.");
	ShowPlayerInventory(playerid, playerid);
	return 1;
}
alias:inventario("inv");

CMD:experiencia(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_JAIL || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1, "{00FF80}Ahora no puedes usar este comando.");
	ShowPlayerSkills(playerid, playerid);
	return 1;
}
alias:experiencia("exp", "skills");

CMD:est(playerid, params[])
{
	ShowPlayerStats(playerid, playerid);
	return 1;
}
alias:est("estadisticas");

CMD:web(playerid, params[])
{
	SendClientMessage(playerid, -1, "Web: {a7f442}"SERVER_WEBSITE"");
	return 1;
}

/*CMD:csave(playerid, params[])
{
	if(gettime() < PLAYER_TEMP[playerid][pt_SAVE_ACCOUNT_TIME] + 30)
	{
		new time = (30-(gettime()-PLAYER_TEMP[playerid][pt_SAVE_ACCOUNT_TIME]));
		format(string2,sizeof(string2),"Tienes que esperar %s minutos para volver a guardar tus datos.", TimeConvert(time));
		MensajesAyuda(playerid,string2);
		return 1;
	}

	SaveUserData(playerid);
	SavePlayerToysData(playerid);
	SavePlayerVehicles(playerid, false);
	SavePlayerSkills(playerid);
	SavePlayerWorks(playerid);
	SavePlayerMisc(playerid);
	SavePlayerWeaponsData(playerid);
	PLAYER_TEMP[playerid][pt_SAVE_ACCOUNT_TIME] = gettime();
	
	MensajesAyuda(playerid,"Datos de tu cuenta actualizados y guardados");
	return 1;
}*/

CMD:saveall(playerid,params[])
{
	LevelAdmin(playerid, 6);

	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if(IsPlayerConnected(i))
		{
			SaveUserData(i);
			SavePlayerToysData(i);
			SavePlayerVehicles(i, false);
			SavePlayerSkills(i);
			SavePlayerWorks(i);
			SavePlayerMisc(i);
			SavePlayerWeaponsData(i);
			MensajesAyuda(i,"Datos de tu cuenta actualizados y guardados");
		}
	}
	return 1;
}
CMD:ayuda(playerid, params[])
{
	new option[24];
	if(sscanf(params, "s[24]", option)) return ShowDialog(playerid, DIALOG_HELP);
	
	if(!strcmp(option, "general", true)) ShowDialog(playerid, DIALOG_HELP_GENERAL);
	else if(!strcmp(option, "personaje", true)) ShowDialog(playerid, DIALOG_HELP_CHARACTER);
	else if(!strcmp(option, "propiedades", true)) ShowDialog(playerid, DIALOG_HELP_PROPERTIES);
	else if(!strcmp(option, "reportar", true)) ShowDialog(playerid, DIALOG_HELP_REPORT);
	else if(!strcmp(option, "trabajos", true)) ShowDialog(playerid, DIALOG_HELP_WORKS);
	else if(!strcmp(option, "vehiculos", true)) ShowDialog(playerid, DIALOG_HELP_VEHICLES);
	else if(!strcmp(option, "bandas", true)) ShowDialog(playerid, DIALOG_HELP_CREWS);
	else if(!strcmp(option, "vip", true)) ShowDialog(playerid, DIALOG_HELP_SU);
	else if(!strcmp(option, "negocios", true)) ShowDialog(playerid, DIALOG_HELP_NEGOCIOS);
	else if(!strcmp(option, "puntosrp", true)) ShowDialog(playerid, DIALOG_HELP_RP_);
	else if(!strcmp(option, "chat", true)) ShowDialog(playerid, DIALOG_HELP_CHAT);
	else ShowDialog(playerid, DIALOG_HELP);
	return 1;
}

CMD:accesorios(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_JAIL || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1, "{00FF80}Ahora no puedes usar este comando.");
	ShowDialog(playerid, DIALOG_PLAYER_TOYS);
	return 1;
}

CMD:armas(playerid, params[])
{
	if(ABRIO_INVENTARIO[playerid]==true) HiveIntaruil(playerid);
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_JAIL || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1, "{00FF80}Ahora no puedes usar este comando.");
	ShowDialog(playerid, DIALOG_PLAYER_WEAPONS);
	return 1;
}

CMD:ropa(playerid, params[])
{
	if(PLAYER_TEMP[playerid][pt_COMPRANDO_ROPA] == true) return ClosePlayerClothingMenu(playerid);

	if(PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] == -1) return ShowPlayerMessage(playerid, "No estás en el lugar adecuado.", 3);
	if(ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_INTERIOR_TYPE] == INTERIOR_NO_INFO) return ShowPlayerMessage(playerid, "No estás en el lugar adecuado.", 3);
	
	PLAYER_TEMP[playerid][pt_CLOTHING_SHOP] = GetClothingShopIndexByIntType(ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_INTERIOR_TYPE]);
	if(PLAYER_TEMP[playerid][pt_CLOTHING_SHOP] == -1) return ShowPlayerMessage(playerid, "No estás en el lugar adecuado.", 3);

	if(!IsPlayerInRangeOfPoint(playerid, 1.0, Clothing_Shop_Positions[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP]][clothing_shop_X], Clothing_Shop_Positions[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP]][clothing_shop_Y], Clothing_Shop_Positions[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP]][clothing_shop_Z])) return ShowPlayerMessage(playerid, "No estás en el lugar adecuado.", 3);
	
	

	PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] = 0;
	SetPlayerPosEx(playerid, 257.251373, -40.797775, 1002.023437, 135.0, 14, playerid + MAX_PLAYERS, false); // World = Playerid + Max_players
	TogglePlayerControllableEx(playerid, false);
	
	SetPlayerCameraPos(playerid, 254.988632, -43.060516, 1002.9131);
	SetPlayerCameraLookAt(playerid, 257.251373, -40.797775, 1002.023437);
	
	UpdateClothingShop(playerid);
	ShowClothingShopTextdraws(playerid);
	
	SendClientMessage(playerid, -1, "Pulsa {58ACFA}'ESCAPE' {FFFFFF}para dejar de probarte ropa.");
	SelectTextDrawEx(playerid, 0xe8d08fFF);
	return 1;
}

CMD:buyw(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 2, 1256.8044,-1314.5922,1006.0000)) return SendClientMessage(playerid,-1, "Las armas se comprarn en ammu nation");
	if(PI[playerid][P_SHOP_WEAPON] != true) ShowPlayerTextdrawsAmmu(playerid);
	else HidePlayerTextdrawsAmmu(playerid);
	return 1;
}
 
ShowPlayerTextdrawsAmmu(playerid)
{
	for(new i=0; i <= 28; i ++) PlayerTextDrawShow(playerid,PlayerTextdraws[playerid][Textdraws_Ammu_Nation][i]);

	PI[playerid][P_SHOP_WEAPON]=true;
	new nerak[200];
	/*nombre arma*/
	format(nerak,sizeof(nerak),"] %s",WEAPON_INFO[ Armas_Ammu[ PI[playerid][P_SHOP_WEAPON_INDEX]][0] ][weapon_info_NAME]);
	PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][3], nerak);
	/*nivel para comprar*/
	format(nerak,sizeof(nerak),"Nivel:~r~~h~ %d",Armas_Ammu[	PI[playerid][P_SHOP_WEAPON_INDEX]	] [1]);
	PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][28], nerak);
	/*precio*/
	format(nerak,sizeof(nerak),"Precio: $ ~g~ %d",Armas_Ammu[	PI[playerid][P_SHOP_WEAPON_INDEX]	] [2]);
	PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][27], nerak);
	//Barra alcance//
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][24], floatadd(90.0, floatdiv(Armas_Ammu[	PI[playerid][P_SHOP_WEAPON_INDEX]	] [3], 1.388889)), 0.000000);
	PlayerTextDrawShow(playerid,PlayerTextdraws[playerid][Textdraws_Ammu_Nation][24]);
	//barra Rapidez
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][25], floatadd(90.0, floatdiv(Armas_Ammu[	PI[playerid][P_SHOP_WEAPON_INDEX]	] [4], 1.388889)), 0.000000);
	PlayerTextDrawShow(playerid,PlayerTextdraws[playerid][Textdraws_Ammu_Nation][25]);
	//Barra poder
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][26], floatadd(90.0, floatdiv(Armas_Ammu[	PI[playerid][P_SHOP_WEAPON_INDEX]	] [5], 1.388889)), 0.000000);
	PlayerTextDrawShow(playerid,PlayerTextdraws[playerid][Textdraws_Ammu_Nation][26]);
	//=======
	PlayerTextDrawSetPreviewModel(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][9], Armas_Ammu[ PI[playerid][P_SHOP_WEAPON_INDEX]][6]);
	PlayerTextDrawShow(playerid,PlayerTextdraws[playerid][Textdraws_Ammu_Nation][9]);
	//
	SelectTextDraw(playerid, 0xFFFFFFFF);
	return 1;
}
HidePlayerTextdrawsAmmu(playerid)
{
	PI[playerid][P_SHOP_WEAPON]=false;
	for(new i=0; i <= 28; i ++) PlayerTextDrawHide(playerid,PlayerTextdraws[playerid][Textdraws_Ammu_Nation][i]);
	CancelSelectTextDraw(playerid);
	return 1;
}

CMD:skinarma(playerid,params[])
{
	new query[200],DBResult:Result;
	format(query,sizeof(query),"SELECT * FROM WEAPON_SKINS WHERE USER_ID='%d' limit 20 OFFSET %d;",ACCOUNT_INFO[playerid][ac_ID],PAGE[playerid]);
    Result = db_query(Database,query);
    if(!db_num_rows(Result))
    {
    	PAGE[playerid]=0;
        MensajesAyuda(playerid,"No hay skins/colores de armas");
        return 1;
    }
    new lineas;
    new dialog[2671],string[2567];
    new text[256], did,weapon_idaa,skin_ida,ativea,stringe[20],active_testa[11],karensita[10];
    format(dialog, sizeof dialog, "{FFFFFF}# ID\tArma\tSkin\tActivo\n");
    for(new i; i < db_num_rows(Result); i++)
    {
    	lineas++;
        db_get_field_assoc(Result, "ID",query, 20); did = strval(query);
        db_get_field_assoc(Result, "WEAPON_ID",query, 20); weapon_idaa = strval(query);
        db_get_field_assoc(Result, "SKIN_ID",query, 20); skin_ida = strval(query);
        db_get_field_assoc(Result, "ACTIVE",query, 20); ativea = strval(query);
        format(text,sizeof(text),"%s",WEAPON_INFO[ weapon_idaa ][weapon_info_NAME]);
        format(stringe,sizeof(stringe),"%s",Armas_Skin[ skin_ida ][2]);

        switch (YHash(Armas_Skin[ skin_ida ][2]))
		{
		    case _H<Rojo>:karensita="D50000";
		    case _H<Verde>:karensita="238C01";
		    case _H<Rosado>:karensita="F93DFF";
		    case _H<Cafe>:karensita="722400";
		    case _H<Amarillo>:karensita="FFF000";
		    case _H<Azul>:karensita="00C5FF";
		    case _H<Negro>:karensita="000000";
		}

        switch(ativea)
        {
        	case 0: active_testa="No";
        	case 1: active_testa="{3EFF00}Si";
        }
        for(new l = 0; l < strlen(text); ++l)
            if(text[l] == '{')
                if(text[l+7] == '}')
                    strdel(text, l, l+8);

        if(strlen(text) > 37)
        {
            strdel(text, 34, strlen(text));
            strcat(text, "...", sizeof(text));
        }
        format(string, sizeof(string), "ID %d \t| {%s}\"%s\"\t{ffffff}| {%s}%s\t| {ffffff}'%s'\n", did,karensita,text,karensita,stringe,active_testa);
        strcat(dialog, string);
    	db_next_row(Result);
    }
    format(string, sizeof(string), "{FF0000}Cerrar");
    strcat(dialog, string);
    PAGINA[playerid] = lineas;
    ShowPlayerDialog(playerid, DIALOG_ARMA_SKIN, DIALOG_STYLE_TABLIST_HEADERS, "                      Skins/Colores", dialog, "Seleccionar", "Ver más");

    db_free_result(Result);
	return 1;
}
ShowPlayerTextdrawsSkin(playerid)
{	
	PI[playerid][P_SHOP_SKIN]=true;

	for(new i=0; i <= 15; i ++) PlayerTextDrawShow(playerid,PlayerTextdraws[playerid][Textdraws_Ammu_Skins][i]);
	SelectTextDraw(playerid, 0xFFFFFFFF);
	new nerak[200];
	/*nombre arma*/
	format(nerak,sizeof(nerak),"Arma ] %s ]",WEAPON_INFO[ Armas_Skin_Informacion[ PI[playerid][P_SHOP_SKIN_INDEX_INFORMACION]][0] ][weapon_info_NAME]);
	PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][3], nerak);
	/*arma model*/
	PlayerTextDrawSetPreviewModel(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][7], Armas_Skin_Informacion[ PI[playerid][P_SHOP_SKIN_INDEX_INFORMACION]][1]);
	PlayerTextDrawShow(playerid,PlayerTextdraws[playerid][Textdraws_Ammu_Skins][7]);
	/*nombre skin*/
	format(nerak,sizeof(nerak),"%s",Armas_Skin[ PI[playerid][P_SHOP_SKIN_INDEX_NOMBRE]][2] );
	PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][12], nerak);
	switch(Armas_Skin[ PI[playerid][P_SHOP_SKIN_INDEX_NOMBRE]][0])
	{
		case 0:
		{
			format(nerak,sizeof(nerak),"$ %s",number_format_thousand(Armas_Skin[ PI[playerid][P_SHOP_SKIN_INDEX_NOMBRE]][1]));
			PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][13], nerak);
		}
		case 1:
		{
			format(nerak,sizeof(nerak),"~y~ %d RP",Armas_Skin[ PI[playerid][P_SHOP_SKIN_INDEX_NOMBRE]][1]);
			PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][13], nerak);
		}
	}

	switch (YHash(Armas_Skin[ PI[playerid][P_SHOP_SKIN_INDEX_NOMBRE]][2]))
	{
	    case _H<Rojo>:SetPlayerAttachedObject(playerid,9,Armas_Skin_Informacion[ PI[playerid][P_SHOP_SKIN_INDEX_INFORMACION]][1],2,0.359999,0.000000,0.174998,0.000000,83.499961,0.000000,1.126999,1.167000,1.157999,-65536,-65536);
	    case _H<Verde>:SetPlayerAttachedObject(playerid,9,Armas_Skin_Informacion[ PI[playerid][P_SHOP_SKIN_INDEX_INFORMACION]][1],2,0.359999,0.000000,0.174998,0.000000,83.499961,0.000000,1.126999,1.167000,1.157999,-12009472,-12009472);
	    case _H<Rosado>:SetPlayerAttachedObject(playerid,9,Armas_Skin_Informacion[ PI[playerid][P_SHOP_SKIN_INDEX_INFORMACION]][1],2,0.359999,0.000000,0.174998,0.000000,83.499961,0.000000,1.126999,1.167000,1.157999,-383796,-383796);
	    case _H<Cafe>:SetPlayerAttachedObject(playerid,9,Armas_Skin_Informacion[ PI[playerid][P_SHOP_SKIN_INDEX_INFORMACION]][1],2,0.359999,0.000000,0.174998,0.000000,83.499961,0.000000,1.126999,1.167000,1.157999,-12837875,-12837875);
	    case _H<Amarillo>:SetPlayerAttachedObject(playerid,9,Armas_Skin_Informacion[ PI[playerid][P_SHOP_SKIN_INDEX_INFORMACION]][1],2,0.359999,0.000000,0.174998,0.000000,83.499961,0.000000,1.126999,1.167000,1.157999,-1856494,-1856494);
	    case _H<Azul>:SetPlayerAttachedObject(playerid,9,Armas_Skin_Informacion[ PI[playerid][P_SHOP_SKIN_INDEX_INFORMACION]][1],2,0.359999,0.000000,0.174998,0.000000,83.499961,0.000000,1.126999,1.167000,1.157999,-15738374,-15738374);
	    case _H<Negro>:SetPlayerAttachedObject(playerid,9,Armas_Skin_Informacion[ PI[playerid][P_SHOP_SKIN_INDEX_INFORMACION]][1],2,0.359999,0.000000,0.174998,0.000000,83.499961,0.000000,1.126999,1.167000,1.157999,-16777216,-16777216);
	}

	return 1;
}
 

HidePlayerTextdrawsSkin(playerid)
{
	PI[playerid][P_SHOP_SKIN]=false;
	for(new i=0; i <= 15; i ++) PlayerTextDrawHide(playerid,PlayerTextdraws[playerid][Textdraws_Ammu_Skins][i]);
	RemovePlayerAttachedObject(playerid, 9);
	return 1;
}
CMD:toys(playerid, params[])
{
	if(PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] == -1) return ShowPlayerMessage(playerid, "No estás en el lugar adecuado.", 3);
	if(ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_INTERIOR_TYPE] == INTERIOR_NO_INFO) return ShowPlayerMessage(playerid, "No estás en el lugar adecuado.", 3);
	
	new shop = GetClothingShopIndexByIntType(ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_INTERIOR_TYPE]);
	if(shop == -1) return ShowPlayerMessage(playerid, "No estás en el lugar adecuado.", 3);

	if(!IsPlayerInRangeOfPoint(playerid, 1.0, Clothing_Shop_Positions[shop][clothing_shop_X], Clothing_Shop_Positions[shop][clothing_shop_Y], Clothing_Shop_Positions[shop][clothing_shop_Z])) return ShowPlayerMessage(playerid, "No estás en el lugar adecuado.", 3);
	
	/*SetPlayerVirtualWorld(playerid, playerid + MAX_PLAYERS);
	TogglePlayerControllableEx(playerid, false);
	
	PLAYER_TEMP[playerid][pt_TOYS_SHOP] = true;
	UpdateToysShop(playerid);
	ShowToysShopTextdraws(playerid);*/
	SendClientMessage(playerid,-1,"Despues de adquirir la prenda usa /Editp para editar la posicion a tu gusto");
	if(PLAYER_TEMP[playerid][COMPRANDO_ACCESORIOS]) return Hide_Buy_Toys(playerid);
	for(new i=0; i < 12; i++) TextDrawShowForPlayer(playerid,Jugador_Textdraws[playerid][ textdraw_comprar_accesorio ][i]);
	new nerak[30];
	/*nombre prenda*/
	format(nerak,sizeof(nerak),"%s",Prendas_Info[ PLAYER_TEMP[playerid][INDEX_SHOP_PRENDA] ][ NAME ]);
	TextDrawSetString(Jugador_Textdraws[playerid][ textdraw_comprar_accesorio ][11], nerak);
	/*prenda model*/
	TextDrawSetPreviewModel(Jugador_Textdraws[playerid][textdraw_comprar_accesorio][6], Prendas_Info[ PLAYER_TEMP[playerid][INDEX_SHOP_PRENDA] ][ OBJETO ]);
	TextDrawShowForPlayer(playerid,Jugador_Textdraws[playerid][ textdraw_comprar_accesorio ][6]);
	switch(Prendas_Info[ PLAYER_TEMP[playerid][INDEX_SHOP_PRENDA]][TIPO_MONEDA])
	{
		case 1:
		{
			format(nerak,sizeof(nerak),"%s",number_format_thousand(Prendas_Info[ PLAYER_TEMP[playerid][INDEX_SHOP_PRENDA] ][PRECIO]));
			TextDrawSetString(Jugador_Textdraws[playerid][textdraw_comprar_accesorio][ 5 ], nerak);
		}
		case 2:
		{
			format(nerak,sizeof(nerak),"~y~ %d RP",Prendas_Info[ PLAYER_TEMP[playerid][INDEX_SHOP_PRENDA] ][PRECIO]);
			TextDrawSetString(Jugador_Textdraws[playerid][textdraw_comprar_accesorio][ 5 ], nerak);
		}
	}

	TextDrawShowForPlayer(playerid,Jugador_Textdraws[playerid][ textdraw_comprar_accesorio ][11]);
	TextDrawShowForPlayer(playerid,Jugador_Textdraws[playerid][ textdraw_comprar_accesorio ][5]);
	PLAYER_TEMP[playerid][COMPRANDO_ACCESORIOS] = true;
	SelectTextDraw(playerid, SELEC_TEXTDRAW);

	SendClientMessage(playerid, -1, "Pulsa {58ACFA}'ESCAPE' {FFFFFF}para salir del menú.");

	return 1;
}

 
 
CMD:pos(playerid,params[])
{
	LevelAdmin(playerid,5);
	new Float:p[3], interior,mundoa;
	if(sscanf(params, "p<,>fffdd", p[0], p[1], p[2], interior, mundoa)) return SendClientMessage(playerid, -1, "Syntax: /pos [X], [Y], [Z], [INTERIOR], MUNDO");
	SetPlayerPos(playerid, p[0], p[1], p[2]);
	SetPlayerInterior(playerid, interior);
	SetPlayerVirtualWorld(playerid, mundoa);
	return 1;
}

CMD:mypos(playerid,params[])
{
	LevelAdmin(playerid,5);
	new Float:pos_[4];
	GetPlayerPos(playerid, pos_[0],pos_[1],pos_[2]);
	SendClientMessageEx(playerid,-1,"%f, %f, %f",pos_[0],pos_[1],pos_[2]);
	printf("%f, %f, %f",pos_[0],pos_[1],pos_[2]);
	return 1;
}
CMD:mercado(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 1.0, 281.4502,-140.7273,1004.0625)) return ShowPlayerMessage(playerid, "No estás en el mercado negro para comprar.", 3);	
	if(PLAYER_WORKS[playerid][WORK_POLICE]) return ShowPlayerMessage(playerid, "No eres bienvenido aquí", 3);
	ShowDialog(playerid, DIALOG_BLACK_MARKET);
	return 1;
}
 
CMD:gpsturista(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_JAIL || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1, "{00FF80}Ahora no puedes usar este comando.");
	
	for(new i = 0; i < sizeof GPS_HELP; i ++)
	{
		if(IsPlayerInRangeOfPoint(playerid,1.5,GPS_HELP[i][atm_X], GPS_HELP[i][atm_Y], GPS_HELP[i][atm_Z]))
		{
			Auto_SendPlayerAction(playerid, "mira el GPS.");
			ShowDialog(playerid, DIALOG_PLAYER_GPS_TURISTA);
		}
	}
	return 1;
}

CMD:gps(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_JAIL || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1, "{00FF80}Ahora no puedes usar este comando.");
	if(!PLAYER_OBJECT[playerid][po_GPS])
	{
		ShowPlayerMessage(playerid, "No tienes ningún GPS, puedes ir a cualquier 24/7 para comprar uno.", 3, 1085);
		return 1;
	}
	
	Auto_SendPlayerAction(playerid, "mira su GPS.");
	ShowDialog(playerid, DIALOG_PLAYER_GPS);
	return 1;
}

CMD:tiempo(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_JAIL)
	{
		new time = CHARACTER_INFO[playerid][ch_POLICE_JAIL_TIME] - (gettime() - PLAYER_TEMP[playerid][pt_ENTER_JAIL_TIME]);
		if(time <= 0)
		{
			UnjailPlayer(playerid);
			return 1;
		}
		SendClientMessageEx(playerid, -1, "{E6F8E0}Te quedan %s minutos de condena.", TimeConvert(time));
	}
	else SendClientMessage(playerid, -1, "{00FF80}No estás en la cárcel.");
	return 1;
}

CMD:mapa(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_JAIL || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1, "{00FF80}Ahora no puedes usar este comando.");
	if(!PLAYER_OBJECT[playerid][po_GPS])
	{
		ShowPlayerMessage(playerid, "No tienes ningún GPS, puedes ir a cualquier 24/7 para comprar uno.", 3, 1085);
		return 1;
	}
	
	if(PLAYER_TEMP[playerid][pt_GPS_MAP]) HidePlayerGpsMap(playerid);
	else ShowPlayerGpsMap(playerid);
	return 1;
}

CMD:mp3(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_JAIL || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1, "{00FF80}Ahora no puedes usar este comando.");
	if(!PLAYER_OBJECT[playerid][po_MP3])
	{
		ShowPlayerMessage(playerid, "No tienes ningún MP3, puedes ir a cualquier 24/7 para comprar uno.", 3, 1085);
		return 1;
	}
	if(PLAYER_TEMP[playerid][pt_PLAYER_WAITING_MP3_HTTP]) return SendClientMessage(playerid, -1, "{00FF80}Espera que termine la búsqueda actual.");
	
	PLAYER_TEMP[playerid][pt_MUSIC_FOR_PROPERTY] = false;
	Auto_SendPlayerAction(playerid, "busca música en su MP3.");
	ShowDialog(playerid, DIALOG_PLAYER_MP3);
	return 1;
}

CMD:vmp3(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_JAIL || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1, "{00FF80}Ahora no puedes usar este comando.");
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, -1, "{00FF80}No conduces ningún vehículo.");
	if(!PLAYER_OBJECT[playerid][po_MP3])
	{
		ShowPlayerMessage(playerid, "No tienes ningún MP3, puedes ir a cualquier 24/7 para comprar uno.", 3, 1085);
		return 1;
	}
	if(PLAYER_TEMP[playerid][pt_PLAYER_WAITING_MP3_HTTP]) return SendClientMessage(playerid, -1, "{00FF80}Espera que termine la búsqueda actual.");
	
	PLAYER_TEMP[playerid][pt_MUSIC_FOR_VEHICLE] = true;
	Auto_SendPlayerAction(playerid, "busca música en su MP3.");
	ShowDialog(playerid, DIALOG_PLAYER_MP3);
	return 1;
}

CMD:stop(playerid, params[])
{
	StopAudioStreamForPlayer(playerid);
	return 1;
}

CMD:pass(playerid, params[])
{
	ShowDialog(playerid, DIALOG_CHANGE_PASSWORD);
	return 1;
}

CMD:gcp(playerid, params[])
{
	if(IsValidDynamicCP(PLAYER_TEMP[playerid][pt_GPS_CHECKPOINT]))
	{
		DestroyDynamicCP(PLAYER_TEMP[playerid][pt_GPS_CHECKPOINT]);
		PLAYER_TEMP[playerid][pt_GPS_CHECKPOINT] = INVALID_STREAMER_ID;
		
		SendClientMessage(playerid, -1, "{E6F8E0}Has cancelado la ruta antigua de tu GPS.");
	}
	else SendClientMessage(playerid, -1, "{00FF80}No tienes ningún punto marcado en tu GPS.");
	return 1;
}

CMD:movil(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_JAIL || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1, "{00FF80}Ahora no puedes usar este comando.");
	if(!PLAYER_PHONE[playerid][player_phone_VALID])
	{
		ShowPlayerMessage(playerid, "No tienes ningún teléfono, puedes ir a cualquier 24/7 para comprar uno.", 3, 1085);
		return 1;
	}
	if(PLAYER_TEMP[playerid][pt_PLAYER_IN_CALL]) SendClientMessageEx(playerid, -1, "{00FF80}Estás en una llamada.");
	
	if(!PLAYER_TEMP[playerid][pt_PHONE_COMMANDS_MESSAGE])
	{
		PLAYER_TEMP[playerid][pt_PHONE_COMMANDS_MESSAGE] = true;
		SendClientMessage(playerid, -1, "Recuerda que también puedes usar {7b9cd1}/agenda, /llamar, /sms, /tienda.");
	}
	
	Auto_SendPlayerAction(playerid, "mira su teléfono.");
	ShowDialog(playerid, DIALOG_PHONE);
	return 1;
}
alias:movil("celular", "telefono", "tlf");

CMD:telefopublico(playerid,params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_JAIL || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1, "{00FF80}Ahora no puedes usar este comando.");
	if(PLAYER_TEMP[playerid][pt_PLAYER_IN_CALL]) SendClientMessageEx(playerid, -1, "{00FF80}Estás en una llamada.");
	Auto_SendPlayerAction(playerid, "mira el teléfono.");
	ShowDialog(playerid, DIALOG_PHONE_PUBLIC);
	return 1;
}
CMD:guia(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_JAIL || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1, "{00FF80}Ahora no puedes usar este comando.");
	if(!PLAYER_OBJECT[playerid][po_PHONE_RESOLVER])
	{
		ShowPlayerMessage(playerid, "No tienes una guía telefónica, puedes ir a cualquier 24/7 para comprar una.", 3, 1085);
		return 1;
	}
	
	if(sscanf(params, "u", params[0])) return SendClientMessage(playerid, -1, "Error: {58ACFA}/guia {FFFFFF}[PlayerID/Nombre]");
	if(!IsPlayerConnected(params[0])) return SendClientMessage(playerid, -1, "{00FF80}Jugador desconectado.");
	
	if(!PLAYER_PHONE[params[0]][player_phone_VALID]) return SendClientMessage(playerid, -1, "{00FF80}Este jugador no tiene teléfono.");
	if(!PLAYER_PHONE[params[0]][player_phone_VISIBLE_NUMBER]) return SendClientMessage(playerid, -1, "{00FF80}Este jugador ha decidido no mostrar su número en la guía.");
	
	SendClientMessageEx(playerid, -1, "{E6F8E0}Nombre: {5c93ed}%s	{E6F8E0}Teléfono: {5c93ed}%d.", PLAYER_TEMP[params[0]][pt_RP_NAME], PLAYER_PHONE[params[0]][player_phone_NUMBER]);
	return 1;
}

CMD:sguia(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_JAIL || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1, "{00FF80}Ahora no puedes usar este comando.");
	if(!PLAYER_PHONE[playerid][player_phone_VALID])
	{
		ShowPlayerMessage(playerid, "No tienes ningún teléfono, puedes ir a cualquier 24/7 para comprar uno.", 3, 1085);
		return 1;
	}
	
	if(PLAYER_PHONE[playerid][player_phone_VISIBLE_NUMBER])
	{
		PLAYER_PHONE[playerid][player_phone_VISIBLE_NUMBER] = false;
		SendClientMessage(playerid, -1, "{E6F8E0}Tu número no aparecerá ahora en la guía telefónica.");
	}
	else
	{
		PLAYER_PHONE[playerid][player_phone_VISIBLE_NUMBER] = true;
		SendClientMessage(playerid, -1, "{E6F8E0}Tu número aparecerá en la guía telefónica.");
	}
	return 1;
}

CMD:sms(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_JAIL || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1, "{00FF80}Ahora no puedes usar este comando.");
	if(!PLAYER_PHONE[playerid][player_phone_VALID])
	{
		ShowPlayerMessage(playerid, "No tienes ningún teléfono, puedes ir a cualquier 24/7 para comprar uno.", 3, 1085);
		return 1;
	}
	if(PLAYER_PHONE[playerid][player_phone_STATE] == PHONE_STATE_OFF) return SendClientMessageEx(playerid, -1, "{00FF80}Tu teléfono está apagado, para encenderlo usa /movil.");
	if(PLAYER_TEMP[playerid][pt_PLAYER_IN_CALL]) return SendClientMessageEx(playerid, -1, "{00FF80}Estás en una llamada.");
	
	new to_number, message[64];
	new tmp_number, tmp_contact[24], bool:found;
	if(!sscanf(params, "ds[64]", tmp_number, message))
	{
		found = true;
		to_number = tmp_number;
	}
	else if(!sscanf(params, "s[24]s[64]", tmp_contact, message))
	{
		// con strcmp daba crash por las tilder
		new DBResult:Result, DB_Query[145];
		format(DB_Query, sizeof DB_Query, "SELECT `PHONE_NUMBER` FROM `PHONE_BOOK` WHERE `PHONE_ID` = '%d' AND `NAME` LIKE '%%%q%%' LIMIT 1;", PLAYER_PHONE[playerid][player_phone_NUMBER], tmp_contact);
		Result = db_query(Database, DB_Query);
		if(db_num_rows(Result))
		{
			found = true;
			to_number = db_get_field_int(Result, 0);
		}
		db_free_result(Result);
	}	
	else return SendClientMessage(playerid, -1, "Error: {58ACFA}/sms {FFFFFF}[Número o contacto de /agenda] [Mensaje 1-64 caracteres]");
	
	if(!found) return SendClientMessageEx(playerid, -1, "{00FF80}No hemos encontrado a '%s' en tu /agenda.", tmp_contact);
	if(to_number <= 0) return SendClientMessage(playerid, -1, "{00FF80}El número destino no es válido.");
	
	new DBResult:Result, DB_Query[100], bool:phone_exists;
	format(DB_Query, sizeof(DB_Query), "SELECT * FROM `PHONE` WHERE `PHONE_NUMBER` = '%d';", to_number);
	Result = db_query(Database, DB_Query);
	
	if(db_num_rows(Result)) phone_exists = true;
	db_free_result(Result);
	
	if(!phone_exists) return SendClientMessage(playerid, -1, "{00FF80}El número destino no es válido.");
	
	new to_playerid = INVALID_PLAYER_ID;
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if(IsPlayerConnected(i))
		{
			if((PLAYER_TEMP[i][pt_GAME_STATE] == GAME_STATE_NORMAL || PLAYER_TEMP[i][pt_GAME_STATE] == GAME_STATE_DEAD) && PLAYER_PHONE[i][player_phone_NUMBER] == to_number)
			{
				to_playerid = i;
				break;
			}
		}
	}
	
	if(to_playerid == INVALID_PLAYER_ID) RegisterPhoneMessage(PLAYER_PHONE[playerid][player_phone_NUMBER], to_number, message, true);
	else
	{
		RegisterPhoneMessage(PLAYER_PHONE[playerid][player_phone_NUMBER], to_number, message);
		if(PLAYER_PHONE[to_playerid][player_phone_STATE] == PHONE_STATE_ON) SendClientMessageEx(to_playerid, -1, "{b7dd80}[NUEVO MENSAJE]: {e5f442}De: {FFFFFF}%s {b7dd80}Mensaje: {FFFFFF}%s", convertPhoneNumber(to_playerid, PLAYER_PHONE[playerid][player_phone_NUMBER]), message);
	}
	SendClientMessageEx(playerid, -1, "Mensaje enviado a {7b9cd1}%s.", convertPhoneNumber(playerid, to_number));
	return 1;
}

CMD:agenda(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_JAIL || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1, "{00FF80}Ahora no puedes usar este comando.");
	if(!PLAYER_PHONE[playerid][player_phone_VALID])
	{
		ShowPlayerMessage(playerid, "No tienes ningún teléfono, puedes ir a cualquier 24/7 para comprar uno.", 3, 1085);
		return 1;
	}
	if(PLAYER_PHONE[playerid][player_phone_STATE] == PHONE_STATE_OFF) return SendClientMessageEx(playerid, -1, "{00FF80}Tu teléfono está apagado, para encenderlo usa /movil.");
	if(PLAYER_TEMP[playerid][pt_PLAYER_IN_CALL]) return SendClientMessageEx(playerid, -1, "{00FF80}Estás en una llamada.");
	
	ShowDialog(playerid, DIALOG_PHONE_BOOK);
	return 1;
}

CMD:tienda(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_JAIL || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1, "{00FF80}Ahora no puedes usar este comando.");
	if(!PLAYER_PHONE[playerid][player_phone_VALID])
	{
		ShowPlayerMessage(playerid, "No tienes ningún teléfono, puedes ir a cualquier 24/7 para comprar uno.", 3, 1085);
		return 1;
	}
	
	if(PLAYER_PHONE[playerid][player_phone_STATE] == PHONE_STATE_OFF) return SendClientMessageEx(playerid, -1, "{00FF80}Tu teléfono está apagado, para encenderlo usa /movil.");
	ShowPlayerShop(playerid);
	return 1;
}

CMD:re(playerid, params[])
{
	new item[32],playere;
	if(IsPlayerConnected(playerid))
	if(!sscanf(params, "s[32]d", item, playere))
	{
		if(strcmp(item,	"taxi",true) == 0)
		{
			if(!PLAYER_WORKS[playerid][WORK_TAXI]) return SendClientMessage(playerid, -1, "{00FF80}No eres taxista.");
			if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_TAXI) return SendClientMessage(playerid, -1, "{00FF80}No estás de servicio como taxista.");
			if(PLAYER_TEMP[playere][pt_LLAMADO_TAXI] == true)
			{
				SendClientMessage(playere,-1,"{22BF35}Un taxista respondió a tu llamada y va en camino.");
				SendClientMessage(playerid, -1,"{22BF35}Le acabas de avisar al cliente que vas a a buscarlo.");
			}
		}
	}
	return 1;
}

CMD:llamar(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_JAIL || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1, "{00FF80}Ahora no puedes usar este comando.");
	if(!PLAYER_PHONE[playerid][player_phone_VALID])
	{
		ShowPlayerMessage(playerid, "No tienes ningún teléfono, puedes ir a cualquier 24/7 para comprar uno.", 3, 1085);
		return 1;
	}
	if(PLAYER_PHONE[playerid][player_phone_STATE] == PHONE_STATE_OFF) return SendClientMessageEx(playerid, -1, "{00FF80}Tu teléfono está apagado, para encenderlo usa /movil.");
	if(PLAYER_TEMP[playerid][pt_PLAYER_IN_CALL]) return SendClientMessageEx(playerid, -1, "{00FF80}Estás en una llamada.");
	
	new call_number, tmp_number, tmp_contact[24], bool:found;
	if(!sscanf(params, "d", tmp_number))
	{
		found = true;
		call_number = tmp_number;
	}
	else if(!sscanf(params, "s[24]", tmp_contact))
	{
		// con strcmp daba crash por las tilder
		new DBResult:Result, DB_Query[145];
		format(DB_Query, sizeof DB_Query, "SELECT `PHONE_NUMBER` FROM `PHONE_BOOK` WHERE `PHONE_ID` = '%d' AND `NAME` LIKE '%%%q%%' LIMIT 1;", PLAYER_PHONE[playerid][player_phone_NUMBER], tmp_contact);
		Result = db_query(Database, DB_Query);
		
		if(db_num_rows(Result))
		{
			found = true;
			call_number = db_get_field_int(Result, 0);
		}
		db_free_result(Result);
	}	
	else return SendClientMessage(playerid, -1, "Error: {58ACFA}/llamar {FFFFFF}[Número o contacto de /agenda]");
	
	if(!found) return SendClientMessageEx(playerid, -1, "{00FF80}No hemos encontrado a '%s' en tu /agenda.", tmp_contact);
	if(call_number <= 0) return SendClientMessage(playerid, -1, "{00FF80}El número destino no es válido.");

	switch(call_number)
	{
		case 911:
		{
			if(ACCOUNT_INFO[playerid][ac_LEVEL] < 2) return SendClientMessage(playerid, -1, "{00FF80}Debes ser al menos nivel 2 para llamar a la policía.");
			PLAYER_TEMP[playerid][pt_PLAYER_IN_CALL] = true;
			PLAYER_TEMP[playerid][pt_POLICE_CALL_NAME] = true;
			PLAYER_TEMP[playerid][pt_POLICE_CALL_DESCRIPTION] = false;
			
			SendClientMessage(playerid, -1, "{E6F8E0}Operadora: Ha llamado a la central de policía, indícanos su nombre por favor.");
			return 1;
		}
		case 450: //Taxi
		{
			if(PLAYER_TEMP[playerid][pt_WANT_TAXI])
			{
				PLAYER_TEMP[playerid][pt_WANT_TAXI] = false;
				DisablePlayerTaxiMark(playerid);
				SendClientMessage(playerid, -1, "{E6F8E0}Has cancelado el taxi.");
			}
			else
			{
				PLAYER_TEMP[playerid][pt_WANT_TAXI] = true;
				SendClientMessage(playerid, -1, "{E6F8E0}Tu llamada se ha enviado a los taxistas disponibles, espera a que llegue un taxi.");
				SendClientMessage(playerid, -1, "{E6F8E0}Vuelve a llamar a este número si ya no necesitas un taxi.");
				SendAlertToTaxiDrivers(playerid);
			}
			return 1;
		}
		case 570: //Mecanico
		{
			if(PLAYER_TEMP[playerid][pt_WANT_MECHANIC])
			{
				PLAYER_TEMP[playerid][pt_WANT_MECHANIC] = false;
				DisablePlayerMechanicMark(playerid);
				SendClientMessage(playerid, -1, "{E6F8E0}Has cancelado el mecánico.");
			}
			else
			{
				if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, -1, "{00FF80}Tienes que estar dentro de un vehículo averiado para llamar al mecánico.");
				if(GLOBAL_VEHICLES[ GetPlayerVehicleID(playerid) ][gb_vehicle_STATE] != VEHICLE_STATE_DAMAGED) return SendClientMessage(playerid, -1, "{00FF80}Tienes que estar dentro de un vehículo averiado para llamar al mecánico.");
				
				PLAYER_TEMP[playerid][pt_WANT_MECHANIC] = true;
				SendClientMessage(playerid, -1, "{E6F8E0}Tu llamada se ha enviado a los mecánicos disponibles, espera a que llegue un mecánico.");
				SendClientMessage(playerid, -1, "{E6F8E0}Vuelve a llamar a este número si ya no necesitas un mecánico.");
				SendAlertToMechanic(playerid);
			}
			return 1;
		}
		case 6740: return SendClientMessage(playerid, -1, "{E6F8E0}No vuelvas a llamar al banco, cuidado.");
		case 38350: return SendClientMessage(playerid, -1, "{E6F8E0}Aseguradora que asegura tus vehículos de mierda.");
		case 666: return SendClientMessage(playerid, -1, "{E6F8E0}Mirar a las estrellas es mirar al pasado, no mires.");
	}
	
	new to_playerid = INVALID_PLAYER_ID;
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if(IsPlayerConnected(i))
		{
			if((PLAYER_TEMP[i][pt_GAME_STATE] == GAME_STATE_NORMAL) && PLAYER_PHONE[i][player_phone_NUMBER] == call_number)
			{
				to_playerid = i;
				break;
			}
		}
	}
	
	if(to_playerid == INVALID_PLAYER_ID) return SendClientMessage(playerid, -1, "{00FF80}El número al que intentas llamar no es correcto o está fuera de cobertura.");
	if(to_playerid == playerid) return SendClientMessage(playerid, -1, "{00FF80}El número al que intentas llamar no es correcto.");
	if(PLAYER_PHONE[to_playerid][player_phone_STATE] == PHONE_STATE_OFF) return SendClientMessage(playerid, -1, "{00FF80}El número al que intentas llamar está apagado o fuera de cobertura.");
	if(PLAYER_TEMP[to_playerid][pt_PLAYER_IN_CALL]) return SendClientMessage(playerid, -1, "{00FF80}El número al que intentas llamar está en otra llamada.");
	
	SendClientMessageEx(to_playerid, -1, "{e5f442}[Llamada entrante] {FFFFFF}%s te está llamando, para responser usa {e5f442}/responder {FFFFFF}o {e5f442}/colgar.", convertPhoneNumber(to_playerid, PLAYER_PHONE[playerid][player_phone_NUMBER]));
	PLAYER_TEMP[to_playerid][pt_PLAYER_IN_CALL] = true;
	PLAYER_TEMP[to_playerid][pt_PLAYER_PHONE_CALL_STATE] = CALL_STATE_INCOMING_CALL;
	PLAYER_TEMP[to_playerid][pt_PLAYER_PHONE_CALL_PLAYERID] = playerid;
	
	SendClientMessageEx(playerid, -1, "Llamando a {e5f442}%s ...", convertPhoneNumber(playerid, call_number));
	PLAYER_TEMP[playerid][pt_TIMERS][6] = SetTimerEx("NoCallResponse", 15000, false, "i", playerid);
	PLAYER_TEMP[playerid][pt_PLAYER_IN_CALL] = true;
	PLAYER_TEMP[playerid][pt_PLAYER_PHONE_CALL_STATE] = CALL_STATE_WAITING_RESPONSE;
	PLAYER_TEMP[playerid][pt_PLAYER_PHONE_CALL_PLAYERID] = to_playerid;
	PlayerPlaySoundEx(playerid, 3600, 0.0, 0.0, 0.0);
	return 1;
}

CMD:responder(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_JAIL || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1, "{00FF80}Ahora no puedes usar este comando.");
	if(!PLAYER_PHONE[playerid][player_phone_VALID])
	{
		ShowPlayerMessage(playerid, "No tienes ningún teléfono, puedes ir a cualquier 24/7 para comprar uno.", 3, 1085);
		return 1;
	}
	if(PLAYER_PHONE[playerid][player_phone_STATE] == PHONE_STATE_OFF) return SendClientMessageEx(playerid, -1, "{00FF80}Tu teléfono está apagado, para encenderlo usa /movil.");
	
	if(!PLAYER_TEMP[playerid][pt_PLAYER_IN_CALL]) return SendClientMessageEx(playerid, -1, "{00FF80}No hay ninguna llamada entrante.");
	if(PLAYER_TEMP[playerid][pt_PLAYER_PHONE_CALL_PLAYERID] == INVALID_PLAYER_ID) return SendClientMessageEx(playerid, -1, "{00FF80}No hay ninguna llamada entrante."); 
	if(PLAYER_TEMP[playerid][pt_PLAYER_PHONE_CALL_STATE] != CALL_STATE_INCOMING_CALL) return SendClientMessageEx(playerid, -1, "{00FF80}No hay ninguna llamada entrante.");
	
	new to_playerid = PLAYER_TEMP[playerid][pt_PLAYER_PHONE_CALL_PLAYERID];
	
	PLAYER_TEMP[playerid][pt_PLAYER_IN_CALL] = true;
	PLAYER_TEMP[playerid][pt_PLAYER_PHONE_CALL_STATE] = CALL_STATE_ESTABLISHED;
	PLAYER_TEMP[playerid][pt_PLAYER_PHONE_CALL_PLAYERID] = to_playerid;
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
	
	KillTimer(PLAYER_TEMP[to_playerid][pt_TIMERS][6]);
	PLAYER_TEMP[to_playerid][pt_PLAYER_IN_CALL] = true;
	PLAYER_TEMP[to_playerid][pt_PLAYER_PHONE_CALL_STATE] = CALL_STATE_ESTABLISHED;
	PLAYER_TEMP[to_playerid][pt_PLAYER_PHONE_CALL_PLAYERID] = playerid;
	SetPlayerSpecialAction(to_playerid, SPECIAL_ACTION_USECELLPHONE);
	
	SendClientMessage(playerid, -1, "Llamada establecida, usa {e5f442}/colgar {FFFFFF}para terminarla.");
	SendClientMessage(to_playerid, -1, "Llamada establecida, usa {e5f442}/colgar {FFFFFF}para terminarla.");
	return 1;
}

CMD:colgar(playerid, params[])
{
	if(!PLAYER_PHONE[playerid][player_phone_VALID])
	{
		ShowPlayerMessage(playerid, "No tienes ningún teléfono, puedes ir a cualquier 24/7 para comprar uno.", 3, 1085);
		return 1;
	}
	if(PLAYER_PHONE[playerid][player_phone_STATE] == PHONE_STATE_OFF) return SendClientMessageEx(playerid, -1, "{00FF80}Tu teléfono está apagado, para encenderlo usa /movil.");
	
	if(!PLAYER_TEMP[playerid][pt_PLAYER_IN_CALL]) return SendClientMessageEx(playerid, -1, "{00FF80}No hay ninguna llamada entrante.");
	
	if(PLAYER_TEMP[playerid][pt_POLICE_CALL_NAME] || PLAYER_TEMP[playerid][pt_POLICE_CALL_DESCRIPTION])
	{
		PLAYER_TEMP[playerid][pt_PLAYER_IN_CALL] = false;
		PLAYER_TEMP[playerid][pt_POLICE_CALL_NAME] = false;
		PLAYER_TEMP[playerid][pt_POLICE_CALL_DESCRIPTION] = false;
		SendClientMessage(playerid, -1, "{f47d42}Llamada finalizada.");
		return 1;
	}
	
	if(PLAYER_TEMP[playerid][pt_PLAYER_PHONE_CALL_PLAYERID] == INVALID_PLAYER_ID) return SendClientMessageEx(playerid, -1, "{00FF80}No hay ninguna llamada entrante."); 
	
	switch(PLAYER_TEMP[playerid][pt_PLAYER_PHONE_CALL_STATE])
	{
		case CALL_STATE_WAITING_RESPONSE:
		{
			EndPhoneCall(playerid);
			SendClientMessage(playerid, -1, "{E6F8E0}Colgaste.");
		}
		case CALL_STATE_INCOMING_CALL:
		{
			EndPhoneCall(playerid);
			SendClientMessage(playerid, -1, "{E6F8E0}No has respondido la llamada.");
		}
		case CALL_STATE_ESTABLISHED:
		{
			EndPhoneCall(playerid);
			SendClientMessage(playerid, -1, "{f47d42}Llamada finalizada.");
		}
		default: SendClientMessageEx(playerid, -1, "{00FF80}No estás en ninguna llamada.");	
	}
	return 1;
}

CMD:panel(playerid, params[])
{
	ShowDialog(playerid, DIALOG_PLAYER_CONFIG);
	return 1;
}
alias:panel("config", "configuracion", "ajustes");

CMD:comprarcasaa(playerid, params[])
{
	if(PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] == -1) return ShowPlayerMessage(playerid, "No estás en el lugar adecuado.", 3);
	if(ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_INTERIOR_TYPE] == INTERIOR_NO_INFO) return ShowPlayerMessage(playerid, "No estás en el lugar adecuado.", 3);

	
	new site_index = GetBuyPropertySiteIndexByIntTyp(ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_INTERIOR_TYPE]);
	if(site_index == -1) return ShowPlayerMessage(playerid, "No estás en el lugar adecuado.", 3);

	if(!IsPlayerInRangeOfPoint(playerid, 1.0, BUY_PROPERTIES_SITES[site_index][site_X], BUY_PROPERTIES_SITES[site_index][site_Y], BUY_PROPERTIES_SITES[site_index][site_Z])) return ShowPlayerMessage(playerid, "No estás en el lugar adecuado.", 3);
	
	if(BANK_ACCOUNT[playerid][bank_account_ID] == 0) return SendClientMessage(playerid, -1, "{00FF80}No puedes comprar una casa sin tener cuenta bancaria.");

	if(sscanf(params, "d", params[0])) return SendClientMessage(playerid, -1, "Error: {58ACFA}/comprarcasa {FFFFFF}[ID]");
	if(params[0] <= 0) return SendClientMessage(playerid, -1, "{00FF80}Error: ID no es válida.");
	
	new DBResult:Result, DB_Query[120], player_properties;
	format(DB_Query, sizeof(DB_Query), "SELECT COUNT(`ID_USER`) AS `PROPERTIES` FROM `PROPERTY_OWNER` WHERE `ID_USER` = '%d';", ACCOUNT_INFO[playerid][ac_ID]);
	Result = db_query(Database, DB_Query);
	if(db_num_rows(Result)) player_properties = db_get_field_assoc_int(Result, "PROPERTIES");
	db_free_result(Result);
	
	if(ACCOUNT_INFO[playerid][ac_SU])
	{
		if(player_properties >= MAX_SU_PROPERTIES) return SendClientMessage(playerid, -1, "{00FF80}No puedes comprar más propiedades.");
	}
	else
	{
		if(player_properties >= MAX_NU_PROPERTIES)
		{
			SendClientMessageEx(playerid, -1, "{E6F8E0}¡Los jugadores {b1fc6f}VIP {E6F8E0}pueden tener hasta %d propiedades! Usa {fffb49}/ayuda {E6F8E0}si quieres ser {b1fc6f}VIP.", MAX_SU_PROPERTIES);
			SendClientMessage(playerid, -1, "{00FF80}No puedes comprar más propiedades.");
		}
	}
	
	new index = GetPropertyIndexByID(params[0]);
	if(index == -1) return SendClientMessage(playerid, -1, "{00FF80}Error: ID no es válida.");
	
	if(PROPERTY_INFO[index][property_SOLD]) return SendClientMessage(playerid, -1, "{00FF80}Está propiedad ya está vendida.");
	if(PROPERTY_INFO[index][property_LEVEL] > ACCOUNT_INFO[playerid][ac_LEVEL]) return SendClientMessageEx(playerid, -1, "{00FF80}Necesitas ser como mínimo nivel %d para comprar esta propiedad.", PROPERTY_INFO[index][property_LEVEL]);
	if(PROPERTY_INFO[index][property_VIP_LEVEL] > ACCOUNT_INFO[playerid][ac_SU]) return SendClientMessageEx(playerid, -1, "{00FF80}Necesitas membresía VIP%d para comprar esta propiedad.", PROPERTY_INFO[index][property_VIP_LEVEL]);
	if(PROPERTY_INFO[index][property_EXTRA] > ACCOUNT_INFO[playerid][ac_SD]) return SendClientMessageEx(playerid, -1, "{00FF80}Necesitas %d "SERVER_COIN" para comprar esta propiedad.", PROPERTY_INFO[index][property_EXTRA]);
	if(BANK_ACCOUNT[playerid][bank_account_BALANCE] >= PROPERTY_INFO[index][property_PRICE])
	{
		PLAYER_TEMP[playerid][pt_BUY_HOUSE_INDEX] = index;
		ShowDialog(playerid, DIALOG_CONFIRM_BUY_PROPERTY);
	}
	else SendClientMessageEx(playerid, -1, "{00FF80}No tienes fondos suficientes en tu cuenta, te faltan {FF6633}%s$ {00FF80}para poder comprar esta propiedad.", number_format_thousand(PROPERTY_INFO[index][property_PRICE] - BANK_ACCOUNT[playerid][bank_account_BALANCE]));
	return 1;
}

GetPropertyIndexByID(id)
{
	for(new i = 0; i != MAX_PROPERTIES; i ++)
	{
		if(!PROPERTY_INFO[i][property_VALID]) continue;
		if(PROPERTY_INFO[i][property_ID] == id) return i;
	}
	return -1;
}

CMD:banco(playerid, params[])
{
	if(PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] == -1) return ShowPlayerMessage(playerid, "No estás en el lugar adecuado.", 3);
	if(ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_INTERIOR_TYPE] == INTERIOR_NO_INFO) return ShowPlayerMessage(playerid, "No estás en el lugar adecuado.", 3);

	
	new index = GetBankLocalIndexByIntType(ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_INTERIOR_TYPE]);
	if(index == -1) return ShowPlayerMessage(playerid, "No estás en el lugar adecuado.", 3);

	if(!IsPlayerInRangeOfPoint(playerid, 1.0, Bank_Interior_Positions[index][bank_X], Bank_Interior_Positions[index][bank_Y], Bank_Interior_Positions[index][bank_Z])) return ShowPlayerMessage(playerid, "No estás en el lugar adecuado.", 3);
	
	if(BANK_ACCOUNT[playerid][bank_account_ID] == 0) // no tiene cuenta bancaria
	{
		ShowDialog(playerid, DIALOG_CREATE_BANK_ACCOUNT);
		return 1;
	}
	ShowDialog(playerid, DIALOG_BANK);
	return 1;
}

CMD:cajero(playerid, params[])
{
	if(PLAYER_TEMP[playerid][pt_LAST_PICKUP_ID] == 0) return ShowPlayerMessage(playerid, "No estás en el lugar adecuado.", 3);
		
	new info[3];
	Streamer_GetArrayData(STREAMER_TYPE_PICKUP, PLAYER_TEMP[playerid][pt_LAST_PICKUP_ID], E_STREAMER_EXTRA_ID, info);
	if(info[0] != PICKUP_TYPE_ATM) return ShowPlayerMessage(playerid, "No estás en el lugar adecuado.", 3);
	
	new Float:pos[3]; 
	Streamer_GetFloatData(STREAMER_TYPE_PICKUP, PLAYER_TEMP[playerid][pt_LAST_PICKUP_ID], E_STREAMER_X, pos[0]);
	Streamer_GetFloatData(STREAMER_TYPE_PICKUP, PLAYER_TEMP[playerid][pt_LAST_PICKUP_ID], E_STREAMER_Y, pos[1]);
	Streamer_GetFloatData(STREAMER_TYPE_PICKUP, PLAYER_TEMP[playerid][pt_LAST_PICKUP_ID], E_STREAMER_Z, pos[2]);
	
	if(!IsPlayerInRangeOfPoint(playerid, 1.0, pos[0], pos[1], pos[2])) return ShowPlayerMessage(playerid, "No estás en el lugar adecuado.", 3);
	
	if(BANK_ACCOUNT[playerid][bank_account_ID] == 0)
	{
		SendClientMessage(playerid, -1, "{00FF80}No tienes cuenta bancaria, puedes crearla en cualquier Banco.");
		return 1;
	}
	
	PLAYER_TEMP[playerid][pt_PLAYER_IN_ATM] = true;
	ShowDialog(playerid, DIALOG_BANK);
	return 1;
}

CMD:alimentosss(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_JAIL || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1, "{00FF80}Ahora no puedes usar este comando.");
	ShowDialog(playerid, DIALOG_PLAYER_POCKET);
	return 1;
}


#define TIME_BETWEEN_GIVE_CASH	30 // segundos
CMD:dar(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_JAIL || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1, "{00FF80}Ahora no puedes usar este comando.");
	if(ACCOUNT_INFO[playerid][ac_LEVEL] < 2) return SendClientMessage(playerid, -1, "{00FF80}Debes ser al menos nivel 2 para usar este comando.");
	
	new option[24], to_playerid, extra;
	if(sscanf(params, "s[24]ud", option, to_playerid, extra)) return SendClientMessage(playerid, -1, "{00FF80}Error en los parámetros, utilice {E6F8E0}/man dar.");
	
	if(!IsPlayerConnected(to_playerid)) return SendClientMessage(playerid, -1, "{00FF80}El jugador no está conectado.");
	new Float:pos[3]; GetPlayerPos(to_playerid, pos[0], pos[1], pos[2]);
	if(!IsPlayerInRangeOfPoint(playerid, 2.0, pos[0], pos[1], pos[2])) return SendClientMessage(playerid, 0xA9F5A9AA, "Este jugador no está cerca tuya.");
	if(PLAYER_TEMP[to_playerid][pt_GAME_STATE] != GAME_STATE_NORMAL) return SendClientMessage(playerid, -1, "{00FF80}No puedes darle nada a este jugador ahora.");
	
	if(!strcmp(option, "dinero", true))
	{
		if(gettime() < PLAYER_TEMP[playerid][pt_LAST_GIVE_MONEY_TIME] + TIME_BETWEEN_GIVE_CASH)
		{
			new time = TIME_BETWEEN_GIVE_CASH - (gettime() - PLAYER_TEMP[playerid][pt_LAST_GIVE_MONEY_TIME]);
			SendClientMessageEx(playerid, -1, "{00FF80}Debes de esperar %s minutos para volver a dar dinero.", TimeConvert(time));
			return 1;
		}
		
		if(extra < 0 || extra > CHARACTER_INFO[playerid][ch_CASH]) return SendClientMessage(playerid, -1, "{00FF80}Cantidad de dinero incorrecta.");
		if(extra > 50000) return SendClientMessage(playerid, -1, "{00FF80}Para dar tanto dinero tienes que hacerlo a través de transferencias bancarias.");
		
		GivePlayerCash(playerid, -extra);
		GivePlayerCash(to_playerid, extra);
		
		SendClientMessageEx(playerid, -1, "Le has dado {5cd1d1}%s$ {FFFFFF}a {b6f442}%s.", number_format_thousand(extra), PLAYER_TEMP[to_playerid][pt_RP_NAME]);
		SendClientMessageEx(to_playerid, -1, "{b6f442}%s {FFFFFF} te ha dado {5cd1d1}%s$.", PLAYER_TEMP[playerid][pt_RP_NAME], number_format_thousand(extra));
		
		new action[64];
		format(action, sizeof action, "le da dinero a %s.", PLAYER_TEMP[to_playerid][pt_RP_NAME]);
		Auto_SendPlayerAction(playerid, action);
		PLAYER_TEMP[playerid][pt_LAST_GIVE_MONEY_TIME] = gettime();
		return 1;
	}
	else if(!strcmp(option, "alimentooa", true))
	{
		if(extra < 1 || extra > MAX_PLAYER_POCKET_OBJECTS) return SendClientMessage(playerid, -1, "Error: {58ACFA}/dar alimento {FFFFFF}[ID o Nombre] [Slot /alimentos]");
	
		extra --;
		
		if(!PLAYER_POCKET[playerid][extra][player_pocket_VALID]) return SendClientMessage(playerid, -1, "{00FF80}No tienes nada en ese slot.");
		
		new to_player_slot = GetEmptyPlayerPocketSlot(to_playerid);
		if(to_player_slot == -1)
		{
			PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
			SendClientMessage(playerid, -1, "{00FF80}El jugador no tiene más espacio entre sus alimentos.");
			return 1;
		}
		
		new action[64];
		format(action, sizeof action, "le da su %s a %s.", PLAYER_POCKET[playerid][extra][player_pocket_object_NAME], PLAYER_TEMP[to_playerid][pt_RP_NAME]);
		Auto_SendPlayerAction(playerid, action);
		
		TransferPlayerPocketObject(playerid, extra, to_playerid, to_player_slot);
		return 1;
	}
	else if(!strcmp(option, "medicamentos", true))
	{
		if(extra <= 0 || extra > 10000000) return SendClientMessage(playerid, -1, "{00FF80}Cantidad incorrecta.");
		if(extra > PLAYER_MISC[playerid][MISC_MEDICINE]) return SendClientMessage(playerid, -1, "{00FF80}No tienes esa cantidad.");
		
		PLAYER_MISC[playerid][MISC_MEDICINE] -= extra;
		PLAYER_MISC[to_playerid][MISC_MEDICINE] += extra;
		
		SendClientMessageEx(playerid, -1, "Le has dado %dg de medicamentos a %s.", extra, PLAYER_TEMP[to_playerid][pt_RP_NAME]);
		SendClientMessageEx(to_playerid, -1, "%s te ha dado %dg de medicamentos.", PLAYER_TEMP[playerid][pt_RP_NAME], extra);
		
		new action[64];
		format(action, sizeof action, "le da algo a %s.", PLAYER_TEMP[to_playerid][pt_RP_NAME]);
		Auto_SendPlayerAction(playerid, action);
		return 1;
	}
	else if(!strcmp(option, "marihuana", true))
	{
		if(extra <= 0 || extra > 10000000) return SendClientMessage(playerid, -1, "{00FF80}Cantidad incorrecta.");
		if(extra > PLAYER_MISC[playerid][MISC_CANNABIS]) return SendClientMessage(playerid, -1, "{00FF80}No tienes esa cantidad.");
		
		PLAYER_MISC[playerid][MISC_CANNABIS] -= extra;
		PLAYER_MISC[to_playerid][MISC_CANNABIS] += extra;
		
		SendClientMessageEx(playerid, -1, "Le has dado %dg de marihuana a %s.", extra, PLAYER_TEMP[to_playerid][pt_RP_NAME]);
		SendClientMessageEx(to_playerid, -1, "%s te ha dado %dg de marihuana.", PLAYER_TEMP[playerid][pt_RP_NAME], extra);
		
		new action[64];
		format(action, sizeof action, "le da algo a %s.", PLAYER_TEMP[to_playerid][pt_RP_NAME]);
		Auto_SendPlayerAction(playerid, action);
		return 1;
	}
	else if(!strcmp(option, "crack", true))
	{
		if(extra <= 0 || extra > 10000000) return SendClientMessage(playerid, -1, "{00FF80}Cantidad incorrecta.");
		if(extra > PLAYER_MISC[playerid][MISC_CRACK]) return SendClientMessage(playerid, -1, "{00FF80}No tienes esa cantidad.");
		
		PLAYER_MISC[playerid][MISC_CRACK] -= extra;
		PLAYER_MISC[to_playerid][MISC_CRACK] += extra;
		
		SendClientMessageEx(playerid, -1, "Le has dado %dg de crack a %s.", extra, PLAYER_TEMP[to_playerid][pt_RP_NAME]);
		SendClientMessageEx(to_playerid, -1, "%s te ha dado %dg de crack.", PLAYER_TEMP[playerid][pt_RP_NAME], extra);
		
		new action[64];
		format(action, sizeof action, "le da algo a %s.", PLAYER_TEMP[to_playerid][pt_RP_NAME]);
		Auto_SendPlayerAction(playerid, action);
		return 1;
	}
	else if(!strcmp(option, "arma", true))
	{
		if(PLAYER_WORKS[playerid][WORK_POLICE]) return SendClientMessage(playerid, -1, "{00FF80}Los policías no pueden vender armas.");
		if(extra < 0 || extra > 12) return SendClientMessage(playerid, -1, "Error: {58ACFA}/dar arma {FFFFFF}[ID o Nombre] [Slot /armas]");
	
		if(!PLAYER_WEAPONS[playerid][extra][player_weapon_VALID]) return SendClientMessage(playerid, -1, "{00FF80}No tienes nigún arma en ese slot.");
		
		if(ACCOUNT_INFO[to_playerid][ac_LEVEL] < 2) return SendClientMessage(playerid, -1, "{00FF80}La otra persona tiene que ser al menos nivel 2.");

		if(GetCountInventary(to_playerid) >= Max_Slots_For_Invetary) return MensajesAyuda(playerid,"El otro jugador tiene el inventario lleno");
		if(PLAYER_WEAPONS[to_playerid][extra][player_weapon_VALID])
		{
			PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
			SendClientMessage(playerid, -1, "{00FF80}El jugador ya tiene un arma en ese slot.");
			return 1;
		}
		
		SendClientMessageEx(playerid, -1, "{E6F8E0}Le has dado tu '%s' a %s.", WEAPON_INFO[ PLAYER_WEAPONS[playerid][extra][player_weapon_ID] ][weapon_info_NAME], PLAYER_TEMP[to_playerid][pt_RP_NAME]);
		SendClientMessageEx(to_playerid, -1, "{E6F8E0}%s te ha dado su '%s'.", PLAYER_TEMP[playerid][pt_RP_NAME], WEAPON_INFO[ PLAYER_WEAPONS[playerid][extra][player_weapon_ID] ][weapon_info_NAME]);
		
		new action[64];
		format(action, sizeof action, "le da un arma a %s.", PLAYER_TEMP[to_playerid][pt_RP_NAME]);
		Auto_SendPlayerAction(playerid, action);
		
		TransferPlayerWeapon(playerid, extra, to_playerid);
		return 1;
	}
	else SendClientMessage(playerid, -1, "{00FF80}Error en los parámetros, utilice {E6F8E0}/man dar.");
	return 1;
}

CMD:vender(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_JAIL || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1, "{00FF80}Ahora no puedes usar este comando.");
	if(ACCOUNT_INFO[playerid][ac_LEVEL] < 2) return SendClientMessage(playerid, -1, "{00FF80}Debes ser al menos nivel 2 para usar este comando.");
	
	new option[24], to_playerid, extra, price;
	if(sscanf(params, "s[24]udd", option, to_playerid, extra, price)) return SendClientMessage(playerid, -1, "{00FF80}Error en los parámetros, utilice {E6F8E0}/man vender.");
	
	if(price <= 0 || price > 10000000) return SendClientMessage(playerid, -1, "{00FF80}El precio no es válido.");
	if(!IsPlayerConnected(to_playerid)) return SendClientMessage(playerid, -1, "{00FF80}El jugador no está conectado.");
	new Float:pos[3]; GetPlayerPos(to_playerid, pos[0], pos[1], pos[2]);
	if(!IsPlayerInRangeOfPoint(playerid, 2.0, pos[0], pos[1], pos[2])) return SendClientMessage(playerid, 0xA9F5A9AA, "Este jugador no está cerca tuya.");
	if(PLAYER_TEMP[to_playerid][pt_GAME_STATE] != GAME_STATE_NORMAL) return SendClientMessage(playerid, -1, "{00FF80}No puedes venderle nada a este jugador ahora.");
	
	if(price > CHARACTER_INFO[to_playerid][ch_CASH])
	{
		SendClientMessage(playerid, -1, "{00FF80}Esta persona no tiene el dinero que pides.");
		return 1;
	}
	
	PLAYER_TEMP[to_playerid][pt_TRICK_SELLER_PID] = playerid;
	PLAYER_TEMP[to_playerid][pt_TRICK_SELLER_AID] = ACCOUNT_INFO[playerid][ac_ID];
	PLAYER_TEMP[to_playerid][pt_TRICK_PRICE] = price;
	PLAYER_TEMP[to_playerid][pt_TRICK_SELLER_EXTRA] = extra;
	PLAYER_TEMP[to_playerid][pt_TRICK_TIME] = gettime();
	
	if(!strcmp(option, "alimento", true))
	{
		if(PLAYER_TEMP[to_playerid][pt_TRICK_SELLER_EXTRA] < 1 || PLAYER_TEMP[to_playerid][pt_TRICK_SELLER_EXTRA] > MAX_PLAYER_POCKET_OBJECTS) return SendClientMessage(playerid, -1, "Error: {58ACFA}/vender alimento {FFFFFF}[ID o Nombre] [Slot /alimentos] [precio]");
		PLAYER_TEMP[to_playerid][pt_TRICK_SELLER_EXTRA] --;
		
		if(!PLAYER_POCKET[playerid][ PLAYER_TEMP[to_playerid][pt_TRICK_SELLER_EXTRA] ][player_pocket_VALID]) return SendClientMessage(playerid, -1, "{00FF80}No tienes nada en ese slot.");
		
		SendClientMessageEx(playerid, -1, "{E6F8E0}Le has ofrecido una venta a %s, espera para ver si la acepta.", PLAYER_TEMP[to_playerid][pt_RP_NAME]);
		ShowDialog(to_playerid, DIALOG_TRICKS_FOOD);
		return 1;
	}
	else if(!strcmp(option, "medicamentos", true))
	{
		if(PLAYER_TEMP[to_playerid][pt_TRICK_SELLER_EXTRA] <= 0 || PLAYER_TEMP[to_playerid][pt_TRICK_SELLER_EXTRA] > 10000000) return SendClientMessage(playerid, -1, "{00FF80}Cantidad incorrecta.");
		if(PLAYER_TEMP[to_playerid][pt_TRICK_SELLER_EXTRA] > PLAYER_MISC[playerid][MISC_MEDICINE]) return SendClientMessage(playerid, -1, "{00FF80}No tienes esa cantidad.");
		
		SendClientMessageEx(playerid, -1, "{E6F8E0}Le has ofrecido una venta a %s, espera para ver si la acepta.", PLAYER_TEMP[to_playerid][pt_RP_NAME]);
		ShowDialog(to_playerid, DIALOG_TRICKS_MEDICINE);
		return 1;
	}
	else if(!strcmp(option, "marihuana", true))
	{
		if(PLAYER_TEMP[to_playerid][pt_TRICK_SELLER_EXTRA] <= 0 || PLAYER_TEMP[to_playerid][pt_TRICK_SELLER_EXTRA] > 10000000) return SendClientMessage(playerid, -1, "{00FF80}Cantidad incorrecta.");
		if(PLAYER_TEMP[to_playerid][pt_TRICK_SELLER_EXTRA] > PLAYER_MISC[playerid][MISC_CANNABIS]) return SendClientMessage(playerid, -1, "{00FF80}No tienes esa cantidad.");
		
		SendClientMessageEx(playerid, -1, "{E6F8E0}Le has ofrecido una venta a %s, espera para ver si la acepta.", PLAYER_TEMP[to_playerid][pt_RP_NAME]);
		ShowDialog(to_playerid, DIALOG_TRICKS_CANNABIS);
		return 1;
	}
	else if(!strcmp(option, "crack", true))
	{
		if(PLAYER_TEMP[to_playerid][pt_TRICK_SELLER_EXTRA] <= 0 || PLAYER_TEMP[to_playerid][pt_TRICK_SELLER_EXTRA] > 10000000) return SendClientMessage(playerid, -1, "{00FF80}Cantidad incorrecta.");
		if(PLAYER_TEMP[to_playerid][pt_TRICK_SELLER_EXTRA] > PLAYER_MISC[playerid][MISC_CRACK]) return SendClientMessage(playerid, -1, "{00FF80}No tienes esa cantidad.");
		
		SendClientMessageEx(playerid, -1, "{E6F8E0}Le has ofrecido una venta a %s, espera para ver si la acepta.", PLAYER_TEMP[to_playerid][pt_RP_NAME]);
		ShowDialog(to_playerid, DIALOG_TRICKS_CRACK);
		return 1;
	}
	else if(!strcmp(option, "arma", true))
	{
		if(PLAYER_WORKS[playerid][WORK_POLICE]) return SendClientMessage(playerid, -1, "{00FF80}Los policías no pueden vender armas.");
		if(PLAYER_TEMP[to_playerid][pt_TRICK_SELLER_EXTRA] < 0 || PLAYER_TEMP[to_playerid][pt_TRICK_SELLER_EXTRA] > 12) return SendClientMessage(playerid, -1, "Error en slot de /armas.");
	
		if(!PLAYER_WEAPONS[playerid][ PLAYER_TEMP[to_playerid][pt_TRICK_SELLER_EXTRA] ][player_weapon_VALID]) return SendClientMessage(playerid, -1, "{00FF80}No tienes nigún arma en ese slot.");
		
		if(ACCOUNT_INFO[to_playerid][ac_LEVEL] < 2) return SendClientMessage(playerid, -1, "{00FF80}La otra persona tiene que ser al menos nivel 2.");
		
		SendClientMessageEx(playerid, -1, "{E6F8E0}Le has ofrecido una venta a %s, espera para ver si la acepta.", PLAYER_TEMP[to_playerid][pt_RP_NAME]);
		ShowDialog(to_playerid, DIALOG_TRICKS_WEAPON);
		return 1;
	}
	else if(!strcmp(option, "coins", true))
	{
		if(PLAYER_TEMP[to_playerid][pt_TRICK_SELLER_EXTRA] <= 0 || PLAYER_TEMP[to_playerid][pt_TRICK_SELLER_EXTRA] > 10000000) return SendClientMessage(playerid, -1, "{00FF80}Cantidad incorrecta.");
		if(PLAYER_TEMP[to_playerid][pt_TRICK_SELLER_EXTRA] > ACCOUNT_INFO[playerid][ac_SD]) return SendClientMessage(playerid, -1, "{00FF80}No tienes esa cantidad de "SERVER_COIN".");
		
		SendClientMessageEx(playerid, -1, "{E6F8E0}Le has ofrecido una venta a %s, espera para ver si la acepta.", PLAYER_TEMP[to_playerid][pt_RP_NAME]);
		ShowDialog(to_playerid, DIALOG_TRICKS_SU);
		return 1;
	}
	else SendClientMessage(playerid, -1, "{00FF80}Error en los parámetros, utilice {E6F8E0}/man vender.");
	return 1;
}

CMD:sexo(playerid,params[]) 
{
    new sexstyle;
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_JAIL || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1, "{00FF80}Ahora no puedes usar este comando.");
    if(sscanf(params, "d", sexstyle)) return SendClientMessage(playerid, -1, "USA: /sexo [1-20]");
	switch(sexstyle)
	{
		case 1: ApplyAnimation(playerid,"BLOWJOBZ","BJ_COUCH_START_P",4.1,0,1,1,1,1);
		case 2: ApplyAnimation(playerid,"BLOWJOBZ","BJ_COUCH_START_W",4.1,0,1,1,1,1);
		case 3: ApplyAnimation(playerid,"BLOWJOBZ","BJ_COUCH_LOOP_P",4.1,0,1,1,1,1);
		case 4: ApplyAnimation(playerid,"BLOWJOBZ","BJ_COUCH_LOOP_W",4.1,0,1,1,1,1);
		case 5: ApplyAnimation(playerid,"BLOWJOBZ","BJ_COUCH_END_P",4.1,0,1,1,1,1);
		case 6: ApplyAnimation(playerid,"BLOWJOBZ","BJ_COUCH_END_W",4.1,0,1,1,1,1);
		case 7: ApplyAnimation(playerid,"BLOWJOBZ","BJ_STAND_START_P",4.1,0,1,1,1,1);
		case 8: ApplyAnimation(playerid,"BLOWJOBZ","BJ_STAND_START_W",4.1,0,1,1,1,1);
		case 9: ApplyAnimation(playerid,"BLOWJOBZ","BJ_STAND_LOOP_P",4.1,0,1,1,1,1);
		case 10: ApplyAnimation(playerid,"BLOWJOBZ","BJ_STAND_LOOP_W",4.1,0,1,1,1,1);
		case 11: ApplyAnimation(playerid,"BLOWJOBZ","BJ_STAND_END_P",4.1,0,1,1,1,1);
		case 12: ApplyAnimation(playerid,"BLOWJOBZ","BJ_STAND_END_W",4.1,0,1,1,1,1);
		case 13: ApplyAnimation(playerid,"SNM","SPANKING_IDLEW",4.0, 0, 1, 1, 1, 1);
		case 14: ApplyAnimation(playerid, "SNM","SPANKING_IDLEP", 4.0, 1, 1, 1, 1, 1);
		case 15: ApplyAnimation(playerid, "SNM","SPANKINGW", 4.0, 1, 1, 1, 1, 1);
		case 16: ApplyAnimation(playerid, "SNM","SPANKINGP", 4.0, 1, 1, 1, 1, 1);
		case 17: ApplyAnimation(playerid, "SNM","SPANKEDW", 4.0, 1, 1, 1, 1, 1);
		case 18: ApplyAnimation(playerid, "SNM","SPANKEDP", 4.0, 1, 1, 1, 1, 1);
		case 19: ApplyAnimation(playerid, "SNM","SPANKING_ENDW", 4.0, 1, 1, 1, 1, 1);
		case 20: ApplyAnimation(playerid, "SNM","SPANKING_ENDP", 4.0, 1, 1, 1, 1, 1);
		default: return SendClientMessage(playerid,-1,"USA: /sexo [1-20]");
	}
	return 1;
}

CMD:consumir(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_JAIL || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1, "{00FF80}Ahora no puedes usar este comando.");
	new option[24], slot;
	if(!sscanf(params, "s[24]d", option, slot))	
	{
		if(!strcmp(option, "alimentoa", true))
		{
			if(slot < 1 || slot > MAX_PLAYER_POCKET_OBJECTS) return SendClientMessageEx(playerid, -1, "Error: {58ACFA}/consumir alimento {FFFFFF}[SLOT 1-%d]", MAX_PLAYER_POCKET_OBJECTS);
		
			slot --;
			
			if(!PLAYER_POCKET[playerid][slot][player_pocket_VALID]) return SendClientMessage(playerid, -1, "{00FF80}No tienes nada en ese slot.");
			if(CHARACTER_INFO[playerid][ch_HUNGRY] >= 99.0 && CHARACTER_INFO[playerid][ch_THIRST] >= 99.0) return SendClientMessage(playerid, -1, "{E6F8E0}¿Es que quieres reventar?");

			Add_Hungry_Thirst(playerid, PLAYER_POCKET[playerid][slot][player_pocket_object_HUNGRY], PLAYER_POCKET[playerid][slot][player_pocket_object_THIRST]);
			GivePlayerDrunkLevel(playerid, PLAYER_POCKET[playerid][slot][player_pocket_object_DRUNK]);
			
			new action[64];
			format(action, sizeof action, "consume %s.", PLAYER_POCKET[playerid][slot][player_pocket_object_NAME]);
			Auto_SendPlayerAction(playerid, action);
			
			DeletePlayerPocketObject(playerid, slot);

			ApplyAnimation(playerid, "FOOD", "EAT_Pizza", 0, 0, 0, 0, 0, 0);
			ApplyAnimation(playerid, "FOOD", "EAT_Pizza", 4.1, false, true, true, false, 1000);
		}
		else SendClientMessage(playerid, -1, "Error: {58ACFA}/consumir {FFFFFF}[medicamento - marihuana - crack - alimento]");
	}
	else if(!sscanf(params, "s[24]", option))
	{
		if(!strcmp(option, "medicamento", true))
		{
			if(PLAYER_MISC[playerid][MISC_MEDICINE] <= 0) return SendClientMessage(playerid, -1, "{00FF80}No tienes medicamentos.");
			
			PLAYER_MISC[playerid][MISC_MEDICINE] --;
			GivePlayerHealthEx(playerid, 25.0);
			Auto_SendPlayerAction(playerid, "se toma un medicamento.");
		}
		else if(!strcmp(option, "marihuana", true))
		{
			if(PLAYER_MISC[playerid][MISC_CANNABIS] <= 0) return SendClientMessage(playerid, -1, "{00FF80}No tienes marihuana.");
			
			PLAYER_MISC[playerid][MISC_CANNABIS] --;
			GivePlayerHealthEx(playerid, 30.0);
			Auto_SendPlayerAction(playerid, "consume marihuana.");
			GivePlayerDrunkLevel(playerid, 1000);
		}
		else if(!strcmp(option, "crack", true))
		{
			if(PLAYER_MISC[playerid][MISC_CRACK] <= 0) return SendClientMessage(playerid, -1, "{00FF80}No tienes crack.");
			
			PLAYER_MISC[playerid][MISC_CRACK] --;
			GivePlayerArmourEx(playerid, 20.0);
			Auto_SendPlayerAction(playerid, "consume crack.");
			GivePlayerDrunkLevel(playerid, 2000);
		}
		else if(!strcmp(option, "alimento", true)) SendClientMessageEx(playerid, -1, "Error: {58ACFA}/consumir alimento {FFFFFF}[SLOT 1-%d]", MAX_PLAYER_POCKET_OBJECTS);
		else SendClientMessage(playerid, -1, "Error: {58ACFA}/consumir {FFFFFF}[medicamento - marihuana - crack - alimento]");
	}
	else SendClientMessage(playerid, -1, "Error: {58ACFA}/consumir {FFFFFF}[medicamento - marihuana - crack - alimento]");
	return 1;
}

CMD:man(playerid, params[])
{
	new option[24];
	if(sscanf(params, "s[24]", option)) return SendClientMessage(playerid, -1, "Error: {58ACFA}/man {FFFFFF}[dar]");

	if(!strcmp(option, "dar", true))
	{
		ShowPlayerDialog
		(
			playerid,
			DIALOG_INFO,
			DIALOG_STYLE_MSGBOX,
			
				""SERVER_NAME" - Manual",
					"\
						Comando: dar\n\
						Sintaxis: dar <opcion> <playerid o nombre> <extra>\n\
						\n\
						Este comando sirve para dar algo a otro jugador cercano.\n\
						Para comprobar que tiene el objeto y la cantidad utilice /inv.\n\
						\n\
						Esta es la lista de opciones:\n\
						    - arma <playerid o nombre> <slot de /armas>\n\
						    - dinero <playerid o nombre> <cantidad>\n\
						    - medicamentos <playerid o nombre> <cantidad>\n\
						    - marihuana <playerid o nombre> <cantidad>\n\
						    - crack <playerid o nombre> <cantidad>\n\
						\n\
						Para obtener ayuda diferente use /ayuda.\
					",
				"Cerrar", ""
				
		);
		return 1;
	}
	else if(!strcmp(option, "tirar", true))
	{
		ShowPlayerDialog
		(
			playerid,
			DIALOG_INFO,
			DIALOG_STYLE_MSGBOX,
			
				""SERVER_NAME" - Manual",
					"\
						Comando: tirar\n\
						Sintaxis: tirar <opcion> <extra>\n\
						\n\
						Este comando sirve para deshacerte de algún objeto.\n\
						\n\
						Esta es la lista de opciones:\n\
						    - arma <slot de /armas>\n\
						    - dinero <cantidad>\n\
						    - medicamentos <cantidad>\n\
						    - marihuana <cantidad>\n\
						    - crack <cantidad>\n\
						    - inv (Tirar items de tu inventario)\n\
						\n\
						Para obtener ayuda diferente use /ayuda.\
					",
				"Cerrar", ""
				
		);
		return 1;
	}
	else if(!strcmp(option, "vender", true))
	{
		ShowPlayerDialog
		(
			playerid,
			DIALOG_INFO,
			DIALOG_STYLE_MSGBOX,
			
				""SERVER_NAME" - Manual",
					"\
						Comando: vender\n\
						Sintaxis: vender <opcion> <playerid o nombre> <extra> <precio>\n\
						\n\
						Este comando sirve para vender algo a otro jugador cercano.\n\
						Para comprobar que tiene el objeto y la cantidad utilice /inv.\n\
						\n\
						Esta es la lista de opciones:\n\
						    - arma <playerid o nombre> <slot de /armas> <precio>\n\
						    - medicamentos <playerid o nombre> <cantidad> <precio>\n\
						    - marihuana <playerid o nombre> <cantidad> <precio>\n\
						    - crack <playerid o nombre> <cantidad> <precio>\n\
						    - coins <playerid o nombre> <cantidad> <precio>\n\
						\n\
						Para obtener ayuda diferente use /ayuda.\
					",
				"Cerrar", ""
				
		);
		return 1;
	}
	else SendClientMessage(playerid, -1, "Error: {58ACFA}/man {FFFFFF}[dar]");
	return 1;
}
CMD:tirarinv(playerid)
{
	HiveIntaruil(playerid);
	DesSaveInvetary(playerid);
	Equiped_Inventary[playerid][VALID_EQUIPED]=false;
	Equiped_Inventary[playerid][ESTADO]=0;
	Equiped_Inventary[playerid][TYPE]=0;
	Tirar_Inventario(playerid);
	return 1;
}
CMD:tirar(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1, "{00FF80}Ahora no puedes usar este comando.");
	new option[24], extra;
	if(sscanf(params, "s[24]d", option, extra)) return SendClientMessage(playerid, -1, "{00FF80}Error en los parámetros, utilice {E6F8E0}/man tirar.");
	
	if(!strcmp(option, "dinero", true))
	{
		if(extra < 0 || extra > CHARACTER_INFO[playerid][ch_CASH]) return SendClientMessage(playerid, -1, "{00FF80}Cantidad de dinero incorrecta.");
		
		GivePlayerCash(playerid, -extra);
		
		SendClientMessageEx(playerid, -1, "{E6F8E0}Has tirado {5cd1d1}%s$.", number_format_thousand(extra));
		Auto_SendPlayerAction(playerid, "tira dinero.");
		return 1;
	}
	else if(!strcmp(option, "alimento", true))
	{
		if(extra < 1 || extra > MAX_PLAYER_POCKET_OBJECTS) return SendClientMessageEx(playerid, -1, "Error: {58ACFA}/tirar alimento {FFFFFF}[SLOT 1-%d]", MAX_PLAYER_POCKET_OBJECTS);
	
		extra --;
		
		if(!PLAYER_POCKET[playerid][extra][player_pocket_VALID]) return SendClientMessage(playerid, -1, "{00FF80}No tienes nada en ese slot.");

		SendClientMessageEx(playerid, -1, "{00FF80}Has eliminado \"%s\" de tus alimentos.", PLAYER_POCKET[playerid][extra][player_pocket_object_NAME]);
		DeletePlayerPocketObject(playerid, extra);
		return 1;
	}
	else if(!strcmp(option, "medicamentos", true))
	{
		if(extra <= 0 || extra > 10000000) return SendClientMessage(playerid, -1, "{00FF80}Cantidad incorrecta.");
		if(extra > PLAYER_MISC[playerid][MISC_MEDICINE]) return SendClientMessage(playerid, -1, "{00FF80}No tienes esa cantidad.");
		
		PLAYER_MISC[playerid][MISC_MEDICINE] -= extra;
		
		SendClientMessageEx(playerid, -1, "Has tirado %dg de medicamentos.", extra);
		return 1;
	}
	else if(!strcmp(option, "marihuana", true))
	{
		if(extra <= 0 || extra > 10000000) return SendClientMessage(playerid, -1, "{00FF80}Cantidad incorrecta.");
		if(extra > PLAYER_MISC[playerid][MISC_CANNABIS]) return SendClientMessage(playerid, -1, "{00FF80}No tienes esa cantidad.");
		
		PLAYER_MISC[playerid][MISC_CANNABIS] -= extra;
		
		SendClientMessageEx(playerid, -1, "Has tirado %dg de marihuana.", extra);
		return 1;
	}
	else if(!strcmp(option, "crack", true))
	{
		if(extra <= 0 || extra > 10000000) return SendClientMessage(playerid, -1, "{00FF80}Cantidad incorrecta.");
		if(extra > PLAYER_MISC[playerid][MISC_CRACK]) return SendClientMessage(playerid, -1, "{00FF80}No tienes esa cantidad.");
		
		PLAYER_MISC[playerid][MISC_CRACK] -= extra;
		
		SendClientMessageEx(playerid, -1, "Has tirado %dg de crack.", extra);
		return 1;
	}
	else if(!strcmp(option, "arma", true))
	{
		if(extra < 0 || extra > 12) return SendClientMessage(playerid, -1, "Error: {58ACFA}/tirar arma {FFFFFF}[Slot /armas]");
	
		if(!PLAYER_WEAPONS[playerid][extra][player_weapon_VALID]) return SendClientMessage(playerid, -1, "{00FF80}No tienes nigún arma en ese slot.");
		
		SendClientMessageEx(playerid, -1, "{00FF80}Has eliminado tu '%s' de tus armas.", WEAPON_INFO[ PLAYER_WEAPONS[playerid][extra][player_weapon_ID] ][weapon_info_NAME]);
		RemovePlayerSlotWeapon(playerid, extra, true);
		return 1;
	}
	else if(strcmp(option,"inventario",true) == 0)
	{
		HiveIntaruil(playerid);
		Tirar_Inventario(playerid);
		return 1;
	}
	else SendClientMessage(playerid, -1, "{00FF80}Error en los parámetros, utilice {E6F8E0}/man tirar.");
	return 1;
}



CMD:puerta(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] != ROLEPLAY_STATE_OWN_PROPERTY) return ShowPlayerMessage(playerid, "No estás en el lugar adecuado.", 3);
	if(PLAYER_TEMP[playerid][pt_LAST_PICKUP_ID] == 0) return ShowPlayerMessage(playerid, "No estás en el lugar adecuado.", 3);
		
	new info[3];
	Streamer_GetArrayData(STREAMER_TYPE_PICKUP, PLAYER_TEMP[playerid][pt_LAST_PICKUP_ID], E_STREAMER_EXTRA_ID, info);
	if(info[0] != PICKUP_TYPE_PROPERTY) return ShowPlayerMessage(playerid, "No estás en el lugar adecuado.", 3);
	
	new Float:pos[3]; 
	Streamer_GetFloatData(STREAMER_TYPE_PICKUP, PLAYER_TEMP[playerid][pt_LAST_PICKUP_ID], E_STREAMER_X, pos[0]);
	Streamer_GetFloatData(STREAMER_TYPE_PICKUP, PLAYER_TEMP[playerid][pt_LAST_PICKUP_ID], E_STREAMER_Y, pos[1]);
	Streamer_GetFloatData(STREAMER_TYPE_PICKUP, PLAYER_TEMP[playerid][pt_LAST_PICKUP_ID], E_STREAMER_Z, pos[2]);
	
	if(!IsPlayerInRangeOfPoint(playerid, 1.0, pos[0], pos[1], pos[2])) return ShowPlayerMessage(playerid, "No estás en el lugar adecuado.", 3);
	
	if(info[2] == 1) // Está en el Pickup Interior
	{
		if(PROPERTY_INFO[info[1]][property_OWNER_ID] == ACCOUNT_INFO[playerid][ac_ID])
		{
			if(PLAYER_TEMP[playerid][pt_KNOCK_PLAYER_ID] == INVALID_PLAYER_ID) return SendClientMessage(playerid, 0xA9F5A9AA, "Nadie ha tocado en la puerta.");
			if(!IsPlayerConnected(PLAYER_TEMP[playerid][pt_KNOCK_PLAYER_ID])) return SendClientMessage(playerid, 0xA9F5A9AA, "Nadie ha tocado en la puerta o ya se ha ido.");
			if(!IsPlayerInRangeOfPoint(PLAYER_TEMP[playerid][pt_KNOCK_PLAYER_ID], 3.0, PROPERTY_INFO[info[1]][property_EXT_X], PROPERTY_INFO[info[1]][property_EXT_Y], PROPERTY_INFO[info[1]][property_EXT_Z])) return SendClientMessage(playerid, 0xA9F5A9AA, "Nadie ha tocado en la puerta o ya se ha ido.");
			if(PLAYER_TEMP[playerid][pt_GAME_STATE] != GAME_STATE_NORMAL) return SendClientMessage(playerid, 0xA9F5A9AA, "Este jugador no puede entrar ahora.");
			
			PLAYER_TEMP[PLAYER_TEMP[playerid][pt_KNOCK_PLAYER_ID]][pt_HOSPITAL] = GetNearestHospitalForPlayer(PLAYER_TEMP[playerid][pt_KNOCK_PLAYER_ID]);
			if(PLAYER_TEMP[PLAYER_TEMP[playerid][pt_KNOCK_PLAYER_ID]][pt_HOSPITAL] == -1) PLAYER_TEMP[PLAYER_TEMP[playerid][pt_KNOCK_PLAYER_ID]][pt_HOSPITAL] = 1;
			
			CHARACTER_INFO[PLAYER_TEMP[playerid][pt_KNOCK_PLAYER_ID]][ch_STATE] = ROLEPLAY_STATE_GUEST_PROPERTY;
			CHARACTER_INFO[PLAYER_TEMP[playerid][pt_KNOCK_PLAYER_ID]][ch_INTERIOR_EXTRA] = PROPERTY_INFO[info[1]][property_ID];
			PLAYER_TEMP[PLAYER_TEMP[playerid][pt_KNOCK_PLAYER_ID]][pt_PROPERTY_INDEX] = info[1];
			SetPlayerPosEx(PLAYER_TEMP[playerid][pt_KNOCK_PLAYER_ID], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_X], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_Y], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_Z], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_ANGLE], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_INTERIOR], PROPERTY_INFO[info[1]][property_ID], false /*PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_FREEZE]*/, true);
			FreezePlayer(PLAYER_TEMP[playerid][pt_KNOCK_PLAYER_ID]);
		}
		else ShowPlayerMessage(playerid, "No estás en el lugar adecuado.", 3);
	}
	else ShowPlayerMessage(playerid, "No estás en el lugar adecuado.", 3);
	return 1;
}

CMD:pvender(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_LEVEL] < 2) return SendClientMessage(playerid, -1, "{00FF80}Debes ser al menos nivel 2 para usar este comando.");
	if(ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_INTERIOR_TYPE] != INTERIOR_CITY_HALL_LS) return 1;
	if(!IsPlayerInRangeOfPoint(playerid, 1.0, -474.596282, 289.679107, 2004.584960)) return SendClientMessage(playerid,-1,"Ve al punto de venta para vender");
	if(BANK_ACCOUNT[playerid][bank_account_ID] == 0) return SendClientMessage(playerid, 0xA9F5A9AA, "Necesitas tener una cuenta bancaria para poder realizar estas operaciones.");
	
	ShowDialog(playerid, DIALOG_NOTARY);
	//ShowPlayerDialog(playerid,DIAOG_NOTARIA, DIALOG_STYLE_LIST, "NOTARIA", "Vender un negocio\nVender un vehiculo","Seguir", "Cancelar");
	return 1;
}

CMD:grua(playerid, params[])
{
	if(ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_INTERIOR_TYPE] != INTERIOR_CITY_HALL_LS) return ShowPlayerMessage(playerid, "No estás en el lugar adecuado.", 3);
	if(!IsPlayerInRangeOfPoint(playerid, 1.0, -508.645385, 322.147644, 2004.585937)) return ShowPlayerMessage(playerid, "No estás en el lugar adecuado.", 3);

	ShowDialog(playerid, DIALOG_CRANE_SELECT_VEHICLE);
	return 1;
}

CMD:casaasd(playerid, params[])
{
	if(PLAYER_TEMP[playerid][pt_LAST_PICKUP_ID] == 0) return ShowPlayerMessage(playerid, "No estás en el lugar adecuado.", 3);
		
	new info[3];
	Streamer_GetArrayData(STREAMER_TYPE_PICKUP, PLAYER_TEMP[playerid][pt_LAST_PICKUP_ID], E_STREAMER_EXTRA_ID, info);
	if(info[0] != PICKUP_TYPE_PROPERTY) return ShowPlayerMessage(playerid, "No estás en el lugar adecuado.", 3);
	
	new Float:pos[3]; 
	Streamer_GetFloatData(STREAMER_TYPE_PICKUP, PLAYER_TEMP[playerid][pt_LAST_PICKUP_ID], E_STREAMER_X, pos[0]);
	Streamer_GetFloatData(STREAMER_TYPE_PICKUP, PLAYER_TEMP[playerid][pt_LAST_PICKUP_ID], E_STREAMER_Y, pos[1]);
	Streamer_GetFloatData(STREAMER_TYPE_PICKUP, PLAYER_TEMP[playerid][pt_LAST_PICKUP_ID], E_STREAMER_Z, pos[2]);
	
	if(!IsPlayerInRangeOfPoint(playerid, 1.0, pos[0], pos[1], pos[2])) return ShowPlayerMessage(playerid, "No estás en el lugar adecuado.", 3);
	
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_OWN_PROPERTY)
	{
		if(info[2] == 1) // Está en el Pickup Interior
		{
			if(PROPERTY_INFO[info[1]][property_OWNER_ID] == ACCOUNT_INFO[playerid][ac_ID])
			{
				PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] = info[1];
				ShowDialog(playerid, DIALOG_PROPERTY_OPTIONS);
			}
			else ShowPlayerMessage(playerid, "No estás en el lugar adecuado.", 3);
		}
		else ShowPlayerMessage(playerid, "No estás en el lugar adecuado.", 3);
	}
	else if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_GUEST_PROPERTY)
	{
		if(info[2] == 1) // Está en el Pickup Interior
		{
			if(PROPERTY_INFO[info[1]][property_CREW])
			{
				if(PROPERTY_INFO[info[1]][property_CREW_ID] != PLAYER_CREW[playerid][player_crew_ID]) return SendClientMessage(playerid, -1, "{00FF80}Esta no es una propiedad de tu banda.");
				if(!CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_PERMISSION][CREW_RANK_DELETE_PROPERTIES]) return SendClientMessage(playerid, -1, "{00FF80}No tienes permiso.");
				if(CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_FIGHTING]) return SendClientMessage(playerid, -1, "{00FF80}No puedes liberar una propiedad cuando tu banda está en combate."); 
				
				PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] = info[1];
				ShowDialog(playerid, DIALOG_CREW_LEAVE_PROPERTY);
			}
			else ShowPlayerMessage(playerid, "No estás en el lugar adecuado.", 3);
		}
		else ShowPlayerMessage(playerid, "No estás en el lugar adecuado.", 3);
	}
	else ShowPlayerMessage(playerid, "No estás en el lugar adecuado.", 3);
	return 1;
}

CMD:echar(playerid, params[])
{
	if(sscanf(params, "u", params[0])) return SendClientMessage(playerid, -1, "Error: {58ACFA}/echar {FFFFFF}[PlayerID/Nombre]");
	if(!IsPlayerConnected(params[0])) return SendClientMessage(playerid, -1, "{00FF80}El jugador no está conectado.");
	if(playerid == params[0]) return SendClientMessage(playerid, -1, "{00FF80}No te eches a ti mismo.");
	
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_OWN_PROPERTY)
	{
		if( CHARACTER_INFO[params[0]][ch_STATE] == ROLEPLAY_STATE_GUEST_PROPERTY && CHARACTER_INFO[params[0]][ch_INTERIOR_EXTRA] == CHARACTER_INFO[playerid][ch_INTERIOR_EXTRA])
		{		
			new index = GetPropertyIndexByID(CHARACTER_INFO[playerid][ch_INTERIOR_EXTRA]);
			if(index == -1) return SendClientMessage(playerid, -1, "BUG: CMD /ECHAR, Tome captura y contacte con administrador.");
				
			CHARACTER_INFO[params[0]][ch_STATE] = ROLEPLAY_STATE_NORMAL;
			CHARACTER_INFO[params[0]][ch_INTERIOR_EXTRA] = 0;
			PLAYER_TEMP[params[0]][pt_PROPERTY_INDEX] = -1;
			SetPlayerPosEx(params[0], PROPERTY_INFO[ index ][property_EXT_X], PROPERTY_INFO[ index ][property_EXT_Y], PROPERTY_INFO[ index ][property_EXT_Z], PROPERTY_INFO[ index ][property_EXT_ANGLE], PROPERTY_INFO[ index ][property_EXT_INTERIOR], 0, false /*PROPERTY_INFO[ index ][property_EXT_FREEZE]*/, false);
			StopAudioStreamForPlayer(params[0]);
			FreezePlayer(params[0]);
			
			SendClientMessageEx(params[0], -1, "{bad2d8}%s {FFFFFF}te ha echado de su propiedad.", PLAYER_TEMP[playerid][pt_RP_NAME]);
			SendClientMessageEx(playerid, -1, "{E6F8E0}Has echado a {bad2d8}%s {E6F8E0}de tu propiedad.", PLAYER_TEMP[params[0]][pt_RP_NAME]);
		}
		else SendClientMessage(playerid, -1, "{00FF80}Este jugador no está en tu propiedad.");
		return 1;
	}

	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		new vehicleid = GetPlayerVehicleID(playerid);
		
		if(!PLAYER_VEHICLES[vehicleid][player_vehicle_VALID]) return SendClientMessage(playerid, -1, "{00FF80}Este no es tú vehículo.");
		if(PLAYER_VEHICLES[vehicleid][player_vehicle_OWNER_ID] != ACCOUNT_INFO[playerid][ac_ID]) return SendClientMessage(playerid, -1, "{00FF80}Este no es tú vehículo.");
		if(GetPlayerVehicleID(params[0]) != vehicleid) return SendClientMessage(playerid, -1, "{00FF80}Este jugador no está en tu vehículo.");
		
		RemovePlayerFromVehicle(params[0]);
		
		new action[64];
		format(action, sizeof action, "ha echado a %s de su vehículo.", PLAYER_TEMP[ params[0] ][pt_RP_NAME]);
		Auto_SendPlayerAction(playerid, action);
		return 1;
	}
	
	SendClientMessage(playerid, -1, "{00FF80}No estás en tu propiedad o en tu vehículo.");
	return 1;
}

CMD:tarifa(playerid, params[])
{
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, -1, "{00FF80}No estás conduciendo.");
	if(!PLAYER_WORKS[playerid][WORK_TAXI]) return SendClientMessage(playerid, -1, "{00FF80}No eres taxista.");
	if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_TAXI) return SendClientMessage(playerid, -1, "{00FF80}No estás de servicio como taxista.");
	
	new vehicleid = GetPlayerVehicleID(playerid);
	if(TAXI_METER_VEHICLE[vehicleid][veh_taxi_meter_ENABLED]) return SendClientMessage(playerid, -1, "{00FF80}Solo puedes cambiar la tarifa cuando no haya ningún pasajero.");
	
	if(sscanf(params, "d", params[0])) return SendClientMessage(playerid, -1, "Error: {58ACFA}/tarifa {FFFFFF}[0-100]");
	if(params[0] < 0 || params[0] > 100) return SendClientMessage(playerid, -1, "Error: {58ACFA}/tarifa {FFFFFF}[0-100]");
	
	TAXI_METER_VEHICLE[vehicleid][veh_taxi_meter_PRICE] = params[0];
	Auto_SendPlayerAction(playerid, "ajusta el taxímetro.");
	UpdatePlayerTaxiMeterTextdraws(playerid);
	return 1;
}

CMD:cargarcamion(playerid, params[])
{
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, -1, "{00FF80}No estás conduciendo.");
	if(!PLAYER_WORKS[playerid][WORK_TRUCK]) return SendClientMessage(playerid, -1, "{00FF80}No eres camionero.");
	if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_TRUCK) return SendClientMessage(playerid, -1, "{00FF80}No estás de servicio como camionero.");
	
	new vehicleid = GetPlayerVehicleID(playerid);
	if(!WORK_VEHICLES[vehicleid][work_vehicle_VALID]) return SendClientMessage(playerid, -1, "{00FF80}No estás en un camión.");
	if(WORK_VEHICLES[vehicleid][work_vehicle_WORK] != WORK_TRUCK) return SendClientMessage(playerid, -1, "{00FF80}No estás en un camión.");

	for(new i = 0; i != sizeof LoadTrucksPoints; i ++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 3.0, LoadTrucksPoints[i][0], LoadTrucksPoints[i][1], LoadTrucksPoints[i][2]))
		{
			new Float:angle;
			GetVehicleZAngle(vehicleid, angle);
			if(angle > 180.0) angle -= 360.0;

			if(angle > (LoadTrucksPoints[i][3] - 15.0) && angle < (LoadTrucksPoints[i][3] + 15.0))
			{	
				if(TRUCK_VEHICLE[vehicleid][truck_vehicle_LOADED]) return SendClientMessage(playerid, -1, "{00FF80}El camión ya está cargado.");
				if(TRUCK_VEHICLE[vehicleid][truck_vehicle_LOADING]) return SendClientMessage(playerid, -1, "{00FF80}El camión ya se está cargando.");
	
				TRUCK_VEHICLE[vehicleid][truck_vehicle_LOADING] = true;
				TRUCK_VEHICLE[vehicleid][truck_vehicle_DRIVER_USER_ID] = ACCOUNT_INFO[playerid][ac_ID];
				
				SetVehicleVelocity(vehicleid, 0.0, 0.0, 0.0);
				
				GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE] = 0;
				UpdateVehicleParams(vehicleid);
				
				ShowDialog(playerid, DIALOG_SELECT_TRUCK_TYPE);
			}
			else SendClientMessage(playerid, -1, "{00FF80}El camión no está correctamente colocado para cargarlo.");
			return 1;
		}
	}
	SendClientMessage(playerid, -1, "{E6F8E0}Para cargar el camión colocate en cualquier punto de carga.");
	return 1;
}

CMD:gasolina(playerid, params[])
{
	if(GetPlayerVirtualWorld(playerid) != 0) return ShowPlayerMessage(playerid, "No estás en el lugar adecuado.", 3);
	if(GetPlayerInterior(playerid) != 0) return ShowPlayerMessage(playerid, "No estás en el lugar adecuado.", 3);
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, 0xA9F5A9AA, "No estás en nigún vehículo.");
	
	new vehicleid = GetPlayerVehicleID(playerid), modelid = GetVehicleModel(vehicleid);
	if(!VEHICLE_INFO[modelid - 400][vehicle_info_VALID]) return SendClientMessage(playerid, 0xA9F5A9AA, "Error: No puedes repostar este vehículo.");
	
	new fuel_station = -1;
	for(new i = 0; i < sizeof Fuel_Stations; i++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 5.0, Fuel_Stations[i][0], Fuel_Stations[i][1], Fuel_Stations[i][2]))
		{
			fuel_station = i;
			break;
		}
	}
	if(fuel_station == -1) return ShowPlayerMessage(playerid, "No estás en el lugar adecuado.", 3);
	
	if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE])
	{
		SendClientMessage(playerid, -1, "{00FF80}Deten primero el motor del vehículo.");
		return 1;
	}
	
	if(!sscanf(params, "d", params[0]))
	{
		new Float:ammount = float(params[0]);
		if(ammount < 0.0) return SendClientMessage(playerid, -1, "Error: {58ACFA}/gasolina {FFFFFF}[litros / lleno]");
		if(ammount + GLOBAL_VEHICLES[vehicleid][gb_vehicle_GAS] > GLOBAL_VEHICLES[vehicleid][gb_vehicle_MAX_GAS]) ammount = GLOBAL_VEHICLES[vehicleid][gb_vehicle_MAX_GAS] - GLOBAL_VEHICLES[vehicleid][gb_vehicle_GAS];
		
		//new price = floatround( floatmul(ammount, 9.0) );
		new price;
		price = (params[0] * 50);
		printf("price %d",price);
		if(CHARACTER_INFO[playerid][ch_CASH] >= price)
		{
			if(REPOSTANDO_VEHICULO[playerid]==true) return MensajesAyuda(playerid,"Espera a que se reposte el vehiculo");
			PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][textdraw_enciendomoto][3], "Repostando..");
			REPOSTANDO_VEHICULO_STATUS[playerid]=0;
			REPOSTANDO_VEHICULO[playerid]=true;
			REPOSTANDO_VEHICULO_OPTION[playerid] = 1;
			KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][27]);
			PLAYER_TEMP[playerid][pt_TIMERS][27] = SetTimerEx("RepostarVehiculo",1000,true,"iiii",playerid,vehicleid,ammount,price);
		}
		else
		{
			PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
			SendClientMessageEx(playerid, -1, "{E6F8E0}No tienes dinero suficiente, te faltan {FF6633}%s$ {E6F8E0}para poder repostar {588dc9}%.1f.", number_format_thousand(price - CHARACTER_INFO[playerid][ch_CASH]), ammount);
		}
		return 1;
	}
	
	new text[24];
	if(!sscanf(params, "s[24]", text))
	{
		if(!strcmp(text, "lleno", true))
		{
			new Float:ammount = floatsub(GLOBAL_VEHICLES[vehicleid][gb_vehicle_MAX_GAS], GLOBAL_VEHICLES[vehicleid][gb_vehicle_GAS]);

			new price;// = floatround( floatmul(ammount, 9.0) );
			price = (floatround(GLOBAL_VEHICLES[vehicleid][gb_vehicle_MAX_GAS]) * 50);
			printf("price %d",price);
			if(CHARACTER_INFO[playerid][ch_CASH] >= price)
			{
				if(REPOSTANDO_VEHICULO[playerid]==true) return MensajesAyuda(playerid,"Espera a que se reposte el vehiculo");
				PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][textdraw_enciendomoto][3], "Repostando..");
				REPOSTANDO_VEHICULO_STATUS[playerid]=0;
				REPOSTANDO_VEHICULO[playerid]=true;
				REPOSTANDO_VEHICULO_OPTION[playerid] = 2;
				KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][27]);
				PLAYER_TEMP[playerid][pt_TIMERS][27] = SetTimerEx("RepostarVehiculo",1000,true,"iiii",playerid,vehicleid,ammount,price);
			}
			else
			{
				PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
				SendClientMessageEx(playerid, -1, "{E6F8E0}No tienes dinero suficiente, te faltan {FF6633}%s$ {E6F8E0}para poder repostar {588dc9}%.1f.", number_format_thousand(price - CHARACTER_INFO[playerid][ch_CASH]), ammount);
			}
		}
		else SendClientMessage(playerid, -1, "Error: {58ACFA}/gasolina {FFFFFF}[litros / lleno]");
		return 1;
	}
	
	SendClientMessage(playerid, -1, "Error: {58ACFA}/gasolina {FFFFFF}[litros / lleno]");
	return 1;
}

funcion RepostarVehiculo(playerid,vehicleid,Float:ammount,price)
{
	REPOSTANDO_VEHICULO_STATUS[playerid]++;
	if(REPOSTANDO_VEHICULO_STATUS[playerid] == 1)
	{
		for(new i=0; i <= 3; i++) PlayerTextDrawShow(playerid,PlayerTextdraws[playerid][textdraw_enciendomoto][i]);
	}

	if(REPOSTANDO_VEHICULO_STATUS[playerid] != 5)
	{
		PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_enciendomoto][2], floatadd(280.629760, floatdiv(float(REPOSTANDO_VEHICULO_STATUS[playerid]), 0.05947339)), 0.000000);
		PlayerTextDrawShow(playerid,PlayerTextdraws[playerid][textdraw_enciendomoto][2]);
		if(REPOSTANDO_VEHICULO_STATUS[playerid] >= 5)
		{
			switch(REPOSTANDO_VEHICULO_OPTION[playerid])
			{
				case 1:
				{
					GivePlayerCash(playerid, -price);
					GLOBAL_VEHICLES[vehicleid][gb_vehicle_GAS] += ammount;
					
					if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_GAS] > GLOBAL_VEHICLES[vehicleid][gb_vehicle_MAX_GAS])
					{
						GLOBAL_VEHICLES[vehicleid][gb_vehicle_GAS] = GLOBAL_VEHICLES[vehicleid][gb_vehicle_MAX_GAS];
					}

					PlayerPlaySoundEx(playerid, 1058, 0.0, 0.0, 0.0);
					SendClientMessageEx(playerid, -1, "Cantidad: {ede890}%.1f Litros {FFFFFF}Precio: {ede890}%s$.", ammount, number_format_thousand(price));
					Auto_SendPlayerAction(playerid, "ha repostado el vehículo.");
				}
				case 2:
				{
					GivePlayerCash(playerid, -price);
					GLOBAL_VEHICLES[vehicleid][gb_vehicle_GAS] = GLOBAL_VEHICLES[vehicleid][gb_vehicle_MAX_GAS];
					
					PlayerPlaySoundEx(playerid, 1058, 0.0, 0.0, 0.0);
					SendClientMessageEx(playerid, -1, "Cantidad: {ede890}%.1f Litros {FFFFFF}Precio: {ede890}%s$.", ammount, number_format_thousand(price));
					Auto_SendPlayerAction(playerid, "ha repostado el vehículo.");
				}
			}
			KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][27]);
			REPOSTANDO_VEHICULO[playerid]=false;
			PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][textdraw_enciendomoto][3], "Repostado");
			PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_enciendomoto][2], floatadd(280.629760, floatdiv(5, 0.05947339)), 0.000000);
			PlayerTextDrawShow(playerid,PlayerTextdraws[playerid][textdraw_enciendomoto][2]);
			PlayerTextDrawShow(playerid,PlayerTextdraws[playerid][textdraw_enciendomoto][3]);
			PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][textdraw_enciendomoto][2], 0x00CB19FF);
			PlayerTextDrawShow(playerid,PlayerTextdraws[playerid][textdraw_enciendomoto][2]);
			SetTimerEx("HideRepostandoVehiculo",5000, false,"d", playerid);
		}
	}
	return 1;
}


funcion HideRepostandoVehiculo(playerid)
{
	REPOSTANDO_VEHICULO_STATUS[playerid]=0;
	REPOSTANDO_VEHICULO[playerid]=false;
	for(new i=0; i <= 3; i++) PlayerTextDrawHide(playerid,PlayerTextdraws[playerid][textdraw_enciendomoto][i]);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][textdraw_enciendomoto][2], -1);
	PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][textdraw_enciendomoto][3], "Encendiendo..");
	return 1;
}

CMD:bidon(playerid, params[])
{
	if(GetPlayerVirtualWorld(playerid) != 0) return ShowPlayerMessage(playerid, "No estás en el lugar adecuado.", 3);
	if(GetPlayerInterior(playerid) != 0) return ShowPlayerMessage(playerid, "No estás en el lugar adecuado.", 3);
	
	new fuel_station = -1;
	for(new i = 0; i < sizeof Fuel_Stations; i++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 5.0, Fuel_Stations[i][0], Fuel_Stations[i][1], Fuel_Stations[i][2]))
		{
			fuel_station = i;
			break;
		}
	}
	if(fuel_station == -1) return ShowPlayerMessage(playerid, "No estás en el lugar adecuado.", 3);
	
	if(!PLAYER_MISC[playerid][MISC_FUEL_DRUM])
	{
		if(CHARACTER_INFO[playerid][ch_CASH] >= 250)
		{
			GivePlayerCash(playerid, -250);
			PLAYER_MISC[playerid][MISC_FUEL_DRUM] = 20;
			SendClientMessage(playerid, -1, "{E6F8E0}Has comprado un bidón de gasolina de 20 litros por 250$, usa {58ACFA}/vertir {E6F8E0}para repostar un vehículo.");
		}
		else SendClientMessage(playerid, -1, "{00FF80}No tienes suficiente dinero para comprar el bidón.");
	}
	else
	{
		if(PLAYER_MISC[playerid][MISC_FUEL_DRUM] == 20) return SendClientMessage(playerid, -1, "{00FF80}Tu bidón de gasolina está lleno.");
		
		new ammount = (20 - PLAYER_MISC[playerid][MISC_FUEL_DRUM]);
		new price = (13 * ammount);
		
		if(CHARACTER_INFO[playerid][ch_CASH] >= price)
		{
			GivePlayerCash(playerid, -price);
			PLAYER_MISC[playerid][MISC_FUEL_DRUM] += ammount;
			SendClientMessageEx(playerid, -1, "{E6F8E0}Has llenado tu bidón de gasolina con 20 litros por %d$, usa {58ACFA}/vertir {E6F8E0}para repostar un vehículo.", price);
		}
		else SendClientMessage(playerid, -1, "{00FF80}No tienes suficiente dinero para comprar el bidón.");
	}
	return 1;
}

CMD:vertir(playerid, params[])
{	
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendClientMessage(playerid, -1, "{00FF80}Tienes que estar fuera del vehículo para vertir el bidón.");
	
	new vehicleid = GetPlayerCameraTargetVehicle(playerid);
	if(vehicleid == INVALID_VEHICLE_ID) return SendClientMessage(playerid, -1, "{00FF80}No estás cerca de ningún vehículo.");
	
	if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE])
	{
		SendClientMessage(playerid, -1, "{00FF80}Deten primero el motor del vehículo.");
		return 1;
	}
	
	if(sscanf(params, "d", params[0])) return SendClientMessage(playerid, -1, "Error: {58ACFA}/vetir {FFFFFF}[Cantidad de litros]");
	if(params[0] <= 0) return SendClientMessage(playerid, -1, "{00FF80}Cantidad de litros no válida.");
	if(params[0] > PLAYER_MISC[playerid][MISC_FUEL_DRUM]) return SendClientMessageEx(playerid, -1, "{00FF80}Solo tienes %d.0 litros en el bidón.", PLAYER_MISC[playerid][MISC_FUEL_DRUM]);
	
	new Float:ammount = float(params[0]);
	if(ammount + GLOBAL_VEHICLES[vehicleid][gb_vehicle_GAS] > GLOBAL_VEHICLES[vehicleid][gb_vehicle_MAX_GAS]) ammount = GLOBAL_VEHICLES[vehicleid][gb_vehicle_MAX_GAS] - GLOBAL_VEHICLES[vehicleid][gb_vehicle_GAS];
	
	PLAYER_MISC[playerid][MISC_FUEL_DRUM] -= floatround(ammount);
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_GAS] += ammount;
	
	SendClientMessageEx(playerid, -1, "{E6F8E0}Has vertido %.1f litros del bidón, te quedan %d.0 litros.", ammount, PLAYER_MISC[playerid][MISC_FUEL_DRUM]);
	Auto_SendPlayerAction(playerid, "ha repostado el vehículo.");
	return 1;
}

SendPlayerAction(playerid, action[])
{
	new str_text[190];
	format(str_text, sizeof str_text, "* %s %s", PLAYER_TEMP[playerid][pt_RP_NAME], action);
	ProxDetector(playerid, 15.0, str_text, 0xC2A2DAFF, 0xC2A2DAFF, 0xC2A2DAFF, 0xC2A2DAFF, 0xC2A2DAFF, 85);
	return 1;
}

Auto_SendPlayerAction(playerid, action[])
{
	new str_text[145];
	format(str_text, 145, "* %s %s", PLAYER_TEMP[playerid][pt_RP_NAME], action);
	ProxDetector(playerid, 15.0, str_text, 0xC2A2DAFF, 0xC2A2DAFF, 0xC2A2DAFF, 0xC2A2DAFF, 0xC2A2DAFF);
	return 1;
}

#define DEFAULT_DIALOG_CAPTION	SERVER_NAME
//k showdialog
ShowDialog(playerid, dialogid)
{
	PLAYER_TEMP[playerid][pt_PLAYER_WAITING_MP3_HTTP] = false;
	PLAYER_TEMP[playerid][pt_DIALOG_RESPONDED] = false;
	
	switch(dialogid)
	{
		case DIALOG_REGISTER:
		{
			new dialog[150];
			format(dialog, sizeof dialog, "Esta cuenta no está registrada en el servidor.\nIngresa la contraseña en el recuadro de abajo.\n\nLa contraseña debe contener entre %d-%d caracteres.", MIN_PASS_LENGTH, MAX_PASS_LENGTH);
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_PASSWORD, "Registrarse", dialog, "Seguir", "Cerrar");
			return 1;
		}
		case DIALOG_LOGIN: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_PASSWORD, "Ingresar", "Bienvenido de nuevo.\nIngrese su contraseña para acceder.", "Seguir", "Cerrar");
		case DIALOG_REGISTER_EMAIL: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Correo electrónico", "Ingresa una dirección de correlo electrónico válida.\n\nEs importante que tengas acceso al correo ya que será la única manera de recuperar tu contraseña.\n\nTranquilo, no recibirás ningún tipo de SPAM ni suscripciones.\n\nEjemplo: Correo@formato.dominio", "Seguir", "Cerrar");
		case DIALOG_FOOD_PIZZA: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, ""DEFAULT_DIALOG_CAPTION" - Comida rápida", DIALOG_FOOD_PIZZA_String, "Pedir", "Salir");
		case DIALOG_FOOD_CLUCKIN: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, ""DEFAULT_DIALOG_CAPTION" - Comida rápida", DIALOG_FOOD_CLUCKIN_String, "Pedir", "Salir");
		case DIALOG_FOOD_BURGER: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, ""DEFAULT_DIALOG_CAPTION" - Comida rápida", DIALOG_FOOD_BURGER_String, "Pedir", "Salir");
		case DIALOG_PLAYER_TOYS:
		{
			new dialog[96 * (MAX_PLAYER_ATTACHED_OBJECTS + 2)], line_str[64];
			format(dialog, sizeof dialog, "{E6F8E0}Accesorio\t{90C3D4}Colocado\n");
			for(new i; i != MAX_PLAYER_ATTACHED_OBJECTS; i ++)
			{
				if(ACCOUNT_INFO[playerid][ac_SU])
				{
					if(PLAYER_TOYS[playerid][i][player_toy_VALID])
					{
						if(PLAYER_TOYS[playerid][i][player_toy_ATTACHED]) format(line_str, sizeof line_str, "{E6F8E0}%d. %s\t{90C3D4}Sí\n", i + 1, PLAYER_TOYS[playerid][i][player_toy_NAME]);
						else format(line_str, sizeof line_str, "{E6F8E0}%d. %s\t{90C3D4}No\n", i + 1, PLAYER_TOYS[playerid][i][player_toy_NAME]);
					}
					else format(line_str, sizeof line_str, "{666666}%d. Slot vacío\n", i + 1);
				}
				else
				{
					if(i >= MAX_NU_TOYS)
					{
						if(PLAYER_TOYS[playerid][i][player_toy_VALID]) format(line_str, sizeof line_str, "{666666}%d. %s\t{90C3D4}No\n", i + 1, PLAYER_TOYS[playerid][i][player_toy_NAME]);
						else format(line_str, sizeof line_str, "{666666}%d. Slot vacío\n", i + 1);
					}
					else
					{
						if(PLAYER_TOYS[playerid][i][player_toy_VALID])
						{
							if(PLAYER_TOYS[playerid][i][player_toy_ATTACHED]) format(line_str, sizeof line_str, "{E6F8E0}%d. %s\t{90C3D4}Sí\n", i + 1, PLAYER_TOYS[playerid][i][player_toy_NAME]);
							else format(line_str, sizeof line_str, "{E6F8E0}%d. %s\t{90C3D4}No\n", i + 1, PLAYER_TOYS[playerid][i][player_toy_NAME]);
						}
						else format(line_str, sizeof line_str, "{666666}%d. Slot vacío\n", i + 1);
					}
				}
				strcat(dialog, line_str);
			}
			strcat(dialog, "{c4290d}- Eliminar todo\n");
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, ""DEFAULT_DIALOG_CAPTION" - Mis accesorios", dialog, "Seguir", "Cerrar");
			return 1;
		}
		case DIALOG_PLAYER_TOY_MENU:
		{
			if(!PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_VALID])
			{
				SendClientMessage(playerid, -1, "{E6F8E0}Este slot está vacío, puedes comprar accesorios en cualquier tienda de ropa.");
				return 1;
			}
			
			new caption[48];
			format(caption, sizeof caption, "{E6F8E0}Accesorio '%s'", PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_NAME]);
			
			new dialog[256];
			if(PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ATTACHED]) format(dialog, sizeof dialog, "{E6F8E0}Guardar este accesorio\n{E6F8E0}Cambiar el nombre del accesorio\n{E6F8E0}Configurar el accesorio\n{E6F8E0}Color primario\n{E6F8E0}Color secundario\n{E6F8E0}Eliminar este accesorio");
			else
			{
				if(PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_BONE] == -1)
				{
					SendClientMessage(playerid, -1, "{E6F8E0}Este accesorio es nuevo y aún no ha sido configurado, configuralo desde 'Configurar el accesorio'.");
					format(dialog, sizeof dialog, "{00FF80}Colocarte el accesorio\n{E6F8E0}Cambiar el nombre del accesorio\n{E6F8E0}Configurar el accesorio\n{E6F8E0}Color primario\n{E6F8E0}Color secundario\n{E6F8E0}Eliminar este accesorio");
				}
				else format(dialog, sizeof dialog, "{E6F8E0}Colocarte el accesorio\n{E6F8E0}Cambiar el nombre del accesorio\n{E6F8E0}Configurar el accesorio\n{E6F8E0}Color primario\n{E6F8E0}Color secundario\n{E6F8E0}Eliminar este accesorio");
			}
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, dialog, "Seguir", "Atrás");
			return 1;
		}
		case DIALOG_PLAYER_TOY_EDIT_NAME:
		{		
			new dialog[145];
			format(dialog, sizeof dialog, "Nombre actual: \"%s\"\nIndica el nuevo nombre:", PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_NAME]);
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "{E6F8E0}Accesorio - Modificar nombre", dialog, "Seguir", "Atrás");
			return 1;
		}
		case DIALOG_PLAYER_TOY_CONFIRMDELETE:
		{
			new dialog[145];
			format(dialog, sizeof dialog, "¿Estás seguro que quieres borrar el siguiente accesorio?\n\t\"%s\"", PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_NAME]);
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "{E6F8E0}Accesorio - Eliminar accesorio", dialog, "Eliminar", "Atrás");
			return 1;
		}
		case DIALOG_PLAYER_TOY_SELECT_BONE:
		{
			SendClientMessage(playerid, -1, "{E6F8E0}Selecciona en que parte del cuerpo quieres colocar este accesorio.");
			
			new caption[48];
			format(caption, sizeof caption, "{E6F8E0}Accesorio '%s'", PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_NAME]);
			
			new dialog[45 * sizeof Toys_Bones], line_str[45];
			for(new i = 0; i != sizeof Toys_Bones; i ++)
			{
				format(line_str, sizeof(line_str), "{90C3D4}%d. %s\n", i + 1, Toys_Bones[i]);
				strcat(dialog, line_str);
			}
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, dialog, "Seguir", "Atrás");
			return 1;
		}
		case DIALOG_PLAYER_TOY_EDIT_BONE:
		{
			new caption[48];
			format(caption, sizeof caption, "{E6F8E0}Accesorio '%s'", PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_NAME]);
			
			new dialog[145];
			format(dialog, sizeof(dialog), "¿Quieres cambiar la parte del cuerpo donde se coloca este accesorio?\nActualmente está colocado en: %s", Toys_Bones[ PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_BONE] - 1 ]);
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, caption, dialog, "Sí", "No");
			return 1;
		}
		case DIALOG_PLAYER_TOY_COLOR_1:
		{
			SendClientMessage(playerid, -1, "Selecciona el color 0 para poner el color original del accesorio.");
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "Selecciona color", DIALOG_CREATE_CREW_COLOR_String, "Continuar", "Atrás");
			return 1;
		}
		case DIALOG_PLAYER_TOY_COLOR_2:
		{
			SendClientMessage(playerid, -1, "Selecciona el color 0 para poner el color original del accesorio.");
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "Selecciona color", DIALOG_CREATE_CREW_COLOR_String, "Continuar", "Atrás");
			return 1;
		}
		case DIALOG_PLAYER_TOY_DELETE_ALL: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Accesorios - Eliminar todo", "¿Está seguro de que quiere eliminar todos sus accesorios?\nEsta opción no se puede deshacer.", "Eliminar", "Atrás");	
		case DIALOG_BANK:
		{
			if(BANK_ACCOUNT[playerid][bank_account_ID] == 0) return SendClientMessage(playerid, -1, "{00FF80}No tienes cuenta bancaria.");
			
			new caption[80];
			format(caption, sizeof caption, "Mi cuenta bancaria: {90C3D4}%s {FFFFFF}- Balance actual: {90C3D4}%s$", number_format_thousand(BANK_ACCOUNT[playerid][bank_account_ID]), number_format_thousand(BANK_ACCOUNT[playerid][bank_account_BALANCE]));
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, 
				"{E6F8E0}1. Retirar dinero\n{E6F8E0}2. Depositar dinero\n{E6F8E0}3. Transferir dinero\n{E6F8E0}4. Últimas transacciones", 
			"Seguir", "Cerrar");
			return 1;
		}
		case DIALOG_CREATE_BANK_ACCOUNT:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, ""DEFAULT_DIALOG_CAPTION" - Crear cuenta bancaria", 
				"{E6F8E0}Bienvenido, actualmente no tienes una cuenta bancaria.\n\nPara disfrutar de los beneficios de una cuenta bancaria\npuedes crearla ahora mismo con un depósito minimo de 500$.", 
			"Crear", "Salir");
			return 1;
		}
		case DIALOG_BANK_WITHDRAW:
		{
			new dialog[100];
			format(dialog, sizeof dialog, "{E6F8E0}Balance actual: {90C3D4}%s$\n{E6F8E0}¿Cuánto quiere retirar?", number_format_thousand(BANK_ACCOUNT[playerid][bank_account_BALANCE]));
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Banco - Retirar", dialog, "Seguir", "Atrás");
			return 1;
		}
		case DIALOG_BANK_DEPOSIT:
		{
			new dialog[100];
			format(dialog, sizeof dialog, "{E6F8E0}Dinero actual: {90C3D4}%s$\n{E6F8E0}¿Cuánto quiere depositar?", number_format_thousand(CHARACTER_INFO[playerid][ch_CASH]));
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Banco - Depositar", dialog, "Seguir", "Atrás");
			return 1;
		}
		case DIALOG_BANK_TRANSFER: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Banco - Transferir", "Indica a que número de cuenta quiere transferir dinero.", "Seguir", "Atrás");
		case DIALOG_BANK_TRANSFER_SEND:
		{
			new dialog[170];
			format(dialog, sizeof dialog, "{E6F8E0}Transferir a cuenta: {90C3D4}%s\n{E6F8E0}Balance actual: {90C3D4}%s$\n\n{E6F8E0}¿Cuánto quiere transferir?", number_format_thousand(PLAYER_TEMP[playerid][pt_SELECT_BANK_TRANSFER_ACCOUNT]), number_format_thousand(BANK_ACCOUNT[playerid][bank_account_BALANCE]));
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Banco - Transferir", dialog, "Seguir", "Atrás");
			return 1;
		}
		case DIALOG_BANK_TRANSACTIONS:
		{
			new dialog[2675];
			format(dialog, sizeof dialog, "{E6F8E0}Fecha\t{90C3D4}Concepto\t{E6F8E0}Importe\n");

			new DBResult:Result, transactions, DB_Query[140];
			format(DB_Query, sizeof DB_Query, "SELECT * FROM `BANK_TRANSACTIONS` WHERE `ID_ACCOUNT` = '%d' ORDER BY `DATE` DESC LIMIT %d;", BANK_ACCOUNT[playerid][bank_account_ID], MAX_BANK_TRANSACTIONS_DIALOG);
			Result = db_query(Database, DB_Query);

			if(db_num_rows(Result) == 0) strcat(dialog, "{E6F8E0}No hay transacciones en tu cuenta.");
			else
			{
				new line_str[125];
				for(new i; i < db_num_rows(Result); i++ )
				{
					new trasaction_type, ammount, extra, date[24];
					trasaction_type = db_get_field_assoc_int(Result, "TRANSACTION_TYPE");
					ammount = db_get_field_assoc_int(Result, "AMMOUNT");
					extra = db_get_field_assoc_int(Result, "EXTRA");
					db_get_field_assoc(Result, "DATE", date, 24);
					
					switch(trasaction_type)
					{
						case BANK_TRANSACTION_WITHDRAW:
						{
							format(line_str, sizeof line_str, "{E6F8E0}%s\t{90C3D4}RETIRADA EFECTIVO\t{E6F8E0}-%s$\n", date, number_format_thousand(ammount));
							strcat(dialog, line_str);
						}
						case BANK_TRANSACTION_DEPOSIT:
						{
							format(line_str, sizeof line_str, "{E6F8E0}%s\t{90C3D4}INGRESO EN EFECTIVO\t{E6F8E0}%s$\n", date, number_format_thousand(ammount));
							strcat(dialog, line_str);
						}
						case BANK_TRANSACTION_TRANSFER_SENT:
						{
							format(line_str, sizeof line_str, "{E6F8E0}%s\t{90C3D4}TRANSFERENCIA A LA CUENTA %d\t{E6F8E0}-%s$\n", date, extra, number_format_thousand(ammount));
							strcat(dialog, line_str);
						}
						case BANK_TRANSACTION_TRANSFER_RECE:
						{
							format(line_str, sizeof line_str, "{E6F8E0}%s\t{90C3D4}TRANSFERENCIA DE LA CUENTA %d\t{E6F8E0}%s$\n", date, extra, number_format_thousand(ammount));
							strcat(dialog, line_str);
						}
						case BANK_TRANSACTION_CREATE_ACCOUNT:
						{
							format(line_str, sizeof line_str, "{E6F8E0}%s\t{90C3D4}CREACION DE LA CUENTA\t{E6F8E0}%s$\n", date, number_format_thousand(ammount));
							strcat(dialog, line_str);
						}
						case BANK_TRANSACTION_BUY_PROPERTY:
						{
							format(line_str, sizeof line_str, "{E6F8E0}%s\t{90C3D4}PROPIEDAD COMPRADA\t{E6F8E0}-%s$\n", date, number_format_thousand(ammount));
							strcat(dialog, line_str);
						}
						case BANK_TRANSACTION_SOLD_PROPERTY:
						{
							format(line_str, sizeof line_str, "{E6F8E0}%s\t{90C3D4}PROPIEDAD VENDIDA\t{E6F8E0}%s$\n", date, number_format_thousand(ammount));
							strcat(dialog, line_str);
						}
						case BANK_TRANSACTION_BUY_VEHICLE:
						{
							format(line_str, sizeof line_str, "{E6F8E0}%s\t{90C3D4}VEHICULO COMPRADO\t{E6F8E0}-%s$\n", date, number_format_thousand(ammount));
							strcat(dialog, line_str);
						}
						case BANK_TRANSACTION_SOLD_VEHICLE:
						{
							format(line_str, sizeof line_str, "{E6F8E0}%s\t{90C3D4}VEHICULO VENDIDO\t{E6F8E0}%s$\n", date, number_format_thousand(ammount));
							strcat(dialog, line_str);
						}
					}
					
					transactions ++;
					db_next_row(Result);
				}
				format(line_str, sizeof line_str, "{E6F8E0}SALDO ACTUAL:\t{d0f441}%s$", number_format_thousand(BANK_ACCOUNT[playerid][bank_account_BALANCE]));
				strcat(dialog, line_str);
			}
			db_free_result(Result);
		
			new caption[40];
			format(caption, sizeof caption, "Banco - Últimas %d transacciones", transactions);
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, caption, dialog, "Salir", "Atrás");
			return 1;
		}
		case DIALOG_247_LIST: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, ""DEFAULT_DIALOG_CAPTION" - 24/7", DIALOG_247_LIST_String, "Seguir", "Cerrar");
		case DIALOG_PLAYER_POCKET:
		{
			new dialog[50 * (MAX_PLAYER_POCKET_OBJECTS + 2)], line_str[50];
			for(new i = 0; i != MAX_PLAYER_POCKET_OBJECTS; i ++)
			{
				if(PLAYER_POCKET[playerid][i][player_pocket_VALID])
				{
					format(line_str, sizeof line_str, "{E6F8E0}%d. %s\n", i + 1, PLAYER_POCKET[playerid][i][player_pocket_object_NAME]);
					strcat(dialog, line_str);
				}
				else
				{
					format(line_str, sizeof line_str, "{666666}%d. Slot vacío\n", i + 1);
					strcat(dialog, line_str);
				}
			}
			strcat(dialog, "{c4290d}- Eliminar todo\n");
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, ""DEFAULT_DIALOG_CAPTION" - Alimentos", dialog, "Seguir", "Cerrar");
			return 1;
		}
		case DIALOG_PLAYER_POCKET_OPTIONS:
		{
			new caption[40];
			format(caption, sizeof caption, "Alimento - %s", PLAYER_POCKET[playerid][PLAYER_TEMP[playerid][pt_POCKET_SLOT_SELECTED]][player_pocket_object_NAME]);
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, "{E6F8E0}1. Consumir\n{E6F8E0}2. Eliminar", "Seguir", "Atrás");
			return 1;
		}
		case DIALOG_PLAYER_POCKET_DELETE_ALL: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Alimentos - Eliminar todo", "¿Está seguro de que quiere eliminar todos sus alimentos?\nEsta opción no se puede deshacer y perderás todos lo que haya.", "Eliminar", "Atrás");	
		case DIALOG_PHONE_PUBLIC:
		{
			new dialog[200];
			format(dialog, sizeof dialog, "{E6F8E0}Llamar");
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "Telefono publico", dialog, "Seguir", "Cerrar");
		}
		case DIALOG_PHONE:
		{
			new caption[50];
			format(caption, sizeof caption, "Mi teléfono - %d", PLAYER_PHONE[playerid][player_phone_NUMBER]);
			
			new dialog[200];
			if(PLAYER_PHONE[playerid][player_phone_STATE] == PHONE_STATE_ON) format(dialog, sizeof dialog, "{E6F8E0}1. Agenda\n{E6F8E0}2. Llamar\n{E6F8E0}3. Enviar mensaje\n{E6F8E0}4. Ver mensajes recibidos\n{E6F8E0}5. Ver mensajes enviados\n{E6F8E0}6. Tienda de compra y venta\n{E6F8E0}7. Apagar teléfono");
			else format(dialog, sizeof dialog, "{E6F8E0}1. Encender teléfono\n{00FF80}2. Agenda\n{00FF80}3. Llamar\n{00FF80}4. Enviar mensaje\n{00FF80}5. Ver mensajes recibidos\n{00FF80}6. Ver mensajes enviados\n{00FF80}7. Tienda de compra y venta");
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, dialog, "Seguir", "Cerrar");
			return 1;
		}
		case DIALOG_PHONE_BOOK:
		{
			for(new i = 0; i != MAX_LISTITEMS; i++ ) PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][i] = -1;
			
			new dialog[80 * (MAX_PHONE_CONTACTS + 3)];
			format(dialog, sizeof dialog, "{E6F8E0}Nombre\t{90C3D4}Número\n");

			new line_str[80], contacts, listitem;
			for(new i = 0; i != MAX_PHONE_CONTACTS; i++ )
			{
				if(!PLAYER_PHONE_BOOK[playerid][i][phone_book_contact_VALID]) continue;
				
				format(line_str, sizeof line_str, "{E6F8E0}%d. %s\t{90C3D4}%d\n", listitem + 1, PLAYER_PHONE_BOOK[playerid][i][phone_book_contact_NAME], PLAYER_PHONE_BOOK[playerid][i][phone_book_contact_PHONE_NUMBER]);
				strcat(dialog, line_str);
				PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = i;
				
				contacts ++; listitem ++;
			}
			if(contacts < MAX_PHONE_CONTACTS)
			{
				PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = MAX_PHONE_CONTACTS + 10;
				strcat(dialog, "{E6F8E0}+ Añadir contacto\n"); listitem ++;
			}
			if(contacts > 0)
			{
				PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = MAX_PHONE_CONTACTS + 20;
				strcat(dialog, "{c4290d}- Eliminar todo\n"); listitem ++;
			}
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "Mi teléfono - Agenda", dialog, "Seguir", "Atrás");		
			return 1;
		}
		case DIALOG_PHONE_BOOK_ADD_NUMBER: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Agenda - Añadir contacto", "Está añadiendo un nuevo contacto en su agenda.\nIndique el número de teléfono del nuevo contacto.", "Seguir", "Atrás");
		case DIALOG_PHONE_BOOK_ADD_NAME: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Agenda - Añadir contacto", "Está añadiendo un nuevo contacto en su agenda.\nIndique el nombre del nuevo contacto.", "Seguir", "Atrás");
		case DIALOG_PHONE_BOOK_OPTIONS:
		{
			new caption[40];
			format(caption, sizeof caption, "Contacto - %s", PLAYER_PHONE_BOOK[playerid][ PLAYER_TEMP[playerid][pt_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_NAME]);
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, "{E6F8E0}1. Llamar\n{E6F8E0}2. Enviar mensaje\n{E6F8E0}3. Cambiar nombre del contacto\n{E6F8E0}4. Eliminar este contacto", "Seguir", "Atrás");			
			return 1;
		}
		case DIALOG_PHONE_BOOK_CHANGE_NAME:
		{
			new caption[40];
			format(caption, sizeof caption, "Contacto - %s", PLAYER_PHONE_BOOK[playerid][ PLAYER_TEMP[playerid][pt_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_NAME]);
			
			new dialog[140];
			format(dialog, sizeof dialog, "Nombre actual: %s\nTeléfono: %d\n\nIndica el nuevo nombre de este contacto.", PLAYER_PHONE_BOOK[playerid][ PLAYER_TEMP[playerid][pt_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_NAME], PLAYER_PHONE_BOOK[playerid][ PLAYER_TEMP[playerid][pt_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_PHONE_NUMBER]);
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, caption, dialog, "Cambiar", "Atrás");	
			return 1;
		}
		case DIALOG_PHONE_BOOK_CONFIRM_DELET:
		{
			new caption[40];
			format(caption, sizeof caption, "Contacto - %s", PLAYER_PHONE_BOOK[playerid][ PLAYER_TEMP[playerid][pt_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_NAME]);
			
			new dialog[140];
			format(dialog, sizeof dialog, "¿Está seguro de que desea eliminar el siguiente contacto?\n\nNombre: %s\nTeléfono: %d", PLAYER_PHONE_BOOK[playerid][ PLAYER_TEMP[playerid][pt_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_NAME], PLAYER_PHONE_BOOK[playerid][ PLAYER_TEMP[playerid][pt_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_PHONE_NUMBER]);
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, caption, dialog, "Eliminar", "Atrás");	
			return 1;
		}
		case DIALOG_PHONE_BOOK_DELETE_ALL: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Agenda - Eliminar todo", "¿Está seguro de que quiere eliminar todos sus contactos?\nEsta opción no se puede deshacer y perderás todos los contactos guardados.", "Eliminar", "Atrás");	
		case DIALOG_PHONE_CALL_NUMBER: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Mi teléfono - Realizar una llamada", "¿A quién quieres llamar?\nIndique el número al que desea llamar.", "Seguir", "Atrás");
		case DIALOG_PHONE_SMS_NUMBER: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Mi teléfono - Enviar mensaje", "¿A quién quieres enviarle el mensaje?\nIndique el número al que desea enviar el mensaje.", "Seguir", "Atrás");
		case DIALOG_PHONE_SMS_MESSAGE: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Mi teléfono - Enviar mensaje", "Escribe el mensaje que quieres enviar\nCaracteres: 1-64.", "Seguir", "Atrás");
		case DIALOG_PHONE_BOOK_SEND_MESSAGE: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Mi teléfono - Enviar mensaje", "Escribe el mensaje que quieres enviar\nCaracteres: 1-64.", "Seguir", "Atrás");
		case DIALOG_PHONE_SENT_MESSAGES:
		{
			new dialog[1600];
			format(dialog, sizeof dialog, "{E6F8E0}Fecha\t{90C3D4}Enviado a\t{E6F8E0}Mensaje\n");

			new DBResult:Result, DB_Query[140], messages;
			format(DB_Query, sizeof DB_Query, "SELECT * FROM `PHONE_MESSAGES` WHERE `FROM` = '%d' ORDER BY `DATE` DESC LIMIT 10;", PLAYER_PHONE[playerid][player_phone_NUMBER]);
			Result = db_query(Database, DB_Query);

			if(db_num_rows(Result) == 0) strcat(dialog, "{E6F8E0}No hay mensajes.");
			else
			{
				new line_str[150];
				for(new i; i < db_num_rows(Result); i++ )
				{
					new date[24], to, message[64];
					to = db_get_field_assoc_int(Result, "TO");
					db_get_field_assoc(Result, "MESSAGE", message, 64);
					db_get_field_assoc(Result, "DATE", date, 24);
					
					format(line_str, sizeof line_str, "{E6F8E0}%s\t{90C3D4}%s\t{E6F8E0}%s\n", date, convertPhoneNumber(playerid, to), message);
					strcat(dialog, line_str);
					
					messages ++;
					db_next_row(Result);
				}
			}
			db_free_result(Result);
			
			new caption[40];
			format(caption, sizeof caption, "Últimos %d mensajes enviados", messages);
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, caption, dialog, "Salir", "Atrás");
			return 1;
		}
		case DIALOG_PHONE_RECEIVED_MESSAGES:
		{
			new dialog[1600];
			format(dialog, sizeof dialog, "{E6F8E0}Fecha\t{90C3D4}Remitente\t{E6F8E0}Mensaje\n");

			new DBResult:Result, DB_Query[140], messages;
			format(DB_Query, sizeof DB_Query, "SELECT * FROM `PHONE_MESSAGES` WHERE `TO` = '%d' ORDER BY `DATE` DESC LIMIT 10;", PLAYER_PHONE[playerid][player_phone_NUMBER]);
			Result = db_query(Database, DB_Query);

			if(db_num_rows(Result) == 0) strcat(dialog, "{E6F8E0}No hay mensajes.");
			else
			{
				new line_str[150];
				for(new i; i < db_num_rows(Result); i++ )
				{
					new date[24], from, message[64];
					from = db_get_field_assoc_int(Result, "FROM");
					db_get_field_assoc(Result, "MESSAGE", message, 64);
					db_get_field_assoc(Result, "DATE", date, 24);
					
					format(line_str, sizeof line_str, "{E6F8E0}%s\t{90C3D4}%s\t{E6F8E0}%s\n", date, convertPhoneNumber(playerid, from), message);
					strcat(dialog, line_str);
					
					messages ++;
					db_next_row(Result);
				}
			}
			db_free_result(Result);
			
			new caption[40];
			format(caption, sizeof caption, "Últimos %d mensajes recibidos", messages);
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, caption, dialog, "Salir", "Atrás");
			return 1;
		}
		case DIALOG_CONFIRM_BUY_PROPERTY:
		{
			new dialog[220];
			
			if(PROPERTY_INFO[PLAYER_TEMP[playerid][pt_BUY_HOUSE_INDEX]][property_EXTRA])
			{
				format(dialog, sizeof dialog, "Coste de la propiedad: %d "SERVER_COIN"\nSeguro: NO\nMonedas "SERVER_COIN" actuales: %d "SERVER_COIN"\nMonedas "SERVER_COIN" tras la compra: %d "SERVER_COIN"\n\n¿De verdad desea comprar esta propiedad?", PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_BUY_HOUSE_INDEX] ][property_EXTRA], ACCOUNT_INFO[playerid][ac_SD], ACCOUNT_INFO[playerid][ac_SD] - PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_BUY_HOUSE_INDEX] ][property_EXTRA]);
			}
			else
			{
				format(dialog, sizeof dialog, "Precio de la propiedad: %s$\nSeguro: %s$\nBalance actual: %s$\nBalance tras la compra: %s$\n\n¿De verdad desea comprar esta propiedad?", number_format_thousand(PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_BUY_HOUSE_INDEX] ][property_PRICE]), number_format_thousand(PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_BUY_HOUSE_INDEX] ][property_PRICE_BASE] / 200), number_format_thousand(BANK_ACCOUNT[playerid][bank_account_BALANCE]), number_format_thousand(BANK_ACCOUNT[playerid][bank_account_BALANCE] - PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_BUY_HOUSE_INDEX] ][property_PRICE]));
			}
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, ""DEFAULT_DIALOG_CAPTION" - Comprar propiedad",  dialog, "Comprar", "Salir");
			return 1;
		}
		case DIALOG_PLAYER_GPS_TURISTA:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "| GPS |",  "Lugares del juego\nTrabajos", "Seguir", "Cancelar");
			return 1;
		}
		case DIALOG_PLAYER_GPS:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "| GPS |",  "Mis Lugares\nMis Propiedades\nMis Vehículos\nLugares del juego\nTrabajos\nMis Negocios\nMAPA", "Seguir", "Cancelar");
			return 1;
		}
		case DIALOG_PLAYER_GPS_PLAYER:
		{
			for(new i = 0; i != MAX_LISTITEMS; i++ ) PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][i] = -1;
			
			new dialog[90 * (MAX_PLAYER_GPS_SAVES + 2)];
			format(dialog, sizeof dialog, "{E6F8E0}Lugar\t{FF846A}Distancia\n");
			
			new line_str[90], sites, listitem;
			for(new i = 0; i != MAX_PLAYER_GPS_SAVES; i++ )
			{
				if(!PLAYER_GPS[playerid][i][player_gps_VALID]) continue;
				
				format(line_str, sizeof line_str, "{E6F8E0}%d. %s\t{90C3D4}%.2f Km\n", listitem + 1, PLAYER_GPS[playerid][listitem][player_gps_NAME], (GetPlayerDistanceFromPoint(playerid, PLAYER_GPS[playerid][listitem][player_gps_X], PLAYER_GPS[playerid][listitem][player_gps_Y], PLAYER_GPS[playerid][listitem][player_gps_Z]) * 0.01));
				strcat(dialog, line_str);
				PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = i;
				
				sites ++; listitem ++;
			}
			if(sites < MAX_PLAYER_GPS_SAVES)
			{
				PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = MAX_PLAYER_GPS_SAVES + 10;
				strcat(dialog, "{E6F8E0}+ Añadir lugar actual\n"); listitem ++;
			}
			if(sites > 0)
			{
				PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = MAX_PLAYER_GPS_SAVES + 20;
				strcat(dialog, "{c4290d}- Eliminar todo\n"); listitem ++;
			}
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "GPS - Mis lugares", dialog, "Seguir", "Atrás");	
			return 1;
		}
		case DIALOG_PLAYER_GPS_PLAYER_ADD:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "GPS - Añadir lugar", "Tu posición actual será guardada en este lugar para ir más tarde.\nIndica el nombre de este lugar para guardarlo.", "Seguir", "Atrás");	
			return 1;
		}
		case DIALOG_PLAYER_GPS_DELETE_ALL: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Mis lugares - Eliminar todo", "¿Está seguro de que quiere eliminar todos sus lugares?\nEsta opción no se puede deshacer y perderás todos los lugares guardados.", "Eliminar", "Atrás");	
		case DIALOG_PLAYER_GPS_PLAYER_OPTION:
		{
			new caption[40];
			format(caption, sizeof caption, "GPS - %s", PLAYER_GPS[playerid][ PLAYER_TEMP[playerid][pt_GPS_PLAYER_SELECTED] ][player_gps_NAME]);
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, "{E6F8E0}1. Marcar coordenadas en el GPS\n{E6F8E0}2. Cambiar nombre de este lugar\n{E6F8E0}3. Eliminar este lugar del GPS", "Seguir", "Atrás");	
			return 1;
		}
		case DIALOG_PLAYER_GPS_CHANGE_NAME:
		{
			new dialog[90];
			format(dialog, sizeof dialog, "Nombre del lugar: %s\nIndica el nuevo nombre para este lugar.", PLAYER_GPS[playerid][ PLAYER_TEMP[playerid][pt_GPS_PLAYER_SELECTED] ][player_gps_NAME]);
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "GPS - Cambiar nombre de un lugar", dialog, "Seguir", "Atrás");	
			return 1;
		}
		case DIALOG_PLAYER_GPS_CONFIRM_DELET:
		{
			new dialog[95];
			format(dialog, sizeof dialog, "Nombre del lugar: %s\n¿Está seguro de que quiere borrarlo del GPS?", PLAYER_GPS[playerid][ PLAYER_TEMP[playerid][pt_GPS_PLAYER_SELECTED] ][player_gps_NAME]);
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "GPS - Eliminar un lugar", dialog, "Eliminar", "Atrás");	
			return 1;
		}
		case DIALOG_PLAYER_GPS_SITES:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "GPS", "Farmacias\nHospitales\nTiendas de Ropa\nTiendas 24/7\nRestaurantes\nBancos\nCajeros\nGasolineras\nConcesionarios (Ventas de vehiculos)\nGobierno de San Andreas\nPolicías\n"SERVER_SHORT_NAME" Tuning Club\nTaller de reparacion", "Seguir", "Atrás");
			return 1;
		}
		case DIALOG_PLAYER_GPS_WORKS:
		{
			for(new i = 0; i != MAX_LISTITEMS; i++ ) PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][i] = -1;
			
			new dialog[85 * (sizeof(work_info) + 1)], listitem;
			format(dialog, sizeof dialog, "Trabajo\tNivel\tDistancia\n");

			for(new i = 1; i != sizeof work_info; i ++)
			{
				if(work_info[i][work_info_TYPE] == WORK_TYPE_FAMILY) continue;
				
				new line_str[85];
				format(line_str, sizeof line_str, "{E6F8E0}%c%s\t{E6F8E0}%d\t{E6F8E0}%.2f Km\n", toupper(work_info[i][work_info_NAME][0]), work_info[i][work_info_NAME][1], work_info[i][work_info_LEVEL], (GetPlayerDistanceFromPoint(playerid, obtain_work_coords[i][obtain_work_MAP_ICON_X], obtain_work_coords[i][obtain_work_MAP_ICON_Y], obtain_work_coords[i][obtain_work_MAP_ICON_Z]) * 0.01));
				strcat(dialog, line_str);
				
				PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = i;
				listitem ++;
			}
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "GPS - Trabajos", dialog, "Seguir", "Atrás");	
			return 1;
		}
		case DIALOG_TRABAJOS_TELEPORTS:
		{
			for(new i = 0; i != MAX_LISTITEMS; i++ ) PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][i] = -1;

			new dialog[85 * (sizeof(work_info) + 1)], listitem;
			format(dialog, sizeof dialog, "Trabajo\tNivel\n");

			for(new i = 1; i != sizeof work_info; i ++)
			{
				new line_str[85];
				format(line_str, sizeof line_str, "{E6F8E0}%c%s (id: %d)\t{E6F8E0}%d\n", toupper(work_info[i][work_info_NAME][0]), work_info[i][work_info_NAME][1], i, work_info[i][work_info_LEVEL]);
				strcat(dialog, line_str);

				PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = i;
				listitem ++;
			}
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "Trabajos", dialog, "Seguir", "Atrás");
			return 1;
		}
		case DIALOG_PLAYER_GPS_SITE_0: //Hospitales
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "GPS - Hospitales", DIALOG_PLAYER_GPS_SITE_0_String, "Seguir", "Atrás");	
			return 1;
		}
		case DIALOG_PLAYER_GPS_SITE_1: //Tiendas de ropa
		{
			for(new i = 0; i != MAX_LISTITEMS; i ++) PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][i] = -1;
			
			new dialog[90 * (MAX_LISTITEMS + 1)];
			format(dialog, sizeof dialog, "Lugar\tDistancia\n");
			
			new line_str[90], sites;
			for(new i = 0; i != sizeof(ENTER_EXIT); i++ )
			{
				if(sites >= MAX_LISTITEMS) break;
				if(ENTER_EXIT[i][ee_INTERIOR_TYPE] != INTERIOR_BINCO && ENTER_EXIT[i][ee_INTERIOR_TYPE] != INTERIOR_SUBURBAN && ENTER_EXIT[i][ee_INTERIOR_TYPE] != INTERIOR_PROLAPS && ENTER_EXIT[i][ee_INTERIOR_TYPE] != INTERIOR_DIDIER_SACHS && ENTER_EXIT[i][ee_INTERIOR_TYPE] != INTERIOR_VICTIM && ENTER_EXIT[i][ee_INTERIOR_TYPE] != INTERIOR_ZIP) continue;
				
				format(line_str, sizeof line_str, "{FFFFFF}%d. %s\t{E6F8E0}%.2f Km\n", sites + 1, ENTER_EXIT[i][ee_NAME], (GetPlayerDistanceFromPoint(playerid, ENTER_EXIT[i][ee_EXT_X], ENTER_EXIT[i][ee_EXT_Y], ENTER_EXIT[i][ee_EXT_Z]) * 0.01));
				strcat(dialog, line_str);
				
				PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][sites] = i;
				sites ++;
			}
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "GPS - Tiendas de ropa", dialog, "Seguir", "Atrás");	
			return 1;
		}
		case DIALOG_PLAYER_GPS_SITE_2: //Tiendas 24 horas
		{
			for(new i = 0; i != MAX_LISTITEMS; i ++) PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][i] = -1;
			
			new dialog[90 * (MAX_LISTITEMS + 1)];
			format(dialog, sizeof dialog, "Lugar\tDistancia\n");
			
			new line_str[90], sites;
			for(new i = 0; i != sizeof(ENTER_EXIT); i++ )
			{
				if(sites >= MAX_LISTITEMS) break;
				if(ENTER_EXIT[i][ee_INTERIOR_TYPE] != INTERIOR_247) continue;
				
				format(line_str, sizeof line_str, "{FFFFFF}%d. %s\t{E6F8E0}%.2f Km\n", sites + 1, ENTER_EXIT[i][ee_NAME], (GetPlayerDistanceFromPoint(playerid, ENTER_EXIT[i][ee_EXT_X], ENTER_EXIT[i][ee_EXT_Y], ENTER_EXIT[i][ee_EXT_Z]) * 0.01));
				strcat(dialog, line_str);
				
				PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][sites] = i;
				sites ++;
			}
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "GPS - Tiendas 24/7", dialog, "Seguir", "Atrás");	
			return 1;
		}
		case DIALOG_PLAYER_GPS_SITE_3: //Comida rapida
		{
			for(new i = 0; i != MAX_LISTITEMS; i ++) PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][i] = -1;
			
			new dialog[90 * (MAX_LISTITEMS + 1)];
			format(dialog, sizeof dialog, "Lugar\tDistancia\n");
			
			new line_str[90], sites;
			for(new i = 0; i != sizeof(ENTER_EXIT); i++ )
			{
				if(sites >= MAX_LISTITEMS) break;
				if(ENTER_EXIT[i][ee_INTERIOR_TYPE] != INTERIOR_PIZZA && ENTER_EXIT[i][ee_INTERIOR_TYPE] != INTERIOR_CLUCKIN_BELL && ENTER_EXIT[i][ee_INTERIOR_TYPE] != INTERIOR_BURGER_SHOT) continue;
				
				format(line_str, sizeof line_str, "{FFFFFF}%d. %s\t{E6F8E0}%.2f Km\n", sites + 1, ENTER_EXIT[i][ee_NAME], (GetPlayerDistanceFromPoint(playerid, ENTER_EXIT[i][ee_EXT_X], ENTER_EXIT[i][ee_EXT_Y], ENTER_EXIT[i][ee_EXT_Z]) * 0.01));
				strcat(dialog, line_str);
				
				PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][sites] = i;
				sites ++;
			}
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "GPS - Restaurantes", dialog, "Seguir", "Atrás");	
			return 1;
		}
		case DIALOG_PLAYER_GPS_SITE_4: //Bancos
		{
			for(new i = 0; i != MAX_LISTITEMS; i ++) PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][i] = -1;
			
			new dialog[90 * (MAX_LISTITEMS + 1)];
			format(dialog, sizeof dialog, "Lugar\tDistancia\n");
			
			new line_str[90], sites;
			for(new i = 0; i != sizeof(ENTER_EXIT); i++ )
			{
				if(sites >= MAX_LISTITEMS) break;
				if(ENTER_EXIT[i][ee_INTERIOR_TYPE] != INTERIOR_BANK_LS && ENTER_EXIT[i][ee_INTERIOR_TYPE] != INTERIOR_BANK_SF && ENTER_EXIT[i][ee_INTERIOR_TYPE] != INTERIOR_BANK_LV) continue;
				
				format(line_str, sizeof line_str, "{FFFFFF}%d. %s\t{E6F8E0}%.2f Km\n", sites + 1, ENTER_EXIT[i][ee_NAME], (GetPlayerDistanceFromPoint(playerid, ENTER_EXIT[i][ee_EXT_X], ENTER_EXIT[i][ee_EXT_Y], ENTER_EXIT[i][ee_EXT_Z]) * 0.01));
				strcat(dialog, line_str);
				
				PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][sites] = i;
				sites ++;
			}
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "GPS - Bancos", dialog, "Seguir", "Atrás");	
			return 1;
		}
		case DIALOG_PLAYER_GPS_SITE_5: //Cajeros
		{
			new dialog[90 * (sizeof(ATM_BANK) + 1)];
			format(dialog, sizeof dialog, "Lugar\tDistancia\n");
			
			new line_str[90], sites;
			for(new i = 0; i != sizeof(ATM_BANK); i++ )
			{
				format(line_str, sizeof line_str, "{FFFFFF}Cajero %d\t{E6F8E0}%.2f Km\n", sites + 1, (GetPlayerDistanceFromPoint(playerid, ATM_BANK[i][atm_X], ATM_BANK[i][atm_Y], ATM_BANK[i][atm_Z]) * 0.01));
				strcat(dialog, line_str);
				
				sites ++;
			}
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "GPS - Cajeros", dialog, "Seguir", "Atrás");	
			return 1;
		}
		case DIALOG_PLAYER_GPS_SITE_6: //Gasolineras
		{
			new dialog[90 * (sizeof(Fuel_Stations) + 1)];
			format(dialog, sizeof dialog, "Lugar\tDistancia\n");
			
			new line_str[90], sites;
			for(new i = 0; i != sizeof(Fuel_Stations); i++ )
			{
				format(line_str, sizeof line_str, "{FFFFFF}Gasolinera %d\t%.2f Km\n", sites + 1, (GetPlayerDistanceFromPoint(playerid, Fuel_Stations[i][0], Fuel_Stations[i][1], Fuel_Stations[i][2]) * 0.01));
				strcat(dialog, line_str);
				
				sites ++;
			}
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "GPS - Gasolineras", dialog, "Seguir", "Atrás");	
			return 1;
		}
		case DIALOG_PLAYER_GPS_SITE_7: //Concesionarios
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "Concesionarios", DIALOG_PLAYER_GPS_SITE_7_String, "Seguir", "Atrás");	
			return 1;
		}
		case DIALOG_PLAYER_GPS_SITE_8: //Policias
		{
			for(new i = 0; i != MAX_LISTITEMS; i ++) PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][i] = -1;
			
			new dialog[90 * (MAX_LISTITEMS + 1)];
			format(dialog, sizeof dialog, "Lugar\tDistancia\n");
			
			new line_str[90], sites;
			for(new i = 0; i != sizeof(ENTER_EXIT); i++ )
			{
				if(sites >= MAX_LISTITEMS) break;
				if(ENTER_EXIT[i][ee_INTERIOR_TYPE] != INTERIOR_POLICE_LS && ENTER_EXIT[i][ee_INTERIOR_TYPE] != INTERIOR_POLICE_SF && ENTER_EXIT[i][ee_INTERIOR_TYPE] != INTERIOR_POLICE_LV) continue;
				
				format(line_str, sizeof line_str, "{FFFFFF}%d. %s\t%.2f Km\n", sites + 1, ENTER_EXIT[i][ee_NAME], (GetPlayerDistanceFromPoint(playerid, ENTER_EXIT[i][ee_EXT_X], ENTER_EXIT[i][ee_EXT_Y], ENTER_EXIT[i][ee_EXT_Z]) * 0.01));
				strcat(dialog, line_str);
				
				PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][sites] = i;
				sites ++;
			}
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "GPS - Policías", dialog, "Seguir", "Atrás");	
			return 1;
		}
		case DIALOG_PLAYER_GPS_PROPERTIES:
		{
			new string[1820],query[256],DBResult:Result,properties;
		    format(query,sizeof(query),"SELECT `ID`,`X`,`Y`,`Z` FROM CASASVIP WHERE `PLAYER` = '%d';", ACCOUNT_INFO[playerid][ac_ID]);
		    Result = db_query(_DB_,query);
		    if(db_num_rows(Result) == 0) return MensajesAyuda(playerid,"No tienes propiedades");
		    for(new i; i < db_num_rows(Result); i++)
		    {
			    new text[256],direccion;
			    new Float:pos[3];

			    pos[0] = db_get_field_assoc_float(Result, "X");
				pos[1] = db_get_field_assoc_float(Result, "Y");
				pos[2] = db_get_field_assoc_float(Result, "Z");
				direccion = db_get_field_assoc_int(Result, "ID");

			    db_get_field_assoc(Result, "ID",query, 20);
			    direccion = strval(query);
			    format(text,256,"Casa # %d",properties + 1);
			    for(new l = 0; l < strlen(text); ++l)
			        if(text[l] == '{')
			            if(text[l+7] == '}')
			                strdel(text, l, l+8);

			    if(strlen(text) > 37)
			    {
			        strdel(text, 34, strlen(text));
			        strcat(text, "...", sizeof(text));
			    }
			    properties++;
			    if(!i)
			    format(string, sizeof(string), "{000000}ID %d {FFFFFF}%s | Distancia: %.2f Km\n", direccion,text,(GetPlayerDistanceFromPoint(playerid, pos[0], pos[1], pos[2]) * 0.01));
			    else
			    format(string, sizeof(string), "%s\n{000000}ID %d {FFFFFF}%s | Distancia: %.2f Km\n", string, direccion,text,(GetPlayerDistanceFromPoint(playerid, pos[0], pos[1], pos[2]) * 0.01));
			    db_next_row(Result);
		    }
		    ShowPlayerDialog(playerid, DIIALOG_LOCALIZARPROPIEDAD, DIALOG_STYLE_LIST, "| GPS - Mis propiedades |", string, "Localizar", "Cerrar");
		    db_free_result(Result);
		     
			return 1;
		}
		case DIALOG_PLAYER_GPS_SITE_FARMACIA:
		{
			new string[1820],query[256],DBResult:Result,properties;
		    format(query,sizeof(query),"SELECT `ID`,`POSX`,`POSY`,`POSZ` FROM NEGOCIOS WHERE `NEGOCIOTYPE` = '13';");
		    Result = db_query(_DB_,query);
		    for(new i; i < db_num_rows(Result); i++)
		    {
			    new text[256],direccion;
			    new Float:pos[3];

			    pos[0] = db_get_field_assoc_float(Result, "POSX");
				pos[1] = db_get_field_assoc_float(Result, "POSY");
				pos[2] = db_get_field_assoc_float(Result, "POSZ");
				direccion = db_get_field_assoc_int(Result, "ID");

			    db_get_field_assoc(Result, "ID",query, 20);
			    direccion = strval(query);
			    format(text,256,"Negocio # %d",properties + 1);
			    for(new l = 0; l < strlen(text); ++l)
			        if(text[l] == '{')
			            if(text[l+7] == '}')
			                strdel(text, l, l+8);

			    if(strlen(text) > 37)
			    {
			        strdel(text, 34, strlen(text));
			        strcat(text, "...", sizeof(text));
			    }
			    properties++;
			    if(!i)
			    format(string, sizeof(string), "{000000}ID %d {FFFFFF}%s | Distancia: %.2f Km\n", direccion,text,(GetPlayerDistanceFromPoint(playerid, pos[0], pos[1], pos[2]) * 0.01));
			    else
			    format(string, sizeof(string), "%s\n{000000}ID %d {FFFFFF}%s | Distancia: %.2f Km\n", string, direccion,text,(GetPlayerDistanceFromPoint(playerid, pos[0], pos[1], pos[2]) * 0.01));
			    db_next_row(Result);
		    }
		    ShowPlayerDialog(playerid, DIIALOG_LOCALIZAR_FARMACIA, DIALOG_STYLE_LIST, "| GPS - Farmacias |", string, "Localizar", "Cerrar");
		    db_free_result(Result);
		     
			return 1;
		}
		case DIALOG_PLAYER_GPS_NEGOCIOS:
		{
			new string[1820],query[256],DBResult:Result,name_[50],karenmivida;
		    format(query,sizeof(query),"SELECT `NOMBRE`,`ID`,`POSX`,`POSY`,`POSZ` FROM NEGOCIOS WHERE `DUENO` = '%d';", ACCOUNT_INFO[playerid][ac_ID]);
		    Result = db_query(_DB_,query);
		    if(db_num_rows(Result) == 0) return MensajesAyuda(playerid,"No tienes negocios");
		    for(new i; i < db_num_rows(Result); i++)
		    {
			    new text[256],direccion;
			    new Float:pos[3];

			    pos[0] = db_get_field_assoc_float(Result, "POSX");
				pos[1] = db_get_field_assoc_float(Result, "POSY");
				pos[2] = db_get_field_assoc_float(Result, "POSZ");
				direccion = db_get_field_assoc_int(Result, "ID");
				db_get_field_assoc(Result, "NOMBRE",name_, 50);

			    db_get_field_assoc(Result, "ID",query, 20);
			    direccion = strval(query);
			    format(text,256,"Negocio (%s) #: %d",name_,karenmivida+1);
			    karenmivida++;
			    for(new l = 0; l < strlen(text); ++l)
			        if(text[l] == '{')
			            if(text[l+7] == '}')
			                strdel(text, l, l+8);

			    if(strlen(text) > 37)
			    {
			        strdel(text, 34, strlen(text));
			        strcat(text, "...", sizeof(text));
			    }
			    if(!i)
			    format(string, sizeof(string), "{000000}ID %d {FFFFFF}%s | Distancia: %.2f Km\n", direccion,text,(GetPlayerDistanceFromPoint(playerid, pos[0], pos[1], pos[2]) * 0.01));
			    else
			    format(string, sizeof(string), "%s\n{000000}ID %d {FFFFFF}%s | Distancia: %.2f Km\n", string, direccion,text,(GetPlayerDistanceFromPoint(playerid, pos[0], pos[1], pos[2]) * 0.01));
			    db_next_row(Result);
		    }
		    ShowPlayerDialog(playerid, DIALOG_LOCALIZARNEGOCIO, DIALOG_STYLE_LIST, "| GPS - Mis propiedades |", string, "Localizar", "Cerrar");
		    db_free_result(Result);
		     
			return 1;
		}
		case DIALOG_PLAYER_GPS_VEHICLES:
		{
			for(new i = 0; i != MAX_LISTITEMS; i ++) PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][i] = -1;
			
			new dialog[115 * (MAX_SU_VEHICLES + 2)], total_vehicles;
			format(dialog, sizeof dialog, "Vehículo\tMatrícula\tDistancia\tID VEH\n");
			for(new i = 0; i != MAX_VEHICLES; i ++)
			{
				if(!GLOBAL_VEHICLES[i][gb_vehicle_VALID]) continue;
				if(!PLAYER_VEHICLES[i][player_vehicle_VALID]) continue;
				if(total_vehicles > MAX_SU_VEHICLES) break;
				
				if(PLAYER_VEHICLES[i][player_vehicle_OWNER_ID] == ACCOUNT_INFO[playerid][ac_ID])
				{
					PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][total_vehicles] = i;
					
					new Float:pos[3];
					GetVehiclePos(i, pos[0], pos[1], pos[2]);
					
					new line_str[115];
					if(ACCOUNT_INFO[playerid][ac_SU]) format(line_str, sizeof line_str, "{FFFFFF}%d. %s\t{FFFFFF}%s\t{E6F8E0}%.2f Km\t"W"%d\n", total_vehicles + 1, VEHICLE_INFO[ GLOBAL_VEHICLES[i][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME], GLOBAL_VEHICLES[i][gb_vehicle_NUMBER_PLATE], (GetPlayerDistanceFromPoint(playerid, pos[0], pos[1], pos[2]) * 0.01), i);
					else
					{
						if(PLAYER_VEHICLES[i][player_vehicle_ACCESSIBLE]) format(line_str, sizeof line_str, "{E6F8E0}%d. %s (%d)\t{90C3D4}%s\t{E6F8E0}%.2f Km\t"W"%d\n", total_vehicles + 1, VEHICLE_INFO[ GLOBAL_VEHICLES[i][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME], i, GLOBAL_VEHICLES[i][gb_vehicle_NUMBER_PLATE], (GetPlayerDistanceFromPoint(playerid, pos[0], pos[1], pos[2]) * 0.01), i);
						else format(line_str, sizeof line_str, "{666666}%d. %s (%d)\t{666666}%s\t{666666}%.2f Km\t"W"%d\n", total_vehicles + 1, VEHICLE_INFO[ GLOBAL_VEHICLES[i][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME], i, GLOBAL_VEHICLES[i][gb_vehicle_NUMBER_PLATE], (GetPlayerDistanceFromPoint(playerid, pos[0], pos[1], pos[2]) * 0.01), i);
					}
					strcat(dialog, line_str);
					total_vehicles ++;
				}
			}
			if(total_vehicles == 0) strcat(dialog, "{E6F8E0}No tienes vehículos");
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "GPS - Mis vehículos", dialog, "Seguir", "Atrás");
			return 1;
		}
		case DIALOG_PROPERTY_OPTIONS:
		{
			new caption[40];
			format(caption, sizeof caption, "Propiedad - %s", PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_NAME]);
			
			new dialog[256];
			format(dialog, sizeof dialog, "{E6F8E0}1. Cambiar nombre de la propiedad\n{E6F8E0}2. Echar a todo del mundo de mi propiedad\n{E6F8E0}3. Poner música desde tu MP3\n");
			if(PLAYER_CREW[playerid][player_crew_VALID])
			{
				if(CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_PERMISSION][CREW_RANK_ADD_PROPERTIES])
				{
					strcat(dialog, "{E6F8E0}4. Pasar a propiedad de banda\n");
				}
			}
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, dialog, "Seguir", "Atrás");
			return 1;
		}
		case DIALOG_PROPERTY_NAME:
		{
			new dialog[85];
			format(dialog, sizeof dialog, "Nombre actual: %s\nIndica el nuevo nombre de la propiedad.", PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_NAME]);
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Propiedad - Cambiar nombre", dialog, "Seguir", "Atrás");
			return 1;
		}
		case DIALOG_PLAYER_MP3: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "MP3 - Buscar una canción", "Indica el nombre y cantante de la canción que quieres reproducir.\nSe recomienda añadir la palabra 'audio' para canción directa.\n\nPor ejemplo: Lynyrd Skynyrd - Free Bird (Audio)", "Buscar", "Salir");
		case DIALOG_BUY_VEHICLE:
		{
			if(!GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][gb_vehicle_VALID]) return 0;
			if(GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][gb_vehicle_TYPE] != VEHICLE_TYPE_SELL) return 0;
			if(!SELL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_VALID]) return 0;
			
			new dialog[800];
			format(dialog, sizeof dialog, 
				"Vehículo: %s\n\
				Nivel necesario: %d\n\
				Precio del vehículo: %s$\n\
				Velocidad máxima: %d Km/h\n\
				Capacidad depósito: %.1f Litros\n\
				Espacio maletero: %d\n\
				Seguro: %s$\n\n", 
				VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME],
				SELL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_LEVEL],
				number_format_thousand(SELL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_PRICE]),
				floatround(VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][gb_vehicle_MODELID] - 400 ][vehicle_info_MAX_VEL]),
				VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][gb_vehicle_MODELID] - 400 ][vehicle_info_MAX_GAS],
				VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][gb_vehicle_MODELID] - 400 ][vehicle_info_BOOT_SLOTS],
				number_format_thousand(VEHICLE_INFO[GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][gb_vehicle_MODELID] - 400][vehicle_info_PRICE] / 5000)
			);
			
			new str[145];
			if(SELL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_LEVEL] > ACCOUNT_INFO[playerid][ac_LEVEL])
			{
				format(str, sizeof str, "{FF6633}- Necesitas ser al menos nivel %d para poder comprar este vehículo.", SELL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_LEVEL]);
				strcat(dialog, str);
				PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] = INVALID_VEHICLE_ID;
				ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Comprar vehículo", dialog, "Salir", "");
				return 1;
			}
			
			if(SELL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_VIP_LEVEL] > ACCOUNT_INFO[playerid][ac_SU])
			{
				format(str, sizeof str, "{FF6633}- Necesitas membresía VIP%d para poder comprar este vehículo.", SELL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_VIP_LEVEL]);
				strcat(dialog, str);
				PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] = INVALID_VEHICLE_ID;
				ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Comprar vehículo", dialog, "Salir", "");
				return 1;
			}
			
			if(BANK_ACCOUNT[playerid][bank_account_ID] == 0)
			{
				strcat(dialog, "{FF6633}- Necesitas una cuenta bancaria para poder comprar vehículos.");
				PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] = INVALID_VEHICLE_ID;
				ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Comprar vehículo", dialog, "Salir", "");
				return 1;
			}
	
			if(SELL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_PRICE] > BANK_ACCOUNT[playerid][bank_account_BALANCE])
			{
				new diff = SELL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_PRICE] - BANK_ACCOUNT[playerid][bank_account_BALANCE];
				format(str, sizeof str, "{FF6633}- Te faltan %s$ en tu cuenta bancaria para poder comprar este vehículo.", number_format_thousand(diff));
				strcat(dialog, str);
				PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] = INVALID_VEHICLE_ID;
				ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Comprar vehículo", dialog, "Salir", "");
				return 1;
			}
			
			if(SELL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_EXTRA] > ACCOUNT_INFO[playerid][ac_SD])
			{
				format(str, sizeof str, "{FF6633}- Te faltan %d "SERVER_COIN" para poder comprar este vehículo.", SELL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_EXTRA] - ACCOUNT_INFO[playerid][ac_SD]);
				strcat(dialog, str);
				PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] = INVALID_VEHICLE_ID;
				ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Comprar vehículo", dialog, "Salir", "");
				return 1;
			}
			
			if(!SELL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_EXTRA]) format(str, sizeof str, "Balance de tu cuenta bancaria: %s$\nBalance tras la compra: %s$\n\n¿De verdad desea comprar este vehículo?", number_format_thousand(BANK_ACCOUNT[playerid][bank_account_BALANCE]), number_format_thousand(BANK_ACCOUNT[playerid][bank_account_BALANCE] - SELL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_PRICE]));
			else format(str, sizeof str, "Tus monedas: %d "SERVER_COIN"\nMonedas tras la compra: %d "SERVER_COIN"\n\n¿De verdad desea comprar este vehículo?", ACCOUNT_INFO[playerid][ac_SD], ACCOUNT_INFO[playerid][ac_SD] - SELL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_EXTRA]);
			strcat(dialog, str);
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Comprar vehículo", dialog, "Comprar", "Salir");
			return 1;
		}
		case DIALOG_NOTARY:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "Notaría", "{E6F8E0}Vender un negocio al banco\n{E6F8E0}Vender un vehículo al banco\n{E6F8E0}Vender una propiedad a una persona\n{E6F8E0}Vender un vehículo a una persona", "Seguir", "Cerrar");
			return 1;
		}
		case DIALOG_NOTARY_SELECT_PROPERTY:
		{
			for(new i = 0; i != MAX_LISTITEMS; i++ ) PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][i] = -1;
			
			new dialog[45 * (MAX_SU_PROPERTIES + 2)];
			format(dialog, sizeof dialog, "{E6F8E0}Propiedad\n");

			new DBResult:Result, DB_Query[80];
			format(DB_Query, sizeof DB_Query, "SELECT * FROM `PROPERTY_OWNER` WHERE `ID_USER` = '%d';", ACCOUNT_INFO[playerid][ac_ID]);
			Result = db_query(Database, DB_Query);
			
			if(db_num_rows(Result) == 0) strcat(dialog, "{E6F8E0}No tienes propiedades");
			else
			{
				new line_str[45], properties;
				for(new i; i < db_num_rows(Result); i++ )
				{
					if(properties >= MAX_SU_PROPERTIES) break;
					
					new property_name[24];
					PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][properties] = db_get_field_assoc_int(Result, "ID_PROPERTY");
					db_get_field_assoc(Result, "PROPERTY_NAME", property_name, 24);
					
					format(line_str, sizeof line_str, "{E6F8E0}%d. %s\n", properties + 1, property_name);
					strcat(dialog, line_str);
					
					properties ++;
					db_next_row(Result);
				}
			}
			db_free_result(Result);
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "Selecciona la propiedad que quieres vender", dialog, "Seguir", "Atrás");
			return 1;
		}
		case DIALOG_PROPERTY_BANK_SELL:
		{
			new caption[40];
			format(caption, sizeof caption, "Vender - %s", PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_NAME]);
			
			new Float:price, payment;
			price = PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_PRICE_BASE];
			if(ACCOUNT_INFO[playerid][ac_SU]) payment = floatround( floatmul(price, 0.50) );
			else payment = floatround( floatmul(price, 0.25) );
			
			new dialog[160];
			format(dialog, sizeof dialog, "Precio en mercado: %s$\nNosotros te pagaremos: %s$\n\n¿Está seguro de que quiere venderla?", number_format_thousand(PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_PRICE]), number_format_thousand(payment));
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, caption, dialog, "Vender", "Atrás");
			return 1;
		}
		case DIALOG_PROPERTY_SELL_PRICE:
		{
			new caption[40];
			format(caption, sizeof caption, "Vender - %s", PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_NAME]);
			
			new Float:price, min_price, max_price;
			price = PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_PRICE];
			min_price = floatround( floatmul(price, 0.15) );
			max_price = floatround( floatmul(price, 6.0) );
			
			new dialog[250];
			format(dialog, sizeof dialog, 
			"Precio en mercado: %s$\n\nPrecio mínimo de venta: %s$\nPrecio máximo de venta: %s$\n\n¿Por cuánto quieres vender esta propiedad?", 
			number_format_thousand(PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_PRICE]),
			number_format_thousand(min_price),
			number_format_thousand(max_price));
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, caption, dialog, "Seguir", "Atrás");
			return 1;
		}
		case DIALOG_PROPERTY_SELL_TO_PLAYER:
		{
			new caption[40];
			format(caption, sizeof caption, "Vender - %s", PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_NAME]);
			
			new dialog[250];
			format(dialog, sizeof dialog, "De acuerdo, quieres vender esta propiedad por %s$.\n\nIndica el nombre o playerid del comprador.\nEl comprador debe estar en la sala y cumplir todos los requisitos.", number_format_thousand(PLAYER_TEMP[playerid][pt_NOTARY_PRICE]));
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, caption, dialog, "Seguir", "Atrás");
			return 1;
		}
		case DIALOG_SELL_CONFIRM_PROPERTY:
		{
			new dialog[240];
			format(dialog, sizeof dialog,
				"%s te quiere vender una propiedad.\n\n\
				Propiedad: %d\n\
				Precio: %s$\n\n\
				Balance tras la compra: %s$\n\n\
				¿Quieres comprar esta propiedad?",
				PLAYER_TEMP[ PLAYER_TEMP[playerid][pt_NOTARY_TO_PLAYER] ][pt_RP_NAME],
				PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_ID],
				number_format_thousand(PLAYER_TEMP[playerid][pt_NOTARY_PRICE]),
				number_format_thousand( BANK_ACCOUNT[playerid][bank_account_BALANCE] - PLAYER_TEMP[playerid][pt_NOTARY_PRICE] )
			);
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Oferta recibida", dialog, "Comprar", "Salir");
			return 1;
		}
		case DIALOG_NOTARY_SELECT_VEHICLE:
		{
			for(new i = 0; i != MAX_LISTITEMS; i ++) PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][i] = -1;
			
			new dialog[95 * (MAX_SU_VEHICLES + 2)], total_vehicles;
			format(dialog, sizeof dialog, "{E6F8E0}Vehículo\t{90C3D4}Matrícula\n");
			for(new i = 0; i != MAX_VEHICLES; i ++)
			{
				if(!GLOBAL_VEHICLES[i][gb_vehicle_VALID]) continue;
				if(!PLAYER_VEHICLES[i][player_vehicle_VALID]) continue;
				if(total_vehicles > MAX_SU_VEHICLES) break;
				
				if(PLAYER_VEHICLES[i][player_vehicle_OWNER_ID] == ACCOUNT_INFO[playerid][ac_ID])
				{
					PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][total_vehicles] = i;
					
					new line_str[95];
					format(line_str, sizeof line_str, "{E6F8E0}%d. %s\t{90C3D4}%s\n", total_vehicles + 1, VEHICLE_INFO[ GLOBAL_VEHICLES[i][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME], GLOBAL_VEHICLES[i][gb_vehicle_NUMBER_PLATE]);
					strcat(dialog, line_str);
					total_vehicles ++;
				}
			}
			if(total_vehicles == 0) strcat(dialog, "{E6F8E0}No tienes vehículos");
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "Selecciona el vehículo que quieres vender", dialog, "Seguir", "Atrás");
			return 1;
		}
		case DIALOG_VEHICLE_BANK_SELL:
		{
			new caption[40];
			format(caption, sizeof caption, "Vender - %s", VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_PLAYER_VEHICLE_SELECTED] ][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME]);
			
			new Float:price, payment;
			price = VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_PLAYER_VEHICLE_SELECTED] ][gb_vehicle_MODELID] - 400 ][vehicle_info_PRICE];
			if(ACCOUNT_INFO[playerid][ac_SU]==0) payment = floatround( floatmul(price, 0.25) );
			if(ACCOUNT_INFO[playerid][ac_SU]==1) payment = floatround( floatmul(price, 0.50) );
			if(ACCOUNT_INFO[playerid][ac_SU]>=2) payment = floatround( floatmul(price, 0.100) );
			//else payment = floatround( floatmul(price, 0.25) );
			
			new dialog[160];
			format(dialog, sizeof dialog, "Precio en mercado: %s$\nNosotros te pagaremos: %s$\n\n¿Está seguro de que quiere venderlo?", number_format_thousand( VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_PLAYER_VEHICLE_SELECTED] ][gb_vehicle_MODELID] - 400 ][vehicle_info_PRICE] ), number_format_thousand(payment));
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, caption, dialog, "Vender", "Atrás");
			return 1;
		}
		case DIALOG_VEHICLE_SELL_PRICE:
		{
			new caption[40];
			format(caption, sizeof caption, "Vender - %s", VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_PLAYER_VEHICLE_SELECTED] ][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME]);
			
			new Float:price, min_price, max_price;
			price = VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_PLAYER_VEHICLE_SELECTED] ][gb_vehicle_MODELID] - 400 ][vehicle_info_PRICE];
			min_price = floatround( floatmul(price, 0.15) );
			max_price = floatround( floatmul(price, 6.0) );
			
			new dialog[250];
			format(dialog, sizeof dialog, 
			"Precio en mercado: %s$\n\nPrecio mínimo de venta: %s$\nPrecio máximo de venta: %s$\n\n¿Por cuánto quieres vender este vehículo?", 
			number_format_thousand(VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_PLAYER_VEHICLE_SELECTED] ][gb_vehicle_MODELID] - 400 ][vehicle_info_PRICE]),
			number_format_thousand(min_price),
			number_format_thousand(max_price));
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, caption, dialog, "Seguir", "Atrás");
			return 1;
		}
		case DIALOG_VEHICLE_SELL_TO_PLAYER:
		{
			new caption[40];
			format(caption, sizeof caption, "Vender - %s", VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_PLAYER_VEHICLE_SELECTED] ][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME]);
			
			new dialog[250];
			format(dialog, sizeof dialog, "De acuerdo, quieres vender este vehículo por %s$.\n\nIndica el nombre o playerid del comprador.\nEl comprador debe estar en la sala y cumplir todos los requisitos.", number_format_thousand(PLAYER_TEMP[playerid][pt_NOTARY_PRICE]));
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, caption, dialog, "Seguir", "Atrás");
			return 1;
		}
		case DIALOG_SELL_CONFIRM_VEHICLE:
		{
			new dialog[300];
			format(dialog, sizeof dialog,
				"%s te quiere vender un vehículo.\n\n\
				Vehículo: %s\n\
				Matrícula: %s\n\
				Precio: %s$\n\n\
				Balance tras la compra: %s$\n\n\
				¿Quieres comprar este vehículo?",
				PLAYER_TEMP[ PLAYER_TEMP[playerid][pt_NOTARY_TO_PLAYER] ][pt_RP_NAME],
				VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_PLAYER_VEHICLE_SELECTED] ][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME],
				GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_PLAYER_VEHICLE_SELECTED] ][gb_vehicle_NUMBER_PLATE],
				number_format_thousand(PLAYER_TEMP[playerid][pt_NOTARY_PRICE]),
				number_format_thousand( BANK_ACCOUNT[playerid][bank_account_BALANCE] - PLAYER_TEMP[playerid][pt_NOTARY_PRICE] )
			);
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Oferta recibida", dialog, "Comprar", "Salir");
			return 1;
		}
		case DIALOG_SELECT_CARRIER_TYPE:
		{
			new work_extra_payment;
			if(work_info[WORK_CARRIER][work_info_EXTRA_PAY] > 0 && work_info[WORK_CARRIER][work_info_EXTRA_PAY_EXP] > 0)
			{
				work_extra_payment = (work_info[WORK_CARRIER][work_info_EXTRA_PAY] * floatround(floatdiv(PLAYER_SKILLS[playerid][WORK_CARRIER], work_info[WORK_CARRIER][work_info_EXTRA_PAY_EXP])));
				if(work_info[WORK_CARRIER][work_info_EXTRA_PAY_LIMIT] != 0) if(work_extra_payment > work_info[WORK_CARRIER][work_info_EXTRA_PAY_LIMIT]) work_extra_payment = work_info[WORK_CARRIER][work_info_EXTRA_PAY_LIMIT];
				
				if(ACCOUNT_INFO[playerid][ac_SU]==1) work_extra_payment += 200;
				if(ACCOUNT_INFO[playerid][ac_SU]>=2) work_extra_payment += 400;
			}
			
			new dialog[105 * (sizeof(Carrier_Contents) + 2)];
			format(dialog, sizeof dialog, "{E6F8E0}Producto\t{90C3D4}Beneficios\t{E6F8E0}Distancia\n");
			for(new i = 0; i != sizeof Carrier_Contents; i ++)
			{
				new line_str[105];
				if(Carrier_Contents[i][truck_content_EXP] > PLAYER_SKILLS[playerid][WORK_CARRIER])
				{
					format(line_str, sizeof line_str, "{666666}%s\t{666666}%s$\t{666666}%.2f Km\n", Carrier_Contents[i][truck_content_NAME], number_format_thousand(Carrier_Contents[i][truck_content_MONEY] + work_extra_payment), (GetPlayerDistanceFromPoint(playerid, Carrier_Contents[i][truck_content_X], Carrier_Contents[i][truck_content_Y], Carrier_Contents[i][truck_content_Z]) * 0.01));
					strcat(dialog, line_str);
				}
				else
				{
					format(line_str, sizeof line_str, "{E6F8E0}%s\t{90C3D4}%s$\t{E6F8E0}%.2f Km\n", Carrier_Contents[i][truck_content_NAME], number_format_thousand(Carrier_Contents[i][truck_content_MONEY] + work_extra_payment), (GetPlayerDistanceFromPoint(playerid, Carrier_Contents[i][truck_content_X], Carrier_Contents[i][truck_content_Y], Carrier_Contents[i][truck_content_Z]) * 0.01));
					strcat(dialog, line_str);
				}
			}
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "Selecciona el container", dialog, "Seguir", "Cancelar");
			return 1;
		}
		case DIALOG_SELECT_TRUCK_TYPE:
		{
			new work_extra_payment;
			if(work_info[WORK_TRUCK][work_info_EXTRA_PAY] > 0 && work_info[WORK_TRUCK][work_info_EXTRA_PAY_EXP] > 0)
			{
				work_extra_payment = (work_info[WORK_TRUCK][work_info_EXTRA_PAY] * floatround(floatdiv(PLAYER_SKILLS[playerid][WORK_TRUCK], work_info[WORK_TRUCK][work_info_EXTRA_PAY_EXP])));
				if(work_info[WORK_TRUCK][work_info_EXTRA_PAY_LIMIT] != 0) if(work_extra_payment > work_info[WORK_TRUCK][work_info_EXTRA_PAY_LIMIT]) work_extra_payment = work_info[WORK_TRUCK][work_info_EXTRA_PAY_LIMIT];
				
				if(ACCOUNT_INFO[playerid][ac_SU]==1) work_extra_payment += 200;
				if(ACCOUNT_INFO[playerid][ac_SU]>=2) work_extra_payment += 400;
			}
			
			new dialog[105 * (sizeof(Truck_Contents) + 2)];
			format(dialog, sizeof dialog, "{E6F8E0}Producto\t{90C3D4}Beneficios\t{E6F8E0}Distancia\n");
			for(new i = 0; i != sizeof Truck_Contents; i ++)
			{
				new line_str[105];
				if(Truck_Contents[i][truck_content_EXP] > PLAYER_SKILLS[playerid][WORK_TRUCK])
				{
					format(line_str, sizeof line_str, "{666666}%s\t{666666}%s$\t{666666}%.2f Km\n", Truck_Contents[i][truck_content_NAME], number_format_thousand(Truck_Contents[i][truck_content_MONEY] + work_extra_payment), (GetPlayerDistanceFromPoint(playerid, Truck_Contents[i][truck_content_X], Truck_Contents[i][truck_content_Y], Truck_Contents[i][truck_content_Z]) * 0.01));
					strcat(dialog, line_str);
				}
				else
				{
					format(line_str, sizeof line_str, "{E6F8E0}%s\t{90C3D4}%s$\t{E6F8E0}%.2f Km\n", Truck_Contents[i][truck_content_NAME], number_format_thousand(Truck_Contents[i][truck_content_MONEY] + work_extra_payment), (GetPlayerDistanceFromPoint(playerid, Truck_Contents[i][truck_content_X], Truck_Contents[i][truck_content_Y], Truck_Contents[i][truck_content_Z]) * 0.01));
					strcat(dialog, line_str);
				}
			}
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "Selecciona la carga", dialog, "Seguir", "Cancelar");
			return 1;
		}
		case DIALOG_TUNING_MENU_PART:
		{
			new vehicleid = PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID];
			
			new caption[45];
			format(caption, sizeof caption, "Tuning - %s", VEHICLE_INFO[ GLOBAL_VEHICLES[vehicleid][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME]);
			
			new DBResult:Result, DB_Query[250], dialog[80 * TOTAL_TUNING_PARTS];
			format(DB_Query, sizeof DB_Query, "SELECT `COMPONENTS_INFO`.`PART`, `COMPONENTS_INFO`.`PIECES` FROM `COMPONENTS_INFO`, `VEHICLE_COMPONENTS` WHERE `VEHICLE_COMPONENTS`.`MODELID` = '%d' AND `VEHICLE_COMPONENTS`.`COMPONENT_ID` = `COMPONENTS_INFO`.`ID` GROUP BY `COMPONENTS_INFO`.`PART`;", GLOBAL_VEHICLES[vehicleid][gb_vehicle_MODELID]);
			Result = db_query(Database, DB_Query);
			
			format(dialog, sizeof dialog, "{E6F8E0}Categoría\t{90C3D4}Piezas necesarias\t{E6F8E0}Estimación\n");
			
			if(db_num_rows(Result) == 0) strcat(dialog, "{666666}Este vehículo no se puede tunear");
			else
			{
				new line_str[80];
				for(new i; i < db_num_rows(Result); i++ )
				{
					if(i >= TOTAL_TUNING_PARTS)
					{
						printf("---> Límite superado en array 'PLAYER_TUNING_MENU, dialog Parts' al intentar cargar de la base de datos.");
						break;
					}

					db_get_field_assoc(Result, "PART", PLAYER_TUNING_MENU[playerid][i][tuning_menu_NAME], 24);
					PLAYER_TUNING_MENU[playerid][i][tuning_menu_PIECES] = db_get_field_assoc_int(Result, "PIECES");
					format(line_str, sizeof line_str, "{E6F8E0}%s\t{90C3D4}%d\t{E6F8E0}%s$\n", PLAYER_TUNING_MENU[playerid][i][tuning_menu_NAME], PLAYER_TUNING_MENU[playerid][i][tuning_menu_PIECES], number_format_thousand(PLAYER_TUNING_MENU[playerid][i][tuning_menu_PIECES] * 50));
					strcat(dialog, line_str);
					
					db_next_row(Result);
				}
			}
			db_free_result(Result);
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, caption, dialog, "Seguir", "Atrás");
			return 1;
		}
		case DIALOG_TUNING_MENU_COMPONENT:
		{
			new vehicleid = PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID];
			
			new caption[45];
			format(caption, sizeof caption, "%s > %s", VEHICLE_INFO[ GLOBAL_VEHICLES[vehicleid][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME], PLAYER_TEMP[playerid][pt_TUNING_SELECTED_PART]);
			
			new DBResult:Result, DB_Query[300], dialog[40 * MAX_TUNING_PARTS_COMPONENTS];
			format(DB_Query, sizeof DB_Query, "SELECT `COMPONENTS_INFO`.`ID`, `COMPONENTS_INFO`.`NAME` FROM `COMPONENTS_INFO`, `VEHICLE_COMPONENTS` WHERE `COMPONENTS_INFO`.`PART` = '%s' AND `VEHICLE_COMPONENTS`.`MODELID` = '%d' AND `VEHICLE_COMPONENTS`.`COMPONENT_ID` = `COMPONENTS_INFO`.`ID`;", PLAYER_TEMP[playerid][pt_TUNING_SELECTED_PART], GLOBAL_VEHICLES[vehicleid][gb_vehicle_MODELID]);
			Result = db_query(Database, DB_Query);
			
			if(db_num_rows(Result) == 0) strcat(dialog, "{666666}No hay nada aquí");
			else
			{
				new line_str[40];
				for(new i; i < db_num_rows(Result); i++ )
				{
					if(i >= MAX_TUNING_PARTS_COMPONENTS)
					{
						printf("---> Límite superado en array 'PLAYER_TUNING_MENU, dialog Partsnames' al intentar cargar de la base de datos.");
						break;
					}
					
					PLAYER_TUNING_MENU[playerid][i][tuning_menu_ID] = db_get_field_assoc_int(Result, "ID");
					db_get_field_assoc(Result, "NAME", PLAYER_TUNING_MENU[playerid][i][tuning_menu_NAME], 24);
					
					format(line_str, sizeof line_str, "{E6F8E0}%s\n", PLAYER_TUNING_MENU[playerid][i][tuning_menu_NAME]);
					strcat(dialog, line_str);
					
					db_next_row(Result);
				}
			}
			db_free_result(Result);
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, dialog, "Seguir", "Atrás");
			return 1;
		}
		case DIALOG_MECHANIC_MENU_ACEITE:
		{
			new caption[60];
			new dialog[450];
			format(caption, sizeof caption, "%s piezas disponibles - %s", number_format_thousand(PLAYER_MISC[playerid][MISC_MECHANIC_PIECES]), VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME]);
			strcat(dialog, "{E6F8E0}Cambiar aceite al vehiculo\n\nRecuerda cobrarle primero al cliente para hacer el cambio de aceite\n(Piezas necesarias: 10)");
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, caption, dialog, "Seguir", "Atrás");
			return 1;
		}
		case DIALOG_MECHANIC_MENU:
		{
			new caption[60];
			format(caption, sizeof caption, "%s piezas disponibles - %s", number_format_thousand(PLAYER_MISC[playerid][MISC_MECHANIC_PIECES]), VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME]);
			
			new dialog[450];
			format(dialog, sizeof dialog, 
			"\
				{E6F8E0}Opción\t{90C3D4}Piezas necesarias\t{E6F8E0}Estimación\n\
				{E6F8E0}Reparación completa\t{90C3D4}10\t{E6F8E0}500$\n\
			");
			
			if(IsPlayerInDynamicArea(playerid, Mechanic_Area))
			{
				new paintjobs = VehiclePaintjob( GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_MODELID] );
				strcat(dialog, "{E6F8E0}Pintar vehículo\t{90C3D4}5\t{E6F8E0}250$\n");
				if(PLAYER_SKILLS[playerid][WORK_MECHANIC] >= 100)
				{
					strcat(dialog, "{E6F8E0}Eliminar componentes\n");
					strcat(dialog, "{E6F8E0}Tunear vehículo\n");
					if(paintjobs > 0) strcat(dialog, "{E6F8E0}Paintjob\t{90C3D4}15\t{E6F8E0}750$\n");
				}
				else
				{
					strcat(dialog, "{666666}Eliminar componentes\n");
					strcat(dialog, "{666666}Tunear vehículo\n");
					if(paintjobs > 0) strcat(dialog, "{666666}Paintjob\t{666666}15\t{666666}750$\n");
				}
			}

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, caption, dialog, "Seguir", "Atrás");
			return 1;
		}
		case DIALOG_MECHANIC_REPAIR_PRICE:
		{
			new caption[60];
			format(caption, sizeof caption, "Reparar %s", VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME]);
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, caption, "Indica el precio de la reparación.\nRango de precio: 0$ - 2.000$", "Seguir", "Atrás");
			return 1;
		}
		case DIALOG_MECHANIC_COLOR_PRICE:
		{
			new caption[60];
			format(caption, sizeof caption, "Pintar %s", VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME]);
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, caption, "Indica el precio para pintar el vehículo.\nRango de precio: 0$ - 1.750$", "Seguir", "Atrás");
			return 1;
		}
		case DIALOG_MECHANIC_TUNING_PRICE:
		{
			new caption[60], dialog[145];
			format(caption, sizeof caption, "Tunear %s", VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME]);
			
			format(dialog, sizeof dialog, "Indica el precio para tunear el vehículo.\nRango de precio: 0$ - %s$", number_format_thousand((PLAYER_TEMP[playerid][pt_TUNING_SELECTED_PIECES] * 50) + 2000));
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, caption, dialog, "Seguir", "Atrás");
			return 1;
		}
		case DIALOG_MECHANIC_PAINTJOB_PRICE:
		{
			new caption[60];
			format(caption, sizeof caption, "Paintjob %s", VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME]);
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, caption, "Indica el precio para el paintjob del vehículo.\nRango de precio: 0$ - 2.750$", "Seguir", "Atrás");
			return 1;
		}
		case DIALOG_MECHANIC_ACCEPT:
		{
			new dialog[300];
			format(dialog, sizeof dialog,
				
				"\
					{E6F8E0}El mecánico %s te ofrece:\n\
						\t%s\n\
					\n\
					{E6F8E0}Precio: %s$\n\
					¿Quieres aceptarlo?\n\
				",
					PLAYER_TEMP[ PLAYER_TEMP[playerid][pt_MECHANIC_PID] ][pt_RP_NAME],
					PLAYER_TEMP[playerid][pt_MECHANIC_TEXT],
					number_format_thousand(PLAYER_TEMP[playerid][pt_MECHANIC_PRICE])
			);
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Mecánico", dialog, "Aceptar", "Cancelar");
			return 1;
		}
		case DIALOG_MECHANIC_SELECT_COL_SLOT:
		{
			new caption[60];
			format(caption, sizeof caption, "Pintar %s", VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME]);
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, "{E6F8E0}Pintar color primario\n{E6F8E0}Pintar color secundario", "Seguir", "Atrás");
			return 1;
		}
		case DIALOG_MECHANIC_SELECT_COLOR:
		{
			new caption[60];
			format(caption, sizeof caption, "Pintar %s", VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME]);
			
			
			new dialog[15 * (sizeof(VEHICLE_COLORS) + 1) ];
			for(new i = 0; i != sizeof VEHICLE_COLORS; i++)
			{
				new line_str[15];
				format(line_str, sizeof(line_str), "{%06x}%d\n", VEHICLE_COLORS[i] >>> 8, i);
				strcat(dialog, line_str);
			}
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, dialog, "Seguir", "Atrás");
			return 1;
		}
		case DIALOG_MECHANIC_REMOVE_COMPONEN:
		{
			new caption[60], dialog[80 * (MAX_VEHICLE_COMPONENTS + 2) ], listitem;
			format(caption, sizeof caption, "Componentes de %s", VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME]);
			format(dialog, sizeof dialog, "{E6F8E0}Componente\t{90C3D4}Piezas\n");
			
			for(new i = 0; i != MAX_VEHICLE_COMPONENTS; i ++)
			{
				if(!GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_COMPONENTS][i]) continue;
				
				new DBResult:Result, DB_Query[60];
				format(DB_Query, sizeof DB_Query, "SELECT * FROM `COMPONENTS_INFO` WHERE `ID` = '%d';", GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_COMPONENTS][i]);
				
				Result = db_query(Database, DB_Query);
			
				if(db_num_rows(Result))
				{	
					new part[24], name[24];
					db_get_field_assoc(Result, "PART", part, 24);
					db_get_field_assoc(Result, "NAME", name, 24);
					PLAYER_TUNING_MENU[playerid][listitem][tuning_menu_ID] = i;
					PLAYER_TUNING_MENU[playerid][listitem][tuning_menu_PIECES] = db_get_field_assoc_int(Result, "PIECES");
					
					new line_str[80];
					format(line_str, sizeof line_str, "{E6F8E0}%s > %s\t{90C3D4}+ %d\n", part, name, PLAYER_TUNING_MENU[playerid][listitem][tuning_menu_PIECES]);
					strcat(dialog, line_str);
				}
				db_free_result(Result);
				listitem ++;
			}
			if(listitem == 0)
			{
				PLAYER_TUNING_MENU[playerid][listitem][tuning_menu_ID] = 0;
				strcat(dialog, "{E6F8E0}Vehículo sin tunear");
			}
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, caption, dialog, "Eliminar", "Atrás");
			return 1;
		}
		case DIALOG_TUNING_PAINTJOB:
		{
			new caption[60], dialog[25 * 4];
			format(caption, sizeof caption, "Paintjob - %s", VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME]);
			
			new paintjobs = VehiclePaintjob( GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_MODELID] );
			if(paintjobs == 0)
			{
				SendClientMessage(playerid, -1, "{00FF80}Este vehículo no soporta paintjobs.");
				ShowDialog(playerid, DIALOG_MECHANIC_MENU);
				return 1;
			}
			
			strcat(dialog, "{E6F8E0}Eliminar paintjob (+ 15 piezas)\n");
			for(new i = 0; i != paintjobs; i ++)
			{
				new line_str[25];
				format(line_str, sizeof line_str, "{E6F8E0}Paintjob %d\n", i + 1);
				strcat(dialog, line_str);
			}
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, dialog, "Seguir", "Atrás");
			return 1;
		}
		case DIALOG_SEED_LIST:
		{
			new dialog[64 * (sizeof(seed_info) + 1)];
			format(dialog, sizeof dialog, "Nombre\tPrecio por semilla\n");
			
			for(new i = 0; i != sizeof seed_info; i ++)
			{
				new line_str[64];
				if(PLAYER_SKILLS[playerid][WORK_FARMER] >= seed_info[i][seed_info_EXP])
				{
					if(seed_info[i][seed_info_TYPE] == TYPE_LEGAL) format(line_str, sizeof line_str, "{009900}%s\t{E6F8E0}%d$\n", seed_info[i][seed_info_NAME], seed_info[i][seed_info_PRICE]);
					else format(line_str, sizeof line_str, "{FF3300}%s\t{E6F8E0}%d$\n", seed_info[i][seed_info_NAME], seed_info[i][seed_info_PRICE]);
				}
				else format(line_str, sizeof line_str, "{666666}%s\t{666666}%d$\n", seed_info[i][seed_info_NAME], seed_info[i][seed_info_PRICE]);
				
				strcat(dialog, line_str);
			}
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "Semillas de la vida", dialog, "Seguir", "Cerrar");
			return 1;
		}
		case DIALOG_SEED_BUY:
		{
			new dialog[145];
			format(dialog, sizeof dialog, "{E6F8E0}Vale, quieres comprar semillas de %s.\n{E6F8E0}El precio por semilla es de: %d$\n\n{E6F8E0}¿Cuántas semillas quieres comprar?", seed_info[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_SEED_ID] ][seed_info_NAME], seed_info[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_SEED_ID] ][seed_info_PRICE]);
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Semillas de la vida", dialog, "Seguir", "Atrás");
			return 1;
		}
		case DIALOG_PLANT_PLANTS:
		{
			new dialog[95 * (sizeof(seed_info) + 1)];
			format(dialog, sizeof dialog, "Planta\tSemilla requerida\tSemillas necesarias\n");
			
			for(new i = 0; i != sizeof plant_info; i ++)
			{
				new line_str[95];
				
				if(seed_info[i][seed_info_TYPE] == TYPE_LEGAL) format(line_str, sizeof line_str, "{009900}%s\t{E6F8E0}%s\t{E6F8E0}%d\n", plant_info[i][plant_info_NAME], seed_info[i][seed_info_NAME], plant_info[i][plant_info_SEEDS]);
				else format(line_str, sizeof line_str, "{FF3300}%s\t{E6F8E0}%s\t{E6F8E0}%d\n", plant_info[i][plant_info_NAME], seed_info[i][seed_info_NAME], plant_info[i][plant_info_SEEDS]);

				strcat(dialog, line_str);
			}
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "Plantar", dialog, "Seguir", "Cerrar");
		}
		case DIALOG_BLACK_MARKET:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "Mercado negro", "{E6F8E0}Comprar armas\n{E6F8E0}Comprar munición para mis armas", "Comprar", "Salir");
			return 1;
		}
		case DIALOG_BLACK_MARKET_WEAPONS:
		{
			new dialog[64 * (sizeof(BLACK_MARKT_WEAPONS) + 2)];
			format(dialog, sizeof dialog, "{E6F8E0}Producto\t{E6F8E0}Precio\n");
			
			for(new i = 0; i != sizeof BLACK_MARKT_WEAPONS; i ++)
			{
				new line_str[64];
				if(BLACK_MARKT_WEAPONS[i][black_market_EXP] > CHARACTER_INFO[playerid][ch_BLACK_MARKET_LEVEL])
				{
					format(line_str, sizeof line_str, "{666666}%s\t{666666}%s$\n", WEAPON_INFO[ BLACK_MARKT_WEAPONS[i][black_market_WEAPON_ID] ][weapon_info_NAME], number_format_thousand(BLACK_MARKT_WEAPONS[i][black_market_WEAPON_PRICE]));
					strcat(dialog, line_str);
				}
				else
				{
					format(line_str, sizeof line_str, "{E6F8E0}%s\t{E6F8E0}%s$\n", WEAPON_INFO[ BLACK_MARKT_WEAPONS[i][black_market_WEAPON_ID] ][weapon_info_NAME], number_format_thousand(BLACK_MARKT_WEAPONS[i][black_market_WEAPON_PRICE]));
					strcat(dialog, line_str);
				}
			}
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "Armas", dialog, "Comprar", "Salir");
			return 1;
		}
		case DIALOG_BLACK_MARKET_SELECT_WEA:
		{
			for(new i = 0; i != MAX_LISTITEMS; i ++) PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][i] = -1;
			
			new dialog[95 * 15], line_str[95], listitem;
			format(dialog, sizeof dialog, "{E6F8E0}Arma\t{90C3D4}Munición\t{E6F8E0}Slot\n");
			
			for(new i; i != 13; i ++)
			{
				if(!PLAYER_WEAPONS[playerid][i][player_weapon_VALID]) continue;
				
				format(line_str, sizeof line_str, "{E6F8E0}%s\t{90C3D4}%s\t{E6F8E0}%d\n", WEAPON_INFO[ PLAYER_WEAPONS[playerid][i][player_weapon_ID] ][weapon_info_NAME], number_format_thousand(PLAYER_WEAPONS[playerid][i][player_weapon_AMMO]), i);
				strcat(dialog, line_str);
				
				PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = i; 
				listitem ++;
			}
			if(listitem == 0) strcat(dialog, "{666666}No tienes armas");
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "Selecciona la arma a la que quieres comprarle munición", dialog, "Seguir", "Cerrar");
			return 1;
		}
		case DIALOG_BLACK_MARKET_AMMO:
		{
			new dialog[145];
			format(dialog, sizeof dialog, "Arma: %s\nMunición: %s\n\nEl precio por bala es de 3$\n¿Cuánto munición quiere comprar?", WEAPON_INFO[ PLAYER_WEAPONS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_DIALOG_WEAPON_SLOT] ][player_weapon_ID] ][weapon_info_NAME], number_format_thousand(PLAYER_WEAPONS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_DIALOG_WEAPON_SLOT] ][player_weapon_AMMO]));
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Comprar munición", dialog, "Seguir", "Cerrar");
			return 1;
		}
		case DIALOG_PLAYER_WEAPONS:
		{
			for(new i = 0; i != MAX_LISTITEMS; i ++) PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][i] = -1;
			
			new dialog[95 * 15], line_str[95], listitem;
			format(dialog, sizeof dialog, "{E6F8E0}Arma\t{90C3D4}Munición\t{E6F8E0}Slot\n");
			
			for(new i; i != 13; i ++)
			{
				if(!PLAYER_WEAPONS[playerid][i][player_weapon_VALID]) continue;
				
				format(line_str, sizeof line_str, "{E6F8E0}%s\t{90C3D4}%s\t{E6F8E0}%d\n", WEAPON_INFO[ PLAYER_WEAPONS[playerid][i][player_weapon_ID] ][weapon_info_NAME], number_format_thousand(PLAYER_WEAPONS[playerid][i][player_weapon_AMMO]), i);
				strcat(dialog, line_str);
				
				PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = i; 
				listitem ++;
			}
			strcat(dialog, "{c4290d}- Eliminar todo\n");
			PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = 13 + 20;
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, ""DEFAULT_DIALOG_CAPTION" - Mis armas", dialog, "Seguir", "Cerrar");
			return 1;
		}
		case DIALOG_PLAYER_WEAPONS_DELETE_A:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Mis armas - Eliminar todo", "¿Está seguro de que quiere eliminar todas sus armas?\nEsta opción no se puede deshacer.", "Eliminar", "Atrás");	
			return 1;
		}
		case DIALOG_PLAYER_WEAPONS_DELETE:
		{
			new dialog[150];
			format(dialog, sizeof dialog, "Arma: %s\nMunición: %s\n\n¿Está seguro de que quiere eliminar esta arma?\nEsta opción no se puede deshacer.", WEAPON_INFO[ PLAYER_WEAPONS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_DIALOG_WEAPON_SLOT] ][player_weapon_ID] ][weapon_info_NAME], number_format_thousand(PLAYER_WEAPONS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_DIALOG_WEAPON_SLOT] ][player_weapon_AMMO]));
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Mis armas - Eliminar arma", dialog, "Eliminar", "Atrás");	
			return 1;
		}
		case DIALOG_ANIMS: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "Animaciones", DIALOG_ANIMS_String, "Seguir", "X");
		case DIALOG_TRICKS_FOOD:
		{	
			new dialog[150];
			format(dialog, sizeof dialog, "%s te quiere vender algo.\n\nTipo: Alimento\nNombre: %s\nPrecio: %s$\n\n¿Quieres comprárselo?",
									PLAYER_TEMP[ PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID] ][pt_RP_NAME],
									PLAYER_POCKET[ PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID] ][ PLAYER_TEMP[playerid][pt_TRICK_SELLER_EXTRA] ][player_pocket_object_NAME],
									number_format_thousand(PLAYER_TEMP[playerid][pt_TRICK_PRICE])
								);
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Ventas", dialog, "Aceptar", "Cancelar");	
			return 1;
		}
		case DIALOG_TRICKS_MEDICINE:
		{	
			new dialog[150];
			format(dialog, sizeof dialog, "%s te quiere vender algo.\n\nTipo: Medicamento\nCantidad: %dg\nPrecio: %s$\n\n¿Quieres comprárselo?",
									PLAYER_TEMP[ PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID] ][pt_RP_NAME],
									PLAYER_TEMP[playerid][pt_TRICK_SELLER_EXTRA],
									number_format_thousand(PLAYER_TEMP[playerid][pt_TRICK_PRICE])
								);
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Ventas", dialog, "Aceptar", "Cancelar");	
			return 1;
		}
		case DIALOG_TRICKS_CANNABIS:
		{	
			new dialog[150];
			format(dialog, sizeof dialog, "%s te quiere vender algo.\n\nTipo: Marihuana\nCantidad: %dg\nPrecio: %s$\n\n¿Quieres comprárselo?",
									PLAYER_TEMP[ PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID] ][pt_RP_NAME],
									PLAYER_TEMP[playerid][pt_TRICK_SELLER_EXTRA],
									number_format_thousand(PLAYER_TEMP[playerid][pt_TRICK_PRICE])
								);
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Ventas", dialog, "Aceptar", "Cancelar");	
			return 1;
		}
		case DIALOG_TRICKS_CRACK:
		{	
			new dialog[150];
			format(dialog, sizeof dialog, "%s te quiere vender algo.\n\nTipo: Crack\nCantidad: %dg\nPrecio: %s$\n\n¿Quieres comprárselo?",
									PLAYER_TEMP[ PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID] ][pt_RP_NAME],
									PLAYER_TEMP[playerid][pt_TRICK_SELLER_EXTRA],
									number_format_thousand(PLAYER_TEMP[playerid][pt_TRICK_PRICE])
								);
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Ventas", dialog, "Aceptar", "Cancelar");	
			return 1;
		}
		case DIALOG_TRICKS_SU:
		{	
			new dialog[150];
			format(dialog, sizeof dialog, "%s te quiere vender %d "SERVER_COIN"\nPrecio: %s$\n\n¿Quieres comprárselo?",
									PLAYER_TEMP[ PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID] ][pt_RP_NAME],
									PLAYER_TEMP[playerid][pt_TRICK_SELLER_EXTRA],
									number_format_thousand(PLAYER_TEMP[playerid][pt_TRICK_PRICE])
								);
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Ventas", dialog, "Aceptar", "Cancelar");	
			return 1;
		}
		case DIALOG_TRICKS_WEAPON:
		{	
			new dialog[180];
			format(dialog, sizeof dialog, "%s te quiere vender algo.\n\nTipo: Arma\nNombre: %s\nMunición: %s\nPrecio: %s$\n\n¿Quieres comprárselo?",
									PLAYER_TEMP[ PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID] ][pt_RP_NAME],
									WEAPON_INFO[ PLAYER_WEAPONS[ PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID] ][ PLAYER_TEMP[playerid][pt_TRICK_SELLER_EXTRA] ][player_weapon_ID] ][weapon_info_NAME],
									number_format_thousand(PLAYER_WEAPONS[ PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID] ][ PLAYER_TEMP[playerid][pt_TRICK_SELLER_EXTRA] ][player_weapon_AMMO]),
									number_format_thousand(PLAYER_TEMP[playerid][pt_TRICK_PRICE])
								);
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Ventas", dialog, "Aceptar", "Cancelar");	
			return 1;
		}
		case DIALOG_VEHICLE_BOOT:
		{
			for(new i = 0; i != MAX_LISTITEMS; i++ ) PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][i] = -1;
	
			new max_slots = VEHICLE_INFO[GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE] ][gb_vehicle_MODELID] - 400][vehicle_info_BOOT_SLOTS];
			if(max_slots > MAX_BOOT_SLOTS) max_slots = MAX_BOOT_SLOTS;
			
			new dialog[128 * (MAX_BOOT_SLOTS + 2)], line_str[128], listitem;
			format(dialog, sizeof dialog, "Arma\tMunición\tSlot\n");
			
			for(new i = 0; i != max_slots; i ++)
			{
				if(VEHICLE_BOOT[ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE] ][i][vehicle_boot_VALID])
				{
					switch(VEHICLE_BOOT[ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE] ][i][vehicle_boot_TYPE])
					{
						case BOOT_TYPE_WEAPON:
						{
							format(line_str, sizeof line_str, "{E6F8E0}%s\t{E6F8E0}%s\t{E6F8E0}%d\n", WEAPON_INFO[ VEHICLE_BOOT[ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE] ][i][vehicle_boot_INT] ][weapon_info_NAME], number_format_thousand(VEHICLE_BOOT[ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE] ][i][vehicle_boot_INT_EXTRA]), i);
							strcat(dialog, line_str);
							PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = i;
						}
					}
					
					listitem ++;
				}
			}
			
			new caption[64];
			format(caption, sizeof caption, "Maletero de %s (%d espacios disponibles)", VEHICLE_INFO[GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE] ][gb_vehicle_MODELID] - 400][vehicle_info_NAME], max_slots - listitem);
			
			PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = MAX_BOOT_SLOTS + 20;
			strcat(dialog, "{c4290d}- Eliminar todo\n"); listitem ++;
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, caption, dialog, "Seguir", "Cerrar");
		}
		case DIALOG_VEHICLE_BOOT_DELETE_ALL: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Maletero - Eliminar todo", "¿Está seguro de que quiere eliminar todo de su maletero?\nEsta opción no se puede deshacer.", "Eliminar", "Cancelar");	
		case DIALOG_VEHICLE_BOOT_OPTIONS:
		{
			new caption[45];
			format(caption, sizeof caption, "Maletero - %s", WEAPON_INFO[ VEHICLE_BOOT[ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE] ][ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE_BOOT_SLOT] ][vehicle_boot_INT] ][weapon_info_NAME]);
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, "{E6F8E0}1. Sacar\n{E6F8E0}2. Eliminar", "Seguir", "Atrás");	
			return 1;
		}
		case DIALOG_VEHICLE_BOOT_DELETE:
		{
			new dialog[190];
			format(dialog, sizeof dialog, "Arma: %s\nMunición: %s\n\n¿Está seguro de que quiere eliminar esta arma de este maletero?\nEsta opción no se puede deshacer.", WEAPON_INFO[ VEHICLE_BOOT[ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE] ][ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE_BOOT_SLOT] ][vehicle_boot_INT] ][weapon_info_NAME], number_format_thousand( VEHICLE_BOOT[ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE] ][ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE_BOOT_SLOT] ][vehicle_boot_INT_EXTRA] ));
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Maletero - Eliminar", dialog, "Eliminar", "Atrás");
			return 1;
		}
		case DIALOG_SELECT_POLICE_SKIN:
		{
			for(new i = 0; i != MAX_LISTITEMS; i++ ) PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][i] = -1;
			
			new dialog[60 * sizeof(POLICE_SKINS)], line_str[60], listitem;
			format(dialog, sizeof dialog, "{E6F8E0}Ropa\t{E6F8E0}Rango necesario\n");
			for(new i = 0; i != sizeof POLICE_SKINS; i ++)
			{
				if(POLICE_SKINS[i][police_skin_TYPE] != CHARACTER_INFO[playerid][ch_SEX]) continue;
				
				if(POLICE_SKINS[i][police_skin_RANK] > PLAYER_SKILLS[playerid][WORK_POLICE]) format(line_str, sizeof line_str, "{666666}%d\t{666666}%s\n", POLICE_SKINS[i][police_skin_SKIN], POLICE_RANKS[ POLICE_SKINS[i][police_skin_RANK] ]);
				else format(line_str, sizeof line_str, "{E6F8E0}%d\t{E6F8E0}%s\n", POLICE_SKINS[i][police_skin_SKIN], POLICE_RANKS[ POLICE_SKINS[i][police_skin_RANK] ]);
				strcat(dialog, line_str);
				
				PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = i;
				listitem ++;
			}
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "Selecciona la ropa", dialog, "Seguir", "Cerrar");
			return 1;
		}
		case DIALOG_POLICE_RADIOS:
		{
			new dialog[45 * 6], line_str[45];
			for(new i = 0; i != 6; i ++)
			{
				new players = CountPoliceRadioPlayers(i);
				
				if(PLAYER_TEMP[playerid][pt_POLICE_RADIO] == i) format(line_str, sizeof line_str, "{E6F8E0}Frecuencia %d: %d personas\n", i + 1, players);
				else format(line_str, sizeof line_str, "{666666}Frecuencia %d: %d personas\n", i, players);
				
				strcat(dialog, line_str);
			}
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "Selecciona la frecuencia", dialog, "Seguir", "Cerrar");
			return 1;
		}
		case DIALOG_POLICE_LIST:
		{
			for(new i = 0; i != MAX_LISTITEMS; i++ ) PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][i] = -1;
			
			new dialog[128 * 15], listitem, start_pos = PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] * PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT] + 1;
			format(dialog, sizeof dialog, "{E6F8E0}Nombre\t{E6F8E0}Rango\t{E6F8E0}Últ. conexión\n");
			
			new DBResult:Result, DB_Query[600];
			format(DB_Query, sizeof DB_Query, "SELECT `CUENTA`.`ID`, `CUENTA`.`NAME`, `CUENTA`.`LAST_CONNECTION`, `CUENTA`.`CONNECTED`, `PLAYER_SKILLS`.`TOTAL` FROM `CUENTA`, `PLAYER_SKILLS`, `PLAYER_WORKS` WHERE `PLAYER_SKILLS`.`ID_USER` = `CUENTA`.`ID` AND `PLAYER_SKILLS`.`ID_WORK` = '%d' AND `PLAYER_WORKS`.`ID_USER` = `CUENTA`.`ID` AND `PLAYER_WORKS`.`ID_WORK` = '%d' AND `PLAYER_WORKS`.`SET` = '1' ORDER BY `CUENTA`.`CONNECTED` DESC, `PLAYER_SKILLS`.`TOTAL` DESC LIMIT %d, %d;", WORK_POLICE, WORK_POLICE, PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] * PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT], PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT]);
			Result = db_query(Database, DB_Query);
			
			for(new i; i < db_num_rows(Result); i++ )
			{
				new name[24], last_connection[24], connected, rank;
				
				PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = db_get_field_assoc_int(Result, "ID");
				db_get_field_assoc(Result, "NAME", name, 24);
				db_get_field_assoc(Result, "LAST_CONNECTION", last_connection, 256);
				connected = db_get_field_assoc_int(Result, "CONNECTED");
				rank = db_get_field_assoc_int(Result, "TOTAL");

				new line_str[128];
				if(connected) format(line_str, sizeof line_str, "{E6F8E0}%d. %s\t{E6F8E0}%s\t{98f442}Conectado\n", start_pos + listitem, name, POLICE_RANKS[rank]);
				else format(line_str, sizeof line_str, "{E6F8E0}%d. %s\t{E6F8E0}%s\t{E6F8E0}%s\n", start_pos + listitem, name, POLICE_RANKS[rank], last_connection);
				
				strcat(dialog, line_str);
				listitem ++;
				
				db_next_row(Result);
			}
			db_free_result(Result);
			
			PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = -2;
			strcat(dialog, "{c9c9c9}- Siguiente\n"); listitem ++;
			
			PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = -3;
			strcat(dialog, "{c9c9c9}- Anterior\n"); listitem ++;
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "Policías", dialog, "Seguir", "Cerrar");
			return 1;
		}
		case DIALOG_POLICE_MODIFY:
		{
			new DBResult:Result, DB_Query[256], name[24], current_rank, bool:found;
			format(DB_Query, sizeof DB_Query, "SELECT `CUENTA`.`NAME`, `PLAYER_SKILLS`.`TOTAL` FROM `CUENTA`, `PLAYER_SKILLS` WHERE `CUENTA`.`ID` = '%d' AND `PLAYER_SKILLS`.`ID_USER` = `CUENTA`.`ID` AND `PLAYER_SKILLS`.`ID_WORK` = '%d';", PLAYER_TEMP[playerid][pt_SELECTED_DB_AC_ID], WORK_POLICE);
			Result = db_query(Database, DB_Query);
			
			if(db_num_rows(Result))
			{
				db_get_field_assoc(Result, "NAME", name, 24);
				current_rank = db_get_field_assoc_int(Result, "TOTAL");
				found = true;
			}
			else found = false;
			db_free_result(Result);
			
			if(!found) return 1;
			if(current_rank > PLAYER_SKILLS[playerid][WORK_POLICE])
			{
				SendClientMessage(playerid, -1, "{00FF80}No puedes modificar el rango de este policía porque es un rango superior al tuyo.");
				return 1;
			}
			
			new caption[45];
			format(caption, sizeof caption, "Policía - %s", name);
			
			new dialog[45 * sizeof(POLICE_RANKS)], line_str[45];
			format(dialog, sizeof dialog, "{E6F8E0}Civil (eliminar)\n");

			for(new i = 1; i != sizeof POLICE_RANKS; i ++)
			{
				if(i > PLAYER_SKILLS[playerid][WORK_POLICE])
				{
					if(current_rank == i) format(line_str, sizeof line_str, "{666666}%s (actual)\n", POLICE_RANKS[i]);
					else format(line_str, sizeof line_str, "{666666}%s\n", POLICE_RANKS[i]);
				}
				else
				{
					if(current_rank == i) format(line_str, sizeof line_str, "{E6F8E0}%s (actual)\n", POLICE_RANKS[i]);
					else format(line_str, sizeof line_str, "{E6F8E0}%s\n", POLICE_RANKS[i]);
				}
				strcat(dialog, line_str);
			}
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, dialog, "Seguir", "Atrás");
			return 1;
		}
		case DIALOG_POLICE_SHOP:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "Equiparse", "{E6F8E0}Comprar armas\n{E6F8E0}Comprar munición para mis armas\n{E6F8E0}Comprar chaleco antibalas", "Comprar", "Salir");
			return 1;
		}
		case DIALOG_POLICE_SELECT_WEAPON:
		{
			for(new i = 0; i != MAX_LISTITEMS; i ++) PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][i] = -1;
			
			new dialog[95 * 15], line_str[95], listitem;
			format(dialog, sizeof dialog, "{E6F8E0}Arma\t{90C3D4}Munición\t{E6F8E0}Slot\n");
			
			for(new i; i != 13; i ++)
			{
				if(!PLAYER_WEAPONS[playerid][i][player_weapon_VALID]) continue;
				
				format(line_str, sizeof line_str, "{E6F8E0}%s\t{90C3D4}%s\t{E6F8E0}%d\n", WEAPON_INFO[ PLAYER_WEAPONS[playerid][i][player_weapon_ID] ][weapon_info_NAME], number_format_thousand(PLAYER_WEAPONS[playerid][i][player_weapon_AMMO]), i);
				strcat(dialog, line_str);
				
				PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = i; 
				listitem ++;
			}
			if(listitem == 0) strcat(dialog, "{666666}No tienes armas");
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "Selecciona la arma a la que quieres comprarle munición", dialog, "Seguir", "Cerrar");
			return 1;
		}
		case DIALOG_POLICE_AMMO:
		{
			new dialog[145];
			format(dialog, sizeof dialog, "Arma: %s\nMunición: %s\n\nEl precio por bala es de 2$\n¿Cuánto munición quiere comprar?", WEAPON_INFO[ PLAYER_WEAPONS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_DIALOG_WEAPON_SLOT] ][player_weapon_ID] ][weapon_info_NAME], number_format_thousand(PLAYER_WEAPONS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_DIALOG_WEAPON_SLOT] ][player_weapon_AMMO]));
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Comprar munición", dialog, "Seguir", "Cerrar");
			return 1;
		}
		case DIALOG_POLICE_ARMOUR:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Comprar chaleco", "El precio del chaleco antibalas es de 300$.\n¿Lo quieres comprar?", "Seguir", "Cerrar");
			return 1;
		}
		case DIALOG_POLICE_WEAPONS:
		{
			new dialog[64 * (sizeof(POLICE_SHOP_WEAPONS) + 2)];
			format(dialog, sizeof dialog, "{E6F8E0}Producto\t{E6F8E0}Precio\n");
			
			for(new i = 0; i != sizeof POLICE_SHOP_WEAPONS; i ++)
			{
				new line_str[64];
				if(POLICE_SHOP_WEAPONS[i][police_shop_RANK] > PLAYER_SKILLS[playerid][WORK_POLICE])
				{
					format(line_str, sizeof line_str, "{666666}%s\t{666666}%s$\n", WEAPON_INFO[ POLICE_SHOP_WEAPONS[i][police_shop_WEAPON_ID] ][weapon_info_NAME], number_format_thousand(POLICE_SHOP_WEAPONS[i][police_shop_WEAPON_PRICE]));
					strcat(dialog, line_str);
				}
				else
				{
					format(line_str, sizeof line_str, "{E6F8E0}%s\t{E6F8E0}%s$\n", WEAPON_INFO[ POLICE_SHOP_WEAPONS[i][police_shop_WEAPON_ID] ][weapon_info_NAME], number_format_thousand(POLICE_SHOP_WEAPONS[i][police_shop_WEAPON_PRICE]));
					strcat(dialog, line_str);
				}
			}
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "Armas", dialog, "Comprar", "Salir");
			return 1;
		}
		case DIALOG_HELP:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "| AYUDA |",
			
				"\
					{81DAF5}Ayuda{2ECCFA} en General\n\
					{81DAF5}Ayuda{2ECCFA} del Personaje\n\
					{81DAF5}Ayuda{2ECCFA} Propiedades\n\
					{81DAF5}Ayuda{2ECCFA} Reportar\n\
					{81DAF5}Ayuda{2ECCFA} Trabajos\n\
					{81DAF5}Ayuda{2ECCFA} Vehículos\n\
					{81DAF5}Ayuda{2ECCFA} Bandas\n\
					{81DAF5}Ayuda{2ECCFA} Membresias VIP\n\
					{81DAF5}Ayuda{2ECCFA} Negocios\n\
					{81DAF5}Ayuda{2ECCFA} Puntos RP\n\
					{81DAF5}Ayuda{2ECCFA} Atajos chat\n\
				"
			
			, "Seguir", "Cerrar");
			return 1;
		}
		case DIALOG_HELP_CHAT:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, " | Atajos del chat | ",
			
				"\
					{FFFFFF}Atajos:\n\
					\n\
					Para resaltar una accion usa - o * seguido del texto, Ejemplo:\n\n\
					Hola mundo - Alegre\n\
					Hola mundo * Pensativo\n\n\
					Para gritar usa ¡ Seguido del texto, ejemplo:\n\
					¡ Hola a todos, se vera reflejado de esta forma: ¡ Hola a todos !\n\n\
					Para hacer una pregunta usa ? seguido del texto, ejemplo:\n\
					? Hoy hace un bonito dia, se vera reflejado de esta forma: ¿Hoy hace un bonito dia?.\n\n\
					Mencionar a un jugador en el canala de dudas para que su nombre lo vea el resaltado:.\n\
					Michael_Angelus, usa /Ayuda\n\
				"
			, "Salir", "");
			return 1;
		}
		case DIALOG_HELP_RP_:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, " | Puntos RP | ",
			
				"\
					{FFFFFF}Como comprar puntos RP?:\n\
					\n\
					Los puntos rp se compran con dinero OOC (Dinero real)\n\n\
					Metodos.\n\
					- Paypal (Compras mayor a 3 USD = 10 RP)\n\
					- WesternUnion (Compras mayor a 10 USD = 45 RP)\n\
					- Efecty (Compras mayor a [35.000 COP = 45 RP])\n\
					- Nequi (Compras mayor a [10.000 COP = 10 RP])\n\
					- Oxxo (Compras mayor a [211 MX = 45 RP] )\n\
					- Pagofacil/Rapipago (Compras mayor a [475 ARS = 45 RP])\n\
					\n\
					Precios:\n\
					3 USD = 10 RP\n\
					5 USD = 20 RP\n\
					10 USD = 45 RP\n\
					20 USD = 100 RP\n\
					30 USD = 220 RP\n\
					40 USD = 350 RP\n\
					\n\
					\n\
					Rango admin \n\
					Moderador = 30 USD\n\
					\n\
					\n\
					Los puntos RP te sirven para comprar\n- Vehiculos unicos.\n\
					- membresia Vip1-2\n\
					- Fabulosas casas\n\
					- Accesorios unicos\n\
					- Acceder a la tiendarp /TIENDARP\n\
					- Mapeos para las casas y apartamentos por dentro\n\
					- Mapeos paras las casas por fuera\n\
					- Cambiar texturas a las casas, apartamentos, techo,piso,paredes etc..\n\n\
					Contacto:\n- Vacio\n\
				"
			, "Salir", "");
			return 1;
		}
		case DIALOG_HELP_GENERAL:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, " | General | ",
			
				"\
					{FFFFFF}En un día completo dura tres horas reales.\n\
					\n\
					Para subir de nivel necesitas rellenar la reputación, puedes verlo gráficamente\n\
					en la barra que aparece en la parte superior derecha que representa tu reputación.\n\
					La reputación se aumenta cada {FF846A}25 minutos,{FFFFFF} cuando la reputación llegue\n\
					al límite podrás subir al siguiente nivel con el comando {E6F8E0}/comprarnivel.\n\
					{FFFFFF}El pago de juego(payday) se recibe cada tres reputaciones{FF846A}(75 minutos).\n\
					\n\
					Utiliza {E6F8E0}/estadisticas{FFFFFF} para ver tus estadísticas, utiliza {E6F8E0}/exp{FFFFFF} para ver tus habilidades.\n\
					En el nivel uno no podrás agredir a otros jugadores, tampoco podrás tener armas\n\
					hasta el nivel tres.\n\
					Utiliza {E6F8E0}/pass{FFFFFF} para cambiar la contraseña de tu cuenta.\n\
					Para ver el tiempo que te queda en la cárcel utiliza {E6F8E0}/tiempo.\n\
					\n\
					{FFFFFF}Para utilizar el canal de dudas utiliza el comando {E6F8E0}/duda{FFFFFF} seguido de tu duda.\n\
					Para deshabilitar o volver a habilitar el canal de dudas usa {E6F8E0}/dudas.\n\
					\n\
					"R"Ayuda teclas\n\
					\n Manten "R"Y"W" para abrir el menu del vehiculo\n\
					\n\
					{FFFFFF}Utiliza {E6F8E0}/panel {FFFFFF}para configuraciones básicas de tu cuenta.\n\
					\n\
				"
			, "Salir", "");
			return 1;
		}
		case DIALOG_HELP_CHARACTER:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, " | Personaje | ",
			
				"\
					{FFFFFF}Para poder localizar cualquier punto en San Andreas te recomandamos que compres\n\
					un GPS en cualquier tienda {FF846A}24/7.{FFFFFF} Desde el GPS podrás localizarlo todo, tus vehículos,\n\
					tus propiedades, trabajos, lugares de interés, etc.\n\
					\n\
					Utiliza tu teléfono para llamar a la policía, mecánico, taxi... o para hablar con\n\
					alguien, por defecto tendrás varios contactos en la agenda pero puedes eliminarlos\n\
					o añadir más, puedes tener hasta 20 contactos, todo esto se hace desde {E6F8E0}/movil{FFFFFF} o {E6F8E0}/celular.\n\
					\n\
					{FFFFFF}En las tiendas {FF846A}24/7{FFFFFF} puedes comprar guías para saber el número de cualquier jugador.\n\
					Para evitar aparecer en la guía utiliza {E6F8E0}/sguia.\n\
					\n\
					{FFFFFF}Las barras debajo del dinero representan tu deshidratación, hambre, y cansancio,\n\
					si los niveles llegan muy abajo tu personaje se empezará a sentir mal y empezarás a perder vida.\n\
					Para recuperar el cansancion debes ir a un hotel, estan ubicados por todo LS\n\
					Los niveles bajarán según tu actividad física, corriendo te dará sed más pronto que caminando.\n\
					Para alimentarte ve a un restaurante de cómida rápida o a un {FF846A}24/7{FFFFFF} donde podrás comprar alimentos,\n\
					que podrás consumir el cualquier momento desde el inventario.\n\
					\n\
					{FFFFFF}Puedes dar objetos con el comando {E6F8E0}/dar,{FFFFFF} para más información utiliza {E6F8E0}/man dar.\n\
					{FFFFFF}Puedes deshacerte de tus objetos con el comando {E6F8E0}/tirar,{FFFFFF} para más información utiliza {E6F8E0}/man tirar.\n\
					{FFFFFF}Puedes vender objetos con el comando {E6F8E0}/vender, para más información utiliza {E6F8E0}/man vender.\n\
					{FFFFFF}Para consumir consumibles que lleves contigo abre el inventario.\n\
					\n\
					{FFFFFF}Puedes cambiar la ropa de tu personaje en cualquier tienda de ropa, también\n\
					podrás comprarte accesorios y ponertelos o quitartelos{E6F8E0}(/accesorios).\n\
					tambien puedes comprar accesorios unicos y coleccionables desde /AC puedes ponertelos desde cualquier lugar, tambien puedes cambiarle el color.\n\
					\n\
					{FFFFFF}Si tienes nivel de búsqueda o estás arrestado y mueres irás a la cárcel después de recuperarte.\n\
					Cuando te arresten los policías te pueden requisar tus pertenencias ilegales{FF846A}(armas y drogas).\n\
					\n\
					{FFFFFF}Abre el inventario para ver todo lo que llevas encima.\n\
					{FFFFFF}Utiliza {E6F8E0}/estilo{FFFFFF} para cambiar el estilo de tu personaje.\n\
					\n\
				"
			, "Salir", "");
			return 1;
		}
		case DIALOG_HELP_PROPERTIES:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, " | Propiedades | ",
			
				"\
					{FFFFFF}Puedes encontrar diferentes propiedades en todo {FF846A}San Andreas,{FFFFFF} para comprarla posicionate\n\
					en la posicion de la casa o departamento y sigue las instrucciones.\n\
					\n\
					Puedes localizar tus propiedades con el GPS.\n\
					Puedes dejar pasar a cualquiera a tu propiedad, solo tiene que tocar el timbre\n\
					y tu elijes si quieres dejarlo pasar o no.\n\
					\n\
					Si quieres echar a alguien que esté dentro de tu propiedad utiliza el comando {E6F8E0}/echar.\n\
					{FFFFFF}puedes cambiar las texturas o colores de las paredes techo piso, etc {E6F8E0}/casa,{FFFFFF} desde ahí podras\n\
					Para verder la propiedad solo debes hacerlo desde tu casa ya sea al banco a otro jugador.\n\
					{FFFFFF}También podrás echar a todos los huéspedes de tu propiedad.\n\
					Si tienes un MP3 podrás poner música en él y hacer que se reproduzca para toda la gente\n\
					que haya dentro de la propiedad.\n\n\
					Puedes guardar o extraer tus armas en la armeria de tu casa, pero ten cuidado a quien dejes pasar porque podra usar tu armeria\n\n\
					Puedes guardar o extraer la comida en la nevera\n\n\
					Puedes darle las llaves de tu casa a otro jugador desde el menu de la casa para que entre cuando quiera\n\n\
					Algunas casas cuentan con garaje es decir que podras guardar tus vehiculos ahi\n\
					cualquier jugador que tenga las llaves de tu casa podra entrar al garaje\n\
				"
			, "Salir", "");
			return 1;
		}
		case DIALOG_HELP_REPORT:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, " | Reportar | ",
			
				"\
					{FFFFFF}Para un reporte simple utiliza {E6F8E0}/reportar ID{FFFFFF} para reportar a un jugador.\n\
					\n\
					Para reportes más detallado debes publicarlos en el foro aportando imágenes.\n\
					Los reportes de fallos o bugs también deberás hacerlo en el foro junto con imágenes.\n\
					\n\
				"
			, "Salir", "");
			return 1;
		}
		case DIALOG_HELP_VEHICLES:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "| Vehiculos |",
			
				"\
					{FF846A}GENERAL\n\
					{FFFFFF}Para arrancar o detener un vehículo utiliza la tecla{E6F8E0}'2'.\n\
					{FFFFFF}Utiliza {E6F8E0}/luces{FFFFFF} para encender o apagar las luces del vehículos.\n\
					Si tu vehículo se daña tendrás que llamar a un mecánico desde tu móvil para que lo repare.\n\
					\n\
					Cada vehículo tiene su cantidad máxima del depósito de gasolina.\n\
					Para repostar el vehículo debes ir a cualquier gasolinera, puedes localizarlas con el GPS.\n\
					También puedes comprar un bidón de gasolina para {E6F8E0}/vertir{FFFFFF} gasolina en cualquier momento.\n\
					Si tienes un MP3 puedes poner una canción en el vehículo con el comando {E6F8E0}/vmp3.\n\
					\n\
					Cada vehículo tiene su cantidad máxima de aceite.\n\
					Para repostar el vehículo de aceite debes ir con los mecanicos\n\
					De quedarte sin aceite en el camino debes llamar a un mecanico desde tu movil.\n\n\
					Si tienes un MP3 puedes poner una canción en el vehículo con el comando {E6F8E0}/vmp3.\n\
					\n\
					{FF846A}VEHICULOS PERSONALES\n\
					{FFFFFF}Para comprarlos ve a cualquier concesionario.\n\
					El dinero para comprarlo es el de la cuenta bancaria.\n\
					Para localizar tus vehículos utiliza el GPS.\n\
					\n\
					Utiliza {E6F8E0}/abrir{FFFFFF} para abrir las puertes de tu vehículo, utiliza {E6F8E0}/cerrar{FFFFFF} para cerrarlas.\n\
					Puedes estacionar tu vehículo con el comando {E6F8E0}/estacionar.\n\
					{FFFFFF}Cuando tu vehículo sea destruido recibirás uno nuevo en tu último estacionamiento.\n\
					Para pintar, tunear o modificar tu vehículo tendrás que hacerlo en el mecánico.\n\
					\n\
					Puedes guardar armas en el maletero del vehículo con el comando {E6F8E0}/guardar.\n\
					{FFFFFF}Para extraer armas del maletero puedes utilizar {E6F8E0}/maletero {FFFFFF}o {E6F8E0}/sacar.\n\
					\n\
					{FFFFFF}Si quieres vender tu vehículo puedes hacerlo en \"Gobierno San Andreas\", localizaló en el GPS.\n\
					Puedes venderselo al banco, pero te darán solo el 25% de lo que te costó (50% VIP).\n\
					También se la puedes vender a otro jugador, dentro de un rango de precio pre-establecido.\n\
					Para vender tu vehículo a un jugador puedes ponerlo en {E6F8E0}/tienda.\n\
					{FFFFFF}Al vender tu vehículo se venderá con todo lo que haya en el maletero.\n\
					\n\
				"
			, "Salir", "");
			return 1;
		}
		case DIALOG_HELP_WORKS:
		{
			new dialog[45 * sizeof work_info], line_str[45];
			for(new i = 1; i != sizeof work_info; i ++)
			{
				format(line_str, sizeof line_str, "{E6F8E0}- %c%s\n", toupper(work_info[i][work_info_NAME][0]), work_info[i][work_info_NAME][1]);
				strcat(dialog, line_str);
			}
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "Trabajos", dialog, "Seguir", "Cerrar");
			return 1;
		}
		case DIALOG_HELP_CREWS:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "| Bandas |",
			
				"\
					{FFFFFF}Utiliza {E6F8E0}/banda{FFFFFF} para crear una banda o administrar la tuya.\n\
					{FFFFFF}Al entrar a una banda puedes conquistar territorios por todo San Andreas.\n\
					\n\
					{FFFFFF}Visita {FF846A}"SERVER_WEBSITE" {FFFFFF}para más información.\n\
					\n\
				"
			
			, "Salir", "");
			return 1;
		}
		case DIALOG_HELP_SU:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "| Membresia Vip |",
			
				"\
					{E6F8E0}Puedes comprar VIP por 30 días con el comando /vip.\n\
					{E6F8E0}Se compra con "SERVER_COIN", para ver como comprar esta moneda visita nuestra web.\n\
					\n\
					{f4dc42}Ventajas Nivel 1\n\
					{E6F8E0}- No pierdes armas ni crack al morir.\n\
					{E6F8E0}- Ganas $ 5000 en cada PD.\n\
					{E6F8E0}- Tener 3 trabajos.\n\
					{E6F8E0}- Tener 2 vehículos.\n\
					{E6F8E0}- Tener 20 /amigos.\n\
					{E6F8E0}- No pagas seguro de propiedades ni vehículos en el Payday.\n\
					{E6F8E0}- No pierdes chaleco al morir.\n\
					{E6F8E0}- Al vender un vehículo o propiedad al banco recibes un 50%.\n\
					{E6F8E0}- Te recuperas el doble de rápido en el hospital.\n\
					{E6F8E0}- Al recuperarte tu vida es del 50%.\n\
					{E6F8E0}- Reducción de la condena en un 25%.\n\
					{E6F8E0}- Cuando un médico te cura vida al 50%.\n\
					{E6F8E0}- Comprar armas en mercado negro sin pertenecer a banda.\n\
					{E6F8E0}- Comprar armas sin esperar 5 minutos por cada compra.\n\
					{E6F8E0}- Pagas extras de 300$ en algunos trabajos.\n\
					\n\n\
					{f4dc42}Ventajas Nivel 2\n\
					{E6F8E0}- Guardar 12 items en la nevera.\n\
					{E6F8E0}- Guardar 12 items en el closet.\n\
					{E6F8E0}- Guardar 12 items en la armeria.\n\
					{E6F8E0}- Comprar hasta 3 negocios.\n\
					{E6F8E0}- Ganas $ 10000 en cada PD.\n\
					{E6F8E0}- Tener 3 trabajos.\n\
					{E6F8E0}- Tener 4 vehículos.\n\
					{E6F8E0}- Puedes comprar hasta 3 negocios.\n\
					{E6F8E0}- No pagas seguro de propiedades ni vehículos en el Payday.\n\
					{E6F8E0}- No pierdes chaleco al morir.\n\
					{E6F8E0}- Al vender un vehículo o propiedad al banco recibes un 50%.\n\
					{E6F8E0}- Te recuperas el doble de rápido en el hospital.\n\
					{E6F8E0}- Al recuperarte tu vida es del 100%.\n\
					{E6F8E0}- Reducción de la condena a la mitad.\n\
					{E6F8E0}- Cuando un médico te cura vida al 100%.\n\
					{E6F8E0}- Comprar armas en mercado negro sin pertenecer a banda.\n\
					{E6F8E0}- Comprar armas sin esperar 5 minutos por cada compra.\n\
					{E6F8E0}- Pagas extras de 600$ en algunos trabajos.\n\
					{E6F8E0}- Camiones adicionales para el trabajo de camionero.\n\
					{E6F8E0}- Reduccion de hambre, sed, y cansancio en un 50%.\n\
					\n\
					{E6F8E0}Visita {f4dc42}"SERVER_WEBSITE" {E6F8E0}para más información.\n\
					\n\
				"
			
			, "Salir", "");
			return 1;
		}
		case DIALOG_HELP_NEGOCIOS:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "| Negocios |",
			
				"\
					{E6F8E0}Puedes comprar cualquier negocio, esta ubicados por todo GTA SA.\n\
					{E6F8E0}Se compra con dinero del servidor.\n\
					\n\
					{E6F8E0}Cada negocio tiene productos diferentes, cualquier negocio se puede robar\n\
					{E6F8E0}Cada negocio tiene su IVA ese iva sera tu ganancia.\n\
					{E6F8E0}Puedes sustraer esa ganancia desde el negocio con /Negocio.\n\
					{E6F8E0}Puedes vender el negocio al gobierto del juego desde el negocio.\n\
					{E6F8E0}Puedes vender el negocio por "SERVER_COIN" o dinero del servidor a otro jugador.\n\
					{E6F8E0}Puedes cambiar el iva a los productos.\n\
					{E6F8E0}Cuando un negocio es robado se cierra por un tiempo determinado\n\
					\n\
				"
			
			, "Salir", "");
			return 1;
		}
		case DIALOG_ADMIN_LIST:
		{
			for(new i = 0; i != MAX_LISTITEMS; i++ ) PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][i] = -1;
			
			new dialog[128 * 15], listitem, start_pos = PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] * PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT] + 1;
			format(dialog, sizeof dialog, "{E6F8E0}Nombre\t{E6F8E0}Rango\t{E6F8E0}Últ. conexión\n");
			
			new DBResult:Result, DB_Query[400];
			format(DB_Query, sizeof DB_Query, "SELECT `ID`, `NAME`, `LAST_CONNECTION`, `CONNECTED`, `ADMIN_LEVEL` FROM `CUENTA` WHERE `ADMIN_LEVEL` > 0 ORDER BY `CONNECTED` DESC, `ADMIN_LEVEL` DESC LIMIT %d, %d;", PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] * PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT], PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT]);
			Result = db_query(Database, DB_Query);
			
			for(new i; i < db_num_rows(Result); i++ )
			{
				new name[24], last_connection[24], connected, rank;
				
				PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = db_get_field_assoc_int(Result, "ID");
				db_get_field_assoc(Result, "NAME", name, 24);
				db_get_field_assoc(Result, "LAST_CONNECTION", last_connection, 256);
				connected = db_get_field_assoc_int(Result, "CONNECTED");
				rank = db_get_field_assoc_int(Result, "ADMIN_LEVEL");

				new line_str[128];
				if(connected) format(line_str, sizeof line_str, "{E6F8E0}%d. %s\t{E6F8E0}%s\t{98f442}Conectado\n", start_pos + listitem, name, ADMIN_LEVELS[rank]);
				else format(line_str, sizeof line_str, "{E6F8E0}%d. %s\t{E6F8E0}%s\t{E6F8E0}%s\n", start_pos + listitem, name, ADMIN_LEVELS[rank], last_connection);
				
				strcat(dialog, line_str);
				listitem ++;
				
				db_next_row(Result);
			}
			db_free_result(Result);
			
			PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = -2;
			strcat(dialog, "{c9c9c9}- Siguiente\n"); listitem ++;
			
			PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = -3;
			strcat(dialog, "{c9c9c9}- Anterior\n"); listitem ++;
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "Administradores", dialog, "Seguir", "Cerrar");
			return 1;
		}
		case DIALOG_ADMIN_MODIFY:
		{
			new DBResult:Result, DB_Query[256], name[24], current_rank, bool:found;
			format(DB_Query, sizeof DB_Query, "SELECT `NAME`, `ADMIN_LEVEL` FROM `CUENTA` WHERE `ID` = '%d';", PLAYER_TEMP[playerid][pt_SELECTED_DB_AC_ID]);
			Result = db_query(Database, DB_Query);
			
			if(db_num_rows(Result))
			{
				db_get_field_assoc(Result, "NAME", name, 24);
				current_rank = db_get_field_assoc_int(Result, "ADMIN_LEVEL");
				found = true;
			}
			else found = false;
			db_free_result(Result);
			
			if(!found) return 1;
			if(current_rank > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL])
			{
				SendClientMessage(playerid, -1, "No puedes modificar el rango de este admin porque es un rango superior al tuyo.");
				return 1;
			}
			
			new caption[45];
			format(caption, sizeof caption, "Admin - %s", name);
			
			new dialog[45 * sizeof(ADMIN_LEVELS)], line_str[45];
			format(dialog, sizeof dialog, "{E6F8E0}Normal (eliminar)\n");

			for(new i = 1; i != sizeof ADMIN_LEVELS; i ++)
			{
				if(i > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL])
				{
					if(current_rank == i) format(line_str, sizeof line_str, "{666666}%s (actual)\n", ADMIN_LEVELS[i]);
					else format(line_str, sizeof line_str, "{666666}%s\n", ADMIN_LEVELS[i]);
				}
				else
				{
					if(current_rank == i) format(line_str, sizeof line_str, "{E6F8E0}%s (actual)\n", ADMIN_LEVELS[i]);
					else format(line_str, sizeof line_str, "{E6F8E0}%s\n", ADMIN_LEVELS[i]);
				}
				strcat(dialog, line_str);
			}
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, dialog, "Seguir", "Atrás");
			return 1;
		}
		case DIALOG_CHANGE_PASSWORD:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_PASSWORD, "Cambiar contraseña", "Introduce tu contraseña actual.", "Seguir", "Cerrar");
			return 1;
		}
		case DIALOG_CHANGE_PASSWORD_PASS:
		{
			new dialog[128];
			format(dialog, sizeof dialog, "Introduce tu nueva contraseña.\nLa contraseña debe contener entre %d-%d caracteres.", MIN_PASS_LENGTH, MAX_PASS_LENGTH);
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_PASSWORD, "Cambiar contraseña", dialog, "Seguir", "Cerrar");
			return 1;
		}
		case DIALOG_ANTI_CHEAT:
		{
			if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 4) return 0;
			
			new dialog[115 * sizeof(ac_Info) + 1], line_str[115];
			dialog = "Tipo\tEstado\tAccionar\tAcción\n";
			
			for(new i = 0; i != sizeof(ac_Info); i ++)
			{
				format(line_str, sizeof line_str, "%02d %s\t%s\t%d:%d\t%s\n", i, ac_Info[i][ac_Name], ac_Info[i][ac_Enabled] ? "Activado" : "Desactivado", ac_Info[i][ac_Detections], ac_Info[i][ac_Interval], ac_Info[i][ac_Kick] ? "Kick" : "Aviso");
				strcat(dialog, line_str);
			}
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "Anticheat", dialog, "Seguir", "X");
			return 1;
		}
		case DIALOG_ANTI_CHEAT_MODIFY:
		{
			if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 4) return 0;
			
			new caption[45], dialog[90];
			
			format(caption, sizeof caption, "ac %02d %s", PLAYER_TEMP[playerid][pt_SELECTED_AC_LISTITEM], ac_Info[ PLAYER_TEMP[playerid][pt_SELECTED_AC_LISTITEM] ][ac_Name]);
			format(dialog, sizeof dialog, "Estado\t%s\nAccionar\t(%d:%d)\nAccion\t%s", ac_Info[ PLAYER_TEMP[playerid][pt_SELECTED_AC_LISTITEM] ][ac_Enabled] ? "Activado" : "Desactivado", ac_Info[ PLAYER_TEMP[playerid][pt_SELECTED_AC_LISTITEM] ][ac_Detections], ac_Info[ PLAYER_TEMP[playerid][pt_SELECTED_AC_LISTITEM] ][ac_Interval], ac_Info[ PLAYER_TEMP[playerid][pt_SELECTED_AC_LISTITEM] ][ac_Kick] ? "Kick" : "Aviso");
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST, caption, dialog, "Seguir", "<<");
			return 1;
		}
		case DIALOG_ANTI_CHEAT_MODIFY_DETECT:
		{
			new caption[45], dialog[200];
			
			format(caption, sizeof caption, "ac %02d %s", PLAYER_TEMP[playerid][pt_SELECTED_AC_LISTITEM], ac_Info[ PLAYER_TEMP[playerid][pt_SELECTED_AC_LISTITEM] ][ac_Name]);
			format(dialog, sizeof dialog, "Estado actual de accioner en: (%d:%d)\n\nSintaxis: <detecciones>:<segundos>\nDeja segundos en 0 para que sea instantáneo.\n\nEjemplo de 2 detecciones en 10 segundos: 2:10", ac_Info[ PLAYER_TEMP[playerid][pt_SELECTED_AC_LISTITEM] ][ac_Detections], ac_Info[ PLAYER_TEMP[playerid][pt_SELECTED_AC_LISTITEM] ][ac_Interval]);
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, caption, dialog, "Seguir", "<<");
			return 1;
		}
		case DIALOG_SHOP_ARTICLE_MODIFY: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Mi anuncio", "Inserta el nuevo precio de tu artículo:\n", "Seguir", "<<");
		case DIALOG_SHOP_ARTICLE_REMOVE: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Eliminar anuncio", "¿Está seguro de que quiere eliminar este anuncio?\nEsta opción no se puede deshacer.", "Eliminar", "Atrás");	
		case DIALOG_SHOP_ADD:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "Añadir anuncio", "{E6F8E0}Propiedad\n{E6F8E0}Vehículo\n{E6F8E0}Otros", "Seguir", "Cerrar");
			return 1;
		}
		case DIALOG_SHOP_ADD_TEXT:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Añadir anuncio", "Introduce una breve descripción para tu anuncio.\nCaracteres: 1-24 [A-Z a-z 0-9]", "Seguir", "Cerrar");
			return 1;
		}
		case DIALOG_SHOP_ADD_PRICE:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Añadir anuncio", "Introduce el precio para tu anuncio.\nAl publicar tu anuncio se te cobrará 500$.", "Seguir", "Cerrar");
			return 1;
		}
		case DIALOG_CRANE_SELECT_VEHICLE:
		{
			for(new i = 0; i != MAX_LISTITEMS; i ++) PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][i] = -1;
			
			new dialog[95 * (MAX_SU_VEHICLES + 2)], total_vehicles;
			format(dialog, sizeof dialog, "{E6F8E0}Vehículo\t{90C3D4}Matrícula\t{E6F8E0}Precio\n");
			for(new i = 0; i != MAX_VEHICLES; i ++)
			{
				if(!GLOBAL_VEHICLES[i][gb_vehicle_VALID]) continue;
				if(!PLAYER_VEHICLES[i][player_vehicle_VALID]) continue;
				if(total_vehicles > MAX_SU_VEHICLES) break;
				
				if(PLAYER_VEHICLES[i][player_vehicle_OWNER_ID] == ACCOUNT_INFO[playerid][ac_ID])
				{
					PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][total_vehicles] = i;
					
					new line_str[95], veh_money = (VEHICLE_INFO[GLOBAL_VEHICLES[i][gb_vehicle_MODELID] - 400][vehicle_info_PRICE] / 5000) + 3500;
					format(line_str, sizeof line_str, "{E6F8E0}%d. %s\t{90C3D4}%s\t{E6F8E0}%s$\n", total_vehicles + 1, VEHICLE_INFO[ GLOBAL_VEHICLES[i][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME], GLOBAL_VEHICLES[i][gb_vehicle_NUMBER_PLATE], number_format_thousand(veh_money));
					strcat(dialog, line_str);
					total_vehicles ++;
				}
			}
			if(total_vehicles == 0) strcat(dialog, "{E6F8E0}No tienes vehículos");
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "Selecciona el vehículo que quieres remolcar", dialog, "Seguir", "Cerrar");
			return 1;
		}
		case DIALOG_CREATE_CREW:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Banda", "No perteneces a ninguna banda.\n\n¿Quieres crear una?\nPara crear una banda necesitas ser nivel 3, además cuesta 300.000$.", "Sí", "No");
			return 1;
		}
		case DIALOG_CREATE_CREW_NAME:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Crear banda", "Introduce el nombre de tu banda.\nHasta 32 caracteres.", "Continuar", "Salir");
			return 1;
		}
		case DIALOG_CREATE_CREW_COLOR:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "Selecciona un color para tu banda", DIALOG_CREATE_CREW_COLOR_String, "Continuar", "Atrás");
			return 1;
		}
		case DIALOG_CREATE_CREW_CONFIRM:
		{
			new dialog[360];
			format(dialog, sizeof dialog,
					
					"\
						{E6F8E0}Nombre de la banda: %s\n\
						{E6F8E0}Color de la banda: {%06x}color %d\n\
						{E6F8E0}Coste de creación: 600.000$\n\
						\n\
						{E6F8E0}¿Quieres crear esta banda?\n\
						{E6F8E0}Una vez creada podrás crear rangos, modificarlos y mucho más.\n\
						\n\
					", 
						PLAYER_TEMP[playerid][pt_CREATE_CREW_NAME],
						RandomColors[ PLAYER_TEMP[playerid][pt_CREATE_CREW_COLOR] ] >>> 8, PLAYER_TEMP[playerid][pt_CREATE_CREW_COLOR] + 1
			);
					
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Crear banda", dialog, "Crear", "Salir");
			return 1;
		}
		case DIALOG_CREW_MENU:
		{
			for(new i = 0; i != MAX_LISTITEMS; i++ ) PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][i] = -1;
			
			new caption[64], dialog[360], listitem;
			format(caption, sizeof caption, "Mi banda -  {%06x}'%s'", CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_COLOR] >>> 8, CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_NAME]);
			
			format(dialog, sizeof dialog, "Ver miembros\n");
			PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = CREW_RANK_SIZE;
			listitem ++;

			if(CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_PERMISSION][CREW_RANK_CHANGE_NAME])
			{
				strcat(dialog, "Cambiar nombre de la banda\n");
				PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = CREW_RANK_CHANGE_NAME;
				listitem ++;
			}
			if(CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_PERMISSION][CREW_RANK_CAST_MEMBERS])
			{
				strcat(dialog, "Echar a un miembro\n");
				PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = CREW_RANK_CAST_MEMBERS;
				listitem ++;
			}
			if(CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_PERMISSION][CREW_RANK_MODIFY_MEMBERS])
			{
				strcat(dialog, "Cambiar rango de un miembro\n");
				PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = CREW_RANK_MODIFY_MEMBERS;
				listitem ++;
			}
			if(CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_PERMISSION][CREW_RANK_MODIFY_RANKS])
			{
				strcat(dialog, "Crear rangos o modificarlos\n");
				PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = CREW_RANK_MODIFY_RANKS;
				listitem ++;
			}
			if(CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_PERMISSION][CREW_RANK_CHANGE_COLOR])
			{
				strcat(dialog, "Cambiar color de la banda\n");
				PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = CREW_RANK_CHANGE_COLOR;
				listitem ++;
			}
			if(CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_PERMISSION][CREW_RANK_DELETE])
			{
				strcat(dialog, "Eliminar la banda\n");
				PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = CREW_RANK_DELETE;
				listitem ++;
			}
			if(BandaLeader(ACCOUNT_INFO[playerid][ac_ID]) == 1)
			{
				strcat(dialog, "Descripcion banda\n");
				PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = CREW_RANK_DESC;
				listitem ++;
				
				new solid[50];
				format(solid, sizeof solid,"Solicitudes (%d)\n",GetSolicitudesBanda(PLAYER_CREW[playerid][player_crew_ID]));
				strcat(dialog, solid);
				PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = CREW_RANK_SIZE + 1;
				listitem ++;
			}
			strcat(dialog, "Abandonar banda\n");
			PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = CREW_RANK_SIZE + 2;
			listitem ++;
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, dialog, "Seguir", "Cerrar");
			return 1;
		}
		case DIALOG_CREW_MEMBER_LIST:
		{
			for(new i = 0; i != MAX_LISTITEMS; i++ ) PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][i] = -1;
			
			new caption[64];
			format(caption, sizeof caption, "Miembros de la banda '%s'", CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_NAME]);
			
			new dialog[128 * 15], listitem, start_pos = PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] * PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT] + 1;
			format(dialog, sizeof dialog, "{E6F8E0}Nombre\t{E6F8E0}Rango\t{E6F8E0}Últ. conexión\n");
			
			new DBResult:Result, DB_Query[320];
			format(DB_Query, sizeof DB_Query, "SELECT `CUENTA`.`NAME`, `CUENTA`.`LAST_CONNECTION`, `CUENTA`.`CONNECTED`, `PLAYER_CREW`.`RANK` FROM `CUENTA`, `PLAYER_CREW` WHERE `PLAYER_CREW`.`ID_USER` = `CUENTA`.`ID` AND `PLAYER_CREW`.`ID_CREW` = '%d' ORDER BY `CUENTA`.`CONNECTED` DESC, `PLAYER_CREW`.`RANK` ASC LIMIT %d, %d;", PLAYER_CREW[playerid][player_crew_ID], PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] * PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT], PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT]);
			Result = db_query(Database, DB_Query);
			
			for(new i; i < db_num_rows(Result); i++ )
			{
				new name[24], last_connection[24], connected, rank;
				
				db_get_field_assoc(Result, "NAME", name, 24);
				db_get_field_assoc(Result, "LAST_CONNECTION", last_connection, 256);
				connected = db_get_field_assoc_int(Result, "CONNECTED");
				rank = db_get_field_assoc_int(Result, "RANK");

				new line_str[128];
				if(connected) format(line_str, sizeof line_str, "{E6F8E0}%d. %s\t{E6F8E0}%s\t{98f442}Conectado\n", start_pos + listitem, name, CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ rank ][crew_rank_NAME]);
				else format(line_str, sizeof line_str, "{E6F8E0}%d. %s\t{E6F8E0}%s\t{E6F8E0}%s\n", start_pos + listitem, name, CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ rank ][crew_rank_NAME], last_connection);
				
				strcat(dialog, line_str);
				listitem ++;
				
				db_next_row(Result);
			}
			db_free_result(Result);
			
			PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = -2;
			strcat(dialog, "{c9c9c9}- Siguiente\n"); listitem ++;
			
			PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = -3;
			strcat(dialog, "{c9c9c9}- Anterior\n"); listitem ++;
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, caption, dialog, "Seguir", "Atrás");
			return 1;
		}
		case DIALOG_CREW_CHANGE_NAME:
		{
			new dialog[128];
			format(dialog, sizeof dialog, "Nombre actual de la banda:\n\t\"%s\"\n\nIndica el nuevo nombre.\nMáximo 32 caracteres.", CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_NAME]);
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Cambiar nombre de la banda", dialog, "Cambiar", "Atrás");
			return 1;
		}
		case DIALOG_CREW_MEMBER_LIST_DELETE:
		{
			for(new i = 0; i != MAX_LISTITEMS; i++ ) PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][i] = -1;
			
			new dialog[128 * 15], listitem, start_pos = PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] * PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT] + 1;
			format(dialog, sizeof dialog, "{E6F8E0}Nombre\t{E6F8E0}Rango\t{E6F8E0}Últ. conexión\n");
			
			new DBResult:Result, DB_Query[350];
			format(DB_Query, sizeof DB_Query, "SELECT `CUENTA`.`ID`, `CUENTA`.`NAME`, `CUENTA`.`LAST_CONNECTION`, `CUENTA`.`CONNECTED`, `PLAYER_CREW`.`RANK` FROM `CUENTA`, `PLAYER_CREW` WHERE `PLAYER_CREW`.`ID_USER` = `CUENTA`.`ID` AND `PLAYER_CREW`.`ID_CREW` = '%d' ORDER BY `CUENTA`.`CONNECTED` DESC, `PLAYER_CREW`.`RANK` ASC LIMIT %d, %d;", PLAYER_CREW[playerid][player_crew_ID], PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] * PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT], PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT]);
			Result = db_query(Database, DB_Query);
			
			for(new i; i < db_num_rows(Result); i++ )
			{
				new name[24], last_connection[24], connected, rank;
				
				PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][i] = db_get_field_assoc_int(Result, "ID");
				db_get_field_assoc(Result, "NAME", name, 24);
				db_get_field_assoc(Result, "LAST_CONNECTION", last_connection, 256);
				connected = db_get_field_assoc_int(Result, "CONNECTED");
				rank = db_get_field_assoc_int(Result, "RANK");

				new line_str[128];
				if(connected) format(line_str, sizeof line_str, "{E6F8E0}%d. %s\t{E6F8E0}%s\t{98f442}Conectado\n", start_pos + listitem, name, CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ rank ][crew_rank_NAME]);
				else format(line_str, sizeof line_str, "{E6F8E0}%d. %s\t{E6F8E0}%s\t{E6F8E0}%s\n", start_pos + listitem, name, CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ rank ][crew_rank_NAME], last_connection);
				
				strcat(dialog, line_str);
				listitem ++;
				
				db_next_row(Result);
			}
			db_free_result(Result);
			
			PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = -2;
			strcat(dialog, "{c9c9c9}- Siguiente\n"); listitem ++;
			
			PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = -3;
			strcat(dialog, "{c9c9c9}- Anterior\n"); listitem ++;
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "Echar a un miembro", dialog, "Seguir", "Atrás");
			return 1;
		}
		case DIALOG_CREW_CAST_MEMBER_CONFIRM:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Echar a un miembro", "¿Estás seguro de que quieres echar a este miembro de la banda?", "Echar", "Cancelar");
			return 1;
		}
		case DIALOG_CREW_INVITE_RANK:
		{
			for(new i = 0; i != MAX_LISTITEMS; i++ ) PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][i] = -1;
			
			new dialog[64 * MAX_CREW_RANKS], line_str[64], listitem;
			for(new i = 0; i != MAX_CREW_RANKS; i ++)
			{
				if(!CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][i][crew_rank_VALID]) continue;
				
				PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = i;
				if(i < PLAYER_CREW[playerid][player_crew_RANK]) format(line_str, sizeof line_str, "{666666}%d. %s\n", listitem + 1, CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][i][crew_rank_NAME]);
				else format(line_str, sizeof line_str, "{E6F8E0}%d. %s\n", listitem + 1, CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][i][crew_rank_NAME]);
				strcat(dialog, line_str);
				
				listitem ++;
			}
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "Invitar", dialog, "Invitar", "Salir");
			return 1;
		}
		case DIALOG_CREW_INVITE_ACCEPT:
		{
			new dialog[128];
			format(dialog, sizeof dialog, "Te han ofrecio unirte a una banda.\n\nBanda: %s\nRango: %s\n", CREW_INFO[ PLAYER_TEMP[playerid][pt_CREW_INVITE_INFO][1] ][crew_NAME], CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INVITE_INFO][1] ][ PLAYER_TEMP[playerid][pt_CREW_INVITE_INFO][2] ][crew_rank_NAME]);
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Invitación", dialog, "Unirme", "Salir");
			return 1;
		}
		case DIALOG_CREW_RANKS:
		{
			new dialog[64 * MAX_CREW_RANKS], line_str[64];
			for(new i = 0; i != MAX_CREW_RANKS; i ++)
			{
				if(CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][i][crew_rank_VALID])
				{
					if(i < PLAYER_CREW[playerid][player_crew_RANK]) format(line_str, sizeof line_str, "{666666}%d. %s\n", i + 1, CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][i][crew_rank_NAME]);
					else format(line_str, sizeof line_str, "{E6F8E0}%d. %s\n", i + 1, CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][i][crew_rank_NAME]);
				}
				else
				{
					if(i < PLAYER_CREW[playerid][player_crew_RANK]) format(line_str, sizeof line_str, "{666666}%d. Slot vacío\n", i + 1, CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][i][crew_rank_NAME]);
					else format(line_str, sizeof line_str, "{FFFFFF}%d. Slot vacío\n", i + 1, CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][i][crew_rank_NAME]);
				}
				strcat(dialog, line_str);
			}
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "Rangos", dialog, "Seguir", "Atrás");
			return 1;
		}
		case DIALOG_CREW_RANK_MODIFY:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "Modificar rango", "Cambiar nombre del rango\nModificar permisos\nEliminar rango", "Seguir", "Atrás");
			return 1;
		}
		case DIALOG_CREW_RANK_MODIFY_NAME:
		{
			new dialog[145];
			format(dialog, sizeof dialog, "Nombre actual del rango:\n\t\"%s\"\n\nIndica el nuevo nombre del rango.\nMáximo 32 caracteres.", CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK] ][crew_rank_NAME]);
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Modificar rango", dialog, "Seguir", "Atrás");
			return 1;
		}
		case DIALOG_CREW_RANK_MODIFY_PERMISS:
		{
			new caption[70];
			format(caption, sizeof caption, "Modificar permisos del rango '%s'", CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK] ][crew_rank_NAME]);
			
			new dialog[64 * (CREW_RANK_SIZE + 1)], line_str[64];
			format(dialog, sizeof dialog, "Permiso\tActivado\n");
			
			for(new i = 0; i != CREW_RANK_SIZE; i ++)
			{
				if(CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_PERMISSION][i]) format(line_str, sizeof line_str, "%s\t%s\n", CREW_RANKS_PERMISSIONS[i], CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK] ][crew_rank_PERMISSION][i] ? "Sí" : "No");
				else format(line_str, sizeof line_str, "{666666}%s\t{666666}%s\n", CREW_RANKS_PERMISSIONS[i], CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK] ][crew_rank_PERMISSION][i] ? "Sí" : "No");
				
				strcat(dialog, line_str);
			}
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, caption, dialog, "Cambiar", "Atrás");
			return 1;
		}
		case DIALOG_CREW_RANK_CREATE:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Crear nuevo rango", "Indica el nombre del rango.\nMáximo 32 caracteres.", "Crear", "Atrás");
			return 1;
		}
		case DIALOG_CREW_RANK_DELETE:
		{
			for(new i = 0; i != MAX_LISTITEMS; i++ ) PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][i] = -1;
			
			new dialog[64 * MAX_CREW_RANKS], line_str[64], listitem;
			for(new i = 0; i != MAX_CREW_RANKS; i ++)
			{
				if(!CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][i][crew_rank_VALID]) continue;
				if(i == PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK]) continue;
				
				PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = i;
				if(i < PLAYER_CREW[playerid][player_crew_RANK]) format(line_str, sizeof line_str, "{666666}%d. %s\n", listitem + 1, CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][i][crew_rank_NAME]);
				else format(line_str, sizeof line_str, "{E6F8E0}%d. %s\n", listitem + 1, CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][i][crew_rank_NAME]);
				strcat(dialog, line_str);
				
				listitem ++;
			}
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "Seleccionar nuevo rango", dialog, "Seguir", "Atrás");
			return 1;
		}
		case DIALOG_CREW_RANK_DELETE_CONFIRM:
		{
			new DBResult:Result, DB_Query[128], affected_members;
			format(DB_Query, sizeof DB_Query, "SELECT COUNT() FROM `PLAYER_CREW` WHERE `ID_CREW` = '%d' AND `RANK` = '%d';", CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_ID], PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK]);
			Result = db_query(Database, DB_Query);

			if(db_num_rows(Result)) affected_members = db_get_field_int(Result, 0);
			db_free_result(Result);
			
			
			new dialog[400];
			format(dialog, sizeof dialog, 
					
				"\
					Rango que se eliminará:\n\
						\t'%s'\n\
					\n\
					Miembros afectados: %d\n\
					El nuevo rango de estos miembros será:\n\
						\t'%s'\n\
					\n\
					¿Seguro que quieres eliminar el rango? Esta opción no se puede deshacer.\n\
					\n\
				",
					CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK] ][crew_rank_NAME],
					affected_members,
					CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_TEMP[playerid][pt_CREW_SELECTED_NEW_RANK] ][crew_rank_NAME]
			);
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Eliminar rango", dialog, "Eliminar", "Cancelar");
			return 1;
		}
		case DIALOG_CREW_MODIFY_COLOR:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "Selecciona el nuevo color para tu banda", DIALOG_CREATE_CREW_COLOR_String, "Cambiar", "Atrás");
			return 1;
		}
		case DIALOG_CREW_DESC:
		{
			ShowPlayerDialog(playerid, dialogid,DIALOG_STYLE_INPUT,"Banda descripcion","Ingresa la nueva descripcion de la banda","Aceptar","Cerrar");
			return 1;
		}
		case DIALOG_CREW_DELETE:
		{
			new DB_Query[190], affected_members, crew_territories;
			
			new DBResult:Result_memberts;
			format(DB_Query, sizeof DB_Query, "SELECT COUNT() FROM `PLAYER_CREW` WHERE `ID_CREW` = '%d';", CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_ID]);
			Result_memberts = db_query(Database, DB_Query);

			if(db_num_rows(Result_memberts)) affected_members = db_get_field_int(Result_memberts, 0);
			db_free_result(Result_memberts);
			
			
			new DBResult:Result_territories;
			format(DB_Query, sizeof DB_Query, "SELECT COUNT() FROM `CREW_TERRITORIES` WHERE `ID_CREW` = '%d';", CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_ID]);
			Result_territories = db_query(Database, DB_Query);

			if(db_num_rows(Result_territories)) crew_territories = db_get_field_int(Result_territories, 0);
			db_free_result(Result_territories);
			
			new dialog[450];
			format(dialog, sizeof dialog, 
					
				"\
					Banda: %s\n\
					Miembros: %d\n\
					Territorios: %d\n\
					\n\
					¿De verdad quieres borrar la banda?\n\
					\n\
				",
					CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_NAME],
					affected_members,
					crew_territories
			);
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Eliminar banda", dialog, "Eliminar", "Cancelar");
			return 1;
		}
		case DIALOG_CREW_LEAVE:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Abandonar banda", "¿Quieres abandonar la banda?\nEsta opción no se puede deshacer.", "Abandonar", "Cancelar");
			return 1;
		}
		case DIALOG_CREW_MODIFY_MEMBERS:
		{
			for(new i = 0; i != MAX_LISTITEMS; i++ ) PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][i] = -1;
			
			new dialog[128 * 15], listitem, start_pos = PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] * PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT] + 1;
			format(dialog, sizeof dialog, "{E6F8E0}Nombre\t{E6F8E0}Rango\t{E6F8E0}Últ. conexión\n");
			
			new DBResult:Result, DB_Query[350];
			format(DB_Query, sizeof DB_Query, "SELECT `CUENTA`.`ID`, `CUENTA`.`NAME`, `CUENTA`.`LAST_CONNECTION`, `CUENTA`.`CONNECTED`, `PLAYER_CREW`.`RANK` FROM `CUENTA`, `PLAYER_CREW` WHERE `PLAYER_CREW`.`ID_USER` = `CUENTA`.`ID` AND `PLAYER_CREW`.`ID_CREW` = '%d' ORDER BY `CUENTA`.`CONNECTED` DESC, `PLAYER_CREW`.`RANK` ASC LIMIT %d, %d;", PLAYER_CREW[playerid][player_crew_ID], PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] * PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT], PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT]);
			Result = db_query(Database, DB_Query);
			
			for(new i; i < db_num_rows(Result); i++ )
			{
				new name[24], last_connection[24], connected, rank;
				
				PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][i] = db_get_field_assoc_int(Result, "ID");
				db_get_field_assoc(Result, "NAME", name, 24);
				db_get_field_assoc(Result, "LAST_CONNECTION", last_connection, 256);
				connected = db_get_field_assoc_int(Result, "CONNECTED");
				rank = db_get_field_assoc_int(Result, "RANK");

				new line_str[128];
				if(connected) format(line_str, sizeof line_str, "{E6F8E0}%d. %s\t{E6F8E0}%s\t{98f442}Conectado\n", start_pos + listitem, name, CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ rank ][crew_rank_NAME]);
				else format(line_str, sizeof line_str, "{E6F8E0}%d. %s\t{E6F8E0}%s\t{E6F8E0}%s\n", start_pos + listitem, name, CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ rank ][crew_rank_NAME], last_connection);
				
				strcat(dialog, line_str);
				listitem ++;
				
				db_next_row(Result);
			}
			db_free_result(Result);
			
			PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = -2;
			strcat(dialog, "{c9c9c9}- Siguiente\n"); listitem ++;
			
			PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = -3;
			strcat(dialog, "{c9c9c9}- Anterior\n"); listitem ++;
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "Modificar rango de un miembro", dialog, "Seguir", "Atrás");
			return 1;
		}
		case DIALOG_CREW_MODIFY_MEMBER:
		{
			new DBResult:Result, DB_Query[256], name[24], current_rank, bool:found;
			format(DB_Query, sizeof DB_Query, "SELECT `CUENTA`.`NAME`, `PLAYER_CREW`.`RANK` FROM `CUENTA`, `PLAYER_CREW` WHERE `CUENTA`.`ID` = '%d' AND `PLAYER_CREW`.`ID_USER` = `CUENTA`.`ID`;", PLAYER_TEMP[playerid][pt_SELECTED_DB_AC_ID]);
			Result = db_query(Database, DB_Query);
			
			if(db_num_rows(Result))
			{
				db_get_field_assoc(Result, "NAME", name, 24);
				current_rank = db_get_field_assoc_int(Result, "RANK");
				found = true;
			}
			else found = false;
			db_free_result(Result);
			
			if(!found) return 1;
			if(current_rank < PLAYER_CREW[playerid][player_crew_RANK]) return SendClientMessage(playerid, -1, "{00FF80}No puedes modificar el rango de este miembro porque es un rango superior al tuyo.");
			if(current_rank == 0)
			{
				new DBResult:Result_count, total;
				format(DB_Query, sizeof DB_Query, "SELECT COUNT() FROM `PLAYER_CREW` WHERE `ID_CREW` = '%d' AND `RANK` = '0';", PLAYER_CREW[playerid][player_crew_ID]);
				Result_count = db_query(Database, DB_Query);
				
				if(db_num_rows(Result_count)) total = db_get_field_int(Result_count, 0);
				db_free_result(Result_count);
				
				if(total <= 1)
				{
					SendClientMessage(playerid, -1, "{00FF80}No se puede modificar el rango de este miembro ya que es el único miembro con el rango fundador.");
					return 1;
				}
			}
			
			for(new i = 0; i != MAX_LISTITEMS; i++ ) PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][i] = -1;
			
			new caption[45];
			format(caption, sizeof caption, "Miembro - %s", name);
			
			new dialog[45 * CREW_RANK_SIZE], line_str[45], listitem;
			for(new i = 0; i != CREW_RANK_SIZE; i ++)
			{
				if(!CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][i][crew_rank_VALID]) continue;
				
				if(i < PLAYER_CREW[playerid][player_crew_RANK])
				{
					if(current_rank == i) format(line_str, sizeof line_str, "{666666}%s (actual)\n", CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][i][crew_rank_NAME]);
					else format(line_str, sizeof line_str, "{666666}%s\n", CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][i][crew_rank_NAME]);
				}
				else
				{
					if(current_rank == i) format(line_str, sizeof line_str, "{E6F8E0}%s (actual)\n", CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][i][crew_rank_NAME]);
					else format(line_str, sizeof line_str, "{E6F8E0}%s\n", CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][i][crew_rank_NAME]);
				}
				strcat(dialog, line_str);
				
				PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = i;
				listitem ++;
			}
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, dialog, "Seguir", "Atrás");
			return 1;
		}
		case DIALOG_CREW_PROPERTY_CONFIRM:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Propiedad de banda", "¿Estás seguro que quieres pasar esta propiedad a banda?\nEsta opción no se puede deshacer.", "Seguir", "Cancelar");
			return 1;
		}
		case DIALOG_CREW_LEAVE_TERRITORY:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Abandonar territorio", "¿Estás seguro que quieres abandonar este territorio?\nEsta opción no se puede deshacer.", "Seguir", "Cancelar");
			return 1;
		}
		case DIALOG_CREW_LEAVE_PROPERTY:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Propiedad de banda", "¿Estás seguro que quieres liberar esta propiedad?\nEsta opción no se puede deshacer.", "Seguir", "Cancelar");
			return 1;
		}
		case DIALOG_POLICE_PENALTY:
		{
			new dialog[128];
			format(dialog, sizeof dialog, "El policía %s te ha puesto una multa.\nImporte: %s$\n", PLAYER_TEMP[ PLAYER_TEMP[playerid][pt_POLICE_PEN_PID] ][pt_RP_NAME], number_format_thousand(PLAYER_TEMP[playerid][pt_POLICE_PEN_IM]));
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Multa", dialog, "Pagar", "Salir");
			return 1;
		}
		case DIALOG_SERVER_ECO:
		{
			new dialog[256];
			format(dialog, sizeof dialog,
				
				"\
					PROPIEDADES\t%.4f\n\
					VEHICULOS\t%.4f\n\
					TOYS\t%.4f\n\
					SKINS\t%.4f\n\
					ARMAS\t%.4f\n\
					VIP\t%d "SERVER_COIN"\n\
				",
					MULTIPLIER_PROPERITES,
					MULTIPLIER_VEHICLES,
					MULTIPLIER_TOYS,
					MULTIPLIER_SKINS,		
					MULTIPLIER_WEAPONS,
					SU_SD_PRICE
			);	
				
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST, "Multiplicadores", dialog, "Seguir", "Cerrar");
			return 1;
		}
		case DIALOG_SERVER_ECO_MODIFY:
		{
			new dialog[32];
			switch(PLAYER_TEMP[playerid][pt_DIALOG_ECO_SELECTED])
			{
				case 0: format(dialog, sizeof dialog, "PROPIEDADES: %f", MULTIPLIER_PROPERITES);
				case 1: format(dialog, sizeof dialog, "VEHICULOS: %f", MULTIPLIER_VEHICLES);
				case 2: format(dialog, sizeof dialog, "TOYS: %f", MULTIPLIER_TOYS);
				case 3: format(dialog, sizeof dialog, "SKINS: %f", MULTIPLIER_SKINS);
				case 4: format(dialog, sizeof dialog, "ARMAS: %f", MULTIPLIER_WEAPONS);
				case 5: format(dialog, sizeof dialog, "Coste VIP: %d "SERVER_COIN"", SU_SD_PRICE);
			}
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Multiplicador", dialog, "Seguir", "Atrás");
			return 1;
		}
		case DIALOG_SU_BUY:
		{
			new dialog[128];
			format(dialog, sizeof dialog, "El coste del VIP#1 es de 20 "SERVER_COIN" Duración: 30 días\nEl coste del VIP#2 es de 30 "SERVER_COIN" Duración: 30 días", SU_SD_PRICE);
			

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "VIP", dialog, "Comprar", "Salir");
			return 1;
		}
		case DIALOG_SU:
		{
			new DBResult:Result, current_date[24];
			Result = db_query(Database, "SELECT CURRENT_TIMESTAMP;");
			
			if(db_num_rows(Result)) db_get_field(Result, 0, current_date, 24);
			db_free_result(Result);
			
			
			new dialog[256];
			format(dialog, sizeof dialog, 
				
				"\
					Fecha actual: %s\n\
					Fecha caducidad: %s\n\
					\n\
					Renuevalo 30 días más por %d "SERVER_COIN".\n\
					\n\
				",
					current_date,
					ACCOUNT_INFO[playerid][ac_SU_EXPIRE_DATE],
					SU_SD_PRICE
			);
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "VIP", dialog, "Salir", "Renovar");
			return 1;
		}
		case DIALOG_VOBJECT_MENU:
		{
			new caption[45];
			format(caption, sizeof caption, "STC - '%s'", VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME]);
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, "1. Mis objetos\n2. Comprar objeto\n3. Añadir texto (500$)\n4. Añadir bandera de país (2.000$)\n5. Añadir panel de país (2.000$)", "Seguir", "Cerrar");
			return 1;
		}
		case DIALOG_VOBJECT_OBJECTS:
		{
			new caption[45], dialog[145 * (MAX_SU_VOBJECTS + 2)], line_str[145];
			format(caption, sizeof caption, "STC - '%s'", VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME]);
			
			format(dialog, sizeof dialog, "{E6F8E0}Objeto\t{90C3D4}Colocado\n");
			for(new i = 0; i != MAX_SU_VOBJECTS; i ++)
			{
				if(VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][i][vobject_VALID])
				{
					if(VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][i][vobject_ATTACHED]) format(line_str, sizeof line_str, "{E6F8E0}%d. %s\t{90C3D4}Sí\n", i + 1, VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][i][vobject_NAME]);
					else format(line_str, sizeof line_str, "{E6F8E0}%d. %s\t{90C3D4}No\n", i + 1, VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][i][vobject_NAME]);
				}
				else format(line_str, sizeof line_str, "{666666}%d. Slot vacío\n", i + 1);
				strcat(dialog, line_str);
			}
			strcat(dialog, "{c4290d}- Eliminar todo\n");
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, caption, dialog, "Seguir", "Atrás");
			return 1;
		}
		case DIALOG_VOBJECT_OBJECT:
		{
			new caption[45], dialog[256];
			format(caption, sizeof caption, "Objeto '%s'", VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_NAME]);
			
			switch(VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_TYPE])
			{
				case VOBJECT_TYPE_OBJECT:
				{
					if(VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_ATTACHED]) format(dialog, sizeof dialog, "{E6F8E0}Guardar este objeto\n{E6F8E0}Cambiar el nombre del objeto\n{E6F8E0}Editar posición del objeto\n{E6F8E0}Colores\n{E6F8E0}Eliminar este objeto");
					else format(dialog, sizeof dialog, "{E6F8E0}Colocar este objeto\n{E6F8E0}Cambiar el nombre del objeto\n{666666}Editar posición del objeto\n{666666}Colores\n{E6F8E0}Eliminar este objeto");
				}
				case VOBJECT_TYPE_TEXT:
				{
					if(VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_ATTACHED]) format(dialog, sizeof dialog, "{E6F8E0}Guardar este objeto\n{E6F8E0}Cambiar el nombre del objeto\n{E6F8E0}Editar posición del objeto\n{E6F8E0}Texto\n{E6F8E0}Eliminar este objeto");
					else format(dialog, sizeof dialog, "{E6F8E0}Colocar este objeto\n{E6F8E0}Cambiar el nombre del objeto\n{666666}Editar posición del objeto\n{666666}Texto\n{E6F8E0}Eliminar este objeto");
				}
				case VOBJECT_TYPE_COUNTRY_FLAG, VOBJECT_TYPE_COUNTRY_PANEL:
				{
					if(VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_ATTACHED]) format(dialog, sizeof dialog, "{E6F8E0}Guardar este objeto\n{E6F8E0}Cambiar el nombre del objeto\n{E6F8E0}Editar posición del objeto\n{E6F8E0}Eliminar este objeto");
					else format(dialog, sizeof dialog, "{E6F8E0}Colocar este objeto\n{E6F8E0}Cambiar el nombre del objeto\n{666666}Editar posición del objeto\n{E6F8E0}Eliminar este objeto");
				}
			}
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, dialog, "Seguir", "Atrás");
			return 1;
		}
		case DIALOG_VOBJECT_OBJECT_CNAME:
		{		
			new dialog[145];
			format(dialog, sizeof dialog, "Nombre actual: \"%s\"\nIndica el nuevo nombre:", VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_NAME]);
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Objeto - Modificar nombre", dialog, "Seguir", "Atrás");
			return 1;
		}
		case DIALOG_VOBJECT_OBJECT_COLORS:
		{
			new caption[64];
			format(caption, sizeof caption, "Colores de '%s'", VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_NAME]);
			
			new dialog[45 * MAX_VEHICLE_OBJECTS_INDEXS], line_str[45];
			for(new i = 0; i != MAX_VEHICLE_OBJECTS_INDEXS; i ++)
			{
				if(!VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_COLORS][i]) format(line_str, sizeof line_str, "{FFFFFF}Color #%d (original)\n", i + 1);
				else format(line_str, sizeof line_str, "{%06x}Color #%d\n", ARGBToRGBA(VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_COLORS][i]) >>> 8, i + 1);
				
				strcat(dialog, line_str);
			}
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, dialog, "Seguir", "Atrás");
			return 1;
		}
		case DIALOG_VOBJECT_OBJECT_COLOR:
		{
			new caption[64];
			format(caption, sizeof caption, "Color (%d) de '%s'", PLAYER_TEMP[playerid][pt_TUNING_EDIT_COLOR_SLOT], VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_NAME]);
			
			new dialog[145];
			format(dialog, sizeof dialog, 
					
					"\
						Color original\n\
						{%06x}Veh Color 1\n\
						{%06x}Veh Color 2\n\
						{FFFFFF}Otro (ARGB)\n\
					",
					VEHICLE_COLORS[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][gb_vehicle_COLOR_1] ] >>> 8,
					VEHICLE_COLORS[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][gb_vehicle_COLOR_2] ] >>> 8
			);
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, dialog, "Seguir", "Atrás");
			return 1;
		}
		case DIALOG_VOBJECT_OBJECT_COLOR_HEX:
		{
			new caption[64];
			format(caption, sizeof caption, "Color (%d) de '%s'", PLAYER_TEMP[playerid][pt_TUNING_EDIT_COLOR_SLOT], VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_NAME]);
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, caption, "Introduce el color en formato AARRGGBB\nPor ejemplo: FFCCCCCC", "Seguir", "Atrás");
			return 1;
		}
		case DIALOG_VOBJECT_OBJECT_CDELETE:
		{
			new dialog[145];
			format(dialog, sizeof dialog, "¿Estás seguro que quieres borrar el siguiente objeto?\n\t\"%s\"", VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_NAME]);
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Objeto - Eliminar Objeto", dialog, "Eliminar", "Atrás");
			return 1;
		}
		case DIALOG_VOBJECT_DELETE_ALL: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Objeto - Eliminar todo", "¿Está seguro de que quiere eliminar todos los objetos de este vehículo?\nEsta opción no se puede deshacer.", "Eliminar", "Atrás");	
		case DIALOG_VOBJECT_TEXT_MENU:
		{
			new caption[64];
			format(caption, sizeof caption, "Texto '%s'", VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_NAME]);

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, "Editar texto\nCambiar fuente\nTamaño de letra\nNegrita\nColor de fuente", "Seguir", "Atrás");
			return 1;
		}
		case DIALOG_VOBJECT_TEXT_TEXT:
		{
			new dialog[128];
			format(dialog, sizeof dialog, "Texto actual:\n\"%s\"\n\nIndica el nuevo texto (1-32 caracteres)\n", VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_text_TEXT]);
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Modificar texto", dialog, "Seguir", "Atrás");
			return 1;
		}
		case DIALOG_VOBJECT_TEXT_FONT:
		{
			new dialog[128];
			format(dialog, sizeof dialog, "Fuente actual:\n\"%s\"\n\nIndica la nueva fuente (1-24 caracteres)\n", VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_text_FONT]);
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Modificar fuente", dialog, "Seguir", "Atrás");
			return 1;
		}
		case DIALOG_VOBJECT_TEXT_FONT_SIZE:
		{
			new dialog[128];
			format(dialog, sizeof dialog, "Tamaño actual: %d\n\nIndica la nueva fuente (1-24 caracteres)\n", VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_text_FONT_SIZE]);
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Modificar fuente", dialog, "Seguir", "Atrás");
			return 1;
		}
		case DIALOG_VOBJECT_TEXT_FONT_COLOR:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "Selecciona color", DIALOG_CREATE_CREW_COLOR_String, "Seguir", "Atrás");
			return 1;
		}
		case DIALOG_VOBJECT_COUNTRY:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "Selecciona país",
				
				"\
					Alemania\n\
					Argentina\n\
					Austria\n\
					Belgica\n\
					Bolivia\n\
					Bulgaria\n\
					Chile\n\
					Colombia\n\
					El Salvador\n\
					España\n\
					Estonia\n\
					Francia\n\
					Guatemala\n\
					Holanda\n\
					Hungría\n\
					India\n\
					Indonesia\n\
					Irlanda\n\
					Italia\n\
					Lituania\n\
					Luxemburgo\n\
					Madagascar\n\
					Malta\n\
					Malí\n\
					México\n\
					Nigeria\n\
					Panamá\n\
					Paraguay\n\
					Perú\n\
					Polonia\n\
					Rumanía\n\
					Rusia\n\
					Ucrania\n\
					Venezuela\n\
				"
				
			, "Seguir", "Atrás");
			return 1;
		}
		case DIALOG_PLAYER_CONFIG:
		{
			new dialog[512];
			format(dialog, sizeof dialog, 
				
				"\
					Audios del servidor\t%s\n\
					Barras indicadoras (hud)\t%s\n\
					Ver sanciones, kicks, baneos\t%s\n\
					Número en guía telefónica\t%s\n\
					Sonidos del servidor\t%s\n\
					Mostrar hora del servidor\t%s\n\
					Canal de dudas\t%s\
				",
					(PLAYER_MISC[playerid][MISC_CONFIG_AUDIO] ? "Sí" : "No"),
					(PLAYER_MISC[playerid][MISC_CONFIG_HUD] ? "Sí" : "No"),
					(PLAYER_MISC[playerid][MISC_CONFIG_ADMIN] ? "Sí" : "No"),
					(PLAYER_PHONE[playerid][player_phone_VISIBLE_NUMBER] ? "Sí" : "No"),
					(PLAYER_MISC[playerid][MISC_CONFIG_SOUNDS] ? "Sí" : "No"),
					(PLAYER_MISC[playerid][MISC_CONFIG_TIME] ? "Sí" : "No"),
					(ACCOUNT_INFO[playerid][ac_DOUBT_CHANNEL] ? "Sí" : "No")
			);
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST, "Panel de configuración del usuario", dialog, "Cambiar", "Salir");	
			return 1;
		}
		case DIALOG_POLICE_BYC:
		{
			new caption[128];
			format(caption, sizeof caption, "Placa Nº%d | %c. %s", PLAYER_MISC[playerid][MISC_PLACA_PD], PLAYER_TEMP[playerid][pt_FIRST_NAME][0], PLAYER_TEMP[playerid][pt_SUB_NAME]);
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST, caption, "Ver últimos registros a BYC\nBuscar BYC de una persona", "Seguir", "Salir");	
			return 1;
		}
		case DIALOG_POLICE_BYC_NAME_FIND:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Búsqueda", "Introduce el nombre completo del sospechoso.\n\nUsa el guión bajo para separar nombre y apellido\nPor ejemplo: Nombre_Apellido.", "Buscar", "Salir");	
			return 1;
		}
		case DIALOG_POLICE_BYC_LAST_ALL:
		{
			for(new i = 0; i != MAX_LISTITEMS; i++ ) PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][i] = -1;
			
			new dialog[256 * 15], listitem, start_pos = PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] * PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT] + 1;
			format(dialog, sizeof dialog, "{E6F8E0}Sospechoso\t{E6F8E0}Añadido por\t{E6F8E0}Fecha\t{E6F8E0}Razón\n");
			
			new DBResult:Result, DB_Query[256], name[24], by[24], razon[128], date[24];
			format(DB_Query, sizeof DB_Query, "SELECT `CUENTA`.`NAME`, `POLICE_HISTORY`.* FROM `CUENTA`, `POLICE_HISTORY` WHERE `CUENTA`.`ID` = `POLICE_HISTORY`.`ID_USER` ORDER BY `DATE` DESC LIMIT %d, %d;", PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] * PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT], PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT]);
			Result = db_query(Database, DB_Query);
			
			for(new i; i < db_num_rows(Result); i++ )
			{
				PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = db_get_field_assoc_int(Result, "ID");
				db_get_field_assoc(Result, "NAME", name, 24);
				db_get_field_assoc(Result, "BY", by, 24);
				db_get_field_assoc(Result, "TEXT", razon, 128);
				db_get_field_assoc(Result, "DATE", date, 24);

				new line_str[256];
				format(line_str, sizeof line_str, "{E6F8E0}%d. %s\t{E6F8E0}%s\t{E6F8E0}%s\t{E6F8E0}%s\n", start_pos + listitem, name, by, date, razon);
				
				strcat(dialog, line_str);
				listitem ++;
				
				db_next_row(Result);
			}
			db_free_result(Result);
			
			PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = -2;
			strcat(dialog, "{c9c9c9}- Siguiente\n"); listitem ++;
			
			PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = -3;
			strcat(dialog, "{c9c9c9}- Anterior\n"); listitem ++;
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "BYC", dialog, "Seguir", "Cerrar");
			return 1;
		}
		case DIALOG_POLICE_BYC_LAST_PLAYER:
		{
			for(new i = 0; i != MAX_LISTITEMS; i++ ) PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][i] = -1;
			
			new dialog[256 * 15], listitem, start_pos = PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] * PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT] + 1;
			format(dialog, sizeof dialog, "{E6F8E0}Sospechoso\t{E6F8E0}Añadido por\t{E6F8E0}Fecha\t{E6F8E0}Razón\n");
			
			new DBResult:Result, DB_Query[256], name[24], by[24], razon[128], date[24];
			format(DB_Query, sizeof DB_Query, "SELECT `CUENTA`.`NAME`, `POLICE_HISTORY`.* FROM `CUENTA`, `POLICE_HISTORY` WHERE `POLICE_HISTORY`.`ID_USER` = '%d' AND `CUENTA`.`ID` = `POLICE_HISTORY`.`ID_USER` ORDER BY `DATE` DESC LIMIT %d, %d;", PLAYER_TEMP[playerid][pt_SELECTED_BYC_USER_ID], PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] * PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT], PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT]);
			Result = db_query(Database, DB_Query);
			
			for(new i; i < db_num_rows(Result); i++ )
			{
				PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = db_get_field_assoc_int(Result, "ID");
				db_get_field_assoc(Result, "NAME", name, 24);
				db_get_field_assoc(Result, "BY", by, 24);
				db_get_field_assoc(Result, "TEXT", razon, 128);
				db_get_field_assoc(Result, "DATE", date, 24);

				new line_str[256];
				format(line_str, sizeof line_str, "{E6F8E0}%d. %s\t{E6F8E0}%s\t{E6F8E0}%s\t{E6F8E0}%s\n", start_pos + listitem, name, by, date, razon);
				
				strcat(dialog, line_str);
				listitem ++;
				
				db_next_row(Result);
			}
			db_free_result(Result);
			
			PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = -2;
			strcat(dialog, "{c9c9c9}- Siguiente\n"); listitem ++;
			
			PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = -3;
			strcat(dialog, "{c9c9c9}- Anterior\n"); listitem ++;
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "BYC", dialog, "Seguir", "Cerrar");
			return 1;
		}
		case DIALOG_POLICE_DELETE_BYC:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "BYC", "¿Borrar esto del historial?", "Borrar", "Salir");
			return 1;
		}
		default: return 0;
	}
	return 1;
}
GetPlayerNegocios(playerid)
{
	new Query1[300], DBResult: qresult;
	new count = 0;
	format(Query1, sizeof(Query1), "SELECT * FROM `NEGOCIOS` WHERE `DUENO` = '%d' COLLATE NOCASE",ACCOUNT_INFO[playerid][ac_ID]);
	qresult = db_query(_DB_, Query1);
	count = db_num_rows(qresult);
	db_free_result(qresult);
	return count;
}
ComprarNegocio247(playerid, id)
{
	GivePlayerCash(playerid, -NEGOCIO[id][PrecioDinero]);
	NEGOCIO[id][EmpresaDueno]=ACCOUNT_INFO[playerid][ac_ID];
	NEGOCIO[id][SeVende]=1;
	new Query[150],label[256];
	format(Query,sizeof(Query),"UPDATE `NEGOCIOS` SET DUENO = '%d', ENVENTA = '1' WHERE `ID` = '%d' COLLATE NOCASE",ACCOUNT_INFO[playerid][ac_ID],id);
	db_query(_DB_, Query);
	format(label, sizeof(label), "# %d\n\n{FFFFFF}Tienda: {F7FE2E}%s\n\n\n{FFFFFF}Propietario: {F7FE2E}\n%s",id,NEGOCIO[id][Nombre],GetNameCuentaID(NEGOCIO[id][EmpresaDueno]));	
    UpdateDynamic3DTextLabelText(NEGOCIO[id][EmpresaLabel], 0xFFFFFFFF, label);
    MandaANegocio247(playerid, id);
    format(string2,sizeof(string2),"Compraste el negocio id '%d' Nombre: (%s) por $%s",id,NEGOCIO[id][Nombre],number_format_thousand(NEGOCIO[id][PrecioDinero]));
    MensajeNotificacion(playerid,string2);
	return 1;
}
MandaANegocio247(playerid, id)
{
	InNegocio[playerid]=id;
	//SendClientMessageEx(playerid,-1,"Entrando al negocio id: %d type: %d interior: %d",id, NEGOCIO[id][TIPONEGOCIO],NEGOCIO[id][INTERIOR]);
	switch(NEGOCIO[id][TIPONEGOCIO])
	{
		case 1: SetPlayerPosEx(playerid,-25.884498,-185.868988,1003.546875,400,		17	,NEGOCIO[id][Mundo], true);//24/7's
		case 2: SetPlayerPosEx(playerid,363.6980,-74.5827,1001.5078,295.3506,		10	,NEGOCIO[id][Mundo], true); //Burgershots
		case 3: SetPlayerPosEx(playerid,371.7098,-129.6890,1001.4922,7.3135,		5	,NEGOCIO[id][Mundo], true);//Well pizza
		case 4: SetPlayerPosEx(playerid,365.3767,-9.3404,1001.8516,337.8183,		9	,NEGOCIO[id][Mundo], true);//Cluckin bell
		case 5: SetPlayerPosEx(playerid,2215.454833,-1147.475585,1025.796875,260, 	15 	,NEGOCIO[id][Mundo], true);//Hotel
		case 6: SetPlayerPosEx(playerid,541.3116, -1296.2177, 17.8656,0.1477,		0	,NEGOCIO[id][Mundo], true);//Concesonaria LS
		case 7: SetPlayerPosEx(playerid,-860.6236,277.6891,750.7936,179.1519,		0	,NEGOCIO[id][Mundo], true);//Concesonaria SF
		case 8: SetPlayerPosEx(playerid,2133.1099, -1163.1195, 23.4096,179.1519,	0	,NEGOCIO[id][Mundo], true);//Concesonaria LS YEFERSON
		case 9: SetPlayerPosEx(playerid,1722.9362,-1769.8363,-1.7548,128.1687,		0	,NEGOCIO[id][Mundo], true);//Concesonaria LS COCHES VIP
		case 10: SetPlayerPosEx(playerid,1722.4885,1830.3362,-18.3956,204.8646,     0	,NEGOCIO[id][Mundo], true);//Concesonaria LV
		case 11: SetPlayerPosEx(playerid,-1665.5762,1209.5621,7.2546,209.1697,      0	,NEGOCIO[id][Mundo], true);//Concesonaria SF 2
		case 12: SetPlayerPosEx(playerid,-2185.7073,2416.8735,5.1856,137.6534,      0	,NEGOCIO[id][Mundo], true);//Concesonaria LV BOTES
		case 13: SetPlayerPosEx(playerid,264.0841,1778.6570,9998.9424,186.8322,     0	,NEGOCIO[id][Mundo], true);//Farmacia
	}
	
	if(NEGOCIO[id][SeVende]==1)
	{
		if(NEGOCIO[id][EmpresaDueno]==ACCOUNT_INFO[playerid][ac_ID])
		{
			MensajesAyuda(playerid,"Entraste a tu negocio usa /Negocio para desplegar el menu");
		}
	}

	new Query[100];
    format(Query,sizeof(Query),"UPDATE `INTOPOS` SET INNEGOCIO = '%d' WHERE `PLAYER` = '%d';",InNegocio[playerid], ACCOUNT_INFO[playerid][ac_ID]);
    db_query(Database, Query);
	return 1;
}
stock UpdateProducto247(playerid,querytext[],negocioid,ganaciaproducto,predioproducto)
{
	new DBResult:Result,Query1[256],DB_Query[256],reconteo,debugganacia;
	format(Query1,sizeof(Query1),"SELECT `%s`,`GANANCIA` FROM NEGOCIOS WHERE ID = '%d'",querytext,negocioid);
	Result = db_query(_DB_,Query1);
	if(db_num_rows(Result))
	{
	 	db_get_field_assoc(Result,querytext,Query1,10);
		reconteo = strval(Query1);

		db_get_field_assoc(Result,"GANANCIA",Query1,10);
		debugganacia = strval(Query1);
		debugganacia= debugganacia + ganaciaproducto;
		if(reconteo==0) return MensajesAyuda(playerid,"Ya no hay mas mercancia de ese producto");
		reconteo = reconteo - 1;

		NEGOCIO[negocioid][Ganancia] = debugganacia;
		format(DB_Query,sizeof(DB_Query), "UPDATE `NEGOCIOS` SET `%s` = '%d', `GANANCIA` = '%d' WHERE ID = '%d'",querytext,reconteo,debugganacia,negocioid);
    	db_query(_DB_, DB_Query);
	}
    db_free_result(Result);

    GivePlayerCash(playerid, -predioproducto);
	return 1;
}

GetCountInventary(playerid)
{
	new Query1[300], DBResult: qresult;
	new count = 0;
	format(Query1, sizeof(Query1), "SELECT * FROM `INVENTARIO` WHERE `PLAYER` = '%d' COLLATE NOCASE",ACCOUNT_INFO[playerid][ac_ID]);
	qresult = db_query(Database, Query1);
	count = db_num_rows(qresult);
	db_free_result(qresult);
	return count;
}
DesSaveInvetary(playerid)
{
	if(Saved_Invetary[playerid]==0) return SendClientMessage(playerid,-1,"No tienes nada equipado");
	switch(Saved_Invetary[playerid])
	{
		case 2:SendClientMessage(playerid,-1,"Se guardo la bebida");	
		case 3:SendClientMessage(playerid,-1,"Se guardo la leche");	
		case 4:SendClientMessage(playerid,-1,"Se guardo el jugo de naranja");	
		case 5:SendClientMessage(playerid,-1,"Se guardo el jugo de manzana");	
		case 6:SendClientMessage(playerid,-1,"Se guardo la lata de jugo");	
		case 7:SendClientMessage(playerid,-1,"Se guardo el pan");
		case 9: SendClientMessage(playerid,-1,"Se guardo el vendaje");
		case 10: SendClientMessage(playerid,-1,"Se guardo el botiquin");
		case 11: SendClientMessage(playerid,-1,"Se guardo la caña de pescar");
		case 12: SendClientMessage(playerid,-1,"Se guardo la masa de picar");
		case 20..22:SendClientMessage(playerid,-1,"Se guardo la Hamburguesa");
		case 23..24:SendClientMessage(playerid,-1,"Se guardo la pizza");	
		case 25:SendClientMessage(playerid,-1,"Se guardo el PERNIL");	
		case 26:SendClientMessage(playerid,-1,"Se guardo el trozo de carne");
		case 27:SendClientMessage(playerid,-1,"Se guardo el el kit de herramientas para reparar vehiculos");
	}
	RemovePlayerAttachedObject(playerid,9);
	Saved_Invetary[playerid]=0;
	HideOrShowTextdrawsNegocio(playerid, 1);
	return 1;
}
AttachObjetoNegocio(playerid)
{
	switch(Equiped_Inventary[playerid][TYPE])
	{
		case 2: SetPlayerAttachedObject(playerid,9,1669,5,0.122000,0.059999,0.009000,-27.700004,-157.699966,0.000000,1.000000,1.000000,1.000000,0,0);
		case 3: SetPlayerAttachedObject(playerid,9,19570,5,0.122000,0.059999,0.009000,-27.700004,-157.699966,0.000000,1.000000,1.000000,1.000000,0,0);
		case 4: SetPlayerAttachedObject(playerid,9,19563,5,0.108998,0.066999,0.109999,0.000000,-175.699981,0.000000,0.588999,0.808000,0.773999,0,0);
		case 5: SetPlayerAttachedObject(playerid,9,19564,5,0.108998,0.066999,0.109999,0.000000,-175.699981,0.000000,0.588999,0.808000,0.773999,0,0);
		case 6: SetPlayerAttachedObject(playerid,9,2601,5,0.100998,0.048999,-0.026000,-15.199994,-178.200042,0.000000,1.000000,1.000000,1.000000,0,0);
		case 7: SetPlayerAttachedObject(playerid,9,19579,6,0.070998,0.069999,-0.060998,0.000000,0.000000,0.000000,0.432999,1.072999,0.880999,0,0);
		case 9: SetPlayerAttachedObject(playerid,9,11736,5,0.236000,0.063998,0.000000,73.400032,21.299987,98.999961,0.722998,1.276000,1.003999,0,0);
		case 10: SetPlayerAttachedObject(playerid,9,11738,5,0.270999,0.000000,0.036000,15.200001,-109.500007,37.399974,1.000000,1.000000,1.000000,0,0);
		case 11: SetPlayerAttachedObject(playerid,9,18632,5,0.112999,0.030999,-0.039999,0.000000,0.000000,0.000000,1.000000,1.000000,1.000000,0,0);
		case 12: SetPlayerAttachedObject(playerid,9, 19631, 6, 0.048, 0.029, 0.103, -80.0, 80.0, 0.0);
		case 20: SetPlayerAttachedObject(playerid,9,2703,6,0.060998,0.046000,0.000000,0.000000,0.000000,1.799968,1.000000,0.690999,1.139999,0,0);
		case 21: SetPlayerAttachedObject(playerid,9,2703,6,0.060998,0.046000,0.000000,0.000000,0.000000,1.799968,1.000000,1.057999,0.976998,0,0);
		case 22: SetPlayerAttachedObject(playerid,9,2703,6,0.060998,0.046000,0.000000,0.000000,0.000000,1.799968,1.317000,1.127998,1.290997,0,0);
		case 23: SetPlayerAttachedObject(playerid,9,19580,6,0.054999,0.035999,0.000000,96.099960,-3.699999,9.500000,0.421000,0.423999,2.154999,0,0);
		case 24: SetPlayerAttachedObject(playerid,9,19580,6,0.054999,0.035999,0.000000,96.099960,-3.699999,9.500000,0.597999,0.753998,2.162998,0,0);
		case 25: SetPlayerAttachedObject(playerid,9,19847,6,0.070000,0.014000,-0.046999,-90.400009,-5.000010,0.000000,1.000000,1.000000,1.000000,0,0);
		case 26: SetPlayerAttachedObject(playerid,9,19582,6,0.041000,0.013000,0.068998,-74.899993,-167.199981,0.000000,1.000000,1.000000,1.000000,0,0);
		case 27: SetPlayerAttachedObject(playerid,9,19921,5,0.091999,0.018999,0.008000,58.100017,-9.499997,-82.800003,0.556999,0.388999,1.000000,0,0);
		//
	}
	return 1;
}
ManageSellNegocio(playerid)
{
 	new string[2820],lineas,query[256],DBResult:Result,notifid;
    format(query,sizeof(query),"SELECT NOMBRE,ID FROM `NEGOCIOS` WHERE DUENO = '%d'",ACCOUNT_INFO[playerid][ac_ID]);
    Result = db_query(_DB_,query);
    for(new i; i < db_num_rows(Result); i++)
    {
    	lineas++;
	    new text[256];
	    db_get_field_assoc(Result, "NOMBRE",text, 256);
	    db_get_field_assoc(Result, "ID",query, 20);
	    notifid = strval(query);
	    for(new l = 0; l < strlen(text); ++l)
	        if(text[l] == '{')
	            if(text[l+7] == '}')
	                strdel(text, l, l+8);
	    if(strlen(text) > 37)
	    {
	        strdel(text, 34, strlen(text));
	        strcat(text, "...", sizeof(text));
	    }
	    if(!i)
	        format(string, sizeof(string), "ID %d {FFFFFF}Nombre negocio: %s\n", notifid,text);
	    else
	        format(string, sizeof(string), "%s\nID %d {FFFFFF}Nombre negocio: %s\n", string, notifid,text);
        db_next_row(Result);
    }
    ShowPlayerDialog(playerid, DIALOG_SELLNEGOCIO, DIALOG_STYLE_LIST, "| VENDER NEGOCIO |", string, "Seguir", "Cerrar");
    db_free_result(Result);
	return 1;
}
ResetearNegocio(playerid, id)
{
	if(SELLNEGOCIO[playerid]==-1) return Kick(playerid);
	if(!Iter_Contains(Negocios, id)) return SendClientMessage(playerid,-1,"Ocurrio un error al resetear el negocio contacta a un administrador (Error id: 1)");
	if(NEGOCIO[playerid][SeVende]==1) return SendClientMessage(playerid,-1,"Ocurrio un error al resetear el negocio contacta a un administrador (Error id: 2)");

    SELLNEGOCIO[playerid]=-1;
    NEGOCIO[id][SeVende] = 0;
    NEGOCIO[id][EmpresaDueno] = 0;
    NEGOCIO[id][Iva] = 0.1;
    NEGOCIO[id][Lock] = 0;	
    NEGOCIO[id][Ganancia] = 0;

	new label[500];
	switch(NEGOCIO[id][SeVende])
	{
		case 0:
		{
			switch(NEGOCIO[id][TIPONEGOCIO])
			{
				case 1:format(label, sizeof(label), "# %d\n\n{81F781}Negocio '24/7' en venta\n\n{ffffff}Costo: ${81F781} %s\n\n",id,number_format_thousand(NEGOCIO[id][PrecioDinero]));
				case 2:format(label, sizeof(label), "# %d\n\n{81F781}Negocio 'BurgerShot' en venta\n\n{ffffff}Costo: ${81F781} %s\n\n",id,number_format_thousand(NEGOCIO[id][PrecioDinero]));
				case 3:format(label, sizeof(label), "# %d\n\n{81F781}Negocio 'Well Stacked Pizza' en venta\n\n{ffffff}Costo: ${81F781} %s\n\n",id,number_format_thousand(NEGOCIO[id][PrecioDinero]));
				case 4:format(label, sizeof(label), "# %d\n\n{81F781}Negocio 'Cluckin Bell' en venta\n\n{ffffff}Costo: ${81F781} %s\n\n",id,number_format_thousand(NEGOCIO[id][PrecioDinero]));
				case 5:format(label, sizeof(label), "# %d\n\n{81F781}Negocio 'Hotel' en venta\n\n{ffffff}Costo: ${81F781} %s\n\n",id,number_format_thousand(NEGOCIO[id][PrecioDinero]));
				case 6..12:format(label, sizeof(label), "# %d\n\n{81F781}Negocio 'Concesonario' en venta\n\n{ffffff}Costo: ${81F781} %s\n\n",id,number_format_thousand(NEGOCIO[id][PrecioDinero]));
				case 13:format(label, sizeof(label), "# %d\n\n{81F781}Negocio 'Farmacia' en venta\n\n{ffffff}Costo: ${81F781} %s\n\n",id,number_format_thousand(NEGOCIO[id][PrecioDinero]));
			}	
		}
	}
	UpdateDynamic3DTextLabelText(NEGOCIO[id][EmpresaLabel], 0xFFFFFFFF, label);

	new Query[150];
	format(Query,sizeof(Query),"UPDATE `NEGOCIOS` SET DUENO = '0', ENVENTA = '0' WHERE `ID` = '%d' AND DUENO='%d' COLLATE NOCASE",id,ACCOUNT_INFO[playerid][ac_ID]);
	db_query(_DB_, Query);
	format(string2,sizeof(string2),"Negocio: %s id: %d vendido por: %s",NEGOCIO[id][Nombre],id,number_format_thousand(NEGOCIO[id][PrecioDinero]/2));
	MensajeNotificacion(playerid,string2);
	GivePlayerCash(playerid, NEGOCIO[id][PrecioDinero]/2, true);
	return 1;
}
HaveAlreadyKeysFromThisHouse(player, casaid)
{
	new status=0;
	new DBResult:Result,Query[100];
	format(Query, sizeof(Query), "SELECT * FROM `KEYSCASAVIP` WHERE `PLAYER` = '%d' AND `CASAIDKEY` = '%d'",player,casaid);
    Result = db_query(_DB_, Query);
	if(db_num_rows(Result))
    {
		status =1;
    }
    else
    {
        status = 0;
    }
    db_free_result(Result);
	return status;
}
HaveAlreadyKeysFromThisDepart(player, casaid)
{
	new status=0;
	new DBResult:Result,Query[100];
	format(Query, sizeof(Query), "SELECT * FROM `KEYSAPARTAMENTOS` WHERE `PLAYER` = '%d' AND `APARTAMENTOID` = '%d'",player,casaid);
    Result = db_query(_DB_, Query);
	if(db_num_rows(Result))
    {
		status =1;
    }
    else
    {
        status = 0;
    }
    db_free_result(Result);
	return status;
}
stock CrearApartamento(playerid,Float:posx,Float:posy,Float:posz,interior,precio,type_hou)
{
	new id = Iter_Free(Apartamentos);
	if(id == -1) return SendClientMessage(playerid, 0xCCCCCCFF, "* No puedes crear màs apartamentos.");
	new label[256];
	APARTAMENTO[id][CasaDuenoID] = 0;
	APARTAMENTO[id][PRECIO] = precio;
	APARTAMENTO[id][Lock] = 1;
	APARTAMENTO[id][ENVENTA] = 0;
    APARTAMENTO[id][CasaX] = posx;
    APARTAMENTO[id][CasaY] = posy;
    APARTAMENTO[id][CasaZ] = posz;
    APARTAMENTO[id][INTERIOR] = interior;
    APARTAMENTO[id][TYPE_HOUSE] = type_hou;
    /**/
    CrearInteriorParaApartamento(id,interior,1,1,1,1,1,1,1,1,1);
    /**/
    switch(APARTAMENTO[id][TYPE_HOUSE])
    {
    	case 1: format(label, sizeof(label), "{FFFFFF}Apartamento en venta\n\nCosto: {FFFF00}%s ",number_format_thousand(APARTAMENTO[id][PRECIO]));
    	case 2: format(label, sizeof(label), "{FFFFFF}Casa en venta\n\nCosto: {FFFF00}%s ",number_format_thousand(APARTAMENTO[id][PRECIO]));
    }
    
    APARTAMENTO[id][CasaPickup] = CreateDynamicPickup(1273, 1, APARTAMENTO[id][CasaX],APARTAMENTO[id][CasaY],APARTAMENTO[id][CasaZ]);

	APARTAMENTO[id][CasaLabel] = CreateDynamic3DTextLabel(label, 0xFFFFFFFF, APARTAMENTO[id][CasaX], APARTAMENTO[id][CasaY], APARTAMENTO[id][CasaZ]+0.35, 15.0, .testlos = 1);

	SendClientMessage(playerid,-1,"Apartamento creado");
	new DB_Query[300];
	format(DB_Query, sizeof(DB_Query),
	"INSERT INTO `APARTAMENTOS` (`PLAYER`,`ENVENTA`,`X`,`Y`,`Z`,`PRECIO`,`INTERIOR`,`TYPE_HOUSE`) VALUES ('0','0','%f','%f','%f','%d','%d','%d')",\
	posx,posy,posz,precio,interior,type_hou);
	db_query(_DB_, DB_Query);
	Iter_Add(Apartamentos, id);
	return 1;
}
stock CrearCasaVip(playerid,Float:posx,Float:posy,Float:posz,Float:posgx,Float:posgy,Float:posgz,interior,precio,tipemoneda)
{
	new id = Iter_Free(Casasvip);
	if(id == -1) return SendClientMessage(playerid, 0xCCCCCCFF, "* No puedes crear màs casas.");
	new label[256];
	CASAVIP[id][CasaDuenoID] = 0;
	CASAVIP[id][PRECIO] = precio;
	CASAVIP[id][Lock] = 1;
	CASAVIP[id][ENVENTA] = 0;
	CASAVIP[id][TIPOMONEDA] = tipemoneda;

    CASAVIP[id][CasaX] = posx;
    CASAVIP[id][CasaY] = posy;
    CASAVIP[id][CasaZ] = posz;

    CASAVIP[id][GARAJEX] = posgx;
    CASAVIP[id][GARAJEY] = posgy;
    CASAVIP[id][GARAJEZ] = posgz;

    CASAVIP[id][INTERIOR] = interior;
    CASAVIP[id][GARAJETIPO] = 1;

    /**/
    CrearInteriorParaCasa(id,CASAVIP[id][INTERIOR],1,1,1,1,1,1,1,1,1);
    /**/
    switch(CASAVIP[id][ENVENTA])
    {
    	case 0:
    	{
    		switch(CASAVIP[id][TIPOMONEDA])
    		{
    			case 1: format(label, sizeof(label), "{FFFFFF}Casa en venta\n\nCosto: {FFFF00}%s ",number_format_thousand(CASAVIP[id][PRECIO]));
    			case 2: format(label, sizeof(label), "{FFFFFF}Casa en venta\n\nCosto: {FFFF00}%d {FFFFFF}(ZonCoins)",CASAVIP[id][PRECIO]);
    		}
    		CASAVIP[id][CasaPickup] = CreateDynamicPickup(1273, 1, CASAVIP[id][CasaX],CASAVIP[id][CasaY],CASAVIP[id][CasaZ]);
    	}
    }
	CASAVIP[id][CasaLabel] = CreateDynamic3DTextLabel(label, 0xFFFFFFFF, CASAVIP[id][CasaX], CASAVIP[id][CasaY], CASAVIP[id][CasaZ]+0.35, 15.0, .testlos = 1);

	format(label, sizeof(label), "{FFFFFF}\nGaraje");
	CreateDynamic3DTextLabel(label, 0xFFFFFFFF, CASAVIP[id][GARAJEX], CASAVIP[id][GARAJEY], CASAVIP[id][GARAJEZ]+0.35, 15.0, .testlos = 1);
	CreateDynamicObject(19902,CASAVIP[id][GARAJEX], CASAVIP[id][GARAJEY], CASAVIP[id][GARAJEZ],0,0,0);
	SendClientMessage(playerid,-1,"Casa creada");
	new DB_Query[300];
	format(DB_Query, sizeof(DB_Query),
	"INSERT INTO `CASASVIP` (`PLAYER`,`ENVENTA`,`X`,`Y`,`Z`,`GARAJEX`,`GARAJEY`,`GARAJEZ`,`PRECIO`,`TIPOMONEDA`,`INTERIOR`) VALUES ('0','0','%f','%f','%f','%f','%f','%f','%d','%d','%d')",\
	posx,posy,posz,posgx,posgy,posgz,precio,tipemoneda,interior);
	db_query(_DB_, DB_Query);
	Iter_Add(Casasvip, id);

	return 1;
}
funcion RestarPeaje(id)
{
	KillTimer(POSPEAJES[id][TIMER]);
	POSPEAJES[id][STATUS]=0;
	MoveDynamicObject(POSPEAJES[id][OBJETO],POSPEAJES[id][PosBx],POSPEAJES[id][PosBy],POSPEAJES[id][PosBz],1.5,POSPEAJES[id][RotBx],POSPEAJES[id][RotBy], POSPEAJES[id][RotBz]);
	return 1;
}
Check_Weapon_Skin(playerid, weapon_idaa)
{
	RemovePlayerAttachedObject(playerid,8);
	if(WEAPON_SKIN_ACTIVE[playerid][weapon_idaa] == true)
	{
		switch (YHash(Armas_Skin[ WEAPON_SKIN[playerid][weapon_idaa] ][2]))
		{
			
		    case _H<Rojo>:SetPlayerAttachedObject(playerid,8,Get_Weapon_Object(weapon_idaa),6,0.0,-0.013,-0.002,-1.099999,2.4,1.199999,1.058,1.306999,1.215,-65536,-65536);
		    case _H<Verde>:SetPlayerAttachedObject(playerid,8,Get_Weapon_Object(weapon_idaa),6,0.0,-0.013,-0.002,-1.099999,2.4,1.199999,1.058,1.306999,1.215,-12009472,-12009472);
		    case _H<Rosado>:SetPlayerAttachedObject(playerid,8,Get_Weapon_Object(weapon_idaa),6,0.0,-0.013,-0.002,-1.099999,2.4,1.199999,1.058,1.306999,1.215,-383796,-383796);
		    case _H<Cafe>:SetPlayerAttachedObject(playerid,8,Get_Weapon_Object(weapon_idaa),6,0.0,-0.013,-0.002,-1.099999,2.4,1.199999,1.058,1.306999,1.215,-12837875,-12837875);
		    case _H<Amarillo>:SetPlayerAttachedObject(playerid,8,Get_Weapon_Object(weapon_idaa),6,0.0,-0.013,-0.002,-1.099999,2.4,1.199999,1.058,1.306999,1.215,-1856494,-1856494);
		    case _H<Azul>:SetPlayerAttachedObject(playerid,8,Get_Weapon_Object(weapon_idaa),6,0.0,-0.013,-0.002,-1.099999,2.4,1.199999,1.058,1.306999,1.215,-15738374,-15738374);
		    case _H<Negro>:SetPlayerAttachedObject(playerid,8,Get_Weapon_Object(weapon_idaa),6,0.0,-0.013,-0.002,-1.099999,2.4,1.199999,1.058,1.306999,1.215,-16777216,-16777216);
		}
	}
	return 1;
}
public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
	//===============================
 	//assert( Antiflood( playerid ) );
	//Dialogo manage facciones
	switch(dialogid)
	{
		case MAKE_ZONE:
		{
			if(response)
			{
				new query[256];
				format(query,sizeof query,"INSERT INTO ZONAS (MinX,MinY,MaxX,MaxY) VALUES('%f','%f','%f','%f')",
					minX[playerid],minY[playerid],maxX[playerid],maxY[playerid]);
				db_query(_DB_,query);
				new var = Iter_Free(Zones);
				ZInfo[var][ZminX] = minX[playerid];
				ZInfo[var][ZminY] = minY[playerid];
				ZInfo[var][ZmaxX] = maxX[playerid];
				ZInfo[var][ZmaxY] = maxY[playerid];
				ZInfo[var][BANDA] = 0;
				ZInfo[var][locked] = false;
				ZInfo[var][Owned] = false;
				ZInfo[var][Region]  = Area_AddBox(minX[playerid],minY[playerid], maxX[playerid], maxY[playerid]);
				ZInfo[var][_Zone] = GangZoneCreate(minX[playerid],minY[playerid], maxX[playerid], maxY[playerid]);
				Iter_Add(Zones, var);
				/**/
				new DBResult:Result2,DB_Query[50],Max_Id;
				format(DB_Query, sizeof(DB_Query), "SELECT ID, MAX(`ID`) FROM `ZONAS` WHERE ID");
				Result2 = db_query(_DB_, DB_Query);
				if(db_num_rows(Result2))
				{
					Max_Id = db_get_field_assoc_int(Result2,"ID");
				}
				ZONITAS = Max_Id;
				ZInfo[var][ID] = Max_Id;
				/**/
				for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
				{
					if(IsPlayerConnected(i))
					{
						GangZoneShowForPlayer(i, ZInfo[var][_Zone],ZONE_COLOR);
					}
				}
			}
		}
		//
		case DIALOG_DUDA:
		{
			if(response)
			{
				SendMessageToDoubtChannel(playerid, PLAYER_TEMP[playerid][pt_DUDA]);
			}
		}
		case DIALOG_CORREDOR:
		{
		    if(response)
		    {
		        switch (listitem)
		        {
		            case 0: {CrearVehiculoPRO(playerid,411);}
		            case 1: {CrearVehiculoPRO(playerid,495);}
		            case 2: {CrearVehiculoPRO(playerid,444);}
		            case 3: {CrearVehiculoPRO(playerid,541);}
		            case 4: {CrearVehiculoPRO(playerid,406);}
		        }
		    }
		    if(!response)
		    {
		        CrearVehiculoPRO(playerid,411);
		    }
		    return 1;
		}

		case DIALOG_ABANDoNAR_BANDA:
		{
			if(response)
			{
				new DB_Query[128];
				if(PLAYER_CREW[playerid][player_crew_RANK] == 0)
				{
					new DBResult:Result_count, total;
					format(DB_Query, sizeof DB_Query, "SELECT COUNT() FROM `PLAYER_CREW` WHERE `ID_CREW` = '%d' AND `RANK` = '0';", PLAYER_CREW[playerid][player_crew_ID]);
					Result_count = db_query(Database, DB_Query);
					
					if(db_num_rows(Result_count)) total = db_get_field_int(Result_count, 0);
					db_free_result(Result_count);
					
					if(total <= 1)
					{
						SendClientMessage(playerid, -1, "{00FF80}No puedes abandonar la banda porque eres el único miembro con el rango fundador.");
						return 1;
					}
				}
				
				new message[145];
				format(message, sizeof message, "{%06x}[Banda] {FFFFFF}%s (%s) ha abandonado la banda.", CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_COLOR] >>> 8, PLAYER_TEMP[playerid][pt_RP_NAME], CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_NAME]);
				SendMessageToCrewMembers(PLAYER_CREW[playerid][player_crew_ID], -1, message);
				
				format(DB_Query, sizeof DB_Query, "DELETE FROM `PLAYER_CREW` WHERE `ID_USER` = '%d';", ACCOUNT_INFO[playerid][ac_ID]);
				db_query(Database, DB_Query);
				
				SetPlayerNormalColor(playerid);
				CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_MEMBERS] --;
				CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_ONLINE_MEMBERS] --;
				HidePlayerGangZones(playerid);
				
				new tmp_PLAYER_CREW[enum_PLAYER_CREW];
				PLAYER_CREW[playerid] = tmp_PLAYER_CREW;
			}
		}
		case DIALOG_MENSAJE_INV_BANDA:
		{
			if(response)
			{
				if(strlen(inputtext) > 60 || strlen(inputtext) < 5 ) return SendClientMessage(playerid,-1,"El mensaje no debe ser mayor a 60 caracteres y menor a 5");
				for(new i = 0, j = strlen(inputtext); i < j; i++)
		        switch(inputtext[i])
		        {
		            case 'a'..'z': continue;
		            case 'A'..'Z': continue;
		            case ' ': continue;
		            case ',': continue;
                    case '?': continue;
		            default: return ShowPlayerDialog(playerid, DIALOG_MENSAJE_INV_BANDA, DIALOG_STYLE_INPUT, "| Enviar mensaje banda |", "\n{FF0000}Error: Solo se admiten letras", "Continuar", "Cancelar");
		        }

				new DB_Query[300];
				format(DB_Query, sizeof DB_Query, "DELETE FROM `INV_BANDA` WHERE `PLAYER` = '%d';", ACCOUNT_INFO[playerid][ac_ID]);
				db_query(_DB_, DB_Query);
				format(DB_Query, sizeof DB_Query,"Solicitud enviada a la banda: %s",GetNameCrew(PLAYER_TEMP[playerid][get_ID_BANDA_INV]));
				MensajesAyuda(playerid,DB_Query);
				SendClientMessageEx(playerid,-1,"Solicitud enviada a la banda: %s, si has enviado solicitudes a otra banda se eliminaran",GetNameCrew(PLAYER_TEMP[playerid][get_ID_BANDA_INV]));
				format(DB_Query, sizeof DB_Query, "INSERT INTO `INV_BANDA` (BANDA_ID,PLAYER,TEXT_INV) VALUES ('%d','%d','%s')",
					PLAYER_TEMP[playerid][get_ID_BANDA_INV],ACCOUNT_INFO[playerid][ac_ID],inputtext);
				db_query(_DB_, DB_Query);
			}
		}
		case DIALOG_MANAVE_INV_BANDA:
		{
			if(listitem == PAGINA[playerid])
			{
				PAGE[playerid]=0;
				HidePlayerDialog(playerid);
				return 1;
			}
			if(!response)
			{
				PAGE[playerid]+=20;
		 		ManageSolicitudesBanda(playerid);
			}
			if(response)
			{
				new i = 0, labelid[53], caption[34];
		  		while(inputtext[i+4] != ' ')
		    	++i;

				strmid(labelid, inputtext, 3, 4+i, sizeof(labelid));
		  		ViendoMensaje[playerid] =  strval(labelid);

		  		new DB_Query[60],DBResult:Result,jugadora,mensajito[61+1];
				format(DB_Query, sizeof DB_Query,"SELECT PLAYER,TEXT_INV FROM INV_BANDA WHERE ID='%d';",ViendoMensaje[playerid]);
				Result = db_query(_DB_, DB_Query);
				if(db_num_rows(Result))
				{
					jugadora = db_get_field_assoc_int(Result, "PLAYER");
					db_get_field_assoc(Result, "TEXT_INV", mensajito, 62);
				}
				db_free_result(Result);
				PLAYER_TEMP[playerid][pt_CREW_INVITE_CUENTA] = jugadora;
		    	format(caption, sizeof(caption), "Aceptar o rechazar?", ViendoMensaje[playerid]);
		     	new string[256];
		      	format(string,sizeof string,"Jugador: %s\n\nMensaje: (%s)",GetNameCuentaID(jugadora),mensajito);
		        ShowPlayerDialog(playerid, DIALOG_MANAVE_INV_BANDA_TRE, DIALOG_STYLE_MSGBOX, caption, string, "Aceptar banda", "Rechazar banda");
			}
		}
		case DIALOG_MANAVE_INV_BANDA_TRE:
		{
			if(response)
			{
				if(GetMiembrosForThisBanda(PLAYER_CREW[playerid][player_crew_ID]) >= 20) return MensajesAyuda(playerid,"La banda esta llena");
				SendClientMessageEx(playerid, -1, "Quieres invitar a %s a la banda, elige el rango que le ofreces.",GetNameCuentaID(PLAYER_TEMP[playerid][pt_CREW_INVITE_CUENTA] ));
				//
				new dialog[64 * MAX_CREW_RANKS], line_str[64], listitam;
				for(new i = 0; i != MAX_CREW_RANKS; i ++)
				{
					if(!CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][i][crew_rank_VALID]) continue;
					
					PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitam] = i;
					if(i < PLAYER_CREW[playerid][player_crew_RANK]) format(line_str, sizeof line_str, "{666666}%d. %s\n", listitam + 1, CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][i][crew_rank_NAME]);
					else format(line_str, sizeof line_str, "{E6F8E0}%d. %s\n", listitam + 1, CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][i][crew_rank_NAME]);
					strcat(dialog, line_str);
					listitam ++;
				}
				ShowPlayerDialog(playerid, DIALOG_SELECT_RANK_BANDA, DIALOG_STYLE_LIST, "Invitar", dialog, "Invitar", "Salir");
			}
			else if(!response)
			{
				new DB_Query[60],DBResult:Result,jugadora,to_player,conectado_;
				format(DB_Query, sizeof DB_Query,"SELECT PLAYER FROM INV_BANDA WHERE ID='%d';",ViendoMensaje[playerid]);
				Result = db_query(_DB_, DB_Query);
				if(db_num_rows(Result))
				{
					jugadora = db_get_field_assoc_int(Result, "PLAYER");
				}
				db_free_result(Result);
				format(DB_Query, sizeof DB_Query,"DELETE FROM `INV_BANDA` WHERE `PLAYER`='%d';",PLAYER_TEMP[playerid][pt_CREW_INVITE_CUENTA]);
				db_query(_DB_, DB_Query);
				MensajesAyuda(playerid,"Solicitud rechazada");
				format(DB_Query, sizeof DB_Query,"SELECT CONNECTED,PLAYERID FROM CUENTA WHERE ID='%d';",jugadora);
				Result = db_query(Database, DB_Query);
				if(db_num_rows(Result))
				{
					conectado_ = db_get_field_assoc_int(Result, "CONNECTED");
					to_player = db_get_field_assoc_int(Result, "PLAYERID");
				}
				db_free_result(Result);
				switch(conectado_)
				{
					case 0:
					{

					}
					case 1:
					{

						SendClientMessageEx(to_player,0xFF0000FF,"Se rechazo tu solicitud para unirte a la banda: (%s)",GetNameBandaId(PLAYER_CREW[playerid][player_crew_ID]));
					}
				}
			}
		}
		case DIALOG_SELECT_RANK_BANDA:
		{
			if(response)
			{
				
				new DB_Query[190],DBResult:Result,conectado_,to_player;
				format(DB_Query, sizeof DB_Query,"SELECT CONNECTED,PLAYERID FROM CUENTA WHERE ID='%d';",PLAYER_TEMP[playerid][pt_CREW_INVITE_CUENTA]);
				Result = db_query(Database, DB_Query);
				if(db_num_rows(Result))
				{
					conectado_ = db_get_field_assoc_int(Result, "CONNECTED");
					to_player = db_get_field_assoc_int(Result, "PLAYERID");

					if(to_player != -1)
					{
						PLAYER_TEMP[playerid][pt_CREW_INVITE_PID] = to_player;
						PLAYER_TEMP[playerid][pt_CREW_INVITE_AID] = ACCOUNT_INFO[to_player][ac_ID];
					}
				}
				db_free_result(Result);
				switch(conectado_)
				{
					case 0:
					{
						format(DB_Query, sizeof DB_Query, 
									
								"\
									DELETE FROM `PLAYER_CREW` WHERE `ID_USER` = '%d';\
									INSERT INTO `PLAYER_CREW` (`ID_USER`, `ID_CREW`, `RANK`) VALUES ('%d', '%d', '%d');\
								",
									PLAYER_TEMP[playerid][pt_CREW_INVITE_CUENTA],
									PLAYER_TEMP[playerid][pt_CREW_INVITE_CUENTA],
									PLAYER_CREW[playerid][player_crew_ID],
									listitem
						);
						db_query(Database, DB_Query);

						format(DB_Query, sizeof DB_Query,"DELETE FROM `INV_BANDA` WHERE `PLAYER`='%d';",PLAYER_TEMP[playerid][pt_CREW_INVITE_CUENTA]);
						db_query(_DB_, DB_Query);

						new message[145];
						format(message, sizeof message, "{%06x}[Banda]' {FFFFFF}%s se ha unido a la banda con el rango %s.", CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_COLOR] >>> 8, GetNameCuentaID(PLAYER_TEMP[playerid][pt_CREW_INVITE_CUENTA]), CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] ][crew_rank_NAME]);
						SendMessageToCrewMembers(PLAYER_CREW[playerid][player_crew_ID], -1, message);
					}
					case 1:
					{
						if(PLAYER_TEMP[playerid][pt_CREW_INVITE_PID] == -1) return MensajesAyuda(playerid,"Error, intenta nuevamente");
						if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == -1) return 1;
						if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] < PLAYER_CREW[playerid][player_crew_RANK])
						{
							SendClientMessage(playerid, -1, "{00FF80}No puedes invitar con este rango porque es superior al tuyo.");
							return 1;
						}
						
						if(PLAYER_WORKS[ PLAYER_TEMP[playerid][pt_CREW_INVITE_PID] ][WORK_POLICE]) return SendClientMessage(playerid, -1, "{00FF80}Esta persona es policía y no puede tener banda.");
						if(PLAYER_CREW[ PLAYER_TEMP[playerid][pt_CREW_INVITE_PID] ][player_crew_VALID]) return SendClientMessage(playerid, -1, "{00FF80}Esta persona pertenece a otra banda.");
						if(PLAYER_TEMP[ PLAYER_TEMP[playerid][pt_CREW_INVITE_PID] ][pt_GAME_STATE] != GAME_STATE_NORMAL) return SendClientMessage(playerid, -1, "{00FF80}No puedes aceptar a este jugador ahora.");
						
						SendClientMessageEx(playerid, -1, "Has unido a (%s) a la banda con el rango %s.", PLAYER_TEMP[ PLAYER_TEMP[playerid][pt_CREW_INVITE_PID] ][pt_RP_NAME], CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] ][crew_rank_NAME]);
						
						PLAYER_TEMP[ PLAYER_TEMP[playerid][pt_CREW_INVITE_PID] ][pt_CREW_INVITE_INFO][0] = PLAYER_CREW[playerid][player_crew_ID];
						PLAYER_TEMP[ PLAYER_TEMP[playerid][pt_CREW_INVITE_PID] ][pt_CREW_INVITE_INFO][1] = PLAYER_CREW[playerid][player_crew_INDEX];
						PLAYER_TEMP[ PLAYER_TEMP[playerid][pt_CREW_INVITE_PID] ][pt_CREW_INVITE_INFO][2] = PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem];

						SendToBanda(PLAYER_TEMP[playerid][pt_CREW_INVITE_PID]);
					}
				}
			}
		}
		//
		case DIALOG_TIENDA_RP:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						if(ACCOUNT_INFO[playerid][ac_SD] < 10) return SendClientMessage(playerid,-1,""R"Error: "W"No tienes suficientes "SERVER_COIN"");
						ShowPlayerDialog(playerid,DIALOG_CHANGE_MY_NAME,DIALOG_STYLE_INPUT,"Cambiar nombre","Ingresa el nuevo nombre","Aceptar","Cancelar");
					}
					case 1:
					{
						if(ACCOUNT_INFO[playerid][ac_SD] == 0) return SendClientMessage(playerid,-1,""R"Error: "W"No tienes suficientes "SERVER_COIN"");
						ShowPlayerDialog(playerid,DIALOG_CANJEAR_DINERO,DIALOG_STYLE_INPUT,"Canjear dinero IC","Ingresa la cantidad\n 1 RP = 50000, 2 RP = 100.000 etc..","Aceptar","Cancelar");
					}
					case 2:
					{
						if(ACCOUNT_INFO[playerid][ac_SU] == 1)
						{
							ShowPlayerDialog(playerid,DIALOG_TIENDARP_ACEP_VUYV1,DIALOG_STYLE_MSGBOX,"Comprar vip 1","Ya tienes vip1 deseas renovarlo por 20 "SERVER_COIN"\nNota: si te faltan x dias para vencer se quitaran y se pondran 30 dias", "Aceptar", "Cancelar");
						}
						ShowPlayerDialog(playerid,DIALOG_TIENDARP_ACEP_VUYV1,DIALOG_STYLE_MSGBOX,"Comprar vip 1","El costo del vip1 tiene un precio de 20 "SERVER_COIN"", "Aceptar", "Cancelar");
					}
					case 3:
					{
						if(ACCOUNT_INFO[playerid][ac_SU] == 2)
						{
							ShowPlayerDialog(playerid,DIALOG_TIENDARP_ACEP_VUYV2,DIALOG_STYLE_MSGBOX,"Comprar vip 2","Ya tienes vip 2 deseas renovarlo por 30 "SERVER_COIN"\nNota: si te faltan x dias para vencer se quitaran y se pondran 30 dias", "Aceptar", "Cancelar");
						}
						ShowPlayerDialog(playerid,DIALOG_TIENDARP_ACEP_VUYV2,DIALOG_STYLE_MSGBOX,"Comprar vip 2","El costo del vip 2 tiene un precio de 30 "SERVER_COIN"", "Aceptar", "Cancelar");
					}
					case 4:
					{
						if(ACCOUNT_INFO[playerid][ac_SD] < 50) return SendClientMessage(playerid,-1,""R"Error: "W"No tienes suficientes "SERVER_COIN"");
						ShowPlayerDialog(playerid,DIALOG_CHANGE_MY_NAME_PRO,DIALOG_STYLE_INPUT,"Cambiar nombre","Puedes ponerte un solo nombre siempre, Ejemplo: Michael_Angelus\nIngresa el nuevo nombre","Aceptar","Cancelar");
					}
					case 5:
					{
						if(ACCOUNT_INFO[playerid][ac_SD] < 30) return SendClientMessage(playerid,-1,""R"Error: "W"No tienes suficientes "SERVER_COIN"");
						ShowPlayerDialog(playerid,DIALOG_BUY_LEVEL_RP,DIALOG_STYLE_MSGBOX,"Comprar nivel","Comprar +1 nivel\nDeseas comprar +1 de nivel?\nCosto: 30 "SERVER_COIN"","Aceptar","Cancelar");
					}
					case 6:
					{
						ShowDialog(playerid, DIALOG_HELP_RP_);
					}

				}
			}
		}
		case DIALOG_BUY_LEVEL_RP:
		{
			if(response)
			{
				if(ACCOUNT_INFO[playerid][ac_SD] < 30) return SendClientMessage(playerid,-1,""R"Error: "W"No tienes suficientes "SERVER_COIN"");

				KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][2]);

				ACCOUNT_INFO[playerid][ac_REP] = 1;
				ACCOUNT_INFO[playerid][ac_LEVEL]=ACCOUNT_INFO[playerid][ac_LEVEL] + 1;
				UpdateReputationTextDraws(playerid);
				SetPlayerSkillLevels(playerid);
				
				SendClientMessageEx(playerid, -1, "{58ACFA}¡Felicidades! {FFFFFF}Has subido al nivel %d.", ACCOUNT_INFO[playerid][ac_LEVEL]);
				SetPlayerScore(playerid, ACCOUNT_INFO[playerid][ac_LEVEL]);
				PlayerPlaySoundEx(playerid, 1058, 0.0, 0.0, 0.0);
				
				ACCOUNT_INFO[playerid][ac_TIME_FOR_REP] = TIME_FOR_REP;
				PLAYER_TEMP[playerid][pt_TIME_PASSED_LAST_REP] = gettime() * 1000;
				
				ACCOUNT_INFO[playerid][ac_TIME_PLAYING] += gettime() - PLAYER_TEMP[playerid][pt_TIME_PLAYING];
				PLAYER_TEMP[playerid][pt_TIME_PLAYING] = gettime();
				new DB_Query[256];
				format(DB_Query, sizeof DB_Query, 
				
					"\
						UPDATE `CUENTA` SET `TIME-PLAYING` = '%d', `LEVEL` = '%d', `REP` = '%d', `TIME_FOR_REP` = '%d', `PAYDAY_REP` = '%d' WHERE `ID` = '%d';\
					",
						ACCOUNT_INFO[playerid][ac_TIME_PLAYING], ACCOUNT_INFO[playerid][ac_LEVEL], ACCOUNT_INFO[playerid][ac_REP], TIME_FOR_REP, ACCOUNT_INFO[playerid][ac_PAYDAY_REP], ACCOUNT_INFO[playerid][ac_ID]
				);
				db_query(Database, DB_Query);
				
				KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][2]);
				PLAYER_TEMP[playerid][pt_TIMERS][2] = SetTimerEx("AddPlayerReputation", ACCOUNT_INFO[playerid][ac_TIME_FOR_REP], false, "i", playerid);
				GastarRp(playerid,30);

			}
		}
		case DIALOG_CHANGE_MY_NAME_PRO:
		{
			if(response)
			{
				if(ACCOUNT_INFO[playerid][ac_SD] < 50) return SendClientMessage(playerid,-1,""R"Error: "W"No tienes suficientes "SERVER_COIN"");

				for(new i = 0, j = strlen(inputtext); i < j; i++)
		        switch(inputtext[i])
		        {
		            case 'a'..'z': continue;
		            case 'A'..'Z': continue;
		            default: return ShowPlayerDialog(playerid, DIALOG_CHANGE_MY_NAME_PRO, DIALOG_STYLE_INPUT, "| Cambiar nombre |", "\n{FF0000}Error: Solo se admiten letras", "Continuar", "Cancelar");
		        }
				//if(!IsValidRPName(inputtext)) return SendClientMessageEx(playerid, -1, "El nombre '%s' no cumple con el formato Nombre_Apellido.", inputtext);
				if(strlen(inputtext) < 4) return SendClientMessage(playerid,-1,"El nombre debe ser mayor a 4 caracteres");
				new DBResult:Result, DB_Query[256], bool:used;
				format(DB_Query, sizeof DB_Query, "SELECT `ID` FROM `CUENTA` WHERE `NAME` = '%q';", inputtext);
				Result = db_query(Database, DB_Query);
				if(db_num_rows(Result)) used = true;
				db_free_result(Result);
				if(used) return SendClientMessageEx(playerid, -1, "El nombre '%s' está en uso.", inputtext);

				format(PLAYER_TEMP[playerid][pt_NAME], 24, "%s", inputtext);
				format(ACCOUNT_INFO[playerid][ac_NAME], 24, "%s", inputtext);
				SetRolePlayNames(playerid);
				SetPlayerName(playerid, inputtext);
				
				format(DB_Query, sizeof DB_Query, "UPDATE `CUENTA` SET `NAME` = '%q' WHERE `ID` = '%d';", inputtext, ACCOUNT_INFO[playerid][ac_ID]);
				db_query(Database, DB_Query);

				format(DB_Query, sizeof DB_Query, "INSERT INTO VIP_NAME (NAME) VALUES ('%s')",inputtext);
				db_query(Database, DB_Query);

				new string22[256];
				format(string22, sizeof(string22),"* El jugador '%s(ID:%d) cambio su nombre a '%s'",PLAYER_TEMP[playerid][pt_NAME],playerid,inputtext);
                print(string22);
                Log("CambiosDeNombre.txt",string22);

				SendClientMessageEx(playerid, -1, "{E6F8E0}Tu nombre ha sido cambiado a '%s'", inputtext);

				GastarRp(playerid,10);

				SaveUserData(playerid);
			}
		}
		case DIALOG_TIENDARP_ACEP_VUYV1:
		{
			if(response)
			{
				if(ACCOUNT_INFO[playerid][ac_SD] < 20)
				{
					SendClientMessageEx(playerid, -1, "{00FF80}Te faltan %d "SERVER_COIN" para poder comprar VIP 1.", 20 - ACCOUNT_INFO[playerid][ac_SD]);
					return 1;
				}
				SetPlayerVip(playerid, 1, 20, 30);
			}
		}
		case DIALOG_TIENDARP_ACEP_VUYV2:
		{
			if(response)
			{
				if(ACCOUNT_INFO[playerid][ac_SD] < 30)
				{
					SendClientMessageEx(playerid, -1, "{00FF80}Te faltan %d "SERVER_COIN" para poder comprar VIP 2.", 30 - ACCOUNT_INFO[playerid][ac_SD]);
					return 1;
				}
				SetPlayerVip(playerid, 2, 30, 30);
			}
		}
		case DIALOG_CANJEAR_DINERO:
		{
			if(response)
			{
				if(!strlen(inputtext)) return ShowPlayerDialog(playerid,DIALOG_CANJEAR_DINERO,DIALOG_STYLE_INPUT," | DAR INVETARIO | ","ERROR, SOLO SE PERMITEN NUMEROS",">>","X");
				if(!IsNumeric(inputtext))  return ShowPlayerDialog(playerid,DIALOG_CANJEAR_DINERO,DIALOG_STYLE_INPUT," | DAR INVETARIO | ","ERROR, SOLO SE PERMITEN NUMEROS",">>","X");
				PLAYER_TEMP[playerid][pt_CANJEAR_RP_FOR_IC] = strval(inputtext);
				if(ACCOUNT_INFO[playerid][ac_SD] < PLAYER_TEMP[playerid][pt_CANJEAR_RP_FOR_IC]) return SendClientMessage(playerid,-1,""R"Error: "W"No tienes suficientes "SERVER_COIN"");
				new change=(PLAYER_TEMP[playerid][pt_CANJEAR_RP_FOR_IC]*50000);
				new string[100];
				format(string,sizeof(string),"Canjear $ %s de dinero por = %d "SERVER_COIN"?",number_format_thousand(change),PLAYER_TEMP[playerid][pt_CANJEAR_RP_FOR_IC]);
				ShowPlayerDialog(playerid,DIALOG_ACEPT_CANJEAR,DIALOG_STYLE_MSGBOX,"Canejar dinero ic",string, "Aceptar", "Cancelar");
			}
		}
		case DIALOG_ACEPT_CANJEAR:
		{
			if(response)
			{
				if(ACCOUNT_INFO[playerid][ac_SD] < PLAYER_TEMP[playerid][pt_CANJEAR_RP_FOR_IC]) return SendClientMessage(playerid,-1,""R"Error: "W"No tienes suficientes "SERVER_COIN"");

				new change=(PLAYER_TEMP[playerid][pt_CANJEAR_RP_FOR_IC]*50000);
				GastarRp(playerid,PLAYER_TEMP[playerid][pt_CANJEAR_RP_FOR_IC]);
				new string[100];
				format(string,sizeof(string),"Has ganado %s de dinero por %d "SERVER_COIN"",number_format_thousand(change),PLAYER_TEMP[playerid][pt_CANJEAR_RP_FOR_IC]);
				MensajeNotificacion(playerid,string);

				GivePlayerCash(playerid,change);

				SaveUserData(playerid);


			}
			else
			{
				SendClientMessage(playerid,-1,"Cancelado");
			}
		}
		case DIALOG_CHANGE_MY_NAME:
		{
			if(response)
			{
				if(ACCOUNT_INFO[playerid][ac_SD] < 10) return SendClientMessage(playerid,-1,""R"Error: "W"No tienes suficientes "SERVER_COIN"");

				if(!IsValidRPName(inputtext)) return SendClientMessageEx(playerid, -1, "El nombre '%s' no cumple con el formato Nombre_Apellido.", inputtext);
	
				new DBResult:Result, DB_Query[256], bool:used;
				format(DB_Query, sizeof DB_Query, "SELECT `ID` FROM `CUENTA` WHERE `NAME` = '%q';", inputtext);
				Result = db_query(Database, DB_Query);
				if(db_num_rows(Result)) used = true;
				db_free_result(Result);
				if(used) return SendClientMessageEx(playerid, -1, "El nombre '%s' está en uso.", inputtext);

				format(PLAYER_TEMP[playerid][pt_NAME], 24, "%s", inputtext);
				format(ACCOUNT_INFO[playerid][ac_NAME], 24, "%s", inputtext);
				SetRolePlayNames(playerid);
				SetPlayerName(playerid, inputtext);
				
				format(DB_Query, sizeof DB_Query, "UPDATE `CUENTA` SET `NAME` = '%q' WHERE `ID` = '%d';", inputtext, ACCOUNT_INFO[playerid][ac_ID]);
				db_query(Database, DB_Query);
				new string22[256];
				format(string22, sizeof(string22),"* El jugador '%s(ID:%d) cambio su nombre a '%s'",PLAYER_TEMP[playerid][pt_NAME],playerid,inputtext);
                print(string22);
                Log("CambiosDeNombre.txt",string22);

				SendClientMessageEx(playerid, -1, "{E6F8E0}Tu nombre ha sido cambiado a '%s'", inputtext);

				GastarRp(playerid,10);

				SaveUserData(playerid);
			}
		}
		case DIALOG_MEJORAS_VEH:
		{
			if(response)
			{
				PassengerCheck(playerid);
				if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
				{
					switch(listitem)
					{
						case 0:
						{
							new string[200];
							format(string,sizeof(string),"Mejorar motor al vehiculo : \"%s\" por un costo de $ 300.000\nObtendras mas aceleracion en poco tiempo",VehicleName[GetVehicleModel(GetPlayerVehicleID(playerid)) - 400]);
							ShowPlayerDialog(playerid, DIALOG_MEJORAR_MOTOR,DIALOG_STYLE_MSGBOX, "Mejorar motor",string, "Aceptar", "Cancelar");
						}
						case 1:
						{
							ShowPlayerDialog(playerid,DIALOG_SALTICO_VEH,DIALOG_STYLE_LIST,"Salto vertical","Salto 1 tipo toreto : $ 70.000\nSalto 2 (Sostienes) : $ 100.000", "Comprar", "Cerrar");
						}
					}
				}
			}
		}
		case DIALOG_SALTICO_VEH:
		{
			if(response)
			{
				PassengerCheck(playerid);
				if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
				{
					switch(listitem)
					{
						case 0:
						{
							new vehicleid = GetPlayerVehicleID(playerid);
							if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_SALTO_V_1]==1) return SendClientMessage(playerid,-1,"Tu vehiculo ya tiene esta mejora");
							if(!PLAYER_VEHICLES[ vehicleid ][player_vehicle_VALID])
							{
								SendClientMessage(playerid, -1, "{00FF80}Solo los vehículos personales se pueden mejorar.");
								return 1;
							}

							if(70000 > GetPlayerCash(playerid)) return MensajesAyuda(playerid,"No tienes dinero suficiente para mejorar el vehiculo");
							if(!vehicleid) return SendClientMessage(playerid, -1, "No estás en un vehículo.");
							GivePlayerCash(playerid, -70000);
							GLOBAL_VEHICLES[vehicleid][gb_vehicle_SALTO_V]=1;
					    	GLOBAL_VEHICLES[vehicleid][gb_vehicle_SALTO_V_1] =1;
							MensajesAyuda(playerid,"~y~Vehiculo mejorado, manten pulsado Y unos segundos para activar/desactivar");
							MensajesAyuda(playerid,"~y~Pulsa 'N' para usar la mejora");

							SaveVarsVehicle(vehicleid);
						}
						case 1:
						{
							new vehicleid = GetPlayerVehicleID(playerid);
							if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_SALTO_V_2]==2) return SendClientMessage(playerid,-1,"Tu vehiculo ya tiene esta mejora");
							if(!PLAYER_VEHICLES[ vehicleid ][player_vehicle_VALID])
							{
								SendClientMessage(playerid, -1, "{00FF80}Solo los vehículos personales se pueden mejorar.");
								return 1;
							}

							if(100000 > GetPlayerCash(playerid)) return MensajesAyuda(playerid,"No tienes dinero suficiente para mejorar el vehiculo");
							if(!vehicleid) return SendClientMessage(playerid, -1, "No estás en un vehículo.");
							GivePlayerCash(playerid, -100000);
							GLOBAL_VEHICLES[vehicleid][gb_vehicle_SALTO_V]=2;
					    	GLOBAL_VEHICLES[vehicleid][gb_vehicle_SALTO_V_2] =1;
							MensajesAyuda(playerid,"~y~Vehiculo mejorado, manten pulsado Y unos segundos para activar/desactivar");
							MensajesAyuda(playerid,"~y~Pulsa 'W y S' por unos segundos para usar");

							SaveVarsVehicle(vehicleid);
						}
					}
				}
			}
		}
		case DIALOG_PUTPASS:
		{
			if(response)
			{
				new stringLength = strlen(inputtext);
				new chars[25];
				new karen[2] = "+";
				for(new i=0; i <= stringLength; i++)
				{
					format(chars,sizeof(chars),"%s%s",chars,karen);
				}
	            PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][textdraw_login][2], chars);
	            format(PLAYER_TEMP[playerid][Contrasena],256,"%s",inputtext);
	            SelectTextDraw(playerid, 0xe8d08fFF);
			}
			else
			{
				SelectTextDraw(playerid, 0xe8d08fFF);
			}
		}
		case DIALOG_COMPRAR_MASA:
		{
			if(response)
			{
				if(GetCountInventary(playerid) >= Max_Slots_For_Invetary) return MensajesAyuda(playerid,"No se puede comprar mas items, el inventario esta lleno");
				if(500 > CHARACTER_INFO[playerid][ch_CASH]) return MensajesAyuda(playerid,"No tienes dinero para comprar ese producto");
				new GQuery[120];
				GivePlayerCash(playerid,-500);
			    format( GQuery, sizeof( GQuery ), "INSERT INTO INVENTARIO (PLAYER,TIPO,ESTADO,EQUIPADO) VALUES ('%d','12','5','0')",ACCOUNT_INFO[playerid][ac_ID]);
		   		db_query(Database, GQuery );
		   		MensajesAyuda(playerid,"Compraste una masa para picar, fue agrego al inventario");
			}
		}
		case DIALOG_COMPRAR_CARNADAS:
		{
			if(response)
			{
				if(350 > CHARACTER_INFO[playerid][ch_CASH]) return MensajesAyuda(playerid,"No tienes dinero para comprar ese producto");
				new GQuery[60];
				GivePlayerCash(playerid,-350);
				PESCADOS_PLAYER[playerid][Carnadas]=PESCADOS_PLAYER[playerid][Carnadas]+5;
			    format( GQuery, sizeof( GQuery ),"Compraste carnadas tienes:~r~~h~ %d",PESCADOS_PLAYER[playerid][Carnadas]);
		   		MensajesAyuda(playerid,GQuery);
			}
		}
		case DIALOG_VENDER_PESCADOS:
		{
			if(response)
			{
				new cantidad,string[60];
				switch(listitem)
				{
					case 0:
					{
						if(PESCADOS_PLAYER[playerid][Bacalao] ==0) return MensajesAyuda(playerid,"No tienes bacalao para venderle al proveedor");
						cantidad = PESCADOS_PLAYER[playerid][Bacalao] * 300;
						format(string,sizeof(string),"Ganaste ~g~$%d~w~ vendiendo bacalao");
						PESCADOS_PLAYER[playerid][Bacalao]=0;
					}
					case 1:
					{
						if(PESCADOS_PLAYER[playerid][Sardina] ==0) return MensajesAyuda(playerid,"No tienes Sardina para venderle al proveedor");
						cantidad = PESCADOS_PLAYER[playerid][Sardina] * 150;
						format(string,sizeof(string),"Ganaste ~g~$%d~w~ vendiendo Sardina");
						PESCADOS_PLAYER[playerid][Sardina]=0;
					}
					case 2:
					{
						if(PESCADOS_PLAYER[playerid][Anchoa] ==0) return MensajesAyuda(playerid,"No tienes Anchoa para venderle al proveedor");
						cantidad = PESCADOS_PLAYER[playerid][Anchoa] * 500;
						format(string,sizeof(string),"Ganaste ~g~$%d~w~ vendiendo Anchoa");
						PESCADOS_PLAYER[playerid][Anchoa]=0;
					}
					case 3:
					{
						if(PESCADOS_PLAYER[playerid][Atun] ==0) return MensajesAyuda(playerid,"No tienes Atun para venderle al proveedor");
						cantidad = PESCADOS_PLAYER[playerid][Atun] * 400;
						format(string,sizeof(string),"Ganaste ~g~$%d~w~ vendiendo Atun");
						PESCADOS_PLAYER[playerid][Atun]=0;
					}
					case 4:
					{
						if(PESCADOS_PLAYER[playerid][Salmon] ==0) return MensajesAyuda(playerid,"No tienes Salmon para venderle al proveedor");
						cantidad = PESCADOS_PLAYER[playerid][Salmon] * 800;
						format(string,sizeof(string),"Ganaste ~g~$%d~w~ vendiendo Salmon");
						PESCADOS_PLAYER[playerid][Salmon]=0;
					}
				}
				GivePlayerCash(playerid, cantidad);
				MensajesAyuda(playerid,string);
			}
		}
		case DIALOG_COMPRAR_CANA_PESCAR:
		{
			if(response)
			{
				if(GetCountInventary(playerid) >= Max_Slots_For_Invetary) return MensajesAyuda(playerid,"No se puede comprar mas items, el inventario esta lleno");
				if(100 > CHARACTER_INFO[playerid][ch_CASH]) return MensajesAyuda(playerid,"No tienes dinero para comprar ese producto");
				new GQuery[120];
				GivePlayerCash(playerid,-100);
			    format( GQuery, sizeof( GQuery ), "INSERT INTO INVENTARIO (PLAYER,TIPO,ESTADO,EQUIPADO) VALUES ('%d','11','5','0')",ACCOUNT_INFO[playerid][ac_ID]);
		   		db_query(Database, GQuery );
		   		MensajesAyuda(playerid,"Compraste una cana para pescar, fue agrego al inventario");
			}
		}
		//
		case DIALOG_DAR_INVENTARIO:
		{
			if(response)
			{
				new i = 0, manageinvtary[50];
		     	while(inputtext[i+4] != ' ')
		       	++i;
				strmid(manageinvtary, inputtext, 3, 4+i, sizeof(manageinvtary));
				IVENTARIOID[playerid] =  strval(manageinvtary);

				ShowPlayerDialog(playerid,DIALOG_SELPLAYER_INVENTARIO,DIALOG_STYLE_INPUT,"Dar inventario","Ingresa la id del jugador\ndebe estar serca de ti", "Seguir", "Cancelar");
				//
			}
		}
		case DIALOG_SELPLAYER_INVENTARIO:
		{
			if(response)
			{
				if(Equiped_Inventary[playerid][VALID_EQUIPED] == true) return MensajesAyuda(playerid,"Guarda lo que tienes equipado para dar algo de tu inventario");

				if(!strlen(inputtext)) return ShowPlayerDialog(playerid,DIALOG_SELPLAYER_INVENTARIO,DIALOG_STYLE_INPUT," | DAR INVETARIO | ","ERROR, SOLO SE PERMITEN NUMEROS",">>","X");
				if(!IsNumeric(inputtext))  return ShowPlayerDialog(playerid,DIALOG_SELPLAYER_INVENTARIO,DIALOG_STYLE_INPUT," | DAR INVETARIO | ","ERROR, SOLO SE PERMITEN NUMEROS",">>","X");
				new id = strval(inputtext);
				//if(id == playerid) return SendClientMessage(playerid, -1, "* El jugador no esta conectado.");
				if(id == INVALID_PLAYER_ID) return SendClientMessage(playerid, -1, "* El jugador no esta conectado.");
		        new Float:pos[3]; GetPlayerPos(id, pos[0], pos[1], pos[2]);
				if(!IsPlayerInRangeOfPoint(playerid, 3.0, pos[0], pos[1], pos[2])) return SendClientMessage(playerid, 0xA9F5A9AA, "Este jugador no está cerca tuya.");
				new string[100];

				SaveIDFriend[id]=playerid;
				SAVEIDDARINVETARIO[id] = IVENTARIOID[playerid];
				new DBResult:Result,Query[256],tipe_a;
				format(Query, sizeof(Query), "SELECT TIPO,ESTADO FROM `INVENTARIO` WHERE `ID` = '%d' AND PLAYER ='%d'",IVENTARIOID[playerid],ACCOUNT_INFO[playerid][ac_ID]);
				Result = db_query(Database, Query);
				if(db_num_rows(Result))
				{
					db_get_field_assoc(Result, "TIPO",Query, 30); tipe_a = strval(Query);
				}
				else
				{
					return SendClientMessage(playerid,-1,"Error interno");
				}
				db_free_result(Result);

				format(string,sizeof(string),"El jugador (%s) te quiere dar '%s', ¿aceptas?",PLAYER_TEMP[playerid][pt_NAME],INVENTARIOPLAYER[ tipe_a ][NOMBRE]);
				ShowPlayerDialog(id,DIALOG_DAR_INVENTARIO_ACCEPT, DIALOG_STYLE_MSGBOX,"Inventario",string,"Aceptar","Cancelar");
			}
		}
		case DIALOG_DAR_INVENTARIO_ACCEPT:
		{
			if(response)
			{
				new player=SaveIDFriend[playerid];

				if(GetCountInventary(playerid) >= Max_Slots_For_Invetary)
				{

					MensajesAyuda(playerid,"No puedes agregar mas items al inventario");
					MensajesAyuda(player,"El player no tiene mas espacio en su inventario");
					return 1;
				}
				

				if(player == INVALID_PLAYER_ID) return SendClientMessage(playerid, -1, "* El jugador no esta conectado.");
		        new Float:pos[3]; GetPlayerPos(player, pos[0], pos[1], pos[2]);
				if(!IsPlayerInRangeOfPoint(playerid, 3.0, pos[0], pos[1], pos[2])) return SendClientMessage(playerid, 0xA9F5A9AA, "Este jugador no está cerca tuya.");

				new DBResult:Result,Query[256],tipe_a;
				format(Query, sizeof(Query), "SELECT TIPO FROM `INVENTARIO` WHERE `ID` = '%d' AND PLAYER ='%d'",IVENTARIOID[ player ],ACCOUNT_INFO[ player ][ac_ID]);
				Result = db_query(Database, Query);
				if(db_num_rows(Result))
				{
					db_get_field_assoc(Result, "TIPO",Query, 30); tipe_a = strval(Query);
					format(Query, sizeof(Query), "UPDATE `INVENTARIO` SET `PLAYER` = '%d' WHERE `ID` = '%d';",ACCOUNT_INFO[ playerid ][ac_ID], IVENTARIOID[ player ]);
	      			db_query(Database, Query);
				}
				else
				{
					return SendClientMessage(playerid,-1,"Error interno");
				}
				db_free_result(Result);

				new string[100];
				format(string,sizeof(string),"Aceptaste: ~y~%s~w~ de %s",INVENTARIOPLAYER[ tipe_a ][NOMBRE],PLAYER_TEMP[ player ][pt_NAME]);
				MensajesAyuda(playerid,string);

				format(string,sizeof(string),"%s Acepto tu: ~y~%s",PLAYER_TEMP[playerid][pt_NAME],INVENTARIOPLAYER[ tipe_a ][NOMBRE]);
				MensajesAyuda(player,string);
			}
			else
			{
				new player=SaveIDFriend[playerid];

				new DBResult:Result,Query[256],tipe_a;
				format(Query, sizeof(Query), "SELECT TIPO FROM `INVENTARIO` WHERE `ID` = '%d' AND PLAYER ='%d'",IVENTARIOID[ player ],ACCOUNT_INFO[ player ][ac_ID]);
				Result = db_query(Database, Query);
				if(db_num_rows(Result))
				{
					db_get_field_assoc(Result, "TIPO",Query, 30); tipe_a = strval(Query);
					format(Query, sizeof(Query), "UPDATE `INVENTARIO` SET `PLAYER` = '%d' WHERE `ID` = '%d';",ACCOUNT_INFO[ playerid ][ac_ID]);
	      			db_query(Database, Query);
				}
				else
				{
					return SendClientMessage(playerid,-1,"Error interno");
				}
				db_free_result(Result);

				new string[100];
				format(string,sizeof(string),"~r~~h~Rechazaste: %s de %s",INVENTARIOPLAYER[ tipe_a ][NOMBRE],PLAYER_TEMP[ player ][pt_NAME]);
				MensajesAyuda(playerid,string);

				format(string,sizeof(string),"~r~~h~%s Rechazo tu: %s",PLAYER_TEMP[playerid][pt_NAME],INVENTARIOPLAYER[ tipe_a ][NOMBRE]);
				MensajesAyuda(player,string);
			}
		}
		/**/
		case DIALOG_AMIGOS:
		{
			if(response)
			{
				switch(listitem)
				{
				    case 0:
				    {
				        if(GetCountFriends(playerid) >= 5 && ACCOUNT_INFO[playerid][ac_SU] == 0) return MensajesAyuda(playerid,"No puedes tener mas amigos, vips pueden tener hasta 20");
				        if(GetCountFriends(playerid) >= 20) return MensajesAyuda(playerid,"No puedes tener mas amigos, maximo alcanzado");
					    ShowPlayerDialog(playerid,DIALOG_AMIGOS_AGREGAR,DIALOG_STYLE_INPUT," | PANEL FRIEND | ","INGRESA LA ID DEL JUGADOR AL QUE QUIERES AGREGAR COMO AMIGO",">>","X");
				    }
				    case 1:
				    {
				    	if(GetCountFriends(playerid) == 0) return MensajesAyuda(playerid,"No tienes ningun amigo");
				        ShowPlayerFriends(playerid);
				    }
				}
			}
			return 1;
		}
		case DIALOG_AMIGOS_AGREGAR:
		{
			if(response)
			{
			    if(!strlen(inputtext)) return ShowPlayerDialog(playerid,DIALOG_AMIGOS_AGREGAR,DIALOG_STYLE_INPUT," | PANEL FRIEND | ","ERROR, SOLO SE PERMITEN NUMEROS",">>","X");
				if(!IsNumeric(inputtext))  return ShowPlayerDialog(playerid,DIALOG_AMIGOS_AGREGAR,DIALOG_STYLE_INPUT," | PANEL FRIEND | ","ERROR, SOLO SE PERMITEN NUMEROS",">>","X");
				new id = strval(inputtext);

		        if(id == INVALID_PLAYER_ID) return SendClientMessage(playerid, -1, "* El jugador no esta conectado.");

		        new Float:pos[3]; GetPlayerPos(id, pos[0], pos[1], pos[2]);
				if(!IsPlayerInRangeOfPoint(playerid, 3.0, pos[0], pos[1], pos[2])) return SendClientMessage(playerid, 0xA9F5A9AA, "Este jugador no está cerca tuya.");

				if(IsAlreadyFriend(playerid,ACCOUNT_INFO[id][ac_ID]) == 1) return SendClientMessage(playerid,-1,"* Este jugador ya es tu amigo");
				if(!IsPlayerConnected(id)) return SendClientMessage(playerid, -1, "* El jugador no esta conectado");
				SaveIDFriend[id]=playerid;
				MensajesAyuda(playerid,"Solicitud de amistad envida.. espera a que el jugador la confirme");
		  		new string2123[200];
			    format(string2123, sizeof(string2123),"{FFFFFF}* (%s) te a enviado una solicitud de amistad\n",PLAYER_TEMP[playerid][pt_NAME]);
			    /*strcat(string2123,"{FFFFFF}* Podras enviar/recibir (Score-dinero-cookies)\n");
			    strcat(string2123,"{FFFFFF}* Tambien podras usar los objetos que tenga en su personaje desde el panel de /Amigos\n");*/
			    ShowPlayerDialog(id,DIALOG_AMIGOS_CONFIRMAR,DIALOG_STYLE_MSGBOX,"| SOLICITUD DE AMISTAD |",string2123,"ACEPTAR","RECHAZAR");
			}
		}
		case DIALOG_AMIGOS_CONFIRMAR:
		{
			if(response)
			{
			    new id=SaveIDFriend[playerid];
			    if(id == INVALID_PLAYER_ID) return SendClientMessage(playerid, -1, "* Ocurrio un error, el jugador se desconecto y no se completo la consulta.");
				new DB_Query[100];
		        format( DB_Query, sizeof( DB_Query ), "INSERT INTO AMIGOS (ID1,ID2) VALUES ('%d','%d')",ACCOUNT_INFO[playerid][ac_ID],ACCOUNT_INFO[id][ac_ID]);
		        db_query( Database, DB_Query );
		        format( DB_Query, sizeof( DB_Query ), "INSERT INTO AMIGOS (ID1,ID2) VALUES ('%d','%d')",ACCOUNT_INFO[id][ac_ID],ACCOUNT_INFO[playerid][ac_ID]);
		        db_query( Database, DB_Query );

		        new string[100];
			    format(string,sizeof(string),"(%s) ha ~y~aceptado ~w~tu solicitud de amistad",PLAYER_TEMP[playerid][pt_NAME]);
			    MensajesAyuda(id,string);
			    format(string,sizeof(string),"Has ~y~aceptado~w~ la solicitud de amistad a (%s).",PLAYER_TEMP[id][pt_NAME]);
			    MensajesAyuda(playerid,string);
			}
			if(!response)
			{
			    new id=SaveIDFriend[playerid];
			    new string[100];
			    format(string,sizeof(string),"(%s) ha rechazado tu solicitud de amistad",PLAYER_TEMP[playerid][pt_NAME]);
			    MensajesAyuda(id,string);
			    format(string,sizeof(string),"Has rechazado la solicitud de amistad a (%s).",PLAYER_TEMP[id][pt_NAME]);
			    MensajesAyuda(playerid,string);
			}
		}
		case DIALOG_AMIGOS_MANAGE:
		{
			if(response)
			{
				new i = 0, labelid[50];
				while(inputtext[i+4] != ' ')
				++i;
				new caption[256];
				strmid(labelid, inputtext, 3, 4+i, sizeof(labelid));
				ManageVIP[playerid] =  strval(labelid);

				format(caption, sizeof(caption), "Amigo: (%s)",GetNamePlayerFromDB(ManageVIP[playerid]));
		 		new string[256];
		 		strcat(string, "\n{ffffff}* Enviar mensaje");
		       	strcat(string, "\n{ffffff}* Localizar");
		       	strcat(string, "\n{ffffff}* Dejar mensaje (Si esta desconectado)");
		       	strcat(string, "\n{FF0000}* BORRAR AMIGO");
		        ShowPlayerDialog(playerid, DIALOG_AMIGOS_MANAGE_OPCION, DIALOG_STYLE_LIST, caption, string, "Seguir (>>)", "Cerrar (X)");
			}
		}
		case DIALOG_AMIGOS_MANAGE_OPCION:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						new string[100];
						format(string,sizeof(string),"Ingresa el mensaje que le mandaras a tu amigo: %s",GetNamePlayerFromDB(ManageVIP[playerid]));
						ShowPlayerDialog(playerid,DIALOG_AMIGOS_ENVIAR_M,DIALOG_STYLE_INPUT,"Enviar mensaje",string, "Aceptar", "Cerrar");
					}
					case 1:
					{
						new id=GetIDPlayerFromDB(ManageVIP[playerid]);
						if(id == -1) return SendClientMessage(playerid, -1, "* Ocurrio un error, el jugador se desconecto y no se completo la consulta.");
						SetPlayerMarkerForPlayer(playerid,id,0x00C3BDFF);
						new string[100];
						format(string,sizeof(string),"Se marco con un punto azul en el radar a (%s).",PLAYER_TEMP[id][pt_NAME]);
			    		MensajesAyuda(playerid,string);
					}
					case 2:
					{
						new on_=GetConectedPlayer(ManageVIP[playerid]);
						if(on_==1) return MensajesAyuda(playerid,"Tu amigo(a) esta en linea usa la funcion (Enviar mensaje)");
						ShowPlayerDialog(playerid, DIALOG_MENSAJE_ENVIAR, DIALOG_STYLE_INPUT,"| ENVIAR MENSAJE |","Ingresa el mensaje que quieres enviarle.", "Enviar", "X");
					}
					case 3:
					{
						new string[100];
						format(string,sizeof(string),"Estas seguro que deseas borrar a %s de tu lista de amigos?",GetNamePlayerFromDB(ManageVIP[playerid]));
						ShowPlayerDialog(playerid, DIALOG_AMIGOS_DELETE, DIALOG_STYLE_MSGBOX, "Advertencia",string, "Seguir (>>)", "Cerrar (X)");
					}
				}
			}
		}
		case DIALOG_MENSAJE_ENVIAR:
		{
			if(response)
			{
				for(new i = 0, j = strlen(inputtext); i < j; i++)
                switch(inputtext[i])
                {
                        case 'a'..'z': continue;
                        case 'A'..'Z': continue;
                        case '.': continue;
                        case ':': continue;
                        case ' ': continue;
                        case '/': continue;
                        case '?': continue;
                        case ',': continue;
                        case '0': continue;
                        case '1': continue;
                        case '2': continue;
                        case '3': continue;
                        case '4': continue;
                        case '5': continue;
                        case '6': continue;
                        case '7': continue;
                        case '8': continue;
                        case '9': continue;
                        default: return ShowPlayerDialog(playerid,DIALOG_MENSAJE_ENVIAR, DIALOG_STYLE_INPUT, "| MENSAJE |", "Solo se permiten letras y numeros", ">>", "X");
                }
                if(strlen(inputtext) < 150)
                {

                    new GQuery[300];
			        format( GQuery, sizeof( GQuery ), "INSERT INTO MENSAJES (AID,Mensaje,Enviador,Fecha) VALUES ('%d','%s','%d','%s')",ManageVIP[playerid],inputtext,ACCOUNT_INFO[playerid][ac_ID],GetDia());
			        db_query( Database, GQuery );
			        //=
			        format( GQuery, sizeof( GQuery ), "INSERT INTO MENSAJESENVIADOS (AID,Texto,YO,Fecha) VALUES ('%d','%s','%d','%s')",ManageVIP[playerid],inputtext,ACCOUNT_INFO[playerid][ac_ID],GetDia());
			        db_query( Database, GQuery );
			        SendClientMessageEx(playerid,0xCCCCFF,"* Mensaje enviado a %s texto: %s",GetNamePlayerFromDB(ManageVIP[playerid]),inputtext);
			        SendClientMessage(playerid,-1,"Usa /mensajesenviados para ver los mensajes y estado");

                }
                else return ShowPlayerDialog(playerid,DIALOG_MENSAJE_ENVIAR, DIALOG_STYLE_INPUT, "| MENSAJE |", "El mensaje no pueda superar los 150 caracteres", "Continuar", "X");
			}
		}
		case DIALOG_MENSAJEENVIADO:
		{
			if(listitem == PAGINA[playerid])
			{
				HidePlayerDialog(playerid);
				return 1;
			}
			if(!response)
			{
				PAGE[playerid]+=20;
		 		ManagePlayerMensajesE(playerid);
			}
			if(response)
			{
				new i = 0, labelid[53], caption[34];
		  		while(inputtext[i+4] != ' ')
		    	++i;

				strmid(labelid, inputtext, 3, 4+i, sizeof(labelid));
		  		ViendoMensaje[playerid] =  strval(labelid);

		    	format(caption, sizeof(caption), "Mensaje enviado: (ID: %d)", ViendoMensaje[playerid]);
		     	new string[256];
		      	strcat(string, "\n{ffffff}* Ver mensaje enviado");
		       	strcat(string, "\n{ffffff}* Borrar mensaje enviado");
		       	strcat(string, "\n{FF5733}* BORRAR LOS MENSAJES ENVIADOS");
		        ShowPlayerDialog(playerid, DIALOG_MENSAJEENVIADO_MANAGE, DIALOG_STYLE_LIST, caption, string, "Seguir (>>)", "Cerrar (X)");
			}
		}
		case DIALOG_MENSAJEENVIADO_MANAGE:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						new MESS[150],string3[100],string[100],string4[100],Query[256],Fecha_[256],DBResult:Result2,Enviador,Enviador_[22];
				  		format(Query, sizeof(Query), "SELECT `Fecha`,`AID`,`Texto` FROM `MENSAJESENVIADOS` WHERE `ID` = '%d';",ViendoMensaje[playerid]);
				 		Result2 = db_query(Database, Query);
				 		if(db_num_rows(Result2))
					 	{
						 	db_get_field_assoc(Result2, "Texto",MESS, 150);
						 	db_get_field_assoc(Result2, "Fecha",Fecha_, 256);
				 	        db_get_field_assoc(Result2, "AID",Query, 20);
				    		Enviador = strval(Query);


				 			format(Enviador_,sizeof(Enviador_),"%s",GetNamePlayerFromDB(Enviador));
				 	    }
				 	    else
				 	    {
				 	        return SendClientMessage(playerid,0xFED600FF,"Error desconocido");
				 	    }
				 	    db_free_result(Result2);
				 	    //=

				 	    //==
				 	    format(string3, sizeof(string3), "%s",MESS);
				 	    format(string4, sizeof(string4), "Mensaje enviado a: (%s)",Enviador_);
				    	format(string2, sizeof(string2), "Fecha de envio: %s\nMensaje:\n\n{ffffff}%s",Fecha_, MESS);
				    	format(string, sizeof(string), "Mensaje enviado a: (%s) Fecha de envio: %s", Enviador_,Fecha_);
				    	SendClientMessage(playerid,0xFED600FF,string);
				    	SendClientMessage(playerid,0xFED600FF,string3);
				    	SendClientMessage(playerid,0xFED600FF,"_____________________________________________________________________________");
				        ShowPlayerDialog(playerid, DIALOG_NULL, DIALOG_STYLE_MSGBOX, string4, string2, "Cerrar", "");
					}
					case 1:
					{
						new DB_Query[50];
						format(DB_Query, sizeof DB_Query, "DELETE FROM MENSAJESENVIADOS WHERE ID = '%d'",ViendoMensaje[playerid]);
						db_query(Database, DB_Query);
					    SendClientMessage(playerid,0xFED600FF,"** Mensaje enviado eliminado");
					}
					case 2:
					{
						ShowPlayerDialog(playerid,DIALOG_MENSAJE_DELETE_ALL, DIALOG_STYLE_MSGBOX, "Advertencia","Borrar todos los mensajes enviados?\nSe borrara el registro pero no los mensajes que hayas enviado\nEsto quiere decir que borraran para ti pero no para las personas que les hayas enviado", "Aceptar", "Cancelar");
					}
				}
			}
		}
		case DIALOG_MENSAJE_DELETE_ALL:
		{
			if(response)
			{
				new DB_Query[50];
				format(DB_Query, sizeof DB_Query, "DELETE FROM MENSAJESENVIADOS WHERE YO = '%d'",ACCOUNT_INFO[playerid][ac_ID]);
				db_query(Database, DB_Query);
			    SendClientMessage(playerid,0xFED600FF,"** Todos los mensajes enviados eliminados.");
			}
		}
		case DIALOG_AMIGOS_DELETE:
		{
			if(response)
			{
				new DB_Query[100];
				format(DB_Query, sizeof DB_Query, "DELETE FROM AMIGOS WHERE ID1 = '%d' AND ID2 ='%d'",ACCOUNT_INFO[playerid][ac_ID],ManageVIP[playerid]);
				db_query(Database, DB_Query);
				format(DB_Query, sizeof DB_Query, "DELETE FROM AMIGOS WHERE ID1 = '%d' AND ID2 ='%d'",ManageVIP[playerid],ACCOUNT_INFO[playerid][ac_ID]);
				db_query(Database, DB_Query);
				new string[100];
				format(string,sizeof(string),"Eliminaste a %s de tu lista de amigos",GetNamePlayerFromDB(ManageVIP[playerid]));
				MensajesAyuda(playerid,string);
			}
		}
		case DIALOG_AMIGOS_ENVIAR_M:
		{
			if(response)
			{
				new id=GetIDPlayerFromDB(ManageVIP[playerid]);
				if(id == -1) return SendClientMessage(playerid, -1, "* Ocurrio un error, el jugador se desconecto y no se completo la consulta.");

				SendClientMessageEx(id,0x00C3BDFF,"~ Mensaje de tu amig@: %s",PLAYER_TEMP[playerid][pt_NAME]);
				SendClientMessageEx(id,0x00C3BDFF,"~ %s",inputtext);

				new string[100];
			    format(string,sizeof(string),"Tu amig@ (%s) Te ha mandado un mensaje revisa el chat",PLAYER_TEMP[playerid][pt_NAME]);
			    MensajesAyuda(id,string);
			    format(string,sizeof(string),"Enviaste un mensaje a tu amigo: (%s).",PLAYER_TEMP[id][pt_NAME]);
			    MensajesAyuda(playerid,string);
			}
		}
		case DIALOG_MENSAJEENVIADO_ME:
		{
			if(listitem == PAGINA[playerid])
			{
				HidePlayerDialog(playerid);
				return 1;
			}
			if(!response)
			{
				PAGE[playerid]+=20;
		 		ManagePlayerMensajes(playerid);
			}
			if(response)
			{
				new i = 0, labelid[53], caption[34];
		  		while(inputtext[i+4] != ' ')
		    	++i;

				strmid(labelid, inputtext, 3, 4+i, sizeof(labelid));
		  		ViendoMensaje[playerid] =  strval(labelid);

		    	format(caption, sizeof(caption), "Mensaje recibido: (ID: %d)", ViendoMensaje[playerid]);
		     	new string[256];
		      	strcat(string, "\n{ffffff}* Ver mensaje recibido");
		       	strcat(string, "\n{ffffff}* Borrar mensaje recibido");
		       	strcat(string, "\n{FF5733}* BORRAR LOS MENSAJES RECIBIDOS");
		        ShowPlayerDialog(playerid, DIALOG_MENSAJEENVIADO_MANAGE_RE, DIALOG_STYLE_LIST, caption, string, "Seguir (>>)", "Cerrar (X)");
			}
		}
		case DIALOG_MENSAJEENVIADO_MANAGE_RE:
		{
			if(response)
			{
			    switch(listitem)
			    {
			        case 0:
			        {
						new MESS[150],string3[100],string[100],string4[100],Query[256],Fecha_[256],DBResult:Result2,Enviador,Enviador_[22];
				  		format(Query, sizeof(Query), "SELECT `Fecha`,`Enviador`,`Mensaje` FROM `MENSAJES` WHERE `ID` = '%d';",ViendoMensaje[playerid]);
				 		Result2 = db_query(Database, Query);
				 		if(db_num_rows(Result2))
					 	{
						 	db_get_field_assoc(Result2, "Mensaje",MESS, 150);
						 	db_get_field_assoc(Result2, "Fecha",Fecha_, 256);
				 	        db_get_field_assoc(Result2, "Enviador",Query, 20);
				    		Enviador = strval(Query);

				    		format(Enviador_,sizeof(Enviador_),"%s",GetNamePlayerFromDB(Enviador));
				 	    }
				 	    else
				 	    {
				 	        return SendClientMessage(playerid,0xFED600FF,"Error desconocido");
				 	    }
				 	    db_free_result(Result2);
				 	    //=

				 	    //==
				 	    format(string3, sizeof(string3), "%s",MESS);
				 	    format(string4, sizeof(string4), "Mensaje de: (%s)",Enviador_);
				    	format(string2, sizeof(string2), "Fecha de envio: %s\nMensaje:\n\n{ffffff}%s",Fecha_, MESS);
				    	format(string, sizeof(string), "Mensaje de: (%s) Fecha de envio: %s", Enviador_,Fecha_);
				    	SendClientMessage(playerid,0xFED600FF,string);
				    	SendClientMessage(playerid,0xFED600FF,string3);
				    	SendClientMessage(playerid,0xFED600FF,"_____________________________________________________________________________");
				        ShowPlayerDialog(playerid,DIALOG_NULL, DIALOG_STYLE_MSGBOX, string4, string2, "Cerrar", "");

			      		format(Query, sizeof(Query), "UPDATE `MENSAJES` SET `Leido` = '1' WHERE `ID` = '%d';",ViendoMensaje[playerid]);
	      				db_query(Database, Query);

						format(Query, sizeof(Query), "UPDATE `MENSAJESENVIADOS` SET `Leido` = '1' WHERE `ID` = '%d';",ViendoMensaje[playerid]);
			      		db_query(Database, Query);

					}
					case 1:
					{
						new DB_Query[60];
						format(DB_Query, sizeof DB_Query, "DELETE FROM MENSAJES WHERE ID = '%d'",ViendoMensaje[playerid]);
						db_query(Database, DB_Query);
					    SendClientMessage(playerid,0xFED600FF,"** Mensaje eliminado");
					}
					case 2:
					{
						ShowPlayerDialog(playerid,DIALOG_MENSAJE_DELETE_RE, DIALOG_STYLE_MSGBOX, "Advertencia","Borrar todos los mensajes recibos?\nSe borrara el registro pero no los mensajes que hayas recibido\nEsto quiere decir que borraran para ti pero no para las personas que te hayan enviado", "Aceptar", "Cancelar");
					}
				}
			}
		}
		case DIALOG_MENSAJE_DELETE_RE:
		{
			if(response)
			{
				new DB_Query[50];
				format(DB_Query, sizeof DB_Query, "DELETE FROM MENSAJES WHERE AID = '%d'",ACCOUNT_INFO[playerid][ac_ID]);
				db_query(Database, DB_Query);
			    SendClientMessage(playerid,0xFED600FF,"** Todos los mensajes recibidos han eliminados.");
			}
		}

		/**/
		case DIALOG_TALLER_REPAIR_VEH:
		{
			if(response)
			{
				if(5000 > GetPlayerCash(playerid)) return MensajesAyuda(playerid,"No tienes dinero suficiente para reparar el vehiculo"), SelectTextDraw(playerid,0xFFFF0080);
				new vehicleid = GetPlayerVehicleID(playerid);
				if(!vehicleid) return SendClientMessage(playerid, -1, "No estás en un vehículo.");
				RepairVehicleEx(vehicleid, playerid);
				MensajesAyuda(playerid,"~y~Vehiculo reparado");
				SelectTextDraw(playerid,0xFFFF0080);
				GivePlayerCash(playerid, -5000);
			}
			else
			{
				SelectTextDraw(playerid,0xFFFF0080);
			}
		}
		case DIALOG_TALLER_COLOR_1:
		{
			if(response)
			{
				if(2000 > GetPlayerCash(playerid)) return MensajesAyuda(playerid,"No tienes dinero suficiente para reparar el vehiculo"), SelectTextDraw(playerid,0xFFFF0080);
				new vehicleid = GetPlayerVehicleID(playerid);
				if(!vehicleid) return SendClientMessage(playerid, -1, "No estás en un vehículo.");
				GivePlayerCash(playerid, -2000);
				
				GLOBAL_VEHICLES[ vehicleid ][gb_vehicle_COLOR_1] = listitem;
				ChangeVehicleColor(vehicleid, GLOBAL_VEHICLES[ vehicleid ][gb_vehicle_COLOR_1], GLOBAL_VEHICLES[ vehicleid ][gb_vehicle_COLOR_2]);
				MensajesAyuda(playerid,"~y~Color primario del vehiculo cambiado");
				SelectTextDraw(playerid,0xFFFF0080);
			}
			else
			{
				SelectTextDraw(playerid,0xFFFF0080);
			}
		}
		case DIALOG_TALLER_COLOR_2:
		{
			if(response)
			{
				if(2000 > GetPlayerCash(playerid)) return MensajesAyuda(playerid,"No tienes dinero suficiente para reparar el vehiculo"), SelectTextDraw(playerid,0xFFFF0080);
				new vehicleid = GetPlayerVehicleID(playerid);
				if(!vehicleid) return SendClientMessage(playerid, -1, "No estás en un vehículo.");
				GivePlayerCash(playerid, -2000);
				
				GLOBAL_VEHICLES[ vehicleid ][gb_vehicle_COLOR_2] = listitem;
				ChangeVehicleColor(vehicleid, GLOBAL_VEHICLES[ vehicleid ][gb_vehicle_COLOR_1], GLOBAL_VEHICLES[ vehicleid ][gb_vehicle_COLOR_2]);
				MensajesAyuda(playerid,"~y~Color segundario del vehiculo cambiado");
				SelectTextDraw(playerid,0xFFFF0080);
			}
			else
			{
				SelectTextDraw(playerid,0xFFFF0080);
			}
		}
		case DIALOG_MEJORAR_MOTOR:
		{
			if(response)
			{
				new vehicleid = GetPlayerVehicleID(playerid);
				if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_ACELERACION]==1) return SendClientMessage(playerid,-1,"Tu vehiculo ya tiene esta mejora");
				if(!PLAYER_VEHICLES[ vehicleid ][player_vehicle_VALID])
				{
					SendClientMessage(playerid, -1, "{00FF80}Solo los vehículos personales se pueden mejorar.");
					return 1;
				}

				if(300000 > GetPlayerCash(playerid)) return MensajesAyuda(playerid,"No tienes dinero suficiente para mejorar el motor");
				if(!vehicleid) return SendClientMessage(playerid, -1, "No estás en un vehículo.");
				GivePlayerCash(playerid, -300000);
				GLOBAL_VEHICLES[vehicleid][gb_vehicle_ACELERACION]=1;
		    	GLOBAL_VEHICLES[vehicleid][gb_vehicle_ACELERACION_ACTIVE] =1;
				MensajesAyuda(playerid,"~y~Motor del vehiculo mejorado, manten pulsado Y unos segundos para activar/desactivar");

				SavePlayerVehicles(playerid, false);
			}
		}
		case DIALOG_MENU_VEHICLE:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						new list[200],dialog[500];
						format(dialog, sizeof dialog, "# - \tNombre:\n");
						new karen;
						for(new i=0; i < sizeof(Radios); ++i)
						{
							karen++;
							format(list, sizeof(list), "%d\t%s\n",i, Radios[i][Nombre]);
        					strcat(dialog, list);
						}

						format(list, sizeof(list), "{B42020}Apagar");
    					strcat(dialog, list);

						PLAYER_TEMP[playerid][pt_LAST_RADIO] = karen;
						ShowPlayerDialog(playerid,DIALOG_CHANGE_RADIO_N, DIALOG_STYLE_TABLIST_HEADERS,"{B42020}Radios",dialog,"Seleccionar","Cancelar");
					}
				}
			}
		}
		case DIALOG_MENU_VEHICLE_RENT:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						new list[200],dialog[500];
						format(dialog, sizeof dialog, "# - \tNombre:\n");
						new karen;
						for(new i=0; i < sizeof(Radios); ++i)
						{
							karen++;
							format(list, sizeof(list), "%d\t%s\n",i, Radios[i][Nombre]);
        					strcat(dialog, list);
						}

						format(list, sizeof(list), "{B42020}Apagar");
    					strcat(dialog, list);

						PLAYER_TEMP[playerid][pt_LAST_RADIO] = karen;
						ShowPlayerDialog(playerid,DIALOG_CHANGE_RADIO_N, DIALOG_STYLE_TABLIST_HEADERS,"{B42020}Radios",dialog,"Seleccionar","Cancelar");
					}
					case 1:
					{
						callcmd::desrentar(playerid,"");
					}
				}
			}
		}
		case DIALOG_CHANGE_RADIO_N:
		{
			if(response)
			{
				if (!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid,-1, "Error debes estar en un vehiculo");
				if(listitem == PLAYER_TEMP[playerid][pt_LAST_RADIO])
				{
					ChangeRadioForThisVehicle(playerid, 0);
					return 1;
				}
				ChangeRadioForThisVehicle(playerid, listitem);
			}
		}
		case DIALOG_ACTIVE_MEJORAS:
		{
			if(response)
			{
				if (!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid,-1, "Error debes estar en un vehiculo");
				switch(listitem)
				{
					case 0:
					{
						new vehicleid = GetPlayerVehicleID(playerid);
						if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_ACELERACION]==0) return MensajesAyuda(playerid,"Tu vehiculo no tiene aceleracion");
						if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_ACELERACION_ACTIVE]==1)
						{
							GLOBAL_VEHICLES[vehicleid][gb_vehicle_ACELERACION_ACTIVE]=0;
							MensajesAyuda(playerid,"Aceleracion ~r~desactivada");

							new action[84];
							format(action, sizeof action, "Desactiva la aceleracion de su vehiculo %s *",VEHICLE_INFO[GLOBAL_VEHICLES[ vehicleid ][gb_vehicle_MODELID] - 400][vehicle_info_NAME]);
							Auto_SendPlayerAction(playerid, action);
						}
						else 
						{
							GLOBAL_VEHICLES[vehicleid][gb_vehicle_ACELERACION_ACTIVE]=1;
							MensajesAyuda(playerid,"Aceleracion ~g~activada");

							new action[84];
							format(action, sizeof action, "Activa la aceleracion de su vehiculo %s *",VEHICLE_INFO[GLOBAL_VEHICLES[ vehicleid ][gb_vehicle_MODELID] - 400][vehicle_info_NAME]);
							Auto_SendPlayerAction(playerid, action);
						}
					}
					case 1:
					{
						ShowPlayerDialog(playerid,DIALOG_ACTIVE_SALTO_V,DIALOG_STYLE_LIST,"Salto vertical:","Desactivar\nOpcion 1\nOpcion 2", "Seguir","Cancelar");
					}
				}
			}
		}
		case DIALOG_ACTIVE_SALTO_V:
		{
			if(response)
			{
				new vehicleid = GetPlayerVehicleID(playerid);
				switch(listitem)
				{
					case 0:
					{
						GLOBAL_VEHICLES[vehicleid][gb_vehicle_SALTO_V]=0;
						MensajesAyuda(playerid,"Salto v ~r~desactivado");
					}
					case 1:
					{
						if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_SALTO_V_1]==0) return MensajesAyuda(playerid,"Tu vehiculo no tiene esta mejora");
						if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_SALTO_V]==1)
						{
							GLOBAL_VEHICLES[vehicleid][gb_vehicle_SALTO_V]=0;
							MensajesAyuda(playerid,"Salto v 1 ~r~desactivado");
						}
						else 
						{
							GLOBAL_VEHICLES[vehicleid][gb_vehicle_SALTO_V]=1;
							MensajesAyuda(playerid,"Salto v 1 ~g~activado");
						}
					}
					case 2:
					{
						if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_SALTO_V_2]==0) return MensajesAyuda(playerid,"Tu vehiculo no tiene esta mejora");
						if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_SALTO_V]==2)
						{
							GLOBAL_VEHICLES[vehicleid][gb_vehicle_SALTO_V]=0;
							MensajesAyuda(playerid,"Salto v 1 ~r~desactivado");
						}
						else 
						{
							GLOBAL_VEHICLES[vehicleid][gb_vehicle_SALTO_V]=2;
							MensajesAyuda(playerid,"Salto v 1 ~g~activado");
						}
					}
				}
			}
		}
		case DIALOG_ACTIVE_ACELERACION:
		{
			if(response)
			{
				if (!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid,-1, "Error debes estar en un vehiculo");
				switch(listitem)
				{
					case 0:
					{
						new vehicleid = GetPlayerVehicleID(playerid),aceletiene[10],aceleactive[10];
						switch(GLOBAL_VEHICLES[vehicleid][gb_vehicle_ACELERACION])
						{
							case 0:aceletiene="No";
							case 1:aceletiene="Si";
						}
					    switch(GLOBAL_VEHICLES[vehicleid][gb_vehicle_ACELERACION_ACTIVE])
					    {
					    	case 0:aceleactive="No";
					    	case 1:aceleactive="Si";
					    }

			    		new string[200],dialog[1000];
			    		format(string,sizeof(string),"Aceleracion : \"%s\" | Activo : \"%s\"\n",aceletiene,aceleactive);
						strcat(dialog, string);

						format(string,sizeof(string),"Salto vertical opcion :  \"%d\"\n",GLOBAL_VEHICLES[ vehicleid ][gb_vehicle_SALTO_V]);
						strcat(dialog, string);

						new formt[20];
						format(formt,sizeof(formt),"{D32B2B}%s",VehicleName[GetVehicleModel(GetPlayerVehicleID(playerid)) - 400]);
				    	ShowPlayerDialog(playerid,DIALOG_ACTIVE_MEJORAS, DIALOG_STYLE_LIST, formt,dialog, "Seguir(>>)","Cerrar");

					}
					case 1:
					{
						ShowPlayerDialog(playerid,DIALOG_DAR_QUITAR_LLAVES, DIALOG_STYLE_LIST,"Opcion", "Dar llaves\nQuitar llaves\nVer llaves","Seleccionar", "Cerrar");
					}
					case 2:
					{
						new list[200],dialog[500];
						format(dialog, sizeof dialog, "# - \tNombre:\n");
						new karen;
						for(new i=0; i < sizeof(Radios); ++i)
						{
							karen++;
							format(list, sizeof(list), "%d\t%s\n",i, Radios[i][Nombre]);
        					strcat(dialog, list);
						}

						format(list, sizeof(list), "{B42020}Radio link personalizado (VIP)");
    					strcat(dialog, list);

						PLAYER_TEMP[playerid][pt_LAST_RADIO] = karen;
						ShowPlayerDialog(playerid,DIALOG_CHANGE_RADIO, DIALOG_STYLE_TABLIST_HEADERS,"{B42020}Radios",dialog,"Seleccionar","Cancelar");
					}
					case 3:
					{
						new vehicleid = GetPlayerVehicleID(playerid);
						if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_BAUL]==1)
						{
							GLOBAL_VEHICLES[vehicleid][gb_vehicle_BAUL]=0;
							new action[84];
							format(action, sizeof action, "Cierra el baul de su vehiculo %s *",VEHICLE_INFO[GLOBAL_VEHICLES[ vehicleid ][gb_vehicle_MODELID] - 400][vehicle_info_NAME]);
							Auto_SendPlayerAction(playerid, action);
						}
						else
						{
							GLOBAL_VEHICLES[vehicleid][gb_vehicle_BAUL]=1;
							new action[84];
							format(action, sizeof action, "Abre el baul de su vehiculo %s *",VEHICLE_INFO[GLOBAL_VEHICLES[ vehicleid ][gb_vehicle_MODELID] - 400][vehicle_info_NAME]);
							Auto_SendPlayerAction(playerid, action);
						}
						SaveVarsVehicle(vehicleid);
					}

				}
			}
		}
		case DIALOG_CHANGE_RADIO:
		{
			if(response)
			{
				if (!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid,-1, "Error debes estar en un vehiculo");
				if(listitem == PLAYER_TEMP[playerid][pt_LAST_RADIO] && ACCOUNT_INFO[playerid][ac_SU] >= 1) return ShowPlayerDialog(playerid,DIALOG_PUT_RADIO,DIALOG_STYLE_INPUT,""R"Radio link personal", "Ingresa el link de la radio", "Aceptar", "Cerrar");
				ChangeRadioForThisVehicle(playerid, listitem);
				new vehicleid = GetPlayerVehicleID(playerid);
				SaveVarsVehicle(vehicleid);
			}
		}
		case DIALOG_PUT_RADIO:
		{
			if(response)
			{
				if (!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid,-1, "Error debes estar en un vehiculo");
				new vehicleid = GetPlayerVehicleID(playerid);
				if(strlen(inputtext) > 100) return SendClientMessage(playerid, -1, "El link no puede superar los 100 caracteres.");
				GLOBAL_VEHICLES[vehicleid][gb_vehicle_RADIO] = MAX_RADIO;
				format(GLOBAL_VEHICLES[vehicleid][gb_vehicle_RADIO_LINK],100,"%s",inputtext);

				SaveVarsVehicle(vehicleid);
			}
		}
		case DIALOG_DAR_QUITAR_LLAVES:
		{
			if(response)
			{
				if (!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid,-1, "Error debes estar en un vehiculo");
				new vehicleid = GetPlayerVehicleID(playerid);
				switch(listitem)
				{
					case 0:
					{
						new formt[60];
    					format(formt,sizeof(formt),"{D32B2B}Dar llaves de tu vehiculo \"%s\"",VehicleName[GetVehicleModel(GetPlayerVehicleID(playerid)) - 400]);

						ShowPlayerDialog(playerid,DIALOG_DARLLAVES_MIVEH, DIALOG_STYLE_INPUT,formt, "Ingresa la id del jugador, debe estar en tu vehiculo", "Aceptar", "Cancelar");
					}
					case 1:
					{
						ShowManageQuitarLlavesVeh(playerid,GLOBAL_VEHICLES[vehicleid][gb_vehicle_ID]);
					}
					case 2:
					{
						ShowLLavesFromVehicles(playerid,GLOBAL_VEHICLES[vehicleid][gb_vehicle_ID]);
					}
				}
			}
		}
		case DIALOG_DARLLAVES_MIVEH:
		{
			if(response)
			{
				if (!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid,-1, "Error debes estar en un vehiculo");
				new vehicleid = GetPlayerVehicleID(playerid);

				if(!strlen(inputtext)) return ShowPlayerDialog(playerid,DIALOG_DARLLAVES_MIVEH,DIALOG_STYLE_INPUT," | ERROR | ","ERROR, SOLO SE PERMITEN NUMEROS",">>","X");
				if(!IsNumeric(inputtext))  return ShowPlayerDialog(playerid,DIALOG_DARLLAVES_MIVEH,DIALOG_STYLE_INPUT," | ERROR | ","ERROR, SOLO SE PERMITEN NUMEROS",">>","X");
				
				new giveplayerid = strval(inputtext);
				if(GetPlayerVehicleID(playerid) != GetPlayerVehicleID(giveplayerid)) return SendClientMessage(playerid,-1,"El jugador no esta en tu vehiculo");
				if(GetAlreadyKeysFromMyVeh(ACCOUNT_INFO[giveplayerid][ac_ID], GLOBAL_VEHICLES[vehicleid][gb_vehicle_ID]) == 1) return SendClientMessage(playerid,-1,"* Este jugador ya tiene llaves de tu vehiculo");
				if(giveplayerid == playerid) return SendClientMessage(playerid, -1, "No puedes hacer esto contigo mismo");
				if(giveplayerid == INVALID_PLAYER_ID) return SendClientMessage(playerid, -1, "El jugador no esta conectado.");
				if(!IsPlayerConnected(giveplayerid)) return SendClientMessage(playerid, -1, "El jugador no esta conectado");

				new Query[120];
				format(Query, sizeof(Query),"INSERT INTO `KEYS_VEHICLE` (`VEHICLE_ID`,`USER_ID`) VALUES ('%d','%d')",GLOBAL_VEHICLES[vehicleid][gb_vehicle_ID],ACCOUNT_INFO[giveplayerid][ac_ID]);
			    db_query(Database, Query);

			    new string[90];
			    format(string,sizeof(string),"Le diste llaves de tu vehiculo ~r~~h~%s~w~ a ~y~~h~%s",VehicleName[GetVehicleModel(GetPlayerVehicleID(playerid)) - 400],PLAYER_TEMP[giveplayerid][pt_NAME]);
				MensajeNotificacion(playerid,string);
				//
				format(string,sizeof(string),"~y~%s ~w~te dio llaves de su vehiclo ~r~~h~%s",VehicleName[GetVehicleModel(GetPlayerVehicleID(playerid)) - 400],PLAYER_TEMP[playerid][pt_NAME]);
				MensajeNotificacion(giveplayerid,string);
			}
		}
		case DIALOG_QUITAR_LLAVES_VEH:
		{
			if(response)
			{
				if (!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid,-1, "Error debes estar en un vehiculo");
				new vehicleid = GetPlayerVehicleID(playerid);

				new i = 0, teledid_[55];
		     	while(inputtext[i+4] != ' ')
		       	++i;
				strmid(teledid_, inputtext, 3, 4+i, sizeof(teledid_));
				new removerllaves =  strval(teledid_);

				new string[100];
			  	format(string,sizeof(string),"Le quitaste las llaves de tu vehiculo ~r~~h~%s~w~ a ~y~%s",VehicleName[GetVehicleModel(GetPlayerVehicleID(playerid)) - 400],GetNameKeyOfMyVehicle(removerllaves));
			  	MensajesAyuda(playerid,string);

				new Query[100],DBResult:Result;
                format(Query, 100, "DELETE FROM `KEYS_VEHICLE` WHERE `VEHICLE_ID` = '%d' AND `ID` = '%d'",GLOBAL_VEHICLES[vehicleid][gb_vehicle_ID],removerllaves);
				Result = db_query(Database, Query);
			  	db_free_result(Result);
			  	
			}
		}
		/**/
		case DIALOG_ARMA_SKIN:
		{
			if(listitem == PAGINA[playerid]) return PAGE[playerid] = 0;
			if(!response)
			{
		 		PAGE[playerid]+=20;
		 		callcmd::skinarma(playerid,"");
			}
			if(response)
			{
				new i = 0, teledid_[55];
		     	while(inputtext[i+4] != ' ')
		       	++i;
				strmid(teledid_, inputtext, 3, 4+i, sizeof(teledid_));
				Manage_Skin_Arma[playerid] =  strval(teledid_);
				/**/
				new weapon_idaa;
				new query[200],DBResult:Result;
				format(query,sizeof(query),"SELECT WEAPON_ID FROM WEAPON_SKINS WHERE USER_ID='%d' AND ID='%d';",ACCOUNT_INFO[playerid][ac_ID],Manage_Skin_Arma[playerid]);
			    Result = db_query(Database,query);
			    if(db_num_rows(Result))
			    {
        			db_get_field_assoc(Result, "WEAPON_ID",query, 20); weapon_idaa = strval(query);
			    }
			    db_free_result(Result);
				/**/
				new caption[60];
				format(caption, sizeof(caption), "Arma %s: ID (%d)",WEAPON_INFO[ weapon_idaa ][weapon_info_NAME],Manage_Skin_Arma[playerid]);
		 		new string[256];
		  		strcat(string, "\n{ffffff}* Activar skin");
		   		strcat(string, "\n{ffffff}* Desactivar skin");
		     	ShowPlayerDialog(playerid, DIALOG_MANAGE_SKIN_ARMA_SEL, DIALOG_STYLE_LIST, caption, string, "Seguir (>>)", "Cerrar (X)");
			}	
		}
		case DIALOG_MANAGE_SKIN_ARMA_SEL:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						new query[200],DBResult:Result,weapon_idaa,skin_ida,DB_Query[90];
						format(query,sizeof(query),"SELECT WEAPON_ID,SKIN_ID FROM WEAPON_SKINS WHERE USER_ID='%d' AND ID='%d';",ACCOUNT_INFO[playerid][ac_ID],Manage_Skin_Arma[playerid]);
					    Result = db_query(Database,query);
					    if(db_num_rows(Result))
					    {
		        			db_get_field_assoc(Result, "WEAPON_ID",query, 20); weapon_idaa = strval(query);
		        			db_get_field_assoc(Result, "SKIN_ID",query, 20); skin_ida = strval(query);

		        			format(DB_Query, sizeof DB_Query, "UPDATE `WEAPON_SKINS` SET ACTIVE='0' WHERE `WEAPON_ID` = '%d' AND USER_ID='%d';",weapon_idaa,ACCOUNT_INFO[playerid][ac_ID]);
            				db_query(Database, DB_Query);
		        			format(DB_Query, sizeof DB_Query, "UPDATE `WEAPON_SKINS` SET ACTIVE='1' WHERE `ID` = '%d';",Manage_Skin_Arma[playerid]);
            				db_query(Database, DB_Query);
					    }
					    db_free_result(Result);
						WEAPON_SKIN[playerid][weapon_idaa] = skin_ida;
						WEAPON_SKIN_ACTIVE[playerid][weapon_idaa] = true;
						new string[100];
						format(string,sizeof(string),"Skin color %s activado para el arma: %s",Armas_Skin[ skin_ida ][2],WEAPON_INFO[ weapon_idaa ][weapon_info_NAME],Manage_Skin_Arma[playerid]);
						MensajesAyuda(playerid,string);
						
					}
					case 1:
					{
						new query[200],DBResult:Result,weapon_idaa,DB_Query[90];
						format(query,sizeof(query),"SELECT WEAPON_ID,SKIN_ID FROM WEAPON_SKINS WHERE USER_ID='%d' AND ID='%d';",ACCOUNT_INFO[playerid][ac_ID],Manage_Skin_Arma[playerid]);
					    Result = db_query(Database,query);
					    if(db_num_rows(Result))
					    {
		        			db_get_field_assoc(Result, "WEAPON_ID",query, 20); weapon_idaa = strval(query);

		        			format(DB_Query, sizeof DB_Query, "UPDATE `WEAPON_SKINS` SET ACTIVE='0' WHERE `WEAPON_ID` = '%d' AND USER_ID='%d';",weapon_idaa,ACCOUNT_INFO[playerid][ac_ID]);
            				db_query(Database, DB_Query);
					    }
					    db_free_result(Result);
						WEAPON_SKIN_ACTIVE[playerid][weapon_idaa] = false;
						new string[100];
						format(string,sizeof(string),"Skin del arma %s desactivado",WEAPON_INFO[ weapon_idaa ][weapon_info_NAME]);
						MensajesAyuda(playerid,string);
					}
				}
			}
		}
		case DIALOG_SEL_TYPE_BUY_AMMO:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						if(PI[playerid][P_SHOP_WEAPON] != true) ShowPlayerTextdrawsAmmu(playerid);
						else HidePlayerTextdrawsAmmu(playerid);
					}
					case 1:
					{
						PLAYER_TEMP[playerid][pt_DIALOG_RESPONDED] = false;
						ShowDialog(playerid, DIALOG_BLACK_MARKET_SELECT_WEA);
					}
					case 2:
					{
						if(PI[playerid][P_SHOP_SKIN] != true) ShowPlayerTextdrawsSkin(playerid);
						else HidePlayerTextdrawsSkin(playerid);
					}
				}
			}
		}
		case DIALOG_BLACK_MARKET_SELECT_WEA:
		{
			if(response)
			{
	 
				if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == -1) return 1;
				 
				PLAYER_TEMP[playerid][pt_SELECTED_DIALOG_WEAPON_SLOT] = PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem];
				
				if(!WEAPON_INFO[ PLAYER_WEAPONS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_DIALOG_WEAPON_SLOT] ][player_weapon_ID] ][weapon_info_AMMO])
				{
					SendClientMessage(playerid, -1, "{00FF80}Este tipo de arma no necesita munición.");
					return 1;
				}
				
				ShowDialog(playerid, DIALOG_BLACK_MARKET_AMMO);
			}
			return 1;
		}

		case DIALOG_BLACK_MARKET_AMMO:
		{
			if(response)
			{
				if(sscanf(inputtext, "d", inputtext[0])) return ShowDialog(playerid, dialogid);
				if(inputtext[0] <= 0 || inputtext[0] > 9999) return SendClientMessage(playerid, -1, "{00FF80}La cantidad de munición no es correcta.");
				
				new price = 3 * inputtext[0];
				if(price > CHARACTER_INFO[playerid][ch_CASH]) return SendClientMessageEx(playerid, -1, "{E6F8E0}No tienes dinero suficiente, te faltan {FF6633}%s$ {E6F8E0}para poder comprar la munición.", number_format_thousand(price - CHARACTER_INFO[playerid][ch_CASH]));
				
				if(PLAYER_WEAPONS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_DIALOG_WEAPON_SLOT] ][player_weapon_AMMO] + inputtext[0] > 9999)
				{
					SendClientMessage(playerid, -1, "{00FF80}A esta arma no le entra tanta municion.");
					return 1;
				}
				
				GivePlayerCash(playerid, -price);
				GivePlayerWeaponEx(playerid, PLAYER_WEAPONS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_DIALOG_WEAPON_SLOT] ][player_weapon_ID], inputtext[0]);
				
				SendClientMessageEx(playerid, -1, "{E6F8E0}Has comprado {98d16c}%s {E6F8E0}balas para tu {98d16c}'%s' {E6F8E0}por %s$.", number_format_thousand(inputtext[0]), WEAPON_INFO[ PLAYER_WEAPONS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_DIALOG_WEAPON_SLOT] ][player_weapon_ID] ][weapon_info_NAME], number_format_thousand(price));
			}
			return 1;
		}
		/**/
		case DIALOG_LIST_DISPUTAS:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						ShowDisputasGrafitis(playerid);
					}
				}
			}
		}
		case DIALOG_GRAFITI_DISPUTAS:
		{
			if(listitem == PAGINA[playerid])
			{
				PAGE[playerid] = 0;
				return 1;
			}
			if(!response)
			{
				PAGE[playerid]+=20;
		 		ShowDisputasGrafitis(playerid);
			}
			if(response)
			{
				new i = 0, streamidfromdb[50];
		     	while(inputtext[i+4] != ' ')
		       	++i;
				strmid(streamidfromdb, inputtext, 3, 4+i, sizeof(streamidfromdb));
				new IDE =  strval(streamidfromdb);

				new Query[100],DBResult:Result,Float:pos[3];
				format(Query, sizeof(Query), "SELECT X,Y,Z FROM `GRAFITIS` WHERE `ID` = '%d';",IDE);
				Result = db_query(Database, Query);
				if(db_num_rows(Result))
				{
					pos[0] = db_get_field_assoc_float(Result, "X");
					pos[1] = db_get_field_assoc_float(Result, "Y");
					pos[2] = db_get_field_assoc_float(Result, "Z");
					SetPlayer_GPS_Checkpoint(playerid,pos[0],pos[1],pos[2], 0, 0);
				}
				else
				{
					SendClientMessage(playerid,-1,"Ocurrio un error interno");
				}
			}
		}
		case DIALOG_GRAFITI_MIBANDA:
		{
			if(listitem == PAGINA[playerid])
			{
				PAGE[playerid] = 0;
				return 1;
			}
			if(!response)
			{
				PAGE[playerid]+=20;
		 		ShowGrafitisFromMyBanda(playerid);
			}
		}
		/*menu casa faccion*/
		case DIALOG_CASAMENUFACCION:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						ShowPlayerDialog(playerid,DIALOG_SELTYPE_MANAGE_CS, DIALOG_STYLE_LIST,"MENU MAPEO","Comprar mapeos\nEditar mapeos", ">>", "X");
						
					}
					case 1:
					{
						new STATUSa[35],string[100];
						new id = ENCASAFACCION[playerid];
						switch(CASAFACCION[id][LOCKTYPE])
						{
							case 0: format(STATUSa,sizeof(STATUSa),"Abierta para todos");
							case 1: format(STATUSa,sizeof(STATUSa),"Abierta para miembros");
							case 2: format(STATUSa,sizeof(STATUSa),"Abierta para lider unicamente");
						}
						format(string,sizeof(string),"Candado, Estado: '%s'",STATUSa);
						ShowPlayerDialog(playerid,DIALOG_CANDADO_CF,DIALOG_STYLE_LIST,string,"Abrir/Cerrar para todos\nAbrir/Cerrar para todos exepto para miembros\nAbrir para todos", ">>","Cerrar");
					}
				}
			}
			return 1;
		}
		case DIALOG_SELTYPE_MANAGE_CS:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0: ManageMapearCasaFaccion(playerid);
					case 1: ManageObjectsFromCasaFaccion(playerid);
				}
			}
		}
		case DIALOG_MANAGEOBJETOS_CASAFACC:
		{
			if(listitem == PAGINA[playerid]) return PAGE[playerid] = 0;
			if(!response)
			{
		 		PAGE[playerid]+=20;
		 		ManageObjectsFromCasaFaccion(playerid);
			}
			if(response)
			{
				new i = 0, teledid_[55];
		     	while(inputtext[i+4] != ' ')
		       	++i;
				strmid(teledid_, inputtext, 3, 4+i, sizeof(teledid_));
				MapearObjetoFaccion[playerid] =  strval(teledid_);
				new caption[60];
				format(caption, sizeof(caption), "Mapeando objeto ID: (%d)", MapearObjetoFaccion[playerid]);
		 		new string[256];
		  		strcat(string, "\n{ffffff}* Editar Mapeo");
		   		strcat(string, "\n{ffffff}* Borrar Mapeo (Irreversible)");
		     	ShowPlayerDialog(playerid, DIALOG_EDITMUEBLECF_SEL, DIALOG_STYLE_LIST, caption, string, "Seguir (>>)", "Cerrar (X)");
			}
		}
		case DIALOG_EDITMUEBLECF_SEL:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{ 
						if(MapearObjetoFaccion[playerid]==0) SendClientMessage(playerid, 0xCCCCCCFF, "** error.");
	                    new query[100],DBResult:result;
	                    format(query, sizeof(query), "SELECT X,Y,Z,rX,rY,rZ FROM MAPEOSCASAFACCION WHERE ID='%d';",MapearObjetoFaccion[playerid]);
			            result = db_query(DBCASA, query);
			            if(db_num_rows(result))
			            {
			                DATAMUEBLE[playerid][qX] = db_get_field_assoc_float(result, "X");
			                DATAMUEBLE[playerid][qY] = db_get_field_assoc_float(result, "Y");
			                DATAMUEBLE[playerid][qZ] = db_get_field_assoc_float(result, "Z");
			                DATAMUEBLE[playerid][qrX] = db_get_field_assoc_float(result, "rX");
			                DATAMUEBLE[playerid][qrY] = db_get_field_assoc_float(result, "rY");
			                DATAMUEBLE[playerid][qrZ] = db_get_field_assoc_float(result, "rZ");
			            }
	                    db_free_result(result);
	                    EditandoMuebleCasaFaccion[playerid] = MapearObjetoFaccion[playerid];
						EditDynamicObject(playerid,MUEBLEFACCION[ MapearObjetoFaccion[playerid] ][ID]);
	    				EditandoCasaFaccion[playerid] = true;
					}
					case 1:
					{
						new Query[100],DBResult:Result;
	                    format(Query, 100, "DELETE FROM `MAPEOSCASAFACCION` WHERE `CASAFACCION` = '%d' AND `ID` = '%d'",ENCASAFACCION[playerid],MapearObjetoFaccion[playerid]);
						Result = db_query(DBCASA, Query);
					  	db_free_result(Result);
					  	GameTextForPlayer(playerid,"~n~~n~~n~Mapeo borrado",5000,3);
					  	DestroyDynamicObject(MUEBLEFACCION[ MapearObjetoFaccion[playerid] ][ID]);
					}
				}
			}
		}
		/*mapear faccion por dentro*/
		case BUY_MUEBLE_FROM_CF:
		{
			if(listitem == PAGINA[playerid]) return PAGE[playerid] = 0;
			if(!response)
			{
		 		PAGE[playerid]+=20;
		 		ManageMapearCasaFaccion(playerid);
			}
			if(response)
			{

				if(GetCountObjetFromThisCasaFac(ENCASAFACCION[playerid]) >= 20) return SendClientMessage(playerid,-1,"No puedes agregar más mapeos");

				new caption[56];
		     	new i = 0, teledid_[5];
		     	while(inputtext[i+4] != ' ')
		       	++i;
				strmid(teledid_, inputtext, 3, 4+i, sizeof(teledid_));
				MapeandoFaccion[playerid] =  strval(teledid_);
				/**/
				new query[100],DBResult:result,precio,name_[25];
                format(query, sizeof(query), "SELECT PRECIO,NOMBRE FROM BUYMUEBLESCASAFACCION WHERE ID='%d';",MapeandoFaccion[playerid]);
	            result = db_query(_DB_, query);
	            if(db_num_rows(result))
	            {
	                precio = db_get_field_assoc_int(result, "PRECIO");
	                db_get_field_assoc(result, "NOMBRE", name_, 25);
	            }
                db_free_result(result);
				/**/
				format(caption, sizeof(caption), "Mapeando casa faccion id: (%d)", MapeandoFaccion[playerid]);
		 		new string[130];
		  		format(string,sizeof(string),"¿Deseas comprar el objeto \"%s\" por \"%d\" "SERVER_COIN" ?",name_,precio);
		     	ShowPlayerDialog(playerid, DIALOG_CONFIRM_BUYOBJE_FAC, DIALOG_STYLE_MSGBOX, caption,string, "Aceptar (>>)", "Cerrar (X)");
			}
		}
		case DIALOG_CONFIRM_BUYOBJE_FAC:
		{
			if(response)
			{
				if(GetCountObjetFromThisCasaFac(ENCASAFACCION[playerid]) >= 20) return SendClientMessage(playerid,-1,"No puedes agregar más mapeos");

				new query[100],DBResult:result,precio,name_[25],objeto_;
                format(query, sizeof(query), "SELECT PRECIO,NOMBRE,OBJETO FROM BUYMUEBLESCASAFACCION WHERE ID='%d';",MapeandoFaccion[playerid]);
	            result = db_query(_DB_, query);
	            if(db_num_rows(result))
	            {
	                precio = db_get_field_assoc_int(result, "PRECIO");
	                objeto_ = db_get_field_assoc_int(result, "OBJETO");
	                db_get_field_assoc(result, "NOMBRE", name_, 25);
	            }
                db_free_result(result);

                if(precio >= ACCOUNT_INFO[playerid][ac_SD]) return SendClientMessage(playerid,-1,"No tienes suficiente "SERVER_COIN" para comprar el objeto");
				
				new DBResult:Result2,maxid,DB_Query[55];
		   		format(DB_Query, sizeof(DB_Query), "SELECT ID, MAX(`ID`) FROM `MAPEOSCASAFACCION` WHERE ID");
		   		Result2 = db_query(DBCASA, DB_Query);
		     	if(db_num_rows(Result2))
		      	{
		       		db_get_field_assoc(Result2, "ID", DB_Query, 45); maxid = strval(DB_Query);
				}
				db_free_result(Result2);

				/**/
				GastarRp(playerid,precio);
				new string[100];
				format(string,sizeof(string),"Gastaste %d de "SERVER_COIN" en la compra del objeto %s para la casa faccion",precio,name_);
				MensajeNotificacion(playerid,string);
				new Float: x, Float: y, Float: z;
				GetPlayerPos(playerid, x, y, z);
		        GetXYInFrontOfPlayer(playerid, x, y, 1.0);
		        new Query[300];
				format(Query, sizeof(Query),"INSERT INTO `MAPEOSCASAFACCION` (`CASAFACCION`,`OBJETO`,`X`,`Y`,`Z`,`MUNDO`) VALUES ('%d','%d','%f','%f','%f')",
					MapeandoFaccion[playerid], objeto_, x, y, z, GetPlayerVirtualWorld(playerid));
			    db_query(DBCASA, Query);

			    DATAMUEBLE[playerid][qX]=x;
				DATAMUEBLE[playerid][qY]=y;
				DATAMUEBLE[playerid][qZ]=z;
				DATAMUEBLE[playerid][qrX]=0.0;
				DATAMUEBLE[playerid][qrY]=0.0;
				DATAMUEBLE[playerid][qrZ]=0.0;

		    	EditandoMuebleCasaFaccion[playerid] = maxid;
		    	MUEBLEFACCION[ maxid ][ID] = CreateDynamicObject(objeto_, x, y, z, 0.0, 0.0, 0.0,GetPlayerVirtualWorld(playerid));
		    	EditDynamicObject(playerid,MUEBLEFACCION[ maxid ][ID]);
		    	EditandoCasaFaccion[playerid] = true;
		    	SendClientMessageEx(playerid,-1,"* Editando objeto: %d Nombre: %s",objeto_,name_);

			}
		}
		/*mapear casavip por fuera*/
		case DIALOG_MAPEARCASA:
		{
			if(response)
			{
				new caption[56];
		     	new i = 0, teledid_[5];
		     	while(inputtext[i+4] != ' ')
		       	++i;
				strmid(teledid_, inputtext, 3, 4+i, sizeof(teledid_));
				MapeandoCasa[playerid] =  strval(teledid_);

				if(GetDistanceMyHouses(playerid,MapeandoCasa[playerid]) == 1) return MensajesAyuda(playerid,"Debes estar serca de la posicion de la casa");
				format(caption, sizeof(caption), "Mapeando casa ID: (%d)", MapeandoCasa[playerid]);
		 		new string[256];
		  		strcat(string, "\n{ffffff}* MAPEAR");
		   		strcat(string, "\n{ffffff}* EDITAR MAPEOS");
		   		strcat(string, "\n{FF0000}* BORRAR TODOS LOS MAPEOS (IRREVERSIBLE)");
		     	ShowPlayerDialog(playerid, DIALOG_MAPEARCASA_MANAGE, DIALOG_STYLE_LIST, caption, string, "Seguir (>>)", "Cerrar (X)");
			}
			return 1;
		}
		case DIALOG_MAPEARCASA_MANAGE:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						ShowObjectsForBuyMapCasa(playerid);
					}
					case 1:
					{	
						ManageObjectsFromMapCasa(playerid);
					}
					case 2:
					{

					}
				}
			}
			return 1;
		}
		case DIALOG_EDITMAPCASA_AFUERA:
		{
			if(response)
			{
				new i = 0, teledid_[55];
		     	while(inputtext[i+4] != ' ')
		       	++i;
				strmid(teledid_, inputtext, 3, 4+i, sizeof(teledid_));
				MapearObjetoAfuera[playerid] =  strval(teledid_);
				new caption[60];
				format(caption, sizeof(caption), "Mapeando objeto ID: (%d)", MapearObjetoAfuera[playerid]);
		 		new string[256];
		  		strcat(string, "\n{ffffff}* Editar Mapeo");
		   		strcat(string, "\n{ffffff}* Borrar Mapeo (Irreversible)");
		   		strcat(string, "\n{FFFF00}* Agregar una textura, Costo: 5 "SERVER_COIN"");
		     	ShowPlayerDialog(playerid, DIALOG_EDITMAPCASA_SEL, DIALOG_STYLE_LIST, caption, string, "Seguir (>>)", "Cerrar (X)");
			}
			return 1;
		}
		case DIALOG_EDITMAPCASA_SEL:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{ 
						if(MapearObjetoAfuera[playerid]==0) SendClientMessage(playerid, 0xCCCCCCFF, "** error.");
	                    new query[100],DBResult:result;
	                    format(query, sizeof(query), "SELECT X,Y,Z,rX,rY,rZ FROM MAPCASA WHERE ID='%d';",MapearObjetoAfuera[playerid]);
			            result = db_query(DBCASA, query);
			            if(db_num_rows(result))
			            {
			                DATAMUEBLE[playerid][qX] = db_get_field_assoc_float(result, "X");
			                DATAMUEBLE[playerid][qY] = db_get_field_assoc_float(result, "Y");
			                DATAMUEBLE[playerid][qZ] = db_get_field_assoc_float(result, "Z");
			                DATAMUEBLE[playerid][qrX] = db_get_field_assoc_float(result, "rX");
			                DATAMUEBLE[playerid][qrY] = db_get_field_assoc_float(result, "rY");
			                DATAMUEBLE[playerid][qrZ] = db_get_field_assoc_float(result, "rZ");
			            }
	                    db_free_result(result);
	                    EditandoMuebleFuera[playerid] = MapearObjetoAfuera[playerid];
						EditDynamicObject(playerid,MAPEOSFUERA[MapearObjetoAfuera[playerid]][ID]);
	    				EditandoCasaFuera[playerid] = true;
					}
					case 1:
					{
						new Query[100],DBResult:Result;
	                    format(Query, 100, "DELETE FROM `MAPCASA` WHERE `CASAID` = '%d' AND `ID` = '%d'",MapeandoCasa[playerid],MapearObjetoAfuera[playerid]);
						Result = db_query(DBCASA, Query);
					  	db_free_result(Result);
					  	GameTextForPlayer(playerid,"~n~~n~~n~Mapeo borrado",5000,3);
					  	DestroyDynamicObject(MAPEOSFUERA[ MapearObjetoAfuera[playerid] ][ID]);
					}
					case 2:
					{
						if(5 >= ACCOUNT_INFO[playerid][ac_SD]) return SendClientMessage(playerid,-1,"No tienes suficiente "SERVER_COIN" para comprar la textura");
						ShowTexturesForCasaVip(playerid);
					}
				}
			}
			return 1;
		}
		case DIALOG_ADDTEXTUREMAP:
		{
			if(response)
			{
				new i = 0, teledid_[55];
		     	while(inputtext[i+4] != ' ')
		       	++i;
				strmid(teledid_, inputtext, 3, 4+i, sizeof(teledid_));
				new Textyradid =  strval(teledid_);

				new Query[70], DBResult:Result,objetomodel_,textura1_[256],textura2_[256];
				format(Query, sizeof(Query), "SELECT * FROM `MAPTEXTURES` WHERE ID='%d'",Textyradid);
				Result = db_query(_DB_, Query);
				if(db_num_rows(Result))
				{
				    db_get_field_assoc(Result, "TEXTURA1",textura1_, 60);
				    db_get_field_assoc(Result, "TEXTURA2",textura2_, 60);
					db_get_field_assoc(Result, "TEXTURAMODEL",Query, 30); objetomodel_ = strval(Query);
				}
				db_free_result(Result);
				if(objetomodel_ == 0) return 1;
				CambiarTexturaMapeo(playerid, objetomodel_,textura1_,textura2_);
			}
			return 1;
		}
		case DIALOG_STARTMAPERCASAVIP:
		{
			if(response)
			{
				new i = 0, teledid_[55];
		     	while(inputtext[i+4] != ' ')
		       	++i;
				strmid(teledid_, inputtext, 3, 4+i, sizeof(teledid_));
				new idfromdb =  strval(teledid_);

				new Query[300], DBResult:Result,objeto_,costo_,name_[256];
				format(Query, sizeof(Query), "SELECT * FROM `BUYMAPCASA` WHERE `ID` = '%d'",idfromdb);
				Result = db_query(_DB_, Query);
				if(db_num_rows(Result))
				{
				    db_get_field_assoc(Result, "NOMBRE",name_, 60);
					db_get_field_assoc(Result, "OBJETO",Query, 30); objeto_ = strval(Query);
					db_get_field_assoc(Result, "PRECIO",Query, 30); costo_ = strval(Query);
					if(costo_ > ACCOUNT_INFO[playerid][ac_SD]) return SendClientMessage(playerid,-1,"No tienes suficiente "SERVER_COIN" para comprar ese objeto");
				}
				db_free_result(Result);

				/**/
				GastarRp(playerid,costo_);
				new Float: x, Float: y, Float: z;
				GetPlayerPos(playerid, x, y, z);
		        GetXYInFrontOfPlayer(playerid, x, y, 1.0);

				format(Query, sizeof(Query),"INSERT INTO `MAPCASA` (`CASAID`,`OBJETO`,`X`,`Y`,`Z`) VALUES ('%d','%d','%f','%f','%f')",MapeandoCasa[playerid], objeto_, x, y, z);
			    db_query(DBCASA, Query);

			    DATAMUEBLE[playerid][qX]=x;
				DATAMUEBLE[playerid][qY]=y;
				DATAMUEBLE[playerid][qZ]=z;
				DATAMUEBLE[playerid][qrX]=0.0;
				DATAMUEBLE[playerid][qrY]=0.0;
				DATAMUEBLE[playerid][qrZ]=0.0;

			 	new DBResult:Result2,muebleddid,DB_Query[50];
		   		format(DB_Query, sizeof(DB_Query), "SELECT ID, MAX(`ID`) FROM `MAPCASA` WHERE ID");
		   		Result2 = db_query(DBCASA, DB_Query);
		     	if(db_num_rows(Result2))
		      	{
		       		db_get_field_assoc(Result2, "ID", DB_Query, 45); muebleddid = strval(DB_Query);
				}
				db_free_result(Result2);

		    	EditandoMuebleFuera[playerid] = muebleddid;
		    	MAPEOSFUERA[muebleddid][ID] = CreateDynamicObject(objeto_, x, y, z, 0.0, 0.0, 0.0,0,0);
		    	EditDynamicObject(playerid,MAPEOSFUERA[muebleddid][ID]);
		    	EditandoCasaFuera[playerid] = true;
		    	SendClientMessageEx(playerid,-1,"* Editando objeto: %d Nombre: %s",objeto_,name_);
		    	SendClientMessage(playerid,-1,"Si te alejas mas de 10 metros se cancelara la edicion y perderas el objeto, si situas el objeto muy lejos de la posicion de la casa se borrara el objeto");
				/**/
			}
		}
		case DIALOG_ADDMAPA:
		{
			if(response)
			{
				if(!strlen(inputtext)) return ShowPlayerDialog(playerid,DIALOG_ADDMAPA,DIALOG_STYLE_INPUT," | AGREGAR OBJETO | ","ERROR, SOLO SE PERMITEN NUMEROS",">>","X");
				if(!IsNumeric(inputtext))  return ShowPlayerDialog(playerid,DIALOG_ADDMAPA,DIALOG_STYLE_INPUT," | AGREGAR OBJETO | ","ERROR, SOLO SE PERMITEN NUMEROS",">>","X");
				ADDMAP[playerid][Objeto_] = strval(inputtext);
				ShowPlayerDialog(playerid,DIALOG_ADDMAPA_OB,DIALOG_STYLE_INPUT," | AGREGAR OBJETO | ","INGRESA EL COSTO DEL OBJETO",">>","X");
			}
		}
		case DIALOG_ADDMAPA_OB:
		{
			if(response)
			{
				if(!strlen(inputtext)) return ShowPlayerDialog(playerid,DIALOG_ADDMAPA_OB,DIALOG_STYLE_INPUT," | AGREGAR OBJETO | ","ERROR, SOLO SE PERMITEN NUMEROS",">>","X");
				if(!IsNumeric(inputtext))  return ShowPlayerDialog(playerid,DIALOG_ADDMAPA_OB,DIALOG_STYLE_INPUT," | AGREGAR OBJETO | ","ERROR, SOLO SE PERMITEN NUMEROS",">>","X");
				ADDMAP[playerid][Costo_] = strval(inputtext);
				ShowPlayerDialog(playerid,DIALOG_ADDMAPA_NOM,DIALOG_STYLE_INPUT," | AGREGAR OBJETO | ","INGRESA EL NOMBRE DEL OBJETO",">>","X");
			}
		}
		case DIALOG_ADDMAPA_NOM:
		{
			if(response)
			{
			    format(ADDMAP[playerid][Nombre_],256,"%s",inputtext);
			    MensajesAyuda(playerid,"Objeto agregado a la lista");
			    new Query[150];
		        format(Query, sizeof(Query),"INSERT INTO `BUYMAPCASA` (`OBJETO`,`NOMBRE`,`PRECIO`) VALUES('%d', '%s','%d')",ADDMAP[playerid][Objeto_],ADDMAP[playerid][Nombre_],ADDMAP[playerid][Costo_]);
		        db_query(_DB_, Query);
			}
		}
		//*menu apartamento
		 
		//Nevera
		case DIALOG_NEVERAAPARTAMENTO:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						//
						if(ENAPARTAMENTO[playerid] != -1)
						{
							ObtenerItemsApartamento(playerid);
						}
					}
					case 1:
					{
						new id=ENAPARTAMENTO[playerid];
						if(ENAPARTAMENTO[playerid] != -1)
						{
							ItemsNeveraApartamento(playerid, id);
						}
					}
				}
			}
		}
		case DIALOG_MANAGENEVERAAPARTA:
		{
			if(response)
			{
				new id=ENAPARTAMENTO[playerid];
				if(ENAPARTAMENTO[playerid] != -1)
				{
					new i = 0, getidfromdb[50];
			     	while(inputtext[i+4] != ' ')
			       	++i;
					strmid(getidfromdb, inputtext, 3, 4+i, sizeof(getidfromdb));
					new IDTEM =  strval(getidfromdb);
					new Query[200],DBResult:Result,tipo_,estado_;
					format(Query, sizeof(Query), "SELECT TIPO,ESTADO FROM `INVENTARIO` WHERE `PLAYER` = '%d' AND `ID`='%d';",ACCOUNT_INFO[playerid][ac_ID],IDTEM);
					Result = db_query(Database, Query);
					if(db_num_rows(Result))
					{
						db_get_field_assoc(Result, "TIPO",Query, 30); tipo_ = strval(Query);
						db_get_field_assoc(Result, "ESTADO",Query, 30); estado_ = strval(Query);

						new DB_Query[200];
						format(DB_Query, sizeof(DB_Query), "DELETE FROM `INVENTARIO` WHERE `ID` = '%d' AND PLAYER = '%d'",IDTEM,ACCOUNT_INFO[playerid][ac_ID]);
						db_query(Database, DB_Query);

						format( DB_Query, sizeof( DB_Query ), "INSERT INTO NEVERAAPARTAMENTO (APARTAMENTOID,ITEM,USOS) VALUES ('%d','%d','%d')",id,tipo_,estado_);
						db_query(_DB_, DB_Query );

						format(string2,sizeof(string2),"Guardaste '%s' en la nevera",INVENTARIOPLAYER[ tipo_ ][NOMBRE]);
						MensajesAyuda(playerid,string2);
					}
					db_free_result(Result);
				}
			}
		}
		case DIALOG_SACARITEMSNEVERADEPART:
		{
			if(response)
			{
				new i = 0, getidfromdb[50];
		     	while(inputtext[i+4] != ' ')
		       	++i;
				strmid(getidfromdb, inputtext, 3, 4+i, sizeof(getidfromdb));
				new IDTEM =  strval(getidfromdb);

				if(GetCountInventary(playerid) >= Max_Slots_For_Invetary) return MensajesAyuda(playerid,"No se puede añadir mas items, el inventario esta lleno");
				new Query[200],DBResult:Result,tipo_,estado_;
				format(Query, sizeof(Query), "SELECT ITEM,USOS FROM `NEVERAAPARTAMENTO` WHERE `ID`='%d';",IDTEM);
				Result = db_query(_DB_, Query);
				if(db_num_rows(Result))
				{
					db_get_field_assoc(Result, "ITEM",Query, 30); tipo_ = strval(Query);
					db_get_field_assoc(Result, "USOS",Query, 30); estado_ = strval(Query);

					new DB_Query[200];
					format(DB_Query, sizeof(DB_Query), "DELETE FROM `NEVERAAPARTAMENTO` WHERE `ID` = '%d'",IDTEM);
					db_query(_DB_, DB_Query);

					format( DB_Query, sizeof( DB_Query ), "INSERT INTO INVENTARIO (PLAYER,TIPO,ESTADO) VALUES ('%d','%d','%d')",ACCOUNT_INFO[playerid][ac_ID],tipo_,estado_);
					db_query(Database, DB_Query );

					format(string2,sizeof(string2),"Se agrego: '%s' a tu inventario",INVENTARIOPLAYER[ tipo_ ][NOMBRE]);
					MensajesAyuda(playerid,string2);
				}
				db_free_result(Result);
			}
		}
		//
		//armeria
		 
		//*mapear apartamento
		case DIALOG_MANAGEAPARTAMENTOSELECT:
		{
			if(response)
			{
				new id=ENAPARTAMENTO[playerid];
				if(APARTAMENTO[id][CasaDuenoID] != ACCOUNT_INFO[playerid][ac_ID]) return SendClientMessage(playerid,-1,"No eres dueño de este apartamento");
				switch(listitem)
				{
					case 0:
					{
						if(GetCountObjetFromThisDepa(ENAPARTAMENTO[playerid]) >= 30) return SendClientMessage(playerid,-1,"No puedes agregar más mapeos cantidad maxima alcanzada");
						if(GetCountObjetFromThisDepa(ENAPARTAMENTO[playerid]) >= 15 && ACCOUNT_INFO[playerid][ac_SU] < 2) return SendClientMessage(playerid,-1,"No puedes agregar más mapeos, compra vip 2 para tener 15 espacios mas");

						ShowComprarMapeosCasaVip(playerid);
					}
					case 1:
					{
						PLAYER_TEMP[playerid][pt_BORRAR_MUEBLES]=false;
						ShowEditarMapeosDepa(playerid);
					}
					case 2:
					{
						PLAYER_TEMP[playerid][pt_BORRAR_MUEBLES]=true;
						ShowEditarMapeosDepa(playerid);
					}
				}
			}
		}
		case MANAGEOBJETOSMUEBLES_DEPART:
		{
			new id=ENAPARTAMENTO[playerid];
			if(APARTAMENTO[id][CasaDuenoID] != ACCOUNT_INFO[playerid][ac_ID]) return SendClientMessage(playerid,-1,"No eres dueño de este apartamento");

			if(listitem == PAGINA[playerid]) return PAGE[playerid] = 0;
			if(!response)
			{
		 		PAGE[playerid]+=20;
		 		ShowMapearApartamento(playerid);
			}
			if(response)
			{
		 		new caption[76];
		     	new i = 0, getdidfromdb[50];
		     	while(inputtext[i+4] != ' ')
		       	++i;
				strmid(getdidfromdb, inputtext, 3, 4+i, sizeof(getdidfromdb));
				ManageObjeto[playerid] =  strval(getdidfromdb);

				new Query[100],DBResult:Result,nameobjeto[30];
				format(Query, sizeof(Query), "SELECT NOMBRE FROM `MAPEOSCASAVIP` WHERE `ID` = '%d';",ManageObjeto[playerid]);
				Result = db_query(_DB_, Query);
				if(db_num_rows(Result))
				{
					db_get_field_assoc(Result, "NOMBRE",nameobjeto, 30);
				}
				db_free_result(Result);
				format(caption, sizeof(caption), "Comprando mueble");
		 		new string[100];
		  		format(string,sizeof(string),"{FFFFFF}¿ Deseas comprar el objeto: (%s) por 1 "SERVER_COIN"? ",nameobjeto);
		     	ShowPlayerDialog(playerid, MANAGEOBJETOCONFRIMBUY_DPART, DIALOG_STYLE_MSGBOX, caption, string, "Si", "No");
			}
		}
		case MANAGEOBJETOCONFRIMBUY_DPART:
		{
			new id=ENAPARTAMENTO[playerid];
			if(APARTAMENTO[id][CasaDuenoID] != ACCOUNT_INFO[playerid][ac_ID]) return SendClientMessage(playerid,-1,"No eres dueño de esta casa");

			if(response)
			{
				if(ACCOUNT_INFO[playerid][ac_SD] == 0) return MensajesAyuda(playerid,"No tienes sufientes "SERVER_COIN"");
				GastarRp(playerid,1);

				new Query[270], DBResult:Result,objeto_,name_[30];
				format(Query, sizeof(Query), "SELECT * FROM `MAPEOSCASAVIP` WHERE `ID` = '%d'",ManageObjeto[playerid]);
				Result = db_query(_DB_, Query);
				if(db_num_rows(Result))
				{
				    db_get_field_assoc(Result, "NOMBRE",name_, 30);
					db_get_field_assoc(Result, "OBJETO",Query, 30); objeto_ = strval(Query);
				}
				db_free_result(Result);

				new Float: x, Float: y, Float: z;
				GetPlayerPos(playerid, x, y, z);
		        GetXYInFrontOfPlayer(playerid, x, y, 1.0);

				format(Query, sizeof(Query),"INSERT INTO `MAPEOSAPARTAMENTOS` (`APARTAMENTOID`,`Objeto`,`X`,`Y`,`Z`,`MUNDO`) VALUES ('%d','%d','%f','%f','%f','%d')",ENAPARTAMENTO[playerid], objeto_, x, y, z,GetPlayerVirtualWorld(playerid));
			    db_query(DBCASA, Query);

			    DATAMUEBLE[playerid][qX]=x;
				DATAMUEBLE[playerid][qY]=y;
				DATAMUEBLE[playerid][qZ]=z;
				DATAMUEBLE[playerid][qrX]=0.0;
				DATAMUEBLE[playerid][qrY]=0.0;
				DATAMUEBLE[playerid][qrZ]=0.0;

			 	new DBResult:Result2,muebleddid,DB_Query[100];
		   		format(DB_Query, sizeof(DB_Query), "SELECT ID, MAX(`ID`) FROM `MAPEOSAPARTAMENTOS` WHERE ID");
		   		Result2 = db_query(DBCASA, DB_Query);
		     	if(db_num_rows(Result2))
		      	{
		       		db_get_field_assoc(Result2, "ID", DB_Query, 45); muebleddid = strval(DB_Query);
				}
				db_free_result(Result2);

		    	EditandoMueble[playerid] = muebleddid;
		    	MAPAPARTAMENTO[muebleddid][ID] = CreateDynamicObject(objeto_, x, y, z, 0.0, 0.0, 0.0,GetPlayerVirtualWorld(playerid));
		    	EditDynamicObject(playerid,MAPAPARTAMENTO[muebleddid][ID]);
		    	EditandoApartamento[playerid] = true;
		    	SendClientMessageEx(playerid,-1,"* Editando objeto: %d Nombre: %s",objeto_,name_);
			}
		}
		case DIALOG_EDITARMAPEOAPARTAM:
		{
			if(response)
			{
			    new i = 0, teledid_[50];
		     	while(inputtext[i+4] != ' ')
		       	++i;
				strmid(teledid_, inputtext, 3, 4+i, sizeof(teledid_));
				ManageObjeto[playerid] =  strval(teledid_);

				new caption[257];
				format(caption, sizeof(caption), "Mapeando objeto ID: (%d)", ManageObjeto[playerid]);
		 		new string[256];
		  		strcat(string, "\n{ffffff}* Editar Mapeo");
		   		strcat(string, "\n{ffffff}* Borrar Mapeo");

		     	ShowPlayerDialog(playerid, DIALOG_SELECTTARMAPEOAPARTAM, DIALOG_STYLE_LIST, caption, string, "Seguir (>>)", "Cerrar (X)");
			}
		}
		case DIALOG_SELECTTARMAPEOAPARTAM:
		{
			new id=ENAPARTAMENTO[playerid];
			if(APARTAMENTO[id][CasaDuenoID] != ACCOUNT_INFO[playerid][ac_ID]) return SendClientMessage(playerid,-1,"No eres dueño de esta casa");

			if(response)
			{
				switch(listitem)
		    	{
	                case 0:
	                {
	                	if(ManageObjeto[playerid]==0) SendClientMessage(playerid, 0xCCCCCCFF, "** error.");
	                    new query[256],DBResult:result;
	                    format(query, sizeof(query), "SELECT X,Y,Z,rX,rY,rZ FROM MAPEOSAPARTAMENTOS WHERE ID='%d' AND APARTAMENTOID='%d'",ManageObjeto[playerid],ENAPARTAMENTO[playerid]);
			            result = db_query(DBCASA, query);
			            if(db_num_rows(result))
			            {
			                DATAMUEBLE[playerid][qX] = db_get_field_assoc_float(result, "X");
			                DATAMUEBLE[playerid][qY] = db_get_field_assoc_float(result, "Y");
			                DATAMUEBLE[playerid][qZ] = db_get_field_assoc_float(result, "Z");
			                DATAMUEBLE[playerid][qrX] = db_get_field_assoc_float(result, "rX");
			                DATAMUEBLE[playerid][qrY] = db_get_field_assoc_float(result, "rY");
			                DATAMUEBLE[playerid][qrZ] = db_get_field_assoc_float(result, "rZ");
			            }
	                    db_free_result(result);
	                    EditandoMueble[playerid] = ManageObjeto[playerid];
						EditDynamicObject(playerid,MAPAPARTAMENTO[ManageObjeto[playerid]][ID]);
	    				EditandoApartamento[playerid] = true;
	                }
	                case 1:
	                {
	                    new Query[129],DBResult:Result;
	                    format(Query, 129, "DELETE FROM `MAPEOSAPARTAMENTOS` WHERE `APARTAMENTOID` = '%d' AND `ID` = '%d'",ENAPARTAMENTO[playerid],ManageObjeto[playerid]);
						Result = db_query(DBCASA, Query);
					  	db_free_result(Result);
					  	GameTextForPlayer(playerid,"~n~~n~~n~Mapeo borrado",5000,3);
					  	DestroyDynamicObject(MAPAPARTAMENTO[ManageObjeto[playerid]][ID]);
	                }
	            }
			}
		}
		//===================================================================
		//** vender apartamento a un jugador o vender el apartamento
		case DIALOG_APARTAMENTOVENDER:
		{
			if(response)
			{
				new id=ENAPARTAMENTO[playerid];
				if(id==-1) return Kick(playerid);
				if(APARTAMENTO[id][CasaDuenoID] != ACCOUNT_INFO[playerid][ac_ID]) return SendClientMessage(playerid,-1,"No eres dueño de este apartamento");
				switch(listitem)
				{
					case 0:
					{
						ShowPlayerDialog(playerid,DIALOG_APARTVENDERCONFIRM,DIALOG_STYLE_MSGBOX,"¿Vender el apartamento?","¿Estas seguro que deseas vender el apartamento a la inmobiliaria?\nSe perderan todas las armas y comida que tengas", "Si","No");
					}
					case 1:
					{
						ShowPlayerDialog(playerid, DIALOG_APARTSELECTVENDER,DIALOG_STYLE_LIST,"¿Vender el apartamento?", "Vender por dinero\nVender por "SERVER_COIN"","Seguir","Cancelar");
					}	
				}
			}
		}
		case DIALOG_APARTSELECTVENDER:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:ShowPlayerDialog(playerid,DIALOG_DEPARTSELECTIPO,DIALOG_STYLE_INPUT,"¿Vender el apartamento?","Ingresa la cantidad de dinero", "Seguir","Cancelar"),PLAYER_TEMP[playerid][TIPOVENTACASA]=1;
					case 1:ShowPlayerDialog(playerid,DIALOG_DEPARTSELECTIPO,DIALOG_STYLE_INPUT,"¿Vender el apartamento?","Ingresa la cantidad de "SERVER_COIN"", "Seguir","Cancelar"),PLAYER_TEMP[playerid][TIPOVENTACASA]=2;
				}
			}
		}
		//
		case DIALOG_DEPARTSELECTIPO:
		{
			if(response)
			{
				if(!strlen(inputtext)) return ShowPlayerDialog(playerid,DIALOG_DEPARTSELECTIPO,DIALOG_STYLE_INPUT,"Vender el apartamento a jugador:","ERROR, SOLO SE PERMITEN NUMEROS","Seguir","X");
				if(!IsNumeric(inputtext))  return ShowPlayerDialog(playerid,DIALOG_DEPARTSELECTIPO,DIALOG_STYLE_INPUT,"Vender el apartamento a jugador:","ERROR, SOLO SE PERMITEN NUMEROS","Seguir","X");
				PLAYER_TEMP[playerid][CANTIDADVENTA] = strval(inputtext);

				if(PLAYER_TEMP[playerid][TIPOVENTACASA]==0) return Kick(playerid);
				switch(PLAYER_TEMP[playerid][TIPOVENTACASA])
				{
					case 1:
					{
						format(string2,sizeof(string2),
						"Ingresa la id del jugador\nEl jugador debe estar conectado y dentro de tu apartamento\n\nCosto del apartamento: %s",number_format_thousand(PLAYER_TEMP[playerid][CANTIDADVENTA]));
					}
					case 2:
					{
						format(string2,sizeof(string2),
						"Ingresa la id del jugador\nEl jugador debe estar conectado y dentro de tu apartamento\n\nCosto del apartamento: %d "SERVER_COIN"",PLAYER_TEMP[playerid][CANTIDADVENTA]);
					}
				}
				ShowPlayerDialog(playerid,DIALOG_APARTVENDERPLAYER,DIALOG_STYLE_INPUT,"¿Vender la casa?",string2, "Seguir","No");
			}
		}
		case DIALOG_APARTVENDERPLAYER:
		{
			if(response)
			{
				if(!strlen(inputtext)) return ShowPlayerDialog(playerid,DIALOG_APARTVENDERPLAYER,DIALOG_STYLE_INPUT,"Vender apartamento a jugador:","ERROR, SOLO SE PERMITEN NUMEROS","Seguir","X");
				if(!IsNumeric(inputtext))  return ShowPlayerDialog(playerid,DIALOG_APARTVENDERPLAYER,DIALOG_STYLE_INPUT,"Vender apartamento a jugador:","ERROR, SOLO SE PERMITEN NUMEROS","Seguir","X");
				new player = strval(inputtext);

				if(player == playerid) return SendClientMessage(playerid, -1, "No puedes hacer esto contigo mismo");
				if(player == INVALID_PLAYER_ID) return SendClientMessage(playerid, -1, "El jugador no esta conectado.");
				if(!IsPlayerConnected(player)) return SendClientMessage(playerid, -1, "El jugador no esta conectado");

				if(ENAPARTAMENTO[player]== -1) return MensajesAyuda(playerid,"El jugador no esta en ningun apartamento");
				if(ENAPARTAMENTO[player] != ENAPARTAMENTO[playerid]) return MensajesAyuda(playerid,"El jugador no esta en tu apartamento");
				if(ENAPARTAMENTO[playerid]== -1) return MensajesAyuda(playerid,"No estas en un apartamento");

				if(PLAYER_TEMP[playerid][TIPOVENTACASA]==0) return Kick(playerid);
				switch(PLAYER_TEMP[playerid][TIPOVENTACASA])
				{
					case 1: 
					{
						if(PLAYER_TEMP[player][CANTIDADVENTA] >= CHARACTER_INFO[player][ch_CASH]) return SendClientMessage(playerid,-1,"El jugador no tiene suficiente dinero para aceptar tu oferta");
						format(string2,sizeof(string2),"%s te ofrece su apartamento por un costo de $ %s\n¿Aceptas?",PLAYER_TEMP[playerid][pt_NAME],number_format_thousand(PLAYER_TEMP[playerid][CANTIDADVENTA]));
					}
					case 2:
					{
					 	if(PLAYER_TEMP[player][CANTIDADVENTA] >= ACCOUNT_INFO[player][ac_SD]) return SendClientMessage(playerid,-1,"El jugador no tiene suficiente "SERVER_COIN" para aceptar tu oferta");
						format(string2,sizeof(string2),"%s te ofrece su apartamento por un costo de %d "SERVER_COIN"\n¿Aceptas?",PLAYER_TEMP[playerid][pt_NAME],PLAYER_TEMP[playerid][CANTIDADVENTA]);
					}
				}
				PLAYER_TEMP[playerid][SAVEVAR] = player;
				PLAYER_TEMP[player][SAVEVAR] = playerid;
				new string[100];
				format(string,sizeof(string),"Espera mientras %s confirma tu ofrecimiento:\n--",PLAYER_TEMP[player][pt_NAME]);
				ShowPlayerDialog(playerid,DIALOG_NULL, DIALOG_STYLE_MSGBOX, "Esperando..",string, "Aceptar","");
				ShowPlayerDialog(player,DIALOG_CONFIRMBUYAPARTAMENTO,DIALOG_STYLE_MSGBOX,"Compra casa:",string2, "Aceptar","Cancelar");
			}
		}
		case DIALOG_CONFIRMBUYAPARTAMENTO:
		{
			if(response)
			{
				new id=ENAPARTAMENTO[playerid];
				new player=PLAYER_TEMP[playerid][SAVEVAR];
				if(id==-1) return Kick(playerid);
				switch(PLAYER_TEMP[playerid][TIPOVENTACASA])
				{
					case 1: 
					{
						GivePlayerCash(player, PLAYER_TEMP[player][CANTIDADVENTA]);
						GivePlayerCash(playerid, -PLAYER_TEMP[player][CANTIDADVENTA]);
					}
					case 2: 
					{
						GastarRp(playerid,PLAYER_TEMP[player][CANTIDADVENTA]);
						DarRp(playerid,PLAYER_TEMP[player][CANTIDADVENTA]);
					}
				}
				new string[130];
				
				format(string,sizeof(string),"Espera mientras %s confirma tu ofrecimiento:\n\nAcepto tu ofrecimiento el apartamento ahora le pertenece",PLAYER_TEMP[playerid][pt_NAME]);
				ShowPlayerDialog(player,DIALOG_NULL, DIALOG_STYLE_MSGBOX, "ACEPTADO",string, "Aceptar","");
				new DB_Query[256];
				format(DB_Query, sizeof DB_Query, "DELETE FROM `KEYSAPARTAMENTOS` WHERE `PLAYER` = '%d' AND `APARTAMENTOID`='%d';",ACCOUNT_INFO[player][ac_ID],id);
				db_query(_DB_, DB_Query);

				APARTAMENTO[id][CasaDuenoID]=ACCOUNT_INFO[playerid][ac_ID];
				APARTAMENTO[id][ENVENTA]=1;
				APARTAMENTO[id][Lock] = 1;
				format(DB_Query,sizeof(DB_Query),"UPDATE `APARTAMENTOS` SET PLAYER = '%d', ENVENTA = '1' WHERE `ID` = '%d';",ACCOUNT_INFO[playerid][ac_ID],id);
				db_query(_DB_, DB_Query);
				format(string2,sizeof(string2),"Aceptaste la venta de %s este apartamento ahora te pertenece\nusa /DEPA para abrir el MENU",PLAYER_TEMP[player][pt_NAME]);
				ShowPlayerDialog(playerid,DIALOG_NULL,DIALOG_STYLE_MSGBOX,"Informacion:",string2, "Aceptar", "");
				UpdateApartamento(id);
			}
			if(!response)
			{
				new string[130];
				new player=PLAYER_TEMP[playerid][SAVEVAR];
				format(string,sizeof(string),"Espera mientras %s confirma tu ofrecimiento:\n\nRechazo tu ofrecimiento",PLAYER_TEMP[playerid][pt_NAME]);
				ShowPlayerDialog(player,DIALOG_NULL, DIALOG_STYLE_MSGBOX, "RECHAZADO",string, "Aceptar","");
			}
		}
		case DIALOG_APARTVENDERCONFIRM:
		{
			new id=ENAPARTAMENTO[playerid];
			if(APARTAMENTO[id][CasaDuenoID] != ACCOUNT_INFO[playerid][ac_ID]) return SendClientMessage(playerid,-1,"No eres dueño de este apartamento");

			if(response)
			{
				if(id==-1) return Kick(playerid);
				GivePlayerCash(playerid,APARTAMENTO[id][PRECIO]/2);
				ResetearApartamento(id);
			}
			if(!response)
			{
				SendClientMessage(playerid,-1,"Cancelado");
			}
		}

 
		/**/
		case DIALOG_APARTAMENTOMENULLAVES:
		{
			if(response)
			{
				new id=ENAPARTAMENTO[playerid];
				if(APARTAMENTO[id][CasaDuenoID] != ACCOUNT_INFO[playerid][ac_ID]) return SendClientMessage(playerid,-1,"No eres dueño de esta casa");
				switch(listitem)
				{
					case 0:
					{
						ShowPlayerDialog(playerid,DIALOG_APARTAMENTOLLAVESDAR,DIALOG_STYLE_INPUT,"Llaves","Escribe la id del jugador a que deseas darle llaves\n(El jugador debe estar conectado y dentro de la casa)", "Seguir", "Cancelar");
					}
					case 1:
					{
						if(ACCOUNT_INFO[playerid][ac_ID]== 0) return 1;
						if(ENAPARTAMENTO[playerid]== -1) return 1;
						new string[2000],count,query[256],DBResult:Result,player_;
					    format(query,sizeof(query),"SELECT ID,PLAYER FROM KEYSAPARTAMENTOS WHERE APARTAMENTOID = '%d' ",id);
					    Result = db_query(_DB_,query);
						count = db_num_rows(Result);
						if(count == 0) return MensajesAyuda(playerid,"Ningun jugador tiene llaves de tu casa");
					    for(new i; i < db_num_rows(Result); i++)
					    {
					    new text[256], id_;
					    db_get_field_assoc(Result, "ID",query, 20);			id_ = strval(query);
					    db_get_field_assoc(Result, "PLAYER",query, 20);		player_ = strval(query);
					    format(text,sizeof(text),"%s",GetNameCuentaID(player_));
					    for(new l = 0; l < strlen(text); ++l)
					        if(text[l] == '{')
					            if(text[l+7] == '}')
					                strdel(text, l, l+8);
					    if(strlen(text) > 37)
					    {
					        strdel(text, 34, strlen(text));
					        strcat(text, "...", sizeof(text));
					    }
					   	if(!i)
						format(string, sizeof(string), "{000000}ID %d {FFFFFF}| Nombre: %s\n", id_,text);
						else
						format(string, sizeof(string), "%s\n{000000}ID %d {FFFFFF}| Nombre: %s\n", string, id_,text);
					    db_next_row(Result);
					    }
					    ShowPlayerDialog(playerid,DIALOG_APARTAMENTOLLAVEMENU, DIALOG_STYLE_LIST,"Llaves:", string, "Seguir", "Cerrar");
					    db_free_result(Result);
					}
				}
			}
		}
		case DIALOG_APARTAMENTOLLAVESDAR:
		{
			if(response)
			{
				if(!strlen(inputtext)) return ShowPlayerDialog(playerid,DIALOG_APARTAMENTOLLAVESDAR,DIALOG_STYLE_INPUT,"Llaves:","ERROR, SOLO SE PERMITEN NUMEROS","Seguir","X");
				if(!IsNumeric(inputtext))  return ShowPlayerDialog(playerid,DIALOG_APARTAMENTOLLAVESDAR,DIALOG_STYLE_INPUT,"Llaves:","ERROR, SOLO SE PERMITEN NUMEROS","Seguir","X");
				new player = strval(inputtext);
				new id=ENAPARTAMENTO[playerid];
				//new did=ENCASAVIP[player];
				if(APARTAMENTO[id][CasaDuenoID] != ACCOUNT_INFO[playerid][ac_ID]) return SendClientMessage(playerid,-1,"No eres dueño de este apartamento");
				if(player == playerid) return SendClientMessage(playerid, -1, "No puedes hacer esto contigo mismo");
				if(player == INVALID_PLAYER_ID) return SendClientMessage(playerid, -1, "El jugador no esta conectado.");
				if(!IsPlayerConnected(player)) return SendClientMessage(playerid, -1, "El jugador no esta conectado");
				if(ENAPARTAMENTO[player]== -1) return MensajesAyuda(playerid,"El jugador no esta en ningun apartamento");
				if(ENAPARTAMENTO[player] !=  ENAPARTAMENTO[playerid]) return MensajesAyuda(playerid,"El jugador no esta en tu apartamento");
				if(ENAPARTAMENTO[playerid]== -1) return MensajesAyuda(playerid,"No estas en un apartamento");
				if(HaveAlreadyKeysFromThisDepart(ACCOUNT_INFO[player][ac_ID], id) == 1) return SendClientMessageEx(playerid,-1,"%s ya tiene llaves de tu apartamento",PLAYER_TEMP [ player ] [pt_RP_NAME]);
				/**/
				new GQuery[140];
				format( GQuery, sizeof( GQuery ), "INSERT INTO KEYSAPARTAMENTOS (PLAYER,APARTAMENTOID) VALUES ('%d','%d')",ACCOUNT_INFO[player][ac_ID],id);
				db_query(_DB_, GQuery );
				format(string2,sizeof(string2),"Le diste llaves de tu apartamento a: %s",PLAYER_TEMP [ player ] [pt_RP_NAME]);
				MensajeNotificacion(playerid,string2);
				format(string2,sizeof(string2),"%s te dio llaves de su apartamento, puedes usar su armeria, nevera y entrar cuando quieras",PLAYER_TEMP [ playerid ] [pt_RP_NAME]);
				MensajesAyuda(player,string2);
				/**/
			}
		}
		case DIALOG_APARTAMENTOLLAVEMENU:
		{
			if(response)
			{
				new id=ENAPARTAMENTO[playerid];
				if(APARTAMENTO[id][CasaDuenoID] != ACCOUNT_INFO[playerid][ac_ID]) return SendClientMessage(playerid,-1,"No eres dueño de esta casa");

				new i = 0, streamidfromdb[50];
		     	while(inputtext[i+4] != ' ')
		       	++i;
				strmid(streamidfromdb, inputtext, 3, 4+i, sizeof(streamidfromdb));
				new IDE =  strval(streamidfromdb);

				new Query[100],DBResult:Result,player_;
				format(Query, sizeof(Query), "SELECT ID,PLAYER FROM `KEYSAPARTAMENTOS` WHERE `ID` = '%d' AND `APARTAMENTOID`='%d';",IDE,id);
				Result = db_query(_DB_, Query);
				if(db_num_rows(Result))
				{
					db_get_field_assoc(Result, "PLAYER",Query, 30); player_ = strval(Query);
				    new DB_Query[90];

					format(DB_Query, sizeof DB_Query, "DELETE FROM `KEYSAPARTAMENTOS` WHERE `ID` = '%d' AND `APARTAMENTOID`='%d';",IDE,id);
					db_query(_DB_, DB_Query);
					format(string2,sizeof(string2),"Le quitaste las llaves de tu casa a: %s",GetNameCuentaID(player_));
					MensajeNotificacion(playerid,string2);
				}
				else
				{
					SendClientMessage(playerid,-1,"Hay un error interno");
				}
				db_free_result(Result);
			}
		}
		case DIALOG_LLAMARPUERTAAPARTAMENTO:
		{
			if(response)
			{
				new id=ENAPARTAMENTO[playerid];
				if(id==-1) return 1;
				new i = 0, streamidfromdb[50];
		     	while(inputtext[i+4] != ' ')
		       	++i;
				strmid(streamidfromdb, inputtext, 3, 4+i, sizeof(streamidfromdb));
				new IDE =  strval(streamidfromdb);
				if(!IsPlayerConnected(IDE))
				{
					new DB_Query[100];
		    		format(DB_Query, sizeof DB_Query, "DELETE FROM `LLAMADASPUERTAAPARTAMENTOS` WHERE `PLAYER` = '%d';",IDE);
					db_query(_DB_, DB_Query);
					MensajesAyuda(playerid,"El jugador se deconecto");
				}
				if(IsPlayerInRangeOfPoint(IDE,3,CASAVIP[id][CasaX],CASAVIP[id][CasaY],CASAVIP[id][CasaZ]))
				{
					EnviaraApartamento(IDE,id);
					new DB_Query[100];
		    		format(DB_Query, sizeof DB_Query, "DELETE FROM `LLAMADASPUERTAAPARTAMENTOS` WHERE `PLAYER` = '%d';",IDE);
					db_query(_DB_, DB_Query);
					format(string2,sizeof(string2),"%s Te dejo pasar a su apartamento",PLAYER_TEMP[playerid][pt_NAME]);
					MensajesAyuda(IDE,string2);
					format(string2,sizeof(string2),"Dejaste pasar a %s a tu apartamento",PLAYER_TEMP[IDE][pt_NAME]);
					MensajesAyuda(playerid,string2);
				}
				else
				{
					MensajesAyuda(playerid,"El jugador no esta en la puerta");
					new DB_Query[100];
		    		format(DB_Query, sizeof DB_Query, "DELETE FROM `LLAMADASPUERTAAPARTAMENTOS` WHERE `PLAYER` = '%d';",IDE);
					db_query(_DB_, DB_Query);
				}
			}
		}
		//==== texturizar apartamento
 
		//fin texturizar apartamento
		//fin menu apartamento
		case DIALOG_APARTAMENTO:
		{
			if(response)
			{
				new id=ENAPARTAMENTO[playerid];
				if(APARTAMENTO[id][ENVENTA]==0)
				{
					if(APARTAMENTO[id][PRECIO] >= CHARACTER_INFO[playerid][ch_CASH]) return SendClientMessage(playerid,-1,"No tienes suficiente dinero");
					APARTAMENTO[id][ENVENTA]=1;
					APARTAMENTO[id][Lock]=1;
					new Query[150],label[256];
					APARTAMENTO[id][CasaDuenoID]=ACCOUNT_INFO[playerid][ac_ID];
					format(APARTAMENTO[id][CasaDueno],256,"%s",PLAYER_TEMP[playerid][pt_NAME]);
					APARTAMENTO[id][Lock] = 1;
					format(Query,sizeof(Query),"UPDATE `APARTAMENTOS` SET PLAYER = '%d', ENVENTA = '1' WHERE `ID` = '%d';",ACCOUNT_INFO[playerid][ac_ID],id);
					db_query(_DB_, Query);

					format(label, sizeof(label), "{FFFFFF}Apartamento de:\n {FFFF00}%s",GetNameCuentaID(APARTAMENTO[id][CasaDuenoID]));	
				    UpdateDynamic3DTextLabelText(APARTAMENTO[id][CasaLabel], 0xFFFFFFFF, label);
				    Streamer_SetIntData(STREAMER_TYPE_PICKUP, APARTAMENTO[id][CasaPickup], E_STREAMER_MODEL_ID, 19522);
					format(string2,sizeof(string2),"Compraste el apartamento id '%d' por $%s",id,number_format_thousand(APARTAMENTO[id][PRECIO]));
					GivePlayerCash(playerid,-APARTAMENTO[id][PRECIO]);
				    MensajeNotificacion(playerid,string2);
				    EnviaraApartamento(playerid,id);
				}
				else MensajesAyuda(playerid,"El apartamento ya fue comprado");
			}
			if(!response)
			{
				ENAPARTAMENTO[playerid]=-1;
			}
		}
		case DIALOG_CREARAPARTAMENTO:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						PLAYER_TEMP[playerid][MAKEDEPARTAMENTOINTERIOR]=1;
						SendClientMessage(playerid,-1, "Interior #1 seleccionado, ahora ingresa la cantidad de que costara el apartamento");
						ShowPlayerDialog(playerid, DIALOG_CREARAPARTPUTBUY, DIALOG_STYLE_INPUT,"Costo de del apartamento","Ingresa el costo $$ del apartamento", "Seguir", "Cancelar");
					}
					case 1:
					{
						PLAYER_TEMP[playerid][MAKEDEPARTAMENTOINTERIOR]=2;
						SendClientMessage(playerid,-1, "Interior #2 seleccionado, ahora ingresa la cantidad de que costara el apartamento");
						ShowPlayerDialog(playerid, DIALOG_CREARAPARTPUTBUY, DIALOG_STYLE_INPUT,"Costo de del apartamento","Ingresa el costo $$ del apartamento", "Seguir", "Cancelar");
					}
				}
			}
		}
		case DIALOG_CREARAPARTPUTBUY:
		{
			if(response)
			{
				if(!strlen(inputtext)) return ShowPlayerDialog(playerid,DIALOG_CREARAPARTPUTBUY,DIALOG_STYLE_INPUT,"Costo de del apartamento","ERROR, SOLO SE PERMITEN NUMEROS","Seguir","X");
				if(!IsNumeric(inputtext))  return ShowPlayerDialog(playerid,DIALOG_CREARAPARTPUTBUY,DIALOG_STYLE_INPUT,"Costo de del apartamento","ERROR, SOLO SE PERMITEN NUMEROS","Seguir","X");
				PLAYER_TEMP[playerid][MAKEAPARTAMENTOCOSTO] = strval(inputtext);
				SendClientMessageEx(playerid,-1,"Costo del apartamento: %d",PLAYER_TEMP[playerid][MAKEAPARTAMENTOCOSTO]);

				ShowPlayerDialog(playerid,DIALOG_CASA_O_APART,DIALOG_STYLE_LIST,"Casa/Depar","Apartamento\nCasa","Siguiente","Cancelar");
				
 
			}
		}
		case DIALOG_CASA_O_APART:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						CrearApartamento(playerid,PLAYER_TEMP[playerid][CasaPosX],PLAYER_TEMP[playerid][CasaPosY],PLAYER_TEMP[playerid][CasaPosZ],
							PLAYER_TEMP[playerid][MAKEDEPARTAMENTOINTERIOR],PLAYER_TEMP[playerid][MAKEAPARTAMENTOCOSTO],1);
					}
					case 1:
					{
						CrearApartamento(playerid,PLAYER_TEMP[playerid][CasaPosX],PLAYER_TEMP[playerid][CasaPosY],PLAYER_TEMP[playerid][CasaPosZ],
							PLAYER_TEMP[playerid][MAKEDEPARTAMENTOINTERIOR],PLAYER_TEMP[playerid][MAKEAPARTAMENTOCOSTO],2);
					}
				}
			}
		}
		case DIALOG_MANAGE_PLAYER_FACC:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0: ShowPlayerDialog(playerid, FACCION_INVITE, DIALOG_STYLE_INPUT, "Invitar jugador a la faccion", "Ingresa la id del jugador\nEl jugador debe estar serca de ti", "Seguir", "X");
					case 1: ShowPlayerDialog(playerid, FACCION_KICK, DIALOG_STYLE_INPUT, "Expulsar un jugador de la faccion", "Ingresa la id del jugador", "Seguir", "X");
					case 2: ShowInfoFaccion(playerid);
				}
			}
		}
		case SHOW_MIEMBROS_FACC:
		{
			if(response)
			{
				if(listitem == 3) ManageMemersFacc(playerid);
			}
		}
		case FACCION_KICK:
		{
			if(response)
			{
				if(!strlen(inputtext)) return ShowPlayerDialog(playerid,FACCION_INVITE,DIALOG_STYLE_INPUT,"Invitar jugador a la faccion","ERROR, SOLO SE PERMITEN NUMEROS","Seguir","X");
				if(!IsNumeric(inputtext))  return ShowPlayerDialog(playerid,FACCION_INVITE,DIALOG_STYLE_INPUT,"Invitar jugador a la faccion","ERROR, SOLO SE PERMITEN NUMEROS","Seguir","X");
				callcmd::expulsarfaccion(playerid,inputtext);
			}
		}
		case FACCION_INVITE:
		{
			if(response)
			{
				if(!strlen(inputtext)) return ShowPlayerDialog(playerid,FACCION_INVITE,DIALOG_STYLE_INPUT,"Invitar jugador a la faccion","ERROR, SOLO SE PERMITEN NUMEROS","Seguir","X");
				if(!IsNumeric(inputtext))  return ShowPlayerDialog(playerid,FACCION_INVITE,DIALOG_STYLE_INPUT,"Invitar jugador a la faccion","ERROR, SOLO SE PERMITEN NUMEROS","Seguir","X");
				callcmd::invitarfaccion(playerid,inputtext);
			}
		}
		case MANAGEMEMERFACC:
		{
			if(listitem == PAGINA[playerid]) return PAGE[playerid] = 0;
			if(!response)
			{
		 		PAGE[playerid]+=20;
		 		ManageMemersFacc(playerid);
			}
			if(response)
			{
		 		new caption[56];
		     	new i = 0, teledid_[50];
		     	while(inputtext[i+4] != ' ')
		       	++i;
				strmid(teledid_, inputtext, 3, 4+i, sizeof(teledid_));
				ManageObjeto[playerid] =  strval(teledid_);

				format(caption, sizeof(caption), "Miembro: (%s)",GetNameCuentaID(ManageObjeto[playerid]));
		 		new string[256];
		  		strcat(string, "\n{FF0000}* Expulsar");
		     	ShowPlayerDialog(playerid, KICK_OFFLINE_FACC, DIALOG_STYLE_LIST, caption, string, "Seguir (>>)", "Cerrar (X)");
			}
		}
		case KICK_OFFLINE_FACC:
		{
			if(response)
			{
				/**/
				new DBResult:Resulta;
				new DB_Query[128];
				format(DB_Query, sizeof DB_Query, "SELECT  `CONNECTED`,`PLAYERID` FROM `CUENTA` WHERE `ID` = '%d';", ManageObjeto[playerid]);
				Resulta = db_query(Database, DB_Query);
				if(db_num_rows(Resulta))
				{
					new connected, player_id;

					connected = db_get_field_assoc_int(Resulta, "CONNECTED");
					player_id = db_get_field_assoc_int(Resulta, "PLAYERID");

					if(connected == 1)
					{
						SendClientMessage(playerid,-1,"El jugador esta conectado se le otorgo el lider automaticamente");
						if(IsPlayerConnected(player_id))
						{
							SendClientMessage(playerid,-1,"El jugador esta conectado usa > /Managefaccion > Expulsar miembro.");
							return 1;
						}	
					}
					else
					{
						format(DB_Query, sizeof DB_Query, "UPDATE `CUENTA` SET `FACCION` = '0' WHERE `ID` = '%d';",ManageObjeto[playerid]);
						db_query(Database, DB_Query);
						SendClientMessageEx(playerid,-1,"Se expulso al jugador: %s de la faccion.",GetNameCuentaID(ManageObjeto[playerid]));
						return 1;
					}
				}
				else SendClientMessage(playerid, -1, "Error 420.");
				/**/
				db_free_result(Resulta);
			}
		}
	}

	//	
	if(dialogid )
	/**/
	if(dialogid == DIALOG_MANAGEFACCIONES)
	{
		if(response)
		{
			LevelAdmin(playerid,6);
			new caption[56];
	     	new i = 0, getidfromdb[50];
	     	while(inputtext[i+4] != ' ')
	       	++i;
			strmid(getidfromdb, inputtext, 3, 4+i, sizeof(getidfromdb));
			ManageObjeto[playerid] =  strval(getidfromdb);

			format(caption, sizeof(caption), "EDITANDO FACCION ID: (%d)", ManageObjeto[playerid]);
	 		new string[256];
	   		strcat(string, "\n{ffffff}* CAMBIAR O ELIMINAR LIDER");
	   		strcat(string, "\n{ffffff}* CAMBIAR O ELIMINAR SUB LIDER");
	   		strcat(string, "\n{ffffff}* INFORMACION");
	     	ShowPlayerDialog(playerid, DIALOG_MANAGEFACCIONES_EDIT, DIALOG_STYLE_LIST, caption, string, "Seguir (>>)", "Cerrar (X)");
		}
	}
	if(dialogid == DIALOG_MANAGEFACCIONES_EDIT)
	{
		if(response)
		{
			switch(listitem)
			{
				case 0:
				{
					new caption[56];
					format(caption, sizeof(caption), "EDITANDO FACCION ID: (%d)", ManageObjeto[playerid]);
			 		new string[256];
			   		strcat(string, "\n{ffffff}* CAMBIAR LIDER");
			   		strcat(string, "\n{ffffff}* ELIMINAR LIDER");
			     	ShowPlayerDialog(playerid, DIALOG_MANAGEFACCIONES_LIDER, DIALOG_STYLE_LIST, caption, string, "Seguir (>>)", "Cerrar (X)");
				}
				case 1:
				{
					new caption[56];
					format(caption, sizeof(caption), "EDITANDO FACCION ID: (%d)", ManageObjeto[playerid]);
			 		new string[256];
			   		strcat(string, "\n{ffffff}* CAMBIAR LIDER");
			   		strcat(string, "\n{ffffff}* ELIMINAR LIDER");
			     	ShowPlayerDialog(playerid, DIALOGMANAGEFACCIONES_SUBLIDER, DIALOG_STYLE_LIST, caption, string, "Seguir (>>)", "Cerrar (X)");
				}
			}
		}
	}
	//Sub lider
	if(dialogid == DIALOGMANAGEFACCIONES_SUBLIDER)
	{
		if(response)
		{
			switch(listitem)
			{
				case 0:
				{
					ShowPlayerDialog(playerid, DIALOGCHANGE_SUBLIDER_FACC, DIALOG_STYLE_INPUT, "Cambiar sub lider a la faccion", "Ingresa la id de la cuenta del jugador", "Seguir", "X");
				}
				case 1:
				{
					new Query[100];
					format(Query,sizeof(Query),"UPDATE `FACCIONES` SET `SUB_LIDER` = '-1' WHERE ID = '%d'",ManageObjeto[playerid]);
					db_query(_DB_, Query);
					SendClientMessageEx(playerid,-1,"Sub Lider de la faccion eliminado");
					LoadInfoFacciones();
				}
			}
		}
	}
	if(dialogid == DIALOGCHANGE_SUBLIDER_FACC)
	{
		if(response)
		{
			if(!strlen(inputtext)) return ShowPlayerDialog(playerid,DIALOGCHANGE_SUBLIDER_FACC,DIALOG_STYLE_INPUT,"Cambiar lider a la faccion","ERROR, SOLO SE PERMITEN NUMEROS","Seguir","X");
			if(!IsNumeric(inputtext))  return ShowPlayerDialog(playerid,DIALOGCHANGE_SUBLIDER_FACC,DIALOG_STYLE_INPUT,"Cambiar lider a la faccion","ERROR, SOLO SE PERMITEN NUMEROS","Seguir","X");
			
			new nerak = strval(inputtext);

			new Query[200],DBResult:Resultt;
			format(Query, sizeof(Query), "SELECT ID FROM `CUENTA` WHERE `ID` = '%d'",nerak);
		    Resultt = db_query(Database, Query);
		    if(db_num_rows(Resultt))
		    {
		    	RemoveFaccionLider(playerid,ManageObjeto[playerid]);
				format(Query,sizeof(Query),"UPDATE `FACCIONES` SET `SUB_LIDER` = '%d' WHERE ID = '%d'",nerak,ManageObjeto[playerid]);
				db_query(_DB_, Query);
				SendClientMessageEx(playerid,-1,"Se le otorgo sub lider de la faccion al jugador: '%s'",GetNameCuentaID(nerak));

				new DB_Query[128];
				format(DB_Query, sizeof DB_Query, "UPDATE `CUENTA` SET `FACCION` = '%d' WHERE `ID` = '%d';",ManageObjeto[playerid],nerak);
				db_query(Database, DB_Query);
				/**/
				new DBResult:Resulta;
				format(DB_Query, sizeof DB_Query, "SELECT  `CONNECTED`,`PLAYERID` FROM `CUENTA` WHERE `ID` = '%d';", nerak);
				Resulta = db_query(Database, DB_Query);
				if(db_num_rows(Resulta))
				{
					new connected, player_id;

					connected = db_get_field_assoc_int(Resulta, "CONNECTED");
					player_id = db_get_field_assoc_int(Resulta, "PLAYERID");

					if(connected == 1)
					{
						SendClientMessage(playerid,-1,"El jugador esta conectado se le otorgo el sub lider automaticamente");
						if(IsPlayerConnected(player_id))
						{
							FACCION_PLAYER[player_id][FACION_MIEMBRO]=true;
							FACCION_PLAYER[player_id][FACCION_ID]=ManageObjeto[playerid];
							format(string2,sizeof(string2),"Te han otorgado sub lider de la faccion: '%s'",GetNameFaccionID(ManageObjeto[playerid]));
							MensajesAyuda(player_id,string2);
						}	
					}
					else
					{
						SendClientMessage(playerid,-1,"El jugador no esta conectado pero cuando se conecte aparecera como sub lider");
					}
				}
				else SendClientMessage(playerid, -1, "Error 420.");
				/**/
				db_free_result(Resulta);

				LoadInfoFacciones();
		    }
		    else
		    {
		    	
		    	SendClientMessage(playerid,-1,"La id que ingresaste no existe");
		    }
		    db_free_result(Resultt);

			return 1;
		}
	}
	//Lider
	if(dialogid == DIALOG_MANAGEFACCIONES_LIDER)
	{
		if(response)
		{
			switch(listitem)
			{
				case 0:
				{
					ShowPlayerDialog(playerid, DIALOG_CHANGE_LIDER_FACC, DIALOG_STYLE_INPUT, "Cambiar lider a la faccion", "Ingresa la id de la cuenta del jugador", "Seguir", "X");
				}
				case 1:
				{
					new Query[100];
					format(Query,sizeof(Query),"UPDATE `FACCIONES` SET `ID_LIDER` = '-1' WHERE ID = '%d'",ManageObjeto[playerid]);
					db_query(_DB_, Query);
					SendClientMessageEx(playerid,-1,"Lider de la faccion eliminado");
					LoadInfoFacciones();
				}
			}
		}
	}
	if(dialogid == DIALOG_CHANGE_LIDER_FACC)
	{
		if(response)
		{
			if(!strlen(inputtext)) return ShowPlayerDialog(playerid,DIALOG_CHANGE_LIDER_FACC,DIALOG_STYLE_INPUT,"Cambiar lider a la faccion","ERROR, SOLO SE PERMITEN NUMEROS","Seguir","X");
			if(!IsNumeric(inputtext))  return ShowPlayerDialog(playerid,DIALOG_CHANGE_LIDER_FACC,DIALOG_STYLE_INPUT,"Cambiar lider a la faccion","ERROR, SOLO SE PERMITEN NUMEROS","Seguir","X");
			
			new nerak = strval(inputtext);

			new Query[200],DBResult:Resultt;
			format(Query, sizeof(Query), "SELECT ID FROM `CUENTA` WHERE `ID` = '%d'",nerak);
		    Resultt = db_query(Database, Query);
		    if(db_num_rows(Resultt))
		    {
		    	RemoveFaccionLider(playerid,ManageObjeto[playerid]);
				format(Query,sizeof(Query),"UPDATE `FACCIONES` SET `ID_LIDER` = '%d' WHERE ID = '%d'",nerak,ManageObjeto[playerid]);
				db_query(_DB_, Query);
				SendClientMessageEx(playerid,-1,"Se le otorgo lider de la faccion al jugador: '%s'",GetNameCuentaID(nerak));

				new DB_Query[128];
				format(DB_Query, sizeof DB_Query, "UPDATE `CUENTA` SET `FACCION` = '%d' WHERE `ID` = '%d';",ManageObjeto[playerid],nerak);
				db_query(Database, DB_Query);
				/**/
				new DBResult:Resulta;
				format(DB_Query, sizeof DB_Query, "SELECT  `CONNECTED`,`PLAYERID` FROM `CUENTA` WHERE `ID` = '%d';", nerak);
				Resulta = db_query(Database, DB_Query);
				if(db_num_rows(Resulta))
				{
					new connected, player_id;

					connected = db_get_field_assoc_int(Resulta, "CONNECTED");
					player_id = db_get_field_assoc_int(Resulta, "PLAYERID");

					if(connected == 1)
					{
						SendClientMessage(playerid,-1,"El jugador esta conectado se le otorgo el lider automaticamente");
						if(IsPlayerConnected(player_id))
						{
							FACCION_PLAYER[player_id][FACION_MIEMBRO]=true;
							FACCION_PLAYER[player_id][FACCION_ID]=ManageObjeto[playerid];
							format(string2,sizeof(string2),"Te han otorgado lider de la faccion: '%s'",GetNameFaccionID(ManageObjeto[playerid]));
							MensajesAyuda(player_id,string2);
						}	
					}
					else
					{
						SendClientMessage(playerid,-1,"El jugador no esta conectado pero cuando se conecte aparecera como lider");
					}
				}
				else SendClientMessage(playerid, -1, "Error 420.");
				/**/
				db_free_result(Resulta);

				LoadInfoFacciones();
		    }
		    else
		    {
		    	
		    	SendClientMessage(playerid,-1,"La id que ingresaste no existe");
		    }
		    db_free_result(Resultt);

			return 1;
		}
	}
	//dialogo renta
	if(dialogid == DIALOG_VEHICLE_RENT)
	{
		if(response)
		{
			if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
			{
				if(GetPlayerCash(playerid) < 300) return MensajesAyuda(playerid,"No tienes suficiente dinero para rentar el vehiculo");
				ShowUpdateRentVehicle(playerid,GetPlayerVehicleID(playerid));
			}
			else
			{
				MensajesAyuda(playerid,"Sube primero al vehiculo e intentalo de nuevo");
			}
		}
	}
	//
	if(dialogid == DIALOG_MENSAJENOVEDADES)
	{
		if(response)
		{
	    	PLAYER_TEMP[playerid][pt_NOVEDAD_] = listitem;
	        ShowPlayerDialog(playerid, DIALOG_MENSAJENOVEDADES_, DIALOG_STYLE_INPUT, "| Novedad |", "{FFFF00}Intruduce el mensaje", ">>", "Cancelar");
		}
	}
	if(dialogid == DIALOG_MENSAJENOVEDADES_)
	{
		if(response)
		{
			new Query[256];
		    format(Query, 256, "UPDATE `ACTUALIZACIONES` SET `AC%d` = '%s'",PLAYER_TEMP[playerid][pt_NOVEDAD_]+1,inputtext);
		    db_query(Database, Query);

		    format(Query, 256, "UPDATE `INTOPOS` SET `ACTUALIZACION`='0'");
		    db_query(Database, Query);

		    SendClientMessageEx(playerid,-1,"Novedad %d cambiada a: '%s'",PLAYER_TEMP[playerid][pt_NOVEDAD_],inputtext);
		}
	}
	//
	//Dialogo de radar
	if(dialogid == DIALOG_RADAREDIT)
	{
		if(response || !response)
		{
			new karen_speed=150;
			if(!strlen(inputtext)) return ShowPlayerDialog(playerid,DIALOG_RADAREDIT,DIALOG_STYLE_INPUT,"RADAR","ERROR, SOLO SE PERMITEN NUMEROS","Seguir","X");
			if(!IsNumeric(inputtext))  return ShowPlayerDialog(playerid,DIALOG_RADAREDIT,DIALOG_STYLE_INPUT,"RADAR","ERROR, SOLO SE PERMITEN NUMEROS","Seguir","X");
			karen_speed = strval(inputtext);
			RADARESDEVELOCIDAD[SaveIDRADAR[playerid]][SPEEDCHECK] = karen_speed;
			new Query[80];
			format(Query,sizeof(Query),"UPDATE `RADAR` SET `SPEED` = '%d' WHERE ID = '%d'",karen_speed,SaveIDRADAR[playerid]);
			db_query(_DB_, Query);
			MensajesAyuda(playerid,"Velocidad del radar, actualizada");
			new label[256];
			format(label, sizeof(label), "{2EFE2E}ID {CED8F6}(%d)\n{2EFE2E}RADAR DE VELOCIDAD\n\nVELOCIDAD MAXIMA: {CED8F6}%d{2EFE2E} Km/H",SaveIDRADAR[playerid],RADARESDEVELOCIDAD[SaveIDRADAR[playerid]][SPEEDCHECK]);
			UpdateDynamic3DTextLabelText(RADARESDEVELOCIDAD[SaveIDRADAR[playerid]][LABEL],-1,label);
		}
	}
	if(dialogid == MANAGE_RADARES)
	{
		if(response)
		{
			LevelAdmin(playerid,5);
			new caption[56];
	     	new i = 0, getidfromdb[50];
	     	while(inputtext[i+4] != ' ')
	       	++i;
			strmid(getidfromdb, inputtext, 3, 4+i, sizeof(getidfromdb));
			ManageObjeto[playerid] =  strval(getidfromdb);

			format(caption, sizeof(caption), "EDITANDO RADAR ID: (%d)", ManageObjeto[playerid]);
	 		new string[256];
	  		//strcat(string, "\n{FF0000}* ELIMINAR RADAR");
	   		strcat(string, "\n{ffffff}* EDITAR POSICION");
	   		strcat(string, "\n{ffffff}* EDITAR VELOCIDAD DEL RADAR");
	     	ShowPlayerDialog(playerid, MANAGE_RADARES_EDIT, DIALOG_STYLE_LIST, caption, string, "Seguir (>>)", "Cerrar (X)");
		}
	}
	if(dialogid == MANAGE_RADARES_EDIT)
	{
		if(response)
		{
			switch(listitem)
			{
				/*case 0:
				{
					LevelAdmin(playerid,5);
					new id=ManageObjeto[playerid];
				 	MensajesAyuda(playerid,"~r~~h~Radar eliminado");
				 	DestroyDynamic3DTextLabel(RADARESDEVELOCIDAD[id][LABEL]);
				 	DestroyDynamicObject(RADARESDEVELOCIDAD[id][OBJETOID]);
				 	new DB_Query[50];
				 	format(DB_Query,sizeof(DB_Query),"DELETE FROM RADAR WHERE ID ='%d'",id);
			        db_query(_DB_,DB_Query);
				}*/
				case 0:
				{
					format(string2,sizeof(string2),"Editando radar id: ~y~~h~%d",ManageObjeto[playerid]);
					MensajesAyuda(playerid,string2);
					new id=ManageObjeto[playerid];
					EditDynamicObject(playerid,RADARESDEVELOCIDAD[id][OBJETOID]);
					EditandoRadar[playerid]=true;
					SaveIDRADAR[playerid]=id;
				}
				case 1:
				{
					format(string2,sizeof(string2),"Editando velocidad del radar id: ~y~~h~%d",ManageObjeto[playerid]);
					MensajesAyuda(playerid,string2);
					ShowPlayerDialog(playerid, MANAGE_RADARES_EDIT_SPED, DIALOG_STYLE_INPUT,"Editar velocidad del radar","Ingresa la velocidad que detectara este radar", "Seguir (>>)", "Cerrar (X)");
				}
			}
		}
	}
	if(dialogid == MANAGE_RADARES_EDIT_SPED)
	{
		if(response)
		{
			new karen_speed=150;
			if(!strlen(inputtext)) return ShowPlayerDialog(playerid,DIALOG_RADAREDIT,DIALOG_STYLE_INPUT,"RADAR","ERROR, SOLO SE PERMITEN NUMEROS","Seguir","X");
			if(!IsNumeric(inputtext))  return ShowPlayerDialog(playerid,DIALOG_RADAREDIT,DIALOG_STYLE_INPUT,"RADAR","ERROR, SOLO SE PERMITEN NUMEROS","Seguir","X");
			karen_speed = strval(inputtext);
			RADARESDEVELOCIDAD[ManageObjeto[playerid]][SPEEDCHECK] = karen_speed;
			new Query[80];
			format(Query,sizeof(Query),"UPDATE `RADAR` SET `SPEED` = '%d' WHERE ID = '%d'",karen_speed,ManageObjeto[playerid]);
			db_query(_DB_, Query);
			MensajesAyuda(playerid,"Velocidad del radar, actualizada");
			new label[256];
			format(label, sizeof(label), "{2EFE2E}ID {CED8F6}(%d)\n{2EFE2E}RADAR DE VELOCIDAD\n\nVELOCIDAD MAXIMA: {CED8F6}%d{2EFE2E} Km/H",ManageObjeto[playerid],RADARESDEVELOCIDAD[ManageObjeto[playerid]][SPEEDCHECK]);
			UpdateDynamic3DTextLabelText(RADARESDEVELOCIDAD[ManageObjeto[playerid]][LABEL],-1,label);
		}
	}
	//
	if(dialogid == DIALOG_PEAJE)
	{
		if(response)
		{
			new id=PEAJEID[playerid];
			if(POSPEAJES[id][STATUS]==1) MensajesAyuda(playerid,"El peaje se esta actualizando ingresa o espera");
			POSPEAJES[id][STATUS]=1;
			if(5 > CHARACTER_INFO[playerid][ch_CASH]) return MensajesAyuda(playerid,"No tienes dinero para pasar por el peaje");
			GivePlayerCash(playerid, -5);
			MoveDynamicObject(POSPEAJES[id][OBJETO],POSPEAJES[id][PosBx],POSPEAJES[id][PosBy],POSPEAJES[id][PosBz] + 0.72967 + 0.01,1,POSPEAJES[id][RotBx],-170.0000, POSPEAJES[id][RotBz]);
			POSPEAJES[id][TIMER] = SetTimerEx("RestarPeaje",2000,false,"d",id);
			MensajesAyuda(playerid,"Pasa el peaje por favor");
		}
	}
	//
	if(dialogid == DIALOG_BUYKITTOOL)
	{
		if(response)
		{
			if(GetCountInventary(playerid) >= Max_Slots_For_Invetary) return MensajesAyuda(playerid,"No se puede comprar mas items, el inventario esta lleno");
			 
			if(500 > CHARACTER_INFO[playerid][ch_CASH]) return MensajesAyuda(playerid,"No tienes dinero para comprar ese producto");
			new GQuery[120];
			GivePlayerCash(playerid,-500);
		    format( GQuery, sizeof( GQuery ), "INSERT INTO INVENTARIO (PLAYER,TIPO,ESTADO,EQUIPADO) VALUES ('%d','27','5','0')",ACCOUNT_INFO[playerid][ac_ID]);
	   		db_query(Database, GQuery );
	   		MensajesAyuda(playerid,"Compraste un kit de herramientas, fue agrego al inventario");
	   		 
		}
		if(!response)
		{
			SendClientMessage(playerid,-1,"Cancelado");
		}
	}
	//Dialogo casasvip
	if(dialogid == DIALOG_CREARCASAVIP)
	{
		if(response)
		{
			switch(listitem)
			{
				case 0:
				{
					PLAYER_TEMP[playerid][MAKECASAINTERIOR]=1;
					ShowPlayerDialog(playerid, DIALOG_SELECT_MAKE_COST, DIALOG_STYLE_LIST, "Tipo de costo", ""SERVER_COIN"\nDinero", "Seguir","Cancelar");
					SendClientMessage(playerid,-1, "Interior #1 seleccionado, ahora ingresa la cantidad de "SERVER_COIN" que costara la casa");
				}
				case 1:
				{
					PLAYER_TEMP[playerid][MAKECASAINTERIOR]=2;
					ShowPlayerDialog(playerid, DIALOG_SELECT_MAKE_COST, DIALOG_STYLE_LIST, "Tipo de costo", ""SERVER_COIN"\nDinero", "Seguir","Cancelar");
					SendClientMessage(playerid,-1, "Interior #2 seleccionado, ahora ingresa la cantidad de "SERVER_COIN" que costara la casa");
				}
			}
		}
	}
	if(dialogid == DIALOG_SELECT_MAKE_COST)
	{
		if(response)
		{
			switch(listitem)
			{
				case 0:
				{
					ShowPlayerDialog(playerid, DIALOG_CREARCASAPUTBUY, DIALOG_STYLE_INPUT,"Costo de "SERVER_COIN" de la casa","Ingresa el costo de "SERVER_COIN" de la casa", "Seguir", "Cancelar");
				}
				case 1:
				{
					ShowPlayerDialog(playerid, DIALOG_CREARCASAPUTBUY_IC, DIALOG_STYLE_INPUT,"Costo de DINERO de la casa","Ingresa el costo de DINERO de la casa", "Seguir", "Cancelar");
				}
			}
		}
	}
	if(dialogid == DIALOG_CREARCASAPUTBUY_IC)
	{
		if(response)
		{
			if(!strlen(inputtext)) return ShowPlayerDialog(playerid,DIALOG_CREARCASAPUTBUY_IC,DIALOG_STYLE_INPUT,"Costo de Dinero de la casa","ERROR, SOLO SE PERMITEN NUMEROS","Seguir","X");
			if(!IsNumeric(inputtext))  return ShowPlayerDialog(playerid,DIALOG_CREARCASAPUTBUY_IC,DIALOG_STYLE_INPUT,"Costo de Dinero de la casa","ERROR, SOLO SE PERMITEN NUMEROS","Seguir","X");
			PLAYER_TEMP[playerid][MAKECASACOSTO] = strval(inputtext);
			SendClientMessageEx(playerid,-1,"Costo DINERO de la casa: %d",PLAYER_TEMP[playerid][MAKECASACOSTO]);
			CrearCasaVip(playerid,PLAYER_TEMP[playerid][CasaPosX],PLAYER_TEMP[playerid][CasaPosY],PLAYER_TEMP[playerid][CasaPosZ],
			PLAYER_TEMP[playerid][GarajePosX],PLAYER_TEMP[playerid][GarajePosY],PLAYER_TEMP[playerid][GarajePosZ],PLAYER_TEMP[playerid][MAKECASAINTERIOR],
			PLAYER_TEMP[playerid][MAKECASACOSTO],1);
		}
	}
	if(dialogid == DIALOG_CREARCASAPUTBUY)
	{
		if(response)
		{
			if(!strlen(inputtext)) return ShowPlayerDialog(playerid,DIALOG_CREARCASAPUTBUY,DIALOG_STYLE_INPUT,"Costo de "SERVER_COIN" de la casa","ERROR, SOLO SE PERMITEN NUMEROS","Seguir","X");
			if(!IsNumeric(inputtext))  return ShowPlayerDialog(playerid,DIALOG_CREARCASAPUTBUY,DIALOG_STYLE_INPUT,"Costo de "SERVER_COIN" de la casa","ERROR, SOLO SE PERMITEN NUMEROS","Seguir","X");
			PLAYER_TEMP[playerid][MAKECASACOSTO] = strval(inputtext);
			SendClientMessageEx(playerid,-1,"Costo "SERVER_COIN" de la casa: %d",PLAYER_TEMP[playerid][MAKECASACOSTO]);
			CrearCasaVip(playerid,PLAYER_TEMP[playerid][CasaPosX],PLAYER_TEMP[playerid][CasaPosY],PLAYER_TEMP[playerid][CasaPosZ],
			PLAYER_TEMP[playerid][GarajePosX],PLAYER_TEMP[playerid][GarajePosY],PLAYER_TEMP[playerid][GarajePosZ],PLAYER_TEMP[playerid][MAKECASAINTERIOR],
			PLAYER_TEMP[playerid][MAKECASACOSTO],2);
		}
	}
	//Agregar mapeos
	if(dialogid == DIALOG_ADDMUEBLE)
	{
		if(response)
		{
			if(!strlen(inputtext)) return ShowPlayerDialog(playerid,DIALOG_ADDMUEBLE,DIALOG_STYLE_INPUT," | AGREGAR MUEBLE | ","ERROR, SOLO SE PERMITEN NUMEROS",">>","X");
			if(!IsNumeric(inputtext))  return ShowPlayerDialog(playerid,DIALOG_ADDMUEBLE,DIALOG_STYLE_INPUT," | AGREGAR MUEBLE | ","ERROR, SOLO SE PERMITEN NUMEROS",">>","X");
			ADDMAP[playerid][Objeto_] = strval(inputtext);
			ShowPlayerDialog(playerid,DIALOG_ADDMUEBLENOMBRE,DIALOG_STYLE_INPUT," | AGREGAR MUEBLE | ","INGRESA EL NOMBRE DEL MUEBLE",">>","X");
		}
	}
	if(dialogid == DIALOG_ADDMUEBLENOMBRE)
	{
		if(response)
		{
		    format(ADDMAP[playerid][Nombre_],256,"%s",inputtext);
		    SendClientMessage(playerid,-1,"Mueble agregado a la lista");
		    new Query[256];
	        format(Query, sizeof(Query),"INSERT INTO `MAPEOSCASAVIP` (`OBJETO`,`NOMBRE`) VALUES('%d', '%s')",ADDMAP[playerid][Objeto_],ADDMAP[playerid][Nombre_]);
	        db_query(_DB_, Query);
		}
	}
	if(dialogid==DIALOG_MANAGEOBJETOSMUEBLESAD)
	{
		if(listitem == PAGINA[playerid]) return PAGE[playerid] = 0;
		if(!response)
		{
	 		PAGE[playerid]+=20;
	 		callcmd::managemuebles(playerid,"");
		}
		if(response)
		{
	 		new caption[56];
	     	new i = 0, teledid_[50];
	     	while(inputtext[i+4] != ' ')
	       	++i;
			strmid(teledid_, inputtext, 3, 4+i, sizeof(teledid_));
			ManageObjeto[playerid] =  strval(teledid_);

			format(caption, sizeof(caption), "EDITANDO MUEBLE ID: (%d)", ManageObjeto[playerid]);
	 		new string[256];
	  		strcat(string, "\n{FF0000}* ELIMINAR OBJETO DE LA LISTA");
	   		strcat(string, "\n{ffffff}* CAMBIAR NOMBRE AL OBJETO");
	   		strcat(string, "\n{ffffff}* CAMBIAR ID AL OBJETO");
	     	ShowPlayerDialog(playerid, DIALOG_MANAGEOBJETOSMUEBLESEDIT, DIALOG_STYLE_LIST, caption, string, "Seguir (>>)", "Cerrar (X)");
		}
	}
	if(dialogid==DIALOG_MANAGEOBJETOSMUEBLESEDIT)
	{
		if(response)
		{
			new DB_Query[200];
		    switch(listitem)
		    {
		        case 0:
		        {
					SendClientMessage(playerid,-1,"Mueble borrado de la lista");
	            	format(DB_Query, sizeof(DB_Query), "DELETE FROM `MAPEOSCASAVIP` WHERE `ID` = '%d' COLLATE NOCASE",ManageObjeto[playerid]);
    				db_query(_DB_, DB_Query);
		        }
		       	case 1:
		        {
		            ShowPlayerDialog(playerid,DIALOG_CAMBINOMBREOBJETO,DIALOG_STYLE_INPUT,"| CAMBIAR NOMBRE AL MUEBLE |","Ingresa el nombre del objeto para actualizar",">>","Cerrar");
		        }
		       	case 2:
		        {
		            ShowPlayerDialog(playerid,DIALOG_CAMBIAROBJETOID,DIALOG_STYLE_INPUT,"| CAMBIAR ID DEL MUEBLE/OBJETO |","Ingresa el id del objeto para actualizar",">>","Cerrar");
		        }
			}	
		}
	}
	if(dialogid==DIALOG_CAMBINOMBREOBJETO)
	{
		new DB_Query[200];
		if(response)
		{
	        format(DB_Query, sizeof(DB_Query), "UPDATE `MAPEOSCASAVIP` SET `NOMBRE` = '%s' WHERE `ID` = '%d'",inputtext,ManageObjeto[playerid]);
			db_query(_DB_, DB_Query);
	        SendClientMessage(playerid,-1,"Nombre cambiado con exito al objeto.");
		}
	}
	if(dialogid==DIALOG_CAMBIAROBJETOID)
	{
		new DB_Query[200];
		if(response)
		{
			if(!strlen(inputtext)) return ShowPlayerDialog(playerid,DIALOG_CAMBIAROBJETOID,DIALOG_STYLE_INPUT," | CAMBIAR ID AL OBJETO | ","ERROR, SOLO SE PERMITEN NUMEROS",">>","X");
			if(!IsNumeric(inputtext))  return ShowPlayerDialog(playerid,DIALOG_CAMBIAROBJETOID,DIALOG_STYLE_INPUT," | CAMBIAR ID AL OBJETO | ","ERROR, SOLO SE PERMITEN NUMEROS",">>","X");
			new objetis = strval(inputtext);
			format(DB_Query, sizeof(DB_Query), "UPDATE `MAPEOSCASAVIP` SET `OBJETO` = '%d' WHERE `ID` = '%d'",objetis,ManageObjeto[playerid]);
			db_query(_DB_, DB_Query);
	        SendClientMessage(playerid,-1,"ID del objeto/mueble cambiado.");
		}
	}
	//Casa menu
	if(dialogid == DIALOG_CAJAFUERTECASAVIP)
	{
		if(response)
		{
			switch(listitem)
			{
				case 0:
				{
					ShowPlayerDialog(playerid,DIALOG_CAJAFUERTECASAVIP_RET,DIALOG_STYLE_INPUT,"CAJA FUERTE: RETIRAR","Escribe la cantidad en numeros que deseas sacar", "Seguir", "Cancelar");
				}
				case 1:
				{
					ShowPlayerDialog(playerid,DIALOG_CAJAFUERTECASAVIP_PUT,DIALOG_STYLE_INPUT,"CAJA FUERTE: DEPOSITAR","Escribe la cantidad en numeros que deseas depositar", "Seguir", "Cancelar");
				}
			}
		}
	}
	if(dialogid == DIALOG_CAJAFUERTECASAVIP_PUT)
	{
		if(response)
		{
			new id=ENCASAVIP[playerid];
			if(id==-1) return 1;
			if(!strlen(inputtext)) return ShowPlayerDialog(playerid,DIALOG_CAJAFUERTECASAVIP_PUT,DIALOG_STYLE_INPUT,"CAJA FUERTE: DEPOSITAR","ERROR, SOLO SE PERMITEN NUMEROS","Seguir","X");
			if(!IsNumeric(inputtext))  return ShowPlayerDialog(playerid,DIALOG_CAJAFUERTECASAVIP_PUT,DIALOG_STYLE_INPUT,"CAJA FUERTE: DEPOSITAR","ERROR, SOLO SE PERMITEN NUMEROS","Seguir","X");
			new putmoney = strval(inputtext);

			new Query[100],DBResult:Result,money;
			format(Query, sizeof(Query), "SELECT CAJAFUERTE FROM `CASASVIP` WHERE `ID` = '%d';",id);
			Result = db_query(_DB_, Query);
			if(db_num_rows(Result))
			{
				db_get_field_assoc(Result, "CAJAFUERTE",Query, 30); money = strval(Query);
				if(putmoney >= CHARACTER_INFO[playerid][ch_CASH]) return SendClientMessage(playerid,-1,"No hay esa cantidad para depositar");
				money=money+putmoney;
				CASAVIP[id][CAJAFUERTE]=money;
			    new DB_Query[100];
				format(DB_Query, sizeof DB_Query, "UPDATE `CASASVIP` SET CAJAFUERTE='%d' WHERE `ID` = '%d';",money,id);
				db_query(_DB_, DB_Query);
				GivePlayerCash(playerid,-putmoney);
				new string[80];
				format(string,sizeof(string),"Depositaste $%d en la caja fuerte de la casa id: %d",putmoney,id);
				MensajeNotificacion(playerid,string);
			}
			db_free_result(Result);
		}
	}
	if(dialogid == DIALOG_CAJAFUERTECASAVIP_RET)
	{
		if(response)
		{
			new id=ENCASAVIP[playerid];
			if(id==-1) return 1;
			if(!strlen(inputtext)) return ShowPlayerDialog(playerid,DIALOG_CAJAFUERTECASAVIP_RET,DIALOG_STYLE_INPUT,"CAJA FUERTE: RETIRAR","ERROR, SOLO SE PERMITEN NUMEROS","Seguir","X");
			if(!IsNumeric(inputtext))  return ShowPlayerDialog(playerid,DIALOG_CAJAFUERTECASAVIP_RET,DIALOG_STYLE_INPUT,"CAJA FUERTE: RETIRAR","ERROR, SOLO SE PERMITEN NUMEROS","Seguir","X");
			new putmoney = strval(inputtext);
			if(putmoney > 9999999) return SendClientMessage(playerid,-1, "Cantidad incorreta, de 1 a 100.000 a la vez");
			new Query[100],DBResult:Result,money;
			format(Query, sizeof(Query), "SELECT CAJAFUERTE FROM `CASASVIP` WHERE `ID` = '%d';",id);
			Result = db_query(_DB_, Query);
			if(db_num_rows(Result))
			{
				db_get_field_assoc(Result, "CAJAFUERTE",Query, 30); money = strval(Query);
				if(putmoney >= money) return SendClientMessage(playerid,-1,"No hay esa cantidad en la caja fuerte");
				money=money-putmoney;
				CASAVIP[id][CAJAFUERTE]=money;
			    new DB_Query[90];
				format(DB_Query, sizeof DB_Query, "UPDATE `CASASVIP` SET CAJAFUERTE='%d' WHERE `ID` = '%d';",money,id);
				db_query(_DB_, DB_Query);
				GivePlayerCash(playerid,putmoney);
				new string[60];
				format(string,sizeof(string),"Retiraste $%d de la caja fuerte de la casa id: %d",putmoney,id);
				MensajeNotificacion(playerid,string);
			}
			db_free_result(Result);
		}
	}
	if(dialogid == DIALOG_CASAMENU)
	{
		if(response)
		{
			 
		}
	}
	if(dialogid == DIALOG_MANAGECASASELECT)
	{
		if(response)
		{
			new id=ENCASAVIP[playerid];
			if(CASAVIP[id][CasaDuenoID] != ACCOUNT_INFO[playerid][ac_ID]) return SendClientMessage(playerid,-1,"No eres dueño de esta casa");
			switch(listitem)
			{
				case 0:
				{
					if(GetCountObjetFromThisHouse(ENCASAVIP[playerid]) >= 30) return SendClientMessage(playerid,-1,"No puedes agregar más mapeos cantidad maxima alcanzada");
					if(GetCountObjetFromThisHouse(ENCASAVIP[playerid]) >= 15 && ACCOUNT_INFO[playerid][ac_SU] < 2) return SendClientMessage(playerid,-1,"No puedes agregar más mapeos, compra vip 2 para tener 15 espacios mas");
					//ShowMapearCasaVip(playerid);
					ShowComprarMapeosCasaVip(playerid);
				}
				case 1:
				{
					PLAYER_TEMP[playerid][pt_BORRAR_MUEBLES]=false;
					ShowEditarMapeosCasa(playerid);
				}
				case 2:
				{
					PLAYER_TEMP[playerid][pt_BORRAR_MUEBLES]=true;
					ShowEditarMapeosCasa(playerid);
				}
			}
		}
	}
	if(dialogid == DIALOG_CASAMENULLAVES)
	{
		if(response)
		{
			new id=ENCASAVIP[playerid];
			if(CASAVIP[id][CasaDuenoID] != ACCOUNT_INFO[playerid][ac_ID]) return SendClientMessage(playerid,-1,"No eres dueño de esta casa");
			switch(listitem)
			{
				case 0:
				{
					ShowPlayerDialog(playerid,DIALOG_CASALLAVESDAR,DIALOG_STYLE_INPUT,"Llaves","Escribe la id del jugador a que deseas darle llaves\n(El jugador debe estar conectado y dentro de la casa)", "Seguir", "Cancelar");
				}
				case 1:
				{
					if(ACCOUNT_INFO[playerid][ac_ID]== 0) return 1;
					if(ENCASAVIP[playerid]== -1) return 1;
					new string[2000],count,query[256],DBResult:Result,player_;
				    format(query,sizeof(query),"SELECT ID,PLAYER FROM KEYSCASAVIP WHERE CASAIDKEY = '%d' ",id);
				    Result = db_query(_DB_,query);
					count = db_num_rows(Result);
					if(count == 0) return MensajesAyuda(playerid,"Ningun jugador tiene llaves de tu casa");
				    for(new i; i < db_num_rows(Result); i++)
				    {
				    new text[256], id_;
				    db_get_field_assoc(Result, "ID",query, 20);			id_ = strval(query);
				    db_get_field_assoc(Result, "PLAYER",query, 20);		player_ = strval(query);
				    format(text,sizeof(text),"%s",GetNameCuentaID(player_));
				    for(new l = 0; l < strlen(text); ++l)
				        if(text[l] == '{')
				            if(text[l+7] == '}')
				                strdel(text, l, l+8);
				    if(strlen(text) > 37)
				    {
				        strdel(text, 34, strlen(text));
				        strcat(text, "...", sizeof(text));
				    }
				   	if(!i)
					format(string, sizeof(string), "{000000}ID %d {FFFFFF}| Nombre: %s\n", id_,text);
					else
					format(string, sizeof(string), "%s\n{000000}ID %d {FFFFFF}| Nombre: %s\n", string, id_,text);
				    db_next_row(Result);
				    }
				    ShowPlayerDialog(playerid,DIALOG_CASALLAVEMENU, DIALOG_STYLE_LIST,"Llaves:", string, "Seguir", "Cerrar");
				    db_free_result(Result);
				}
			}
		}
	}
	if(dialogid == DIALOG_CASALLAVESDAR)
	{
		if(response)
		{
			if(!strlen(inputtext)) return ShowPlayerDialog(playerid,DIALOG_CASALLAVESDAR,DIALOG_STYLE_INPUT,"Llaves:","ERROR, SOLO SE PERMITEN NUMEROS","Seguir","X");
			if(!IsNumeric(inputtext))  return ShowPlayerDialog(playerid,DIALOG_CASALLAVESDAR,DIALOG_STYLE_INPUT,"Llaves:","ERROR, SOLO SE PERMITEN NUMEROS","Seguir","X");
			new player = strval(inputtext);
			new id=ENCASAVIP[playerid];
			//new did=ENCASAVIP[player];
			if(CASAVIP[id][CasaDuenoID] != ACCOUNT_INFO[playerid][ac_ID]) return SendClientMessage(playerid,-1,"No eres dueño de esta casa");
			if(player == playerid) return SendClientMessage(playerid, -1, "No puedes hacer esto contigo mismo");
			if(player == INVALID_PLAYER_ID) return SendClientMessage(playerid, -1, "El jugador no esta conectado.");
			if(!IsPlayerConnected(player)) return SendClientMessage(playerid, -1, "El jugador no esta conectado");
			if(ENCASAVIP[player]== -1) return MensajesAyuda(playerid,"El jugador no esta en ninguna casa");
			if(ENCASAVIP[player] != ENCASAVIP[playerid]) return MensajesAyuda(playerid,"El jugador no esta en tu casa");
			if(ENCASAVIP[playerid]== -1) return MensajesAyuda(playerid,"No estas en una casa");
			if(HaveAlreadyKeysFromThisHouse(ACCOUNT_INFO[player][ac_ID], id) == 1) return SendClientMessageEx(playerid,-1,"%s ya tienes llaves de tu casa",PLAYER_TEMP [ player ] [pt_RP_NAME]);
			/**/
			new GQuery[140];
			format( GQuery, sizeof( GQuery ), "INSERT INTO KEYSCASAVIP (PLAYER,CASAIDKEY) VALUES ('%d','%d')",ACCOUNT_INFO[player][ac_ID],id);
			db_query(_DB_, GQuery );
			format(string2,sizeof(string2),"Le diste llaves de tu casa a: %s",PLAYER_TEMP [ player ] [pt_RP_NAME]);
			MensajeNotificacion(playerid,string2);
			format(string2,sizeof(string2),"%s te dio llaves de su casa, puedes usar su armeria nevera y garaje",PLAYER_TEMP [ playerid ] [pt_RP_NAME]);
			MensajesAyuda(player,string2);
			/**/
		}
	}

	if(dialogid == DIALOG_CASALLAVEMENU)
	{
		if(response)
		{
			new id=ENCASAVIP[playerid];
			if(CASAVIP[id][CasaDuenoID] != ACCOUNT_INFO[playerid][ac_ID]) return SendClientMessage(playerid,-1,"No eres dueño de esta casa");

			new i = 0, streamidfromdb[50];
	     	while(inputtext[i+4] != ' ')
	       	++i;
			strmid(streamidfromdb, inputtext, 3, 4+i, sizeof(streamidfromdb));
			new IDE =  strval(streamidfromdb);

			new Query[100],DBResult:Result,player_;
			format(Query, sizeof(Query), "SELECT ID,PLAYER FROM `KEYSCASAVIP` WHERE `ID` = '%d' AND `CASAIDKEY`='%d';",IDE,id);
			Result = db_query(_DB_, Query);
			if(db_num_rows(Result))
			{
				db_get_field_assoc(Result, "PLAYER",Query, 30); player_ = strval(Query);
			    new DB_Query[90];

				format(DB_Query, sizeof DB_Query, "DELETE FROM `KEYSCASAVIP` WHERE `ID` = '%d' AND `CASAIDKEY`='%d';",IDE,id);
				db_query(_DB_, DB_Query);
				format(string2,sizeof(string2),"Le quitaste las llaves de tu casa a: %s",GetNameCuentaID(player_));
				MensajeNotificacion(playerid,string2);
			}
			else
			{
				SendClientMessage(playerid,-1,"Hay un error interno");
			}
			db_free_result(Result);
		}
	}
	if(dialogid == DIALOG_CASAVENDER)
	{
		if(response)
		{
			new id=ENCASAVIP[playerid];
			if(id==-1) return Kick(playerid);
			if(CASAVIP[id][CasaDuenoID] != ACCOUNT_INFO[playerid][ac_ID]) return SendClientMessage(playerid,-1,"No eres dueño de esta casa");
			switch(listitem)
			{
				case 0:
				{
					ShowPlayerDialog(playerid,DIALOG_CASAVENDERCONFIRM,DIALOG_STYLE_MSGBOX,"¿Vender la casa?","¿Estas seguro que deseas vender la casa a la inmobiliaria?\nSe perderan todas las armas y comida que tengas\nRecuerda sacar los vehiculos del garaje, o tendras que moverlos a la consesonaria despues", "Si","No");
				}
				case 1:
				{
					ShowPlayerDialog(playerid, DIALOG_CASASELECTVENDER,DIALOG_STYLE_LIST,"¿Vender la casa?", "Vender por dinero\nVender por "SERVER_COIN"","Seguir","Cancelar");
				}	
			}
		}
	}
	if(dialogid == DIALOG_CASASELECTVENDER)
	{
		if(response)
		{
			switch(listitem)
			{
				case 0:ShowPlayerDialog(playerid,DIALOG_CASASELECTIPO,DIALOG_STYLE_INPUT,"¿Vender la casa?","Ingresa la cantidad de dinero", "Seguir","Cancelar"),PLAYER_TEMP[playerid][TIPOVENTACASA]=1;
				case 1:ShowPlayerDialog(playerid,DIALOG_CASASELECTIPO,DIALOG_STYLE_INPUT,"¿Vender la casa?","Ingresa la cantidad de "SERVER_COIN"", "Seguir","Cancelar"),PLAYER_TEMP[playerid][TIPOVENTACASA]=2;
			}
		}
	}
	//
	if(dialogid == DIALOG_CASASELECTIPO)
	{
		if(response)
		{
			if(!strlen(inputtext)) return ShowPlayerDialog(playerid,DIALOG_CASASELECTIPO,DIALOG_STYLE_INPUT,"Vender casa a jugador:","ERROR, SOLO SE PERMITEN NUMEROS","Seguir","X");
			if(!IsNumeric(inputtext))  return ShowPlayerDialog(playerid,DIALOG_CASASELECTIPO,DIALOG_STYLE_INPUT,"Vender casa a jugador:","ERROR, SOLO SE PERMITEN NUMEROS","Seguir","X");
			PLAYER_TEMP[playerid][CANTIDADVENTA] = strval(inputtext);

			if(PLAYER_TEMP[playerid][TIPOVENTACASA]==0) return Kick(playerid);
			switch(PLAYER_TEMP[playerid][TIPOVENTACASA])
			{
				case 1:
				{
					format(string2,sizeof(string2),
					"Ingresa la id del jugador\nEl jugador debe estar conectado y dentro de tu casa\n\nCosto de la casa: %s",number_format_thousand(PLAYER_TEMP[playerid][CANTIDADVENTA]));
				}
				case 2:
				{
					format(string2,sizeof(string2),
					"Ingresa la id del jugador\nEl jugador debe estar conectado y dentro de tu casa\n\nCosto de la casa: %d "SERVER_COIN"",PLAYER_TEMP[playerid][CANTIDADVENTA]);
				}
			}
			ShowPlayerDialog(playerid,DIALOG_CASAVENDERPLAYER,DIALOG_STYLE_INPUT,"¿Vender la casa?",string2, "Seguir","No");
		}
	}
	if(dialogid == DIALOG_CASAVENDERPLAYER)
	{
		if(response)
		{
			if(!strlen(inputtext)) return ShowPlayerDialog(playerid,DIALOG_CASAVENDERPLAYER,DIALOG_STYLE_INPUT,"Vender casa a jugador:","ERROR, SOLO SE PERMITEN NUMEROS","Seguir","X");
			if(!IsNumeric(inputtext))  return ShowPlayerDialog(playerid,DIALOG_CASAVENDERPLAYER,DIALOG_STYLE_INPUT,"Vender casa a jugador:","ERROR, SOLO SE PERMITEN NUMEROS","Seguir","X");
			new player = strval(inputtext);

			if(player == playerid) return SendClientMessage(playerid, -1, "No puedes hacer esto contigo mismo");
			if(player == INVALID_PLAYER_ID) return SendClientMessage(playerid, -1, "El jugador no esta conectado.");
			if(!IsPlayerConnected(player)) return SendClientMessage(playerid, -1, "El jugador no esta conectado");

			if(ENCASAVIP[player]== -1) return MensajesAyuda(playerid,"El jugador no esta en ninguna casa");
			if(ENCASAVIP[player] != ENCASAVIP[playerid]) return MensajesAyuda(playerid,"El jugador no esta en tu casa");
			if(ENCASAVIP[playerid]== -1) return MensajesAyuda(playerid,"No estas en una casa");

			if(PLAYER_TEMP[playerid][TIPOVENTACASA]==0) return Kick(playerid);
			switch(PLAYER_TEMP[playerid][TIPOVENTACASA])
			{
				case 1: 
				{
					if(PLAYER_TEMP[player][CANTIDADVENTA] >= CHARACTER_INFO[player][ch_CASH]) return SendClientMessage(playerid,-1,"El jugador no tiene suficiente dinero para aceptar tu oferta");
					format(string2,sizeof(string2),"%s te ofrece su casa por un costo de $ %s\n¿Aceptas?",PLAYER_TEMP[playerid][pt_NAME],number_format_thousand(PLAYER_TEMP[playerid][CANTIDADVENTA]));
				}
				case 2:
				{
				 	if(PLAYER_TEMP[player][CANTIDADVENTA] >= ACCOUNT_INFO[player][ac_SD]) return SendClientMessage(playerid,-1,"El jugador no tiene suficiente "SERVER_COIN" para aceptar tu oferta");
					format(string2,sizeof(string2),"%s te ofrece su casa por un costo de %d "SERVER_COIN"\n¿Aceptas?",PLAYER_TEMP[playerid][pt_NAME],PLAYER_TEMP[playerid][CANTIDADVENTA]);
				}
			}
			PLAYER_TEMP[playerid][SAVEVAR] = player;
			PLAYER_TEMP[player][SAVEVAR] = playerid;
			new string[100];
			format(string,sizeof(string),"Espera mientras %s confirma tu ofrecimiento:\n--",PLAYER_TEMP[player][pt_NAME]);
			ShowPlayerDialog(playerid,DIALOG_NULL, DIALOG_STYLE_MSGBOX, "Esperando..",string, "Aceptar","");
			ShowPlayerDialog(player,DIALOG_CONFIRMBUYCASAVIP,DIALOG_STYLE_MSGBOX,"Compra casa:",string2, "Aceptar","Cancelar");
		}
	}
	if(dialogid == DIALOG_CONFIRMBUYCASAVIP)
	{
		if(response)
		{
			new id=ENCASAVIP[playerid];
			new player=PLAYER_TEMP[playerid][SAVEVAR];
			if(id==-1) return Kick(playerid);
			switch(PLAYER_TEMP[playerid][TIPOVENTACASA])
			{
				case 1: 
				{
					GivePlayerCash(player, PLAYER_TEMP[player][CANTIDADVENTA]);
					GivePlayerCash(playerid, -PLAYER_TEMP[player][CANTIDADVENTA]);
				}
				case 2: 
				{
					GastarRp(playerid,PLAYER_TEMP[player][CANTIDADVENTA]);
					DarRp(playerid,PLAYER_TEMP[player][CANTIDADVENTA]);
				}
			}
			new string[100];
			
			format(string,sizeof(string),"Espera mientras %s confirma tu ofrecimiento:\n\nAcepto tu ofrecimiento la casa ahora le pertenece",PLAYER_TEMP[playerid][pt_NAME]);
			ShowPlayerDialog(player,DIALOG_NULL, DIALOG_STYLE_MSGBOX, "ACEPTADO",string, "Aceptar","");
			new DB_Query[256];
			format(DB_Query, sizeof DB_Query, "DELETE FROM `KEYSCASAVIP` WHERE `PLAYER` = '%d' AND `CASAIDKEY`='%d';",ACCOUNT_INFO[player][ac_ID],id);
			db_query(_DB_, DB_Query);

			CASAVIP[id][CasaDuenoID]=ACCOUNT_INFO[playerid][ac_ID];
			CASAVIP[id][ENVENTA]=1;
			CASAVIP[id][Lock] = 1;
			format(DB_Query,sizeof(DB_Query),"UPDATE `CASASVIP` SET PLAYER = '%d', ENVENTA = '1' WHERE `ID` = '%d';",ACCOUNT_INFO[playerid][ac_ID],id);
			db_query(_DB_, DB_Query);
			format(string2,sizeof(string2),"Aceptaste la venta de %s esta casa ahora te pertenece\nusa /Casa para abrir el MENU",PLAYER_TEMP[player][pt_NAME]);
			ShowPlayerDialog(playerid,DIALOG_NULL,DIALOG_STYLE_MSGBOX,"Informacion:",string2, "Aceptar", "");
			UpdateCasaVip(id);
		}
		if(!response)
		{
			new string[100];
			new player=PLAYER_TEMP[playerid][SAVEVAR];
			format(string,sizeof(string),"Espera mientras %s confirma tu ofrecimiento:\n\nRechazo tu ofrecimiento",PLAYER_TEMP[playerid][pt_NAME]);
			ShowPlayerDialog(player,DIALOG_NULL, DIALOG_STYLE_MSGBOX, "RECHAZADO",string, "Aceptar","");
		}
	}
	if(dialogid == DIALOG_CASAVENDERCONFIRM)
	{
		new id=ENCASAVIP[playerid];
		if(CASAVIP[id][CasaDuenoID] != ACCOUNT_INFO[playerid][ac_ID]) return SendClientMessage(playerid,-1,"No eres dueño de esta casa");

		if(response)
		{
			if(id==-1) return Kick(playerid);
			DarRp(playerid,CASAVIP[id][PRECIO]/2);
			ResetearCasaVip(id);
		}
		if(!response)
		{
			SendClientMessage(playerid,-1,"Cancelado");
		}
	}
	//mapear casa
	if(dialogid == DIALOG_MANAGEOBJETOSMUEBLES)
	{
		new id=ENCASAVIP[playerid];
		if(CASAVIP[id][CasaDuenoID] != ACCOUNT_INFO[playerid][ac_ID]) return SendClientMessage(playerid,-1,"No eres dueño de esta casa");

		if(listitem == PAGINA[playerid]) return PAGE[playerid] = 0;
		if(!response)
		{
	 		PAGE[playerid]+=20;
	 		ShowMapearCasaVip(playerid);
		}
		if(response)
		{
	 		new caption[76];
	     	new i = 0, getdidfromdb[50];
	     	while(inputtext[i+4] != ' ')
	       	++i;
			strmid(getdidfromdb, inputtext, 3, 4+i, sizeof(getdidfromdb));
			ManageObjeto[playerid] =  strval(getdidfromdb);

			new Query[100],DBResult:Result,nameobjeto[30];
			format(Query, sizeof(Query), "SELECT NOMBRE FROM `MAPEOSCASAVIP` WHERE `ID` = '%d';",ManageObjeto[playerid]);
			Result = db_query(_DB_, Query);
			if(db_num_rows(Result))
			{
				db_get_field_assoc(Result, "NOMBRE",nameobjeto, 30);
			}
			db_free_result(Result);
			format(caption, sizeof(caption), "Comprando mueble");
	 		new string[100];
	  		format(string,sizeof(string),"{FFFFFF}¿ Deseas comprar el objeto: (%s) por 1 "SERVER_COIN"? ",nameobjeto);
	     	ShowPlayerDialog(playerid, DIALOG_MANAGEOBJETOCONFRIMBUY, DIALOG_STYLE_MSGBOX, caption, string, "Si", "No");
		}
	}
	if(dialogid == DIALOG_MANAGEOBJETOCONFRIMBUY)
	{
		new id=ENCASAVIP[playerid];
		if(CASAVIP[id][CasaDuenoID] != ACCOUNT_INFO[playerid][ac_ID]) return SendClientMessage(playerid,-1,"No eres dueño de esta casa");

		if(response)
		{
			if(ACCOUNT_INFO[playerid][ac_SD] == 0) return MensajesAyuda(playerid,"No tienes sufientes "SERVER_COIN"");
			GastarRp(playerid,1);

			new Query[270], DBResult:Result,objeto_,name_[30];
			format(Query, sizeof(Query), "SELECT * FROM `MAPEOSCASAVIP` WHERE `ID` = '%d'",ManageObjeto[playerid]);
			Result = db_query(_DB_, Query);
			if(db_num_rows(Result))
			{
			    db_get_field_assoc(Result, "NOMBRE",name_, 30);
				db_get_field_assoc(Result, "OBJETO",Query, 30); objeto_ = strval(Query);
			}
			db_free_result(Result);

			new Float: x, Float: y, Float: z;
			GetPlayerPos(playerid, x, y, z);
	        GetXYInFrontOfPlayer(playerid, x, y, 1.0);

			format(Query, sizeof(Query),"INSERT INTO `MAPEOSCASA` (`CasaID`,`Objeto`,`X`,`Y`,`Z`,`MUNDO`) VALUES ('%d','%d','%f','%f','%f','%d')",ENCASAVIP[playerid], objeto_, x, y, z,GetPlayerVirtualWorld(playerid));
		    db_query(DBCASA, Query);

		    DATAMUEBLE[playerid][qX]=x;
			DATAMUEBLE[playerid][qY]=y;
			DATAMUEBLE[playerid][qZ]=z;
			DATAMUEBLE[playerid][qrX]=0.0;
			DATAMUEBLE[playerid][qrY]=0.0;
			DATAMUEBLE[playerid][qrZ]=0.0;

		 	new DBResult:Result2,muebleddid,DB_Query[100];
	   		format(DB_Query, sizeof(DB_Query), "SELECT ID, MAX(`ID`) FROM `MAPEOSCASA` WHERE ID");
	   		Result2 = db_query(DBCASA, DB_Query);
	     	if(db_num_rows(Result2))
	      	{
	       		db_get_field_assoc(Result2, "ID", DB_Query, 45); muebleddid = strval(DB_Query);
			}
			db_free_result(Result2);

	    	EditandoMueble[playerid] = muebleddid;
	    	MAPCASA[muebleddid][ID] = CreateDynamicObject(objeto_, x, y, z, 0.0, 0.0, 0.0,GetPlayerVirtualWorld(playerid));
	    	EditDynamicObject(playerid,MAPCASA[muebleddid][ID]);
	    	EditandoCasa[playerid] = true;
	    	SendClientMessageEx(playerid,-1,"* Editando objeto: %d Nombre: %s",objeto_,name_);
		}
	}
	if(dialogid == DIALOG_EDITMAPCASAVIP)
	{
		if(response)
		{
		    new i = 0, teledid_[50];
	     	while(inputtext[i+4] != ' ')
	       	++i;
			strmid(teledid_, inputtext, 3, 4+i, sizeof(teledid_));
			ManageObjeto[playerid] =  strval(teledid_);

			new caption[257];
			format(caption, sizeof(caption), "Mapeando objeto ID: (%d)", ManageObjeto[playerid]);
	 		new string[256];
	  		strcat(string, "\n{ffffff}* Editar Mapeo");
	   		strcat(string, "\n{ffffff}* Borrar Mapeo");

	     	ShowPlayerDialog(playerid, DIALOG_EDITARMAPEOCASAVIP, DIALOG_STYLE_LIST, caption, string, "Seguir (>>)", "Cerrar (X)");
		}
	}
	if(dialogid ==DIALOG_EDITARMAPEOCASAVIP)
	{
		new id=ENCASAVIP[playerid];
		if(CASAVIP[id][CasaDuenoID] != ACCOUNT_INFO[playerid][ac_ID]) return SendClientMessage(playerid,-1,"No eres dueño de esta casa");

		if(response)
		{
			switch(listitem)
	    	{
                case 0:
                {
                	if(ManageObjeto[playerid]==0) SendClientMessage(playerid, 0xCCCCCCFF, "** error.");
                    new query[256],DBResult:result;
                    format(query, sizeof(query), "SELECT X,Y,Z,rX,rY,rZ FROM MAPEOSCASA WHERE ID='%d' AND CASAID='%d'",ManageObjeto[playerid],ENCASAVIP[playerid]);
		            result = db_query(DBCASA, query);
		            if(db_num_rows(result))
		            {
		                DATAMUEBLE[playerid][qX] = db_get_field_assoc_float(result, "X");
		                DATAMUEBLE[playerid][qY] = db_get_field_assoc_float(result, "Y");
		                DATAMUEBLE[playerid][qZ] = db_get_field_assoc_float(result, "Z");
		                DATAMUEBLE[playerid][qrX] = db_get_field_assoc_float(result, "rX");
		                DATAMUEBLE[playerid][qrY] = db_get_field_assoc_float(result, "rY");
		                DATAMUEBLE[playerid][qrZ] = db_get_field_assoc_float(result, "rZ");
		            }
                    db_free_result(result);
                    EditandoMueble[playerid] = ManageObjeto[playerid];
					EditDynamicObject(playerid,MAPCASA[ManageObjeto[playerid]][ID]);
    				EditandoCasa[playerid] = true;
                }
                case 1:
                {
                    new Query[129],DBResult:Result;
                    format(Query, 129, "DELETE FROM `MAPEOSCASA` WHERE `CASAID` = '%d' AND `ID` = '%d'",ENCASAVIP[playerid],ManageObjeto[playerid]);
					Result = db_query(DBCASA, Query);
				  	db_free_result(Result);
				  	GameTextForPlayer(playerid,"~n~~n~~n~Mapeo borrado",5000,3);
				  	DestroyDynamicObject(MAPCASA[ManageObjeto[playerid]][ID]);
                }
            }
		}
	}
	//===================================================================
	if(dialogid == DIALOG_LLAMARPUERTACASAVIP)
	{
		if(response)
		{
			new id=ENCASAVIP[playerid];
			if(id==-1) return 1;
			new i = 0, streamidfromdb[50];
	     	while(inputtext[i+4] != ' ')
	       	++i;
			strmid(streamidfromdb, inputtext, 3, 4+i, sizeof(streamidfromdb));
			new IDE =  strval(streamidfromdb);
			if(!IsPlayerConnected(IDE))
			{
				new DB_Query[100];
	    		format(DB_Query, sizeof DB_Query, "DELETE FROM `LLAMADASPUERTACASAVIP` WHERE `PLAYER` = '%d';",IDE);
				db_query(_DB_, DB_Query);
				MensajesAyuda(playerid,"El jugador se deconecto");
			}
			if(IsPlayerInRangeOfPoint(IDE,3,CASAVIP[id][CasaX],CASAVIP[id][CasaY],CASAVIP[id][CasaZ]))
			{
				EnviaraLaCasa(IDE,id);
				new DB_Query[100];
	    		format(DB_Query, sizeof DB_Query, "DELETE FROM `LLAMADASPUERTACASAVIP` WHERE `PLAYER` = '%d';",IDE);
				db_query(_DB_, DB_Query);
				format(string2,sizeof(string2),"%s Te dejo pasar a su casa",PLAYER_TEMP[playerid][pt_NAME]);
				MensajesAyuda(IDE,string2);
				format(string2,sizeof(string2),"Dejaste pasar a %s a tu casa",PLAYER_TEMP[IDE][pt_NAME]);
				MensajesAyuda(playerid,string2);
			}
			else
			{
				MensajesAyuda(playerid,"El jugador no esta en la puerta");
				new DB_Query[100];
	    		format(DB_Query, sizeof DB_Query, "DELETE FROM `LLAMADASPUERTACASAVIP` WHERE `PLAYER` = '%d';",IDE);
				db_query(_DB_, DB_Query);
			}
		}
	}
	//===================================================================
	if(dialogid == DIALOG_CASAVIP)
	{
		if(response)
		{
			new id=ENCASAVIP[playerid];
			if(CASAVIP[id][ENVENTA]==0)
			{
				CASAVIP[id][ENVENTA]=1;
				new Query[150],label[256];
				CASAVIP[id][CasaDuenoID]=ACCOUNT_INFO[playerid][ac_ID];
				format(CASAVIP[id][CasaDueno],256,"%s",PLAYER_TEMP[playerid][pt_NAME]);
				CASAVIP[id][Lock] = 1;
				format(Query,sizeof(Query),"UPDATE `CASASVIP` SET PLAYER = '%d', ENVENTA = '1' WHERE `ID` = '%d' COLLATE NOCASE",ACCOUNT_INFO[playerid][ac_ID],id);
				db_query(_DB_, Query);

				format(label, sizeof(label), "{FFFFFF}Casa de:\n {FFFF00}%s",GetNameCuentaID(CASAVIP[id][CasaDuenoID]));	
			    UpdateDynamic3DTextLabelText(CASAVIP[id][CasaLabel], 0xFFFFFFFF, label);
			    Streamer_SetIntData(STREAMER_TYPE_PICKUP, CASAVIP[id][CasaPickup], E_STREAMER_MODEL_ID, 19522);
				switch(CASAVIP[id][TIPOMONEDA])
				{
					case 1:
					{
						format(string2,sizeof(string2),"Compraste la casa id '%d' por $%s",id,number_format_thousand(CASAVIP[id][PRECIO]));
						GivePlayerCash(playerid,-CASAVIP[id][PRECIO]);
					}
					case 2:
					{
						format(string2,sizeof(string2),"Compraste la casa id '%d' por %d "SERVER_COIN"",id,CASAVIP[id][PRECIO]);
						GastarRp(playerid,CASAVIP[id][PRECIO]);
					}
				}
			    MensajeNotificacion(playerid,string2);
			    EnviaraLaCasa(playerid,id);
			}
			else MensajesAyuda(playerid,"La casa ya fue comprada");
		}
		if(!response)
		{
			ENCASAVIP[playerid]=-1;
		}
	}
	//
	if(dialogid == DIALOG_NEVERACASAVIP)
	{
		if(response)
		{
			switch(listitem)
			{
				case 0:
				{
					//
					if(ENCASAVIP[playerid] != -1)
					{
						ObtenerItemsNeveraCasaVip(playerid);
					}
				}
				case 1:
				{
					new id=ENCASAVIP[playerid];
					if(ENCASAVIP[playerid] != -1)
					{
						ItemsNeveraCasaVip(playerid, id);
					}
				}
			}
		}
	}
	if(dialogid == DIALOG_MANAGENEVERACASAVIP)
	{
		if(response)
		{
			new id=ENCASAVIP[playerid];
			if(ENCASAVIP[playerid] != -1)
			{
				new i = 0, getidfromdb[50];
		     	while(inputtext[i+4] != ' ')
		       	++i;
				strmid(getidfromdb, inputtext, 3, 4+i, sizeof(getidfromdb));
				new IDTEM =  strval(getidfromdb);
				new Query[200],DBResult:Result,tipo_,estado_;
				format(Query, sizeof(Query), "SELECT TIPO,ESTADO FROM `INVENTARIO` WHERE `PLAYER` = '%d' AND `ID`='%d';",ACCOUNT_INFO[playerid][ac_ID],IDTEM);
				Result = db_query(Database, Query);
				if(db_num_rows(Result))
				{
					db_get_field_assoc(Result, "TIPO",Query, 30); tipo_ = strval(Query);
					db_get_field_assoc(Result, "ESTADO",Query, 30); estado_ = strval(Query);

					new DB_Query[200];
					format(DB_Query, sizeof(DB_Query), "DELETE FROM `INVENTARIO` WHERE `ID` = '%d' AND PLAYER = '%d'",IDTEM,ACCOUNT_INFO[playerid][ac_ID]);
					db_query(Database, DB_Query);

					format( DB_Query, sizeof( DB_Query ), "INSERT INTO NEVERACASAVIP (CASAID,ITEM,USOS) VALUES ('%d','%d','%d')",id,tipo_,estado_);
					db_query(_DB_, DB_Query );

					format(string2,sizeof(string2),"Guardaste '%s' en la nevera",INVENTARIOPLAYER[ tipo_ ][NOMBRE]);
					MensajesAyuda(playerid,string2);
				}
				db_free_result(Result);
			}
		}
	}
	if(dialogid == DIALOG_SACARITEMSNEVERACASAVIP)
	{
		if(response)
		{
			new i = 0, getidfromdb[50];
	     	while(inputtext[i+4] != ' ')
	       	++i;
			strmid(getidfromdb, inputtext, 3, 4+i, sizeof(getidfromdb));
			new IDTEM =  strval(getidfromdb);

			if(GetCountInventary(playerid) >= Max_Slots_For_Invetary) return MensajesAyuda(playerid,"No se puede añadir mas items, el inventario esta lleno");
			new Query[200],DBResult:Result,tipo_,estado_;
			format(Query, sizeof(Query), "SELECT ITEM,USOS FROM `NEVERACASAVIP` WHERE `ID`='%d';",IDTEM);
			Result = db_query(_DB_, Query);
			if(db_num_rows(Result))
			{
				db_get_field_assoc(Result, "ITEM",Query, 30); tipo_ = strval(Query);
				db_get_field_assoc(Result, "USOS",Query, 30); estado_ = strval(Query);

				new DB_Query[200];
				format(DB_Query, sizeof(DB_Query), "DELETE FROM `NEVERACASAVIP` WHERE `ID` = '%d'",IDTEM);
				db_query(_DB_, DB_Query);

				format( DB_Query, sizeof( DB_Query ), "INSERT INTO INVENTARIO (PLAYER,TIPO,ESTADO) VALUES ('%d','%d','%d')",ACCOUNT_INFO[playerid][ac_ID],tipo_,estado_);
				db_query(Database, DB_Query );

				format(string2,sizeof(string2),"Se agrego: '%s' a tu inventario",INVENTARIOPLAYER[ tipo_ ][NOMBRE]);
				MensajesAyuda(playerid,string2);
			}
			db_free_result(Result);
		}
	}
	//
	if(dialogid == DIALOG_ARMAMENTO_CASAVIP)
	{
		if(response)
		{
			switch(listitem)
			{
				case 0:
				{
					new id=ENCASAVIP[playerid];
					if(ENCASAVIP[playerid] != -1)
					{
						if(GetPlayerWeapon(playerid) == 0) return 1;

						//new weapname[60];
						new weapon = GetPlayerWeapon(playerid), ammo = GetPlayerAmmo(playerid);
	            		RemovePlayerWeapon(playerid, weapon);

	            		new GQuery[140];
					    format( GQuery, sizeof( GQuery ), "INSERT INTO ARMASCASAVIP (CasaID,Arma,Municion) VALUES ('%d','%d','%d')",id,weapon,ammo);
				   		db_query(_DB_, GQuery );

				   		//GetWeaponName(weapon, weapname, sizeof(weapname));
				   		format(string2,sizeof(string2),"Guardaste el arma %s municion: %d",WEAPON_INFO[ weapon ][weapon_info_NAME],ammo);
				   		MensajesAyuda(playerid,string2);
			   		}
			   		else Kick(playerid);
					
				}
				case 1:
				{
					new id=ENCASAVIP[playerid];
					if(ENCASAVIP[playerid] != -1)
					{
						ObtenerArmaListCasaVip(playerid, id);
					}
					else Kick(playerid);
				}
			}
		}
	}
	if(dialogid == DIALOG_OBTENER_ARMA_CASAVIP)
	{
		new i = 0, getidweaponfromdb[50];
     	while(inputtext[i+4] != ' ')
       	++i;
		strmid(getidweaponfromdb, inputtext, 3, 4+i, sizeof(getidweaponfromdb));
		new ARMA_ =  strval(getidweaponfromdb);
		new Query[100],DBResult:Result,Arma_,Municion_;
		format(Query, sizeof(Query), "SELECT Arma,Municion FROM `ARMASCASAVIP` WHERE `ID` = '%d'",ARMA_);
		Result = db_query(_DB_, Query);
		if(db_num_rows(Result))
		{
			db_get_field_assoc(Result, "Arma",Query, 30); Arma_ = strval(Query);
		    db_get_field_assoc(Result, "Municion",Query, 30); Municion_ = strval(Query);
			

			new weapon_slot = WEAPON_INFO[ Arma_ ][weapon_info_SLOT];

			//new weapon_slot = WEAPON_INFO[ BLACK_MARKT_WEAPONS[listitem][black_market_WEAPON_ID] ][weapon_info_SLOT];
			if(PLAYER_WEAPONS[playerid][weapon_slot][player_weapon_ID] != 0)
			{
				SendClientMessageEx(playerid, -1, "{00FF80}Para equipar esta arma tienes que deshacerte de tu '%s' (%d) para tener espacio.", WEAPON_INFO[ PLAYER_WEAPONS[playerid][weapon_slot][player_weapon_ID] ][weapon_info_NAME], weapon_slot);
				return 1;
			}

			GivePlayerWeaponEx(playerid, Arma_, Municion_);

			new DB_Query[90];
			format(DB_Query, sizeof DB_Query, "DELETE FROM `ARMASCASAVIP` WHERE `ID` = '%d';",ARMA_);
			db_query(_DB_, DB_Query);

			RegisterNewPlayerWeapon(playerid, weapon_slot);
		}
		db_free_result(Result);
	}
	//Cambiar textura casa
	 
 
	//registro
	if(dialogid == DIALOG_SELECTGENERO)
	{
		if(response)
		{
			CHARACTER_INFO[playerid][ch_SEX] = SEX_MALE;
			MensajesAyuda(playerid,"Genero: masculino seleccionado~n~Cargando...");
			CHARACTER_INFO[playerid][ch_SKIN]=170;
		}
		if(!response)
		{
			CHARACTER_INFO[playerid][ch_SEX] = SEX_FEMALE;
			MensajesAyuda(playerid,"Genero: Femenino seleccionado~n~Cargando....");
			CHARACTER_INFO[playerid][ch_SKIN]=193;
		}
		MensajesAyuda(playerid,"Usa la tecla ~y~'T'~w~ para escribir en el chat o ejecutar ~y~Comandos");
		PLAYER_TEMP[playerid][line_tutorial]=0;
		PLAYER_TEMP[playerid][pt_TIMERS][18] = SetTimerEx("ContinuePlayerIntro", 2500, false, "id", playerid, 0);
		PLAYER_TEMP[playerid][pt_TIMERS][21] = SetTimerEx("StartTutorial",2500,false,"i",playerid);
		PLAYER_TEMP[playerid][pt_TIMERS][21] = SetTimerEx("StartTutorial",8000,true,"i",playerid);
	}
	//Vender negocios,casas etc
	if(dialogid == DIAOG_NOTARIA)
	{
		if(response)
		{
			switch(listitem)
			{
				case 0:
				{
					ManageSellNegocio(playerid);
					MensajesAyuda(playerid,"Selecciona el negocio que vas a vender");
				}
				case 1:
				{
					MensajesAyuda(playerid,"Selecciona el vehiculo que vas a vender");
					PLAYER_TEMP[playerid][pt_NOTARY_OPTION] = 0;
					ShowDialog(playerid, DIALOG_NOTARY_SELECT_VEHICLE);
				}
			}
		}
	}
	if(dialogid == DIALOG_SELLNEGOCIO)
	{
		if(response)
		{
			new i = 0, getidfromnotificacion[50];
	     	while(inputtext[i+4] != ' ')
	       	++i;
			strmid(getidfromnotificacion, inputtext, 3, 4+i, sizeof(getidfromnotificacion));
			SELLNEGOCIO[playerid] =  strval(getidfromnotificacion);

			new DBResult:Result,Query[256],costnegocio,namenegocio[60];
			format(Query, sizeof(Query), "SELECT COSTO,NOMBRE FROM `NEGOCIOS` WHERE `ID` = '%d' AND DUENO ='%d'",SELLNEGOCIO[playerid],ACCOUNT_INFO[playerid][ac_ID]);
			Result = db_query(_DB_, Query);
			if(db_num_rows(Result))
			{
				db_get_field_assoc(Result, "COSTO",Query, 30); costnegocio = strval(Query);
				db_get_field_assoc(Result, "NOMBRE",namenegocio, 60);
			}	
			db_free_result(Result);
			new caption[265];
			format(caption,sizeof(caption),"Notaria:\n\nTe compramos el negocio (ID: %d | Nombre: %s)\nPor un precio de: $ %s, ¿Aceptas?",SELLNEGOCIO[playerid],namenegocio,number_format_thousand(costnegocio/2));
			ShowPlayerDialog(playerid,DIALOG_SELLNEGOCIOCONFIRMAR,DIALOG_STYLE_MSGBOX," NOTARIA: ",caption,"Aceptar", "Cancelar");
		}
	}
	if(dialogid == DIALOG_SELLNEGOCIOCONFIRMAR)
	{
		if(response)
		{
			if(SELLNEGOCIO[playerid]==-1) return Kick(playerid);
			ResetearNegocio(playerid, SELLNEGOCIO[playerid]);
		}
	}
	//Notificaciones
	if(dialogid == DIALOG_NOTIFICACIONES)
	{
		if(listitem == PAGINA[playerid]) return PAGE[playerid] = 0;
		if(!response)
		{
			PAGE[playerid]+=20;
	 		ManagePlayerNotificaciones(playerid);
		}
		if(response)
		{
			PAGE[playerid]=0;
			new i = 0, getidfromnotificacion[50];
	     	while(inputtext[i+4] != ' ')
	       	++i;
			strmid(getidfromnotificacion, inputtext, 3, 4+i, sizeof(getidfromnotificacion));
			new VERNOTIFICACION =  strval(getidfromnotificacion);

			new DBResult:Result,Query[256],fechanoti[100],text[60];
			format(Query, sizeof(Query), "SELECT * FROM `PLAYERNOTIFICACIONES` WHERE `ID` = '%d' AND PLAYER ='%d'",VERNOTIFICACION,ACCOUNT_INFO[playerid][ac_ID]);
			Result = db_query(_DB_, Query);
			if(db_num_rows(Result))
			{
				db_get_field_assoc(Result, "NOTIFICACION",text, 60);
				db_get_field_assoc(Result, "FECHA",fechanoti, 100);
			}	
			db_free_result(Result);

			new caption[256];
			format(caption,sizeof(caption),"Fecha de la notificacion:\n%s\n\nNotificacion:\n%s",fechanoti,text);
			ShowPlayerDialog(playerid,DIALOG_NOTIFICACIONESATRAS,DIALOG_STYLE_MSGBOX," NOTIFICACION ",caption,"Aceptar", "Atras");
		}
	}
	if(dialogid == DIALOG_NOTIFICACIONESATRAS)
	{
		if(!response)
		{
			PAGE[playerid]=0;
			ManagePlayerNotificaciones(playerid);
		}
	}
	//Inventario
	if(dialogid == DIALOG_MANAGEINVETARY)
	{
 
		if(response)
		{
	     	new i = 0, manageinvtary[50];
	     	while(inputtext[i+4] != ' ')
	       	++i;
			strmid(manageinvtary, inputtext, 3, 4+i, sizeof(manageinvtary));
			IVENTARIOID[playerid] =  strval(manageinvtary);
			ShowPlayerDialog(playerid,CHANGE_COLOR_PRENDA,DIALOG_STYLE_LIST,"Opcion?","Editar posicion\nCambiar color (5 "SERVER_COIN")", "Aceptar","Cerrar");
			//

		}
	}
	if(dialogid == CHANGE_COLOR_PRENDA)
	{
		if(response)
		{
			switch(listitem)
			{
				case 0:
				{
					new DBResult:Result,Query[256];
					format(Query, sizeof(Query), "SELECT TIPO FROM `INVENTARIO` WHERE `ID` = '%d' AND PLAYER ='%d'",IVENTARIOID[playerid],ACCOUNT_INFO[playerid][ac_ID]);
					Result = db_query(Database, Query);
					if(db_num_rows(Result))
					{
						db_get_field_assoc(Result, "TIPO",Query, 30); Edit_Prenda[playerid] = strval(Query);
						new id=Edit_Prenda[playerid];
						SetPlayerAttachedObject(playerid,INVENTARIOPLAYER[ id ][INDEX_ID],INVENTARIOPLAYER[ id ][OBJETO],INVENTARIOPLAYER[ id ][BONE]);
						Editando_prenda[playerid]=true;
						OBJETO_EDITAR[playerid] = INVENTARIOPLAYER[ id ][OBJETO];
						OBJETO_BONE_ID[playerid] = INVENTARIOPLAYER[ id ][INDEX_ID];
						EditAttachedObject(playerid, INVENTARIOPLAYER[ id ][INDEX_ID]);
						SendClientMessage(playerid,-1,"Configurando..");
					}	
					db_free_result(Result);
				}
				case 1:
				{
					if(GetPlayerRp(playerid) < 5) return SendClientMessage(playerid,-1,"El costo para cambiar el color es de 5 "SERVER_COIN"");
					new DBResult:Result,Query[256];
					format(Query, sizeof(Query), "SELECT TIPO FROM `INVENTARIO` WHERE `ID` = '%d' AND PLAYER ='%d'",IVENTARIOID[playerid],ACCOUNT_INFO[playerid][ac_ID]);
					Result = db_query(Database, Query);
					if(db_num_rows(Result))
					{
						db_get_field_assoc(Result, "TIPO",Query, 30); Edit_Prenda[playerid] = strval(Query);
						OBJETO_EDITAR[playerid] = INVENTARIOPLAYER[ Edit_Prenda[playerid] ][OBJETO];
						new DBResult:Resulta;
						format(Query, sizeof(Query), "SELECT * FROM `OBJETOS_EQUIPADOS` WHERE `PLAYER` = '%d' AND `OBJETO` = '%d'", ACCOUNT_INFO[playerid][ac_ID],OBJETO_EDITAR[playerid]);
						Resulta = db_query(_DB_, Query);
						if(!db_num_rows(Resulta)) return SendClientMessage(playerid,-1,"Debes editar primero la posicion de la prenda");
					}	
					db_free_result(Result);
					SendClientMessage(playerid,-1,"Nota: A los objetos que contengan un color muy oscuro no se les notara el color, Ejemplo: NEGRO.");
					ShowPlayerDialog(playerid, DIALOG_ATTACH_COLOREDIT1, DIALOG_STYLE_LIST, "| Selecciona color |", DIALOG_CREATE_CREW_COLOR_String, "Continuar", "Atras");	
				}
			}
		}
	}
	if(dialogid == DIALOG_ATTACH_COLOREDIT1)
	{
		if(response)
		{
			if(listitem == 0) PlayerColor1[playerid] = 0;
            else PlayerColor1[playerid] = RGBAToARGB(RandomColors[listitem]);
            new Query[150];
            format(Query, sizeof(Query), "UPDATE `OBJETOS_EQUIPADOS` SET `COLOR` = '%d' WHERE `PLAYER` = '%d' AND `OBJETO` = '%d' ",\
			PlayerColor1[playerid],
			ACCOUNT_INFO[playerid][ac_ID],OBJETO_EDITAR[playerid]);
			db_query(_DB_, Query);
			GameTextForPlayer( playerid, "~n~~n~~n~~n~~w~Color ~y~~h~Actualizado.", 5000, 4 );
			GastarRp(playerid,5);
		}
	}
	//=================================
	if(dialogid== DIALOG_EMPRESA)
	{
		if(!response)
		{
			InNegocio[playerid]=-1;
		}
		if(response)
		{
			new id=InNegocio[playerid];
			if(InNegocio[playerid]==-1) return 1;
			if(NEGOCIO[id][Lock]==1) return MensajesAyuda(playerid,"El lugar fue cerrado porque hubo un robo, vuelve mas tarde");
			switch(listitem)
			{
				case 0:
				{
					MandaANegocio247(playerid, id);
				}
				case 1:
				{
					if(NEGOCIO[id][PrecioDinero] >= CHARACTER_INFO[playerid][ch_CASH]) return MensajesAyuda(playerid, "No tienes suficiente dinero para comprar el negocio"),InNegocio[playerid]=-1;
					if(GetPlayerNegocios(playerid) >= 1 && ACCOUNT_INFO[playerid][ac_SU]== 0) return MensajesAyuda(playerid, "Solo puedes tener 1 negocio, jugadores VIP 2 pueden tener hasta 3"),InNegocio[playerid]=-1;
					if(GetPlayerNegocios(playerid) >= 3 && ACCOUNT_INFO[playerid][ac_SU]>= 2) return MensajesAyuda(playerid, "No puedes tener mas negocios"),InNegocio[playerid]=-1;
					ComprarNegocio247(playerid,id);
				}
			}
		}
	}
	if(dialogid == DIALOG_NEGOCIO247MANAGE)
	{
		if(response)
		{
			switch(listitem)
			{
				case 0:
				{
					ShowPlayerDialog(playerid,DIALOG_CAMIARIVA247,DIALOG_STYLE_INPUT,"| IVA |","Ingresa el iva de los productos, ejemplo: 0.15 = (15 por ciento), recuerda poner un iva no tan execivo\no ningun jugador comprara en tu negocio, Valor del iva en productos ejemplo el 15 por ciento de 5000 es = 750\n lo cual era 5750, 750 sera tu ganancia. ", "Seguir", "Cerrar");
				}
				case 1: SendClientMessage(playerid,-1,"Para verder en negocio debes ir al gobierno del juego");
				case 2:
				{
					format(string2,sizeof(string2),"Caja fuerte: tienes: $%s",number_format_thousand( GetGananciaNegocio(InNegocio[playerid]) ));
					ShowPlayerDialog(playerid, DIALOG_PUTNEGOCIO, DIALOG_STYLE_LIST,string2,"Retirar dinero\nGuardar dinero",">>","X");
				}
			}
		}
	}
	if(dialogid == DIALOG_PUTNEGOCIO)
	{
		if(response)
		{
			switch(listitem)
			{
				case 0:
				{
					format(string2,sizeof(string2),"Caja fuerte: tienes: $%s",number_format_thousand( GetGananciaNegocio(InNegocio[playerid]) ));
					ShowPlayerDialog(playerid,DIALOG_RETIRAR_NEGOCIO,DIALOG_STYLE_INPUT,string2,"Ingresa la cantidad que deseas retirar",">>","X");
				}
			}
		}
	}
	if(dialogid == DIALOG_RETIRAR_NEGOCIO)
	{
		if(response)
		{
			if(!strlen(inputtext)) return ShowPlayerDialog(playerid,DIALOG_RETIRAR_NEGOCIO,DIALOG_STYLE_INPUT,"Retirar dinero de la caja fuerte","ERROR, SOLO SE PERMITEN NUMEROS","Seguir","X");
			if(!IsNumeric(inputtext))  return ShowPlayerDialog(playerid,DIALOG_RETIRAR_NEGOCIO,DIALOG_STYLE_INPUT,"Retirar dinero de la caja fuerte","ERROR, SOLO SE PERMITEN NUMEROS","Seguir","X");
			new nerak = strval(inputtext);

			new DBResult:Result,Query1[60],DB_Query[100],debugganacia;
			format(Query1,sizeof(Query1),"SELECT `GANANCIA` FROM NEGOCIOS WHERE ID = '%d'",InNegocio[playerid]);
			Result = db_query(_DB_,Query1);
			if(db_num_rows(Result))
			{

				db_get_field_assoc(Result,"GANANCIA",Query1,10);
				debugganacia = strval(Query1);
				if(nerak >= debugganacia) return SendClientMessage(playerid,-1,"No tienes esa cantidad en la caja fuerte del negocio");
				debugganacia = debugganacia - nerak;


				NEGOCIO[ InNegocio[playerid] ][Ganancia] = debugganacia;
				format(DB_Query,sizeof(DB_Query), "UPDATE `NEGOCIOS` SET `GANANCIA` = '%d' WHERE ID = '%d'",debugganacia,InNegocio[playerid]);
		    	db_query(_DB_, DB_Query);
			}
		    db_free_result(Result);
		    format(DB_Query,sizeof(DB_Query),"Has retirado: %s de la caja fuerte del negocio id: %d",number_format_thousand(nerak),InNegocio[playerid]);
		    MensajeNotificacion(playerid,DB_Query);
		    GivePlayerCash(playerid,nerak);
		}
	}
	if(dialogid == DIALOG_CAMIARIVA247)
	{
		if(response)
		{
			callcmd::changeiva(playerid,inputtext);
		}
	}
	//
	if(dialogid == DIALOG_PRODUCTOSHOTEL)
	{
		if(response)
		{
			if(GetCountInventary(playerid) >= Max_Slots_For_Invetary) return MensajesAyuda(playerid,"No se puede comprar mas productos, el inventario esta lleno");
			new id=InNegocio[playerid];
			if(ProductosHotel[listitem][Precio] > CHARACTER_INFO[playerid][ch_CASH]) return MensajesAyuda(playerid,"No tienes dinero para comprar ese producto");
			switch(ProductosHotel[listitem][ID])
			{
				case 30:
				{
					new GQuery[120];
				    format( GQuery, sizeof( GQuery ), "INSERT INTO INVENTARIO (PLAYER,TIPO,ESTADO,EQUIPADO) VALUES ('%d','30','5','0')",ACCOUNT_INFO[playerid][ac_ID]);
			   		db_query(Database, GQuery );
			   		MensajesAyuda(playerid,"Compraste una llave de HOTEL, fue agrego al inventario");
			   		new ganaciaproducto=GetGanancia(ProductosHotel[listitem][Precio],NEGOCIO[id][Iva]);
					UpdateProducto247(playerid,"NULL",id,ganaciaproducto,ProductosHotel[listitem][Precio]+ganaciaproducto);	
				}
			}
		}
	}
	//
	if(dialogid == DIALOG_PRODUCTOSFARMACIA)
	{
		if(response)
		{
			if(GetCountInventary(playerid) >= Max_Slots_For_Invetary) return MensajesAyuda(playerid,"No se puede comprar mas productos, el inventario esta lleno");
			new id=InNegocio[playerid];
			if(ProductosFarmacia[listitem][Precio] > CHARACTER_INFO[playerid][ch_CASH]) return MensajesAyuda(playerid,"No tienes dinero para comprar ese producto");
			switch(ProductosFarmacia[listitem][ID])
			{
				case 9:
				{
					new GQuery[120];
				    format( GQuery, sizeof( GQuery ), "INSERT INTO INVENTARIO (PLAYER,TIPO,ESTADO,EQUIPADO) VALUES ('%d','9','5','0')",ACCOUNT_INFO[playerid][ac_ID]);
			   		db_query(Database, GQuery );
			   		MensajesAyuda(playerid,"Compraste vendajes, fue agrego al inventario");
			   		new ganaciaproducto=GetGanancia(ProductosFarmacia[listitem][Precio],NEGOCIO[id][Iva]);
					UpdateProducto247(playerid,"NULL",id,ganaciaproducto,ProductosFarmacia[listitem][Precio]+ganaciaproducto);	
				}
				case 10:
				{
					new GQuery[120];
				    format( GQuery, sizeof( GQuery ), "INSERT INTO INVENTARIO (PLAYER,TIPO,ESTADO,EQUIPADO) VALUES ('%d','10','5','0')",ACCOUNT_INFO[playerid][ac_ID]);
			   		db_query(Database, GQuery );
			   		MensajesAyuda(playerid,"Compraste un Botiquin, fue agrego al inventario");
			   		new ganaciaproducto=GetGanancia(ProductosFarmacia[listitem][Precio],NEGOCIO[id][Iva]);
					UpdateProducto247(playerid,"NULL",id,ganaciaproducto,ProductosFarmacia[listitem][Precio]+ganaciaproducto);	
				}
			}
		}
	}
	if(dialogid == DIALOG_PRODUCTOSCLUCKIN)
	{
		if(response)
		{
			if(GetCountInventary(playerid) >= Max_Slots_For_Invetary) return MensajesAyuda(playerid,"No se puede comprar mas productos, el inventario esta lleno");
			new id=InNegocio[playerid];
			if(ProductosCluckin[listitem][Precio] > CHARACTER_INFO[playerid][ch_CASH]) return MensajesAyuda(playerid,"No tienes dinero para comprar ese producto");
			switch(ProductosCluckin[listitem][ID])
			{
				case 25:
				{
					new GQuery[120];
				    format( GQuery, sizeof( GQuery ), "INSERT INTO INVENTARIO (PLAYER,TIPO,ESTADO,EQUIPADO) VALUES ('%d','25','10','0')",ACCOUNT_INFO[playerid][ac_ID]);
			   		db_query(Database, GQuery );
			   		MensajesAyuda(playerid,"Compraste un Pernil de pollo, fue agrego al inventario");
			   		new ganaciaproducto=GetGanancia(ProductosCluckin[listitem][Precio],NEGOCIO[id][Iva]);
					UpdateProducto247(playerid,"POLLO",id,ganaciaproducto,ProductosCluckin[listitem][Precio]+ganaciaproducto);	
				}
				case 26:
				{
					new GQuery[120];
				    format( GQuery, sizeof( GQuery ), "INSERT INTO INVENTARIO (PLAYER,TIPO,ESTADO,EQUIPADO) VALUES ('%d','26','10','0')",ACCOUNT_INFO[playerid][ac_ID]);
			   		db_query(Database, GQuery );
			   		MensajesAyuda(playerid,"Compraste un trozo de carne 3/4s, fue agrego al inventario");
			   		new ganaciaproducto=GetGanancia(ProductosCluckin[listitem][Precio],NEGOCIO[id][Iva]);
					UpdateProducto247(playerid,"CARNE",id,ganaciaproducto,ProductosCluckin[listitem][Precio]+ganaciaproducto);	
				}
			}
		}
	}
	if(dialogid == DIALOG_PRODUCTOSPIZZA)
	{
		if(response)
		{
			if(GetCountInventary(playerid) >= Max_Slots_For_Invetary) return MensajesAyuda(playerid,"No se puede comprar mas productos, el inventario esta lleno");
			new id=InNegocio[playerid];
			if(ProductosPizza[listitem][Precio] > CHARACTER_INFO[playerid][ch_CASH]) return MensajesAyuda(playerid,"No tienes dinero para comprar ese producto");
			switch(ProductosPizza[listitem][ID])
			{
				case 23:
				{		
					new GQuery[120];
				    format( GQuery, sizeof( GQuery ), "INSERT INTO INVENTARIO (PLAYER,TIPO,ESTADO,EQUIPADO) VALUES ('%d','23','5','0')",ACCOUNT_INFO[playerid][ac_ID]);
			   		db_query(Database, GQuery );
			   		MensajesAyuda(playerid,"Compraste una Pizzaa sencilla, fue agrega al inventario");
			   		new ganaciaproducto=GetGanancia(ProductosPizza[listitem][Precio],NEGOCIO[id][Iva]);
					UpdateProducto247(playerid,"PIZZA1",id,ganaciaproducto,ProductosPizza[listitem][Precio]+ganaciaproducto);	
				}
				case 24:
				{		
					new GQuery[120];
				    format( GQuery, sizeof( GQuery ), "INSERT INTO INVENTARIO (PLAYER,TIPO,ESTADO,EQUIPADO) VALUES ('%d','24','10','0')",ACCOUNT_INFO[playerid][ac_ID]);
			   		db_query(Database, GQuery );
			   		MensajesAyuda(playerid,"Compraste una pizza Hawuaiana, fue agrega al inventario");
			   		new ganaciaproducto=GetGanancia(ProductosPizza[listitem][Precio],NEGOCIO[id][Iva]);
					UpdateProducto247(playerid,"PIZZA2",id,ganaciaproducto,ProductosPizza[listitem][Precio]+ganaciaproducto);	
				}
			}
		}
	}
	if(dialogid == DIALOG_PRODUCTOSBURGUERSHOT)
	{
		if(response)
		{
			if(GetCountInventary(playerid) >= Max_Slots_For_Invetary) return MensajesAyuda(playerid,"No se puede comprar mas productos, el inventario esta lleno");
			new id=InNegocio[playerid];
			if(ProductosBurgerShot[listitem][Precio] > CHARACTER_INFO[playerid][ch_CASH]) return MensajesAyuda(playerid,"No tienes dinero para comprar ese producto");
			 
			switch(ProductosBurgerShot[listitem][ID])
			{
				case 20:
				{		
					new GQuery[120];
				    format( GQuery, sizeof( GQuery ), "INSERT INTO INVENTARIO (PLAYER,TIPO,ESTADO,EQUIPADO) VALUES ('%d','20','5','0')",ACCOUNT_INFO[playerid][ac_ID]);
			   		db_query(Database, GQuery );
			   		MensajesAyuda(playerid,"Compraste una Hamburguesa sencilla, fue agrega al inventario");
			   		new ganaciaproducto=GetGanancia(ProductosBurgerShot[listitem][Precio],NEGOCIO[id][Iva]);
					UpdateProducto247(playerid,"HAMBURGESA1",id,ganaciaproducto,ProductosBurgerShot[listitem][Precio]+ganaciaproducto);	
				}
				case 21:
				{		
					new GQuery[120];
				    format( GQuery, sizeof( GQuery ), "INSERT INTO INVENTARIO (PLAYER,TIPO,ESTADO,EQUIPADO) VALUES ('%d','21','7','0')",ACCOUNT_INFO[playerid][ac_ID]);
			   		db_query(Database, GQuery );
			   		MensajesAyuda(playerid,"Compraste una Hamburguesa queso doble, fue agrega al inventario");
			   		new ganaciaproducto=GetGanancia(ProductosBurgerShot[listitem][Precio],NEGOCIO[id][Iva]);
					UpdateProducto247(playerid,"HAMBURGESA2",id,ganaciaproducto,ProductosBurgerShot[listitem][Precio]+ganaciaproducto);	
				}
				case 22:
				{		
					new GQuery[120];
				    format( GQuery, sizeof( GQuery ), "INSERT INTO INVENTARIO (PLAYER,TIPO,ESTADO,EQUIPADO) VALUES ('%d','22','10','0')",ACCOUNT_INFO[playerid][ac_ID]);
			   		db_query(Database, GQuery );
			   		MensajesAyuda(playerid,"Compraste una Hamburguesa carne doble, fue agrega al inventario");
			   		new ganaciaproducto=GetGanancia(ProductosBurgerShot[listitem][Precio],NEGOCIO[id][Iva]);
					UpdateProducto247(playerid,"HAMBURGESA3",id,ganaciaproducto,ProductosBurgerShot[listitem][Precio]+ganaciaproducto);	
				}
			}
		}
	}
	if(dialogid == DIALOG_PRODUCTOS)
	{
		if(InNegocio[playerid]==-1) return 1;
		if(response)
		{
			new id=InNegocio[playerid];
			if(Productos24_7[listitem][Precio] > CHARACTER_INFO[playerid][ch_CASH]) return MensajesAyuda(playerid,"No tienes dinero para comprar ese producto");
			

			switch(listitem)
			{
				case 0:
				{
					//
					if(PLAYER_PHONE[playerid][player_phone_VALID])
					{
						SendClientMessageEx(playerid, -1, "{00FF80}Ya tienes un teléfono.");
						PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
						return 1;
					}
							
					new DBResult:Result_pnumber, phone_number;
					Result_pnumber = db_query(Database, "SELECT ABS(RANDOM() % 10000000) AS `NUM` WHERE `NUM` NOT IN (SELECT `PHONE_NUMBER` FROM `PHONE`) LIMIT 1;");
					if(db_num_rows(Result_pnumber)) phone_number = db_get_field_int(Result_pnumber, 0);
					db_free_result(Result_pnumber);
							
					if(phone_number)
					{
						PLAYER_PHONE[playerid][player_phone_VALID] = true;
						PLAYER_PHONE[playerid][player_phone_NUMBER] = phone_number;
						PLAYER_PHONE[playerid][player_phone_STATE] = PHONE_STATE_ON;
						PLAYER_PHONE[playerid][player_phone_VISIBLE_NUMBER] = true;
						RegisterNewPlayerPhone(playerid);
						SendClientMessageEx(playerid, -1, "Has comprado un {86e03e}Telefono {FFFFFF}por {86e03e}%d$, {FFFFFF}tu número es {c5e03e}%d.",Productos24_7[listitem][Precio], PLAYER_PHONE[playerid][player_phone_NUMBER]);
						PlayerPlaySoundEx(playerid, 1058, 0.0, 0.0, 0.0);
					}
					else
					{
						PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, -1, "{00FF80}No se ha podido encontrar un número de teléfono libre.");
					}
					new ganaciaproducto=GetGanancia(Productos24_7[listitem][Precio],NEGOCIO[id][Iva]);
					UpdateProducto247(playerid,"TELEFONOS",id,ganaciaproducto,Productos24_7[listitem][Precio]+ganaciaproducto);	
					//
				}
				//
				case 1:
				{
					if(PLAYER_OBJECT[playerid][po_GPS])
					{
						SendClientMessageEx(playerid, -1, "{00FF80}Ya tienes un GPS.");
						PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
						return 1;
					}
					PLAYER_OBJECT[playerid][po_GPS] = true;
					SendClientMessageEx(playerid, -1, "Has comprado un {86e03e}GPS {FFFFFF}por {86e03e}%d$, {FFFFFF}usa {6a98e2}/GPS {FFFFFF}para usarlo.",Productos24_7[listitem][Precio]);
					PlayerPlaySoundEx(playerid, 1058, 0.0, 0.0, 0.0);

					new ganaciaproducto=GetGanancia(Productos24_7[listitem][Precio],NEGOCIO[id][Iva]);
					UpdateProducto247(playerid,"GPS",id,ganaciaproducto,Productos24_7[listitem][Precio]+ganaciaproducto);	
				}
				case 2:
				{
					if(GetCountInventary(playerid) >= Max_Slots_For_Invetary) return MensajesAyuda(playerid,"No se puede comprar mas productos, el inventario esta lleno");
					new GQuery[120];
				    format( GQuery, sizeof( GQuery ), "INSERT INTO INVENTARIO (PLAYER,TIPO,ESTADO,EQUIPADO) VALUES ('%d','2','5','0')",ACCOUNT_INFO[playerid][ac_ID]);
			   		db_query(Database, GQuery );
			   		MensajesAyuda(playerid,"Compraste una botella de agua, fue agrega al inventario");
			   		new ganaciaproducto=GetGanancia(Productos24_7[listitem][Precio],NEGOCIO[id][Iva]);
					UpdateProducto247(playerid,"BOTELLAAGUA",id,ganaciaproducto,Productos24_7[listitem][Precio]+ganaciaproducto);	
				}
				case 3:
				{
					if(GetCountInventary(playerid) >= Max_Slots_For_Invetary) return MensajesAyuda(playerid,"No se puede comprar mas productos, el inventario esta lleno");
					new GQuery[120];
				    format( GQuery, sizeof( GQuery ), "INSERT INTO INVENTARIO (PLAYER,TIPO,ESTADO,EQUIPADO) VALUES ('%d','3','5','0')",ACCOUNT_INFO[playerid][ac_ID]);
			   		db_query(Database, GQuery );
			   		MensajesAyuda(playerid,"Compraste una botella de leche, fue agrega al inventario");
			   		new ganaciaproducto=GetGanancia(Productos24_7[listitem][Precio],NEGOCIO[id][Iva]);
					UpdateProducto247(playerid,"BOTELLALECHE",id,ganaciaproducto,Productos24_7[listitem][Precio]+ganaciaproducto);	
				}
				case 4:
				{
					if(GetCountInventary(playerid) >= Max_Slots_For_Invetary) return MensajesAyuda(playerid,"No se puede comprar mas productos, el inventario esta lleno");
					new GQuery[120];
				    format( GQuery, sizeof( GQuery ), "INSERT INTO INVENTARIO (PLAYER,TIPO,ESTADO,EQUIPADO) VALUES ('%d','4','5','0')",ACCOUNT_INFO[playerid][ac_ID]);
			   		db_query(Database, GQuery );
			   		MensajesAyuda(playerid,"Compraste un jugo de naranja, fue agrego al inventario");
			   		new ganaciaproducto=GetGanancia(Productos24_7[listitem][Precio],NEGOCIO[id][Iva]);
					UpdateProducto247(playerid,"JUGONARANJA",id,ganaciaproducto,Productos24_7[listitem][Precio]+ganaciaproducto);	
				}
				case 5:
				{
					if(GetCountInventary(playerid) >= Max_Slots_For_Invetary) return MensajesAyuda(playerid,"No se puede comprar mas productos, el inventario esta lleno");
					new GQuery[120];
				    format( GQuery, sizeof( GQuery ), "INSERT INTO INVENTARIO (PLAYER,TIPO,ESTADO,EQUIPADO) VALUES ('%d','5','5','0')",ACCOUNT_INFO[playerid][ac_ID]);
			   		db_query(Database, GQuery );
			   		MensajesAyuda(playerid,"Compraste un jugo de naranja, fue agrego al inventario");
			   		new ganaciaproducto=GetGanancia(Productos24_7[listitem][Precio],NEGOCIO[id][Iva]);
					UpdateProducto247(playerid,"JUGOMANZANA",id,ganaciaproducto,Productos24_7[listitem][Precio]+ganaciaproducto);	
				}
				case 6:
				{
					if(GetCountInventary(playerid) >= Max_Slots_For_Invetary) return MensajesAyuda(playerid,"No se puede comprar mas productos, el inventario esta lleno");
					new GQuery[120];
				    format( GQuery, sizeof( GQuery ), "INSERT INTO INVENTARIO (PLAYER,TIPO,ESTADO,EQUIPADO) VALUES ('%d','6','5','0')",ACCOUNT_INFO[playerid][ac_ID]);
			   		db_query(Database, GQuery );
			   		MensajesAyuda(playerid,"Compraste un jugo de naranja, fue agrego al inventario");
			   		new ganaciaproducto=GetGanancia(Productos24_7[listitem][Precio],NEGOCIO[id][Iva]);
					UpdateProducto247(playerid,"JUGOLATA",id,ganaciaproducto,Productos24_7[listitem][Precio]+ganaciaproducto);	
				}
				case 7:
				{
					if(GetCountInventary(playerid) >= Max_Slots_For_Invetary) return MensajesAyuda(playerid,"No se puede comprar mas productos, el inventario esta lleno");
					new GQuery[120];
				    format( GQuery, sizeof( GQuery ), "INSERT INTO INVENTARIO (PLAYER,TIPO,ESTADO,EQUIPADO) VALUES ('%d','7','10','0')",ACCOUNT_INFO[playerid][ac_ID]);
			   		db_query(Database, GQuery );
			   		MensajesAyuda(playerid,"Compraste un pan, fue agrego al inventario");
			   		new ganaciaproducto=GetGanancia(Productos24_7[listitem][Precio],NEGOCIO[id][Iva]);
					UpdateProducto247(playerid,"PAN",id,ganaciaproducto,Productos24_7[listitem][Precio]+ganaciaproducto);	
				}
				case 8:
				{
					if(CHARACTER_INFO[playerid][ch_CASH] >= Supermarket_Product_List[listitem][product_PRICE])
					{
						if(PLAYER_OBJECT[playerid][po_MP3])
						{
							SendClientMessageEx(playerid, -1, "{00FF80}Ya tienes un MP3.");
							PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
							return 1;
						}
						
						GivePlayerCash(playerid, -Supermarket_Product_List[listitem][product_PRICE]);
						
						PLAYER_OBJECT[playerid][po_MP3] = true;
						SendClientMessageEx(playerid, -1, "Has comprado un {86e03e}%s {FFFFFF}por {86e03e}%d$, {FFFFFF}usa {6a98e2}/MP3 {FFFFFF}para usarlo.", Supermarket_Product_List[listitem][product_NAME], Supermarket_Product_List[listitem][product_PRICE]);
						PlayerPlaySoundEx(playerid, 1058, 0.0, 0.0, 0.0);
					}
					else
					{
						PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
						SendClientMessageEx(playerid, -1, "{E6F8E0}No tienes dinero suficiente, te faltan {FF6633}%s$ {E6F8E0}para poder comprar este producto.", number_format_thousand(Supermarket_Product_List[listitem][product_PRICE] - CHARACTER_INFO[playerid][ch_CASH]));
					}
				}
			}
		}
	}
	//Fin dialogid
	if(dialogid == DIIALOG_LOCALIZARPROPIEDAD)
	{
		if(response)
		{
			new i = 0, streamidfromdb[50];
	     	while(inputtext[i+4] != ' ')
	       	++i;
			strmid(streamidfromdb, inputtext, 3, 4+i, sizeof(streamidfromdb));
			new IDE =  strval(streamidfromdb);

			new Query[100],DBResult:Result,Float:pos[3];
			format(Query, sizeof(Query), "SELECT X,Y,Z FROM `CASASVIP` WHERE `ID` = '%d';",IDE);
			Result = db_query(_DB_, Query);
			if(db_num_rows(Result))
			{
				pos[0] = db_get_field_assoc_float(Result, "X");
				pos[1] = db_get_field_assoc_float(Result, "Y");
				pos[2] = db_get_field_assoc_float(Result, "Z");
				SetPlayer_GPS_Checkpoint(playerid,pos[0],pos[1],pos[2], 0, 0);
			}
			else
			{
				SendClientMessage(playerid,-1,"Ocurrio un error interno");
			}
		}
	}
	if(dialogid == DIIALOG_LOCALIZAR_FARMACIA)
	{
		if(response)
		{
			new i = 0, streamidfromdb[50];
	     	while(inputtext[i+4] != ' ')
	       	++i;
			strmid(streamidfromdb, inputtext, 3, 4+i, sizeof(streamidfromdb));
			new IDE =  strval(streamidfromdb);

			new Query[100],DBResult:Result,Float:pos[3];
			format(Query, sizeof(Query), "SELECT POSX,POSY,POSZ FROM `NEGOCIOS` WHERE `ID` = '%d';",IDE);
			Result = db_query(_DB_, Query);
			if(db_num_rows(Result))
			{
				pos[0] = db_get_field_assoc_float(Result, "POSX");
				pos[1] = db_get_field_assoc_float(Result, "POSY");
				pos[2] = db_get_field_assoc_float(Result, "POSZ");
				SetPlayer_GPS_Checkpoint(playerid,pos[0],pos[1],pos[2], 0, 0);
			}
			else
			{
				SendClientMessage(playerid,-1,"Ocurrio un error interno");
			}
		}
	}
	if(dialogid == DIALOG_LOCALIZARNEGOCIO)
	{
		if(response)
		{
			new i = 0, streamidfromdb[50];
	     	while(inputtext[i+4] != ' ')
	       	++i;
			strmid(streamidfromdb, inputtext, 3, 4+i, sizeof(streamidfromdb));
			new IDE =  strval(streamidfromdb);

			new Query[100],DBResult:Result,Float:pos[3];
			format(Query, sizeof(Query), "SELECT POSX,POSY,POSZ FROM `NEGOCIOS` WHERE `ID` = '%d';",IDE);
			Result = db_query(_DB_, Query);
			if(db_num_rows(Result))
			{
				pos[0] = db_get_field_assoc_float(Result, "POSX");
				pos[1] = db_get_field_assoc_float(Result, "POSY");
				pos[2] = db_get_field_assoc_float(Result, "POSZ");
				SetPlayer_GPS_Checkpoint(playerid,pos[0],pos[1],pos[2], 0, 0);
			}
			else
			{
				SendClientMessage(playerid,-1,"Ocurrio un error interno");
			}
		}
	}
	//====================================
	if(PLAYER_TEMP[playerid][pt_DIALOG_RESPONDED]) return 1;
	PLAYER_TEMP[playerid][pt_DIALOG_RESPONDED] = true;
 

	if(!isnull(inputtext))
	{
		for(new i = 0; i != strlen(inputtext); i ++)
		{
			if(inputtext[i] == '%') inputtext[i] = '#';
		}
	}
	
	switch(dialogid)
	{
		case DIALOG_INFO: return 1;
		case DIALOG_REGISTER:
		{
			if(response)
			{
				if(strlen(inputtext) < MIN_PASS_LENGTH || strlen(inputtext) > MAX_PASS_LENGTH) return ShowDialog(playerid, dialogid);
				format(ACCOUNT_INFO[playerid][ac_IP], 16, "%s", PLAYER_TEMP[playerid][pt_IP]);
				format(ACCOUNT_INFO[playerid][ac_NAME], 24, "%s", PLAYER_TEMP[playerid][pt_NAME]);
				format(PLAYER_TEMP[playerid][pt_PASSWD], 24, "%s", inputtext);
				
				new salt[16];
				getRandomSalt(salt);
				format(ACCOUNT_INFO[playerid][ac_SALT], 16, "%s", salt);
				SHA256_PassHash(inputtext, ACCOUNT_INFO[playerid][ac_SALT], ACCOUNT_INFO[playerid][ac_PASS], 64 + 1);
				
				ACCOUNT_INFO[playerid][ac_LEVEL] = 1;
				ACCOUNT_INFO[playerid][ac_REP] = 1;
				ACCOUNT_INFO[playerid][ac_TIME_FOR_REP] = TIME_FOR_REP;
				
				ShowDialog(playerid, DIALOG_REGISTER_EMAIL);
			}
			else Kick(playerid);
			return 1;
		}
		case DIALOG_REGISTER_EMAIL:
		{
			if(!response) return Kick(playerid);
			if(strlen(inputtext) < 5) return ShowDialog(playerid, dialogid);
			if(strfind(inputtext, "@", true) == -1) return ShowDialog(playerid, dialogid);
			if(strfind(inputtext, ".", true) == -1) return ShowDialog(playerid, dialogid);
			
			new DBResult:Result, bool:email_exists, DB_Query[80];
			format(DB_Query, sizeof(DB_Query), "SELECT * FROM `CUENTA` WHERE `EMAIL` = '%q'", inputtext);
			Result = db_query(Database, DB_Query);
			if(db_num_rows(Result)) email_exists = true;
			db_free_result(Result);
			
			if(email_exists)
			{
				SendClientMessage(playerid, 0xA9F5A9AA, "Este correco electrónico ya está en uso, use otro distinto.");
				ShowDialog(playerid, dialogid);
				return 1;
			}
			format(ACCOUNT_INFO[playerid][ac_EMAIL], 32, "%s", inputtext);
			ShowPlayerDialog(playerid,DIALOG_SELECTGENERO,DIALOG_STYLE_MSGBOX,"| GENERO |","Continua con el registro\n\nSelecciona tu genero","Hombre","Mujer");
			/*ApplyActorAnimation(PLAYER_TEMP[playerid][pt_REGISTER_ACTOR], "INT_SHOP", "shop_loop", 4.1, 1, 1, 1, 0, 0);
		
		
			PLAYER_TEMP[playerid][pt_READING_GUIDE] = true;
			PLAYER_TEMP[playerid][pt_GUIDE_STEP] = 0;
			SendClientMessage(playerid, 0xCCCCCCCC, "Lee detenidamente la guía, para pasar de concepto haz 'click' en siguiente.");
			
			SetPlayerRulesTextDraw(playerid, Server_Rules[ PLAYER_TEMP[playerid][pt_GUIDE_STEP] ][Rule_Title], Server_Rules[ PLAYER_TEMP[playerid][pt_GUIDE_STEP] ][Rule_Info], Server_Rules[ PLAYER_TEMP[playerid][pt_GUIDE_STEP] ][Rule_Pages], PLAYER_TEMP[playerid][pt_GUIDE_STEP] + 1, sizeof(Server_Rules) );
			SelectTextDrawEx(playerid, 0xe8d08fFF);*/
			return 1;
		}
		case DIALOG_LOGIN:
		{
			if(!response) return Kick(playerid);
			if(!strlen(inputtext)) return ShowDialog(playerid, dialogid);
			
			new password[64 + 1];
			SHA256_PassHash(inputtext, ACCOUNT_INFO[playerid][ac_SALT], password, sizeof password);
		
			if(!strcmp(password, ACCOUNT_INFO[playerid][ac_PASS], false))
			{

				//PLAYER_TEMP[playerid][pt_TIMERS][20] = SetTimerEx("UpdatePlayerEx",2000,true,"d",playerid);
				//PLAYER_TEMP[playerid][pt_TIMERS][25] = SetTimerEx("SavePlayerData",360000,true,"d",playerid);

				LoadCharacterData(playerid);
				LoadPlayerBankAccountData(playerid);
				LoadPlayerToysData(playerid);
				LoadPlayerPocketData(playerid);
				LoadPlayerPhoneData(playerid);
				LoadPlayerGPSData(playerid);
				LoadPlayerObjectsData(playerid);
				LoadPlayerVehicles(playerid);
				LoadPlayerSkills(playerid);
				LoadPlayerWorks(playerid);
				LoadPlayerMisc(playerid);
				//LoadPlayerWeaponsData(playerid);
				LoadPlayerCrewInfo(playerid);
				LoadPlayerWorks_Nivel(playerid);
				LoadPlayerSkinsWeapons(playerid);
				LoadPlayerPescados(playerid);
				SetPlayerScore(playerid, ACCOUNT_INFO[playerid][ac_LEVEL]);
				PLAYER_TEMP[playerid][pt_DOUBT_CHANNEL_TIME] = gettime();
				ResetPlayerWeapons(playerid);
				ResetPlayerMoney(playerid);
				GivePlayerMoney(playerid, CHARACTER_INFO[playerid][ch_CASH]);
				SetPlayerFightingStyle(playerid, CHARACTER_INFO[playerid][ch_FIGHT_STYLE]);
				SetPlayerHealthEx(playerid, CHARACTER_INFO[playerid][ch_HEALTH]);
				SetPlayerArmourEx(playerid, CHARACTER_INFO[playerid][ch_ARMOUR]);
				SetPlayerVirtualWorld(playerid, 0);
				SetPlayerNormalColor(playerid);
				StopAudioStreamForPlayer(playerid);
				SetSpawnInfo(playerid, NO_TEAM, CHARACTER_INFO[playerid][ch_SKIN], CHARACTER_INFO[playerid][ch_POS][0], CHARACTER_INFO[playerid][ch_POS][1], CHARACTER_INFO[playerid][ch_POS][2], CHARACTER_INFO[playerid][ch_ANGLE], 0, 0, 0, 0, 0, 0);
				SetPlayerInterior(playerid, CHARACTER_INFO[playerid][ch_INTERIOR]);
				
				PLAYER_TEMP[playerid][pt_BAD_LOGIN_ATTEMP] = 0;
				TogglePlayerSpectatingEx(playerid, false);
				TogglePlayerControllableEx(playerid, false);
				SendClientMessageEx(playerid, -1, "Bienvenido {58ACFA}%s, {FFFFFF}te vimos por última vez el {58ACFA}%s.", PLAYER_TEMP[playerid][pt_RP_NAME], ACCOUNT_INFO[playerid][ac_LAST_CONNECTION]);
				SendClientMessage(playerid,-1,"Usa la tecla {58ACFA}'T'{FFFFFF} para escribir o ejecutar comandos, usa {58ACFA}/Duda {FFFFFF}si tienes alguna duda acerca del servidor");
			}
			else // Error
			{
				PLAYER_TEMP[playerid][pt_BAD_LOGIN_ATTEMP] ++;
				if(PLAYER_TEMP[playerid][pt_BAD_LOGIN_ATTEMP] > MAX_BAD_LOGIN_ATTEMPS) return Kick(playerid);
				ShowDialog(playerid, dialogid);
			}
			return 1;
		}
		case DIALOG_FOOD_PIZZA:
		{
			if(response)
			{
				if(CHARACTER_INFO[playerid][ch_CASH] >= PIZZA_FOOD[listitem][food_PRICE])
				{
					if(CHARACTER_INFO[playerid][ch_HUNGRY] >= 99.0 && CHARACTER_INFO[playerid][ch_THIRST] >= 99.0) return SendClientMessage(playerid, -1, "{E6F8E0}¿Es que quieres reventar?");
					
					GivePlayerCash(playerid, -PIZZA_FOOD[listitem][food_PRICE]);
					Add_Hungry_Thirst(playerid, PIZZA_FOOD[listitem][food_HUNGRY], PIZZA_FOOD[listitem][food_THIRST]);
					
					PlayerPlaySoundEx(playerid, 1058, 0.0, 0.0, 0.0);
					
					new action[64];
					format(action, sizeof action, "compra %s y lo consume.", PIZZA_FOOD[listitem][food_NAME]);
					Auto_SendPlayerAction(playerid, action);
					
					ApplyAnimation(playerid, "FOOD", "EAT_Pizza", 0, 0, 0, 0, 0, 0);
					ApplyAnimation(playerid, "FOOD", "EAT_Pizza", 4.1, false, true, true, false, 1000);
					
					ShowDialog(playerid, dialogid);
				}
				else
				{
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					SendClientMessageEx(playerid, -1, "{E6F8E0}No tienes dinero suficiente, te faltan {FF6633}%d$ {E6F8E0}para poder comprarlo.", PIZZA_FOOD[listitem][food_PRICE] - CHARACTER_INFO[playerid][ch_CASH]);
				}
			}
			else SendClientMessageEx(playerid, -1, "Gracias por su visita a {6a98e2}%s {FFFFFF}vuelva pronto.", ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_NAME]);
			return 1;
		}
		case DIALOG_FOOD_BURGER:
		{
			if(response)
			{
				if(CHARACTER_INFO[playerid][ch_CASH] >= BURGER_SHOT_FOOD[listitem][food_PRICE])
				{
					if(CHARACTER_INFO[playerid][ch_HUNGRY] >= 99.0 && CHARACTER_INFO[playerid][ch_THIRST] >= 99.0) return SendClientMessage(playerid, -1, "{E6F8E0}¿Es que quieres reventar?");
					
					GivePlayerCash(playerid, -BURGER_SHOT_FOOD[listitem][food_PRICE]);
					Add_Hungry_Thirst(playerid, BURGER_SHOT_FOOD[listitem][food_HUNGRY], BURGER_SHOT_FOOD[listitem][food_THIRST]);
					
					PlayerPlaySoundEx(playerid, 1058, 0.0, 0.0, 0.0);
					
					new action[64];
					format(action, sizeof action, "compra %s y lo consume.", BURGER_SHOT_FOOD[listitem][food_NAME]);
					Auto_SendPlayerAction(playerid, action);
					
					ApplyAnimation(playerid, "FOOD", "EAT_Pizza", 0, 0, 0, 0, 0, 0);
					ApplyAnimation(playerid, "FOOD", "EAT_Pizza", 4.1, false, true, true, false, 1000);
					
					ShowDialog(playerid, dialogid);
				}
				else
				{
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					SendClientMessageEx(playerid, -1, "{E6F8E0}No tienes dinero suficiente, te faltan {FF6633}%d$ {E6F8E0}para poder comprarlo.", BURGER_SHOT_FOOD[listitem][food_PRICE] - CHARACTER_INFO[playerid][ch_CASH]);
				}
			}
			else SendClientMessageEx(playerid, -1, "Gracias por su visita a {6a98e2}%s {FFFFFF}vuelva pronto.", ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_NAME]);
			return 1;
		}
		case DIALOG_FOOD_CLUCKIN:
		{
			if(response)
			{
				if(CHARACTER_INFO[playerid][ch_CASH] >= CLUCKIN_BELL_FOOD[listitem][food_PRICE])
				{
					if(CHARACTER_INFO[playerid][ch_HUNGRY] >= 99.0 && CHARACTER_INFO[playerid][ch_THIRST] >= 99.0) return SendClientMessage(playerid, -1, "{E6F8E0}¿Es que quieres reventar?");
					
					GivePlayerCash(playerid, -CLUCKIN_BELL_FOOD[listitem][food_PRICE]);
					Add_Hungry_Thirst(playerid, CLUCKIN_BELL_FOOD[listitem][food_HUNGRY], CLUCKIN_BELL_FOOD[listitem][food_THIRST]);
					
					PlayerPlaySoundEx(playerid, 1058, 0.0, 0.0, 0.0);
					
					new action[64];
					format(action, sizeof action, "compra %s y lo consume.", CLUCKIN_BELL_FOOD[listitem][food_NAME]);
					Auto_SendPlayerAction(playerid, action);
					
					ApplyAnimation(playerid, "FOOD", "EAT_Pizza", 0, 0, 0, 0, 0, 0);
					ApplyAnimation(playerid, "FOOD", "EAT_Pizza", 4.1, false, true, true, false, 1000);
					
					ShowDialog(playerid, dialogid);
				}
				else
				{
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					SendClientMessageEx(playerid, -1, "{E6F8E0}No tienes dinero suficiente, te faltan {FF6633}%d$ {E6F8E0}para poder comprarlo.", CLUCKIN_BELL_FOOD[listitem][food_PRICE] - CHARACTER_INFO[playerid][ch_CASH]);
				}
			}
			else SendClientMessageEx(playerid, -1, "Gracias por su visita a {6a98e2}%s {FFFFFF}vuelva pronto.", ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_NAME]);
			return 1;
		}
		case DIALOG_PLAYER_TOYS:
		{
			if(response)
			{	
				if(listitem == MAX_PLAYER_ATTACHED_OBJECTS) return ShowDialog(playerid, DIALOG_PLAYER_TOY_DELETE_ALL);
				if(!ACCOUNT_INFO[playerid][ac_SU] && listitem >= 3)
				{
					SendClientMessageEx(playerid, -1, "{E6F8E0}¡Los jugadores {b1fc6f}VIP 1{E6F8E0}pueden tener hasta 5 accesorios y Vip2 10! Usa {fffb49}/ayuda {E6F8E0}si quieres ser {b1fc6f}VIP.", MAX_PLAYER_ATTACHED_OBJECTS);
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if(ACCOUNT_INFO[playerid][ac_SU]==1 && listitem >= 5)
				{
					SendClientMessageEx(playerid, -1, "{E6F8E0}Solo puedes tener como maximo 5 accesorios compra Vip 2 para poder tener hasta 10!.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if(ACCOUNT_INFO[playerid][ac_SU]>=2 && listitem >= 10)
				{
					SendClientMessageEx(playerid, -1, "{E6F8E0}¡Ya alcansaste la cantidad maxima de objetos!.", MAX_PLAYER_ATTACHED_OBJECTS);
					ShowDialog(playerid, dialogid);
					return 1;
				}
				PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] = listitem;
				ShowDialog(playerid, DIALOG_PLAYER_TOY_MENU);
			}
			return 1;
		}
		case DIALOG_PLAYER_TOY_MENU:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0: //colocar / quitar
					{
						if(PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ATTACHED]) // tiene accesorio puesto
						{
							PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ATTACHED] = false;
							RemovePlayerAttachedObject(playerid, PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT]);
							
							new action[45]; format(action, sizeof action, "se quita su \"%s\"", PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_NAME]);
							Auto_SendPlayerAction(playerid, action);
						}
						else // No lo tiene puesto
						{
							if(PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_BONE] == -1) return ShowDialog(playerid, DIALOG_PLAYER_TOY_MENU);
							
							PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ATTACHED] = true;
							RemovePlayerAttachedObject(playerid, PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT]);
							
							SetPlayerAttachedObject
							(
								playerid, 
								PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT],
								PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_MODELID],
								PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_BONE],
								PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_OFFSET_X],
								PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_OFFSET_Y],
								PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_OFFSET_Z],
								PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ROT_X],
								PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ROT_Y],
								PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ROT_Z],
								PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_SCALE_X],
								PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_SCALE_Y],
								PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_SCALE_Z],
								PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_COLOR_1],
								PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_COLOR_2]
							);
							
							new action[45]; format(action, sizeof action, "se coloca su \"%s\"", PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_NAME]);
							Auto_SendPlayerAction(playerid, action);
						}
					}
					case 1: ShowDialog(playerid, DIALOG_PLAYER_TOY_EDIT_NAME);
					case 2: //Configurar
					{
						if(PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_BONE] == -1)
						{
							ShowDialog(playerid, DIALOG_PLAYER_TOY_SELECT_BONE);
							return 1;
						}
						ShowDialog(playerid, DIALOG_PLAYER_TOY_EDIT_BONE);
					}
					case 3: ShowDialog(playerid, DIALOG_PLAYER_TOY_COLOR_1);
					case 4: ShowDialog(playerid, DIALOG_PLAYER_TOY_COLOR_2);
					case 5: ShowDialog(playerid, DIALOG_PLAYER_TOY_CONFIRMDELETE);
				}
			}
			else ShowDialog(playerid, DIALOG_PLAYER_TOYS);
			return 1;
		}
		case DIALOG_PLAYER_TOY_EDIT_NAME:
		{
			if(response)
			{
				if(!strlen(inputtext) || strlen(inputtext) > 24)
				{
					SendClientMessage(playerid, -1, "{E6F8E0}El nombre del accesorio debe contener de 1 a 24 caracteres.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				
				format(PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_NAME], 24, "%s", inputtext);
				ShowDialog(playerid, DIALOG_PLAYER_TOY_MENU);
			}
			else ShowDialog(playerid, DIALOG_PLAYER_TOY_MENU);
			return 1;
		}
		case DIALOG_PLAYER_TOY_CONFIRMDELETE:
		{
			if(response)
			{
				new DB_Query[130];
				format(DB_Query, sizeof DB_Query, "DELETE FROM `PLAYER_TOYS` WHERE `ID_USER` = '%d' AND `ID_TOY` = '%d';", ACCOUNT_INFO[playerid][ac_ID], PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ID]);
				db_query(Database, DB_Query);
				
				if(PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ATTACHED]) RemovePlayerAttachedObject(playerid, PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT]);
				
				SendClientMessageEx(playerid, -1, "{E6F8E0}Accesorio \"%s\" eliminado.", PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_NAME]);
				
				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_VALID] = false;
				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ID] = 0;
				format(PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_NAME], 24, "");
				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ATTACHED] = false;
				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_MODELID] = 0;
				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_BONE] = 0;
				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_OFFSET_X] = 0.0;
				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_OFFSET_Y] = 0.0;
				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_OFFSET_Z] = 0.0;
				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ROT_X] = 0.0;
				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ROT_Y] = 0.0;
				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ROT_Z] = 0.0;
				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_SCALE_X] = 0.0;
				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_SCALE_Y] = 0.0;
				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_SCALE_Z] = 0.0;
				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_COLOR_1] = 0;
				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_COLOR_2] = 0;
				PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] = 0;
				
				ShowDialog(playerid, DIALOG_PLAYER_TOYS);
			}
			else ShowDialog(playerid, DIALOG_PLAYER_TOY_MENU);
			return 1;
		}
		case DIALOG_PLAYER_TOY_SELECT_BONE:
		{
			if(response)
			{
				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_BONE] = listitem + 1;
				EditPlayerToy(playerid);
			}
			else ShowDialog(playerid, DIALOG_PLAYER_TOY_MENU);
			return 1;
		}
		case DIALOG_PLAYER_TOY_EDIT_BONE:
		{
			if(response) ShowDialog(playerid, DIALOG_PLAYER_TOY_SELECT_BONE);
			else EditPlayerToy(playerid);
			return 1;
		}
		case DIALOG_PLAYER_TOY_COLOR_1:
		{
			if(response)
			{
				if(listitem == 0) PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_COLOR_1] = 0;
				else PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_COLOR_1] = RGBAToARGB(RandomColors[listitem]);
				
				if(PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ATTACHED]) UpdatePlayerToy(playerid, PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT]);
				SendClientMessage(playerid, -1, "{E6F8E0}Color del accesorio actualizado.");
			}
			else ShowDialog(playerid, DIALOG_PLAYER_TOY_MENU);
			return 1;
		}
		case DIALOG_PLAYER_TOY_COLOR_2:
		{
			if(response)
			{
				if(listitem == 0) PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_COLOR_2] = 0;
				else PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_COLOR_2] = RGBAToARGB(RandomColors[listitem]);
				
				if(PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ATTACHED]) UpdatePlayerToy(playerid, PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT]);
				SendClientMessage(playerid, -1, "{E6F8E0}Color del accesorio actualizado.");
			}
			else ShowDialog(playerid, DIALOG_PLAYER_TOY_MENU);
			return 1;
		}
		case DIALOG_PLAYER_TOY_DELETE_ALL:
		{
			if(response)
			{
				new DB_Query[90];
				format(DB_Query, sizeof DB_Query, "DELETE FROM `PLAYER_TOYS` WHERE `ID_USER` = '%d';", ACCOUNT_INFO[playerid][ac_ID]);
				db_query(Database, DB_Query);
				
				new temp_PLAYER_TOYS[Player_Toys_Info];
				for(new i = 0; i != MAX_PLAYER_ATTACHED_OBJECTS; i ++)
				{
					RemovePlayerAttachedObject(playerid, i);
					PLAYER_TOYS[playerid][i] = temp_PLAYER_TOYS;
				}
		
				SendClientMessage(playerid, -1, "{E6F8E0}Ha eliminado todos tus accesorios.");
			}
			else ShowDialog(playerid, DIALOG_PLAYER_TOYS);
			return 1;
		}
		case DIALOG_BANK:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0: ShowDialog(playerid, DIALOG_BANK_WITHDRAW);
					case 1: ShowDialog(playerid, DIALOG_BANK_DEPOSIT);
					case 2: ShowDialog(playerid, DIALOG_BANK_TRANSFER);
					case 3: ShowDialog(playerid, DIALOG_BANK_TRANSACTIONS);
				}
			}
			else PLAYER_TEMP[playerid][pt_PLAYER_IN_ATM] = false;
			return 1;
		}
		case DIALOG_BANK_WITHDRAW:
		{
			if(response)
			{
				if(sscanf(inputtext, "d", inputtext[0]))
				{
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					SendClientMessage(playerid, -1, "{E6F8E0}Introduce un valor numérico.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if(inputtext[0] <= 0)
				{
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					SendClientMessage(playerid, -1, "{E6F8E0}Introduce un valor positivo.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if(inputtext[0] > BANK_ACCOUNT[playerid][bank_account_BALANCE])
				{
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					SendClientMessage(playerid, -1, "{E6F8E0}Saldo insuficiente.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if(PLAYER_TEMP[playerid][pt_PLAYER_IN_ATM])
				{
					if(inputtext[0] > 10000)
					{
						PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, -1, "{E6F8E0}Las operaciones de más de {FF6633}10.000$ {E6F8E0}no se pueden realizar desde un cajero, solo en el banco.");
						ShowDialog(playerid, dialogid);
						return 1;
					}
				}
				
				BANK_ACCOUNT[playerid][bank_account_BALANCE] -= inputtext[0];
				GivePlayerCash(playerid, inputtext[0]);
				
				RegisterBankAccountTransaction(BANK_ACCOUNT[playerid][bank_account_ID], BANK_TRANSACTION_WITHDRAW, inputtext[0]);
				
				SendClientMessageEx(playerid, -1, "Operación realizada con éxito, has retirado {6a98e2}%s$.", number_format_thousand(inputtext[0]));
				PlayerPlaySoundEx(playerid, 1058, 0.0, 0.0, 0.0);
				PLAYER_TEMP[playerid][pt_PLAYER_IN_ATM] = false;
			}
			else ShowDialog(playerid, DIALOG_BANK);
			return 1;
		}
		case DIALOG_BANK_DEPOSIT:
		{
			if(response)
			{
				if(sscanf(inputtext, "d", inputtext[0]))
				{
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					SendClientMessage(playerid, -1, "{E6F8E0}Introduce un valor numérico.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if(inputtext[0] <= 0)
				{
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					SendClientMessage(playerid, -1, "{E6F8E0}Introduce un valor positivo.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if(inputtext[0] > CHARACTER_INFO[playerid][ch_CASH])
				{
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					SendClientMessage(playerid, -1, "{E6F8E0}Dinero insuficiente.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if(PLAYER_TEMP[playerid][pt_PLAYER_IN_ATM])
				{
					if(inputtext[0] > 10000)
					{
						PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, -1, "{E6F8E0}Las operaciones de más de {FF6633}10.000$ {E6F8E0}no se pueden realizar desde un cajero, solo en el banco.");
						ShowDialog(playerid, dialogid);
						return 1;
					}
				}
				
				GivePlayerCash(playerid, -inputtext[0]);
				BANK_ACCOUNT[playerid][bank_account_BALANCE] += inputtext[0];
				
				RegisterBankAccountTransaction(BANK_ACCOUNT[playerid][bank_account_ID], BANK_TRANSACTION_DEPOSIT, inputtext[0]);
				
				SendClientMessageEx(playerid, -1, "Operación realizada con éxito, has depositado {6a98e2}%s$.", number_format_thousand(inputtext[0]));
				PlayerPlaySoundEx(playerid, 1058, 0.0, 0.0, 0.0);
				PLAYER_TEMP[playerid][pt_PLAYER_IN_ATM] = false;
			}
			else ShowDialog(playerid, DIALOG_BANK);
			return 1;
		}
		case DIALOG_BANK_TRANSFER:
		{
			if(response)
			{
				if(sscanf(inputtext, "d", inputtext[0]))
				{
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					SendClientMessage(playerid, -1, "{E6F8E0}Introduce un valor numérico.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if(inputtext[0] <= 0)
				{
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					SendClientMessage(playerid, -1, "{E6F8E0}Introduce un valor positivo.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				
				new DBResult:Result, bool:valid_account, DB_Query[90];
				format(DB_Query, sizeof(DB_Query), "SELECT * FROM `BANK_ACCOUNTS` WHERE `ID_ACCOUNT` = '%d'", inputtext[0]);
				Result = db_query(Database, DB_Query);
				if(db_num_rows(Result)) valid_account = true;
				db_free_result(Result);
				
				if(valid_account)
				{
					PLAYER_TEMP[playerid][pt_SELECT_BANK_TRANSFER_ACCOUNT] = inputtext[0];
					ShowDialog(playerid, DIALOG_BANK_TRANSFER_SEND);
				}
				else
				{
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					SendClientMessage(playerid, -1, "{00FF80}El número de cuenta introducido no existe o no es correcto.");
					PLAYER_TEMP[playerid][pt_PLAYER_IN_ATM] = false;
				}
			}
			else ShowDialog(playerid, DIALOG_BANK);
			return 1;
		}
		case DIALOG_BANK_TRANSFER_SEND:
		{
			if(response)
			{
				if(sscanf(inputtext, "d", inputtext[0]))
				{
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					SendClientMessage(playerid, -1, "{E6F8E0}Introduce un valor numérico.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if(inputtext[0] <= 0)
				{
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					SendClientMessage(playerid, -1, "{E6F8E0}Introduce un valor positivo.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if(inputtext[0] > BANK_ACCOUNT[playerid][bank_account_BALANCE])
				{
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					SendClientMessage(playerid, -1, "{E6F8E0}Saldo insuficiente.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if(PLAYER_TEMP[playerid][pt_PLAYER_IN_ATM])
				{
					if(inputtext[0] > 10000)
					{
						PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, -1, "{E6F8E0}Las operaciones de más de {FF6633}10.000$ {E6F8E0}no se pueden realizar desde un cajero, solo en el banco.");
						ShowDialog(playerid, dialogid);
						return 1;
					}
				}
				
				BANK_ACCOUNT[playerid][bank_account_BALANCE] -= inputtext[0];
				new transfer_player_id = GetPlayerIdByBankAccountId(PLAYER_TEMP[playerid][pt_SELECT_BANK_TRANSFER_ACCOUNT]);
				
				new DB_Query[300], message[64];
				format(message, sizeof message, "Tranferencia recibida: +%s$", number_format_thousand(inputtext[0]));
				
				if(transfer_player_id == -1)
				{
					new DBResult:Result;
					format(DB_Query, sizeof DB_Query, "SELECT `PHONE`.`PHONE_NUMBER` FROM `PHONE`, `BANK_ACCOUNTS` WHERE `BANK_ACCOUNTS`.`ID_ACCOUNT` = '%d' AND `PHONE`.`ID_USER` = `BANK_ACCOUNTS`.`ID_USER`;", PLAYER_TEMP[playerid][pt_SELECT_BANK_TRANSFER_ACCOUNT]);
					
					Result = db_query(Database, DB_Query);
					
					if(db_num_rows(Result))
					{
						new phone_number = db_get_field_int(Result, 0);
						RegisterPhoneMessage(6740, phone_number, message, true);
					}
					db_free_result(Result);
				}
				else
				{
					BANK_ACCOUNT[transfer_player_id][bank_account_BALANCE] += inputtext[0];
					
					if(PLAYER_PHONE[transfer_player_id][player_phone_VALID])
					{
						RegisterPhoneMessage(6740, PLAYER_PHONE[transfer_player_id][player_phone_NUMBER], message);
						if(PLAYER_PHONE[transfer_player_id][player_phone_STATE] == PHONE_STATE_ON)
						{
							if((PLAYER_TEMP[transfer_player_id][pt_GAME_STATE] == GAME_STATE_NORMAL || PLAYER_TEMP[transfer_player_id][pt_GAME_STATE] == GAME_STATE_DEAD))
							{
								SendClientMessageEx(transfer_player_id, -1, "{b7dd80}[NUEVO MENSAJE]: {e5f442}De: {FFFFFF}%s {b7dd80}Mensaje: {FFFFFF}%s", convertPhoneNumber(transfer_player_id, 6740), message);
							}
						}
					}	
				}
				
				format(DB_Query, sizeof(DB_Query), "\
					UPDATE `BANK_ACCOUNTS` SET\
						`BALANCE` = BALANCE + '%d' \
					WHERE `ID_ACCOUNT` = '%d';\
					UPDATE `BANK_ACCOUNTS` SET\
						`BALANCE` = '%d' \
					WHERE `ID_ACCOUNT` = '%d';\
				",
					inputtext[0], PLAYER_TEMP[playerid][pt_SELECT_BANK_TRANSFER_ACCOUNT],
					BANK_ACCOUNT[playerid][bank_account_BALANCE], BANK_ACCOUNT[playerid][bank_account_ID]
				);
				
				db_query(Database, DB_Query);
				
				RegisterBankAccountTransaction(BANK_ACCOUNT[playerid][bank_account_ID], BANK_TRANSACTION_TRANSFER_SENT, inputtext[0], PLAYER_TEMP[playerid][pt_SELECT_BANK_TRANSFER_ACCOUNT]);
				RegisterBankAccountTransaction(PLAYER_TEMP[playerid][pt_SELECT_BANK_TRANSFER_ACCOUNT], BANK_TRANSACTION_TRANSFER_RECE, inputtext[0], BANK_ACCOUNT[playerid][bank_account_ID]);
				
				SendClientMessageEx(playerid, -1, "Operación realizada con éxito, has transferido {6a98e2}%s$ {FFFFFF}al número de cuenta {6a98e2}%s.", number_format_thousand(inputtext[0]), number_format_thousand(PLAYER_TEMP[playerid][pt_SELECT_BANK_TRANSFER_ACCOUNT]));
				PlayerPlaySoundEx(playerid, 1058, 0.0, 0.0, 0.0);
				PLAYER_TEMP[playerid][pt_SELECT_BANK_TRANSFER_ACCOUNT] = 0;
				PLAYER_TEMP[playerid][pt_PLAYER_IN_ATM] = false;
			}
			else
			{
				PLAYER_TEMP[playerid][pt_SELECT_BANK_TRANSFER_ACCOUNT] = 0;
				ShowDialog(playerid, DIALOG_BANK_TRANSFER);
			}
			return 1;
		}
		case DIALOG_CREATE_BANK_ACCOUNT:
		{
			if(response)
			{
				if(CHARACTER_INFO[playerid][ch_CASH] >= 500)
				{
					GivePlayerCash(playerid, -500);
					BANK_ACCOUNT[playerid][bank_account_BALANCE] = 500;
					
					new DBResult:Result, DB_Query[190];
					format(DB_Query, sizeof DB_Query,
					"\
						INSERT INTO `BANK_ACCOUNTS`\
						(\
							`ID_USER`, `BALANCE`\
						)\
						VALUES\
						(\
							'%d', '%d'\
						);\
						SELECT `ID_ACCOUNT` FROM `BANK_ACCOUNTS` WHERE `ID_USER` = '%d';\
					", ACCOUNT_INFO[playerid][ac_ID], BANK_ACCOUNT[playerid][bank_account_BALANCE], ACCOUNT_INFO[playerid][ac_ID]);
					Result = db_query(Database, DB_Query);
					
					if(db_num_rows(Result)) BANK_ACCOUNT[playerid][bank_account_ID] = db_get_field_assoc_int(Result, "ID_ACCOUNT");
					db_free_result(Result);

					RegisterBankAccountTransaction(BANK_ACCOUNT[playerid][bank_account_ID], BANK_TRANSACTION_CREATE_ACCOUNT, 500);
					
					PlayerPlaySoundEx(playerid, 1058, 0.0, 0.0, 0.0);
					SendClientMessageEx(playerid, -1, "Tu cuenta bancaria ha sido creada con éxito tu número de cuenta es {6a98e2}%s.", number_format_thousand(BANK_ACCOUNT[playerid][bank_account_ID]));
				}
				else
				{
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					SendClientMessageEx(playerid, -1, "{E6F8E0}No tienes dinero suficiente para crear la cuenta bancaria, te faltan {FF6633}%d$.", 500 - CHARACTER_INFO[playerid][ch_CASH]);
				}
			}
			return 1;
		}
		case DIALOG_BANK_TRANSACTIONS:
		{
			if(response) PLAYER_TEMP[playerid][pt_PLAYER_IN_ATM] = false;
			else ShowDialog(playerid, DIALOG_BANK);
			return 1;
		}
		case DIALOG_247_LIST:
		{
			if(response)
			{
				switch(Supermarket_Product_List[listitem][product_TYPE])
				{
					case PRODUCT_TYPE_FOOD:
					{
						if(CHARACTER_INFO[playerid][ch_CASH] >= Supermarket_Product_List[listitem][product_PRICE])
						{
							new slot = GetEmptyPlayerPocketSlot(playerid);
							if(slot == -1)
							{
								PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
								SendClientMessage(playerid, -1, "{00FF80}No tienes más espacio entre tus alimentos, elimina algo con {e0d43e}/alimentos.");
								return 1;
							}
							
							GivePlayerCash(playerid, -Supermarket_Product_List[listitem][product_PRICE]);
							
							PLAYER_POCKET[playerid][slot][player_pocket_VALID] = true;
							format(PLAYER_POCKET[playerid][slot][player_pocket_object_NAME], 24, "%s", Supermarket_Product_List[listitem][product_NAME]);
							PLAYER_POCKET[playerid][slot][player_pocket_object_HUNGRY] = Supermarket_Product_List[listitem][product_HUNGRY];
							PLAYER_POCKET[playerid][slot][player_pocket_object_THIRST] = Supermarket_Product_List[listitem][product_THIRST];
							PLAYER_POCKET[playerid][slot][player_pocket_object_DRUNK] = Supermarket_Product_List[listitem][product_DRUNK];
							RegisterNewPlayerPocketObject(playerid, slot);
							
							SendClientMessageEx(playerid, -1, "Has comprado {86e03e}%s {FFFFFF}por {86e03e}%d$, {FFFFFF}para consumirlo usa {ddd67c}/alimentos.", Supermarket_Product_List[listitem][product_NAME], Supermarket_Product_List[listitem][product_PRICE]);
							PlayerPlaySoundEx(playerid, 1058, 0.0, 0.0, 0.0);
						}
						else
						{
							PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
							SendClientMessageEx(playerid, -1, "{E6F8E0}No tienes dinero suficiente, te faltan {FF6633}%s$ {E6F8E0}para poder comprar este producto.", number_format_thousand(Supermarket_Product_List[listitem][product_PRICE] - CHARACTER_INFO[playerid][ch_CASH]));
						}
					}
					case PRODUCT_TYPE_PHONE:
					{						
						if(CHARACTER_INFO[playerid][ch_CASH] >= Supermarket_Product_List[listitem][product_PRICE])
						{
							if(PLAYER_PHONE[playerid][player_phone_VALID])
							{
								SendClientMessageEx(playerid, -1, "{00FF80}Ya tienes un teléfono.");
								PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
								return 1;
							}
							
							new DBResult:Result_pnumber, phone_number;
							Result_pnumber = db_query(Database, "SELECT ABS(RANDOM() % 10000000) AS `NUM` WHERE `NUM` NOT IN (SELECT `PHONE_NUMBER` FROM `PHONE`) LIMIT 1;");
							if(db_num_rows(Result_pnumber)) phone_number = db_get_field_int(Result_pnumber, 0);
							db_free_result(Result_pnumber);
							
							if(phone_number)
							{
								PLAYER_PHONE[playerid][player_phone_VALID] = true;
								PLAYER_PHONE[playerid][player_phone_NUMBER] = phone_number;
								PLAYER_PHONE[playerid][player_phone_STATE] = PHONE_STATE_ON;
								PLAYER_PHONE[playerid][player_phone_VISIBLE_NUMBER] = true;
								RegisterNewPlayerPhone(playerid);
								GivePlayerCash(playerid, -Supermarket_Product_List[listitem][product_PRICE]);
								
								SendClientMessageEx(playerid, -1, "Has comprado un {86e03e}%s {FFFFFF}por {86e03e}%d$, {FFFFFF}tu número es {c5e03e}%d.", Supermarket_Product_List[listitem][product_NAME], Supermarket_Product_List[listitem][product_PRICE], PLAYER_PHONE[playerid][player_phone_NUMBER]);
								PlayerPlaySoundEx(playerid, 1058, 0.0, 0.0, 0.0);
							}
							else
							{
								PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
								SendClientMessage(playerid, -1, "{00FF80}No se ha podido encontrar un número de teléfono libre.");
							}
						}
						else
						{
							PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
							SendClientMessageEx(playerid, -1, "{E6F8E0}No tienes dinero suficiente, te faltan {FF6633}%s$ {E6F8E0}para poder comprar este producto.", number_format_thousand(Supermarket_Product_List[listitem][product_PRICE] - CHARACTER_INFO[playerid][ch_CASH]));
						}
						
					}
					case PRODUCT_TYPE_GPS:
					{
						if(CHARACTER_INFO[playerid][ch_CASH] >= Supermarket_Product_List[listitem][product_PRICE])
						{
							if(PLAYER_OBJECT[playerid][po_GPS])
							{
								SendClientMessageEx(playerid, -1, "{00FF80}Ya tienes un GPS.");
								PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
								return 1;
							}
							
							GivePlayerCash(playerid, -Supermarket_Product_List[listitem][product_PRICE]);
							
							PLAYER_OBJECT[playerid][po_GPS] = true;
							SendClientMessageEx(playerid, -1, "Has comprado un {86e03e}%s {FFFFFF}por {86e03e}%d$, {FFFFFF}usa {6a98e2}/GPS {FFFFFF}para usarlo.", Supermarket_Product_List[listitem][product_NAME], Supermarket_Product_List[listitem][product_PRICE]);
							PlayerPlaySoundEx(playerid, 1058, 0.0, 0.0, 0.0);
						}
						else
						{
							PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
							SendClientMessageEx(playerid, -1, "{E6F8E0}No tienes dinero suficiente, te faltan {FF6633}%s$ {E6F8E0}para poder comprar este producto.", number_format_thousand(Supermarket_Product_List[listitem][product_PRICE] - CHARACTER_INFO[playerid][ch_CASH]));
						}
					}
					case PRODUCT_TYPE_MP3:
					{
						if(CHARACTER_INFO[playerid][ch_CASH] >= Supermarket_Product_List[listitem][product_PRICE])
						{
							if(PLAYER_OBJECT[playerid][po_MP3])
							{
								SendClientMessageEx(playerid, -1, "{00FF80}Ya tienes un MP3.");
								PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
								return 1;
							}
							
							GivePlayerCash(playerid, -Supermarket_Product_List[listitem][product_PRICE]);
							
							PLAYER_OBJECT[playerid][po_MP3] = true;
							SendClientMessageEx(playerid, -1, "Has comprado un {86e03e}%s {FFFFFF}por {86e03e}%d$, {FFFFFF}usa {6a98e2}/MP3 {FFFFFF}para usarlo.", Supermarket_Product_List[listitem][product_NAME], Supermarket_Product_List[listitem][product_PRICE]);
							PlayerPlaySoundEx(playerid, 1058, 0.0, 0.0, 0.0);
						}
						else
						{
							PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
							SendClientMessageEx(playerid, -1, "{E6F8E0}No tienes dinero suficiente, te faltan {FF6633}%s$ {E6F8E0}para poder comprar este producto.", number_format_thousand(Supermarket_Product_List[listitem][product_PRICE] - CHARACTER_INFO[playerid][ch_CASH]));
						}
					}
					case PRODUCT_TYPE_PHONE_RESOLVER:
					{
						if(CHARACTER_INFO[playerid][ch_CASH] >= Supermarket_Product_List[listitem][product_PRICE])
						{
							if(PLAYER_OBJECT[playerid][po_PHONE_RESOLVER])
							{
								SendClientMessageEx(playerid, -1, "{00FF80}Ya tienes una guía telefónica.");
								PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
								return 1;
							}
							
							GivePlayerCash(playerid, -Supermarket_Product_List[listitem][product_PRICE]);
							
							PLAYER_OBJECT[playerid][po_PHONE_RESOLVER] = true;
							SendClientMessageEx(playerid, -1, "Has comprado una {86e03e}%s {FFFFFF}por {86e03e}%d$, {FFFFFF}usa {6a98e2}/guia {FFFFFF}para usarla.", Supermarket_Product_List[listitem][product_NAME], Supermarket_Product_List[listitem][product_PRICE]);
							PlayerPlaySoundEx(playerid, 1058, 0.0, 0.0, 0.0);
						}
						else
						{
							PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
							SendClientMessageEx(playerid, -1, "{E6F8E0}No tienes dinero suficiente, te faltan {FF6633}%s$ {E6F8E0}para poder comprar este producto.", number_format_thousand(Supermarket_Product_List[listitem][product_PRICE] - CHARACTER_INFO[playerid][ch_CASH]));
						}
					}
				}
			}
			return 1;
		}
		case DIALOG_PLAYER_POCKET:
		{
			if(response)
			{
				if(listitem == MAX_PLAYER_POCKET_OBJECTS) return ShowDialog(playerid, DIALOG_PLAYER_POCKET_DELETE_ALL);
				if(!PLAYER_POCKET[playerid][listitem][player_pocket_VALID])
				{
					SendClientMessage(playerid, -1, "{00FF80}Este slot está vacío.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				PLAYER_TEMP[playerid][pt_POCKET_SLOT_SELECTED] = listitem;
				ShowDialog(playerid, DIALOG_PLAYER_POCKET_OPTIONS);
			}
			return 1;
		}
		case DIALOG_PLAYER_POCKET_OPTIONS:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0: //Consumir
					{
						if(CHARACTER_INFO[playerid][ch_HUNGRY] >= 99.0 && CHARACTER_INFO[playerid][ch_THIRST] >= 99.0) 
						{
							PLAYER_TEMP[playerid][pt_POCKET_SLOT_SELECTED] = 0;
							SendClientMessage(playerid, -1, "{E6F8E0}¿Es que quieres reventar?");
							return 1;
						}
					
						Add_Hungry_Thirst(playerid, PLAYER_POCKET[playerid][PLAYER_TEMP[playerid][pt_POCKET_SLOT_SELECTED]][player_pocket_object_HUNGRY], PLAYER_POCKET[playerid][PLAYER_TEMP[playerid][pt_POCKET_SLOT_SELECTED]][player_pocket_object_THIRST]);
						GivePlayerDrunkLevel(playerid, PLAYER_POCKET[playerid][PLAYER_TEMP[playerid][pt_POCKET_SLOT_SELECTED]][player_pocket_object_DRUNK]);
						
						new action[64];
						format(action, sizeof action, "consume %s.", PLAYER_POCKET[playerid][PLAYER_TEMP[playerid][pt_POCKET_SLOT_SELECTED]][player_pocket_object_NAME]);
						Auto_SendPlayerAction(playerid, action);
						
						DeletePlayerPocketObject(playerid, PLAYER_TEMP[playerid][pt_POCKET_SLOT_SELECTED]);
						PLAYER_TEMP[playerid][pt_POCKET_SLOT_SELECTED] = 0;
					
						ApplyAnimation(playerid, "FOOD", "EAT_Pizza", 0, 0, 0, 0, 0, 0);
						ApplyAnimation(playerid, "FOOD", "EAT_Pizza", 4.1, false, true, true, false, 1000);
					}
					case 1: //Eliminar
					{
						SendClientMessageEx(playerid, -1, "{00FF80}Has eliminado \"%s\" de tus alimentos.", PLAYER_POCKET[playerid][PLAYER_TEMP[playerid][pt_POCKET_SLOT_SELECTED]][player_pocket_object_NAME]);
						DeletePlayerPocketObject(playerid, PLAYER_TEMP[playerid][pt_POCKET_SLOT_SELECTED]);
						PLAYER_TEMP[playerid][pt_POCKET_SLOT_SELECTED] = 0;
					}
				}
			}
			else
			{
				PLAYER_TEMP[playerid][pt_POCKET_SLOT_SELECTED] = 0;
				ShowDialog(playerid, DIALOG_PLAYER_POCKET);
			}
			return 1;
		}
		case DIALOG_PLAYER_POCKET_DELETE_ALL:
		{
			if(response)
			{
				new DB_Query[90];
				format(DB_Query, sizeof DB_Query, "DELETE FROM `PLAYER_POCKET` WHERE `ID_USER` = '%d';", ACCOUNT_INFO[playerid][ac_ID]);
				db_query(Database, DB_Query);
				
				new temp_PLAYER_POCKET[Player_Pocket_Enum];
				for(new i = 0; i != MAX_PLAYER_POCKET_OBJECTS; i ++) PLAYER_POCKET[playerid][i] = temp_PLAYER_POCKET;
				
				SendClientMessage(playerid, -1, "{E6F8E0}Ha eliminado todo lo que tenías en tus alimentos.");
			}
			else ShowDialog(playerid, DIALOG_PLAYER_POCKET);
			return 1;
		}
		case DIALOG_PHONE_PUBLIC:
		{
			if(response)
			{
				ShowDialog(playerid, DIALOG_PHONE_CALL_NUMBER);
			}
		}
		case DIALOG_PHONE:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0: //Agenda
					{
						if(PLAYER_PHONE[playerid][player_phone_STATE] == PHONE_STATE_OFF)
						{
							PLAYER_PHONE[playerid][player_phone_STATE] = PHONE_STATE_ON;
							ShowDialog(playerid, dialogid);
							return 1;
						}
						ShowDialog(playerid, DIALOG_PHONE_BOOK);
					}
					case 1: //Llamar
					{
						if(PLAYER_PHONE[playerid][player_phone_STATE] == PHONE_STATE_OFF) return SendClientMessage(playerid, -1, "{00FF80}Tu teléfono está apagado, enciéndelo para usarlo.");
						ShowDialog(playerid, DIALOG_PHONE_CALL_NUMBER);
					}
					case 2: //Enviar mensaje
					{
						if(PLAYER_PHONE[playerid][player_phone_STATE] == PHONE_STATE_OFF) return SendClientMessage(playerid, -1, "{00FF80}Tu teléfono está apagado, enciéndelo para usarlo.");
						ShowDialog(playerid, DIALOG_PHONE_SMS_NUMBER);
					}
					case 3: //Ver mensajes recibidos
					{
						if(PLAYER_PHONE[playerid][player_phone_STATE] == PHONE_STATE_OFF) return SendClientMessage(playerid, -1, "{00FF80}Tu teléfono está apagado, enciéndelo para usarlo.");
						ShowDialog(playerid, DIALOG_PHONE_RECEIVED_MESSAGES);
					}
					case 4: //Ver mensajes enviados
					{
						if(PLAYER_PHONE[playerid][player_phone_STATE] == PHONE_STATE_OFF) return SendClientMessage(playerid, -1, "{00FF80}Tu teléfono está apagado, enciéndelo para usarlo.");
						ShowDialog(playerid, DIALOG_PHONE_SENT_MESSAGES);
					}
					case 5: //Tienda
					{
						if(PLAYER_PHONE[playerid][player_phone_STATE] == PHONE_STATE_OFF) return SendClientMessage(playerid, -1, "{00FF80}Tu teléfono está apagado, enciéndelo para usarlo.");
						
						ShowPlayerShop(playerid);
					}
					case 6: //Apagar
					{
						if(PLAYER_PHONE[playerid][player_phone_STATE] == PHONE_STATE_OFF) return SendClientMessage(playerid, -1, "{00FF80}Tu teléfono está apagado, enciéndelo para usarlo.");
						
						if(PLAYER_TEMP[playerid][pt_PLAYER_IN_CALL]) EndPhoneCall(playerid);
						PLAYER_PHONE[playerid][player_phone_STATE] = PHONE_STATE_OFF;
						SendClientMessage(playerid, -1, "{00FF80}Has apagado tu teléfono, ahora no recibirás llamadas.");
					}
				}
			}
			return 1;
		}
		case DIALOG_PHONE_BOOK:
		{
			if(response)
			{
				if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == -1) return ShowDialog(playerid, dialogid);
				if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == MAX_PHONE_CONTACTS + 10) return ShowDialog(playerid, DIALOG_PHONE_BOOK_ADD_NUMBER);
				if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == MAX_PHONE_CONTACTS + 20) return ShowDialog(playerid, DIALOG_PHONE_BOOK_DELETE_ALL);
				
				PLAYER_TEMP[playerid][pt_PLAYER_PHONE_BOOK_SELECTED] = PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem];
				ShowDialog(playerid, DIALOG_PHONE_BOOK_OPTIONS);
			}
			else ShowDialog(playerid, DIALOG_PHONE);
			return 1;
		}
		case DIALOG_PHONE_BOOK_ADD_NUMBER:
		{
			if(response)
			{
				if(sscanf(inputtext, "d", inputtext[0]))
				{
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					SendClientMessage(playerid, -1, "{E6F8E0}Introduce un valor numérico.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if(inputtext[0] <= 0)
				{
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					SendClientMessage(playerid, -1, "{E6F8E0}Introduce un valor positivo.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				
				PLAYER_TEMP[playerid][pt_PLAYER_PHONE_BOOK_ADD_NUMBER] = inputtext[0];
				ShowDialog(playerid, DIALOG_PHONE_BOOK_ADD_NAME);
			}
			else ShowDialog(playerid, DIALOG_PHONE_BOOK);
			return 1;
		}
		case DIALOG_PHONE_BOOK_ADD_NAME:
		{
			if(response)
			{
				if(isnull(inputtext))
				{ 
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if(strlen(inputtext) > 24)
				{
					SendClientMessage(playerid, -1, "{00FF80}Caracteres: 1-24.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				
				new slot = GetEmptyPlayerPhoneBookSlot(playerid);
				if(slot == -1) return SendClientMessage(playerid, -1, "{00FF80}Memoria de la agenda llena.");
			
			
				PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_VALID] = true;
				format(PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_NAME], 24, "%s", inputtext);
				PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_PHONE_NUMBER] = PLAYER_TEMP[playerid][pt_PLAYER_PHONE_BOOK_ADD_NUMBER];
				RegisterNewPlayerPhoneBook(playerid, slot);
				
				PlayerPlaySoundEx(playerid, 1058, 0.0, 0.0, 0.0);
				SendClientMessageEx(playerid, -1, "Nuevo contacto añadido a la agenda: Nombre: {6a98e2}%s {FFFFFF}Teléfono: {6a98e2}%d.", PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_NAME], PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_PHONE_NUMBER]);
				ShowDialog(playerid, DIALOG_PHONE_BOOK);
			}
			else ShowDialog(playerid, DIALOG_PHONE_BOOK_ADD_NUMBER);
			return 1;
		}
		case DIALOG_PHONE_BOOK_OPTIONS:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0: //llamar
					{
						if(PLAYER_TEMP[playerid][pt_PLAYER_IN_CALL]) return SendClientMessageEx(playerid, -1, "{00FF80}Estás en una llamada.");

						switch(PLAYER_PHONE_BOOK[playerid][ PLAYER_TEMP[playerid][pt_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_PHONE_NUMBER])
						{
							case 911:
							{
								if(ACCOUNT_INFO[playerid][ac_LEVEL] < 2) return SendClientMessage(playerid, -1, "{00FF80}Debes ser al menos nivel 2 para llamar a la policía.");
								PLAYER_TEMP[playerid][pt_PLAYER_IN_CALL] = true;
								PLAYER_TEMP[playerid][pt_POLICE_CALL_NAME] = true;
								PLAYER_TEMP[playerid][pt_POLICE_CALL_DESCRIPTION] = false;
								
								SendClientMessage(playerid, -1, "{E6F8E0}Operadora: Ha llamado a la central de policía, indícanos su nombre por favor.");
								return 1;
							}
							case 450: //Taxi
							{
								if(PLAYER_TEMP[playerid][pt_WANT_TAXI])
								{
									PLAYER_TEMP[playerid][pt_WANT_TAXI] = false;
									DisablePlayerTaxiMark(playerid);
									SendClientMessage(playerid, -1, "{E6F8E0}Has cancelado el taxi.");
								}
								else
								{
									PLAYER_TEMP[playerid][pt_WANT_TAXI] = true;
									SendClientMessage(playerid, -1, "{E6F8E0}Tu llamada se ha enviado a los taxistas disponibles, espera a que llegue un taxi.");
									SendClientMessage(playerid, -1, "{E6F8E0}Vuelve a llamar a este número si ya no necesitas un taxi.");
									SendAlertToTaxiDrivers(playerid);
								}
								return 1;
							}
							case 570: //Mecanico
							{
								if(PLAYER_TEMP[playerid][pt_WANT_MECHANIC])
								{
									PLAYER_TEMP[playerid][pt_WANT_MECHANIC] = false;
									DisablePlayerMechanicMark(playerid);
									SendClientMessage(playerid, -1, "{E6F8E0}Has cancelado el mecánico.");
								}
								else
								{
									PLAYER_TEMP[playerid][pt_WANT_MECHANIC] = true;
									SendClientMessage(playerid, -1, "{E6F8E0}Tu llamada se ha enviado a los mecánicos disponibles, espera a que llegue un mecánico.");
									SendClientMessage(playerid, -1, "{E6F8E0}Vuelve a llamar a este número si ya no necesitas un mecánico.");
									SendAlertToMechanic(playerid);
								}
								return 1;
							}
							case 6740: return SendClientMessage(playerid, -1, "{E6F8E0}No vuelvas a llamar al banco, cuidado.");
							case 38350: return SendClientMessage(playerid, -1, "{E6F8E0}Aseguradora que asegura tus vehículos de mierda.");
							case 666: return SendClientMessage(playerid, -1, "{E6F8E0}Mirar a las estrellas es mirar al pasado, no mires.");
						}
						
						new to_playerid = INVALID_PLAYER_ID;
						for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
						{
							if(IsPlayerConnected(i))
							{
								if((PLAYER_TEMP[i][pt_GAME_STATE] == GAME_STATE_NORMAL) && PLAYER_PHONE[i][player_phone_NUMBER] == PLAYER_PHONE_BOOK[playerid][ PLAYER_TEMP[playerid][pt_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_PHONE_NUMBER])
								{
									to_playerid = i;
									break;
								}
							}
						}
						
						if(to_playerid == INVALID_PLAYER_ID) return SendClientMessage(playerid, -1, "{00FF80}El número al que intentas llamar no es correcto o está fuera de cobertura.");
						if(to_playerid == playerid) return SendClientMessage(playerid, -1, "{00FF80}El número al que intentas llamar no es correcto.");
						if(PLAYER_PHONE[to_playerid][player_phone_STATE] == PHONE_STATE_OFF) return SendClientMessage(playerid, -1, "{00FF80}El número al que intentas llamar está apagado o fuera de cobertura.");
						if(PLAYER_TEMP[to_playerid][pt_PLAYER_IN_CALL]) return SendClientMessage(playerid, -1, "{00FF80}El número al que intentas llamar está en otra llamada.");
						
						SendClientMessageEx(to_playerid, -1, "{e5f442}[Llamada entrante] {FFFFFF}%s te está llamando, para responser usa {e5f442}/responder {FFFFFF}o {e5f442}/colgar.", convertPhoneNumber(to_playerid, PLAYER_PHONE[playerid][player_phone_NUMBER]));
						PLAYER_TEMP[to_playerid][pt_PLAYER_IN_CALL] = true;
						PLAYER_TEMP[to_playerid][pt_PLAYER_PHONE_CALL_STATE] = CALL_STATE_INCOMING_CALL;
						PLAYER_TEMP[to_playerid][pt_PLAYER_PHONE_CALL_PLAYERID] = playerid;
						
						SendClientMessageEx(playerid, -1, "Llamando a {e5f442}%s ...", PLAYER_PHONE_BOOK[playerid][ PLAYER_TEMP[playerid][pt_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_NAME]);
						PLAYER_TEMP[playerid][pt_TIMERS][6] = SetTimerEx("NoCallResponse", 15000, false, "i", playerid);
						PLAYER_TEMP[playerid][pt_PLAYER_IN_CALL] = true;
						PLAYER_TEMP[playerid][pt_PLAYER_PHONE_CALL_STATE] = CALL_STATE_WAITING_RESPONSE;
						PLAYER_TEMP[playerid][pt_PLAYER_PHONE_CALL_PLAYERID] = to_playerid;
						PlayerPlaySoundEx(playerid, 3600, 0.0, 0.0, 0.0);
					}
					case 1: ShowDialog(playerid, DIALOG_PHONE_BOOK_SEND_MESSAGE);
					case 2: ShowDialog(playerid, DIALOG_PHONE_BOOK_CHANGE_NAME);
					case 3: ShowDialog(playerid, DIALOG_PHONE_BOOK_CONFIRM_DELET);
				}
			}
			else ShowDialog(playerid, DIALOG_PHONE_BOOK);
			return 1;
		}
		case DIALOG_PHONE_BOOK_CHANGE_NAME:
		{
			if(response)
			{
				if(isnull(inputtext))
				{ 
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if(strlen(inputtext) > 24)
				{
					SendClientMessage(playerid, -1, "{00FF80}Caracteres: 1-24.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				
				format(PLAYER_PHONE_BOOK[playerid][ PLAYER_TEMP[playerid][pt_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_NAME], 24, "%s", inputtext);
				
				new DB_Query[120];
				format(DB_Query, sizeof DB_Query, "UPDATE `PHONE_BOOK` SET `NAME` = '%q' WHERE `CONTACT_ID` = '%d';", PLAYER_PHONE_BOOK[playerid][ PLAYER_TEMP[playerid][pt_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_NAME], PLAYER_PHONE_BOOK[playerid][ PLAYER_TEMP[playerid][pt_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_ID]);
				db_query(Database, DB_Query);
				
				SendClientMessage(playerid, -1, "Contacto modificado.");
				ShowDialog(playerid, DIALOG_PHONE_BOOK);
			}
			else ShowDialog(playerid, DIALOG_PHONE_BOOK_OPTIONS);
			return 1;
		}
		case DIALOG_PHONE_BOOK_CONFIRM_DELET:
		{
			if(response)
			{
				new DB_Query[120];
				format(DB_Query, sizeof DB_Query, "DELETE FROM `PHONE_BOOK` WHERE `PHONE_ID` = '%d' AND `CONTACT_ID` = '%d';", PLAYER_PHONE[playerid][player_phone_NUMBER], PLAYER_PHONE_BOOK[playerid][ PLAYER_TEMP[playerid][pt_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_ID]);
				db_query(Database, DB_Query);
				
				SendClientMessageEx(playerid, -1, "Contacto {6a98e2}\"%s\" {FFFFFF}eliminado de tu agenda.", PLAYER_PHONE_BOOK[playerid][ PLAYER_TEMP[playerid][pt_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_NAME]);
				
				PLAYER_PHONE_BOOK[playerid][ PLAYER_TEMP[playerid][pt_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_VALID] = false;
				PLAYER_PHONE_BOOK[playerid][ PLAYER_TEMP[playerid][pt_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_ID] = 0;
				format(PLAYER_PHONE_BOOK[playerid][ PLAYER_TEMP[playerid][pt_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_NAME], 24, "");
				PLAYER_PHONE_BOOK[playerid][ PLAYER_TEMP[playerid][pt_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_PHONE_NUMBER] = 0;
				
				ShowDialog(playerid, DIALOG_PHONE_BOOK);
			}
			else ShowDialog(playerid, DIALOG_PHONE_BOOK_OPTIONS);
			return 1;
		}
		case DIALOG_PHONE_BOOK_DELETE_ALL:
		{
			if(response)
			{
				new DB_Query[90];
				format(DB_Query, sizeof DB_Query, "DELETE FROM `PHONE_BOOK` WHERE `PHONE_ID` = '%d';", PLAYER_PHONE[playerid][player_phone_NUMBER]);
				db_query(Database, DB_Query);
				
				new temp_PLAYER_PHONE_BOOK[Phone_Book_Enum]; 
				for(new i = 0; i != MAX_PHONE_CONTACTS; i ++) PLAYER_PHONE_BOOK[playerid][i] = temp_PLAYER_PHONE_BOOK;
				
				SendClientMessage(playerid, -1, "{E6F8E0}Ha eliminado todos sus contactos.");
			}
			else ShowDialog(playerid, DIALOG_PHONE_BOOK);
			return 1;
		}
		case DIALOG_PHONE_CALL_NUMBER:
		{
			if(response)
			{
				if(PLAYER_PHONE[playerid][player_phone_STATE] == PHONE_STATE_OFF) return SendClientMessageEx(playerid, -1, "{00FF80}Tu teléfono está apagado, para encenderlo usa /movil.");
				if(PLAYER_TEMP[playerid][pt_PLAYER_IN_CALL]) return SendClientMessageEx(playerid, -1, "{00FF80}Estás en una llamada.");
				
				if(sscanf(inputtext, "d", inputtext[0]))
				{
					SendClientMessage(playerid, -1, "{00FF80}Número no válido.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if(inputtext[0] <= 0)
				{
					SendClientMessage(playerid, -1, "{00FF80}El número destino no es válido.");
					ShowDialog(playerid, dialogid);
					return 1;
				}

				switch(inputtext[0])
				{
					case 911:
					{
						if(ACCOUNT_INFO[playerid][ac_LEVEL] < 2) return SendClientMessage(playerid, -1, "{00FF80}Debes ser al menos nivel 2 para llamar a la policía.");
						PLAYER_TEMP[playerid][pt_PLAYER_IN_CALL] = true;
						PLAYER_TEMP[playerid][pt_POLICE_CALL_NAME] = true;
						PLAYER_TEMP[playerid][pt_POLICE_CALL_DESCRIPTION] = false;
						
						SendClientMessage(playerid, -1, "{E6F8E0}Operadora: Ha llamado a la central de policía, indícanos su nombre por favor.");
						return 1;
					}
					case 450: //Taxi
					{
						if(PLAYER_TEMP[playerid][pt_WANT_TAXI])
						{
							PLAYER_TEMP[playerid][pt_WANT_TAXI] = false;
							DisablePlayerTaxiMark(playerid);
							SendClientMessage(playerid, -1, "{E6F8E0}Has cancelado el taxi.");
						}
						else
						{
							PLAYER_TEMP[playerid][pt_WANT_TAXI] = true;
							SendClientMessage(playerid, -1, "{E6F8E0}Tu llamada se ha enviado a los taxistas disponibles, espera a que llegue un taxi.");
							SendClientMessage(playerid, -1, "{E6F8E0}Vuelve a llamar a este número si ya no necesitas un taxi.");
							SendAlertToTaxiDrivers(playerid);
						}
						return 1;
					}
					case 570: //Mecanico
					{
						if(PLAYER_TEMP[playerid][pt_WANT_MECHANIC])
						{
							PLAYER_TEMP[playerid][pt_WANT_MECHANIC] = false;
							DisablePlayerMechanicMark(playerid);
							SendClientMessage(playerid, -1, "{E6F8E0}Has cancelado el mecánico.");
						}
						else
						{
							PLAYER_TEMP[playerid][pt_WANT_MECHANIC] = true;
							SendClientMessage(playerid, -1, "{E6F8E0}Tu llamada se ha enviado a los mecánicos disponibles, espera a que llegue un mecánico.");
							SendClientMessage(playerid, -1, "{E6F8E0}Vuelve a llamar a este número si ya no necesitas un mecánico.");
							SendAlertToMechanic(playerid);
						}
						return 1;
					}
					case 6740: return SendClientMessage(playerid, -1, "{E6F8E0}No vuelvas a llamar al banco, cuidado.");
					case 38350: return SendClientMessage(playerid, -1, "{E6F8E0}Aseguradora que asegura tus vehículos de mierda.");
					case 666: return SendClientMessage(playerid, -1, "{E6F8E0}Mirar a las estrellas es mirar al pasado, no mires.");
				}
				
				new to_playerid = INVALID_PLAYER_ID;
				for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
				{
					if(IsPlayerConnected(i))
					{
						if((PLAYER_TEMP[i][pt_GAME_STATE] == GAME_STATE_NORMAL) && PLAYER_PHONE[i][player_phone_NUMBER] == inputtext[0])
						{
							to_playerid = i;
							break;
						}
					}
				}
				
				if(to_playerid == INVALID_PLAYER_ID) return SendClientMessage(playerid, -1, "{00FF80}El número al que intentas llamar no es correcto o está fuera de cobertura.");
				if(to_playerid == playerid) return SendClientMessage(playerid, -1, "{00FF80}El número al que intentas llamar no es correcto.");
				if(PLAYER_PHONE[to_playerid][player_phone_STATE] == PHONE_STATE_OFF) return SendClientMessage(playerid, -1, "{00FF80}El número al que intentas llamar está apagado o fuera de cobertura.");
				if(PLAYER_TEMP[to_playerid][pt_PLAYER_IN_CALL]) return SendClientMessage(playerid, -1, "{00FF80}El número al que intentas llamar está en otra llamada.");
				
				SendClientMessageEx(to_playerid, -1, "{e5f442}[Llamada entrante] {FFFFFF}%s te está llamando, para responser usa {e5f442}/responder {FFFFFF}o {e5f442}/colgar.", convertPhoneNumber(to_playerid, PLAYER_PHONE[playerid][player_phone_NUMBER]));
				PLAYER_TEMP[to_playerid][pt_PLAYER_IN_CALL] = true;
				PLAYER_TEMP[to_playerid][pt_PLAYER_PHONE_CALL_STATE] = CALL_STATE_INCOMING_CALL;
				PLAYER_TEMP[to_playerid][pt_PLAYER_PHONE_CALL_PLAYERID] = playerid;
				
				SendClientMessageEx(playerid, -1, "Llamando a {e5f442}%s ...", convertPhoneNumber(playerid, inputtext[0]));
				PLAYER_TEMP[playerid][pt_TIMERS][6] = SetTimerEx("NoCallResponse", 15000, false, "i", playerid);
				PLAYER_TEMP[playerid][pt_PLAYER_IN_CALL] = true;
				PLAYER_TEMP[playerid][pt_PLAYER_PHONE_CALL_STATE] = CALL_STATE_WAITING_RESPONSE;
				PLAYER_TEMP[playerid][pt_PLAYER_PHONE_CALL_PLAYERID] = to_playerid;
				PlayerPlaySoundEx(playerid, 3600, 0.0, 0.0, 0.0);
			}
			else ShowDialog(playerid, DIALOG_PHONE);
			return 1;
		}
		case DIALOG_PHONE_SMS_NUMBER:
		{
			if(response)
			{
				if(PLAYER_PHONE[playerid][player_phone_STATE] == PHONE_STATE_OFF) return SendClientMessageEx(playerid, -1, "{00FF80}Tu teléfono está apagado, para encenderlo usa /movil.");
				if(PLAYER_TEMP[playerid][pt_PLAYER_IN_CALL]) return SendClientMessageEx(playerid, -1, "{00FF80}Estás en una llamada.");
				
				if(sscanf(inputtext, "d", inputtext[0]))
				{
					SendClientMessage(playerid, -1, "{00FF80}Número no válido.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if(inputtext[0] <= 0)
				{
					SendClientMessage(playerid, -1, "{00FF80}El número destino no es válido.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				
				new DBResult:Result, DB_Query[100], bool:phone_exists;
				format(DB_Query, sizeof(DB_Query), "SELECT * FROM `PHONE` WHERE `PHONE_NUMBER` = '%d';", inputtext[0]);
				Result = db_query(Database, DB_Query);
				
				if(db_num_rows(Result)) phone_exists = true;
				db_free_result(Result);
				
				if(!phone_exists)
				{
					ShowDialog(playerid, dialogid);
					SendClientMessage(playerid, -1, "{00FF80}El número destino no es válido.");
					return 1;
				}
				
				PLAYER_TEMP[playerid][pt_PLAYER_PHONE_NUMBER_SELECTED] = inputtext[0];
				ShowDialog(playerid, DIALOG_PHONE_SMS_MESSAGE);
			}
			else ShowDialog(playerid, DIALOG_PHONE);
			return 1;
		}
		case DIALOG_PHONE_SMS_MESSAGE:
		{
			if(response)
			{
				if(isnull(inputtext)) return ShowDialog(playerid, dialogid);
				if(strlen(inputtext) > 64) return ShowDialog(playerid, dialogid);
				
				new to_playerid = INVALID_PLAYER_ID;
				for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
				{
					if(IsPlayerConnected(i))
					{
						if((PLAYER_TEMP[i][pt_GAME_STATE] == GAME_STATE_NORMAL || PLAYER_TEMP[i][pt_GAME_STATE] == GAME_STATE_DEAD) && PLAYER_PHONE[i][player_phone_NUMBER] == PLAYER_TEMP[playerid][pt_PLAYER_PHONE_NUMBER_SELECTED])
						{
							to_playerid = i;
							break;
						}
					}
				}
				
				if(to_playerid == INVALID_PLAYER_ID) RegisterPhoneMessage(PLAYER_PHONE[playerid][player_phone_NUMBER], PLAYER_TEMP[playerid][pt_PLAYER_PHONE_NUMBER_SELECTED], inputtext, true);
				else 
				{
					RegisterPhoneMessage(PLAYER_PHONE[playerid][player_phone_NUMBER], PLAYER_TEMP[playerid][pt_PLAYER_PHONE_NUMBER_SELECTED], inputtext);
					if(PLAYER_PHONE[to_playerid][player_phone_STATE] == PHONE_STATE_ON) SendClientMessageEx(to_playerid, -1, "{b7dd80}[NUEVO MENSAJE]: {e5f442}De: {FFFFFF}%s {b7dd80}Mensaje: {FFFFFF}%s", convertPhoneNumber(to_playerid, PLAYER_PHONE[playerid][player_phone_NUMBER]), inputtext);
				}
				SendClientMessageEx(playerid, -1, "Mensaje enviado a {7b9cd1}%s.", convertPhoneNumber(playerid, PLAYER_TEMP[playerid][pt_PLAYER_PHONE_NUMBER_SELECTED]));
			}
			else ShowDialog(playerid, DIALOG_PHONE_SMS_MESSAGE);
			return 1;
		}
		case DIALOG_PHONE_BOOK_SEND_MESSAGE:
		{
			if(response)
			{
				if(isnull(inputtext)) return ShowDialog(playerid, dialogid);
				if(strlen(inputtext) > 64) return ShowDialog(playerid, dialogid);
				
				new DBResult:Result, DB_Query[100], bool:phone_exists;
				format(DB_Query, sizeof(DB_Query), "SELECT * FROM `PHONE` WHERE `PHONE_NUMBER` = '%d';", PLAYER_PHONE_BOOK[playerid][ PLAYER_TEMP[playerid][pt_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_PHONE_NUMBER]);
				Result = db_query(Database, DB_Query);
				
				if(db_num_rows(Result)) phone_exists = true;
				db_free_result(Result);
				
				if(!phone_exists) return SendClientMessage(playerid, -1, "{00FF80}El número destino no es válido.");
				
				new to_playerid = INVALID_PLAYER_ID;
				for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
				{
					if(IsPlayerConnected(i))
					{
						if((PLAYER_TEMP[i][pt_GAME_STATE] == GAME_STATE_NORMAL || PLAYER_TEMP[i][pt_GAME_STATE] == GAME_STATE_DEAD) && PLAYER_PHONE[i][player_phone_NUMBER] == PLAYER_PHONE_BOOK[playerid][ PLAYER_TEMP[playerid][pt_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_PHONE_NUMBER])
						{
							to_playerid = i;
							break;
						}
					}
				}
				
				if(to_playerid == INVALID_PLAYER_ID) RegisterPhoneMessage(PLAYER_PHONE[playerid][player_phone_NUMBER], PLAYER_PHONE_BOOK[playerid][ PLAYER_TEMP[playerid][pt_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_PHONE_NUMBER], inputtext, true);
				else
				{
					RegisterPhoneMessage(PLAYER_PHONE[playerid][player_phone_NUMBER], PLAYER_PHONE_BOOK[playerid][ PLAYER_TEMP[playerid][pt_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_PHONE_NUMBER], inputtext);
					if(PLAYER_PHONE[to_playerid][player_phone_STATE] == PHONE_STATE_ON) SendClientMessageEx(to_playerid, -1, "{b7dd80}[NUEVO MENSAJE]: {e5f442}De: {FFFFFF}%s {b7dd80}Mensaje: {FFFFFF}%s", convertPhoneNumber(to_playerid, PLAYER_PHONE[playerid][player_phone_NUMBER]), inputtext);
				}
				SendClientMessageEx(playerid, -1, "Mensaje enviado a {7b9cd1}%s.", PLAYER_PHONE_BOOK[playerid][ PLAYER_TEMP[playerid][pt_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_NAME]);
			}
			else ShowDialog(playerid, DIALOG_PHONE_BOOK_OPTIONS);
			return 1;
		}
		case DIALOG_PHONE_SENT_MESSAGES:
		{
			if(!response) ShowDialog(playerid, DIALOG_PHONE);
			return 1;
		}
		case DIALOG_PHONE_RECEIVED_MESSAGES:
		{
			if(!response) ShowDialog(playerid, DIALOG_PHONE);
			return 1;
		}
		case DIALOG_CONFIRM_BUY_PROPERTY:
		{
			if(response)
			{
				if(PROPERTY_INFO[PLAYER_TEMP[playerid][pt_BUY_HOUSE_INDEX]][property_SOLD]) return SendClientMessage(playerid, -1, "{00FF80}Está propiedad ya está vendida.");
				if(PROPERTY_INFO[PLAYER_TEMP[playerid][pt_BUY_HOUSE_INDEX]][property_LEVEL] > ACCOUNT_INFO[playerid][ac_LEVEL]) return SendClientMessageEx(playerid, -1, "{00FF80}Necesitas ser como mínimo nivel %d para comprar esta propiedad.", PROPERTY_INFO[PLAYER_TEMP[playerid][pt_BUY_HOUSE_INDEX]][property_LEVEL]);
				if(PROPERTY_INFO[PLAYER_TEMP[playerid][pt_BUY_HOUSE_INDEX]][property_PRICE] > BANK_ACCOUNT[playerid][bank_account_BALANCE]) return SendClientMessage(playerid, -1, "{00FF80}No.");
				if(PROPERTY_INFO[PLAYER_TEMP[playerid][pt_BUY_HOUSE_INDEX]][property_VIP_LEVEL] > ACCOUNT_INFO[playerid][ac_SU]) return SendClientMessage(playerid, -1, "{00FF80}No.");
				if(PROPERTY_INFO[PLAYER_TEMP[playerid][pt_BUY_HOUSE_INDEX]][property_EXTRA] > ACCOUNT_INFO[playerid][ac_SD]) return SendClientMessage(playerid, -1, "{00FF80}No.");
	
				new DB_Query_update[350];
				if(!PROPERTY_INFO[PLAYER_TEMP[playerid][pt_BUY_HOUSE_INDEX]][property_EXTRA])
				{
					if(PLAYER_PHONE[playerid][player_phone_VALID])
					{
						new message[64]; format(message, sizeof message, "PROPIEDAD COMPRADA: -%s$", number_format_thousand(PROPERTY_INFO[PLAYER_TEMP[playerid][pt_BUY_HOUSE_INDEX]][property_PRICE]));
						RegisterPhoneMessage(6740, PLAYER_PHONE[playerid][player_phone_NUMBER], message);
						if(PLAYER_PHONE[playerid][player_phone_STATE] == PHONE_STATE_ON) SendClientMessageEx(playerid, -1, "{b7dd80}[NUEVO MENSAJE]: {e5f442}De: {FFFFFF}%s {b7dd80}Mensaje: {FFFFFF}%s", convertPhoneNumber(playerid, 6740), message);
					}
					
					BANK_ACCOUNT[playerid][bank_account_BALANCE] -= PROPERTY_INFO[PLAYER_TEMP[playerid][pt_BUY_HOUSE_INDEX]][property_PRICE];
				
					format
					(
						DB_Query_update, sizeof(DB_Query_update), 
						"UPDATE `BANK_ACCOUNTS` SET `BALANCE` = '%d' WHERE `ID_ACCOUNT` = '%d';",
						BANK_ACCOUNT[playerid][bank_account_BALANCE], BANK_ACCOUNT[playerid][bank_account_ID]
					);
					db_query(Database, DB_Query_update);
							
					RegisterBankAccountTransaction(BANK_ACCOUNT[playerid][bank_account_ID], BANK_TRANSACTION_BUY_PROPERTY, PROPERTY_INFO[PLAYER_TEMP[playerid][pt_BUY_HOUSE_INDEX]][property_PRICE]);
				}
				else
				{
					ACCOUNT_INFO[playerid][ac_SD] -= PROPERTY_INFO[PLAYER_TEMP[playerid][pt_BUY_HOUSE_INDEX]][property_EXTRA];
					
					format(DB_Query_update, sizeof(DB_Query_update), "UPDATE `CUENTA` SET `SD` = '%d' WHERE `ID` = '%d';", ACCOUNT_INFO[playerid][ac_SD], ACCOUNT_INFO[playerid][ac_ID]);
					db_query(Database, DB_Query_update);
					
					SendClientMessageEx(playerid, -1, "Has gastado %d "SERVER_COIN" en la compra de esta propiedad.", PROPERTY_INFO[PLAYER_TEMP[playerid][pt_BUY_HOUSE_INDEX]][property_EXTRA]);
				}
				
				
				PROPERTY_INFO[PLAYER_TEMP[playerid][pt_BUY_HOUSE_INDEX]][property_SOLD] = true;
				PROPERTY_INFO[PLAYER_TEMP[playerid][pt_BUY_HOUSE_INDEX]][property_CREW] = false;
				PROPERTY_INFO[PLAYER_TEMP[playerid][pt_BUY_HOUSE_INDEX]][property_OWNER_ID] = ACCOUNT_INFO[playerid][ac_ID];

				format
				(
					DB_Query_update, sizeof(DB_Query_update), 
					"INSERT INTO `PROPERTY_OWNER` (`ID_PROPERTY`, `ID_USER`, `PROPERTY_NAME`) VALUES ('%d', '%d', '%q');",
					PROPERTY_INFO[PLAYER_TEMP[playerid][pt_BUY_HOUSE_INDEX]][property_ID], ACCOUNT_INFO[playerid][ac_ID], PROPERTY_INFO[PLAYER_TEMP[playerid][pt_BUY_HOUSE_INDEX]][property_NAME]
				);
				db_query(Database, DB_Query_update);
				
				new label_str[256], info[3];
				format
				(
					label_str, 
					sizeof label_str, 
					"\
						Propiedad {58ACFA}#%d\n\n\
						{FFFFFF}Propietario: {58ACFA}%s\n\
						{FFFFFF}Presiona la tecla{58ACFA}'Y' {FFFFFF}para entrar.\
					", PROPERTY_INFO[PLAYER_TEMP[playerid][pt_BUY_HOUSE_INDEX]][property_ID], ACCOUNT_INFO[playerid][ac_NAME]
				);
				UpdateDynamic3DTextLabelText(PROPERTY_INFO[PLAYER_TEMP[playerid][pt_BUY_HOUSE_INDEX]][property_EXT_LABEL_ID], 0xFFFFFFFF, label_str);
				
				DestroyDynamicPickup(PROPERTY_INFO[PLAYER_TEMP[playerid][pt_BUY_HOUSE_INDEX]][property_EXT_PICKUP_ID]);
				PROPERTY_INFO[PLAYER_TEMP[playerid][pt_BUY_HOUSE_INDEX]][property_EXT_PICKUP_ID] = INVALID_STREAMER_ID;
				
				PROPERTY_INFO[PLAYER_TEMP[playerid][pt_BUY_HOUSE_INDEX]][property_EXT_PICKUP_ID] = CreateDynamicPickup(0, 1, PROPERTY_INFO[PLAYER_TEMP[playerid][pt_BUY_HOUSE_INDEX]][property_EXT_X], PROPERTY_INFO[PLAYER_TEMP[playerid][pt_BUY_HOUSE_INDEX]][property_EXT_Y], PROPERTY_INFO[PLAYER_TEMP[playerid][pt_BUY_HOUSE_INDEX]][property_EXT_Z], 0, PROPERTY_INFO[PLAYER_TEMP[playerid][pt_BUY_HOUSE_INDEX]][property_EXT_INTERIOR]);
				info[0] = PICKUP_TYPE_PROPERTY;
				info[1] = PLAYER_TEMP[playerid][pt_BUY_HOUSE_INDEX]; // Index
				info[2] = 2; // Pickup Exterior
				Streamer_SetArrayData(STREAMER_TYPE_PICKUP, PROPERTY_INFO[PLAYER_TEMP[playerid][pt_BUY_HOUSE_INDEX]][property_EXT_PICKUP_ID], E_STREAMER_EXTRA_ID, info);
		
				
				SendClientMessageEx(playerid, -1, "{6a98e2}¡Propiedad #%d comprada! {FFFFFF}Ahora puedes ir a tu casa, si no sabes donde es puedes marcarla con el {6a98e2}/GPS.", PROPERTY_INFO[PLAYER_TEMP[playerid][pt_BUY_HOUSE_INDEX]][property_ID]);
				PlayerPlaySoundEx(playerid, 1058, 0.0, 0.0, 0.0);
			}
			return 1;
		}
		case DIALOG_PLAYER_GPS_TURISTA:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0: ShowDialog(playerid, DIALOG_PLAYER_GPS_SITES);
					case 1: ShowDialog(playerid, DIALOG_PLAYER_GPS_WORKS);
				}
			}
			return 1;
		}
		case DIALOG_PLAYER_GPS:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0: ShowDialog(playerid, DIALOG_PLAYER_GPS_PLAYER);
					case 1: ShowDialog(playerid, DIALOG_PLAYER_GPS_PROPERTIES);
					case 2: ShowDialog(playerid, DIALOG_PLAYER_GPS_VEHICLES);
					case 3: ShowDialog(playerid, DIALOG_PLAYER_GPS_SITES);
					case 4: ShowDialog(playerid, DIALOG_PLAYER_GPS_WORKS);
					case 5: ShowDialog(playerid, DIALOG_PLAYER_GPS_NEGOCIOS);
					case 6:
					{
						if(PLAYER_TEMP[playerid][pt_GPS_MAP]) HidePlayerGpsMap(playerid);
						else ShowPlayerGpsMap(playerid);
					}
				}
			}
			return 1;
		}
		case DIALOG_PLAYER_GPS_PLAYER:
		{
			if(response)
			{
				if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == -1) return ShowDialog(playerid, dialogid);
				if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == MAX_PLAYER_GPS_SAVES + 10) return ShowDialog(playerid, DIALOG_PLAYER_GPS_PLAYER_ADD);
				if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == MAX_PLAYER_GPS_SAVES + 20) return ShowDialog(playerid, DIALOG_PLAYER_GPS_DELETE_ALL);
				
				PLAYER_TEMP[playerid][pt_GPS_PLAYER_SELECTED] = PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem];
				ShowDialog(playerid, DIALOG_PLAYER_GPS_PLAYER_OPTION);
			}
			else ShowDialog(playerid, DIALOG_PLAYER_GPS);
			return 1;
		}
		case DIALOG_PLAYER_GPS_PLAYER_ADD:
		{
			if(response)
			{
				if(isnull(inputtext))
				{ 
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if(strlen(inputtext) > 24)
				{
					SendClientMessage(playerid, -1, "{00FF80}Caracteres: 1-24.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				
				new slot = GetEmptyPlayer_GPS_Slot(playerid);
				if(slot == -1) return SendClientMessage(playerid, -1, "{00FF80}Memoria del GPS llena.");
			
				PLAYER_GPS[playerid][slot][player_gps_VALID] = true;
				format(PLAYER_GPS[playerid][slot][player_gps_NAME], 24, "%s", inputtext);
				GetPlayerPos(playerid, PLAYER_GPS[playerid][slot][player_gps_X], PLAYER_GPS[playerid][slot][player_gps_Y], PLAYER_GPS[playerid][slot][player_gps_Z]);
				PLAYER_GPS[playerid][slot][player_gps_WORLD] = GetPlayerVirtualWorld(playerid);
				PLAYER_GPS[playerid][slot][player_gps_INTERIOR] = GetPlayerInterior(playerid);
				RegisterNewPlayer_GPS_Site(playerid, slot);
				
				PlayerPlaySoundEx(playerid, 1058, 0.0, 0.0, 0.0);
				SendClientMessageEx(playerid, -1, "Nuevo sitio añadido al GPS con el nombre: {6a98e2}%s.", PLAYER_GPS[playerid][slot][player_gps_NAME]);
				ShowDialog(playerid, DIALOG_PLAYER_GPS_PLAYER);
			}
			else ShowDialog(playerid, DIALOG_PLAYER_GPS_PLAYER);
			return 1;
		}
		case DIALOG_PLAYER_GPS_PLAYER_OPTION:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0: SetPlayer_GPS_Checkpoint(playerid, PLAYER_GPS[playerid][PLAYER_TEMP[playerid][pt_GPS_PLAYER_SELECTED]][player_gps_X], PLAYER_GPS[playerid][PLAYER_TEMP[playerid][pt_GPS_PLAYER_SELECTED]][player_gps_Y], PLAYER_GPS[playerid][PLAYER_TEMP[playerid][pt_GPS_PLAYER_SELECTED]][player_gps_Z], PLAYER_GPS[playerid][PLAYER_TEMP[playerid][pt_GPS_PLAYER_SELECTED]][player_gps_WORLD], PLAYER_GPS[playerid][PLAYER_TEMP[playerid][pt_GPS_PLAYER_SELECTED]][player_gps_INTERIOR]);
					case 1: ShowDialog(playerid, DIALOG_PLAYER_GPS_CHANGE_NAME);
					case 2: ShowDialog(playerid, DIALOG_PLAYER_GPS_CONFIRM_DELET);
				}
			}
			else ShowDialog(playerid, DIALOG_PLAYER_GPS_PLAYER);
			return 1;
		}
		case DIALOG_PLAYER_GPS_CHANGE_NAME:
		{
			if(response)
			{
				if(isnull(inputtext))
				{ 
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if(strlen(inputtext) > 24)
				{
					SendClientMessage(playerid, -1, "{00FF80}Caracteres: 1-24.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				
				format(PLAYER_GPS[playerid][ PLAYER_TEMP[playerid][pt_GPS_PLAYER_SELECTED] ][player_gps_NAME], 24, "%s", inputtext);
				
				new DB_Query[160];
				format(DB_Query, sizeof DB_Query, "UPDATE `PLAYER_GPS` SET `NAME` = '%q' WHERE `ID` = '%d' AND `ID_USER` = '%d';", PLAYER_GPS[playerid][ PLAYER_TEMP[playerid][pt_GPS_PLAYER_SELECTED] ][player_gps_NAME], PLAYER_GPS[playerid][ PLAYER_TEMP[playerid][pt_GPS_PLAYER_SELECTED] ][player_gps_ID], ACCOUNT_INFO[playerid][ac_ID]);
				db_query(Database, DB_Query);
				
				PlayerPlaySoundEx(playerid, 1058, 0.0, 0.0, 0.0);
				SendClientMessage(playerid, -1, "Has modificado el nombre de este lugar correctamente");
				ShowDialog(playerid, DIALOG_PLAYER_GPS_PLAYER);
			}
			else ShowDialog(playerid, DIALOG_PLAYER_GPS_PLAYER_OPTION);
			return 1;
		}
		case DIALOG_PLAYER_GPS_CONFIRM_DELET:
		{
			if(response)
			{
				new DB_Query[110];
				format(DB_Query, sizeof DB_Query, "DELETE FROM `PLAYER_GPS` WHERE `ID` = '%d' AND `ID_USER` = '%d';", PLAYER_GPS[playerid][ PLAYER_TEMP[playerid][pt_GPS_PLAYER_SELECTED] ][player_gps_ID], ACCOUNT_INFO[playerid][ac_ID]);
				db_query(Database, DB_Query);
				
				PLAYER_GPS[playerid][ PLAYER_TEMP[playerid][pt_GPS_PLAYER_SELECTED] ][player_gps_VALID] = false;
				PLAYER_GPS[playerid][ PLAYER_TEMP[playerid][pt_GPS_PLAYER_SELECTED] ][player_gps_ID] = 0;
				format(PLAYER_GPS[playerid][ PLAYER_TEMP[playerid][pt_GPS_PLAYER_SELECTED] ][player_gps_NAME], 24, "");
				PLAYER_GPS[playerid][ PLAYER_TEMP[playerid][pt_GPS_PLAYER_SELECTED] ][player_gps_X] = 0.0;
				PLAYER_GPS[playerid][ PLAYER_TEMP[playerid][pt_GPS_PLAYER_SELECTED] ][player_gps_Y] = 0.0;
				PLAYER_GPS[playerid][ PLAYER_TEMP[playerid][pt_GPS_PLAYER_SELECTED] ][player_gps_Z] = 0.0;
				PLAYER_GPS[playerid][ PLAYER_TEMP[playerid][pt_GPS_PLAYER_SELECTED] ][player_gps_WORLD] = 0;
				PLAYER_GPS[playerid][ PLAYER_TEMP[playerid][pt_GPS_PLAYER_SELECTED] ][player_gps_INTERIOR] = 0;
				
				PlayerPlaySoundEx(playerid, 1058, 0.0, 0.0, 0.0);
				SendClientMessage(playerid, -1, "Has eliminado este lugar de tu GPS.");
				ShowDialog(playerid, DIALOG_PLAYER_GPS_PLAYER);
			}
			else ShowDialog(playerid, DIALOG_PLAYER_GPS_PLAYER_OPTION);
			return 1;
		}
		case DIALOG_PLAYER_GPS_DELETE_ALL:
		{
			if(response)
			{
				new DB_Query[90];
				format(DB_Query, sizeof DB_Query, "DELETE FROM `PLAYER_GPS` WHERE `ID_USER` = '%d';", ACCOUNT_INFO[playerid][ac_ID]);
				db_query(Database, DB_Query);
				
				new temp_PLAYER_GPS[Player_GPS_Enum]; 
				for(new i = 0; i != MAX_PLAYER_GPS_SAVES; i ++) PLAYER_GPS[playerid][i] = temp_PLAYER_GPS;
				
				SendClientMessage(playerid, -1, "{E6F8E0}Ha eliminado todos tus lugares guardados.");
			}
			else ShowDialog(playerid, DIALOG_PLAYER_GPS_PLAYER);
			return 1;
		}
		case DIALOG_PLAYER_GPS_SITES:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0: ShowDialog(playerid, DIALOG_PLAYER_GPS_SITE_FARMACIA);
					case 1: ShowDialog(playerid, DIALOG_PLAYER_GPS_SITE_0);
					case 2: ShowDialog(playerid, DIALOG_PLAYER_GPS_SITE_1);
					case 3: ShowDialog(playerid, DIALOG_PLAYER_GPS_SITE_2);
					case 4: ShowDialog(playerid, DIALOG_PLAYER_GPS_SITE_3);
					case 5: ShowDialog(playerid, DIALOG_PLAYER_GPS_SITE_4);
					case 6: ShowDialog(playerid, DIALOG_PLAYER_GPS_SITE_5);
					case 7: ShowDialog(playerid, DIALOG_PLAYER_GPS_SITE_6);
					case 8: ShowDialog(playerid, DIALOG_PLAYER_GPS_SITE_7);
					case 9: SetPlayer_GPS_Checkpoint(playerid, 1480.966918, -1772.065673, 18.795755, 0, 0);
					case 10: ShowDialog(playerid, DIALOG_PLAYER_GPS_SITE_8);
					case 11: SetPlayer_GPS_Checkpoint(playerid, 263.592102, 22.960014, 2.170951, 0, 0);
					case 12: SetPlayer_GPS_Checkpoint(playerid, 1821.2252,-1420.8545,13.6476, 0, 0);
				}
			}
			//else ShowDialog(playerid, DIALOG_PLAYER_GPS);
			return 1;
		}
		case DIALOG_PLAYER_GPS_WORKS:
		{
			if(response)
			{
				if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == -1) return true;
				if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == WORK_MEDIC) SendClientMessage(playerid, -1, "{E6F8E0}Este trabajo se puede conseguir en cualquier hospital.");
				else SetPlayer_GPS_Checkpoint(playerid, obtain_work_coords[ PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] ][obtain_work_MAP_ICON_X], obtain_work_coords[ PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] ][obtain_work_MAP_ICON_Y], obtain_work_coords[ PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] ][obtain_work_MAP_ICON_Z], 0, 0);
			}
			//else ShowDialog(playerid, DIALOG_PLAYER_GPS);
			return 1;
		}
		case DIALOG_PLAYER_GPS_SITE_0: //Hospitales
		{
			if(response) SetPlayer_GPS_Checkpoint(playerid, Hospital_Spawn_Positions[listitem][0], Hospital_Spawn_Positions[listitem][1], Hospital_Spawn_Positions[listitem][2], 0, 0);
			//else ShowDialog(playerid, DIALOG_PLAYER_GPS_SITES);
			return 1;
		}
		case DIALOG_PLAYER_GPS_SITE_1 .. DIALOG_PLAYER_GPS_SITE_4, DIALOG_PLAYER_GPS_SITE_8: //EE
		{
			if(response)
			{
				if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == -1) return ShowDialog(playerid, DIALOG_PLAYER_GPS);
				SetPlayer_GPS_Checkpoint(playerid, ENTER_EXIT[ PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] ][ee_EXT_X], ENTER_EXIT[ PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] ][ee_EXT_Y], ENTER_EXIT[ PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] ][ee_EXT_Z], ENTER_EXIT[ PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] ][ee_EXT_WORLD], ENTER_EXIT[ PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] ][ee_EXT_INTERIOR]);
			}
			//else ShowDialog(playerid, DIALOG_PLAYER_GPS_SITES);
			return 1;
		}
		case DIALOG_PLAYER_GPS_SITE_5: //Cajeros
		{
			if(response) SetPlayer_GPS_Checkpoint(playerid, ATM_BANK[listitem][atm_X], ATM_BANK[listitem][atm_Y], ATM_BANK[listitem][atm_Z], ATM_BANK[listitem][atm_WORLD], ATM_BANK[listitem][atm_INTERIOR]);
			//else ShowDialog(playerid, DIALOG_PLAYER_GPS_SITES);
			return 1;
		}
		case DIALOG_PLAYER_GPS_SITE_6: //Gasolineras
		{
			if(response) SetPlayer_GPS_Checkpoint(playerid, Fuel_Stations[listitem][0], Fuel_Stations[listitem][1], Fuel_Stations[listitem][2], 0, 0);
			//else ShowDialog(playerid, DIALOG_PLAYER_GPS_SITES);
			return 1;
		}
		case DIALOG_TRABAJOS_TELEPORTS:
		{
			if(response)
			{
				if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == -1) return true;
				else SetPlayerPosEx(playerid,obtain_work_coords[ PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] ][obtain_work_MAP_ICON_X], obtain_work_coords[ PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] ][obtain_work_MAP_ICON_Y], obtain_work_coords[ PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] ][obtain_work_MAP_ICON_Z],0.0,0,0,true);
			}
			return 1;
		}
		case DIALOG_PLAYER_GPS_SITE_7: //Concesionarios
		{
			if(response) SetPlayer_GPS_Checkpoint(playerid, SELL_VEHICLES_SHOPS_SPAWN[listitem][0], SELL_VEHICLES_SHOPS_SPAWN[listitem][1], SELL_VEHICLES_SHOPS_SPAWN[listitem][2], 0, 0);
			//else ShowDialog(playerid, DIALOG_PLAYER_GPS_SITES);
			return 1;
		}
		/*case DIALOG_PLAYER_GPS_PROPERTIES:
		{
			if(response)
			{
				if(PLAYER_TEMP[playerid][pt_PLAYER_GPS_SELECTED_PROPERTY][listitem] == -1) return ShowDialog(playerid, DIALOG_PLAYER_GPS);
				
				new index = GetPropertyIndexByID(PLAYER_TEMP[playerid][pt_PLAYER_GPS_SELECTED_PROPERTY][listitem]);
				if(index != -1) SetPlayer_GPS_Checkpoint(playerid, PROPERTY_INFO[index][property_EXT_X], PROPERTY_INFO[index][property_EXT_Y], PROPERTY_INFO[index][property_EXT_Z], 0, PROPERTY_INFO[index][property_EXT_INTERIOR]);
			}
			else ShowDialog(playerid, DIALOG_PLAYER_GPS);
			return 1;
		}*/
		case DIALOG_PLAYER_GPS_VEHICLES:
		{
			if(response)
			{
				if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == -1) return ShowDialog(playerid, DIALOG_PLAYER_GPS);
				
				if(!ACCOUNT_INFO[playerid][ac_SU])
				{
					if(!PLAYER_VEHICLES[ PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] ][player_vehicle_ACCESSIBLE])
					{
						SendClientMessage(playerid, -1, "{00FF80}No podrás usar este vehículo hasta que no consigas VIP.");
					}
				}
				
				new Float:pos[3];
				GetVehiclePos(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem], pos[0], pos[1], pos[2]);
				SetPlayer_GPS_Checkpoint(playerid, pos[0], pos[1], pos[2], 0, 0);
			}
			else ShowDialog(playerid, DIALOG_PLAYER_GPS);
			return 1;
		}
		case DIALOG_PROPERTY_OPTIONS:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0: ShowDialog(playerid, DIALOG_PROPERTY_NAME);
					case 1:
					{
						new total;
						for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
						{
							if(IsPlayerConnected(i))
							{
								if( CHARACTER_INFO[i][ch_STATE] == ROLEPLAY_STATE_GUEST_PROPERTY && CHARACTER_INFO[i][ch_INTERIOR_EXTRA] == PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_ID])
								{
									CHARACTER_INFO[i][ch_STATE] = ROLEPLAY_STATE_NORMAL;
									CHARACTER_INFO[i][ch_INTERIOR_EXTRA] = 0;
									PLAYER_TEMP[i][pt_PROPERTY_INDEX] = -1;
									SetPlayerPosEx(i, PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_EXT_X], PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_EXT_Y], PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_EXT_Z], PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_EXT_ANGLE], PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_EXT_INTERIOR], 0, PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_EXT_FREEZE], false);
									StopAudioStreamForPlayer(i);
									SendClientMessageEx(i, -1, "{bad2d8}%s {FFFFFF}te ha echado de su propiedad.", PLAYER_TEMP[playerid][pt_RP_NAME]);
									total ++;
								}
							}
						}
						if(total == 0) SendClientMessage(playerid, -1, "{00FF80}No hay nadie en tu propiedad.");
						else SendClientMessageEx(playerid, -1, "{E6F8E0}Has echado %d personas de tu propiedad.", total);
					}
					case 2:
					{
						if(!PLAYER_OBJECT[playerid][po_MP3])
						{
							SendClientMessageEx(playerid, -1, "{00FF80}No tienes ningún MP3, puedes ir a cualquier 24/7 para comprar uno.");
							PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
							return 1;
						}
						if(PLAYER_TEMP[playerid][pt_PLAYER_WAITING_MP3_HTTP]) return SendClientMessage(playerid, -1, "{00FF80}Espera que termine la búsqueda actual.");
						
						PLAYER_TEMP[playerid][pt_MUSIC_FOR_PROPERTY] = true;
						Auto_SendPlayerAction(playerid, "busca música en su MP3.");
						ShowDialog(playerid, DIALOG_PLAYER_MP3);
					}
					case 3:
					{
						if(!PLAYER_CREW[playerid][player_crew_VALID]) return SendClientMessage(playerid, -1, "{00FF80}No perteneces a ninguna banda.");
						if(!CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_PERMISSION][CREW_RANK_ADD_PROPERTIES]) return SendClientMessage(playerid, -1, "{00FF80}No tienes permiso.");
						
						
						for(new i = 0; i != MAX_TERRITORIES; i ++)
						{
							if(!TERRITORIES[i][territory_VALID]) continue;
							if(!TERRITORIES[i][territory_OCCUPIED]) continue;
							if(TERRITORIES[i][territory_CREW_ID] != PLAYER_CREW[playerid][player_crew_ID]) continue;
							
							if(IsPointInDynamicArea(TERRITORIES[i][territory_AREA], PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_EXT_X], PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_EXT_Y], PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_EXT_Z]))
							{
								PLAYER_TEMP[playerid][pt_PLAYER_TERRITORY_PRO] = i;
								ShowDialog(playerid, DIALOG_CREW_PROPERTY_CONFIRM);
								return 1;
							}
						}
						SendClientMessage(playerid, -1, "{00FF80}Esta propiedad no está dentro de un territorio de tu banda.");
					}
				}
			}
			return 1;
		}
		case DIALOG_PROPERTY_NAME:
		{
			if(response)
			{
				if(!PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_VALID]) return 1;
				if(PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_OWNER_ID] != ACCOUNT_INFO[playerid][ac_ID]) return 1;
				
				if(isnull(inputtext)) return ShowDialog(playerid, dialogid);
				if(strlen(inputtext) > 24)
				{
					ShowDialog(playerid, dialogid);
					SendClientMessage(playerid, 0xA9F5A9AA, "{00FF80}Caracteres: 1-24.");
					return 1;
				}
				
				format(PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_NAME], 24, "%s", inputtext);
				
				new DB_Query[200];
				format(DB_Query, sizeof DB_Query, "UPDATE `PROPERTY_OWNER` SET `PROPERTY_NAME` = '%q' WHERE `ID_PROPERTY` = '%d' AND `ID_USER` = '%d';", inputtext, PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_ID], ACCOUNT_INFO[playerid][ac_ID]);
				db_query(Database, DB_Query);
				
				SendClientMessageEx(playerid, -1, "{b5d1ff}Nombre de la propiedad actualizado a '%s'.", inputtext);
			}
			else ShowDialog(playerid, DIALOG_PROPERTY_OPTIONS);
			return 1;
		}
		case DIALOG_PLAYER_MP3:
		{
			if(response)
			{
				if(isnull(inputtext)) return ShowDialog(playerid, dialogid);
				
				ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Cargando ...", "Espera mientras buscamos resultados para su búsqueda ...", "X", "");
				
				new title[100 + 1];
				title = SpaceFix(inputtext);
				new str[180]; format(str, sizeof str, "superdanova.com/search-yb.php?limit=10&song_title=%s", title);
				
				PLAYER_TEMP[playerid][pt_PLAYER_WAITING_MP3_HTTP] = true;
				HTTP(playerid, HTTP_GET, str, "", "OnPlayerSongFound");
			}
			return 1;
		}
		case DIALOG_PLAYER_MP3_RESULTS:
		{
			if(response)
			{
				new url[128];
				format(url, 128, "http://www.convertmp3.io/fetch/?video=http://www.youtube.com/watch?v=%s", PLAYER_DIALOG_MP3_RESULT[playerid][listitem][videoID]);
				if(PLAYER_TEMP[playerid][pt_MUSIC_FOR_PROPERTY])
				{
					
					for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
					{
						if(IsPlayerConnected(i))
						{
							if( (CHARACTER_INFO[i][ch_STATE] == ROLEPLAY_STATE_OWN_PROPERTY || CHARACTER_INFO[i][ch_STATE] == ROLEPLAY_STATE_GUEST_PROPERTY) && CHARACTER_INFO[i][ch_INTERIOR_EXTRA] == CHARACTER_INFO[playerid][ch_INTERIOR_EXTRA])
							{
								PlayAudioStreamForPlayerEx(i, url);
								SendClientMessageEx(i, -1, "{E6F8E0}Reproduciendo {90C3D4}'%s' {E6F8E0}usa {CCFF00}/stop {E6F8E0}para parar la música.", PLAYER_DIALOG_MP3_RESULT[playerid][listitem][yt_title]);
							}
						}
					}
					PLAYER_TEMP[playerid][pt_MUSIC_FOR_PROPERTY] = false;
					Auto_SendPlayerAction(playerid, "pone música en su propiedad.");
				}
				else if(PLAYER_TEMP[playerid][pt_MUSIC_FOR_VEHICLE])
				{
					
					for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
					{
						if(IsPlayerConnected(i))
						{
							if(IsPlayerInAnyVehicle(i))
							{
								if(GetPlayerVehicleID(playerid) == GetPlayerVehicleID(i))
								{
									PlayAudioStreamForPlayerEx(i, url);
									SendClientMessageEx(i, -1, "{E6F8E0}Reproduciendo {90C3D4}'%s' {E6F8E0}usa {CCFF00}/stop {E6F8E0}para parar la música.", PLAYER_DIALOG_MP3_RESULT[playerid][listitem][yt_title]);
								}
							}
						}
					}
					PLAYER_TEMP[playerid][pt_MUSIC_FOR_VEHICLE] = false;
					if(PLAYER_VEHICLES[ GetPlayerVehicleID(playerid) ][player_vehicle_OWNER_ID] == ACCOUNT_INFO[playerid][ac_ID]) Auto_SendPlayerAction(playerid, "pone música en su vehículo.");
					else Auto_SendPlayerAction(playerid, "pone música en el vehículo.");
				}
				else
				{
					PlayAudioStreamForPlayerEx(playerid, url);
					SendClientMessageEx(playerid, -1, "{E6F8E0}Reproduciendo {90C3D4}'%s' {E6F8E0}usa {CCFF00}/stop {E6F8E0}para parar la música.", PLAYER_DIALOG_MP3_RESULT[playerid][listitem][yt_title]);
					Auto_SendPlayerAction(playerid, "escucha música de su MP3 en sus auriculares.");
				}
			}
			return 1;
		}
		case DIALOG_BUY_VEHICLE:
		{
			if(response)
			{
				if(PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] == INVALID_VEHICLE_ID) return 1;
				if(!GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][gb_vehicle_VALID]) return 1;
				if(GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][gb_vehicle_TYPE] != VEHICLE_TYPE_SELL) return 1;
				if(!SELL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_VALID]) return 1;
				if(SELL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_VIP_LEVEL] > ACCOUNT_INFO[playerid][ac_SU]) return 1;
				if(SELL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_LEVEL] > ACCOUNT_INFO[playerid][ac_LEVEL]) return 1;
				if(BANK_ACCOUNT[playerid][bank_account_ID] == 0) return 1;
				if(SELL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_PRICE] > BANK_ACCOUNT[playerid][bank_account_BALANCE]) return 1;
				if(SELL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_EXTRA] > ACCOUNT_INFO[playerid][ac_SD]) return 1;
			
				new vid = AddPersonalVehicle
				(
					playerid,
					GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][gb_vehicle_MODELID],
					SELL_VEHICLES_SHOPS_SPAWN[ SELL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_SHOP] ][0],
					SELL_VEHICLES_SHOPS_SPAWN[ SELL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_SHOP] ][1],
					SELL_VEHICLES_SHOPS_SPAWN[ SELL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_SHOP] ][2],
					SELL_VEHICLES_SHOPS_SPAWN[ SELL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_SHOP] ][3],
					GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][gb_vehicle_COLOR_1],
					GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][gb_vehicle_COLOR_2],
					VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][gb_vehicle_MODELID] - 400 ][vehicle_info_MAX_GAS],
					VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][gb_vehicle_MODELID] - 400 ][vehicle_info_MAX_ACEITE]
				);
				if(!vid) return SendClientMessage(playerid, -1, "{00FF80}No se pueden añadir más vehículos.");
				
				if(SELL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_EXTRA])
				{
					ACCOUNT_INFO[playerid][ac_SD] -= SELL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_EXTRA];
					
					new DB_Query_update[160];
					format(DB_Query_update, sizeof(DB_Query_update), "UPDATE `CUENTA` SET `SD` = '%d' WHERE `ID` = '%d';", ACCOUNT_INFO[playerid][ac_SD], ACCOUNT_INFO[playerid][ac_ID]);
					db_query(Database, DB_Query_update);
					
					SendClientMessageEx(playerid, -1, "Has gastado %d "SERVER_COIN" en la compra de este vehículo.", SELL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_EXTRA]);
				}
				else
				{
					if(PLAYER_PHONE[playerid][player_phone_VALID])
					{
						new message[64]; format(message, sizeof message, "VEHICULO COMPRADO: -%s$", number_format_thousand(SELL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_PRICE]));
						RegisterPhoneMessage(6740, PLAYER_PHONE[playerid][player_phone_NUMBER], message);
						if(PLAYER_PHONE[playerid][player_phone_STATE] == PHONE_STATE_ON) SendClientMessageEx(playerid, -1, "{b7dd80}[NUEVO MENSAJE]: {e5f442}De: {FFFFFF}%s {b7dd80}Mensaje: {FFFFFF}%s", convertPhoneNumber(playerid, 6740), message);
					}
					
					BANK_ACCOUNT[playerid][bank_account_BALANCE] -= SELL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_PRICE];
					new DB_Query_update[160];
					format(DB_Query_update, sizeof(DB_Query_update), "UPDATE `BANK_ACCOUNTS` SET `BALANCE` = '%d' WHERE `ID_ACCOUNT` = '%d';", BANK_ACCOUNT[playerid][bank_account_BALANCE], BANK_ACCOUNT[playerid][bank_account_ID]);
					db_query(Database, DB_Query_update);
					RegisterBankAccountTransaction(BANK_ACCOUNT[playerid][bank_account_ID], BANK_TRANSACTION_BUY_VEHICLE, SELL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_PRICE]);
				}	
				
				SendClientMessage(playerid, -1, "{6a98e2}¡Vehículo comprado! {FFFFFF}Utiliza {6a98e2}/ayuda vehiculos {FFFFFF}para ver que puedes hacer con tu vehículo.");
				PlayerPlaySoundEx(playerid, 1058, 0.0, 0.0, 0.0);
				
				new Float:pos[4];
				pos[0] = SELL_VEHICLES_SHOPS_SPAWN[ SELL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_SHOP] ][0];
				pos[1] = SELL_VEHICLES_SHOPS_SPAWN[ SELL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_SHOP] ][1];
				pos[2] = SELL_VEHICLES_SHOPS_SPAWN[ SELL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_SHOP] ][2];
				pos[3] = SELL_VEHICLES_SHOPS_SPAWN[ SELL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_SHOP] ][3];
				
				pos[0] += (2.0 * floatsin(-(pos[3] + 90.0), degrees));
				pos[1] += (2.0 * floatcos(-(pos[3] + 90.0), degrees));
				SetPlayerPosEx(playerid, pos[0], pos[1], pos[2], pos[3], 0, 0);
				
				if(!ACCOUNT_INFO[playerid][ac_SU]) ReLockPlayerVehicles(playerid);
			}
			return 1;
		}
		case DIALOG_NOTARY:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						/*PLAYER_TEMP[playerid][pt_NOTARY_OPTION] = 0;
						ShowDialog(playerid, DIALOG_NOTARY_SELECT_PROPERTY);*/
						ManageSellNegocio(playerid);
						MensajesAyuda(playerid,"Selecciona el negocio que vas a vender");
					}
					case 1:
					{
						PLAYER_TEMP[playerid][pt_NOTARY_OPTION] = 0;
						ShowDialog(playerid, DIALOG_NOTARY_SELECT_VEHICLE);
					}
					case 2:
					{
						PLAYER_TEMP[playerid][pt_NOTARY_OPTION] = 1;
						ShowDialog(playerid, DIALOG_NOTARY_SELECT_PROPERTY);
					}
					case 3:
					{
						PLAYER_TEMP[playerid][pt_NOTARY_OPTION] = 1;
						ShowDialog(playerid, DIALOG_NOTARY_SELECT_VEHICLE);
					}
				}
			}
			return 1;
		}
		case DIALOG_NOTARY_SELECT_PROPERTY:
		{
			if(response)
			{
				if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == -1) return 1;
				
				PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] = GetPropertyIndexByID(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem]);
				if(PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] == -1) return SendClientMessage(playerid, -1, "PROPIEDAD ID no encontrada.");
				
				switch(PLAYER_TEMP[playerid][pt_NOTARY_OPTION])
				{
					case 0: ShowDialog(playerid, DIALOG_PROPERTY_BANK_SELL);
					case 1: ShowDialog(playerid, DIALOG_PROPERTY_SELL_PRICE);
					case 2:
					{
						PLAYER_TEMP[playerid][pt_SHOP_ADD_TYPE] = SHOP_ARTICLE_TYPE_PROPERTY;
						PLAYER_TEMP[playerid][pt_SHOP_ADD_MODELID] = 1273;
						PLAYER_TEMP[playerid][pt_SHOP_ADD_VCOL1] = 0;
						PLAYER_TEMP[playerid][pt_SHOP_ADD_VCOL2] = 0;
						ShowDialog(playerid, DIALOG_SHOP_ADD_TEXT);
					}
				}
			}
			else
			{
				if(PLAYER_TEMP[playerid][pt_NOTARY_OPTION] == 2) ShowDialog(playerid, DIALOG_SHOP_ADD);
				else ShowDialog(playerid, DIALOG_NOTARY);
			}
			return 1;
		}
		case DIALOG_PROPERTY_BANK_SELL:
		{
			if(response)
			{
				if(!PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_VALID]) return 1;
				if(PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_OWNER_ID] != ACCOUNT_INFO[playerid][ac_ID]) return 1;
				if(BANK_ACCOUNT[playerid][bank_account_ID] == 0) return SendClientMessage(playerid, -1, "{00FF80}Necesitas tener una cuenta bancaria para vender la propiedad.");

				PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_SOLD] = false;
				PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_CREW] = false;
				PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_OWNER_ID] = 0;
				format(PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_NAME], 24, "PROPIEDAD %d", PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_ID]);
				
				new info[3];
				UpdateUnnocupiedPropertyLabel(PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED]);
				
				DestroyDynamicPickup(PROPERTY_INFO[PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED]][property_EXT_PICKUP_ID]);
				PROPERTY_INFO[PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED]][property_EXT_PICKUP_ID] = INVALID_STREAMER_ID;
				
				PROPERTY_INFO[PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED]][property_EXT_PICKUP_ID] = CreateDynamicPickup(1273, 1, PROPERTY_INFO[PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED]][property_EXT_X], PROPERTY_INFO[PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED]][property_EXT_Y], PROPERTY_INFO[PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED]][property_EXT_Z], 0, PROPERTY_INFO[PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED]][property_EXT_INTERIOR]);
				info[0] = PICKUP_TYPE_PROPERTY;
				info[1] = PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED]; // Index
				info[2] = 2; // Pickup Exterior
				Streamer_SetArrayData(STREAMER_TYPE_PICKUP, PROPERTY_INFO[PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED]][property_EXT_PICKUP_ID], E_STREAMER_EXTRA_ID, info);
				
				new Float:price, payment;
				price = PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_PRICE_BASE];
				if(ACCOUNT_INFO[playerid][ac_SU]) payment = floatround( floatmul(price, 0.50) );
				else payment = floatround( floatmul(price, 0.25) );
				
				if(PLAYER_PHONE[playerid][player_phone_VALID])
				{
					new message[64]; format(message, sizeof message, "PROPIEDAD VENDIDA: +%s$", number_format_thousand(payment));
					RegisterPhoneMessage(6740, PLAYER_PHONE[playerid][player_phone_NUMBER], message);
					if(PLAYER_PHONE[playerid][player_phone_STATE] == PHONE_STATE_ON) SendClientMessageEx(playerid, -1, "{b7dd80}[NUEVO MENSAJE]: {e5f442}De: {FFFFFF}%s {b7dd80}Mensaje: {FFFFFF}%s", convertPhoneNumber(playerid, 6740), message);
				}
				
				BANK_ACCOUNT[playerid][bank_account_BALANCE] += payment;
				
				new DB_Query_update[350];
				format(DB_Query_update, sizeof(DB_Query_update), "\
					UPDATE `BANK_ACCOUNTS` SET `BALANCE` = '%d' WHERE `ID_ACCOUNT` = '%d';\
					DELETE FROM `PROPERTY_OWNER` WHERE `ID_PROPERTY` = '%d' AND `ID_USER` = '%d';\
				",
					BANK_ACCOUNT[playerid][bank_account_BALANCE], BANK_ACCOUNT[playerid][bank_account_ID],
					PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_ID], ACCOUNT_INFO[playerid][ac_ID]
				);
				db_query(Database, DB_Query_update);
						
				RegisterBankAccountTransaction(BANK_ACCOUNT[playerid][bank_account_ID], BANK_TRANSACTION_SOLD_PROPERTY, payment);
				SendClientMessageEx(playerid, -1, "{E6F8E0}Has vendido esta propiedad, has recibido %s$ en tu cuenta bancaria.", number_format_thousand(payment));
				PlayerPlaySoundEx(playerid, 1058, 0.0, 0.0, 0.0);
			
			}
			else ShowDialog(playerid, DIALOG_NOTARY_SELECT_PROPERTY);
			return 1;
		}
		case DIALOG_PROPERTY_SELL_PRICE:
		{
			if(response)
			{
				if(sscanf(inputtext, "d", inputtext[0])) return ShowDialog(playerid, dialogid);
				
				new Float:price, min_price, max_price;
				price = PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_PRICE];
				min_price = floatround( floatmul(price, 0.15) );
				max_price = floatround( floatmul(price, 6.0) );
				
				if(inputtext[0] < min_price || inputtext[0] > max_price)
				{
					SendClientMessage(playerid, -1, "{00FF80}Este precio no está dentro del rango ofrecido.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				
				PLAYER_TEMP[playerid][pt_NOTARY_PRICE] = inputtext[0];
				ShowDialog(playerid, DIALOG_PROPERTY_SELL_TO_PLAYER);
			}
			else ShowDialog(playerid, DIALOG_NOTARY_SELECT_PROPERTY);
			return 1;
		}
		case DIALOG_PROPERTY_SELL_TO_PLAYER:
		{
			if(response)
			{
				if(sscanf(inputtext, "u", inputtext[0])) return ShowDialog(playerid, dialogid);
				
				if(!IsPlayerConnected(inputtext[0])) return SendClientMessage(playerid, -1, "{00FF80}Error, el comprador está desconectado.");
				if(inputtext[0] == playerid) return SendClientMessage(playerid, -1, "{00FF80}¿Pero como te vas a vender algo a ti mismo?");
				if(PLAYER_TEMP[inputtext[0]][pt_GAME_STATE] != GAME_STATE_NORMAL) return SendClientMessage(playerid, -1, "{00FF80}Error, el comprador no está disponible.");
				
				if(ENTER_EXIT[ PLAYER_TEMP[inputtext[0]][pt_INTERIOR_INDEX] ][ee_INTERIOR_TYPE] != INTERIOR_CITY_HALL_LS) return SendClientMessage(playerid, 0xA9F5A9AA, "El comprador no está en la sala.");
				if(!IsPlayerInRangeOfPoint(inputtext[0], 3.0, -474.596282, 289.679107, 2004.584960)) return SendClientMessage(playerid, 0xA9F5A9AA, "El comprador no está en la sala.");
				if(BANK_ACCOUNT[inputtext[0]][bank_account_ID] == 0) return SendClientMessage(playerid, 0xA9F5A9AA, "El comprador no tiene cuenta bancaria.");
				
				new DBResult:Result, DB_Query[120], player_properties;
				format(DB_Query, sizeof(DB_Query), "SELECT COUNT() AS `PROPERTIES` FROM `PROPERTY_OWNER` WHERE `ID_USER` = '%d';", ACCOUNT_INFO[inputtext[0]][ac_ID]);
				Result = db_query(Database, DB_Query);
				if(db_num_rows(Result)) player_properties = db_get_field_assoc_int(Result, "PROPERTIES");
				db_free_result(Result);
				
				if(player_properties >= MAX_SU_PROPERTIES) return SendClientMessage(playerid, -1, "{00FF80}El comprador no puede adquirir más propiedades.");
				if(!ACCOUNT_INFO[inputtext[0]][ac_SU])
				{
					if(player_properties >= MAX_NU_PROPERTIES) return SendClientMessage(playerid, -1, "{00FF80}El comprador no puede adquirir más propiedades.");
				}
				
				if(ACCOUNT_INFO[inputtext[0]][ac_LEVEL] < 2) return SendClientMessage(playerid, -1, "{00FF80}Error, el comprador necesita ser al menos nivel 2.");
				if(PLAYER_TEMP[playerid][pt_NOTARY_PRICE] > BANK_ACCOUNT[inputtext[0]][bank_account_BALANCE]) return SendClientMessage(playerid, -1, "{00FF80}Error, el comprador no tiene el dinero que pides.");
				
				SendClientMessage(playerid, -1, "{E6F8E0}Tu oferta se ha enviado al comprador, espera para ver si la acepta.");
				
				new action[64]; format(action, sizeof action, "quiere llegar a un acuerdo con %s.", PLAYER_TEMP[inputtext[0]][pt_RP_NAME]);
				Auto_SendPlayerAction(playerid, action);
				
				PLAYER_TEMP[inputtext[0]][pt_PLAYER_PROPERTY_SELECTED] = PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED];
				PLAYER_TEMP[inputtext[0]][pt_NOTARY_PRICE] = PLAYER_TEMP[playerid][pt_NOTARY_PRICE];
				PLAYER_TEMP[inputtext[0]][pt_NOTARY_TO_PLAYER] = playerid;
				PLAYER_TEMP[playerid][pt_NOTARY_TO_PLAYER] = inputtext[0];
				
				ShowDialog(inputtext[0], DIALOG_SELL_CONFIRM_PROPERTY);
			}
			else ShowDialog(playerid, DIALOG_PROPERTY_SELL_PRICE);
			return 1;
		}
		case DIALOG_SELL_CONFIRM_PROPERTY:
		{
			if(response)
			{
				if(!IsPlayerConnected(PLAYER_TEMP[playerid][pt_NOTARY_TO_PLAYER])) return SendClientMessage(playerid, -1, "{00FF80}El vendedor se ha desconectado.");
				if(PLAYER_TEMP[ PLAYER_TEMP[playerid][pt_NOTARY_TO_PLAYER] ][pt_NOTARY_TO_PLAYER] != playerid) return SendClientMessage(playerid, -1, "{00FF80}El vendedor ya no está.");
				if(PLAYER_TEMP[ PLAYER_TEMP[playerid][pt_NOTARY_TO_PLAYER] ][pt_GAME_STATE] != GAME_STATE_NORMAL) return SendClientMessage(playerid, -1, "{00FF80}Error, el vendedor no está disponible.");
				if(ENTER_EXIT[ PLAYER_TEMP[ PLAYER_TEMP[playerid][pt_NOTARY_TO_PLAYER] ][pt_INTERIOR_INDEX] ][ee_INTERIOR_TYPE] != INTERIOR_CITY_HALL_LS) return SendClientMessage(playerid, 0xA9F5A9AA, "El vendedor no está en la sala.");
				if(!IsPlayerInRangeOfPoint(PLAYER_TEMP[playerid][pt_NOTARY_TO_PLAYER], 3.0, -474.596282, 289.679107, 2004.584960)) return SendClientMessage(playerid, 0xA9F5A9AA, "El vendedor no está en la sala.");
				if(BANK_ACCOUNT[ PLAYER_TEMP[playerid][pt_NOTARY_TO_PLAYER] ][bank_account_ID] == 0) return SendClientMessage(playerid, 0xA9F5A9AA, "El vendedor no tiene cuenta bancaria.");
				
				// Traspasar
				new label_str[256];
				format
				(
					label_str, 
					sizeof label_str, 
					"\
						Propiedad {58ACFA}#%d\n\n\
						{FFFFFF}Propietario: {58ACFA}%s\n\
						{FFFFFF}Presiona la tecla{58ACFA}'Y' {FFFFFF}para entrar.\
					", PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_ID], ACCOUNT_INFO[playerid][ac_NAME]
				);
				UpdateDynamic3DTextLabelText(PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_EXT_LABEL_ID], 0xFFFFFFFF, label_str);
				
				PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_OWNER_ID] = ACCOUNT_INFO[playerid][ac_ID];
				new DB_Query_update[350];
				format(DB_Query_update, sizeof(DB_Query_update), "UPDATE `PROPERTY_OWNER` SET `ID_USER` = '%d' WHERE `ID_PROPERTY` = '%d';",
					ACCOUNT_INFO[playerid][ac_ID],
					PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_ID]
				);
				db_query(Database, DB_Query_update);
				
				
				// Banco
				new price = PLAYER_TEMP[playerid][pt_NOTARY_PRICE], seller = PLAYER_TEMP[playerid][pt_NOTARY_TO_PLAYER];
				
				if(PLAYER_PHONE[playerid][player_phone_VALID])
				{
					new message[64]; format(message, sizeof message, "PROPIEDAD COMPRADA: -%s$", number_format_thousand(price));
					RegisterPhoneMessage(6740, PLAYER_PHONE[playerid][player_phone_NUMBER], message);
					if(PLAYER_PHONE[playerid][player_phone_STATE] == PHONE_STATE_ON) SendClientMessageEx(playerid, -1, "{b7dd80}[NUEVO MENSAJE]: {e5f442}De: {FFFFFF}%s {b7dd80}Mensaje: {FFFFFF}%s", convertPhoneNumber(playerid, 6740), message);
				}
				if(PLAYER_PHONE[seller][player_phone_VALID])
				{
					new message[64]; format(message, sizeof message, "PROPIEDAD VENDIDA: +%s$", number_format_thousand(price));
					RegisterPhoneMessage(6740, PLAYER_PHONE[seller][player_phone_NUMBER], message);
					if(PLAYER_PHONE[seller][player_phone_STATE] == PHONE_STATE_ON) SendClientMessageEx(seller, -1, "{b7dd80}[NUEVO MENSAJE]: {e5f442}De: {FFFFFF}%s {b7dd80}Mensaje: {FFFFFF}%s", convertPhoneNumber(seller, 6740), message);
				}
				
				BANK_ACCOUNT[playerid][bank_account_BALANCE] -= price;
				RegisterBankAccountTransaction(BANK_ACCOUNT[playerid][bank_account_ID], BANK_TRANSACTION_BUY_PROPERTY, price);
				
				BANK_ACCOUNT[seller][bank_account_BALANCE] += price;
				RegisterBankAccountTransaction(BANK_ACCOUNT[seller][bank_account_ID], BANK_TRANSACTION_SOLD_PROPERTY, price);
				
				
				format(DB_Query_update, sizeof(DB_Query_update), 
					"\
						UPDATE `BANK_ACCOUNT` SET `BALANCE` = '%d' WHERE `ID_ACCOUNT` = '%d';\
						UPDATE `BANK_ACCOUNT` SET `BALANCE` = '%d' WHERE `ID_ACCOUNT` = '%d';\
					",
						BANK_ACCOUNT[playerid][bank_account_BALANCE], BANK_ACCOUNT[playerid][bank_account_ID],
						BANK_ACCOUNT[seller][bank_account_BALANCE], BANK_ACCOUNT[seller][bank_account_ID]
				);
				db_query(Database, DB_Query_update);
				
				
				SendClientMessageEx(playerid, -1, "{6a98e2}¡Propiedad #%d comprada! {FFFFFF}Ahora puedes ir a tu casa, si no sabes donde es puedes marcarla con el {6a98e2}/GPS.", PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_ID]);
				SendClientMessageEx(seller, -1, "{6a98e2}¡Propiedad #%d vendida! {FFFFFF}Has recibido {d1f442}%s$ {FFFFFF}en tu cuenta bancaria.", PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_ID], number_format_thousand(price));
				PlayerPlaySoundEx(seller, 1058, 0.0, 0.0, 0.0);
				PlayerPlaySoundEx(playerid, 1058, 0.0, 0.0, 0.0);
				
				new action[64]; format(action, sizeof action, "y %s han llegado a un acuerdo.", PLAYER_TEMP[seller][pt_RP_NAME]);
				Auto_SendPlayerAction(playerid, action);
			}
			return 1;
		}
		case DIALOG_NOTARY_SELECT_VEHICLE:
		{
			if(response)
			{
				 
				if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == -1) return 1;
				PLAYER_TEMP[playerid][pt_PLAYER_VEHICLE_SELECTED] = PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem];
				
				switch(PLAYER_TEMP[playerid][pt_NOTARY_OPTION])
				{
					case 0: ShowDialog(playerid, DIALOG_VEHICLE_BANK_SELL);
					case 1: ShowDialog(playerid, DIALOG_VEHICLE_SELL_PRICE);
					case 2:
					{
						PLAYER_TEMP[playerid][pt_SHOP_ADD_TYPE] = SHOP_ARTICLE_TYPE_VEHICLE;
						PLAYER_TEMP[playerid][pt_SHOP_ADD_MODELID] = GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_PLAYER_VEHICLE_SELECTED] ][gb_vehicle_MODELID];
						PLAYER_TEMP[playerid][pt_SHOP_ADD_VCOL1] = GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_PLAYER_VEHICLE_SELECTED] ][gb_vehicle_COLOR_1];
						PLAYER_TEMP[playerid][pt_SHOP_ADD_VCOL2] = GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_PLAYER_VEHICLE_SELECTED] ][gb_vehicle_COLOR_2];
						ShowDialog(playerid, DIALOG_SHOP_ADD_TEXT);
					}
				}
			}
			else
			{
				if(PLAYER_TEMP[playerid][pt_NOTARY_OPTION] == 2) ShowDialog(playerid, DIALOG_SHOP_ADD);
				else ShowDialog(playerid, DIALOG_NOTARY);
			}
			return 1;
		}
		case DIALOG_VEHICLE_BANK_SELL:
		{
			if(response)
			{
				if(!GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_PLAYER_VEHICLE_SELECTED] ][gb_vehicle_VALID]) return 1;
				if(PLAYER_VEHICLES[ PLAYER_TEMP[playerid][pt_PLAYER_VEHICLE_SELECTED] ][player_vehicle_OWNER_ID] != ACCOUNT_INFO[playerid][ac_ID]) return 1;
				if(BANK_ACCOUNT[playerid][bank_account_ID] == 0) return SendClientMessage(playerid, -1, "{00FF80}Necesitas tener una cuenta bancaria para vender el vehículo.");

				new Float:price, payment;
				price = VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_PLAYER_VEHICLE_SELECTED] ][gb_vehicle_MODELID] - 400 ][vehicle_info_PRICE];
				if(ACCOUNT_INFO[playerid][ac_SU]==1) payment = floatround( floatmul(price, 0.50) );
				if(ACCOUNT_INFO[playerid][ac_SU]>=2) payment = floatround( floatmul(price, 0.100) );
				if(ACCOUNT_INFO[playerid][ac_SU]==0) payment = floatround( floatmul(price, 0.25) );
				//else payment = floatround( floatmul(price, 0.25) );
				
				//Destruir veh
				new DB_Query_update[350];
				format(DB_Query_update, sizeof(DB_Query_update), "DELETE FROM `PLAYER_VEHICLES` WHERE `ID` = '%d';", PLAYER_VEHICLES[ PLAYER_TEMP[playerid][pt_PLAYER_VEHICLE_SELECTED] ][player_vehicle_ID]);
				db_query(Database, DB_Query_update);
				
				DestroyVehicleEx(PLAYER_TEMP[playerid][pt_PLAYER_VEHICLE_SELECTED]);
				
				
				if(PLAYER_PHONE[playerid][player_phone_VALID])
				{
					new message[64]; format(message, sizeof message, "VEHICULO VENDIDO: +%s$", number_format_thousand(payment));
					RegisterPhoneMessage(6740, PLAYER_PHONE[playerid][player_phone_NUMBER], message);
					if(PLAYER_PHONE[playerid][player_phone_STATE] == PHONE_STATE_ON) SendClientMessageEx(playerid, -1, "{b7dd80}[NUEVO MENSAJE]: {e5f442}De: {FFFFFF}%s {b7dd80}Mensaje: {FFFFFF}%s", convertPhoneNumber(playerid, 6740), message);
				}
				BANK_ACCOUNT[playerid][bank_account_BALANCE] += payment;
				format(DB_Query_update, sizeof(DB_Query_update), "UPDATE `BANK_ACCOUNTS` SET `BALANCE` = '%d' WHERE `ID_ACCOUNT` = '%d';", BANK_ACCOUNT[playerid][bank_account_BALANCE], BANK_ACCOUNT[playerid][bank_account_ID]);
				db_query(Database, DB_Query_update);
				RegisterBankAccountTransaction(BANK_ACCOUNT[playerid][bank_account_ID], BANK_TRANSACTION_SOLD_VEHICLE, payment);
				
				SendClientMessageEx(playerid, -1, "{E6F8E0}Has vendido este vehículo, has recibido %s$ en tu cuenta bancaria.", number_format_thousand(payment));
				PlayerPlaySoundEx(playerid, 1058, 0.0, 0.0, 0.0);
				
				if(!ACCOUNT_INFO[playerid][ac_SU]) ReLockPlayerVehicles(playerid);
			}
			else ShowDialog(playerid, DIALOG_NOTARY_SELECT_VEHICLE);
			return 1;
		}
		case DIALOG_VEHICLE_SELL_PRICE:
		{
			if(response)
			{
				if(sscanf(inputtext, "d", inputtext[0])) return ShowDialog(playerid, dialogid);
				
				new Float:price, min_price, max_price;
				price = VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_PLAYER_VEHICLE_SELECTED] ][gb_vehicle_MODELID] - 400 ][vehicle_info_PRICE];
				min_price = floatround( floatmul(price, 0.15) );
				max_price = floatround( floatmul(price, 6.0) );
				
				if(inputtext[0] < min_price || inputtext[0] > max_price)
				{
					SendClientMessage(playerid, -1, "{00FF80}Este precio no está dentro del rango ofrecido.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				
				PLAYER_TEMP[playerid][pt_NOTARY_PRICE] = inputtext[0];
				ShowDialog(playerid, DIALOG_VEHICLE_SELL_TO_PLAYER);
			}
			else ShowDialog(playerid, DIALOG_NOTARY_SELECT_VEHICLE);
			return 1;
		}
		case DIALOG_VEHICLE_SELL_TO_PLAYER:
		{
			if(response)
			{
				if(sscanf(inputtext, "u", inputtext[0])) return ShowDialog(playerid, dialogid);
				
				if(!IsPlayerConnected(inputtext[0])) return SendClientMessage(playerid, -1, "{00FF80}Error, el comprador está desconectado.");
				if(inputtext[0] == playerid) return SendClientMessage(playerid, -1, "{00FF80}¿Pero como te vas a vender algo a ti mismo?");
				if(PLAYER_TEMP[inputtext[0]][pt_GAME_STATE] != GAME_STATE_NORMAL) return SendClientMessage(playerid, -1, "{00FF80}Error, el comprador no está disponible.");
				
				if(ENTER_EXIT[ PLAYER_TEMP[inputtext[0]][pt_INTERIOR_INDEX] ][ee_INTERIOR_TYPE] != INTERIOR_CITY_HALL_LS) return SendClientMessage(playerid, 0xA9F5A9AA, "El comprador no está en la sala.");
				if(!IsPlayerInRangeOfPoint(inputtext[0], 3.0, -474.596282, 289.679107, 2004.584960)) return SendClientMessage(playerid, 0xA9F5A9AA, "El comprador no está en la sala.");
				if(BANK_ACCOUNT[inputtext[0]][bank_account_ID] == 0) return SendClientMessage(playerid, 0xA9F5A9AA, "El comprador no tiene cuenta bancaria.");
				
				new DBResult:Result, DB_Query[120], player_vehicles;
				format(DB_Query, sizeof(DB_Query), "SELECT COUNT(`ID_USER`) AS `VEHICLES` FROM `PLAYER_VEHICLES` WHERE `ID_USER` = '%d';", ACCOUNT_INFO[inputtext[0]][ac_ID]);
				Result = db_query(Database, DB_Query);
				if(db_num_rows(Result)) player_vehicles = db_get_field_assoc_int(Result, "VEHICLES");
				db_free_result(Result);
				
				if(player_vehicles >= MAX_SU_VEHICLES) return SendClientMessage(playerid, -1, "{00FF80}El comprador no puede adquirir más vehículos.");
				if(ACCOUNT_INFO[inputtext[0]][ac_SU]>=2)
				{
					if(player_vehicles >= MAX_SU_VEHICLES) return SendClientMessage(playerid, -1, "{00FF80}El comprador no puede adquirir más vehículos.");
				}
				if(ACCOUNT_INFO[inputtext[0]][ac_SU]==1)
				{
					if(player_vehicles >= 3) return SendClientMessage(playerid, -1, "{00FF80}El comprador no puede adquirir más vehículos.");
				}
				
				if(ACCOUNT_INFO[inputtext[0]][ac_LEVEL] < 2) return SendClientMessage(playerid, -1, "{00FF80}Error, el comprador necesita ser al menos nivel 2.");
				if(PLAYER_TEMP[playerid][pt_NOTARY_PRICE] > BANK_ACCOUNT[inputtext[0]][bank_account_BALANCE]) return SendClientMessage(playerid, -1, "{00FF80}Error, el comprador no tiene el dinero que pides.");
				
				SendClientMessage(playerid, -1, "{E6F8E0}Tu oferta se ha enviado al comprador, espera para ver si la acepta.");
				
				new action[64]; format(action, sizeof action, "quiere llegar a un acuerdo con %s.", PLAYER_TEMP[inputtext[0]][pt_RP_NAME]);
				Auto_SendPlayerAction(playerid, action);
				
				PLAYER_TEMP[inputtext[0]][pt_PLAYER_VEHICLE_SELECTED] = PLAYER_TEMP[playerid][pt_PLAYER_VEHICLE_SELECTED];
				PLAYER_TEMP[inputtext[0]][pt_NOTARY_PRICE] = PLAYER_TEMP[playerid][pt_NOTARY_PRICE];
				PLAYER_TEMP[inputtext[0]][pt_NOTARY_TO_PLAYER] = playerid;
				PLAYER_TEMP[playerid][pt_NOTARY_TO_PLAYER] = inputtext[0];
				
				ShowDialog(inputtext[0], DIALOG_SELL_CONFIRM_VEHICLE);
			}
			else ShowDialog(playerid, DIALOG_PROPERTY_SELL_PRICE);
			return 1;
		}
		case DIALOG_SELL_CONFIRM_VEHICLE:
		{
			if(response)
			{
				if(!IsPlayerConnected(PLAYER_TEMP[playerid][pt_NOTARY_TO_PLAYER])) return SendClientMessage(playerid, -1, "{00FF80}El vendedor se ha desconectado.");
				if(PLAYER_TEMP[ PLAYER_TEMP[playerid][pt_NOTARY_TO_PLAYER] ][pt_NOTARY_TO_PLAYER] != playerid) return SendClientMessage(playerid, -1, "{00FF80}El vendedor ya no está.");
				if(PLAYER_TEMP[ PLAYER_TEMP[playerid][pt_NOTARY_TO_PLAYER] ][pt_GAME_STATE] != GAME_STATE_NORMAL) return SendClientMessage(playerid, -1, "{00FF80}Error, el vendedor no está disponible.");
				if(ENTER_EXIT[ PLAYER_TEMP[ PLAYER_TEMP[playerid][pt_NOTARY_TO_PLAYER] ][pt_INTERIOR_INDEX] ][ee_INTERIOR_TYPE] != INTERIOR_CITY_HALL_LS) return SendClientMessage(playerid, 0xA9F5A9AA, "El vendedor no está en la sala.");
				if(!IsPlayerInRangeOfPoint(PLAYER_TEMP[playerid][pt_NOTARY_TO_PLAYER], 3.0, -474.596282, 289.679107, 2004.584960)) return SendClientMessage(playerid, 0xA9F5A9AA, "El vendedor no está en la sala.");
				if(BANK_ACCOUNT[ PLAYER_TEMP[playerid][pt_NOTARY_TO_PLAYER] ][bank_account_ID] == 0) return SendClientMessage(playerid, 0xA9F5A9AA, "El vendedor no tiene cuenta bancaria.");
				
				// Traspasar
				
				PLAYER_VEHICLES[ PLAYER_TEMP[playerid][pt_PLAYER_VEHICLE_SELECTED] ][player_vehicle_OWNER_ID] = ACCOUNT_INFO[playerid][ac_ID];
				new DB_Query_update[350];
				format(DB_Query_update, sizeof(DB_Query_update), "UPDATE `PLAYER_VEHICLES` SET `ID_USER` = '%d' WHERE `ID` = '%d';",
					ACCOUNT_INFO[playerid][ac_ID],
					PLAYER_VEHICLES[ PLAYER_TEMP[playerid][pt_PLAYER_VEHICLE_SELECTED] ][player_vehicle_ID]
				);
				db_query(Database, DB_Query_update);
				
				
				// Banco
				new price = PLAYER_TEMP[playerid][pt_NOTARY_PRICE], seller = PLAYER_TEMP[playerid][pt_NOTARY_TO_PLAYER];
				
				if(PLAYER_PHONE[playerid][player_phone_VALID])
				{
					new message[64]; format(message, sizeof message, "VEHICULO COMPRADO: -%s$", number_format_thousand(price));
					RegisterPhoneMessage(6740, PLAYER_PHONE[playerid][player_phone_NUMBER], message);
					if(PLAYER_PHONE[playerid][player_phone_STATE] == PHONE_STATE_ON) SendClientMessageEx(playerid, -1, "{b7dd80}[NUEVO MENSAJE]: {e5f442}De: {FFFFFF}%s {b7dd80}Mensaje: {FFFFFF}%s", convertPhoneNumber(playerid, 6740), message);
				}
				if(PLAYER_PHONE[seller][player_phone_VALID])
				{
					new message[64]; format(message, sizeof message, "VEHICULO VENDIDO: +%s$", number_format_thousand(price));
					RegisterPhoneMessage(6740, PLAYER_PHONE[seller][player_phone_NUMBER], message);
					if(PLAYER_PHONE[seller][player_phone_STATE] == PHONE_STATE_ON) SendClientMessageEx(seller, -1, "{b7dd80}[NUEVO MENSAJE]: {e5f442}De: {FFFFFF}%s {b7dd80}Mensaje: {FFFFFF}%s", convertPhoneNumber(seller, 6740), message);
				}
				
				BANK_ACCOUNT[playerid][bank_account_BALANCE] -= price;
				RegisterBankAccountTransaction(BANK_ACCOUNT[playerid][bank_account_ID], BANK_TRANSACTION_BUY_VEHICLE, price);
				
				BANK_ACCOUNT[seller][bank_account_BALANCE] += price;
				RegisterBankAccountTransaction(BANK_ACCOUNT[seller][bank_account_ID], BANK_TRANSACTION_SOLD_VEHICLE, price);
				
				
				format(DB_Query_update, sizeof(DB_Query_update), 
					"\
						UPDATE `BANK_ACCOUNT` SET `BALANCE` = '%d' WHERE `ID_ACCOUNT` = '%d';\
						UPDATE `BANK_ACCOUNT` SET `BALANCE` = '%d' WHERE `ID_ACCOUNT` = '%d';\
					",
						BANK_ACCOUNT[playerid][bank_account_BALANCE], BANK_ACCOUNT[playerid][bank_account_ID],
						BANK_ACCOUNT[seller][bank_account_BALANCE], BANK_ACCOUNT[seller][bank_account_ID]
				);
				db_query(Database, DB_Query_update);
				
				
				SendClientMessageEx(playerid, -1, "{6a98e2}¡Vehículo %s comprado! {FFFFFF}Utiliza {6a98e2}/GPS {FFFFFF}para localizarlo.", VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_PLAYER_VEHICLE_SELECTED] ][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME]);
				SendClientMessageEx(seller, -1, "{6a98e2}¡Vehículo vendido! {FFFFFF}Has recibido {d1f442}%s$ {FFFFFF}en tu cuenta bancaria.", number_format_thousand(price));
				PlayerPlaySoundEx(seller, 1058, 0.0, 0.0, 0.0);
				PlayerPlaySoundEx(playerid, 1058, 0.0, 0.0, 0.0);
				
				new action[64]; format(action, sizeof action, "y %s han llegado a un acuerdo.", PLAYER_TEMP[seller][pt_RP_NAME]);
				Auto_SendPlayerAction(playerid, action);
				
				if(!ACCOUNT_INFO[seller][ac_SU]) ReLockPlayerVehicles(seller);
				if(!ACCOUNT_INFO[playerid][ac_SU]) ReLockPlayerVehicles(playerid);
			}
			return 1;
		}
		case DIALOG_SELECT_CARRIER_TYPE:
		{
			if(response)
			{
				if(Carrier_Contents[listitem][truck_content_EXP] > PLAYER_SKILLS[playerid][WORK_CARRIER])
				{
					SendClientMessageEx(playerid, -1, "{00FF80}Has realizado %d trabajos como tranportista, necesitas %d para este viaje.", PLAYER_SKILLS[playerid][WORK_CARRIER], Carrier_Contents[listitem][truck_content_EXP]);
					ShowDialog(playerid, dialogid);
					return 1;
				}
				
				new vehicleid = GetPlayerVehicleID(playerid);

				GLOBAL_VEHICLES[vehicleid][carrier_vehicle_POINT] = listitem;

				LoadCarrierVehicle(playerid, listitem);
				
			}
			else
			{
				SendClientMessage(playerid,-1,"Carga del container cancelada, sal de la zona de cargue");
			}
			return 1;
		}
		case DIALOG_SELECT_TRUCK_TYPE:
		{
			if(response)
			{
				if(Truck_Contents[listitem][truck_content_EXP] > PLAYER_SKILLS[playerid][WORK_TRUCK])
				{
					SendClientMessageEx(playerid, -1, "{00FF80}Has realizado %d trabajos como camionero, necesitas %d para este viaje.", PLAYER_SKILLS[playerid][WORK_TRUCK], Truck_Contents[listitem][truck_content_EXP]);
					ShowDialog(playerid, dialogid);
					return 1;
				}
				
				new vehicleid = GetPlayerVehicleID(playerid);
				TRUCK_VEHICLE[vehicleid][truck_vehicle_POINT] = listitem;
				
				PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][0], "");
				PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][0]);
				PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][1]);
				PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][2]);
				PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][3]);
				
				PLAYER_TEMP[playerid][pt_TRUCK_LOADING_VALUE] = 35.0;
				UpdatePlayerLoadingTruckSize(playerid);
				KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][7]);
				KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][9]);
				PLAYER_TEMP[playerid][pt_TIMERS][9] = SetTimerEx("TruckLoadUp", 1000, false, "ii", playerid, vehicleid);
				
				SendClientMessage(playerid,0xCCCCCCCC,"Info: El camión se está cargando, si sales de él se cancelará el viaje.");

				ApplyDynamicActorAnimation(ACTOR_TRUCK[ PLAYER_TEMP[playerid][pt_ACTOR_TRUCK] ][ID], "BSKTBALL", "BBALL_pickup", 4.1, false, true, true, false, 0);

				PLAYER_TEMP[playerid][pt_ACTOR_TRUCK] = listitem;
			}
			else
			{
				KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][9]);
				PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][0]);
				PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][1]);
				PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][2]);
				PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][3]);
				SetVehicleToRespawnEx(GetPlayerVehicleID(playerid));
			}
			return 1;
		}
		case DIALOG_TUNING_MENU_PART:
		{
			if(response)
			{
				if(isnull(PLAYER_TUNING_MENU[playerid][listitem][tuning_menu_NAME])) return 1;
				
				if(!GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_VALID]) return 1;
				
				new Float:Vehicle_Pos[3];
				GetVehiclePos(PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID], Vehicle_Pos[0], Vehicle_Pos[1], Vehicle_Pos[2]);
				
				if(!IsPlayerInRangeOfPoint(playerid, 5.0, Vehicle_Pos[0], Vehicle_Pos[1], Vehicle_Pos[2])) return SendClientMessage(playerid, -1, "{00FF80}El vehículo está demasiado lejos.");
				
				if(PLAYER_MISC[playerid][MISC_MECHANIC_PIECES] < PLAYER_TUNING_MENU[playerid][listitem][tuning_menu_PIECES])
				{
					ShowDialog(playerid, dialogid);
					SendClientMessage(playerid, -1, "{00FF80}No tienes suficientes piezas, puedes comprar más piezas en el taller.");
					return 1;
				}
				
				format(PLAYER_TEMP[playerid][pt_TUNING_SELECTED_PART], 24, "%s", PLAYER_TUNING_MENU[playerid][listitem][tuning_menu_NAME]);
				PLAYER_TEMP[playerid][pt_TUNING_SELECTED_PIECES] = PLAYER_TUNING_MENU[playerid][listitem][tuning_menu_PIECES];
				
				ShowDialog(playerid, DIALOG_TUNING_MENU_COMPONENT);
			}
			else ShowDialog(playerid, DIALOG_MECHANIC_MENU);
			return 1;
		}
		case DIALOG_TUNING_MENU_COMPONENT:
		{
			if(response)
			{
				if(isnull(PLAYER_TUNING_MENU[playerid][listitem][tuning_menu_NAME]) || !PLAYER_TUNING_MENU[playerid][listitem][tuning_menu_ID]) return 1;
				
				if(!GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_VALID]) return 1;
				
				new Float:Vehicle_Pos[3];
				GetVehiclePos(PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID], Vehicle_Pos[0], Vehicle_Pos[1], Vehicle_Pos[2]);
				
				if(!IsPlayerInRangeOfPoint(playerid, 5.0, Vehicle_Pos[0], Vehicle_Pos[1], Vehicle_Pos[2])) return SendClientMessage(playerid, -1, "{00FF80}El vehículo está demasiado lejos.");
				
				if(PLAYER_MISC[playerid][MISC_MECHANIC_PIECES] < PLAYER_TEMP[playerid][pt_TUNING_SELECTED_PIECES])
				{
					SendClientMessage(playerid, -1, "{00FF80}No tienes suficientes piezas, puedes comprar más piezas en el taller.");
					return 1;
				}
				
				if(PLAYER_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][player_vehicle_OWNER_ID] == ACCOUNT_INFO[playerid][ac_ID])
				{
					new vehicleid = PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID];
					
					new slot = GetVehicleComponentType( PLAYER_TUNING_MENU[playerid][listitem][tuning_menu_ID] );
					new current_component = GetVehicleComponentInSlot(vehicleid, slot);
					if(current_component) RemoveVehicleComponent(vehicleid, current_component);
					
					GLOBAL_VEHICLES[vehicleid][gb_vehicle_COMPONENTS][slot] = PLAYER_TUNING_MENU[playerid][listitem][tuning_menu_ID];
					AddVehicleComponent(vehicleid, PLAYER_TUNING_MENU[playerid][listitem][tuning_menu_ID]);
					
					PLAYER_MISC[playerid][MISC_MECHANIC_PIECES] -= PLAYER_TEMP[playerid][pt_TUNING_SELECTED_PIECES];
					SendClientMessageEx(playerid, -1, "{E6F8E0}Componente '%s' añadido, has necesitado %d piezas.", PLAYER_TUNING_MENU[playerid][listitem][tuning_menu_NAME], PLAYER_TEMP[playerid][pt_TUNING_SELECTED_PIECES]);
				}
				else
				{
					format(PLAYER_TEMP[playerid][pt_TUNING_SELECTED_COMPONENT], 24, "%s", PLAYER_TUNING_MENU[playerid][listitem][tuning_menu_NAME]);
					PLAYER_TEMP[playerid][pt_TUNING_SELECTED_COMPONENT_ID] = PLAYER_TUNING_MENU[playerid][listitem][tuning_menu_ID];
					
					ShowDialog(playerid, DIALOG_MECHANIC_TUNING_PRICE);
				}
			}
			else ShowDialog(playerid, DIALOG_TUNING_MENU_PART);
			return 1;
		}
		case DIALOG_MECHANIC_MENU_ACEITE:
		{
			if(!GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_VALID]) return 1;
			
			new Float:Vehicle_Pos[3];
			GetVehiclePos(PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID], Vehicle_Pos[0], Vehicle_Pos[1], Vehicle_Pos[2]);
			
			if(!IsPlayerInRangeOfPoint(playerid, 5.0, Vehicle_Pos[0], Vehicle_Pos[1], Vehicle_Pos[2])) return SendClientMessage(playerid, -1, "{00FF80}El vehículo está demasiado lejos.");
			
			if(PLAYER_MISC[playerid][MISC_MECHANIC_PIECES] < 10) return SendClientMessage(playerid, -1, "{00FF80}No tienes suficientes piezas, puedes comprar más piezas en el taller.");
						
			if(gettime() < GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_LAST_REPAIR_TIME] + 300)
			{
				new time = (300-(gettime()-GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_LAST_REPAIR_TIME]));
				SendClientMessageEx(playerid, 0xA9F5A9AA, "Tienes que esperar %s minutos para volver a reparar este vehículo.", TimeConvert(time));
				return 1;
			}
			
			if(PLAYER_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][player_vehicle_OWNER_ID] == ACCOUNT_INFO[playerid][ac_ID])
			{
				PLAYER_MISC[playerid][MISC_MECHANIC_PIECES] -= 10;
				
				SendClientMessage(playerid, -1, "{E6F8E0}Este es tu vehículo por lo que no se cobrará.");
				SendClientMessage(playerid, -1, "{E6F8E0}Has necesitado 10 piezas para el cambio de aceite.");
				
				new vehicleid = PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID];
				new Float:val = GLOBAL_VEHICLES[vehicleid][gb_vehicle_MAX_ACEITE];
				//if(val + GLOBAL_VEHICLES[vehicleid][gb_vehicle_ACEITE] > GLOBAL_VEHICLES[vehicleid][gb_vehicle_MAX_ACEITE]) val = GLOBAL_VEHICLES[vehicleid][gb_vehicle_MAX_ACEITE];
				GLOBAL_VEHICLES[vehicleid][gb_vehicle_ACEITE] = val;

				return 1;
			}
			else
			{
				if(!PLAYER_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][player_vehicle_VALID])
				{
					if(GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_DRIVER] == playerid || GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_LAST_DRIVER] == playerid)
					{
						PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_HEALTH][p_ac_info_IMMUNITY] = gettime() + 3;
						PLAYER_MISC[playerid][MISC_MECHANIC_PIECES] -= 10;
						
						new vehicleid = PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID];
						new Float:val = GLOBAL_VEHICLES[vehicleid][gb_vehicle_MAX_ACEITE];	
						//if(val + GLOBAL_VEHICLES[vehicleid][gb_vehicle_ACEITE] > GLOBAL_VEHICLES[vehicleid][gb_vehicle_MAX_ACEITE]) val = GLOBAL_VEHICLES[vehicleid][gb_vehicle_MAX_ACEITE];
						GLOBAL_VEHICLES[vehicleid][gb_vehicle_ACEITE] = val;
						
						SendClientMessage(playerid, -1, "{E6F8E0}Eres el conductor o el último conductor de este vehículo por lo que no se cobrará.");
						SendClientMessage(playerid, -1, "{E6F8E0}Has necesitado 10 piezas para el cambio de aceite.");
						return 1;
					}
				}
			}
			return 1;
		}
		/**/
		case DIALOG_MECHANIC_MENU:
		{
			if(response)
			{
				if(!GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_VALID]) return 1;
				
				new Float:Vehicle_Pos[3];
				GetVehiclePos(PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID], Vehicle_Pos[0], Vehicle_Pos[1], Vehicle_Pos[2]);
				
				if(!IsPlayerInRangeOfPoint(playerid, 5.0, Vehicle_Pos[0], Vehicle_Pos[1], Vehicle_Pos[2])) return SendClientMessage(playerid, -1, "{00FF80}El vehículo está demasiado lejos.");
				
				switch(listitem)
				{
					case 0: // Reparar
					{
						if(PLAYER_MISC[playerid][MISC_MECHANIC_PIECES] < 10) return SendClientMessage(playerid, -1, "{00FF80}No tienes suficientes piezas, puedes comprar más piezas en el taller.");
						
						if(gettime() < GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_LAST_REPAIR_TIME] + 300)
						{
							new time = (300-(gettime()-GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_LAST_REPAIR_TIME]));
							SendClientMessageEx(playerid, 0xA9F5A9AA, "Tienes que esperar %s minutos para volver a reparar este vehículo.", TimeConvert(time));
							return 1;
						}
						
						if(PLAYER_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][player_vehicle_OWNER_ID] == ACCOUNT_INFO[playerid][ac_ID])
						{
							PLAYER_MISC[playerid][MISC_MECHANIC_PIECES] -= 10;
							RepairVehicleEx(PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID], playerid);
							
							SendClientMessage(playerid, -1, "{E6F8E0}Este es tu vehículo por lo que no se cobrará.");
							SendClientMessage(playerid, -1, "{E6F8E0}Has necesitado 10 piezas para la reparacion.");
							return 1;
						}
						else
						{
							if(!PLAYER_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][player_vehicle_VALID])
							{
								if(GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_DRIVER] == playerid || GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_LAST_DRIVER] == playerid)
								{
									PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_HEALTH][p_ac_info_IMMUNITY] = gettime() + 3;
									PLAYER_MISC[playerid][MISC_MECHANIC_PIECES] -= 10;
									RepairVehicleEx(PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID], playerid);
									
									SendClientMessage(playerid, -1, "{E6F8E0}Eres el conductor o el último conductor de este vehículo por lo que no se cobrará.");
									SendClientMessage(playerid, -1, "{E6F8E0}Has necesitado 10 piezas para la reparacion.");
									return 1;
								}
							}
							ShowDialog(playerid, DIALOG_MECHANIC_REPAIR_PRICE);
						}
					}
					case 1:
					{
						if(PLAYER_MISC[playerid][MISC_MECHANIC_PIECES] < 5)
						{
							ShowDialog(playerid, dialogid);
							SendClientMessage(playerid, -1, "{00FF80}No tienes suficientes piezas, puedes comprar más piezas en el taller.");
							return 1;
						}
						
						if(!PLAYER_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][player_vehicle_VALID])
						{
							ShowDialog(playerid, dialogid);
							SendClientMessage(playerid, -1, "{00FF80}Solo los vehículos personales se pueden pintar.");
							return 1;
						}
						
						ShowDialog(playerid, DIALOG_MECHANIC_SELECT_COL_SLOT);
					}
					case 2:
					{
						if(100 > PLAYER_SKILLS[playerid][WORK_MECHANIC])
						{
							SendClientMessageEx(playerid, -1, "{00FF80}Has realizado %d reparaciones como mecánico, necesitas 100 para tunear vehículos.", PLAYER_SKILLS[playerid][WORK_MECHANIC]);
							ShowDialog(playerid, dialogid);
							return 1;
						}
						
						ShowDialog(playerid, DIALOG_MECHANIC_REMOVE_COMPONEN);
					}
					case 3:
					{
						if(100 > PLAYER_SKILLS[playerid][WORK_MECHANIC])
						{
							SendClientMessageEx(playerid, -1, "{00FF80}Has realizado %d reparaciones como mecánico, necesitas 100 para tunear vehículos.", PLAYER_SKILLS[playerid][WORK_MECHANIC]);
							ShowDialog(playerid, dialogid);
							return 1;
						}
						
						if(!PLAYER_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][player_vehicle_VALID])
						{
							ShowDialog(playerid, dialogid);
							SendClientMessage(playerid, -1, "{00FF80}Solo los vehículos personales se pueden tunear.");
							return 1;
						}
						
						ShowDialog(playerid, DIALOG_TUNING_MENU_PART);
					}
					case 4:
					{
						if(100 > PLAYER_SKILLS[playerid][WORK_MECHANIC])
						{
							SendClientMessageEx(playerid, -1, "{00FF80}Has realizado %d reparaciones como mecánico, necesitas 100 para paintjobs.", PLAYER_SKILLS[playerid][WORK_MECHANIC]);
							ShowDialog(playerid, dialogid);
							return 1;
						}
						
						if(!PLAYER_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][player_vehicle_VALID])
						{
							ShowDialog(playerid, dialogid);
							SendClientMessage(playerid, -1, "{00FF80}Solo los vehículos personales se le pueden cambiar el paintjob.");
							return 1;
						}
						ShowDialog(playerid, DIALOG_TUNING_PAINTJOB);
					}
				}
			}
			return 1;
		}
		case DIALOG_MECHANIC_REPAIR_PRICE:
		{
			if(!GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_VALID]) return 1;
				
			new Float:Vehicle_Pos[3];
			GetVehiclePos(PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID], Vehicle_Pos[0], Vehicle_Pos[1], Vehicle_Pos[2]);
			
			if(!IsPlayerInRangeOfPoint(playerid, 5.0, Vehicle_Pos[0], Vehicle_Pos[1], Vehicle_Pos[2])) return SendClientMessage(playerid, -1, "{00FF80}El vehículo está demasiado lejos.");
			
			if(response)
			{
				if(sscanf(inputtext, "d", inputtext[0]))
				{
					SendClientMessage(playerid, -1, "{00FF80}El precio no es correcto.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if(inputtext[0] < 0 || inputtext[0] > 2000)
				{
					SendClientMessage(playerid, -1, "{00FF80}El rango del precio es: 0$ - 2.000$.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				
				if(PLAYER_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][player_vehicle_VALID])
				{
					new buyer = GetPlayerIdFromAccountId(PLAYER_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][player_vehicle_OWNER_ID]);
					if(buyer == INVALID_PLAYER_ID) return SendClientMessage(playerid, -1, "{00FF80}El dueño del vehículo no está cerca.");
					
					new Float:mechanic_pos[3];
					GetPlayerPos(playerid, mechanic_pos[0], mechanic_pos[1], mechanic_pos[2]);
					if(!IsPlayerInRangeOfPoint(buyer, 10.0, mechanic_pos[0], mechanic_pos[1], mechanic_pos[2])) return SendClientMessage(playerid, -1, "{00FF80}El dueño del vehículo está demasiado lejos.");
					
					PLAYER_TEMP[buyer][pt_MECHANIC_PID] = playerid;
					PLAYER_TEMP[buyer][pt_MECHANIC_AID] = ACCOUNT_INFO[playerid][ac_ID];
					PLAYER_TEMP[buyer][pt_MECHANIC_PRICE] = inputtext[0];
					format(PLAYER_TEMP[buyer][pt_MECHANIC_TEXT], 64, "Reparación completa del vehículo");
					PLAYER_TEMP[buyer][pt_MECHANIC_TYPE] = MECHANIC_OPTION_REPAIR;
					PLAYER_TEMP[buyer][pt_MECHANIC_EXTRA] = 0;
					PLAYER_TEMP[buyer][pt_MECHANIC_VEHICLE_ID] = PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID];
					PLAYER_TEMP[buyer][pt_MECHANIC_PIECES] = 10;
					PLAYER_TEMP[buyer][pt_MECHANIC_TIME] = gettime();
					
					ShowDialog(buyer, DIALOG_MECHANIC_ACCEPT);
					if(PLAYER_TEMP[buyer][pt_WANT_MECHANIC])
					{
						PLAYER_TEMP[buyer][pt_WANT_MECHANIC] = false;
						DisablePlayerMechanicMark(buyer);
					}
					
					SendClientMessageEx(playerid, -1, "{E6F8E0}Le has ofrecido a %s reparar su vehículo por %s$.", PLAYER_TEMP[buyer][pt_RP_NAME], number_format_thousand(PLAYER_TEMP[buyer][pt_MECHANIC_PRICE]));
				}
				else
				{
					if(GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_OCCUPIED])
					{
						new buyer = GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_DRIVER];
						if(buyer == INVALID_PLAYER_ID) return SendClientMessage(playerid, -1, "{00FF80}El conductor del vehículo no está cerca.");
					
						new Float:mechanic_pos[3];
						GetPlayerPos(playerid, mechanic_pos[0], mechanic_pos[1], mechanic_pos[2]);
						if(!IsPlayerInRangeOfPoint(buyer, 10.0, mechanic_pos[0], mechanic_pos[1], mechanic_pos[2])) return SendClientMessage(playerid, -1, "{00FF80}El conductor del vehículo está demasiado lejos.");
						
						PLAYER_TEMP[buyer][pt_MECHANIC_PID] = playerid;
						PLAYER_TEMP[buyer][pt_MECHANIC_AID] = ACCOUNT_INFO[playerid][ac_ID];
						PLAYER_TEMP[buyer][pt_MECHANIC_PRICE] = inputtext[0];
						format(PLAYER_TEMP[buyer][pt_MECHANIC_TEXT], 64, "Reparación completa del vehículo");
						PLAYER_TEMP[buyer][pt_MECHANIC_TYPE] = MECHANIC_OPTION_REPAIR;
						PLAYER_TEMP[buyer][pt_MECHANIC_EXTRA] = 0;
						PLAYER_TEMP[buyer][pt_MECHANIC_VEHICLE_ID] = PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID];
						PLAYER_TEMP[buyer][pt_MECHANIC_PIECES] = 10;
						PLAYER_TEMP[buyer][pt_MECHANIC_TIME] = gettime();
						
						ShowDialog(buyer, DIALOG_MECHANIC_ACCEPT);
						if(PLAYER_TEMP[buyer][pt_WANT_MECHANIC])
						{
							PLAYER_TEMP[buyer][pt_WANT_MECHANIC] = false;
							DisablePlayerMechanicMark(buyer);
						}
						
						SendClientMessageEx(playerid, -1, "{E6F8E0}Le has ofrecido a %s reparar el vehículo por %s$.", PLAYER_TEMP[buyer][pt_RP_NAME], number_format_thousand(PLAYER_TEMP[buyer][pt_MECHANIC_PRICE]));
					}
					else
					{
						new buyer = GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_LAST_DRIVER];
						if(buyer == INVALID_PLAYER_ID) return SendClientMessage(playerid, -1, "{00FF80}Este vehículo no tiene conductor.");
					
						new Float:mechanic_pos[3];
						GetPlayerPos(playerid, mechanic_pos[0], mechanic_pos[1], mechanic_pos[2]);
						if(!IsPlayerInRangeOfPoint(buyer, 10.0, mechanic_pos[0], mechanic_pos[1], mechanic_pos[2])) return SendClientMessage(playerid, -1, "{00FF80}El conductor del vehículo está demasiado lejos.");
						
						PLAYER_TEMP[buyer][pt_MECHANIC_PID] = playerid;
						PLAYER_TEMP[buyer][pt_MECHANIC_AID] = ACCOUNT_INFO[playerid][ac_ID];
						PLAYER_TEMP[buyer][pt_MECHANIC_PRICE] = inputtext[0];
						format(PLAYER_TEMP[buyer][pt_MECHANIC_TEXT], 64, "Reparación completa del vehículo");
						PLAYER_TEMP[buyer][pt_MECHANIC_TYPE] = MECHANIC_OPTION_REPAIR;
						PLAYER_TEMP[buyer][pt_MECHANIC_EXTRA] = 0;
						PLAYER_TEMP[buyer][pt_MECHANIC_VEHICLE_ID] = PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID];
						PLAYER_TEMP[buyer][pt_MECHANIC_PIECES] = 10;
						PLAYER_TEMP[buyer][pt_MECHANIC_TIME] = gettime();
						
						ShowDialog(buyer, DIALOG_MECHANIC_ACCEPT);
						if(PLAYER_TEMP[buyer][pt_WANT_MECHANIC])
						{
							PLAYER_TEMP[buyer][pt_WANT_MECHANIC] = false;
							DisablePlayerMechanicMark(buyer);
						}
						
						SendClientMessageEx(playerid, -1, "{E6F8E0}Le has ofrecido a %s reparar el vehículo por %s$.", PLAYER_TEMP[buyer][pt_RP_NAME], number_format_thousand(PLAYER_TEMP[buyer][pt_MECHANIC_PRICE]));
					}
				}
			}
			else ShowDialog(playerid, DIALOG_MECHANIC_MENU);
			return 1;
		}
		case DIALOG_MECHANIC_COLOR_PRICE:
		{
			if(!GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_VALID]) return 1;
				
			new Float:Vehicle_Pos[3];
			GetVehiclePos(PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID], Vehicle_Pos[0], Vehicle_Pos[1], Vehicle_Pos[2]);
			
			if(!IsPlayerInRangeOfPoint(playerid, 5.0, Vehicle_Pos[0], Vehicle_Pos[1], Vehicle_Pos[2])) return SendClientMessage(playerid, -1, "{00FF80}El vehículo está demasiado lejos.");
			
			if(response)
			{
				if(sscanf(inputtext, "d", inputtext[0]))
				{
					SendClientMessage(playerid, -1, "{00FF80}El precio no es correcto.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if(inputtext[0] < 0 || inputtext[0] > 1750)
				{
					SendClientMessage(playerid, -1, "{00FF80}El rango del precio es: 0$ - 1.750$.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				
				new buyer = GetPlayerIdFromAccountId(PLAYER_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][player_vehicle_OWNER_ID]);
				if(buyer == INVALID_PLAYER_ID) return SendClientMessage(playerid, -1, "{00FF80}El dueño del vehículo no está cerca.");
				
				new Float:mechanic_pos[3];
				GetPlayerPos(playerid, mechanic_pos[0], mechanic_pos[1], mechanic_pos[2]);
				if(!IsPlayerInRangeOfPoint(buyer, 10.0, mechanic_pos[0], mechanic_pos[1], mechanic_pos[2])) return SendClientMessage(playerid, -1, "{00FF80}El dueño del vehículo está demasiado lejos.");
				
				PLAYER_TEMP[buyer][pt_MECHANIC_PID] = playerid;
				PLAYER_TEMP[buyer][pt_MECHANIC_AID] = ACCOUNT_INFO[playerid][ac_ID];
				PLAYER_TEMP[buyer][pt_MECHANIC_PRICE] = inputtext[0];
				
				switch(PLAYER_TEMP[playerid][pt_MECHANIC_COLOR_SLOT])
				{
					case 0:
					{
						format(PLAYER_TEMP[buyer][pt_MECHANIC_TEXT], 64, "Pintar color primario {%06x}(%d)", VEHICLE_COLORS[ PLAYER_TEMP[playerid][pt_MECHANIC_SELECTED_COLOR] ] >>> 8, PLAYER_TEMP[playerid][pt_MECHANIC_SELECTED_COLOR]);
						PLAYER_TEMP[buyer][pt_MECHANIC_TYPE] = MECHANIC_OPTION_COLOR_1;
					}
					case 1:
					{
						format(PLAYER_TEMP[buyer][pt_MECHANIC_TEXT], 64, "Pintar color secundario {%06x}(%d)", VEHICLE_COLORS[ PLAYER_TEMP[playerid][pt_MECHANIC_SELECTED_COLOR] ] >>> 8, PLAYER_TEMP[playerid][pt_MECHANIC_SELECTED_COLOR]);
						PLAYER_TEMP[buyer][pt_MECHANIC_TYPE] = MECHANIC_OPTION_COLOR_2;
					}
				}
				
				PLAYER_TEMP[buyer][pt_MECHANIC_EXTRA] = PLAYER_TEMP[playerid][pt_MECHANIC_SELECTED_COLOR];
				PLAYER_TEMP[buyer][pt_MECHANIC_VEHICLE_ID] = PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID];
				PLAYER_TEMP[buyer][pt_MECHANIC_PIECES] = 5;
				PLAYER_TEMP[buyer][pt_MECHANIC_TIME] = gettime();
				
				ShowDialog(buyer, DIALOG_MECHANIC_ACCEPT);
				
				SendClientMessageEx(playerid, -1, "{E6F8E0}Le has ofrecido a %s pintar su vehículo por %s$.", PLAYER_TEMP[buyer][pt_RP_NAME], number_format_thousand(PLAYER_TEMP[buyer][pt_MECHANIC_PRICE]));
			}
			else ShowDialog(playerid, DIALOG_MECHANIC_MENU);
			return 1;
		}
		case DIALOG_MECHANIC_TUNING_PRICE:
		{
			if(!GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_VALID]) return 1;
				
			new Float:Vehicle_Pos[3];
			GetVehiclePos(PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID], Vehicle_Pos[0], Vehicle_Pos[1], Vehicle_Pos[2]);
			
			if(!IsPlayerInRangeOfPoint(playerid, 5.0, Vehicle_Pos[0], Vehicle_Pos[1], Vehicle_Pos[2])) return SendClientMessage(playerid, -1, "{00FF80}El vehículo está demasiado lejos.");
			
			if(response)
			{
				if(sscanf(inputtext, "d", inputtext[0]))
				{
					SendClientMessage(playerid, -1, "{00FF80}El precio no es correcto.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if(inputtext[0] < 0 || inputtext[0] > ((PLAYER_TEMP[playerid][pt_TUNING_SELECTED_PIECES] * 50) + 2000))
				{
					SendClientMessageEx(playerid, -1, "{00FF80}El rango del precio es: 0$ - %s$.", number_format_thousand((PLAYER_TEMP[playerid][pt_TUNING_SELECTED_PIECES] * 50) + 2000));
					ShowDialog(playerid, dialogid);
					return 1;
				}
				
				new buyer = GetPlayerIdFromAccountId(PLAYER_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][player_vehicle_OWNER_ID]);
				if(buyer == INVALID_PLAYER_ID) return SendClientMessage(playerid, -1, "{00FF80}El dueño del vehículo no está cerca.");
				
				new Float:mechanic_pos[3];
				GetPlayerPos(playerid, mechanic_pos[0], mechanic_pos[1], mechanic_pos[2]);
				if(!IsPlayerInRangeOfPoint(buyer, 10.0, mechanic_pos[0], mechanic_pos[1], mechanic_pos[2])) return SendClientMessage(playerid, -1, "{00FF80}El dueño del vehículo está demasiado lejos.");
				
				PLAYER_TEMP[buyer][pt_MECHANIC_PID] = playerid;
				PLAYER_TEMP[buyer][pt_MECHANIC_AID] = ACCOUNT_INFO[playerid][ac_ID];
				PLAYER_TEMP[buyer][pt_MECHANIC_PRICE] = inputtext[0];
				format(PLAYER_TEMP[buyer][pt_MECHANIC_TEXT], 64, "'%s' > '%s'", PLAYER_TEMP[playerid][pt_TUNING_SELECTED_PART], PLAYER_TEMP[playerid][pt_TUNING_SELECTED_COMPONENT]);
				PLAYER_TEMP[buyer][pt_MECHANIC_TYPE] = MECHANIC_OPTION_TUNING;
				PLAYER_TEMP[buyer][pt_MECHANIC_EXTRA] = PLAYER_TEMP[playerid][pt_TUNING_SELECTED_COMPONENT_ID];
				PLAYER_TEMP[buyer][pt_MECHANIC_VEHICLE_ID] = PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID];
				PLAYER_TEMP[buyer][pt_MECHANIC_PIECES] = PLAYER_TEMP[playerid][pt_TUNING_SELECTED_PIECES];
				PLAYER_TEMP[buyer][pt_MECHANIC_TIME] = gettime();
				
				ShowDialog(buyer, DIALOG_MECHANIC_ACCEPT);
				
				SendClientMessageEx(playerid, -1, "{E6F8E0}Le has ofrecido a %s tunear su vehículo por %s$.", PLAYER_TEMP[buyer][pt_RP_NAME], number_format_thousand(PLAYER_TEMP[buyer][pt_MECHANIC_PRICE]));
			}
			else ShowDialog(playerid, DIALOG_MECHANIC_MENU);
			return 1;
		}
		case DIALOG_MECHANIC_PAINTJOB_PRICE:
		{
			if(!GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_VALID]) return 1;
				
			new Float:Vehicle_Pos[3];
			GetVehiclePos(PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID], Vehicle_Pos[0], Vehicle_Pos[1], Vehicle_Pos[2]);
			
			if(!IsPlayerInRangeOfPoint(playerid, 5.0, Vehicle_Pos[0], Vehicle_Pos[1], Vehicle_Pos[2])) return SendClientMessage(playerid, -1, "{00FF80}El vehículo está demasiado lejos.");
			
			if(response)
			{
				if(sscanf(inputtext, "d", inputtext[0]))
				{
					SendClientMessage(playerid, -1, "{00FF80}El precio no es correcto.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if(inputtext[0] < 0 || inputtext[0] > 2750)
				{
					SendClientMessage(playerid, -1, "{00FF80}El rango del precio es: 0$ - 2.750$.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				
				new buyer = GetPlayerIdFromAccountId(PLAYER_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][player_vehicle_OWNER_ID]);
				if(buyer == INVALID_PLAYER_ID) return SendClientMessage(playerid, -1, "{00FF80}El dueño del vehículo no está cerca.");
				
				new Float:mechanic_pos[3];
				GetPlayerPos(playerid, mechanic_pos[0], mechanic_pos[1], mechanic_pos[2]);
				if(!IsPlayerInRangeOfPoint(buyer, 10.0, mechanic_pos[0], mechanic_pos[1], mechanic_pos[2])) return SendClientMessage(playerid, -1, "{00FF80}El dueño del vehículo está demasiado lejos.");
				
				PLAYER_TEMP[buyer][pt_MECHANIC_PID] = playerid;
				PLAYER_TEMP[buyer][pt_MECHANIC_AID] = ACCOUNT_INFO[playerid][ac_ID];
				PLAYER_TEMP[buyer][pt_MECHANIC_PRICE] = inputtext[0];
				format(PLAYER_TEMP[buyer][pt_MECHANIC_TEXT], 64, "Paintjob (%d)", PLAYER_TEMP[playerid][pt_PAINTJOB_SELECTED_ID]);
				PLAYER_TEMP[buyer][pt_MECHANIC_TYPE] = MECHANIC_OPTION_PAINTJOB;
				PLAYER_TEMP[buyer][pt_MECHANIC_EXTRA] = PLAYER_TEMP[playerid][pt_PAINTJOB_SELECTED_ID];
				PLAYER_TEMP[buyer][pt_MECHANIC_VEHICLE_ID] = PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID];
				PLAYER_TEMP[buyer][pt_MECHANIC_PIECES] = 15;
				PLAYER_TEMP[buyer][pt_MECHANIC_TIME] = gettime();
				
				ShowDialog(buyer, DIALOG_MECHANIC_ACCEPT);
				
				SendClientMessageEx(playerid, -1, "{E6F8E0}Le has ofrecido a %s cambiar el paintjob de su vehículo por %s$.", PLAYER_TEMP[buyer][pt_RP_NAME], number_format_thousand(PLAYER_TEMP[buyer][pt_MECHANIC_PRICE]));
			}
			else ShowDialog(playerid, DIALOG_MECHANIC_MENU);
			return 1;
		}
		case DIALOG_MECHANIC_ACCEPT:
		{
			if(response)
			{
				if(gettime() > PLAYER_TEMP[playerid][pt_MECHANIC_TIME] + 20) return SendClientMessage(playerid, -1, "{00FF80}Has tardado mucho en aceptarlo.");
				if(!IsPlayerConnected(PLAYER_TEMP[playerid][pt_MECHANIC_PID])) return SendClientMessage(playerid, -1, "{00FF80}El mecánico ya no está en el servidor.");
				if(ACCOUNT_INFO[ PLAYER_TEMP[playerid][pt_MECHANIC_PID] ][ac_ID] != PLAYER_TEMP[playerid][pt_MECHANIC_AID]) return SendClientMessage(playerid, -1, "{00FF80}El mecánico ya no está en el servidor.");

				new Float:pos[3]; GetPlayerPos(PLAYER_TEMP[playerid][pt_MECHANIC_PID], pos[0], pos[1], pos[2]);
				if(!IsPlayerInRangeOfPoint(playerid, 10.0, pos[0], pos[1], pos[2])) return SendClientMessage(playerid, 0xA9F5A9AA, "El mecánico está demasiado lejos.");
				if(PLAYER_TEMP[ PLAYER_TEMP[playerid][pt_MECHANIC_PID] ][pt_GAME_STATE] != GAME_STATE_NORMAL) return SendClientMessage(playerid, -1, "{00FF80}El mecánico no está disponible.");
				
				if(PLAYER_TEMP[playerid][pt_MECHANIC_PRICE] > CHARACTER_INFO[playerid][ch_CASH])
				{
					SendClientMessage(PLAYER_TEMP[playerid][pt_MECHANIC_PID], -1, "{00FF80}La persona no tiene suficiente dinero.");
					SendClientMessageEx(playerid, -1, "{E6F8E0}No tienes dinero suficiente, te faltan {FF6633}%s$ {E6F8E0}para poder aceptarlo.", number_format_thousand(PLAYER_TEMP[playerid][pt_MECHANIC_PRICE] - CHARACTER_INFO[playerid][ch_CASH]));
					return 1;
				}
				if(PLAYER_TEMP[playerid][pt_MECHANIC_PIECES] > PLAYER_MISC[ PLAYER_TEMP[playerid][pt_MECHANIC_PID] ][MISC_MECHANIC_PIECES])
				{
					SendClientMessage(playerid, -1, "{00FF80}Al mecánico no le quedan piezas para el trabajo.");
					SendClientMessage(PLAYER_TEMP[playerid][pt_MECHANIC_PID], -1, "{00FF80}La persona ha aceptado pero no tienes piezas suficientes para el trabajo.");
					return 1;
				}
				
				if(!GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_MECHANIC_VEHICLE_ID] ][gb_vehicle_VALID])
				{
					SendClientMessage(playerid, -1, "{00FF80}El vehículo está muy lejos.");
					SendClientMessage(PLAYER_TEMP[playerid][pt_MECHANIC_PID], -1, "{00FF80}La persona ha aceptado pero el vehículo está muy lejos.");
					return 1;
				}
				if(GetVehicleDistanceFromPoint(PLAYER_TEMP[playerid][pt_MECHANIC_VEHICLE_ID], pos[0], pos[1], pos[2]) > 10.0)
				{
					SendClientMessage(playerid, -1, "{00FF80}El vehículo está muy lejos del mecánico.");
					SendClientMessage(PLAYER_TEMP[playerid][pt_MECHANIC_PID], -1, "{00FF80}La persona ha aceptado pero estás muy lejos del vehículo.");
					return 1;
				}
				
				GivePlayerCash(playerid, -PLAYER_TEMP[playerid][pt_MECHANIC_PRICE]);
				GivePlayerCash(PLAYER_TEMP[playerid][pt_MECHANIC_PID], PLAYER_TEMP[playerid][pt_MECHANIC_PRICE]);
				
				switch(PLAYER_TEMP[playerid][pt_MECHANIC_TYPE])
				{
					case MECHANIC_OPTION_REPAIR:
					{
						PLAYER_MISC[ PLAYER_TEMP[playerid][pt_MECHANIC_PID] ][MISC_MECHANIC_PIECES] -= PLAYER_TEMP[playerid][pt_MECHANIC_PIECES];
						PLAYER_SKILLS[ PLAYER_TEMP[playerid][pt_MECHANIC_PID] ][WORK_MECHANIC] ++;
						
						RepairVehicleEx(PLAYER_TEMP[playerid][pt_MECHANIC_VEHICLE_ID], playerid);
						SendClientMessage(PLAYER_TEMP[playerid][pt_MECHANIC_PID], -1, "{E6F8E0}Has necesitado 10 piezas para la reparacion.");
					}
					case MECHANIC_OPTION_COLOR_1:
					{
						PLAYER_MISC[ PLAYER_TEMP[playerid][pt_MECHANIC_PID] ][MISC_MECHANIC_PIECES] -= 5;
						GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_MECHANIC_VEHICLE_ID] ][gb_vehicle_COLOR_1] = PLAYER_TEMP[playerid][pt_MECHANIC_EXTRA];
						ChangeVehicleColor(PLAYER_TEMP[playerid][pt_MECHANIC_VEHICLE_ID], GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_MECHANIC_VEHICLE_ID] ][gb_vehicle_COLOR_1], GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_MECHANIC_VEHICLE_ID] ][gb_vehicle_COLOR_2]);
						
						SendClientMessage(PLAYER_TEMP[playerid][pt_MECHANIC_PID], -1, "{E6F8E0}Has necesitado 5 piezas para pintar el vehículo.");
					}
					case MECHANIC_OPTION_COLOR_2:
					{
						PLAYER_MISC[ PLAYER_TEMP[playerid][pt_MECHANIC_PID] ][MISC_MECHANIC_PIECES] -= 5;
						GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_MECHANIC_VEHICLE_ID] ][gb_vehicle_COLOR_2] = PLAYER_TEMP[playerid][pt_MECHANIC_EXTRA];
						ChangeVehicleColor(PLAYER_TEMP[playerid][pt_MECHANIC_VEHICLE_ID], GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_MECHANIC_VEHICLE_ID] ][gb_vehicle_COLOR_1], GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_MECHANIC_VEHICLE_ID] ][gb_vehicle_COLOR_2]);
						
						SendClientMessage(PLAYER_TEMP[playerid][pt_MECHANIC_PID], -1, "{E6F8E0}Has necesitado 5 piezas para pintar el vehículo.");
					}
					case MECHANIC_OPTION_TUNING:
					{
						new slot = GetVehicleComponentType(PLAYER_TEMP[playerid][pt_MECHANIC_EXTRA]);
						new current_component = GetVehicleComponentInSlot(PLAYER_TEMP[playerid][pt_MECHANIC_VEHICLE_ID], slot);
						if(current_component) RemoveVehicleComponent(PLAYER_TEMP[playerid][pt_MECHANIC_VEHICLE_ID], current_component);
						
						GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_MECHANIC_VEHICLE_ID] ][gb_vehicle_COMPONENTS][slot] = PLAYER_TEMP[playerid][pt_MECHANIC_EXTRA];
						AddVehicleComponent(PLAYER_TEMP[playerid][pt_MECHANIC_VEHICLE_ID], PLAYER_TEMP[playerid][pt_MECHANIC_EXTRA]);
						
						PLAYER_MISC[playerid][MISC_MECHANIC_PIECES] -= PLAYER_TEMP[playerid][pt_MECHANIC_PIECES];
						SendClientMessageEx(PLAYER_TEMP[playerid][pt_MECHANIC_PID], -1, "{E6F8E0}Has necesitado 5 piezas para tunear el vehículo.", PLAYER_TEMP[playerid][pt_MECHANIC_PIECES]);
					}
					case MECHANIC_OPTION_PAINTJOB:
					{
						GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_MECHANIC_VEHICLE_ID] ][gb_vehicle_PAINTJOB] = PLAYER_TEMP[playerid][pt_MECHANIC_EXTRA];
						ChangeVehiclePaintjob(PLAYER_TEMP[playerid][pt_MECHANIC_VEHICLE_ID], GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_MECHANIC_VEHICLE_ID] ][gb_vehicle_PAINTJOB]);
						SendClientMessage(playerid, -1, "{E6F8E0}Has necesitado 15 piezas para el paintjob de el vehículo.");
					}
				}
				
				SendClientMessageEx(playerid, -1, "{E6F8E0}Le has pagado %s$ al mecánico por su trabajo.", number_format_thousand(PLAYER_TEMP[playerid][pt_MECHANIC_PRICE]));
				SendClientMessageEx(PLAYER_TEMP[playerid][pt_MECHANIC_PID], -1, "{E6F8E0}%s te ha pagado %s$ por tu trabajo.", PLAYER_TEMP[playerid][pt_RP_NAME], number_format_thousand(PLAYER_TEMP[playerid][pt_MECHANIC_PRICE]));
			}
			else
			{
				if(gettime() > PLAYER_TEMP[playerid][pt_MECHANIC_TIME] + 30) return 1;
				if(!IsPlayerConnected(PLAYER_TEMP[playerid][pt_MECHANIC_PID])) return 1;
				if(ACCOUNT_INFO[ PLAYER_TEMP[playerid][pt_MECHANIC_PID] ][ac_ID] != PLAYER_TEMP[playerid][pt_MECHANIC_AID]) return 1;

				SendClientMessage(PLAYER_TEMP[playerid][pt_MECHANIC_PID], -1, "{00FF80}La persona no aceptó lo que le ofreciste.");
			}
			return 1;
		}
		case DIALOG_MECHANIC_SELECT_COL_SLOT:
		{
			if(!GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_VALID]) return 1;
				
			new Float:Vehicle_Pos[3];
			GetVehiclePos(PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID], Vehicle_Pos[0], Vehicle_Pos[1], Vehicle_Pos[2]);
			
			if(!IsPlayerInRangeOfPoint(playerid, 5.0, Vehicle_Pos[0], Vehicle_Pos[1], Vehicle_Pos[2])) return SendClientMessage(playerid, -1, "{00FF80}El vehículo está demasiado lejos.");
			
			if(response)
			{
				PLAYER_TEMP[playerid][pt_MECHANIC_COLOR_SLOT] = listitem;
				ShowDialog(playerid, DIALOG_MECHANIC_SELECT_COLOR);
			}
			else ShowDialog(playerid, DIALOG_MECHANIC_MENU);
			return 1;
		}
		case DIALOG_MECHANIC_SELECT_COLOR:
		{
			if(!GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_VALID]) return 1;
				
			new Float:Vehicle_Pos[3];
			GetVehiclePos(PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID], Vehicle_Pos[0], Vehicle_Pos[1], Vehicle_Pos[2]);
			
			if(!IsPlayerInRangeOfPoint(playerid, 5.0, Vehicle_Pos[0], Vehicle_Pos[1], Vehicle_Pos[2])) return SendClientMessage(playerid, -1, "{00FF80}El vehículo está demasiado lejos.");
			
			if(response)
			{
				if(PLAYER_MISC[playerid][MISC_MECHANIC_PIECES] < 5) return SendClientMessage(playerid, -1, "{00FF80}No tienes suficientes piezas, puedes comprar más piezas en el taller.");

				if(PLAYER_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][player_vehicle_OWNER_ID] == ACCOUNT_INFO[playerid][ac_ID])
				{
					PLAYER_MISC[playerid][MISC_MECHANIC_PIECES] -= 5;
					switch(PLAYER_TEMP[playerid][pt_MECHANIC_COLOR_SLOT])
					{
						case 0: GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_COLOR_1] = listitem;
						case 1: GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_COLOR_2] = listitem;
					}
					ChangeVehicleColor(PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID], GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_COLOR_1], GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_COLOR_2]);
					
					SendClientMessage(playerid, -1, "{E6F8E0}Has necesitado 5 piezas para pintar el vehículo.");
				}
				else
				{
					PLAYER_TEMP[playerid][pt_MECHANIC_SELECTED_COLOR] = listitem;
					ShowDialog(playerid, DIALOG_MECHANIC_COLOR_PRICE);
				}
			}
			else ShowDialog(playerid, DIALOG_MECHANIC_SELECT_COL_SLOT);
			return 1;
		}
		case DIALOG_MECHANIC_REMOVE_COMPONEN:
		{
			if(!GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_VALID]) return 1;
			
			new Float:Vehicle_Pos[3];
			GetVehiclePos(PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID], Vehicle_Pos[0], Vehicle_Pos[1], Vehicle_Pos[2]);
			
			if(!IsPlayerInRangeOfPoint(playerid, 5.0, Vehicle_Pos[0], Vehicle_Pos[1], Vehicle_Pos[2])) return SendClientMessage(playerid, -1, "{00FF80}El vehículo está demasiado lejos.");
		
			if(response)
			{
				if(100 > PLAYER_SKILLS[playerid][WORK_MECHANIC])
				{
					SendClientMessageEx(playerid, -1, "{00FF80}Has realizado %d reparaciones como mecánico, necesitas 100 para tunear vehículos.", PLAYER_SKILLS[playerid][WORK_MECHANIC]);
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if(PLAYER_TUNING_MENU[playerid][listitem][tuning_menu_ID] == 0) return ShowDialog(playerid, dialogid);
				
				RemoveVehicleComponent(PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID], GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_COMPONENTS][ PLAYER_TUNING_MENU[playerid][listitem][tuning_menu_ID] ]);
				GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_COMPONENTS][ PLAYER_TUNING_MENU[playerid][listitem][tuning_menu_ID] ] = 0;
				
				PLAYER_MISC[playerid][MISC_MECHANIC_PIECES] += PLAYER_TUNING_MENU[playerid][listitem][tuning_menu_PIECES];
				SendClientMessageEx(playerid, -1, "{E6F8E0}Componente eliminado, piezas ganadas: %d, piezas totales: %d.", PLAYER_TUNING_MENU[playerid][listitem][tuning_menu_PIECES], PLAYER_MISC[playerid][MISC_MECHANIC_PIECES]);
			}
			else ShowDialog(playerid, DIALOG_MECHANIC_MENU);
			return 1;
		}
		case DIALOG_TUNING_PAINTJOB:
		{
			if(!GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_VALID]) return 1;
			
			new Float:Vehicle_Pos[3];
			GetVehiclePos(PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID], Vehicle_Pos[0], Vehicle_Pos[1], Vehicle_Pos[2]);
			
			if(!IsPlayerInRangeOfPoint(playerid, 5.0, Vehicle_Pos[0], Vehicle_Pos[1], Vehicle_Pos[2])) return SendClientMessage(playerid, -1, "{00FF80}El vehículo está demasiado lejos.");
			
			if(response)
			{
				if(100 > PLAYER_SKILLS[playerid][WORK_MECHANIC])
				{
					SendClientMessageEx(playerid, -1, "{00FF80}Has realizado %d reparaciones como mecánico, necesitas 100 para cambiar el paintjob de vehículos.", PLAYER_SKILLS[playerid][WORK_MECHANIC]);
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if(PLAYER_MISC[playerid][MISC_MECHANIC_PIECES] < 15) return SendClientMessage(playerid, -1, "{00FF80}No tienes suficientes piezas, puedes comprar más piezas en el taller.");
				
				if(listitem == 0)
				{
					if(GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_PAINTJOB] == 3)
					{
						SendClientMessage(playerid, -1, "{00FF80}El vehículo no tiene ningún paintjob.");
						return 1;
					}
					
					GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_PAINTJOB] = 3;
					ChangeVehiclePaintjob(PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID], GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_PAINTJOB]);
					
					PLAYER_MISC[playerid][MISC_MECHANIC_PIECES] += 15;
					SendClientMessageEx(playerid, -1, "{E6F8E0}Paintjob eliminado, piezas ganadas: 15, piezas totales: %d.", PLAYER_MISC[playerid][MISC_MECHANIC_PIECES]);
					return 1;
				}
				
				if(PLAYER_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][player_vehicle_OWNER_ID] == ACCOUNT_INFO[playerid][ac_ID])
				{
					GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_PAINTJOB] = listitem - 1;
					ChangeVehiclePaintjob(PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID], GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_PAINTJOB]);
					SendClientMessage(playerid, -1, "{E6F8E0}Has necesitado 15 piezas para el paintjob de el vehículo.");
				}
				else
				{
					PLAYER_TEMP[playerid][pt_PAINTJOB_SELECTED_ID] = listitem - 1;
					ShowDialog(playerid, DIALOG_MECHANIC_PAINTJOB_PRICE);
				}
			}
			else ShowDialog(playerid, DIALOG_MECHANIC_MENU);
			return 1;
		}
		/*case DIALOG_SELECT_TRASH_ROUTE:
		{
			if(response)
			{
				if(TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_PASSENGER_ID] == INVALID_PLAYER_ID)
				{
					SendClientMessage(playerid, -1, "{E6F8E0}Necesitas un compañero para comenzar a recoger basura.");
					return 1;
				}
				
				TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_JOB_STARTED] = true;
				TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_ROUTE] = listitem;
				TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_CP] = 0;
				
				SetPlayerTrashCheckpoint(TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_DRIVER_ID], PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID]);
				SetPlayerTrashCheckpoint(TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_PASSENGER_ID], PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID]);
				
				CreatePlayerTrashRouteObjects(TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_DRIVER_ID], listitem);
				CreatePlayerTrashRouteObjects(TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_PASSENGER_ID], listitem);
				
				SendClientMessageEx(TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_DRIVER_ID], -1, "Ruta {42aaf4}#%d {FFFFFF}establecida, pueden comenzar.", TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_ROUTE] + 1);
				SendClientMessageEx(TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_PASSENGER_ID], -1, "Ruta {42aaf4}#%d {FFFFFF}establecida, pueden comenzar.", TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_ROUTE] + 1);
			}
			return 1;
		}*/
		case DIALOG_SEED_LIST:
		{
			if(response)
			{
				if(seed_info[listitem][seed_info_EXP] > PLAYER_SKILLS[playerid][WORK_FARMER]) return SendClientMessageEx(playerid, -1, "{00FF80}Necesitas haber plantado al menos %d plantas como agricultor para poder comprar esta semilla.", seed_info[listitem][seed_info_EXP]);
				
				PLAYER_TEMP[playerid][pt_SELECTED_BUY_SEED_ID] = listitem;
				ShowDialog(playerid, DIALOG_SEED_BUY);
			}
			return 1;
		}
		case DIALOG_SEED_BUY:
		{
			if(response)
			{
				if(sscanf(inputtext, "d", inputtext[0])) return SendClientMessage(playerid, -1, "{00FF80}La cantidad de semillas no es correcta.");
				if(inputtext[0] <= 0 || inputtext[0] > 100000) return SendClientMessage(playerid, -1, "{00FF80}La cantidad de semillas no es correcta.");
				
				new price = seed_info[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_SEED_ID] ][seed_info_PRICE] * inputtext[0];
				if(price > CHARACTER_INFO[playerid][ch_CASH]) return SendClientMessageEx(playerid, -1, "{E6F8E0}No tienes dinero suficiente, te faltan {FF6633}%s$ {E6F8E0}para poder comprar las semillas.", number_format_thousand(price - CHARACTER_INFO[playerid][ch_CASH]));
				
				switch(seed_info[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_SEED_ID] ][seed_info_PLANT_TYPE])
				{
					case PLANT_TYPE_MEDICINE: PLAYER_MISC[playerid][MISC_SEED_MEDICINE] += inputtext[0];
					case PLANT_TYPE_CANNABIS: PLAYER_MISC[playerid][MISC_SEED_CANNABIS] += inputtext[0];
					case PLANT_TYPE_CRACK: PLAYER_MISC[playerid][MISC_SEED_CRACK] += inputtext[0];
				}
				
				GivePlayerCash(playerid, -price);
				SendClientMessageEx(playerid, -1, "{E6F8E0}Has comprado %s semillas de %s por %s$.", number_format_thousand(inputtext[0]), seed_info[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_SEED_ID] ][seed_info_NAME], number_format_thousand(price));
			}
			else ShowDialog(playerid, DIALOG_SEED_LIST);
			return 1;
		}
		case DIALOG_PLANT_PLANTS:
		{
			if(response)
			{
				if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendClientMessage(playerid, -1, "{00FF80}No estás depie.");
				if(!IsPlayerInDynamicArea(playerid, Farmer_Area)) return SendClientMessage(playerid, 0xA9F5A9AA, "No estás en la zona para plantar, está marcada en el mapa con una bandera.");
				
				switch(seed_info[listitem][seed_info_PLANT_TYPE])
				{
					case PLANT_TYPE_MEDICINE:
					{
						if(plant_info[listitem][plant_info_SEEDS] > PLAYER_MISC[playerid][MISC_SEED_MEDICINE])
						{
							SendClientMessage(playerid, -1, "{00FF80}No tienes las semillas necesarias para plantar esta planta.");
							return 1;
						}
						PLAYER_MISC[playerid][MISC_SEED_MEDICINE] -= plant_info[listitem][plant_info_SEEDS];
					}
					case PLANT_TYPE_CANNABIS:
					{
						if(plant_info[listitem][plant_info_SEEDS] > PLAYER_MISC[playerid][MISC_SEED_CANNABIS])
						{
							SendClientMessage(playerid, -1, "{00FF80}No tienes las semillas necesarias para plantar esta planta.");
							return 1;
						}
						PLAYER_MISC[playerid][MISC_SEED_CANNABIS] -= plant_info[listitem][plant_info_SEEDS];
					}
					case PLANT_TYPE_CRACK:
					{
						if(plant_info[listitem][plant_info_SEEDS] > PLAYER_MISC[playerid][MISC_SEED_CRACK])
						{
							SendClientMessage(playerid, -1, "{00FF80}No tienes las semillas necesarias para plantar esta planta.");
							return 1;
						}
						PLAYER_MISC[playerid][MISC_SEED_CRACK] -= plant_info[listitem][plant_info_SEEDS];
					}
				}
				
				SendClientMessageEx(playerid, -1, "{E6F8E0}Vas a plantar '%s' y vas a necesitar %d semillas.", plant_info[listitem][plant_info_NAME], plant_info[listitem][plant_info_SEEDS]);
				
				
				new Float:offset = floatdiv(PLAYER_SKILLS[playerid][WORK_FARMER], 10);
				if(offset > 30.0) offset = 30.0;
				
				PLAYER_TEMP[playerid][pt_LAST_PLANT_TIME] = gettime();
				PLAYER_TEMP[playerid][pt_PLANTING_PLANT_SELECTED] = listitem;
				PLAYER_TEMP[playerid][pt_PLANTING] = true;
				PLAYER_TEMP[playerid][pt_WORKING_IN] = WORK_FARMER;
				PLAYER_TEMP[playerid][pt_PLANTING_PROGRESS] = frandom(10.0, 8.0, 2) + offset;
				UpdatePlantSizeTextdrawPlant(playerid);
				
				PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_PLANT_PLANT][0]);
				PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_PLANT_PLANT][1]);
				PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_PLANT_PLANT][2]);
				PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_PLANT_PLANT][3]);
				
				TogglePlayerControllableEx(playerid, false);
				SetCameraBehindPlayer(playerid);
				ApplyAnimation(playerid, "BOMBER", "BOM_Plant_Loop", 4.1, true, false, false, false, 0);
				
				KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][12]);
				PLAYER_TEMP[playerid][pt_TIMERS][12] = SetTimerEx("PlantingUp", 1000, false, "id", playerid, plant_info[listitem][plant_info_SEEDS]);

			}
			return 1;
		}
		case DIALOG_BLACK_MARKET:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						if(ACCOUNT_INFO[playerid][ac_LEVEL] < 3) return SendClientMessage(playerid, 0xA9F5A9AA, "Necesitas ser al menos nivel 3 para poder comprar armas.");
						if(!PLAYER_CREW[playerid][player_crew_VALID] && !ACCOUNT_INFO[playerid][ac_SU]) return SendClientMessage(playerid, 0xA9F5A9AA, "Solo puedes comprar armas aquí si perteneces a una banda o eres VIP (/ayuda).");
						
						if(!ACCOUNT_INFO[playerid][ac_SU])
						{
							if(gettime() < PLAYER_TEMP[playerid][pt_LAST_BM_BUY] + 300)
							{
								new time = (300-(gettime()-PLAYER_TEMP[playerid][pt_LAST_BM_BUY]));
								SendClientMessageEx(playerid, 0xA9F5A9AA, "Tienes que esperar %s minutos para volver a comprar aquí.", TimeConvert(time));
								return 1;
							}
						}
						
						ShowDialog(playerid, DIALOG_BLACK_MARKET_WEAPONS);
					}
					case 1: ShowDialog(playerid, DIALOG_BLACK_MARKET_SELECT_WEA);
				}
			}
			return 1;
		}
		case DIALOG_BLACK_MARKET_WEAPONS:
		{
			if(response)
			{
				if(BLACK_MARKT_WEAPONS[listitem][black_market_EXP] > CHARACTER_INFO[playerid][ch_BLACK_MARKET_LEVEL])
				{
					SendClientMessageEx(playerid, -1, "{00FF80}Necesitas ser un cliente más habitual para que te vendan esta arma (%d/%d).", CHARACTER_INFO[playerid][ch_BLACK_MARKET_LEVEL], BLACK_MARKT_WEAPONS[listitem][black_market_EXP]);
					return 1;
				}
				
				
				if(CHARACTER_INFO[playerid][ch_CASH] >= BLACK_MARKT_WEAPONS[listitem][black_market_WEAPON_PRICE])
				{
					new weapon_slot = WEAPON_INFO[ BLACK_MARKT_WEAPONS[listitem][black_market_WEAPON_ID] ][weapon_info_SLOT];
					if(PLAYER_WEAPONS[playerid][weapon_slot][player_weapon_ID] != 0)
					{
						SendClientMessageEx(playerid, -1, "{00FF80}Para comprar esta arma tienes que deshacerte de tu '%s' (%d) para tener espacio.", WEAPON_INFO[ PLAYER_WEAPONS[playerid][weapon_slot][player_weapon_ID] ][weapon_info_NAME], weapon_slot);
						return 1;
					}
					
					PLAYER_TEMP[playerid][pt_LAST_BM_BUY] = gettime();
					
					GivePlayerCash(playerid, -BLACK_MARKT_WEAPONS[listitem][black_market_WEAPON_PRICE]);
					CHARACTER_INFO[playerid][ch_BLACK_MARKET_LEVEL] ++;
					
					if(WEAPON_INFO[ BLACK_MARKT_WEAPONS[listitem][black_market_WEAPON_ID] ][weapon_info_AMMO]) GivePlayerWeaponEx(playerid, BLACK_MARKT_WEAPONS[listitem][black_market_WEAPON_ID], 50);
					else GivePlayerWeaponEx(playerid, BLACK_MARKT_WEAPONS[listitem][black_market_WEAPON_ID], 1);

					RegisterNewPlayerWeapon(playerid, weapon_slot); 
					SendClientMessageEx(playerid, -1, "{E6F8E0}Arma {98d16c}'%s' {E6F8E0}comprada por %s$.", WEAPON_INFO[ BLACK_MARKT_WEAPONS[listitem][black_market_WEAPON_ID] ][weapon_info_NAME], number_format_thousand(BLACK_MARKT_WEAPONS[listitem][black_market_WEAPON_PRICE]));
				}
				else
				{
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					SendClientMessageEx(playerid, -1, "{E6F8E0}No tienes dinero suficiente, te faltan {FF6633}%s$ {E6F8E0}para poder comprar esta arma.", number_format_thousand(BLACK_MARKT_WEAPONS[listitem][black_market_WEAPON_PRICE] - CHARACTER_INFO[playerid][ch_CASH]));
				}
			}
			return 1;
		}


		case DIALOG_PLAYER_WEAPONS:
		{
			if(response)
			{
				if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == -1) return 1;
				
				if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == 13 + 20) // Eliminar todo
				{
					ShowDialog(playerid, DIALOG_PLAYER_WEAPONS_DELETE_A);
					return 1;
				}
				
				PLAYER_TEMP[playerid][pt_SELECTED_DIALOG_WEAPON_SLOT] = PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem];
				ShowDialog(playerid, DIALOG_PLAYER_WEAPONS_DELETE);
			}
			return 1;
		}
		case DIALOG_PLAYER_WEAPONS_DELETE_A:
		{
			if(response)
			{
				if(ABRIO_INVENTARIO[playerid]==true) HiveIntaruil(playerid);

				/*format(DB_Query, sizeof DB_Query, "DELETE FROM `ITEM_EQUIPED` WHERE `PLAYER` = '%d';", ACCOUNT_INFO[playerid][ac_ID]);
				db_query(Database, DB_Query);*/
				
				for(new i = 0; i != 13; i ++)
				{
					if(!PLAYER_WEAPONS[playerid][i][player_weapon_DB_ID]) continue;
					new DB_Query[128];
					format(DB_Query, sizeof(DB_Query), "DELETE FROM `ITEM_EQUIPED` WHERE `ESTADO` = '%d' AND `ID` = '%d';", PLAYER_WEAPONS[playerid][i][player_weapon_AMMO], PLAYER_WEAPONS[playerid][i][player_weapon_DB_ID]);
					db_query(Database, DB_Query);
				}

				ResetPlayerWeaponsEx(playerid);
		
				SendClientMessage(playerid, -1, "{E6F8E0}Ha eliminado todas tus armas.");
			}
			else ShowDialog(playerid, DIALOG_PLAYER_WEAPONS);
			return 1;
		}
		case DIALOG_PLAYER_WEAPONS_DELETE:
		{
			if(response)
			{
				SendClientMessageEx(playerid, -1, "{00FF80}Has eliminado tu '%s' de tus armas.", WEAPON_INFO[ PLAYER_WEAPONS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_DIALOG_WEAPON_SLOT] ][player_weapon_ID] ][weapon_info_NAME]);
				RemovePlayerSlotWeapon(playerid, PLAYER_TEMP[playerid][pt_SELECTED_DIALOG_WEAPON_SLOT], true);
			}
			else ShowDialog(playerid, DIALOG_PLAYER_WEAPONS);
			return 1;
		}
		case DIALOG_ANIMS:
		{
		    if(response)
		    {
		        switch(listitem)
		        {
		            case 0: SetPlayerSpecialAction(playerid,SPECIAL_ACTION_HANDSUP);//rendirse
		            case 1: ApplyAnimation(playerid, "BLOWJOBZ", "BJ_COUCH_LOOP_W", 4.0, 1, 1, 1, 0, 0);//blowjob
		            case 2: ApplyAnimation(playerid,"PED","BIKE_fallR",4.0,0,1,1,1,0);//rodar
		            case 3: ApplyAnimation(playerid,"PED", "WALK_DRUNK",4.0,1,1,1,1,500);//borracho
		            case 4: ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 1, 1, 0,0);//bomba
		            case 5: ApplyAnimation( playerid,"ped", "ARRESTgun", 4.0, 0, 1, 1, 1,500);//apuntar
		            case 6: ApplyAnimation(playerid, "RAPPING", "Laugh_01", 4.0, 0, 0, 0, 0,0);//reir
		            case 7: ApplyAnimation(playerid, "SHOP", "ROB_Loop_Threat", 4.0, 0, 0, 0, 1,500);//amenazar
		            case 8: ApplyAnimation(playerid, "PAULNMAC", "wank_loop", 4.0, 1, 0, 0, 1, 0);//paja
		            case 9: ApplyAnimation(playerid, "SWEET", "LaFin_Sweet", 4.0, 0, 1, 1, 1, 0);//herido
		            case 10: ApplyAnimation(playerid, "COP_AMBIENT", "Coplook_loop", 4.0, 1, 1, 1, 0, 4000);//cruzarbrazos
		            case 11: ApplyAnimation(playerid,"SUNBATHE", "Lay_Bac_in", 4.0, 0, 0, 0, 1, 0);//recostarse
		            case 12: ApplyAnimation(playerid, "ped", "cower", 4.0, 1, 0, 0, 0, 0);//crubrirse
		            case 13: ApplyAnimation(playerid, "FOOD", "EAT_Vomit_P", 3.0, 0, 0, 0, 0, 0);//vomitar
		            case 14: ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.00, 0, 0, 0, 0, 0);//comer
		            case 15: ApplyAnimation(playerid, "KISSING", "BD_GF_Wave", 3.0, 0, 0, 0, 0, 0);//despedir
		            case 16: ApplyAnimation(playerid, "SWEET", "sweet_ass_slap", 4.0, 0, 0, 0, 0, 0);//nalgada
		            case 17: ApplyAnimation(playerid, "WUZI", "CS_Dead_Guy", 4.0, 0, 0, 0, 1, 0);//agonizar
		            case 18: ApplyAnimation(playerid, "KISSING", "Playa_Kiss_02", 4.0, 0, 0, 0, 0, 0);//besar
		            case 19: ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.0, 0, 0, 0, 1, 0);//crack
		            case 20: SetPlayerSpecialAction(playerid, SPECIAL_ACTION_PISSING);//mear
		            case 21: ApplyAnimation(playerid, "SUNBATHE", "ParkSit_M_in", 4.000000, 0, 1, 1, 1, 0);//sentarse
		            case 22: ApplyAnimation( playerid,"ped", "fucku", 4.0, 0, 1, 1, 1, 1 );//fucku
		            case 23: ApplyAnimation(playerid, "ped", "phone_in", 4.000000, 0, 0, 0, 1, 4000);//llamar
		            case 24: ApplyAnimation(playerid, "PARK", "Tai_Chi_Loop",  4.1,7,5,1,1,1);//taichi
		            case 25: ApplyAnimation(playerid, "BAR", "dnk_stndM_loop", 4.0, 0, 1, 1, 0, 4000);//beber
		            case 26: ApplyAnimation(playerid, "GYMNASIUM", "gym_shadowbox",  4.1,7,5,1,1,1);//boxear
		            case 27: ApplyAnimation(playerid,"GANGS","hndshkfa_swt",4.1,0,0,0,0,0);//saludar
		            case 28: ApplyAnimation(playerid,"GRAVEYARD","mrnF_loop",4.1,0,0,0,0,0);//llorar
		            case 29: ApplyAnimation(playerid,"INT_HOUSE","BED_In_R",4.1,0,0,0,1,0);//dormir
		            case 30: ApplyAnimation(playerid,"RAPPING","RAP_B_Loop",4.0,1,0,0,0,8000);//rapear
		            case 31: ApplyAnimation(playerid,"STRIP","strip_A",4.1,7,5,1,1,1);//strip
		            case 32: ApplyAnimation(playerid,"DANCING","DAN_Down_A",4.1,7,5,1,1,1);//bailar
		            case 33: ApplyAnimation(playerid,"ON_LOOKERS","shout_02",4.1,7,5,1,1,1);//alentar
		            case 34: ApplyAnimation(playerid,"PED","IDLE_chat",4.1,7,5,1,1,1);//hablar
					case 35: ApplyAnimation(playerid, "ped", "SEAT_down", 4.000000, 0, 1, 1, 1, 0);//asiento
		        }
				SendClientMessage(playerid, -1, "{E6F8E0}Para detener la animacion utiliza /parar.");
			}
			return 1;
		}
		case DIALOG_TRICKS_FOOD:
		{
			if(response)
			{
				if(gettime() > PLAYER_TEMP[playerid][pt_TRICK_TIME] + 20) return SendClientMessage(playerid, -1, "{00FF80}Has tardado mucho en aceptarlo.");
				if(!IsPlayerConnected(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID])) return SendClientMessage(playerid, -1, "{00FF80}El vendedor ya no está en el servidor.");
				if(ACCOUNT_INFO[ PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID] ][ac_ID] != PLAYER_TEMP[playerid][pt_TRICK_SELLER_AID]) return SendClientMessage(playerid, -1, "{00FF80}El vendedor ya no está en el servidor.");

				new Float:pos[3]; GetPlayerPos(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID], pos[0], pos[1], pos[2]);
				if(!IsPlayerInRangeOfPoint(playerid, 2.0, pos[0], pos[1], pos[2])) return SendClientMessage(playerid, 0xA9F5A9AA, "El vendedor está demasiado lejos.");
				if(PLAYER_TEMP[ PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID] ][pt_GAME_STATE] != GAME_STATE_NORMAL) return SendClientMessage(playerid, -1, "{00FF80}El vendedor no está disponible.");
				

				new to_player_slot = GetEmptyPlayerPocketSlot(playerid);
				if(to_player_slot == -1)
				{
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					SendClientMessage(playerid, -1, "{00FF80}No tienes espacio en tus /alimentos para comprar esto.");
					return 1;
				}
				
				TransferPlayerPocketObject(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID], PLAYER_TEMP[playerid][pt_TRICK_SELLER_EXTRA], playerid, to_player_slot);
				
				GivePlayerCash(playerid, -PLAYER_TEMP[playerid][pt_TRICK_PRICE]);
				GivePlayerCash(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID], PLAYER_TEMP[playerid][pt_TRICK_PRICE]);
				SendClientMessageEx(playerid, -1, "{E6F8E0}Te has gastado %s$ con esta compra.", number_format_thousand(PLAYER_TEMP[playerid][pt_TRICK_PRICE]));
				SendClientMessageEx(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID], -1, "{E6F8E0}Has ganado %s$ con esta venta.", number_format_thousand(PLAYER_TEMP[playerid][pt_TRICK_PRICE]));
				
				new action[64];
				format(action, sizeof action, "y %s llegan a un acuerdo.", PLAYER_TEMP[playerid][pt_RP_NAME]);
				Auto_SendPlayerAction(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID], action);
			}
			else
			{
				if(gettime() > PLAYER_TEMP[playerid][pt_TRICK_TIME] + 20) return 1;
				if(!IsPlayerConnected(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID])) return 1;
				if(ACCOUNT_INFO[ PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID] ][ac_ID] != PLAYER_TEMP[playerid][pt_TRICK_SELLER_AID]) return 1;

				SendClientMessage(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID], -1, "{00FF80}El comprador no ha aceptado tu trato.");
			}
			return 1;
		}
		case DIALOG_TRICKS_MEDICINE:
		{
			if(response)
			{
				if(gettime() > PLAYER_TEMP[playerid][pt_TRICK_TIME] + 20) return SendClientMessage(playerid, -1, "{00FF80}Has tardado mucho en aceptarlo.");
				if(!IsPlayerConnected(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID])) return SendClientMessage(playerid, -1, "{00FF80}El vendedor ya no está en el servidor.");
				if(ACCOUNT_INFO[ PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID] ][ac_ID] != PLAYER_TEMP[playerid][pt_TRICK_SELLER_AID]) return SendClientMessage(playerid, -1, "{00FF80}El vendedor ya no está en el servidor.");

				new Float:pos[3]; GetPlayerPos(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID], pos[0], pos[1], pos[2]);
				if(!IsPlayerInRangeOfPoint(playerid, 2.0, pos[0], pos[1], pos[2])) return SendClientMessage(playerid, 0xA9F5A9AA, "El vendedor está demasiado lejos.");
				if(PLAYER_TEMP[ PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID] ][pt_GAME_STATE] != GAME_STATE_NORMAL) return SendClientMessage(playerid, -1, "{00FF80}El vendedor no está disponible.");

				
				PLAYER_MISC[playerid][MISC_MEDICINE] += PLAYER_TEMP[playerid][pt_TRICK_SELLER_EXTRA];
				PLAYER_MISC[ PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID] ][MISC_MEDICINE] -= PLAYER_TEMP[playerid][pt_TRICK_SELLER_EXTRA];
				
				
				GivePlayerCash(playerid, -PLAYER_TEMP[playerid][pt_TRICK_PRICE]);
				GivePlayerCash(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID], PLAYER_TEMP[playerid][pt_TRICK_PRICE]);
				SendClientMessageEx(playerid, -1, "{E6F8E0}Te has gastado %s$ con esta compra.", number_format_thousand(PLAYER_TEMP[playerid][pt_TRICK_PRICE]));
				SendClientMessageEx(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID], -1, "{E6F8E0}Has ganado %s$ con esta venta.", number_format_thousand(PLAYER_TEMP[playerid][pt_TRICK_PRICE]));
				
				new action[64];
				format(action, sizeof action, "y %s llegan a un acuerdo.", PLAYER_TEMP[playerid][pt_RP_NAME]);
				Auto_SendPlayerAction(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID], action);
			}
			else
			{
				if(gettime() > PLAYER_TEMP[playerid][pt_TRICK_TIME] + 20) return 1;
				if(!IsPlayerConnected(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID])) return 1;
				if(ACCOUNT_INFO[ PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID] ][ac_ID] != PLAYER_TEMP[playerid][pt_TRICK_SELLER_AID]) return 1;

				SendClientMessage(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID], -1, "{00FF80}El comprador no ha aceptado tu trato.");
			}
			return 1;
		}
		case DIALOG_TRICKS_CANNABIS:
		{
			if(response)
			{
				if(gettime() > PLAYER_TEMP[playerid][pt_TRICK_TIME] + 20) return SendClientMessage(playerid, -1, "{00FF80}Has tardado mucho en aceptarlo.");
				if(!IsPlayerConnected(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID])) return SendClientMessage(playerid, -1, "{00FF80}El vendedor ya no está en el servidor.");
				if(ACCOUNT_INFO[ PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID] ][ac_ID] != PLAYER_TEMP[playerid][pt_TRICK_SELLER_AID]) return SendClientMessage(playerid, -1, "{00FF80}El vendedor ya no está en el servidor.");

				new Float:pos[3]; GetPlayerPos(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID], pos[0], pos[1], pos[2]);
				if(!IsPlayerInRangeOfPoint(playerid, 2.0, pos[0], pos[1], pos[2])) return SendClientMessage(playerid, 0xA9F5A9AA, "El vendedor está demasiado lejos.");
				if(PLAYER_TEMP[ PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID] ][pt_GAME_STATE] != GAME_STATE_NORMAL) return SendClientMessage(playerid, -1, "{00FF80}El vendedor no está disponible.");

				
				PLAYER_MISC[playerid][MISC_CANNABIS] += PLAYER_TEMP[playerid][pt_TRICK_SELLER_EXTRA];
				PLAYER_MISC[ PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID] ][MISC_CANNABIS] -= PLAYER_TEMP[playerid][pt_TRICK_SELLER_EXTRA];
				
				
				GivePlayerCash(playerid, -PLAYER_TEMP[playerid][pt_TRICK_PRICE]);
				GivePlayerCash(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID], PLAYER_TEMP[playerid][pt_TRICK_PRICE]);
				SendClientMessageEx(playerid, -1, "{E6F8E0}Te has gastado %s$ con esta compra.", number_format_thousand(PLAYER_TEMP[playerid][pt_TRICK_PRICE]));
				SendClientMessageEx(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID], -1, "{E6F8E0}Has ganado %s$ con esta venta.", number_format_thousand(PLAYER_TEMP[playerid][pt_TRICK_PRICE]));
				
				new action[64];
				format(action, sizeof action, "y %s llegan a un acuerdo.", PLAYER_TEMP[playerid][pt_RP_NAME]);
				Auto_SendPlayerAction(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID], action);
			}
			else
			{
				if(gettime() > PLAYER_TEMP[playerid][pt_TRICK_TIME] + 20) return 1;
				if(!IsPlayerConnected(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID])) return 1;
				if(ACCOUNT_INFO[ PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID] ][ac_ID] != PLAYER_TEMP[playerid][pt_TRICK_SELLER_AID]) return 1;

				SendClientMessage(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID], -1, "{00FF80}El comprador no ha aceptado tu trato.");
			}
			return 1;
		}
		case DIALOG_TRICKS_CRACK:
		{
			if(response)
			{
				if(gettime() > PLAYER_TEMP[playerid][pt_TRICK_TIME] + 20) return SendClientMessage(playerid, -1, "{00FF80}Has tardado mucho en aceptarlo.");
				if(!IsPlayerConnected(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID])) return SendClientMessage(playerid, -1, "{00FF80}El vendedor ya no está en el servidor.");
				if(ACCOUNT_INFO[ PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID] ][ac_ID] != PLAYER_TEMP[playerid][pt_TRICK_SELLER_AID]) return SendClientMessage(playerid, -1, "{00FF80}El vendedor ya no está en el servidor.");

				new Float:pos[3]; GetPlayerPos(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID], pos[0], pos[1], pos[2]);
				if(!IsPlayerInRangeOfPoint(playerid, 2.0, pos[0], pos[1], pos[2])) return SendClientMessage(playerid, 0xA9F5A9AA, "El vendedor está demasiado lejos.");
				if(PLAYER_TEMP[ PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID] ][pt_GAME_STATE] != GAME_STATE_NORMAL) return SendClientMessage(playerid, -1, "{00FF80}El vendedor no está disponible.");

				
				PLAYER_MISC[playerid][MISC_CRACK] += PLAYER_TEMP[playerid][pt_TRICK_SELLER_EXTRA];
				PLAYER_MISC[ PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID] ][MISC_CRACK] -= PLAYER_TEMP[playerid][pt_TRICK_SELLER_EXTRA];
				
				
				GivePlayerCash(playerid, -PLAYER_TEMP[playerid][pt_TRICK_PRICE]);
				GivePlayerCash(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID], PLAYER_TEMP[playerid][pt_TRICK_PRICE]);
				SendClientMessageEx(playerid, -1, "{E6F8E0}Te has gastado %s$ con esta compra.", number_format_thousand(PLAYER_TEMP[playerid][pt_TRICK_PRICE]));
				SendClientMessageEx(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID], -1, "{E6F8E0}Has ganado %s$ con esta venta.", number_format_thousand(PLAYER_TEMP[playerid][pt_TRICK_PRICE]));
				
				new action[64];
				format(action, sizeof action, "y %s llegan a un acuerdo.", PLAYER_TEMP[playerid][pt_RP_NAME]);
				Auto_SendPlayerAction(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID], action);
			}
			else
			{
				if(gettime() > PLAYER_TEMP[playerid][pt_TRICK_TIME] + 20) return 1;
				if(!IsPlayerConnected(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID])) return 1;
				if(ACCOUNT_INFO[ PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID] ][ac_ID] != PLAYER_TEMP[playerid][pt_TRICK_SELLER_AID]) return 1;

				SendClientMessage(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID], -1, "{00FF80}El comprador no ha aceptado tu trato.");
			}
			return 1;
		}
		case DIALOG_TRICKS_SU:
		{
			if(response)
			{
				if(gettime() > PLAYER_TEMP[playerid][pt_TRICK_TIME] + 20) return SendClientMessage(playerid, -1, "{00FF80}Has tardado mucho en aceptarlo.");
				if(!IsPlayerConnected(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID])) return SendClientMessage(playerid, -1, "{00FF80}El vendedor ya no está en el servidor.");
				if(ACCOUNT_INFO[ PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID] ][ac_ID] != PLAYER_TEMP[playerid][pt_TRICK_SELLER_AID]) return SendClientMessage(playerid, -1, "{00FF80}El vendedor ya no está en el servidor.");

				new Float:pos[3]; GetPlayerPos(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID], pos[0], pos[1], pos[2]);
				if(!IsPlayerInRangeOfPoint(playerid, 2.0, pos[0], pos[1], pos[2])) return SendClientMessage(playerid, 0xA9F5A9AA, "El vendedor está demasiado lejos.");
				if(PLAYER_TEMP[ PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID] ][pt_GAME_STATE] != GAME_STATE_NORMAL) return SendClientMessage(playerid, -1, "{00FF80}El vendedor no está disponible.");

				
				ACCOUNT_INFO[playerid][ac_SD] += PLAYER_TEMP[playerid][pt_TRICK_SELLER_EXTRA];
				ACCOUNT_INFO[ PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID] ][ac_SD] -= PLAYER_TEMP[playerid][pt_TRICK_SELLER_EXTRA];
				
				new DB_Query_update[256];
				format
				(
					DB_Query_update, sizeof DB_Query_update,
					
						"\
							UPDATE `CUENTA` SET `SD` = '%d' WHERE `ID` = '%d';\
							UPDATE `CUENTA` SET `SD` = '%d' WHERE `ID` = '%d';\
						",
							ACCOUNT_INFO[playerid][ac_SD], ACCOUNT_INFO[playerid][ac_ID],
							ACCOUNT_INFO[ PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID] ][ac_SD], ACCOUNT_INFO[ PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID] ][ac_ID]
				);
				db_query(Database, DB_Query_update);
							
				
				
				GivePlayerCash(playerid, -PLAYER_TEMP[playerid][pt_TRICK_PRICE]);
				GivePlayerCash(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID], PLAYER_TEMP[playerid][pt_TRICK_PRICE]);
				SendClientMessageEx(playerid, -1, "{E6F8E0}Te has gastado %s$ con esta compra.", number_format_thousand(PLAYER_TEMP[playerid][pt_TRICK_PRICE]));
				SendClientMessageEx(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID], -1, "{E6F8E0}Has ganado %s$ con esta venta.", number_format_thousand(PLAYER_TEMP[playerid][pt_TRICK_PRICE]));
				
				new action[64];
				format(action, sizeof action, "y %s llegan a un acuerdo.", PLAYER_TEMP[playerid][pt_RP_NAME]);
				Auto_SendPlayerAction(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID], action);
			}
			else
			{
				if(gettime() > PLAYER_TEMP[playerid][pt_TRICK_TIME] + 20) return 1;
				if(!IsPlayerConnected(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID])) return 1;
				if(ACCOUNT_INFO[ PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID] ][ac_ID] != PLAYER_TEMP[playerid][pt_TRICK_SELLER_AID]) return 1;

				SendClientMessage(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID], -1, "{00FF80}El comprador no ha aceptado tu trato.");
			}
			return 1;
		}
		case DIALOG_TRICKS_WEAPON:
		{
			if(response)
			{
				if(gettime() > PLAYER_TEMP[playerid][pt_TRICK_TIME] + 20) return SendClientMessage(playerid, -1, "{00FF80}Has tardado mucho en aceptarlo.");
				if(!IsPlayerConnected(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID])) return SendClientMessage(playerid, -1, "{00FF80}El vendedor ya no está en el servidor.");
				if(ACCOUNT_INFO[ PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID] ][ac_ID] != PLAYER_TEMP[playerid][pt_TRICK_SELLER_AID]) return SendClientMessage(playerid, -1, "{00FF80}El vendedor ya no está en el servidor.");

				new Float:pos[3]; GetPlayerPos(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID], pos[0], pos[1], pos[2]);
				if(!IsPlayerInRangeOfPoint(playerid, 2.0, pos[0], pos[1], pos[2])) return SendClientMessage(playerid, 0xA9F5A9AA, "El vendedor está demasiado lejos.");
				if(PLAYER_TEMP[ PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID] ][pt_GAME_STATE] != GAME_STATE_NORMAL) return SendClientMessage(playerid, -1, "{00FF80}El vendedor no está disponible.");

				if(GetCountInventary(playerid) >= Max_Slots_For_Invetary) return MensajesAyuda(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID],"El otro jugador tiene el inventario lleno");

				if(PLAYER_WEAPONS[playerid][ PLAYER_TEMP[playerid][pt_TRICK_SELLER_EXTRA] ][player_weapon_VALID])
				{
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					SendClientMessageEx(playerid, -1, "{00FF80}Para comprar esta arma tienes que deshacerte de tu '%s' (%d) para tener espacio.", WEAPON_INFO[ PLAYER_WEAPONS[playerid][ PLAYER_TEMP[playerid][pt_TRICK_SELLER_EXTRA] ][player_weapon_ID] ][weapon_info_NAME], PLAYER_TEMP[playerid][pt_TRICK_SELLER_EXTRA]);
					return 1;
				}
				
				TransferPlayerWeapon(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID], PLAYER_TEMP[playerid][pt_TRICK_SELLER_EXTRA], playerid);
				
				GivePlayerCash(playerid, -PLAYER_TEMP[playerid][pt_TRICK_PRICE]);
				GivePlayerCash(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID], PLAYER_TEMP[playerid][pt_TRICK_PRICE]);
				SendClientMessageEx(playerid, -1, "{E6F8E0}Te has gastado %s$ con esta compra.", number_format_thousand(PLAYER_TEMP[playerid][pt_TRICK_PRICE]));
				SendClientMessageEx(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID], -1, "{E6F8E0}Has ganado %s$ con esta venta.", number_format_thousand(PLAYER_TEMP[playerid][pt_TRICK_PRICE]));
				
				new action[64];
				format(action, sizeof action, "y %s llegan a un acuerdo.", PLAYER_TEMP[playerid][pt_RP_NAME]);
				Auto_SendPlayerAction(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID], action);
			}
			else
			{
				if(gettime() > PLAYER_TEMP[playerid][pt_TRICK_TIME] + 20) return 1;
				if(!IsPlayerConnected(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID])) return 1;
				if(ACCOUNT_INFO[ PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID] ][ac_ID] != PLAYER_TEMP[playerid][pt_TRICK_SELLER_AID]) return 1;

				SendClientMessage(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID], -1, "{00FF80}El comprador no ha aceptado tu trato.");
			}
			return 1;
		}
		case DIALOG_VEHICLE_BOOT:
		{
			if(response)
			{
				if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == -1) return 1;
				if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == MAX_BOOT_SLOTS + 20)
				{
					ShowDialog(playerid, DIALOG_VEHICLE_BOOT_DELETE_ALL);
					return 1;
				}
				
				PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE_BOOT_SLOT] = PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem];
				ShowDialog(playerid, DIALOG_VEHICLE_BOOT_OPTIONS);
			}
			
		}
		case DIALOG_VEHICLE_BOOT_DELETE_ALL:
		{
			if(response)
			{
				new DB_Query[90];
				format(DB_Query, sizeof DB_Query, "DELETE FROM `VEHICLE_BOOT` WHERE `ID_VEHICLE` = '%d';", PLAYER_VEHICLES[ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE] ][player_vehicle_ID]);
				db_query(Database, DB_Query);
				
				new temp_VEHICLE_BOOT[enum_VEHICLE_BOOT];
				for(new i = 0; i != MAX_BOOT_SLOTS; i ++) VEHICLE_BOOT[ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE] ][i] = temp_VEHICLE_BOOT;
		
				SendClientMessage(playerid, -1, "{E6F8E0}Ha eliminado todo de este maletero.");
			}
			return 1;
		}
		case DIALOG_VEHICLE_BOOT_OPTIONS:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						if(!VEHICLE_BOOT[ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE] ][ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE_BOOT_SLOT] ][vehicle_boot_VALID]) return SendClientMessage(playerid, -1, "{00FF80}No hay nada en ese slot.");
						if(VEHICLE_BOOT[ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE] ][ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE_BOOT_SLOT] ][vehicle_boot_TYPE] != BOOT_TYPE_WEAPON) return SendClientMessage(playerid, -1, "{00FF80}En ese slot no hay armas.");
						
						new to_slot = WEAPON_INFO[ VEHICLE_BOOT[ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE] ][ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE_BOOT_SLOT] ][vehicle_boot_INT] ][weapon_info_SLOT];
						if(PLAYER_WEAPONS[playerid][to_slot][player_weapon_VALID])
						{
							PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
							SendClientMessageEx(playerid, -1, "{00FF80}Para sacar esta arma tienes que deshacerte de tu '%s' (%d) para tener espacio.", WEAPON_INFO[ PLAYER_WEAPONS[playerid][ to_slot ][player_weapon_ID] ][weapon_info_NAME], to_slot);
							return 1;
						}
						
						new DB_Query[64];
						format(DB_Query, sizeof DB_Query, "DELETE FROM `VEHICLE_BOOT` WHERE `ID_OBJECT` = '%d';", VEHICLE_BOOT[ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE] ][ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE_BOOT_SLOT] ][vehicle_boot_OBJECT_ID]);
						db_query(Database, DB_Query);
						
						GivePlayerWeaponEx(playerid, VEHICLE_BOOT[ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE] ][ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE_BOOT_SLOT] ][vehicle_boot_INT], VEHICLE_BOOT[ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE] ][ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE_BOOT_SLOT] ][vehicle_boot_INT_EXTRA]);
						RegisterNewPlayerWeapon(playerid, to_slot);
						
						new temp_VEHICLE_BOOT[enum_VEHICLE_BOOT]; VEHICLE_BOOT[ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE] ][ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE_BOOT_SLOT] ] = temp_VEHICLE_BOOT;
						
						Auto_SendPlayerAction(playerid, "saca un arma del maletero de su vehículo.");
					}
					case 1: ShowDialog(playerid, DIALOG_VEHICLE_BOOT_DELETE);
				}
			}
			else ShowDialog(playerid, DIALOG_VEHICLE_BOOT);
			return 1;
		}
		case DIALOG_VEHICLE_BOOT_DELETE:
		{
			if(response)
			{
				SendClientMessageEx(playerid, -1, "{00FF80}Has eliminado tu '%s' de este maletero.", WEAPON_INFO[ VEHICLE_BOOT[ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE] ][ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE_BOOT_SLOT] ][vehicle_boot_INT] ][weapon_info_NAME]);
				
				
				new DB_Query[64];
				format(DB_Query, sizeof DB_Query, "DELETE FROM `VEHICLE_BOOT` WHERE `ID_OBJECT` = '%d';", VEHICLE_BOOT[ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE] ][ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE_BOOT_SLOT] ][vehicle_boot_OBJECT_ID]);
				db_query(Database, DB_Query);
				
				new temp_VEHICLE_BOOT[enum_VEHICLE_BOOT]; VEHICLE_BOOT[ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE] ][ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE_BOOT_SLOT] ] = temp_VEHICLE_BOOT;
			}
			else ShowDialog(playerid, DIALOG_VEHICLE_BOOT_OPTIONS);
			return 1;
		}
		case DIALOG_SELECT_POLICE_SKIN:
		{
			if(response)
			{
				if(!PLAYER_WORKS[playerid][WORK_POLICE]) return 1;
				if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == -1) return 1;
				if(POLICE_SKINS[ PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] ][police_skin_RANK] > PLAYER_SKILLS[playerid][WORK_POLICE]) return ShowDialog(playerid, dialogid);

				SetPlayerSkin(playerid, POLICE_SKINS[ PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] ][police_skin_SKIN]);
				StartPlayerJob(playerid, WORK_POLICE);
			}
			return 1;
		}
		case DIALOG_POLICE_RADIOS:
		{
			if(response)
			{
				PLAYER_TEMP[playerid][pt_POLICE_RADIO] = listitem;
				SendClientMessageEx(playerid, -1, "Tu radio ha sido ajustada a la frecuencia %d.", listitem + 1);
			}
			return 1;
		}
		case DIALOG_POLICE_LIST:
		{
			if(response)
			{
				if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == -1) return 1;
				else if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == -2) // Siguiente
				{
					new the_query[128];
					format(the_query, sizeof the_query, "SELECT COUNT() FROM `PLAYER_WORKS` WHERE `ID_WORK` = '%d' AND `SET` = '1';", WORK_POLICE);
					
					if(PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] >= GetDatabasePages(the_query, PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT]) - 1) PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] = 0;
					else PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] ++;
					ShowDialog(playerid, dialogid);
				}
				else if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == -3) //Anterior
				{
					new the_query[128];
					format(the_query, sizeof the_query, "SELECT COUNT() FROM `PLAYER_WORKS` WHERE `ID_WORK` = '%d' AND `SET` = '1';", WORK_POLICE);
					
					if(PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] <= 0) PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] = GetDatabasePages(the_query, PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT]) - 1;
					else PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] --;
					ShowDialog(playerid, dialogid);
				}
				else
				{
					if(PLAYER_SKILLS[playerid][WORK_POLICE] >= 11)
					{
						PLAYER_TEMP[playerid][pt_SELECTED_DB_AC_ID] = PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem];
						ShowDialog(playerid, DIALOG_POLICE_MODIFY);
					}
				}
			}
			return 1;
		}
		case DIALOG_POLICE_MODIFY:
		{
			if(response)
			{
				if(listitem > PLAYER_SKILLS[playerid][WORK_POLICE])
				{
					SendClientMessage(playerid, -1, "{00FF80}El rango que has seleccionado es superior al tuyo.");
					return 1;
				}					
				
				new DBResult:Result, DB_Query[256], name[24], connected, player_id, current_rank, bool:found;
				format(DB_Query, sizeof DB_Query, "SELECT `CUENTA`.`NAME`, `CUENTA`.`CONNECTED`, `CUENTA`.`PLAYERID`, `PLAYER_SKILLS`.`TOTAL` FROM `CUENTA`, `PLAYER_SKILLS` WHERE `CUENTA`.`ID` = '%d' AND `PLAYER_SKILLS`.`ID_USER` = `CUENTA`.`ID` AND `PLAYER_SKILLS`.`ID_WORK` = '%d';", PLAYER_TEMP[playerid][pt_SELECTED_DB_AC_ID], WORK_POLICE);
				Result = db_query(Database, DB_Query);
				
				if(db_num_rows(Result))
				{
					db_get_field_assoc(Result, "NAME", name, 24);
					connected = db_get_field_assoc_int(Result, "CONNECTED");
					player_id = db_get_field_assoc_int(Result, "PLAYERID");
					current_rank = db_get_field_assoc_int(Result, "TOTAL");
					found = true;
				}
				else found = false;
				db_free_result(Result);
				
				if(!found) return 1;
				if(current_rank > PLAYER_SKILLS[playerid][WORK_POLICE])
				{
					SendClientMessage(playerid, -1, "{00FF80}No puedes modificar el rango de este policía porque es un rango superior al tuyo.");
					return 1;
				}
				
				format(DB_Query, sizeof DB_Query, "UPDATE `PLAYER_SKILLS` SET `TOTAL` = '%d' WHERE `ID_USER` = '%d' AND `ID_WORK` = '%d';", listitem, PLAYER_TEMP[playerid][pt_SELECTED_DB_AC_ID], WORK_POLICE);
				db_query(Database, DB_Query);
				SendClientMessageEx(playerid, -1, "{E6F8E0}El nuevo rango de %s es: '%s'.", name, POLICE_RANKS[listitem]);
				
				if(listitem == 0)
				{
					format(DB_Query, sizeof DB_Query, "UPDATE `PLAYER_WORKS` SET `SET` = '0' WHERE `ID_USER` = '%d' AND `ID_WORK` = '%d';", PLAYER_TEMP[playerid][pt_SELECTED_DB_AC_ID], WORK_POLICE);
					db_query(Database, DB_Query);
				}
				
				if(connected)
				{
					PLAYER_SKILLS[player_id][WORK_POLICE] = listitem;
					
					if(listitem == 0)
					{
						if(PLAYER_TEMP[player_id][pt_WORKING_IN] == WORK_POLICE) EndPlayerJob(player_id);
						PLAYER_WORKS[player_id][WORK_POLICE] = false;
						SendClientMessageEx(player_id, -1, "{00FF80}El %s %s te ha expulsado del cuerpo de policía.", POLICE_RANKS[ PLAYER_SKILLS[playerid][WORK_POLICE] ], PLAYER_TEMP[playerid][pt_RP_NAME]);
					}
					else SendClientMessageEx(player_id, -1, "{E6F8E0}El %s %s ha modificado tu rango del cuerpo de policía a '%s'.", POLICE_RANKS[ PLAYER_SKILLS[playerid][WORK_POLICE] ], PLAYER_TEMP[playerid][pt_RP_NAME], POLICE_RANKS[listitem]);
				}
			}
			else ShowDialog(playerid, DIALOG_POLICE_LIST);
			return 1;
		}
		case DIALOG_POLICE_SHOP:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0: ShowDialog(playerid, DIALOG_POLICE_WEAPONS);
					case 1: ShowDialog(playerid, DIALOG_POLICE_SELECT_WEAPON);
					case 2: ShowDialog(playerid, DIALOG_POLICE_ARMOUR);
				}
			}
			return 1;
		}
		case DIALOG_POLICE_SELECT_WEAPON:
		{
			if(response)
			{
				if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == -1) return 1;
				
				PLAYER_TEMP[playerid][pt_SELECTED_DIALOG_WEAPON_SLOT] = PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem];
				
				if(!WEAPON_INFO[ PLAYER_WEAPONS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_DIALOG_WEAPON_SLOT] ][player_weapon_ID] ][weapon_info_AMMO])
				{
					SendClientMessage(playerid, -1, "{00FF80}Este tipo de arma no necesita munición.");
					return 1;
				}
				
				ShowDialog(playerid, DIALOG_POLICE_AMMO);
			}
			return 1;
		}
		case DIALOG_POLICE_AMMO:
		{
			if(response)
			{
				if(sscanf(inputtext, "d", inputtext[0])) return ShowDialog(playerid, dialogid);
				if(inputtext[0] <= 0 || inputtext[0] > 9999) return SendClientMessage(playerid, -1, "{00FF80}La cantidad de munición no es correcta.");
				
				new price = 0 * inputtext[0];
				if(price > CHARACTER_INFO[playerid][ch_CASH]) return SendClientMessageEx(playerid, -1, "{E6F8E0}No tienes dinero suficiente, te faltan {FF6633}%s$ {E6F8E0}para poder comprar la munición.", number_format_thousand(price - CHARACTER_INFO[playerid][ch_CASH]));
				
				if(PLAYER_WEAPONS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_DIALOG_WEAPON_SLOT] ][player_weapon_AMMO] + inputtext[0] > 9999)
				{
					SendClientMessage(playerid, -1, "{00FF80}A esta arma no le entra tanta municion.");
					return 1;
				}
				
				GivePlayerCash(playerid, -price);
				GivePlayerWeaponEx(playerid, PLAYER_WEAPONS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_DIALOG_WEAPON_SLOT] ][player_weapon_ID], inputtext[0]);
				
				SendClientMessageEx(playerid, -1, "{E6F8E0}Has comprado {98d16c}%s {E6F8E0}balas para tu {98d16c}'%s' {E6F8E0}por %s$.", number_format_thousand(inputtext[0]), WEAPON_INFO[ PLAYER_WEAPONS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_DIALOG_WEAPON_SLOT] ][player_weapon_ID] ][weapon_info_NAME], number_format_thousand(price));
			}
			return 1;
		}
		case DIALOG_POLICE_ARMOUR:
		{
			if(response)
			{
				if(300 > CHARACTER_INFO[playerid][ch_CASH]) return SendClientMessageEx(playerid, -1, "{E6F8E0}No tienes dinero suficiente, te faltan {FF6633}%s$ {E6F8E0}para poder comprar la munición.", number_format_thousand(300 - CHARACTER_INFO[playerid][ch_CASH]));
				
				GetPlayerArmour(playerid, CHARACTER_INFO[playerid][ch_ARMOUR]);
				if(CHARACTER_INFO[playerid][ch_ARMOUR] > 99.5) return SendClientMessage(playerid, -1, "{00FF80}Ya tienes un chaleco antibalas.");
				
				SetPlayerArmourEx(playerid, 100.0);
				GivePlayerCash(playerid, -300);
				SendClientMessage(playerid, -1, "{E6F8E0}Has comprado {98d16c}chaleco antibales {E6F8E0}por 300$.");
			}
			return 1;
		}
		case DIALOG_POLICE_WEAPONS:
		{
			if(response)
			{
				if(POLICE_SHOP_WEAPONS[listitem][police_shop_RANK] > PLAYER_SKILLS[playerid][WORK_POLICE])
				{
					SendClientMessageEx(playerid, -1, "{00FF80}Necesitas el rango %s para poder comprar esta arma.", POLICE_RANKS[ POLICE_SHOP_WEAPONS[listitem][police_shop_RANK] ]);
					return 1;
				}
				
				
				if(CHARACTER_INFO[playerid][ch_CASH] >= POLICE_SHOP_WEAPONS[listitem][police_shop_WEAPON_PRICE])
				{
					new weapon_slot = WEAPON_INFO[ POLICE_SHOP_WEAPONS[listitem][police_shop_WEAPON_ID] ][weapon_info_SLOT];
					if(PLAYER_WEAPONS[playerid][weapon_slot][player_weapon_ID] != 0)
					{
						SendClientMessageEx(playerid, -1, "{00FF80}Para comprar esta arma tienes que deshacerte de tu '%s' (%d) para tener espacio.", WEAPON_INFO[ PLAYER_WEAPONS[playerid][weapon_slot][player_weapon_ID] ][weapon_info_NAME], weapon_slot);
						return 1;
					}
					if(GetCountInventary(playerid) >= Max_Slots_For_Invetary) return MensajesAyuda(playerid,"El inventario esta lleno");
					GivePlayerCash(playerid, -POLICE_SHOP_WEAPONS[listitem][police_shop_WEAPON_PRICE]);
					
					/*if(WEAPON_INFO[ POLICE_SHOP_WEAPONS[listitem][police_shop_WEAPON_ID] ][weapon_info_AMMO]) GivePlayerWeaponEx(playerid, POLICE_SHOP_WEAPONS[listitem][police_shop_WEAPON_ID], 100);
					else GivePlayerWeaponEx(playerid, POLICE_SHOP_WEAPONS[listitem][police_shop_WEAPON_ID], 1);

					RegisterNewPlayerWeapon(playerid, weapon_slot); */


					
					Registrar_Player_Arma(playerid,POLICE_SHOP_WEAPONS[listitem][police_shop_WEAPON_ID]);
					new stringa[150];
					format(stringa,sizeof stringa,"Arma %s agregada al inventario",WEAPON_INFO[ Armas_Ammu[ PI[playerid][P_SHOP_WEAPON_INDEX]][0] ][weapon_info_NAME]);
					MensajesAyuda(playerid,stringa);

					SendClientMessageEx(playerid, -1, "{E6F8E0}Arma {98d16c}'%s' {E6F8E0}comprada por %s$.", WEAPON_INFO[ POLICE_SHOP_WEAPONS[listitem][police_shop_WEAPON_ID] ][weapon_info_NAME], number_format_thousand(POLICE_SHOP_WEAPONS[listitem][police_shop_WEAPON_PRICE]));
				}
				else
				{
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					SendClientMessageEx(playerid, -1, "{E6F8E0}No tienes dinero suficiente, te faltan {FF6633}%s$ {E6F8E0}para poder comprar esta arma.", number_format_thousand(POLICE_SHOP_WEAPONS[listitem][police_shop_WEAPON_PRICE] - CHARACTER_INFO[playerid][ch_CASH]));
				}
			}
			return 1;
		}
		case DIALOG_HELP:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0: ShowDialog(playerid, DIALOG_HELP_GENERAL);
					case 1: ShowDialog(playerid, DIALOG_HELP_CHARACTER);
					case 2: ShowDialog(playerid, DIALOG_HELP_PROPERTIES);
					case 3: ShowDialog(playerid, DIALOG_HELP_REPORT);
					case 4: ShowDialog(playerid, DIALOG_HELP_WORKS);
					case 5: ShowDialog(playerid, DIALOG_HELP_VEHICLES);
					case 6: ShowDialog(playerid, DIALOG_HELP_CREWS);
					case 7: ShowDialog(playerid, DIALOG_HELP_SU);
					case 8: ShowDialog(playerid, DIALOG_HELP_NEGOCIOS);
					case 9: ShowDialog(playerid, DIALOG_HELP_RP_);
					case 10: ShowDialog(playerid, DIALOG_HELP_CHAT);
				}
			}
			return 1;
		}
		case DIALOG_HELP_WORKS:
		{
			if(response)
			{
				new caption[45], dialog[1800], work = listitem + 1;
				format(caption, sizeof caption, "Trabajo - %c%s", toupper(work_info[work][work_info_NAME][0]), work_info[work][work_info_NAME][1]);
			
				new header[350];
				if(work_info[work][work_info_TYPE] != WORK_TYPE_FAMILY)
				{
					if(work_info[work][work_info_EXTRA_PAY] > 0 && work_info[work][work_info_EXTRA_PAY_EXP] > 0) // con paga extra
					{
						if(!work_info[work][work_info_EXTRA_PAY_LIMIT]) // sin limite
						{
							format(header, sizeof header, 
						
								"\
									Trabajo: %s\n\
									Tipo: %s\n\
									Nivel necesario: %d\n\
									Paga extra: por cada %s trabajos realizados recibes %s$ extra.\n\
									Puedes localizar donde adquirir este trabajo desde el GPS.\n\
								",
									work_info[work][work_info_NAME],
									(work_info[work][work_info_TYPE] == WORK_TYPE_NORMAL) ? ("normal") : ("complementario"),
									work_info[work][work_info_LEVEL],
									number_format_thousand(work_info[work][work_info_EXTRA_PAY_EXP]),
									number_format_thousand(work_info[work][work_info_EXTRA_PAY])
							);
						}
						else // con limite
						{
							format(header, sizeof header, 
						
								"\
									Trabajo: %s\n\
									Tipo: %s\n\
									Nivel necesario: %d\n\
									Paga extra: por cada %s trabajos realizados recibes %s$ extra con un límite de %s$.\n\
									Puedes localizar donde adquirir este trabajo desde el GPS.\n\
								",
									work_info[work][work_info_NAME],
									(work_info[work][work_info_TYPE] == WORK_TYPE_NORMAL) ? ("normal") : ("complementario"),
									work_info[work][work_info_LEVEL],
									number_format_thousand(work_info[work][work_info_EXTRA_PAY_EXP]),
									number_format_thousand(work_info[work][work_info_EXTRA_PAY]),
									number_format_thousand(work_info[work][work_info_EXTRA_PAY_LIMIT])
							);
						}
					}
					else
					{
						format(header, sizeof header, 
						
							"\
								Trabajo: %s\n\
								Tipo: %s\n\
								Nivel necesario: %d\n\
								Puedes localizar donde adquirir este trabajo desde el GPS.\n\
							",
								work_info[work][work_info_NAME],
								(work_info[work][work_info_TYPE] == WORK_TYPE_NORMAL) ? ("normal") : ("complementario"),
								work_info[work][work_info_LEVEL]
						);
					}
				}
				
				switch(work)
				{
					case WORK_TAXI:
					{
						format(dialog, sizeof dialog, 
						
							"\
							%s\
							\n\
							Solo súbete a un taxi y empieza a trabajar, recibirás las llamadas de los clientes.\n\
							Las personas que hayan llamado a la central de taxi aparecerán marcados de color amarillo.\n\
							Si tienes un GPS puedes utilizar /mapa para ver las personas que necesitan un taxi.\n\
							\n\
							El taxímetro se pondrá en marcha para el primer pasajero que se suba al taxi, el precio se\n\
							mide en precio por km, puedes ajustarlo con el comando /tarifa.\n\
							\n\
							",
								header
						);
					}
					case WORK_TRUCK:
					{
						format(dialog, sizeof dialog, 
						
							"\
							%s\
							\n\
							Súbete a cualquier camión de la empresa y ve a cargarlo en cualquier punto de carga.\n\
							Según tu experiencia en el trabajo podrás transportar diferentes productos de más valor.\n\
							\n\
							",
								header
						);
					}
					case WORK_MECHANIC:
					{
						format(dialog, sizeof dialog, 
						
							"\
							%s\
							\n\
							Para empezar a trabajar ve al taller y utiliza /mecanico para empezar a trabajar o dejar de trabajar.\n\
							Con este trabajo podrás reparar los vehículos dañados en el taller o ir a arreglarlos por San Andreas.\n\
							Las personas que hayan llamado al mecánico aparecerán marcados en el mapa.\n\
							Si tienes un GPS puedes utilizar /mapa para ver las personas que necesitan un mecánico.\n\
							Para reparar o tunear un vehículo usa /vmenu tras elegir una opción se le ofrecerá al dueño del vehículo\n\
							en caso de ser un vehículo personal, si no se le ofrecerá al conductor o el último conductor del vehículo.\n\
							\n\
							Puedes utilizar los vehículos de tu trabajo o tu vehículo personal.\n\
							Para cualquier reparación o modificación necesitarás piezas que puedes comprar en el taller.\n\
							Para reparar o modificar un vehículo utiliza cerca del vehículo el comando /vmenu.\n\
							\n\
							Si el vehículo no está en el mecánico y se puede remolcar tendrás que remolcarlo hasta el mecánico\n\
							para repararlo, se usa el comando /remolcar.\n\
							\n\
							En el taller también podrás pintar los vehículos.\n\
							Para tunearlos o remover componentes tendrás que haber realizado al menos 100 reparaciones en vehículos ajenos.\n\
							\n\
							",
								header
						);
					}
					case WORK_HARVESTER:
					{
						format(dialog, sizeof dialog, 
						
							"\
							%s\
							\n\
							Súbete a una cosechadora y empieza a cosechar.\n\
							\n\
							",
								header
						);
					}
					case WORK_TRASH:
					{
						format(dialog, sizeof dialog, 
						
							"\
							%s\
							\n\
							Para este trabajo se necesitan 2 personas, uno que conduzca el camión y otro que recoja la basura.\n\
							Para empezar a trabajar sube a alguien a un camión y selecciona la ruta que queréis realizar.\n\
							\n\
							Dependiendo de tu experiencia recogerás más rápido la basura.\n\
							\n\
							",
								header
						);
					}
					case WORK_LUMBERJACK:
					{
						format(dialog, sizeof dialog, 
						
							"\
							%s\
							\n\
							Para empezar a trabajar ve a los árboles asignados y empieza a talar.\n\
							Dependiendo de tu experiencia tu velocidad talando irá aumentando.\n\
							\n\
							",
								header
						);
					}
					case WORK_FARMER:
					{
						format(dialog, sizeof dialog, 
						
							"\
							%s\
							\n\
							Necesitarás semillas para poder plantar que puedes comprar en la granja.\n\
							Dependiendo de tu experiencia tu velocidad plantando irá aumentando.\n\
							\n\
							Después de que la planta crezca tienes 5 minutos para recogerla si no la planta se secará y se destruirá.\n\
							Cuando termines de plantar espera a que la planta termine de crecer, para recogerla.\n\
							Una vez recogida puedes vender el producto adquirido o usarlo para consumo propio.\n\
							\n\
							Cuida tus plantas, la gente puede destuirlas si le disparan.\n\
							\n\
							",
								header
						);
					}
					case WORK_POLICE:
					{
						format(dialog, sizeof dialog, 
						
							"\
							%s\
							\n\
							Los policías en servicio aparecerán de color azul.\n\
							Utiliza /policias para ver la lista de policías, los rangos altos podrán desde aquí\n\
							bajar, subir el rango de los policías, también pueden expulsarlos del cuerpo.\n\
							\n\
							Para asignar un BYC una persona utiliza el comando /abyc.\n\
							Usa /byc para ver los BYC de todos o de una persona, también para eliminarlos.\n\
							Utiliza /esposar para esposar o desesposar a alguien que tenga nivel de búsqueda.\n\
							Utiliza /revisar para ver las pertenencias del jugador esposado, utiliza /requisar para requisar las pertenencias ilegales.\n\
							Utiliza /arrestar en tu vehículo personal para detener a alguien que esté esposado.\n\
							Utiliza /ref para pedir refuerzos.\n\
							Para utiliza el megáfono utiliza /m dentro de un vehículo policial.\n\
							Para entregar a alguien tiene que estar arrestado en un vehículo policial\n\
							y llevarlo a cualquiera de las 3 comisarías de San Andreas al parking y utilizar /entregar.\n\
							\n\
							Usa /control para añadir objetos como barreras etc.\n\
							\n\
							Para ponerte de servicio ve a cualquier comisaría y busca el vestuario para /policia.\n\
							Los policías pueden equiparse en la comisaría.\n\
							Para utilizar la radio debes estar de servicio, puedes seleccionar la frecuencia con /frecuencias, uso: !texto.\n\
							Puedes abrir cualquier puerta de la comisaría pulsando la tecla F cerca de la puerta.\n\
							Los policías recibirán la paga en el payday, su paga dependerá de su rango.\n\
							\n\
							",
								header
						);
					}
					case WORK_PIZZA:
					{
						format(dialog, sizeof dialog, 
						
							"\
							%s\
							\n\
							Súbete a una moto y empieza a repartir pizzas.\n\
							\n\
							",
								header
						);
					}
					case WORK_MEDIC:
					{
						format(dialog, sizeof dialog, 
						
							"\
							%s\
							\n\
							Ponte de servicio en cualquier hospital, tras esto verás a las persons que necesiten un médico\n\
							marcadas en el mapa, ve rápido hasta ellas para poder salvarlos a tiempo.\n\
							Para salvar la vida a alguien que este herido usa /curar.\n\
							\n\
							Cuando estás de servicio solo puedes conducir ambulancias.\n\
							\n\
							",
								header
						);
					}
					case WORK_MINER:
					{
						format(dialog, sizeof dialog, 
						     
							"\
							Nivel necesario: 1\n\
							\n\
							El trabajo de minero lo obtienes en Richman, puedes locarlizar el trabajo mediante el radar\n\n\
							Una vez hayas conseguir el trabajo deberas dirigirte al fondo de la oficina y seguir hasta la mina.\n\
							Antes de entrar deberas ponerte el uniforme de minero, esta en la misma oficina donde obtienes el trabajo.\n\
							\n\
							Cuando tengoa puesto el uniforme de minero entra a la mina y comienza a picar los minerales luego llevalos a la procesadora.\n\
							\n\
							Hay varios tipos de minerales y cada mineral te da un valor diferente de ganancia.\n\
							\n\
							");
					}
					case WORK_PROTECTOR:
					{
						format(dialog, sizeof dialog, 
						     
							"\
							Nivel necesario: 1\n\
							\n\
							El trabajo de protector lo obtienes en Mercado Negro, puedes locarlizarlo cerca a la casa de CJ\n\n\
							Una vez hayas conseguir el trabajo podras vender proteccion.\n\
							Puedes vender proteccion a un precio minimo de $500.\n\
							\n\
							para ofrecer proteccion usa /Proteger [jugador id] [precio de la proteccion].\n\
							\n\
							");
					}
					case WORK_CARRIER:
					{
						format(dialog, sizeof dialog, 
						     
							"\
							Nivel necesario: 3\n\
							\n\
							El trabajo de transportista requiere un vehiculo DFT-30, lo consigues en la concesonaria\n\n\
							El vehiculo debe ser tuyo.\n\
							Ah medida que subas de nivel aumentaras la paga por cualquier viaje que realices a demas de que desbloquearas nuevos recorridos.\n\
							\n\
							El trabajo lo localizas desde el GPS.\n\
							\n\
							");
					}
					case WORK_PESCADOR:
					{
						format(dialog, sizeof dialog, 
						     
							"\
							Nivel necesario: 1\n\
							\n\
							Para pescar nesecitas una caña de pescar la consigues en el puesto de pesca\n\
							Nesecitas carnadas para poder pescar, las consigues en el puesto de pesca.\n\
							Debes ir en un bote de pesca a una boya y comenzar a pescar, tecla 'Y'.\n\
							\n\
							El trabajo lo localizas desde el GPS.\n\
							\n\
							");
					}
				}
				
				ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, caption, dialog, "Salir", "");
			}
			return 1;
		}
		case DIALOG_ADMIN_LIST:
		{
			if(response)
			{
				if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == -1) return 1;
				else if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == -2) // Siguiente
				{
					if(PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] >= GetDatabasePages("SELECT COUNT() FROM `CUENTA` WHERE `ADMIN_LEVEL` > 0;", PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT]) - 1) PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] = 0;
					else PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] ++;
					ShowDialog(playerid, dialogid);
				}
				else if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == -3) //Anterior
				{
					if(PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] <= 0) PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] = GetDatabasePages("SELECT COUNT() FROM `CUENTA` WHERE `ADMIN_LEVEL` > 0;", PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT]) - 1;
					else PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] --;
					ShowDialog(playerid, dialogid);
				}
				else
				{
					if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] >= 4)
					{
						PLAYER_TEMP[playerid][pt_SELECTED_DB_AC_ID] = PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem];
						ShowDialog(playerid, DIALOG_ADMIN_MODIFY);
					}
				}
			}
			return 1;
		}
		case DIALOG_ADMIN_MODIFY:
		{
			if(response)
			{
				if(listitem > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL])
				{
					SendClientMessage(playerid, -1, "El rango que has seleccionado es superior al tuyo.");
					return 1;
				}					
				
				new DBResult:Result, DB_Query[256], name[24], connected, player_id, current_rank, bool:found;
				format(DB_Query, sizeof DB_Query, "SELECT `NAME`, `CONNECTED`, `PLAYERID`, `ADMIN_LEVEL` FROM `CUENTA` WHERE `ID` = '%d';", PLAYER_TEMP[playerid][pt_SELECTED_DB_AC_ID]);
				Result = db_query(Database, DB_Query);
				
				if(db_num_rows(Result))
				{
					db_get_field_assoc(Result, "NAME", name, 24);
					connected = db_get_field_assoc_int(Result, "CONNECTED");
					player_id = db_get_field_assoc_int(Result, "PLAYERID");
					current_rank = db_get_field_assoc_int(Result, "ADMIN_LEVEL");
					found = true;
				}
				else found = false;
				db_free_result(Result);
				
				if(!found) return 1;
				if(current_rank > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL])
				{
					SendClientMessage(playerid, -1, "No puedes modificar el rango de este admin porque es un rango superior al tuyo.");
					return 1;
				}
				
				format(DB_Query, sizeof DB_Query, "UPDATE `CUENTA` SET `ADMIN_LEVEL` = '%d' WHERE `ID` = '%d';", listitem, PLAYER_TEMP[playerid][pt_SELECTED_DB_AC_ID]);
				db_query(Database, DB_Query);
				SendClientMessageEx(playerid, -1, "El nuevo rango de %s es: '%s'.", name, ADMIN_LEVELS[listitem]);
				
				if(connected)
				{
					ACCOUNT_INFO[player_id][ac_ADMIN_LEVEL] = listitem;
					SendClientMessageEx(player_id, -1, "%s cambió tu rango administrativo a: %s.", ACCOUNT_INFO[playerid][ac_NAME], ADMIN_LEVELS[listitem]);
				}
			}
			else ShowDialog(playerid, DIALOG_ADMIN_LIST);
			return 1;
		}
		case DIALOG_CHANGE_PASSWORD:
		{
			if(response)
			{
				if(!strlen(inputtext)) return ShowDialog(playerid, dialogid);
				
				new password[64 + 1];
				SHA256_PassHash(inputtext, ACCOUNT_INFO[playerid][ac_SALT], password, sizeof password);
			
				if(!strcmp(password, ACCOUNT_INFO[playerid][ac_PASS], false))
				{
					ShowDialog(playerid, DIALOG_CHANGE_PASSWORD_PASS);
					PLAYER_TEMP[playerid][pt_BAD_LOGIN_ATTEMP] = 0;
				}
				else // Error
				{
					PLAYER_TEMP[playerid][pt_BAD_LOGIN_ATTEMP] ++;
					if(PLAYER_TEMP[playerid][pt_BAD_LOGIN_ATTEMP] > MAX_BAD_LOGIN_ATTEMPS) return Kick(playerid);
					SendClientMessageEx(playerid, 0xA9F5A9AA, "Contraseña incorrecta, aviso %d/%d.", PLAYER_TEMP[playerid][pt_BAD_LOGIN_ATTEMP], MAX_BAD_LOGIN_ATTEMPS);
				}
			}
			return 1;
		}
		case DIALOG_CHANGE_PASSWORD_PASS:
		{
			if(response)
			{
				if(strlen(inputtext) < MIN_PASS_LENGTH || strlen(inputtext) > MAX_PASS_LENGTH) return ShowDialog(playerid, dialogid);
				
				new salt[16];
				getRandomSalt(salt);
				format(ACCOUNT_INFO[playerid][ac_SALT], 16, "%s", salt);
				SHA256_PassHash(inputtext, ACCOUNT_INFO[playerid][ac_SALT], ACCOUNT_INFO[playerid][ac_PASS], 64 + 1);
				
				new DB_Query[160];
				format(DB_Query, sizeof DB_Query, "UPDATE `CUENTA` SET `SALT` = '%q' `PASS` = '%q' WHERE `ID` = '%d';", ACCOUNT_INFO[playerid][ac_SALT], ACCOUNT_INFO[playerid][ac_PASS], ACCOUNT_INFO[playerid][ac_ID]);
				db_query(Database, DB_Query);
				
				SendClientMessage(playerid, -1, "{E6F8E0}Tu contraseña ha sido cambiada correctamente.");
			}
			return 1;
		}
		case DIALOG_ANTI_CHEAT:
		{
			if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 4) return 1;
			
			if(response)
			{
				PLAYER_TEMP[playerid][pt_SELECTED_AC_LISTITEM] = listitem;
				ShowDialog(playerid, DIALOG_ANTI_CHEAT_MODIFY);
			}
			return 1;
		}
		case DIALOG_ANTI_CHEAT_MODIFY:
		{
			if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 4) return 1;
			
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						if(ac_Info[ PLAYER_TEMP[playerid][pt_SELECTED_AC_LISTITEM] ][ac_Enabled]) ac_Info[ PLAYER_TEMP[playerid][pt_SELECTED_AC_LISTITEM] ][ac_Enabled] = false;
						else ac_Info[ PLAYER_TEMP[playerid][pt_SELECTED_AC_LISTITEM] ][ac_Enabled] = true;
					}
					case 1: return ShowDialog(playerid, DIALOG_ANTI_CHEAT_MODIFY_DETECT);
					case 2:
					{
						if(ac_Info[ PLAYER_TEMP[playerid][pt_SELECTED_AC_LISTITEM] ][ac_Kick]) ac_Info[ PLAYER_TEMP[playerid][pt_SELECTED_AC_LISTITEM] ][ac_Kick] = false;
						else ac_Info[ PLAYER_TEMP[playerid][pt_SELECTED_AC_LISTITEM] ][ac_Kick] = true;
					}
				}
				WriteAnticheatRules();
				ShowDialog(playerid, DIALOG_ANTI_CHEAT_MODIFY);
			}
			else ShowDialog(playerid, DIALOG_ANTI_CHEAT);
			return 1;
		}
		case DIALOG_ANTI_CHEAT_MODIFY_DETECT:
		{
			if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 4) return 1;
			
			if(response)
			{
				new detections, seconds;
				if(sscanf(inputtext, "p<:>dd", detections, seconds))
				{
					SendClientMessage(playerid, -1, "Sintaxis no válida.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if(detections < 1 || detections > 99999)
				{
					SendClientMessage(playerid, -1, "El número de detecciones debe ser 1 o mayor.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if(seconds < 0 || seconds > 99999)
				{
					SendClientMessage(playerid, -1, "Los segundos no pueden ser un valor negativo.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				
				ac_Info[ PLAYER_TEMP[playerid][pt_SELECTED_AC_LISTITEM] ][ac_Detections] = detections;
				ac_Info[ PLAYER_TEMP[playerid][pt_SELECTED_AC_LISTITEM] ][ac_Interval] = seconds;
				
				WriteAnticheatRules();
				ShowDialog(playerid, DIALOG_ANTI_CHEAT_MODIFY);
			}
			else ShowDialog(playerid, DIALOG_ANTI_CHEAT_MODIFY);
			return 1;
		}
		case DIALOG_SHOP_ARTICLE_MODIFY:
		{
			if(response)
			{
				if(sscanf(inputtext, "d", inputtext[0]))
				{
					SendClientMessage(playerid, -1, "{00FF80}Por favor introduce un valor numérico.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if(inputtext[0] < 0)
				{
					SendClientMessage(playerid, -1, "{00FF80}Por favor introduce un valor positivo.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if(inputtext[0] > 1000000000)
				{
					SendClientMessage(playerid, -1, "{00FF80}El precio es demasiado alto.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				
				new DB_Query[80];
				format(DB_Query, sizeof DB_Query, "UPDATE `SHOP` SET `PRICE` = '%d' WHERE `ID` = '%d';", inputtext[0], PLAYER_TEMP[playerid][pt_SHOP_SELECTED_ARTICLE_ID]);
				db_query(Database, DB_Query);
			
				UpdatePlayerShop(playerid);
				SendClientMessage(playerid, -1, "{E6F8E0}El precio de tu artículo ha sido actualizado.");
			}
			return 1;
		}
		case DIALOG_SHOP_ARTICLE_REMOVE:
		{
			if(response)
			{
				new DB_Query[80];
				format(DB_Query, sizeof DB_Query, "DELETE FROM `SHOP` WHERE `ID` = '%d';", PLAYER_TEMP[playerid][pt_SHOP_SELECTED_ARTICLE_ID]);
				db_query(Database, DB_Query);
			
				if(PLAYER_TEMP[playerid][pt_SHOP_COME_FROM_MY_ADS])
				{
					PLAYER_TEMP[playerid][pt_SHOP_STATE] = PLAYER_SHOP_STATE_MY_ADS;
					UpdatePlayerShop(playerid);
				}
				else
				{
					PLAYER_TEMP[playerid][pt_SHOP_STATE] = PLAYER_SHOP_STATE_ALL;
					UpdatePlayerShop(playerid);
				}
				SendClientMessage(playerid, -1, "{E6F8E0}Tu producto se ha eliminado.");
			}
			return 1;
		}
		case DIALOG_SHOP_ADD:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						PLAYER_TEMP[playerid][pt_NOTARY_OPTION] = 2;
						ShowDialog(playerid, DIALOG_NOTARY_SELECT_PROPERTY);
					}
					case 1:
					{
						PLAYER_TEMP[playerid][pt_NOTARY_OPTION] = 2;
						ShowDialog(playerid, DIALOG_NOTARY_SELECT_VEHICLE);
					}
					case 2:
					{
						PLAYER_TEMP[playerid][pt_SHOP_ADD_TYPE] = SHOP_ARTICLE_TYPE_OTHER;
						PLAYER_TEMP[playerid][pt_SHOP_ADD_MODELID] = 1314;
						PLAYER_TEMP[playerid][pt_SHOP_ADD_VCOL1] = 0;
						PLAYER_TEMP[playerid][pt_SHOP_ADD_VCOL2] = 0;
						ShowDialog(playerid, DIALOG_SHOP_ADD_TEXT);
					}
				}
			}
			return 1;
		}
		case DIALOG_SHOP_ADD_TEXT:
		{
			if(response)
			{
				if(strlen(inputtext) > 24) return ShowDialog(playerid, dialogid);
				new text[24];
				if(sscanf(inputtext, "s[24]", text)) return ShowDialog(playerid, dialogid);
				if(!td_str_legal(text)) return ShowDialog(playerid, dialogid);
				
				format(PLAYER_TEMP[playerid][pt_SHOP_ADD_TEXT], 24, "%s", inputtext);
				ShowDialog(playerid, DIALOG_SHOP_ADD_PRICE);
			}
			return 1;
		}
		case DIALOG_SHOP_ADD_PRICE:
		{
			if(response)
			{
				if(sscanf(inputtext, "d", inputtext[0]))
				{
					SendClientMessage(playerid, -1, "{00FF80}Por favor introduce un valor numérico.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if(inputtext[0] < 0)
				{
					SendClientMessage(playerid, -1, "{00FF80}Por favor introduce un valor positivo.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if(inputtext[0] > 1000000000)
				{
					SendClientMessage(playerid, -1, "{00FF80}El precio es demasiado alto.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				
				if(500 > CHARACTER_INFO[playerid][ch_CASH]) return SendClientMessage(playerid, -1, "{00FF80}Necesitas 500$ para poner el anuncio.");
				
				AddNewAd(playerid, PLAYER_TEMP[playerid][pt_SHOP_ADD_TYPE], inputtext[0], PLAYER_TEMP[playerid][pt_SHOP_ADD_TEXT], PLAYER_TEMP[playerid][pt_SHOP_ADD_MODELID], PLAYER_TEMP[playerid][pt_SHOP_ADD_VCOL1], PLAYER_TEMP[playerid][pt_SHOP_ADD_VCOL2]);
				GivePlayerCash(playerid, -500);
				SendClientMessage(playerid, -1, "{E6F8E0}Tu anuncio se ha publicado correctamente.");
				new string[100];
				format(string,sizeof(string),"@Tienda: "R"%s "W"ha publicado un nuevo articulo en "R"/tienda",PLAYER_TEMP[playerid][pt_NAME]);
				SendClientMessageToAll(-1,string);
			}
			return 1;
		}
		case DIALOG_CRANE_SELECT_VEHICLE:
		{
			if(response)
			{
				if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == -1) return 1;
				
				new veh_money = (VEHICLE_INFO[GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] ][gb_vehicle_MODELID] - 400][vehicle_info_PRICE] / 5000) + 3500;
				if(veh_money > CHARACTER_INFO[playerid][ch_CASH])
				{
					SendClientMessageEx(playerid, -1, "{00FF80}Necesitas %s$ para remolcar este vehículo al depósito municipal.", veh_money);
					return 1;
				}
				
				if(GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] ][gb_vehicle_OCCUPIED])
				{
					SendClientMessage(playerid, -1, "{00FF80}No podemos remolcar tu vehículo porque hay alguien conduciéndolo.");
					return 1; 
				}
				
				new crane_point = random(sizeof(CRANE_POINTS));
				GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] ][gb_vehicle_SPAWN_X] = CRANE_POINTS[crane_point][0];
				GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] ][gb_vehicle_SPAWN_Y] = CRANE_POINTS[crane_point][1];
				GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] ][gb_vehicle_SPAWN_Z] = CRANE_POINTS[crane_point][2];
				GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] ][gb_vehicle_SPAWN_ANGLE] = CRANE_POINTS[crane_point][3];
				
				GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] ][gb_vehicle_LAST_CLOSED_TIME] = gettime();
				GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] ][gb_vehicle_PARAMS_ENGINE] = 0;
				GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] ][gb_vehicle_PARAMS_LIGHTS] = 0;
				GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] ][gb_vehicle_PARAMS_DOORS] = 1;
				UpdateVehicleParams(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem]);
				SetVehicleToRespawnEx(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem]);
				
				GivePlayerCash(playerid, -veh_money);
				SendClientMessageEx(playerid, -1, "{E6F8E0}Tu vehículo %s ha sido remolcado hasta el depósito municipal.", VEHICLE_INFO[GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] ][gb_vehicle_MODELID] - 400][vehicle_info_NAME]);
			}
			return 1;
		}
		case DIALOG_CREATE_CREW:
		{
			if(response)
			{
				if(ACCOUNT_INFO[playerid][ac_LEVEL] < 3) return SendClientMessage(playerid, -1, "{00FF80}Necesitas ser nivel 3 para poder crear una banda.");
				ShowDialog(playerid, DIALOG_CREATE_CREW_NAME);
			}
			return 1;
		}
		case DIALOG_CREATE_CREW_NAME:
		{
			if(response)
			{
				if(strlen(inputtext) >= 32)
				{
					SendClientMessage(playerid, -1, "{00FF80}Como máximo puedes introducir un nombre de 32 caracteres.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				
				new crew_name[32];
				if(sscanf(inputtext, "s[32]", crew_name))
				{
					SendClientMessage(playerid, -1, "{00FF80}Introduce un nombre para tu banda.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				
				format(PLAYER_TEMP[playerid][pt_CREATE_CREW_NAME], 32, "%s", crew_name);
				ShowDialog(playerid, DIALOG_CREATE_CREW_COLOR);
			}
			return 1;
		}
		case DIALOG_CREATE_CREW_COLOR:
		{
			if(response)
			{
				PLAYER_TEMP[playerid][pt_CREATE_CREW_COLOR] = listitem;
				ShowDialog(playerid, DIALOG_CREATE_CREW_CONFIRM);
			}
			else ShowDialog(playerid, DIALOG_CREATE_CREW_NAME);
			return 1;
		}
		case DIALOG_CREATE_CREW_CONFIRM:
		{
			if(response)
			{
				new index = GetAvaibleCrewIndex();
				if(index == -1)
				{
					SendClientMessageEx(playerid, -1, "{00FF80}No se puede crear la banda porque no hay espacio disponible, el límite de bandas es %d.", MAX_CREWS);
					return 1;
				}
				
				if(300000 > CHARACTER_INFO[playerid][ch_CASH])
				{
					SendClientMessage(playerid, -1, "{00FF80}Necesitas 300.000$ para crear la banda.");
					return 1;
				}
				
				GivePlayerCash(playerid, -300000);
				CREW_INFO[index][crew_VALID] = true;
				format(CREW_INFO[index][crew_NAME], 32, "%s", PLAYER_TEMP[playerid][pt_CREATE_CREW_NAME]);
				CREW_INFO[index][crew_COLOR] = RandomColors[ PLAYER_TEMP[playerid][pt_CREATE_CREW_COLOR] ];
	
				CREW_RANK_INFO[index][0][crew_rank_VALID] = true;
				format(CREW_RANK_INFO[index][0][crew_rank_NAME], 32, "Fundador");
				
				CREW_RANK_INFO[index][0][crew_rank_PERMISSION][CREW_RANK_CHANGE_NAME] =
				CREW_RANK_INFO[index][0][crew_rank_PERMISSION][CREW_RANK_INVITE] =
				CREW_RANK_INFO[index][0][crew_rank_PERMISSION][CREW_RANK_CAST_MEMBERS] =
				CREW_RANK_INFO[index][0][crew_rank_PERMISSION][CREW_RANK_MODIFY_MEMBERS] =
				CREW_RANK_INFO[index][0][crew_rank_PERMISSION][CREW_RANK_MODIFY_RANKS] =
				CREW_RANK_INFO[index][0][crew_rank_PERMISSION][CREW_RANK_ADD_PROPERTIES] =
				CREW_RANK_INFO[index][0][crew_rank_PERMISSION][CREW_RANK_DELETE_PROPERTIES] =
				CREW_RANK_INFO[index][0][crew_rank_PERMISSION][CREW_RANK_CHANGE_COLOR] =
				CREW_RANK_INFO[index][0][crew_rank_PERMISSION][CREW_RANK_LEAVE_TERRITORY] =
				CREW_RANK_INFO[index][0][crew_rank_PERMISSION][CREW_RANK_DELETE] = 1;
					
				NewCrewRegister(index);
				
				PLAYER_CREW[playerid][player_crew_VALID] = true;
				PLAYER_CREW[playerid][player_crew_ID] = CREW_INFO[index][crew_ID];
				PLAYER_CREW[playerid][player_crew_RANK] = 0;
				PLAYER_CREW[playerid][player_crew_INDEX] = index;
				SetPlayerGangZones(playerid);
				
				new DB_Query[200];
				format(DB_Query, sizeof DB_Query, 
							
						"\
							DELETE FROM `PLAYER_CREW` WHERE `ID_USER` = '%d';\
							INSERT INTO `PLAYER_CREW` (`ID_USER`, `ID_CREW`, `RANK`) VALUES ('%d', '%d', '%d');\
						",
							ACCOUNT_INFO[playerid][ac_ID],
							ACCOUNT_INFO[playerid][ac_ID],
							PLAYER_CREW[playerid][player_crew_ID],
							PLAYER_CREW[playerid][player_crew_RANK]
				);
				db_query(Database, DB_Query);

				format(DB_Query, sizeof DB_Query,"INSERT INTO `CREW_VARS` (`CREW_ID`) VALUES ('%d')",PLAYER_CREW[playerid][player_crew_ID]);
				db_query(Database, DB_Query);
				
				SendClientMessageEx(playerid, -1, "La banda {%06x}'%s' {FFFFFF}se ha creado correctamente, usa {f4f142}/banda {FFFFFF}para administrarla.", CREW_INFO[index][crew_COLOR] >>> 8, CREW_INFO[index][crew_NAME]);
			}
			return 1;
		}
		case DIALOG_CREW_MENU:
		{
			if(!PLAYER_CREW[playerid][player_crew_VALID]) return SendClientMessage(playerid, -1, "{00FF80}No perteneces a ninguna banda.");
			if(!CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_VALID]) return SendClientMessage(playerid, -1, "{00FF80}La banda ya no existe.");
			
			if(response)
			{
				if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == -1) return 1;
				
				switch(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem])
				{
					case CREW_RANK_SIZE: //Lista de miembros
					{
						PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT] = 10;
						PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] = 0;
						ShowDialog(playerid, DIALOG_CREW_MEMBER_LIST);
					}
					case CREW_RANK_CHANGE_NAME:
					{
						if(!CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_PERMISSION][CREW_RANK_CHANGE_NAME]) return SendClientMessage(playerid, 0xA9F5A9AA, "No tienes permiso.");
						if(CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_FIGHTING]) return SendClientMessage(playerid, -1, "{00FF80}No se puede cambiar el nombre de la banda cuando la banda está en combate.");
						ShowDialog(playerid, DIALOG_CREW_CHANGE_NAME);
					}
					case CREW_RANK_CAST_MEMBERS:
					{
						if(!CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_PERMISSION][CREW_RANK_CAST_MEMBERS]) return SendClientMessage(playerid, 0xA9F5A9AA, "No tienes permiso.");
						
						PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT] = 10;
						PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] = 0;
						ShowDialog(playerid, DIALOG_CREW_MEMBER_LIST_DELETE);
					}
					
					case CREW_RANK_MODIFY_RANKS:
					{
						if(!CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_PERMISSION][CREW_RANK_MODIFY_RANKS]) return SendClientMessage(playerid, 0xA9F5A9AA, "No tienes permiso.");
						
						ShowDialog(playerid, DIALOG_CREW_RANKS);
					}
					case CREW_RANK_CHANGE_COLOR:
					{
						if(!CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_PERMISSION][CREW_RANK_CHANGE_COLOR]) return SendClientMessage(playerid, 0xA9F5A9AA, "No tienes permiso.");
						
						if(CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_FIGHTING]) return SendClientMessage(playerid, -1, "{00FF80}No se puede cambiar el color cuando la banda está en combate.");
						ShowDialog(playerid, DIALOG_CREW_MODIFY_COLOR);
					}
					case CREW_RANK_DELETE:
					{
						if(!CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_PERMISSION][CREW_RANK_DELETE]) return SendClientMessage(playerid, 0xA9F5A9AA, "No tienes permiso.");
						
						ShowDialog(playerid, DIALOG_CREW_DELETE);
					}
					case CREW_RANK_DESC:
					{
						if(BandaLeader(ACCOUNT_INFO[playerid][ac_ID]) == 0) return MensajesAyuda(playerid,"Solo el lider puede cambiar la descripcion");  
						ShowDialog(playerid, DIALOG_CREW_DESC);
					}

					case CREW_RANK_MODIFY_MEMBERS:
					{
						if(!CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_PERMISSION][CREW_RANK_MODIFY_MEMBERS]) return SendClientMessage(playerid, 0xA9F5A9AA, "No tienes permiso.");
						
						PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT] = 10;
						PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] = 0;
						ShowDialog(playerid, DIALOG_CREW_MODIFY_MEMBERS);
					}
					case CREW_RANK_SIZE + 1: //Invitaciones banda
					{
						if(BandaLeader(ACCOUNT_INFO[playerid][ac_ID]) == 0) return MensajesAyuda(playerid,"Solo el lider puede aceptar solicitudes");  
						ManageSolicitudesBanda(playerid);
					}
					case CREW_RANK_SIZE + 2: //Abandonar banda
					{
						if(PLAYER_CREW[playerid][player_crew_RANK] == 0)
						{
							new DB_Query[128], DBResult:Result_count, total;
							format(DB_Query, sizeof DB_Query, "SELECT COUNT() FROM `PLAYER_CREW` WHERE `ID_CREW` = '%d' AND `RANK` = '0';", PLAYER_CREW[playerid][player_crew_ID]);
							Result_count = db_query(Database, DB_Query);
							
							if(db_num_rows(Result_count)) total = db_get_field_int(Result_count, 0);
							db_free_result(Result_count);
							
							if(total <= 1)
							{
								SendClientMessage(playerid, -1, "{00FF80}No puedes abandonar la banda porque eres el único miembro con el rango fundador.");
								return 1;
							}
						}
						ShowDialog(playerid, DIALOG_CREW_LEAVE);
					}
				}
			}
			return 1;
		}
		case DIALOG_CREW_MEMBER_LIST:
		{
			if(!PLAYER_CREW[playerid][player_crew_VALID]) return SendClientMessage(playerid, -1, "{00FF80}No perteneces a ninguna banda.");
			if(!CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_VALID]) return SendClientMessage(playerid, -1, "{00FF80}La banda ya no existe.");
			
			if(response)
			{
				if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == -1) return ShowDialog(playerid, dialogid);
				else if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == -2) // Siguiente
				{
					new the_query[128];
					format(the_query, sizeof the_query, "SELECT COUNT() FROM `PLAYER_CREW` WHERE `ID_CREW` = '%d';", PLAYER_CREW[playerid][player_crew_ID]);
					
					if(PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] >= GetDatabasePages(the_query, PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT]) - 1) PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] = 0;
					else PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] ++;
					ShowDialog(playerid, dialogid);
				}
				else if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == -3) //Anterior
				{
					new the_query[128];
					format(the_query, sizeof the_query, "SELECT COUNT() FROM `PLAYER_CREW` WHERE `ID_CREW` = '%d';", PLAYER_CREW[playerid][player_crew_ID]);
					
					if(PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] <= 0) PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] = GetDatabasePages(the_query, PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT]) - 1;
					else PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] --;
					ShowDialog(playerid, dialogid);
				}
			}
			else ShowDialog(playerid, DIALOG_CREW_MENU);
			return 1;
		}
		case DIALOG_CREW_CHANGE_NAME:
		{
			if(!PLAYER_CREW[playerid][player_crew_VALID]) return SendClientMessage(playerid, -1, "{00FF80}No perteneces a ninguna banda.");
			if(!CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_VALID]) return SendClientMessage(playerid, -1, "{00FF80}La banda ya no existe.");
			if(!CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_PERMISSION][CREW_RANK_CHANGE_NAME]) return SendClientMessage(playerid, 0xA9F5A9AA, "No tienes permiso.");
			
			if(response)
			{
				if(CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_FIGHTING]) return SendClientMessage(playerid, -1, "{00FF80}No se puede cambiar el nombre de la banda cuando la banda está en combate.");
				if(strlen(inputtext) >= 32)
				{
					SendClientMessage(playerid, -1, "{00FF80}Como máximo puedes introducir un nombre de 32 caracteres.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				
				new crew_name[32];
				if(sscanf(inputtext, "s[32]", crew_name))
				{
					SendClientMessage(playerid, -1, "{00FF80}Introduce un nombre para tu banda.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				
				format(CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_NAME], 32, "%s", crew_name);
				
				new DB_Query[128];
				format(DB_Query, sizeof DB_Query, "UPDATE `CREW` SET `NAME` = '%q' WHERE `ID` = '%d';", CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_NAME], CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_ID]);
				db_query(Database, DB_Query);
				//actualizar nombre casas pickups
				
				
				new message[145], label_str[256];
				format(message, sizeof message, "{%06x}[Banda] {FFFFFF}%s (%s) cambió el nombre de la banda a '%s'.", CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_COLOR] >>> 8, PLAYER_TEMP[playerid][pt_RP_NAME], CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_NAME], CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_NAME]);
				SendMessageToCrewMembers(PLAYER_CREW[playerid][player_crew_ID], -1, message);
				
				
				for(new i = 0; i != MAX_PROPERTIES; i ++)
				{
					if(!PROPERTY_INFO[i][property_VALID]) continue;
					if(!PROPERTY_INFO[i][property_CREW]) continue;
					if(PROPERTY_INFO[i][property_CREW_ID] != PLAYER_CREW[playerid][player_crew_ID]) continue;
		
					format
					(
						label_str, 
						sizeof label_str, 
						"\
							Propiedad {58ACFA}#%d\n\n\
							{FFFFFF}Banda: {58ACFA}%s\n\
							{FFFFFF}Presiona la tecla{58ACFA}'Y' {FFFFFF}para entrar.\
						", PROPERTY_INFO[i][property_ID], CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_NAME]
					);
					
					UpdateDynamic3DTextLabelText(PROPERTY_INFO[i][property_EXT_LABEL_ID], 0xFFFFFFFF, label_str);
				}
				
				ShowDialog(playerid, DIALOG_CREW_MENU);
			}
			else ShowDialog(playerid, DIALOG_CREW_MENU);
			return 1;
		}
		case DIALOG_CREW_MEMBER_LIST_DELETE:
		{
			if(!PLAYER_CREW[playerid][player_crew_VALID]) return SendClientMessage(playerid, -1, "{00FF80}No perteneces a ninguna banda.");
			if(!CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_VALID]) return SendClientMessage(playerid, -1, "{00FF80}La banda ya no existe.");
			if(!CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_PERMISSION][CREW_RANK_CAST_MEMBERS]) return SendClientMessage(playerid, 0xA9F5A9AA, "No tienes permiso.");
			
			if(response)
			{
				if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == -1) return 1;
				else if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == -2) // Siguiente
				{
					new the_query[128];
					format(the_query, sizeof the_query, "SELECT COUNT() FROM `PLAYER_CREW` WHERE `ID_CREW` = '%d';", PLAYER_CREW[playerid][player_crew_ID]);
					
					if(PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] >= GetDatabasePages(the_query, PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT]) - 1) PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] = 0;
					else PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] ++;
					ShowDialog(playerid, dialogid);
				}
				else if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == -3) //Anterior
				{
					new the_query[128];
					format(the_query, sizeof the_query, "SELECT COUNT() FROM `PLAYER_CREW` WHERE `ID_CREW` = '%d';", PLAYER_CREW[playerid][player_crew_ID]);
					
					if(PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] <= 0) PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] = GetDatabasePages(the_query, PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT]) - 1;
					else PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] --;
					ShowDialog(playerid, dialogid);
				}
				else
				{
					PLAYER_TEMP[playerid][pt_SELECTED_DB_AC_ID] = PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem];
					
					new DBResult:Result, DB_Query[256], name[24], current_rank, bool:found;
					format(DB_Query, sizeof DB_Query, "SELECT `CUENTA`.`NAME`, `PLAYER_CREW`.`RANK` FROM `CUENTA`, `PLAYER_CREW` WHERE `CUENTA`.`ID` = '%d' AND `PLAYER_CREW`.`ID_USER` = `CUENTA`.`ID`;", PLAYER_TEMP[playerid][pt_SELECTED_DB_AC_ID]);
					Result = db_query(Database, DB_Query);
					
					if(db_num_rows(Result))
					{
						db_get_field_assoc(Result, "NAME", name, 24);
						current_rank = db_get_field_assoc_int(Result, "RANK");
						found = true;
					}
					else found = false;
					db_free_result(Result);
					
					if(!found) return 1;
					if(current_rank < PLAYER_CREW[playerid][player_crew_RANK]) return SendClientMessage(playerid, -1, "{00FF80}No puedes echar a este miembro porque es un rango superior al tuyo.");
					if(current_rank == 0)
					{
						new DBResult:Result_count, total;
						format(DB_Query, sizeof DB_Query, "SELECT COUNT() FROM `PLAYER_CREW` WHERE `ID_CREW` = '%d' AND `RANK` = '0';", PLAYER_CREW[playerid][player_crew_ID]);
						Result_count = db_query(Database, DB_Query);
						
						if(db_num_rows(Result_count)) total = db_get_field_int(Result_count, 0);
						db_free_result(Result_count);
						
						if(total <= 1)
						{
							SendClientMessage(playerid, -1, "{00FF80}No se puede echar a este miembro ya que es el único miembro con el rango fundador.");
							return 1;
						}
					}
					
					ShowDialog(playerid, DIALOG_CREW_CAST_MEMBER_CONFIRM);
				}
			}
			else ShowDialog(playerid, DIALOG_CREW_MENU);
			return 1;
		}
		case DIALOG_CREW_CAST_MEMBER_CONFIRM:
		{
			if(!PLAYER_CREW[playerid][player_crew_VALID]) return SendClientMessage(playerid, -1, "{00FF80}No perteneces a ninguna banda.");
			if(!CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_VALID]) return SendClientMessage(playerid, -1, "{00FF80}La banda ya no existe.");
			if(!CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_PERMISSION][CREW_RANK_CAST_MEMBERS]) return SendClientMessage(playerid, 0xA9F5A9AA, "No tienes permiso.");
			
			if(response)
			{
				new DBResult:Result, DB_Query[320], name[24], current_rank, connected, player_id, bool:found;
				format(DB_Query, sizeof DB_Query, "SELECT `CUENTA`.`NAME`, `CUENTA`.`CONNECTED`, `CUENTA`.`PLAYERID`, `PLAYER_CREW`.`RANK` FROM `CUENTA`, `PLAYER_CREW` WHERE `CUENTA`.`ID` = '%d' AND `PLAYER_CREW`.`ID_USER` = `CUENTA`.`ID`;", PLAYER_TEMP[playerid][pt_SELECTED_DB_AC_ID]);
				Result = db_query(Database, DB_Query);
				
				if(db_num_rows(Result))
				{
					db_get_field_assoc(Result, "NAME", name, 24);
					connected = db_get_field_assoc_int(Result, "CONNECTED");
					player_id = db_get_field_assoc_int(Result, "PLAYERID");
					current_rank = db_get_field_assoc_int(Result, "RANK");
					found = true;
				}
				else found = false;
				db_free_result(Result);
				
				if(!found) return 1;
				if(current_rank < PLAYER_CREW[playerid][player_crew_RANK]) return SendClientMessage(playerid, -1, "{00FF80}No puedes echar a este miembro porque es un rango superior al tuyo.");
				if(current_rank == 0)
				{
					new DBResult:Result_count, total;
					format(DB_Query, sizeof DB_Query, "SELECT COUNT() FROM `PLAYER_CREW` WHERE `ID_CREW` = '%d' AND `RANK` = '0';", PLAYER_CREW[playerid][player_crew_ID]);
					Result_count = db_query(Database, DB_Query);
					
					if(db_num_rows(Result_count)) total = db_get_field_int(Result_count, 0);
					db_free_result(Result_count);
					
					if(total <= 1)
					{
						SendClientMessage(playerid, -1, "{00FF80}No se puede echar a este miembro ya que es el único miembro con el rango fundador.");
						return 1;
					}
				}
				
				new message[145];
				format(message, sizeof message, "{%06x}[Banda] {FFFFFF}%s (%s) ha echado a %s de la banda.", CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_COLOR] >>> 8, PLAYER_TEMP[playerid][pt_RP_NAME], CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_NAME], name);
				SendMessageToCrewMembers(PLAYER_CREW[playerid][player_crew_ID], -1, message);
			
				format(DB_Query, sizeof DB_Query, "DELETE FROM `PLAYER_CREW` WHERE `ID_USER` = '%d';", PLAYER_TEMP[playerid][pt_SELECTED_DB_AC_ID]);
				db_query(Database, DB_Query);
				
				CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_MEMBERS] --;
				if(connected)
				{
					CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_ONLINE_MEMBERS] --;
					SetPlayerNormalColor(player_id);
					if(PLAYER_TEMP[playerid][pt_LAST_TERRITORY] != INVALID_STREAMER_ID)
					{
						TextDrawHideForPlayer(player_id, Textdraws[textdraw_TERRITORY_BOX]);
						TextDrawHideForPlayer(player_id, TERRITORIES[ PLAYER_TEMP[playerid][pt_LAST_TERRITORY] ][territory_TEXTDRAW]);
					}
					PLAYER_CREW[player_id][player_crew_VALID] = false;
					PLAYER_CREW[player_id][player_crew_ID] = 0;
					PLAYER_CREW[player_id][player_crew_RANK] = 0;
					PLAYER_CREW[player_id][player_crew_INDEX] = 0;
					HidePlayerGangZones(player_id);
				}
			}
			else ShowDialog(playerid, DIALOG_CREW_MEMBER_LIST_DELETE);
			return 1;
		}
		case DIALOG_CREW_INVITE_RANK:
		{
			if(!PLAYER_CREW[playerid][player_crew_VALID]) return SendClientMessage(playerid, -1, "{00FF80}No perteneces a ninguna banda.");
			if(!CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_VALID]) return SendClientMessage(playerid, -1, "{00FF80}La banda ya no existe.");
			if(!CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_PERMISSION][CREW_RANK_INVITE]) return SendClientMessage(playerid, 0xA9F5A9AA, "No tienes permiso.");
			
			if(response)
			{
				if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == -1) return 1;
				if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] < PLAYER_CREW[playerid][player_crew_RANK])
				{
					SendClientMessage(playerid, -1, "{00FF80}No puedes invitar con este rango porque es superior al tuyo.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				
				if(!IsPlayerConnected(PLAYER_TEMP[playerid][pt_CREW_INVITE_PID])) return SendClientMessage(playerid, -1, "{00FF80}El jugador está desconectado.");
				
				new Float:pos[3]; GetPlayerPos(PLAYER_TEMP[playerid][pt_CREW_INVITE_PID], pos[0], pos[1], pos[2]);
				if(!IsPlayerInRangeOfPoint(playerid, 2.0, pos[0], pos[1], pos[2])) return SendClientMessage(playerid, 0xA9F5A9AA, "Este jugador no está cerca tuya.");
				if(PLAYER_WORKS[ PLAYER_TEMP[playerid][pt_CREW_INVITE_PID] ][WORK_POLICE]) return SendClientMessage(playerid, -1, "{00FF80}Esta persona es policía y no puede tener banda.");
				if(PLAYER_CREW[ PLAYER_TEMP[playerid][pt_CREW_INVITE_PID] ][player_crew_VALID]) return SendClientMessage(playerid, -1, "{00FF80}Esta persona pertenece a otra banda.");
				if(PLAYER_TEMP[ PLAYER_TEMP[playerid][pt_CREW_INVITE_PID] ][pt_GAME_STATE] != GAME_STATE_NORMAL) return SendClientMessage(playerid, -1, "{00FF80}No puedes invitar a este jugador ahora.");
				if(ACCOUNT_INFO[ PLAYER_TEMP[playerid][pt_CREW_INVITE_PID] ][ac_ID] != PLAYER_TEMP[playerid][pt_CREW_INVITE_AID]) return SendClientMessage(playerid, -1, "{00FF80}El jugador está desconectado.");
				
				SendClientMessageEx(playerid, -1, "Has ofrecido a %s unirse a la banda con el rango %s.", PLAYER_TEMP[ PLAYER_TEMP[playerid][pt_CREW_INVITE_PID] ][pt_RP_NAME], CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] ][crew_rank_NAME]);
				
				PLAYER_TEMP[ PLAYER_TEMP[playerid][pt_CREW_INVITE_PID] ][pt_CREW_INVITE_INFO][0] = PLAYER_CREW[playerid][player_crew_ID];
				PLAYER_TEMP[ PLAYER_TEMP[playerid][pt_CREW_INVITE_PID] ][pt_CREW_INVITE_INFO][1] = PLAYER_CREW[playerid][player_crew_INDEX];
				PLAYER_TEMP[ PLAYER_TEMP[playerid][pt_CREW_INVITE_PID] ][pt_CREW_INVITE_INFO][2] = PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem];
				PLAYER_TEMP[ PLAYER_TEMP[playerid][pt_CREW_INVITE_PID] ][pt_CREW_INVITE_INFO][3] = gettime();
				ShowDialog(PLAYER_TEMP[playerid][pt_CREW_INVITE_PID], DIALOG_CREW_INVITE_ACCEPT);
			}
			return 1;
		}
		case DIALOG_CREW_INVITE_ACCEPT:
		{
			if(response)
			{
				if(!CREW_INFO[ PLAYER_TEMP[playerid][pt_CREW_INVITE_INFO][1] ][crew_VALID]) return SendClientMessage(playerid, -1, "{00FF80}Esta banda ya no existe.");
				if(!CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INVITE_INFO][1] ][ PLAYER_TEMP[playerid][pt_CREW_INVITE_INFO][2] ][crew_rank_VALID]) return SendClientMessage(playerid, -1, "{00FF80}El rango que te han ofrecio ya no existe.");
				if(gettime() > PLAYER_TEMP[playerid][pt_CREW_INVITE_INFO][3] + 20) return SendClientMessage(playerid, -1, "{00FF80}Has tardado mucho en aceptar.");
				if(CREW_INFO[ PLAYER_TEMP[playerid][pt_CREW_INVITE_INFO][1] ][crew_FIGHTING]) return SendClientMessage(playerid, -1, "{00FF80}No puedes unirte a la banda cuando la banda está en combate.");
				
				PLAYER_CREW[playerid][player_crew_VALID] = true;
				PLAYER_CREW[playerid][player_crew_ID] = PLAYER_TEMP[playerid][pt_CREW_INVITE_INFO][0];
				PLAYER_CREW[playerid][player_crew_RANK] = PLAYER_TEMP[playerid][pt_CREW_INVITE_INFO][2];
				PLAYER_CREW[playerid][player_crew_INDEX] = PLAYER_TEMP[playerid][pt_CREW_INVITE_INFO][1];
				CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_MEMBERS] ++;
				CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_ONLINE_MEMBERS] ++;
				PLAYER_TEMP[playerid][pt_LAST_GOT_CREW] = gettime();
				SetPlayerGangZones(playerid);
				
				new DB_Query[200];
				format(DB_Query, sizeof DB_Query, 
							
						"\
							DELETE FROM `PLAYER_CREW` WHERE `ID_USER` = '%d';\
							INSERT INTO `PLAYER_CREW` (`ID_USER`, `ID_CREW`, `RANK`) VALUES ('%d', '%d', '%d');\
						",
							ACCOUNT_INFO[playerid][ac_ID],
							ACCOUNT_INFO[playerid][ac_ID],
							PLAYER_CREW[playerid][player_crew_ID],
							PLAYER_CREW[playerid][player_crew_RANK]
				);
				db_query(Database, DB_Query);
				
				new message[145];
				format(message, sizeof message, "{%06x}[Banda] {FFFFFF}%s se ha unido a la banda con el rango %s.", CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_COLOR] >>> 8, PLAYER_TEMP[playerid][pt_RP_NAME], CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_NAME]);
				SendMessageToCrewMembers(PLAYER_CREW[playerid][player_crew_ID], -1, message);
			}
			return 1;
		}
		case DIALOG_CREW_RANKS:
		{
			if(!PLAYER_CREW[playerid][player_crew_VALID]) return SendClientMessage(playerid, -1, "{00FF80}No perteneces a ninguna banda.");
			if(!CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_VALID]) return SendClientMessage(playerid, -1, "{00FF80}La banda ya no existe.");
			if(!CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_PERMISSION][CREW_RANK_MODIFY_RANKS]) return SendClientMessage(playerid, 0xA9F5A9AA, "No tienes permiso.");
			
			if(response)
			{
				if(listitem < PLAYER_CREW[playerid][player_crew_RANK])
				{
					if(CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][listitem][crew_rank_VALID]) SendClientMessage(playerid, -1, "{00FF80}No puedes modificar este rango porque es un rango superior al tuyo.");
					else SendClientMessage(playerid, -1, "{00FF80}No puedes crear un rango en este puesto porque es superior al tuyo.");
					return 1;
				}
				
				PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK] = listitem;
				if(CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][listitem][crew_rank_VALID]) ShowDialog(playerid, DIALOG_CREW_RANK_MODIFY);
				else ShowDialog(playerid, DIALOG_CREW_RANK_CREATE);
			}
			else ShowDialog(playerid, DIALOG_CREW_MENU);
			return 1;
		}
		case DIALOG_CREW_RANK_MODIFY:
		{
			if(!PLAYER_CREW[playerid][player_crew_VALID]) return SendClientMessage(playerid, -1, "{00FF80}No perteneces a ninguna banda.");
			if(!CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_VALID]) return SendClientMessage(playerid, -1, "{00FF80}La banda ya no existe.");
			if(!CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_PERMISSION][CREW_RANK_MODIFY_RANKS]) return SendClientMessage(playerid, 0xA9F5A9AA, "No tienes permiso.");
			
			if(response)
			{
				switch(listitem)
				{
					case 0: ShowDialog(playerid, DIALOG_CREW_RANK_MODIFY_NAME);
					case 1:
					{
						if(PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK] == 0)
						{
							SendClientMessage(playerid, -1, "{00FF80}No se pueden modificar los permisos de este rango porque es el rango fundador.");
							return 1;
						}
						
						ShowDialog(playerid, DIALOG_CREW_RANK_MODIFY_PERMISS);
					}
					case 2:
					{
						if(PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK] == 0)
						{
							SendClientMessage(playerid, -1, "{00FF80}No se puede eliminar este rango porque es el rango fundador.");
							return 1;
						}
						
						SendClientMessageEx(playerid, -1, "{f1df53}[Atención] {FFFFFF}Selecciona el nuevo rango para los miembros que actualmente tienen el rango {4eba18}'%s'.", CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK] ][crew_rank_NAME]);
						ShowDialog(playerid, DIALOG_CREW_RANK_DELETE);
					}
				}
			}
			else ShowDialog(playerid, DIALOG_CREW_RANKS);
			return 1;
		}
		case DIALOG_CREW_RANK_MODIFY_NAME:
		{
			if(!PLAYER_CREW[playerid][player_crew_VALID]) return SendClientMessage(playerid, -1, "{00FF80}No perteneces a ninguna banda.");
			if(!CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_VALID]) return SendClientMessage(playerid, -1, "{00FF80}La banda ya no existe.");
			if(!CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_PERMISSION][CREW_RANK_MODIFY_RANKS]) return SendClientMessage(playerid, 0xA9F5A9AA, "No tienes permiso.");
			
			if(response)
			{
				if(strlen(inputtext) >= 32)
				{
					SendClientMessage(playerid, -1, "{00FF80}Como máximo puedes introducir un nombre de 32 caracteres.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				
				new rank_name[32];
				if(sscanf(inputtext, "s[32]", rank_name))
				{
					SendClientMessage(playerid, -1, "{00FF80}Introduce el nuevo nombre para el rango.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				
				SendClientMessageEx(playerid, -1, "Has modificado el nombre del rango '%s' a '%s'.", CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK] ][crew_rank_NAME], rank_name);
				format(CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK] ][crew_rank_NAME], 32, "%s", rank_name);
				
				new DB_Query[145];
				format(DB_Query, sizeof DB_Query, "UPDATE `CREW_RANKS` SET `RANK_NAME` = '%q' WHERE `ID` = '%d';", CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK] ][crew_rank_NAME], CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK] ][crew_rank_ID]);
				db_query(Database, DB_Query);
			}
			else ShowDialog(playerid, DIALOG_CREW_RANK_MODIFY);
			return 1;
		}
		case DIALOG_CREW_RANK_CREATE:
		{
			if(!PLAYER_CREW[playerid][player_crew_VALID]) return SendClientMessage(playerid, -1, "{00FF80}No perteneces a ninguna banda.");
			if(!CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_VALID]) return SendClientMessage(playerid, -1, "{00FF80}La banda ya no existe.");
			if(!CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_PERMISSION][CREW_RANK_MODIFY_RANKS]) return SendClientMessage(playerid, 0xA9F5A9AA, "No tienes permiso.");
			
			if(response)
			{
				if(strlen(inputtext) >= 32)
				{
					SendClientMessage(playerid, -1, "{00FF80}Como máximo puedes introducir un nombre de 32 caracteres.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				
				new rank_name[32];
				if(sscanf(inputtext, "s[32]", rank_name))
				{
					SendClientMessage(playerid, -1, "{00FF80}Introduce un nombre para el rango.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				
				if(CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK] ][crew_rank_VALID])
				{
					SendClientMessage(playerid, -1, "{00FF80}Parece que alguien ya ha creado un rango en este espacio.");
					return 1;
				}
				
				
				CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK] ][crew_rank_VALID] = true;
				format(CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK] ][crew_rank_NAME], 32, "%s", rank_name);
				
				CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK] ][crew_rank_PERMISSION][CREW_RANK_CHANGE_NAME] =
				CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK] ][crew_rank_PERMISSION][CREW_RANK_INVITE] =
				CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK] ][crew_rank_PERMISSION][CREW_RANK_CAST_MEMBERS] =
				CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK] ][crew_rank_PERMISSION][CREW_RANK_MODIFY_MEMBERS] =
				CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK] ][crew_rank_PERMISSION][CREW_RANK_MODIFY_RANKS] =
				CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK] ][crew_rank_PERMISSION][CREW_RANK_ADD_PROPERTIES] =
				CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK] ][crew_rank_PERMISSION][CREW_RANK_DELETE_PROPERTIES] =
				CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK] ][crew_rank_PERMISSION][CREW_RANK_CHANGE_COLOR] =
				CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK] ][crew_rank_PERMISSION][CREW_RANK_LEAVE_TERRITORY] =
				CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK] ][crew_rank_PERMISSION][CREW_RANK_DELETE] = 0;
				RegisterNewCrewRank(PLAYER_CREW[playerid][player_crew_INDEX], PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK]);
								
				SendClientMessageEx(playerid, -1, "El rango '%s' ha sido creado, ahora puedes editarlo y darle permisos.", rank_name);
				ShowDialog(playerid, DIALOG_CREW_RANKS);
			}
			else ShowDialog(playerid, DIALOG_CREW_RANKS);
			return 1;
		}
		case DIALOG_CREW_RANK_MODIFY_PERMISS:
		{
			if(!PLAYER_CREW[playerid][player_crew_VALID]) return SendClientMessage(playerid, -1, "{00FF80}No perteneces a ninguna banda.");
			if(!CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_VALID]) return SendClientMessage(playerid, -1, "{00FF80}La banda ya no existe.");
			if(!CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_PERMISSION][CREW_RANK_MODIFY_RANKS]) return SendClientMessage(playerid, 0xA9F5A9AA, "No tienes permiso.");
			
			if(response)
			{
				if(!CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_PERMISSION][listitem])
				{
					SendClientMessage(playerid, -1, "{00FF80}No puedes cambiar este permiso porque tu no tienes este permiso.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				
				if(CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK] ][crew_rank_PERMISSION][listitem]) CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK] ][crew_rank_PERMISSION][listitem] = false;
				else CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK] ][crew_rank_PERMISSION][listitem] = true;
				
				new DB_Query[120];
				format(DB_Query, sizeof DB_Query, "UPDATE `RANK_PERMISSIONS` SET `SET` = '%d' WHERE `ID_RANK` = '%d' AND `PERMISSION` = '%d';", CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK] ][crew_rank_PERMISSION][listitem], CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK] ][crew_rank_ID], listitem);
				db_query(Database, DB_Query);
				
				ShowDialog(playerid, dialogid);
			}
			else ShowDialog(playerid, DIALOG_CREW_RANK_MODIFY);
			return 1;
		}
		case DIALOG_CREW_RANK_DELETE:
		{
			if(!PLAYER_CREW[playerid][player_crew_VALID]) return SendClientMessage(playerid, -1, "{00FF80}No perteneces a ninguna banda.");
			if(!CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_VALID]) return SendClientMessage(playerid, -1, "{00FF80}La banda ya no existe.");
			if(!CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_PERMISSION][CREW_RANK_MODIFY_RANKS]) return SendClientMessage(playerid, 0xA9F5A9AA, "No tienes permiso.");
			
			if(response)
			{
				if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == -1) return 1;
				if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] < PLAYER_CREW[playerid][player_crew_RANK])
				{
					SendClientMessage(playerid, -1, "{00FF80}No puedes seleccionar este rango porque es superior al tuyo.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				
				PLAYER_TEMP[playerid][pt_CREW_SELECTED_NEW_RANK] = PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem];
				ShowDialog(playerid, DIALOG_CREW_RANK_DELETE_CONFIRM);
			}
			return 1;
		}
		case DIALOG_CREW_RANK_DELETE_CONFIRM:
		{
			if(!PLAYER_CREW[playerid][player_crew_VALID]) return SendClientMessage(playerid, -1, "{00FF80}No perteneces a ninguna banda.");
			if(!CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_VALID]) return SendClientMessage(playerid, -1, "{00FF80}La banda ya no existe.");
			if(!CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_PERMISSION][CREW_RANK_MODIFY_RANKS]) return SendClientMessage(playerid, 0xA9F5A9AA, "No tienes permiso.");
			
			if(response)
			{
				new DB_Query[256];
				format(DB_Query, sizeof DB_Query, 
					"\
						DELETE FROM `CREW_RANKS` WHERE `ID` = '%d';\
						UPDATE `PLAYER_CREW` SET `RANK` = '%d' WHERE `ID_CREW` = '%d' AND `RANK` = '%d';\
					",
						CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK] ][crew_rank_ID],
						
						PLAYER_TEMP[playerid][pt_CREW_SELECTED_NEW_RANK],
						PLAYER_CREW[playerid][player_crew_ID],
						PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK]
				);
				db_query(Database, DB_Query);
			
				SendClientMessageEx(playerid, -1, "{E6F8E0}Has eliminado el rango '%s'.", CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK] ][crew_rank_NAME]);
			
				new message[145];
				format(message, sizeof message, "{%06x}[Banda] {FFFFFF}%s (%s) cambió tu rango al rango '%s'.", CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_COLOR] >>> 8, PLAYER_TEMP[playerid][pt_RP_NAME], CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_NAME], CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_TEMP[playerid][pt_CREW_SELECTED_NEW_RANK] ][crew_rank_NAME]);
				for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
				{
					if(IsPlayerConnected(i))
					{
						if(PLAYER_CREW[i][player_crew_VALID])
						{
							if(PLAYER_CREW[i][player_crew_ID] == PLAYER_CREW[playerid][player_crew_ID])
							{
								if(PLAYER_CREW[i][player_crew_RANK] == PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK])
								{
									PLAYER_CREW[i][player_crew_RANK] = PLAYER_TEMP[playerid][pt_CREW_SELECTED_NEW_RANK];
									SendClientMessage(i, -1, message);
								}
							}
						}
					}
				}
				
				CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK] ][crew_rank_VALID] = false;
				CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK] ][crew_rank_ID] = 0;
				CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK] ][crew_rank_NAME][0] = EOS;
				for(new i = 0; i != CREW_RANK_SIZE; i ++) CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK] ][crew_rank_PERMISSION][i] = 0;
			
			}
			else ShowDialog(playerid, DIALOG_CREW_RANKS);
			return 1;
		}
		case DIALOG_CREW_MODIFY_COLOR:
		{
			if(!PLAYER_CREW[playerid][player_crew_VALID]) return SendClientMessage(playerid, -1, "{00FF80}No perteneces a ninguna banda.");
			if(!CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_VALID]) return SendClientMessage(playerid, -1, "{00FF80}La banda ya no existe.");
			if(!CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_PERMISSION][CREW_RANK_CHANGE_COLOR]) return SendClientMessage(playerid, 0xA9F5A9AA, "No tienes permiso.");
			
			if(response)
			{
				if(CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_FIGHTING]) return SendClientMessage(playerid, -1, "{00FF80}No se puede cambiar el color cuando la banda está en combate.");
				
				CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_COLOR] = RandomColors[listitem];
				
				
				new r, g, b, a,		new_territory_color;
				HexToRGBA(CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_COLOR], r, g, b, a);
				new_territory_color = RGBAToHex(r, g, b, 135);
				for(new i = 0; i != MAX_TERRITORIES; i ++)
				{
					if(!TERRITORIES[i][territory_VALID]) continue;
					if(!TERRITORIES[i][territory_OCCUPIED]) continue;
					
					if(TERRITORIES[i][territory_CREW_ID] == PLAYER_CREW[playerid][player_crew_ID])
					{
						TERRITORIES[i][territory_COLOR] = new_territory_color;
						UpdateGangZoneColor(i);
					}
				}
				
				new DB_Query[90];
				format(DB_Query, sizeof DB_Query, "UPDATE `CREW` SET `COLOR` = '%d' WHERE `ID` = '%d';", CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_COLOR], CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_ID]);
				db_query(Database, DB_Query);
				
				SendClientMessage(playerid, -1, "{E6F8E0}El color de la banda se ha cambiado.");
				ShowDialog(playerid, DIALOG_CREW_MENU);
			}
			else ShowDialog(playerid, DIALOG_CREW_MENU);
			return 1;
		}
		case DIALOG_CREW_DESC:
		{
			if(!PLAYER_CREW[playerid][player_crew_VALID]) return SendClientMessage(playerid, -1, "{00FF80}No perteneces a ninguna banda.");
			if(!CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_VALID]) return SendClientMessage(playerid, -1, "{00FF80}La banda ya no existe.");

			
			if(response)
			{
				for(new i = 0, j = strlen(inputtext); i < j; i++)
                switch(inputtext[i])
                {
                    case 'a'..'z': continue;
                    case 'A'..'Z': continue;
                    case ' ': continue;
                    default: return ShowPlayerDialog(playerid,DIALOG_CREW_DESC, DIALOG_STYLE_INPUT, "| DESCRIPCION BANDA |", "Solo se permiten letras", ">>", "X");
                }

				if(strlen(inputtext) > 180 || strlen(inputtext) < 10) return SendClientMessage(playerid,-1,"La descripcion debe ser mayor a 10 caracteres y menor a 180");
				new DB_Query[350];
				format(DB_Query, sizeof DB_Query, "UPDATE `CREW_VARS` SET DESCRIPCION='%s' WHERE `CREW_ID` = '%d';",inputtext,PLAYER_CREW[playerid][player_crew_ID]);
				db_query(Database, DB_Query);
				MensajesAyuda(playerid,"Descripcion de la banda cambiada");
				new str_text[281];
				format(str_text, sizeof str_text, "{%06x}[Banda] {FFFFFF}%s Cambio la descripcion de la anda a: %s.", CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_COLOR] >>> 8, PLAYER_TEMP[playerid][pt_RP_NAME],inputtext);
				SendMessageToCrewMembers(PLAYER_CREW[playerid][player_crew_ID], 0xCCCCCCCC, str_text);
			}
		}
		case DIALOG_CREW_DELETE:
		{
			if(!PLAYER_CREW[playerid][player_crew_VALID]) return SendClientMessage(playerid, -1, "{00FF80}No perteneces a ninguna banda.");
			if(!CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_VALID]) return SendClientMessage(playerid, -1, "{00FF80}La banda ya no existe.");
			if(!CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_PERMISSION][CREW_RANK_DELETE]) return SendClientMessage(playerid, 0xA9F5A9AA, "No tienes permiso.");
			
			if(response)
			{
				if(CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_FIGHTING]) return SendClientMessage(playerid, -1, "{00FF80}No se puede borrar la banda cuando está en combate.");
				
				new message[145];
				format(message, sizeof message, "{%06x}[Banda] {FFFFFF}%s (%s) ha eliminado la banda.", CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_COLOR] >>> 8, PLAYER_TEMP[playerid][pt_RP_NAME], CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_NAME]);
				
				new DB_Query[350];
				format(DB_Query, sizeof DB_Query, "DELETE FROM `CREW` WHERE `ID` = '%d';", PLAYER_CREW[playerid][player_crew_ID]);
				db_query(Database, DB_Query);
				format(DB_Query, sizeof DB_Query, "DELETE FROM `CREW_VARS` WHERE `CREW_ID` = '%d';", PLAYER_CREW[playerid][player_crew_ID]);
				db_query(Database, DB_Query);

				new tmp_CREW_INFO[enum_CREW_INFO], old_crew_id = PLAYER_CREW[playerid][player_crew_ID];
				CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ] = tmp_CREW_INFO;
				
				new tmp_CREW_RANK_INFO[enum_CREW_RANK_INFO];
				for(new i = 0; i != MAX_CREW_RANKS; i ++) CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][i] = tmp_CREW_RANK_INFO;
				
				new tmp_PLAYER_CREW[enum_PLAYER_CREW];
				for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
				{
					if(IsPlayerConnected(i))
					{
						if(PLAYER_CREW[i][player_crew_VALID])
						{
							if(PLAYER_CREW[i][player_crew_ID] == PLAYER_CREW[playerid][player_crew_ID])
							{
								SetPlayerNormalColor(i);
								HidePlayerGangZones(i);
								if(PLAYER_TEMP[i][pt_LAST_TERRITORY] != INVALID_STREAMER_ID)
								{
									TextDrawHideForPlayer(i, Textdraws[textdraw_TERRITORY_BOX]);
									TextDrawHideForPlayer(i, TERRITORIES[ PLAYER_TEMP[i][pt_LAST_TERRITORY] ][territory_TEXTDRAW]);
								}
								PLAYER_CREW[i] = tmp_PLAYER_CREW;
								SendClientMessage(i, -1, message);
							}
						}
					}
				}
				
				for(new i = 0; i != MAX_TERRITORIES; i ++)
				{
					if(!TERRITORIES[ i ][territory_VALID]) continue;
					if(!TERRITORIES[ i ][territory_OCCUPIED]) continue;
					if(TERRITORIES[ i ][territory_CREW_ID] != old_crew_id) continue;
					
					TERRITORIES[ i ][territory_OCCUPIED] = false;
					TERRITORIES[ i ][territory_CREW_ID] = 0;
					TERRITORIES[ i ][territory_CREW_INDEX] = 0;
					TERRITORIES[ i ][territory_COLOR] = 0xCCCCCC55;
					UpdateGangZoneColor(i);
				}
				
				for(new i = 0; i != MAX_PROPERTIES; i ++)
				{
					if(!PROPERTY_INFO[i][property_VALID]) continue;
					if(!PROPERTY_INFO[i][property_CREW]) continue;
					if(PROPERTY_INFO[i][property_CREW_ID] != old_crew_id) continue;
					
					PROPERTY_INFO[ i ][property_SOLD] = false;
					PROPERTY_INFO[ i ][property_CREW] = false;
					PROPERTY_INFO[ i ][property_OWNER_ID] = 0;
					PROPERTY_INFO[ i ][property_CREW_ID] = 0;
					format(PROPERTY_INFO[ i ][property_NAME], 24, "PROPIEDAD %d", PROPERTY_INFO[ i ][property_ID]);
					
					new info[3];
					UpdateUnnocupiedPropertyLabel(i);
					
					DestroyDynamicPickup(PROPERTY_INFO[ i ][property_EXT_PICKUP_ID]);
					PROPERTY_INFO[ i ][property_EXT_PICKUP_ID] = INVALID_STREAMER_ID;
					
					PROPERTY_INFO[ i ][property_EXT_PICKUP_ID] = CreateDynamicPickup(1273, 1, PROPERTY_INFO[ i ][property_EXT_X], PROPERTY_INFO[ i ][property_EXT_Y], PROPERTY_INFO[ i ][property_EXT_Z], 0, PROPERTY_INFO[ i ][property_EXT_INTERIOR]);
					info[0] = PICKUP_TYPE_PROPERTY;
					info[1] = i; // Index
					info[2] = 2; // Pickup Exterior
					Streamer_SetArrayData(STREAMER_TYPE_PICKUP, PROPERTY_INFO[ i ][property_EXT_PICKUP_ID], E_STREAMER_EXTRA_ID, info);
								
					format(DB_Query, sizeof(DB_Query), "DELETE FROM `PROPERTY_TERRITORY` WHERE `ID_PROPERTY` = '%d';", PROPERTY_INFO[i][property_ID]);
					db_query(Database, DB_Query);
				}
				
			}
			else ShowDialog(playerid, DIALOG_CREW_MENU);
			return 1;
		}
		case DIALOG_CREW_LEAVE:
		{
			if(!PLAYER_CREW[playerid][player_crew_VALID]) return SendClientMessage(playerid, -1, "{00FF80}No perteneces a ninguna banda.");
			if(!CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_VALID]) return SendClientMessage(playerid, -1, "{00FF80}La banda ya no existe.");
			
			if(response)
			{
				new DB_Query[128];
				if(PLAYER_CREW[playerid][player_crew_RANK] == 0)
				{
					new DBResult:Result_count, total;
					format(DB_Query, sizeof DB_Query, "SELECT COUNT() FROM `PLAYER_CREW` WHERE `ID_CREW` = '%d' AND `RANK` = '0';", PLAYER_CREW[playerid][player_crew_ID]);
					Result_count = db_query(Database, DB_Query);
					
					if(db_num_rows(Result_count)) total = db_get_field_int(Result_count, 0);
					db_free_result(Result_count);
					
					if(total <= 1)
					{
						SendClientMessage(playerid, -1, "{00FF80}No puedes abandonar la banda porque eres el único miembro con el rango fundador.");
						return 1;
					}
				}
				
				new message[145];
				format(message, sizeof message, "{%06x}[Banda] {FFFFFF}%s (%s) ha abandonado la banda.", CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_COLOR] >>> 8, PLAYER_TEMP[playerid][pt_RP_NAME], CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_NAME]);
				SendMessageToCrewMembers(PLAYER_CREW[playerid][player_crew_ID], -1, message);
				
				format(DB_Query, sizeof DB_Query, "DELETE FROM `PLAYER_CREW` WHERE `ID_USER` = '%d';", ACCOUNT_INFO[playerid][ac_ID]);
				db_query(Database, DB_Query);
				
				SetPlayerNormalColor(playerid);
				CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_MEMBERS] --;
				CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_ONLINE_MEMBERS] --;
				HidePlayerGangZones(playerid);
				
				new tmp_PLAYER_CREW[enum_PLAYER_CREW];
				PLAYER_CREW[playerid] = tmp_PLAYER_CREW;
			}
			else ShowDialog(playerid, DIALOG_CREW_MENU);
			return 1;
		}
		case DIALOG_CREW_MODIFY_MEMBERS:
		{
			if(!PLAYER_CREW[playerid][player_crew_VALID]) return SendClientMessage(playerid, -1, "{00FF80}No perteneces a ninguna banda.");
			if(!CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_VALID]) return SendClientMessage(playerid, -1, "{00FF80}La banda ya no existe.");
			if(!CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_PERMISSION][CREW_RANK_MODIFY_MEMBERS]) return SendClientMessage(playerid, 0xA9F5A9AA, "No tienes permiso.");
			
			if(response)
			{
				if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == -1) return 1;
				else if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == -2) // Siguiente
				{
					new the_query[128];
					format(the_query, sizeof the_query, "SELECT COUNT() FROM `PLAYER_CREW` WHERE `ID_CREW` = '%d';", PLAYER_CREW[playerid][player_crew_ID]);
					
					if(PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] >= GetDatabasePages(the_query, PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT]) - 1) PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] = 0;
					else PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] ++;
					ShowDialog(playerid, dialogid);
				}
				else if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == -3) //Anterior
				{
					new the_query[128];
					format(the_query, sizeof the_query, "SELECT COUNT() FROM `PLAYER_CREW` WHERE `ID_CREW` = '%d';", PLAYER_CREW[playerid][player_crew_ID]);
					
					if(PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] <= 0) PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] = GetDatabasePages(the_query, PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT]) - 1;
					else PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] --;
					ShowDialog(playerid, dialogid);
				}
				else
				{
					PLAYER_TEMP[playerid][pt_SELECTED_DB_AC_ID] = PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem];
					ShowDialog(playerid, DIALOG_CREW_MODIFY_MEMBER);
				}
			}
			else ShowDialog(playerid, DIALOG_CREW_MENU);
			return 1;
		}
		case DIALOG_CREW_MODIFY_MEMBER:
		{
			if(!PLAYER_CREW[playerid][player_crew_VALID]) return SendClientMessage(playerid, -1, "{00FF80}No perteneces a ninguna banda.");
			if(!CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_VALID]) return SendClientMessage(playerid, -1, "{00FF80}La banda ya no existe.");
			if(!CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_PERMISSION][CREW_RANK_MODIFY_MEMBERS]) return SendClientMessage(playerid, 0xA9F5A9AA, "No tienes permiso.");
			
			if(response)
			{
				if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == -1) return 1;
				
				if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] < PLAYER_CREW[playerid][player_crew_RANK])
				{
					SendClientMessage(playerid, -1, "{00FF80}No puedes dar este rango porque es un rango superior al tuyo.");
					return 1;
				}
				
				new DBResult:Result, DB_Query[320], name[24], current_rank, connected, player_id, bool:found;
				format(DB_Query, sizeof DB_Query, "SELECT `CUENTA`.`NAME`, `CUENTA`.`CONNECTED`, `CUENTA`.`PLAYERID`, `PLAYER_CREW`.`RANK` FROM `CUENTA`, `PLAYER_CREW` WHERE `CUENTA`.`ID` = '%d' AND `PLAYER_CREW`.`ID_USER` = `CUENTA`.`ID`;", PLAYER_TEMP[playerid][pt_SELECTED_DB_AC_ID]);
				Result = db_query(Database, DB_Query);
				
				if(db_num_rows(Result))
				{
					db_get_field_assoc(Result, "NAME", name, 24);
					connected = db_get_field_assoc_int(Result, "CONNECTED");
					player_id = db_get_field_assoc_int(Result, "PLAYERID");
					current_rank = db_get_field_assoc_int(Result, "RANK");
					found = true;
				}
				else found = false;
				db_free_result(Result);
				
				if(!found) return 1;
				if(current_rank < PLAYER_CREW[playerid][player_crew_RANK]) return SendClientMessage(playerid, -1, "{00FF80}No puedes modificar el rango de este miembro porque es un rango superior al tuyo.");
				if(current_rank == 0)
				{
					new DBResult:Result_count, total;
					format(DB_Query, sizeof DB_Query, "SELECT COUNT() FROM `PLAYER_CREW` WHERE `ID_CREW` = '%d' AND `RANK` = '0';", PLAYER_CREW[playerid][player_crew_ID]);
					Result_count = db_query(Database, DB_Query);
					
					if(db_num_rows(Result_count)) total = db_get_field_int(Result_count, 0);
					db_free_result(Result_count);
					
					if(total <= 1)
					{
						SendClientMessage(playerid, -1, "{00FF80}No se puede modificar el rango de este miembro ya que es el único miembro con el rango fundador.");
						return 1;
					}
				}
				
				format(DB_Query, sizeof DB_Query, "UPDATE `PLAYER_CREW` SET `RANK` = '%d' WHERE `ID_USER` = '%d';", PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem], PLAYER_TEMP[playerid][pt_SELECTED_DB_AC_ID]);
				db_query(Database, DB_Query);
				
				new message[145];
				if(connected)
				{
					PLAYER_CREW[player_id][player_crew_RANK] = PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem];
					format(message, sizeof message, "{%06x}[Banda] {FFFFFF}%s (%s) cambió tu rango al rango '%s'.", CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_COLOR] >>> 8, PLAYER_TEMP[playerid][pt_RP_NAME], CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_NAME], CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] ][crew_rank_NAME]);
					SendClientMessage(player_id, -1, message);
				}
				
				format(message, sizeof message, "Has modificado el rango de '%s' al rango '%s'.", name, CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] ][crew_rank_NAME]);
				SendClientMessage(playerid, -1, message);
			}
			else ShowDialog(playerid, DIALOG_CREW_MODIFY_MEMBERS);
			return 1;
		}
		case DIALOG_CREW_PROPERTY_CONFIRM:
		{
			if(!PLAYER_CREW[playerid][player_crew_VALID]) return SendClientMessage(playerid, -1, "{00FF80}No perteneces a ninguna banda.");
			if(!CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_VALID]) return SendClientMessage(playerid, -1, "{00FF80}La banda ya no existe.");
			if(!CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_PERMISSION][CREW_RANK_ADD_PROPERTIES]) return SendClientMessage(playerid, 0xA9F5A9AA, "No tienes permiso.");
			
			if(response)
			{
				if(!TERRITORIES[ PLAYER_TEMP[playerid][pt_PLAYER_TERRITORY_PRO] ][territory_VALID]) return SendClientMessage(playerid, -1, "{00FF80}La propiedad no está dentro de un territorio de tu banda.");
				if(!TERRITORIES[ PLAYER_TEMP[playerid][pt_PLAYER_TERRITORY_PRO] ][territory_OCCUPIED]) return SendClientMessage(playerid, -1, "{00FF80}La propiedad no está dentro de un territorio de tu banda.");
				if(TERRITORIES[ PLAYER_TEMP[playerid][pt_PLAYER_TERRITORY_PRO] ][territory_CREW_ID] != PLAYER_CREW[playerid][player_crew_ID]) return SendClientMessage(playerid, -1, "{00FF80}La propiedad no está dentro de un territorio de tu banda.");
				if(!IsPointInDynamicArea(TERRITORIES[ PLAYER_TEMP[playerid][pt_PLAYER_TERRITORY_PRO] ][territory_AREA], PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_EXT_X], PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_EXT_Y], PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_EXT_Z])) return SendClientMessage(playerid, -1, "{00FF80}La propiedad no está dentro de un territorio de tu banda.");
				if(PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_OWNER_ID] != ACCOUNT_INFO[playerid][ac_ID]) return SendClientMessage(playerid, -1, "{00FF80}Esta no es tu propiedad.");
				
				
				new index = PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED];
				PROPERTY_INFO[ index ][property_CREW] = true;
				PROPERTY_INFO[ index ][property_OWNER_ID] = 0;
				PROPERTY_INFO[ index ][property_CREW_ID] = PLAYER_CREW[playerid][player_crew_ID];
				format(PROPERTY_INFO[ index ][property_NAME], 24, "PROPIEDAD %d", PROPERTY_INFO[ index ][property_ID]);
				
				new label_str[256];
				format
				(
					label_str, 
					sizeof label_str, 
					"\
						Propiedad {58ACFA}#%d\n\n\
						{FFFFFF}Banda: {58ACFA}%s\n\
						{FFFFFF}Presiona la tecla{58ACFA}'Y' {FFFFFF}para entrar.\
					", PROPERTY_INFO[index][property_ID], CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_NAME]
				);
				UpdateDynamic3DTextLabelText(PROPERTY_INFO[ index ][property_EXT_LABEL_ID], 0xFFFFFFFF, label_str);
				
				new DB_Query[350];
				
				format(DB_Query, sizeof(DB_Query), "INSERT INTO `PROPERTY_TERRITORY` (`ID_PROPERTY`, `ID_TERRITORY`) VALUES ('%d', '%d');", PROPERTY_INFO[ index ][property_ID], TERRITORIES[ PLAYER_TEMP[playerid][pt_PLAYER_TERRITORY_PRO] ][territory_ID]);
				db_query(Database, DB_Query);
				
				format(DB_Query, sizeof(DB_Query), "DELETE FROM `PROPERTY_OWNER` WHERE `ID_PROPERTY` = '%d';", PROPERTY_INFO[ index ][property_ID]);
				db_query(Database, DB_Query);
				
				new message[145];
				format(message, sizeof message, "{%06x}[Banda] {FFFFFF}%s (%s) ha añadido una nueva propiedad en %s.", CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_COLOR] >>> 8, PLAYER_TEMP[playerid][pt_RP_NAME], CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_NAME], TERRITORIES[ PLAYER_TEMP[playerid][pt_PLAYER_TERRITORY_PRO] ][territory_NAME]);
				SendMessageToCrewMembers(PLAYER_CREW[playerid][player_crew_ID], -1, message);
			}
			return 1;
		}
		case DIALOG_CREW_LEAVE_TERRITORY:
		{
			if(!PLAYER_CREW[playerid][player_crew_VALID]) return SendClientMessage(playerid, -1, "{00FF80}No perteneces a ninguna banda.");
			if(!CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_VALID]) return SendClientMessage(playerid, -1, "{00FF80}La banda ya no existe.");
			if(!CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_PERMISSION][CREW_RANK_LEAVE_TERRITORY]) return SendClientMessage(playerid, 0xA9F5A9AA, "No tienes permiso.");
			
			if(response)
			{
				if(!IsPlayerInDynamicArea(playerid, TERRITORIES[ PLAYER_TEMP[playerid][pt_PLAYER_TERRITORY_PRO] ][territory_AREA])) return SendClientMessage(playerid, -1, "{00FF80}No estás en un territorio de tu banda.");
				if(TERRITORIES[ PLAYER_TEMP[playerid][pt_PLAYER_TERRITORY_PRO] ][territory_CREW_ID] != PLAYER_CREW[playerid][player_crew_ID]) return SendClientMessage(playerid, -1, "{00FF80}No estás en un territorio de tu banda.");			
				if(CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_FIGHTING]) return SendClientMessage(playerid, -1, "{00FF80}No puedes abandonar territorios mientras tu banda está en combate.");
				if(TERRITORIES[ PLAYER_TEMP[playerid][pt_PLAYER_TERRITORY_PRO] ][territory_WAR]) return SendClientMessage(playerid, -1, "{00FF80}No se puede abandonar este territorio cuando está siendo conquistado.");

				TERRITORIES[ PLAYER_TEMP[playerid][pt_PLAYER_TERRITORY_PRO] ][territory_OCCUPIED] = false;
				TERRITORIES[ PLAYER_TEMP[playerid][pt_PLAYER_TERRITORY_PRO] ][territory_CREW_ID] = 0;
				TERRITORIES[ PLAYER_TEMP[playerid][pt_PLAYER_TERRITORY_PRO] ][territory_CREW_INDEX] = 0;
				TERRITORIES[ PLAYER_TEMP[playerid][pt_PLAYER_TERRITORY_PRO] ][territory_COLOR] = 0xCCCCCC55;
				UpdateGangZoneColor(PLAYER_TEMP[playerid][pt_PLAYER_TERRITORY_PRO]);
				
				new DB_Query[350];
				format(DB_Query, sizeof DB_Query, "DELETE FROM `CREW_TERRITORIES` WHERE `ID_TERRITORY` = '%d';", TERRITORIES[ PLAYER_TEMP[playerid][pt_PLAYER_TERRITORY_PRO] ][territory_ID]);
				db_query(Database, DB_Query);
				
				for(new i = 0; i != MAX_PROPERTIES; i ++)
				{
					if(!PROPERTY_INFO[i][property_VALID]) continue;
					if(!PROPERTY_INFO[i][property_CREW]) continue;
					if(PROPERTY_INFO[i][property_CREW_ID] != PLAYER_CREW[playerid][player_crew_ID]) continue;
					
					if(IsPointInDynamicArea(TERRITORIES[ PLAYER_TEMP[playerid][pt_PLAYER_TERRITORY_PRO] ][territory_AREA], PROPERTY_INFO[i][property_EXT_X], PROPERTY_INFO[i][property_EXT_Y], PROPERTY_INFO[i][property_EXT_Z]))
					{
						PROPERTY_INFO[ i ][property_SOLD] = false;
						PROPERTY_INFO[ i ][property_CREW] = false;
						PROPERTY_INFO[ i ][property_OWNER_ID] = 0;
						PROPERTY_INFO[ i ][property_CREW_ID] = 0;
						format(PROPERTY_INFO[ i ][property_NAME], 24, "PROPIEDAD %d", PROPERTY_INFO[ i ][property_ID]);
						
						new info[3];
						UpdateUnnocupiedPropertyLabel(i);
						
						DestroyDynamicPickup(PROPERTY_INFO[ i ][property_EXT_PICKUP_ID]);
						PROPERTY_INFO[ i ][property_EXT_PICKUP_ID] = INVALID_STREAMER_ID;
						
						PROPERTY_INFO[ i ][property_EXT_PICKUP_ID] = CreateDynamicPickup(1273, 1, PROPERTY_INFO[ i ][property_EXT_X], PROPERTY_INFO[ i ][property_EXT_Y], PROPERTY_INFO[ i ][property_EXT_Z], 0, PROPERTY_INFO[ i ][property_EXT_INTERIOR]);
						info[0] = PICKUP_TYPE_PROPERTY;
						info[1] = i; // Index
						info[2] = 2; // Pickup Exterior
						Streamer_SetArrayData(STREAMER_TYPE_PICKUP, PROPERTY_INFO[ i ][property_EXT_PICKUP_ID], E_STREAMER_EXTRA_ID, info);
									
						format(DB_Query, sizeof(DB_Query), "DELETE FROM `PROPERTY_TERRITORY` WHERE `ID_PROPERTY` = '%d';", PROPERTY_INFO[ i ][property_ID]);
						db_query(Database, DB_Query);
					}
				}
				
				new message[145];
				format(message, sizeof message, "{f4e242}[BANDAS] {FFFFFF}La banda '%s' ha abandonado un territorio en %s.", CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_NAME], TERRITORIES[ PLAYER_TEMP[playerid][pt_PLAYER_TERRITORY_PRO] ][territory_NAME]);
				for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
				{
					if(IsPlayerConnected(i))
					{
						if(PLAYER_CREW[i][player_crew_VALID])
						{
							SendClientMessage(i, -1, message);
						}
					}
				}
			}
			return 1;
		}
		case DIALOG_CREW_LEAVE_PROPERTY:
		{
			if(!PLAYER_CREW[playerid][player_crew_VALID]) return SendClientMessage(playerid, -1, "{00FF80}No perteneces a ninguna banda.");
			if(!CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_VALID]) return SendClientMessage(playerid, -1, "{00FF80}La banda ya no existe.");
			if(!CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_PERMISSION][CREW_RANK_DELETE_PROPERTIES]) return SendClientMessage(playerid, 0xA9F5A9AA, "No tienes permiso.");
			
			if(response)
			{
				if(!PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_CREW]) return SendClientMessage(playerid, -1, "{00FF80}Esta no es una propiedad de tu banda.");
				if(PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_CREW_ID] != PLAYER_CREW[playerid][player_crew_ID]) return SendClientMessage(playerid, -1, "{00FF80}Esta no es una propiedad de tu banda.");
				if(CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_FIGHTING]) return SendClientMessage(playerid, -1, "{00FF80}No puedes liberar una propiedad cuando tu banda está en combate.");
			
				PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_SOLD] = false;
				PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_CREW] = false;
				PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_OWNER_ID] = 0;
				PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_CREW_ID] = 0;
				format(PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_NAME], 24, "PROPIEDAD %d", PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_ID]);
				
				new info[3];
				UpdateUnnocupiedPropertyLabel(PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED]);
				
				DestroyDynamicPickup(PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_EXT_PICKUP_ID]);
				PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_EXT_PICKUP_ID] = INVALID_STREAMER_ID;
				
				PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_EXT_PICKUP_ID] = CreateDynamicPickup(1273, 1, PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_EXT_X], PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_EXT_Y], PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_EXT_Z], 0, PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_EXT_INTERIOR]);
				info[0] = PICKUP_TYPE_PROPERTY;
				info[1] = PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED]; // Index
				info[2] = 2; // Pickup Exterior
				Streamer_SetArrayData(STREAMER_TYPE_PICKUP, PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_EXT_PICKUP_ID], E_STREAMER_EXTRA_ID, info);
							
				new DB_Query[128];
				format(DB_Query, sizeof DB_Query, "DELETE FROM `PROPERTY_TERRITORY` WHERE `ID_PROPERTY` = '%d';", PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_ID]);
				db_query(Database, DB_Query);
				
				SendClientMessage(playerid, -1, "{E6F8E0}La propiedad ha sido liberada.");
			}
			return 1;
		}
		case DIALOG_POLICE_PENALTY:
		{
			if(response)
			{
				if(gettime() > PLAYER_TEMP[playerid][pt_POLICE_PEN_TIME] + 20) return SendClientMessage(playerid, -1, "{00FF80}Has tardado mucho en aceptarlo.");
				if(!IsPlayerConnected(PLAYER_TEMP[playerid][pt_POLICE_PEN_PID])) return SendClientMessage(playerid, -1, "{00FF80}El policía ya no está en el servidor.");
				if(ACCOUNT_INFO[ PLAYER_TEMP[playerid][pt_POLICE_PEN_PID] ][ac_ID] != PLAYER_TEMP[playerid][pt_POLICE_PEN_AID]) return SendClientMessage(playerid, -1, "{00FF80}El policía ya no está en el servidor.");

				new Float:pos[3]; GetPlayerPos(PLAYER_TEMP[playerid][pt_POLICE_PEN_PID], pos[0], pos[1], pos[2]);
				if(!IsPlayerInRangeOfPoint(playerid, 5.0, pos[0], pos[1], pos[2])) return SendClientMessage(playerid, 0xA9F5A9AA, "El policía no está cerca tuya.");
				
				if(PLAYER_TEMP[playerid][pt_POLICE_PEN_IM] > CHARACTER_INFO[playerid][ch_CASH])
				{
					SendClientMessage(playerid, -1, "{00FF80}No tienes dinero para pagar la multa.");
					SendClientMessage(PLAYER_TEMP[playerid][pt_POLICE_PEN_PID], -1, "{00FF80}La persona ha aceptado la multa pero no tiene dinero para pagarla.");
					return 1;
				}
				
				GivePlayerCash(playerid, -PLAYER_TEMP[playerid][pt_POLICE_PEN_IM]);
				GivePlayerCash(PLAYER_TEMP[playerid][pt_POLICE_PEN_PID], PLAYER_TEMP[playerid][pt_POLICE_PEN_IM]/2);
				
				SendClientMessage(playerid, -1, "{E6F8E0}La multa ha sido pagada.");
				SendClientMessage(PLAYER_TEMP[playerid][pt_POLICE_PEN_PID], -1, "{E6F8E0}La persona ha pagado la multa, la mitad del importe es para ti.");
			
			}
			else
			{
				if(gettime() > PLAYER_TEMP[playerid][pt_POLICE_PEN_TIME] + 20) return 1;
				if(!IsPlayerConnected(PLAYER_TEMP[playerid][pt_POLICE_PEN_PID])) return 1;
				if(ACCOUNT_INFO[ PLAYER_TEMP[playerid][pt_POLICE_PEN_PID] ][ac_ID] != PLAYER_TEMP[playerid][pt_POLICE_PEN_AID]) return 1;
				
				SendClientMessage(PLAYER_TEMP[playerid][pt_POLICE_PEN_PID], -1, "{00FF80}La persona se ha negado a pagar la multa.");
			}
			return 1;
		}
		case DIALOG_SERVER_ECO:
		{
			if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 5) return 1;
			
			if(response)
			{
				PLAYER_TEMP[playerid][pt_DIALOG_ECO_SELECTED] = listitem;
				ShowDialog(playerid, DIALOG_SERVER_ECO_MODIFY);
			}
			return 1;
		}
		case DIALOG_SERVER_ECO_MODIFY:
		{
			if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 5) return 1;
			
			if(response)
			{
				new Float:multiplier;
				if(sscanf(inputtext, "f", multiplier))
				{
					SendClientMessage(playerid, -1, "Sintaxis no válida.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				
				switch(PLAYER_TEMP[playerid][pt_DIALOG_ECO_SELECTED])
				{
					case 0: MULTIPLIER_PROPERITES = multiplier;
					case 1: MULTIPLIER_VEHICLES = multiplier;
					case 2: MULTIPLIER_TOYS = multiplier;
					case 3: MULTIPLIER_SKINS = multiplier;
					case 4: MULTIPLIER_WEAPONS = multiplier;
					case 5: SU_SD_PRICE = floatround(multiplier);
				}
				
				WriteEconomyMultipliers();
				UpdateEconomy(PLAYER_TEMP[playerid][pt_DIALOG_ECO_SELECTED]);
				ShowDialog(playerid, DIALOG_SERVER_ECO);
			}
			else ShowDialog(playerid, DIALOG_SERVER_ECO);
			return 1;
		}
		case DIALOG_SU_BUY:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						if(ACCOUNT_INFO[playerid][ac_SD] < 20)
						{
							SendClientMessageEx(playerid, -1, "{00FF80}Te faltan %d "SERVER_COIN" para poder comprar VIP.", 20 - ACCOUNT_INFO[playerid][ac_SD]);
							return 1;
						}
						SetPlayerVip(playerid, 1, 20, 30);
					}
					case 1:
					{
						if(ACCOUNT_INFO[playerid][ac_SD] < 30)
						{
							SendClientMessageEx(playerid, -1, "{00FF80}Te faltan %d "SERVER_COIN" para poder comprar VIP.", 30 - ACCOUNT_INFO[playerid][ac_SD]);
							return 1;
						}
						SetPlayerVip(playerid, 2, 30, 30);
					}
				}
				
			}
			return 1;
		}
		case DIALOG_SU:
		{
			if(!response)
			{
				if(SU_SD_PRICE > ACCOUNT_INFO[playerid][ac_SD])
				{
					SendClientMessageEx(playerid, -1, "{00FF80}Te faltan %d "SERVER_COIN" para poder comprar VIP.", SU_SD_PRICE - ACCOUNT_INFO[playerid][ac_SD]);
					return 1;
				}
				
				ACCOUNT_INFO[playerid][ac_SD] -= SU_SD_PRICE;
				
				new DB_Query[128], DBResult:Result;
				format(DB_Query, sizeof DB_Query, "UPDATE `CUENTA` SET `SD` = '%d', `SU` = '%d', `SU_EXPIRE_DATE` = DATETIME(`SU_EXPIRE_DATE`, '+30 day') WHERE `ID` = '%d';", ACCOUNT_INFO[playerid][ac_SD], ACCOUNT_INFO[playerid][ac_SU], ACCOUNT_INFO[playerid][ac_ID]);
				db_query(Database, DB_Query);
				
				format(DB_Query, sizeof DB_Query, "SELECT `SU_EXPIRE_DATE` FROM `CUENTA` WHERE `ID` = '%d';", ACCOUNT_INFO[playerid][ac_ID]);
				Result = db_query(Database, DB_Query);
				if(db_num_rows(Result)) db_get_field(Result, 0, ACCOUNT_INFO[playerid][ac_SU_EXPIRE_DATE], 24);
				db_free_result(Result);
				
				SendClientMessageEx(playerid, -1, "{b6f442}¡Felicidades! {FFFFFF}Has renovado tu VIP%d por 30 días, fecha de caducidad: %s.", ACCOUNT_INFO[playerid][ac_SU], ACCOUNT_INFO[playerid][ac_SU_EXPIRE_DATE]);
				SendClientMessage(playerid, -1, "Puedes utilizar {eaf259}/vip {FFFFFF}para ver el tiempo restante o renovar.");
			}
			return 1;
		}
		case DIALOG_VOBJECT_MENU:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0: ShowDialog(playerid, DIALOG_VOBJECT_OBJECTS);
					case 1: //Comprar
					{
						new slot = GetVehicleFreeObjectSlot(PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID]);
						if(!ACCOUNT_INFO[playerid][ac_SU] && slot >= MAX_NU_VOBJECTS)
						{
							PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
							SendClientMessageEx(playerid, -1, "{E6F8E0}¡Los jugadores {b1fc6f}VIP {E6F8E0}pueden tener hasta %d objetos en vehículos! Usa {fffb49}/ayuda {E6F8E0}si quieres ser {b1fc6f}VIP.", MAX_SU_VOBJECTS);
							ShowDialog(playerid, dialogid);
							return 1;
						}
						if(slot == -1)
						{
							SendClientMessage(playerid, -1, "{00FF80}No hay más espacio para objetos en este vehículo.");
							ShowDialog(playerid, dialogid);
							return 1;
						}
						
						PLAYER_TEMP[playerid][pt_TUNING_GARAGE_SHOP] = true;
						
						new Float:p[6];
						GetPlayerCameraPos(playerid, p[0], p[1], p[2]);
						GetPlayerCameraLookAt(playerid, p[3], p[4], p[5]);
						InterpolateCameraPos(playerid, p[0], p[1], p[2], 265.3348, 14.0199, 3.6937, 2000);
						InterpolateCameraLookAt(playerid, p[3], p[4], p[5], 268.2404, 11.4559, 2.2, 2000);
						
						TextDrawShowForPlayer(playerid, Textdraws[textdraw_SHOP_TUNING][0]);
						TextDrawShowForPlayer(playerid, Textdraws[textdraw_SHOP_TUNING][1]);
						TextDrawShowForPlayer(playerid, Textdraws[textdraw_SHOP_TUNING][2]);
						TextDrawShowForPlayer(playerid, Textdraws[textdraw_SHOP_TUNING][3]);
						TextDrawShowForPlayer(playerid, Textdraws[textdraw_SHOP_TUNING][4]);
						PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TUNING_SHOP]);
						//PLAYER_TEMP[playerid][pt_SELECT_TUNING_OBJECT] = 0;
						
						UpdateTuningShop(playerid);
						
						SendClientMessage(playerid, -1, "Pulsa {58ACFA}'ESCAPE' {FFFFFF}para dejar de comprar objetos.");
						SelectTextDrawEx(playerid, 0xe8d08fFF);
					}
					case 2:
					{
						new slot = GetVehicleFreeObjectSlot(PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID]);
						if(!ACCOUNT_INFO[playerid][ac_SU] && slot >= MAX_NU_VOBJECTS)
						{
							PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
							SendClientMessageEx(playerid, -1, "{E6F8E0}¡Los jugadores {b1fc6f}VIP {E6F8E0}pueden tener hasta %d objetos en vehículos! Usa {fffb49}/ayuda {E6F8E0}si quieres ser {b1fc6f}VIP.", MAX_SU_VOBJECTS);
							ShowDialog(playerid, dialogid);
							return 1;
						}
						if(slot == -1)
						{
							SendClientMessage(playerid, -1, "{00FF80}No hay más espacio para objetos en este vehículo.");
							ShowDialog(playerid, dialogid);
							return 1;
						}
						
						if(500 > CHARACTER_INFO[playerid][ch_CASH])
						{
							PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
							SendClientMessageEx(playerid, -1, "{E6F8E0}No tienes dinero suficiente, te faltan {FF6633}%s$ {E6F8E0}para poder comprar este objeto.", number_format_thousand(500 - CHARACTER_INFO[playerid][ch_CASH]));
							ShowDialog(playerid, dialogid);
							return 1;
						}
						
						GivePlayerCash(playerid, -500);
						
						VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][slot][vobject_VALID] = true;
						VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][slot][vobject_TYPE] = VOBJECT_TYPE_TEXT;
						VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][slot][vobject_ID] = 0;
						VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][slot][vobject_MODELID] = 19327;
						format(VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][slot][vobject_NAME], 32, "Texto");
						VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][slot][vobject_ATTACHED] = true;
						
						format(VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][slot][vobject_text_TEXT], 32, "Mi texto");
						format(VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][slot][vobject_text_FONT], 24, "Arial");
						VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][slot][vobject_text_FONT_SIZE] = 24;
						VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][slot][vobject_text_BOLD] = false;
						VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][slot][vobject_text_FONT_COLOR] = 0xFF000000;
						
						RegisterNewVehicleObject(PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID], slot);
						UpdateVehicleAttachedObject(PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID], slot, true);
						
						SendClientMessage(playerid, -1, "{E6F8E0}El objeto de texto ha sido añadido.");
						PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] = slot;
						ShowDialog(playerid, DIALOG_VOBJECT_OBJECT);
					}
					case 3:
					{
						new slot = GetVehicleFreeObjectSlot(PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID]);
						if(!ACCOUNT_INFO[playerid][ac_SU] && slot >= MAX_NU_VOBJECTS)
						{
							PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
							SendClientMessageEx(playerid, -1, "{E6F8E0}¡Los jugadores {b1fc6f}VIP {E6F8E0}pueden tener hasta %d objetos en vehículos! Usa {fffb49}/ayuda {E6F8E0}si quieres ser {b1fc6f}VIP.", MAX_SU_VOBJECTS);
							ShowDialog(playerid, dialogid);
							return 1;
						}
						if(slot == -1)
						{
							SendClientMessage(playerid, -1, "{00FF80}No hay más espacio para objetos en este vehículo.");
							ShowDialog(playerid, dialogid);
							return 1;
						}
						
						if(2000 > CHARACTER_INFO[playerid][ch_CASH])
						{
							PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
							SendClientMessageEx(playerid, -1, "{E6F8E0}No tienes dinero suficiente, te faltan {FF6633}%s$ {E6F8E0}para poder comprar este objeto.", number_format_thousand(2000 - CHARACTER_INFO[playerid][ch_CASH]));
							ShowDialog(playerid, dialogid);
							return 1;
						}
						
						PLAYER_TEMP[playerid][pt_COUNTRY_TYPE] = 0;
						ShowDialog(playerid, DIALOG_VOBJECT_COUNTRY);
					}
					case 4:
					{
						new slot = GetVehicleFreeObjectSlot(PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID]);
						if(!ACCOUNT_INFO[playerid][ac_SU] && slot >= MAX_NU_VOBJECTS)
						{
							PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
							SendClientMessageEx(playerid, -1, "{E6F8E0}¡Los jugadores {b1fc6f}VIP {E6F8E0}pueden tener hasta %d objetos en vehículos! Usa {fffb49}/ayuda {E6F8E0}si quieres ser {b1fc6f}VIP.", MAX_SU_VOBJECTS);
							ShowDialog(playerid, dialogid);
							return 1;
						}
						if(slot == -1)
						{
							SendClientMessage(playerid, -1, "{00FF80}No hay más espacio para objetos en este vehículo.");
							ShowDialog(playerid, dialogid);
							return 1;
						}
						
						if(2000 > CHARACTER_INFO[playerid][ch_CASH])
						{
							PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
							SendClientMessageEx(playerid, -1, "{E6F8E0}No tienes dinero suficiente, te faltan {FF6633}%s$ {E6F8E0}para poder comprar este objeto.", number_format_thousand(2000 - CHARACTER_INFO[playerid][ch_CASH]));
							ShowDialog(playerid, dialogid);
							return 1;
						}
						
						PLAYER_TEMP[playerid][pt_COUNTRY_TYPE] = 1;
						ShowDialog(playerid, DIALOG_VOBJECT_COUNTRY);
					}
				}
			}
			else
			{
				PLAYER_TEMP[playerid][pt_IN_TUNING_GARAGE] = false;
				SetVehicleVirtualWorldEx(PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID], 0);
				SetPlayerVirtualWorld(playerid, 0);
				SetVehiclePosEx(PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID], 246.551910, 17.474195, 2.363841);
				SetVehicleZAngle(PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID], 0.0);
				
				GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][gb_vehicle_PARAMS_ENGINE] = 1;
				UpdateVehicleParams(PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID]);
				
				if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) PutPlayerInVehicleEx(playerid, PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID], 0);
				
				ShowPlayerSpeedoMeter(playerid);
				SetCameraBehindPlayer(playerid);
			}
			return 1;
		}
		case DIALOG_VOBJECT_COUNTRY:
		{
			if(response)
			{
				new slot = GetVehicleFreeObjectSlot(PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID]);
				if(!ACCOUNT_INFO[playerid][ac_SU] && slot >= MAX_NU_VOBJECTS)
				{
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					SendClientMessageEx(playerid, -1, "{E6F8E0}¡Los jugadores {b1fc6f}VIP {E6F8E0}pueden tener hasta %d objetos en vehículos! Usa {fffb49}/ayuda {E6F8E0}si quieres ser {b1fc6f}VIP.", MAX_SU_VOBJECTS);
					ShowDialog(playerid, DIALOG_VOBJECT_MENU);
					return 1;
				}
				if(slot == -1)
				{
					SendClientMessage(playerid, -1, "{00FF80}No hay más espacio para objetos en este vehículo.");
					ShowDialog(playerid, DIALOG_VOBJECT_MENU);
					return 1;
				}
				
				if(2000 > CHARACTER_INFO[playerid][ch_CASH])
				{
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					SendClientMessageEx(playerid, -1, "{E6F8E0}No tienes dinero suficiente, te faltan {FF6633}%s$ {E6F8E0}para poder comprar este objeto.", number_format_thousand(2000 - CHARACTER_INFO[playerid][ch_CASH]));
					ShowDialog(playerid, DIALOG_VOBJECT_MENU);
					return 1;
				}
				
				GivePlayerCash(playerid, -2000);
				
				VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][slot][vobject_VALID] = true;
				VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][slot][vobject_ID] = 0;
				if(PLAYER_TEMP[playerid][pt_COUNTRY_TYPE] == 0)
				{
					VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][slot][vobject_TYPE] = VOBJECT_TYPE_COUNTRY_FLAG;
					VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][slot][vobject_MODELID] = 19307;
				}
				else if(PLAYER_TEMP[playerid][pt_COUNTRY_TYPE] == 1)
				{
					VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][slot][vobject_TYPE] = VOBJECT_TYPE_COUNTRY_PANEL;
					VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][slot][vobject_MODELID] = 2661;
				}
				format(VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][slot][vobject_NAME], 32, "Pais");
				VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][slot][vobject_ATTACHED] = true;
				VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][slot][vobject_COLORS][0] = listitem;
				
				RegisterNewVehicleObject(PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID], slot);
				UpdateVehicleAttachedObject(PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID], slot, true);
				
				SendClientMessage(playerid, -1, "{E6F8E0}El objeto ha sido añadido.");
				PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] = slot;
				ShowDialog(playerid, DIALOG_VOBJECT_OBJECT);
			}
			else ShowDialog(playerid, DIALOG_VOBJECT_MENU);
			return 1;
		}
		case DIALOG_VOBJECT_OBJECTS:
		{
			if(response)
			{
				if(listitem == MAX_SU_VOBJECTS) return ShowDialog(playerid, DIALOG_VOBJECT_DELETE_ALL);
				if(!VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][listitem][vobject_VALID])
				{
					SendClientMessage(playerid, -1, "{00FF80}Este slot está vacío, aquí puedes comprar un nuevo objeto.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				
				PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] = listitem;
				ShowDialog(playerid, DIALOG_VOBJECT_OBJECT);
			}
			else ShowDialog(playerid, DIALOG_VOBJECT_MENU);
			return 1;
		}
		case DIALOG_VOBJECT_OBJECT:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						if(VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_ATTACHED])
						{
							SendClientMessage(playerid, -1, "{E6F8E0}Objeto guardado.");
							VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_ATTACHED] = false;
							UpdateVehicleAttachedObject(PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID], PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT]);
							ShowDialog(playerid, DIALOG_VOBJECT_OBJECT);
						}
						else
						{
							SendClientMessage(playerid, -1, "{E6F8E0}Objeto colocado.");
							VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_ATTACHED] = true;
							UpdateVehicleAttachedObject(PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID], PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT], true);
							ShowDialog(playerid, DIALOG_VOBJECT_OBJECT);
						}
					}
					case 1: ShowDialog(playerid, DIALOG_VOBJECT_OBJECT_CNAME);
					case 2:
					{
						if(!VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_ATTACHED])
						{
							SendClientMessage(playerid, -1, "{00FF80}Debes colocar el objeto primero.");
							ShowDialog(playerid, dialogid);
							return 1;
						}
							
						EditVehicleObject(playerid, PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID], PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT]);
					}
					case 3:
					{
						switch(VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_TYPE])
						{
							case VOBJECT_TYPE_OBJECT:
							{
								if(!VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_ATTACHED])
								{
									SendClientMessage(playerid, -1, "{00FF80}Debes colocar el objeto primero.");
									ShowDialog(playerid, dialogid);
									return 1;
								}
								ShowDialog(playerid, DIALOG_VOBJECT_OBJECT_COLORS);
							}
							case VOBJECT_TYPE_TEXT:
							{
								if(!VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_ATTACHED])
								{
									SendClientMessage(playerid, -1, "{00FF80}Debes colocar el objeto primero.");
									ShowDialog(playerid, dialogid);
									return 1;
								}
								ShowDialog(playerid, DIALOG_VOBJECT_TEXT_MENU);
							}
							case VOBJECT_TYPE_COUNTRY_FLAG, VOBJECT_TYPE_COUNTRY_PANEL: ShowDialog(playerid, DIALOG_VOBJECT_OBJECT_CDELETE);
						}
					}
					case 4: ShowDialog(playerid, DIALOG_VOBJECT_OBJECT_CDELETE);
				}
			
			}
			else
			{
				UpdateVehicleObject(PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID], PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT]);
				ShowDialog(playerid, DIALOG_VOBJECT_OBJECTS);
			}
			return 1;
		}
		case DIALOG_VOBJECT_OBJECT_CNAME:
		{
			if(response)
			{
				if(!strlen(inputtext) || strlen(inputtext) > 32)
				{
					SendClientMessage(playerid, -1, "{E6F8E0}El nombre del objeto debe contener de 1 a 32 caracteres.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				
				format(VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_NAME], 32, "%s", inputtext);
				ShowDialog(playerid, DIALOG_VOBJECT_OBJECT);
			}
			else ShowDialog(playerid, DIALOG_VOBJECT_OBJECT);
			return 1;
		}
		case DIALOG_VOBJECT_OBJECT_COLORS:
		{
			if(response)
			{
				PLAYER_TEMP[playerid][pt_TUNING_EDIT_COLOR_SLOT] = listitem;
				ShowDialog(playerid, DIALOG_VOBJECT_OBJECT_COLOR);
			}
			else ShowDialog(playerid, DIALOG_VOBJECT_OBJECT);
			return 1;
		}
		case DIALOG_VOBJECT_OBJECT_COLOR:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_COLORS][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_COLOR_SLOT] ] = 0;
						UpdateVehicleAttachedObject(PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID], PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT], true);
						SendClientMessage(playerid, -1, "{E6F8E0}Color actualizado.");
						ShowDialog(playerid, DIALOG_VOBJECT_OBJECT_COLORS);
					}
					case 1:
					{
						VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_COLORS][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_COLOR_SLOT] ] = RGBAToARGB(VEHICLE_COLORS[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][gb_vehicle_COLOR_1] ]);
						UpdateVehicleAttachedObject(PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID], PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT], true);
						SendClientMessage(playerid, -1, "{E6F8E0}Color actualizado.");
						ShowDialog(playerid, DIALOG_VOBJECT_OBJECT_COLORS);
					}
					case 2:
					{
						VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_COLORS][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_COLOR_SLOT] ] = RGBAToARGB(VEHICLE_COLORS[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][gb_vehicle_COLOR_2] ]);
						UpdateVehicleAttachedObject(PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID], PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT], true);
						SendClientMessage(playerid, -1, "{E6F8E0}Color actualizado.");
						ShowDialog(playerid, DIALOG_VOBJECT_OBJECT_COLORS);
					}
					case 3: ShowDialog(playerid, DIALOG_VOBJECT_OBJECT_COLOR_HEX);
				}
			}
			else ShowDialog(playerid, DIALOG_VOBJECT_OBJECT_COLORS);
			return 1;
		}
		case DIALOG_VOBJECT_OBJECT_COLOR_HEX:
		{
			if(response)
			{
				if(strlen(inputtext) < 8) return ShowDialog(playerid, dialogid);
				
				new hexcolor;
				if(sscanf(inputtext, "h", hexcolor))
				{
					ShowDialog(playerid, dialogid);
					return 1;
				}
				
				VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_COLORS][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_COLOR_SLOT] ] = hexcolor;
				UpdateVehicleAttachedObject(PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID], PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT], true);
				SendClientMessage(playerid, -1, "{E6F8E0}Color actualizado.");
				ShowDialog(playerid, DIALOG_VOBJECT_OBJECT_COLORS);
			}
			else ShowDialog(playerid, DIALOG_VOBJECT_OBJECT_COLOR);
			return 1;
		}
		case DIALOG_VOBJECT_OBJECT_CDELETE:
		{
			if(response)
			{
				if(VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_OBJECT_ID] != INVALID_STREAMER_ID)
				{
					DestroyDynamicObject(VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_OBJECT_ID]);
					VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_OBJECT_ID] = INVALID_STREAMER_ID;
				}
				
				new DB_Query[128];
				format(DB_Query, sizeof DB_Query, "DELETE FROM `VEHICLE_OBJECTS` WHERE `ID` = '%d';", VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_ID]);
				db_query(Database, DB_Query);
				
				new temp_VEHICLE_OBJECTS[e_VEHICLE_OBJECTS];
				VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ] = temp_VEHICLE_OBJECTS;
				
				SendClientMessage(playerid, -1, "{E6F8E0}Objeto eliminado.");
				ShowDialog(playerid, DIALOG_VOBJECT_OBJECTS);
			}
			else ShowDialog(playerid, DIALOG_VOBJECT_OBJECT);
			return 1;
		}
		case DIALOG_VOBJECT_DELETE_ALL:
		{
			if(response)
			{
				new DB_Query[128];
				format(DB_Query, sizeof DB_Query, "DELETE FROM `VEHICLE_OBJECTS` WHERE `ID_VEHICLE` = '%d';", PLAYER_VEHICLES[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][player_vehicle_ID]);
				db_query(Database, DB_Query);
				
				new temp_VEHICLE_OBJECTS[e_VEHICLE_OBJECTS];
				for(new i = 0; i != MAX_SU_VOBJECTS; i ++)
				{
					if(VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][i][vobject_OBJECT_ID] != INVALID_STREAMER_ID)
					{
						DestroyDynamicObject(VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][i][vobject_OBJECT_ID]);
						VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][i][vobject_OBJECT_ID] = INVALID_STREAMER_ID;
					}
					
					VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][i] = temp_VEHICLE_OBJECTS;
				}
				
				SendClientMessage(playerid, -1, "{E6F8E0}Todos los objetos de este vehículo han sido eliminados.");
				ShowDialog(playerid, DIALOG_VOBJECT_OBJECTS);
			}
			else ShowDialog(playerid, DIALOG_VOBJECT_OBJECT);
			return 1;
		}
		case DIALOG_VOBJECT_TEXT_MENU:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0: ShowDialog(playerid, DIALOG_VOBJECT_TEXT_TEXT);
					case 1: ShowDialog(playerid, DIALOG_VOBJECT_TEXT_FONT);
					case 2: ShowDialog(playerid, DIALOG_VOBJECT_TEXT_FONT_SIZE);
					case 3:
					{
						if(VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_text_BOLD])
						{
							VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_text_BOLD] = false;
							SendClientMessage(playerid, -1, "Negrita deshabilitada.");
						}
						else
						{
							VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_text_BOLD] = true;
							SendClientMessage(playerid, -1, "Negrita habilitada.");
						}
						UpdateVehicleAttachedObject(PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID], PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT], true);
						ShowDialog(playerid, dialogid);
					}
					case 4: ShowDialog(playerid, DIALOG_VOBJECT_TEXT_FONT_COLOR);
				}
			}
			else ShowDialog(playerid, DIALOG_VOBJECT_OBJECT);
			return 1;
		}
		case DIALOG_VOBJECT_TEXT_TEXT:
		{
			if(response)
			{
				if(strlen(inputtext) >= 32)
				{
					SendClientMessage(playerid, -1, "{00FF80}Como máximo puedes introducir un texto de 32 caracteres.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				
				if(sscanf(inputtext, "s[32]", inputtext))
				{
					SendClientMessage(playerid, -1, "{00FF80}Introduce un texto.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				
				format(VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_text_TEXT], 32, "%s", inputtext);
				UpdateVehicleAttachedObject(PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID], PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT], true);
				SendClientMessage(playerid, -1, "Texto actualizado.");
			}
			ShowDialog(playerid, DIALOG_VOBJECT_TEXT_MENU);
			return 1;
		}
		case DIALOG_VOBJECT_TEXT_FONT:
		{
			if(response)
			{
				if(strlen(inputtext) >= 24)
				{
					SendClientMessage(playerid, -1, "{00FF80}Como máximo puedes introducir una fuente de 24 caracteres.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				
				if(sscanf(inputtext, "s[24]", inputtext))
				{
					SendClientMessage(playerid, -1, "{00FF80}Introduce un texto.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				format(VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_text_FONT], 24, "%s", inputtext);
				UpdateVehicleAttachedObject(PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID], PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT], true);
				SendClientMessage(playerid, -1, "Fuente actualizada.");
			}
			ShowDialog(playerid, DIALOG_VOBJECT_TEXT_MENU);
			return 1;
		}
		case DIALOG_VOBJECT_TEXT_FONT_SIZE:
		{
			if(response)
			{
				if(sscanf(inputtext, "d", inputtext[0]))
				{
					SendClientMessage(playerid, -1, "{00FF80}Introduce un valor numérico.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if(inputtext[0] <= 0 || inputtext[0] >= 255)
				{
					SendClientMessage(playerid, -1, "{00FF80}Introduce un valor entre 1 y 255.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_text_FONT_SIZE] = inputtext[0];
				UpdateVehicleAttachedObject(PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID], PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT], true);
				SendClientMessage(playerid, -1, "Tamaño de letra actualizado.");
			}
			ShowDialog(playerid, DIALOG_VOBJECT_TEXT_MENU);
			return 1;
		}
		case DIALOG_VOBJECT_TEXT_FONT_COLOR:
		{
			if(response)
			{
				VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_text_FONT_COLOR] = RGBAToARGB(RandomColors[listitem]);
				UpdateVehicleAttachedObject(PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID], PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT], true);
				SendClientMessage(playerid, -1, "Color de letra actualizado.");
			}
			ShowDialog(playerid, DIALOG_VOBJECT_TEXT_MENU);
			return 1;
		}
		case DIALOG_PLAYER_CONFIG:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						if(PLAYER_MISC[playerid][MISC_CONFIG_AUDIO])
						{
							PLAYER_MISC[playerid][MISC_CONFIG_AUDIO] = false;
							StopAudioStreamForPlayer(playerid);
						}
						else PLAYER_MISC[playerid][MISC_CONFIG_AUDIO] = true;
					}
					case 1:
					{
						if(PLAYER_MISC[playerid][MISC_CONFIG_HUD])
						{
							PLAYER_MISC[playerid][MISC_CONFIG_HUD] = false;
							//TextDrawHideForPlayer(playerid, Textdraws[TextdrawFechaGlobal]);
							TextDrawHideForPlayer(playerid, Textdraws[textdraw_HUD][0]);
							PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][0]);
							PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][3]);
							//PlayerTextDrawHide(playerid,PlayerTextdraws[playerid][textdraw_gps]); 	
							for(new i = 0; i != 15 ; i ++) PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][texdrawsbarras][i]);
						}
						else
						{
							PLAYER_MISC[playerid][MISC_CONFIG_HUD] = true;
							TextDrawShowForPlayer(playerid, Textdraws[textdraw_HUD][0]);
							//TextDrawShowForPlayer(playerid, Textdraws[TextdrawFechaGlobal]);
							PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][0]);
							PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][3]);
							//PlayerTextDrawShow(playerid,PlayerTextdraws[playerid][textdraw_gps]); 	
							for(new i = 0; i != 15 ; i ++) PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][texdrawsbarras][i]);
						}
					}
					case 2:
					{
						if(PLAYER_MISC[playerid][MISC_CONFIG_ADMIN]) PLAYER_MISC[playerid][MISC_CONFIG_ADMIN] = false;
						else PLAYER_MISC[playerid][MISC_CONFIG_ADMIN] = true;
					}
					case 3:
					{
						if(PLAYER_PHONE[playerid][player_phone_VISIBLE_NUMBER]) PLAYER_PHONE[playerid][player_phone_VISIBLE_NUMBER] = false;
						else PLAYER_PHONE[playerid][player_phone_VISIBLE_NUMBER] = true;
					}
					case 4:
					{
						if(PLAYER_MISC[playerid][MISC_CONFIG_SOUNDS]) PLAYER_MISC[playerid][MISC_CONFIG_SOUNDS] = false;
						else PLAYER_MISC[playerid][MISC_CONFIG_SOUNDS] = true;
					}
					case 5:
					{
						if(PLAYER_MISC[playerid][MISC_CONFIG_TIME])
						{
							PLAYER_MISC[playerid][MISC_CONFIG_TIME] = false;
							TextDrawHideForPlayer(playerid, Textdraws[textdraw_SERVER_TIME]);
						}
						else
						{
							PLAYER_MISC[playerid][MISC_CONFIG_TIME] = true;
							TextDrawShowForPlayer(playerid, Textdraws[textdraw_SERVER_TIME]);
						}
					}
					case 6:
					{
						if(ACCOUNT_INFO[playerid][ac_DOUBT_CHANNEL]) ACCOUNT_INFO[playerid][ac_DOUBT_CHANNEL] = false;
						else ACCOUNT_INFO[playerid][ac_DOUBT_CHANNEL] = true;
					}
				}
				ShowDialog(playerid, dialogid);
			}
			return 1;
		}
		case DIALOG_POLICE_BYC:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT] = 10;
						PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] = 0;
						ShowDialog(playerid, DIALOG_POLICE_BYC_LAST_ALL);
					}
					case 1: ShowDialog(playerid, DIALOG_POLICE_BYC_NAME_FIND);
				}
			}
			return 1;
		}
		case DIALOG_POLICE_BYC_NAME_FIND:
		{
			if(response)
			{
				new name[24];
				if(sscanf(inputtext, "s[24]", name)) return ShowDialog(playerid, dialogid);
				
				new DBResult:Result, DB_Query[128], bool:found;
				format(DB_Query, sizeof DB_Query, "SELECT `ID` FROM `CUENTA` WHERE `NAME` = '%q';", name);
				Result = db_query(Database, DB_Query);
				
				if(db_num_rows(Result))
				{
					PLAYER_TEMP[playerid][pt_SELECTED_BYC_USER_ID] = db_get_field_int(Result, 0);
					found = true;
				}
				db_free_result(Result);
				
				if(found)
				{
					PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT] = 10;
					PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] = 0;
					ShowDialog(playerid, DIALOG_POLICE_BYC_LAST_PLAYER);
				}
				else SendClientMessage(playerid, -1, "No se ha encontrado a esa persona.");
			}
			return 1;
		}
		case DIALOG_POLICE_BYC_LAST_ALL:
		{
			if(response)
			{
				if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == -1) return 1;
				else if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == -2) // Siguiente
				{
					if(PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] >= GetDatabasePages("SELECT COUNT() FROM `POLICE_HISTORY`;", PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT]) - 1) PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] = 0;
					else PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] ++;
					ShowDialog(playerid, dialogid);
				}
				else if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == -3) //Anterior
				{
					if(PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] <= 0) PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] = GetDatabasePages("SELECT COUNT() FROM `POLICE_HISTORY`;", PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT]) - 1;
					else PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] --;
					ShowDialog(playerid, dialogid);
				}
				else
				{
					PLAYER_TEMP[playerid][pt_SELECTED_BYC_ID] = PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem];
					ShowDialog(playerid, DIALOG_POLICE_DELETE_BYC);
				}
			}
			return 1;
		}
		case DIALOG_POLICE_BYC_LAST_PLAYER:
		{
			if(response)
			{
				if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == -1) return 1;
				else if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == -2) // Siguiente
				{
					new the_query[128];
					format(the_query, sizeof the_query, "SELECT COUNT() FROM `POLICE_HISTORY` WHERE `ID_USER` = '%d';", PLAYER_TEMP[playerid][pt_SELECTED_BYC_USER_ID]);
					
					if(PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] >= GetDatabasePages(the_query, PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT]) - 1) PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] = 0;
					else PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] ++;
					ShowDialog(playerid, dialogid);
				}
				else if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == -3) //Anterior
				{
					new the_query[128];
					format(the_query, sizeof the_query, "SELECT COUNT() FROM `POLICE_HISTORY` WHERE `ID_USER` = '%d';", PLAYER_TEMP[playerid][pt_SELECTED_BYC_USER_ID]);
					
					if(PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] <= 0) PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] = GetDatabasePages(the_query, PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT]) - 1;
					else PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] --;
					ShowDialog(playerid, dialogid);
				}
				else
				{
					PLAYER_TEMP[playerid][pt_SELECTED_BYC_ID] = PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem];
					ShowDialog(playerid, DIALOG_POLICE_DELETE_BYC);
				}
			}
			return 1;
		}
		case DIALOG_POLICE_DELETE_BYC:
		{
			if(response)
			{
				new DB_Query[128];
				format(DB_Query, sizeof DB_Query, "DELETE FROM `POLICE_HISTORY` WHERE `ID` = '%d';", PLAYER_TEMP[playerid][pt_SELECTED_BYC_ID]);
				db_query(Database, DB_Query);
				
				SendClientMessage(playerid, -1, "Registro borrado del historial policial.");
			}
			return 1;
		}
	}
	return 0;
}

GetDatabasePages(query[], limit)
{
    new DBResult:pages;
	pages = db_query(Database, query);
	
	new Float:tpages = floatdiv(floatround(db_get_field_int(pages, 0)), limit);
	db_free_result(pages);
	return floatround(tpages, floatround_ceil);
}

AddNewAd(playerid, type, price, text[], modelid, vcol1 = 0, vcol2 = 0)
{
	new Float:rots[4];
	switch(type)
	{
		case SHOP_ARTICLE_TYPE_PROPERTY: rots = Float:{345.0, 0.0, 30.0, 1.20};
		case SHOP_ARTICLE_TYPE_VEHICLE: rots = Float:{345.0, 0.0, 330.0, 1.0};
		case SHOP_ARTICLE_TYPE_OTHER: rots = Float:{0.0, 0.0, 330.0, 1.20};
	}
	
	new DB_Query[450];
	format(DB_Query, sizeof DB_Query, 
		"\
			INSERT INTO `SHOP` (`ID_USER`, `TYPE`, `PRICE`, `TEXT`, `MODELID`, `RX`, `RY`, `RZ`, `ZOOM`, `VCOL1`, `VCOL2`) VALUES ('%d', '%d', '%d', '%q', '%d', '%f', '%f', '%f', '%f', '%d', '%d');\
			DELETE FROM `SHOP` WHERE `ID` NOT IN (SELECT `ID` FROM `SHOP` ORDER BY `DATE` DESC LIMIT 300);\
		",
			ACCOUNT_INFO[playerid][ac_ID], type, price, text, modelid, rots[0], rots[1], rots[2], rots[3], vcol1, vcol2
	);
	db_query(Database, DB_Query);
	return 1;
}

forward OnPlayerSongFound(index, response_code, data[]);
public OnPlayerSongFound(index, response_code, data[])
{
	if(!PLAYER_TEMP[index][pt_PLAYER_WAITING_MP3_HTTP]) return 1;
	
	if(response_code == 200)
	{
		if(data[0] == '|' && data[1] == '[')
		{
			new start_song_pos = -1, end_song_pos = -1, delimiter_pos_info = -1, counter, tmp[yt_result];
			for(new i = 0; i != sizeof RESULT_YOUTUBE; i ++) RESULT_YOUTUBE[i] = tmp;
			
			start_song_pos = strfind(data, "|[");
			while(start_song_pos != -1)
			{
				start_song_pos = strfind(data, "|[");
				if(start_song_pos == -1) break;
				delimiter_pos_info = strfind(data, "||");
				strmid(RESULT_YOUTUBE[counter][videoID], data, start_song_pos + 2, delimiter_pos_info, 11 + 1);
				
				end_song_pos = strfind(data, "]|");
				strmid(RESULT_YOUTUBE[counter][yt_title], data, delimiter_pos_info + 2, end_song_pos, 100 + 1);
				strdel(data, 0, end_song_pos + 2);
				counter ++;
			}
			
			if(counter == 0) return SendClientMessage(index, -1, "{00FF80}No se encontró ningún resultado para tu búsqueda.");
			
			new dialog_title[50], dialog[120 * MAX_RESULTS], dialog_counter;
			
			for(new i = 0; i != counter; i ++)
			{
				if(isnull(RESULT_YOUTUBE[i][yt_title])) continue;
				format(PLAYER_DIALOG_MP3_RESULT[index][dialog_counter][videoID], 11 + 1, "%s", RESULT_YOUTUBE[i][videoID]);
				format(PLAYER_DIALOG_MP3_RESULT[index][dialog_counter][yt_title], 100 + 1, "%s", RESULT_YOUTUBE[i][yt_title]);
				format(dialog, sizeof dialog, "%s{E6F8E0}%d. %s\n", dialog, dialog_counter + 1, RESULT_YOUTUBE[i][yt_title]);
				dialog_counter ++;
			}
			format(dialog_title, sizeof dialog_title, "{E6F8E0}Se han encontado '%d' resultados", dialog_counter);
			ShowPlayerDialog(index, DIALOG_PLAYER_MP3_RESULTS, DIALOG_STYLE_LIST, dialog_title, dialog, "Reproducir", "Salir");
			PLAYER_TEMP[index][pt_DIALOG_RESPONDED] = false;
		}
		else SendClientMessage(index, -1, "{00FF80}El resultado obtenido no puede ser comprendido.");
	}
	else SendClientMessage(index, -1, "{00FF80}La búsqueda falló, inténtelo de nuevo más tarde.");
	
	PLAYER_TEMP[index][pt_PLAYER_WAITING_MP3_HTTP] = false;
	return 1;
}

GetEmptyPlayer_GPS_Slot(playerid)
{
	for(new i = 0; i != MAX_PLAYER_GPS_SAVES; i ++)
	{
		if(!PLAYER_GPS[playerid][i][player_gps_VALID]) return i;
	}
	return -1;
}

SetPlayer_GPS_Checkpoint(playerid, Float:x, Float:y, Float:z, world, interior)
{
	if(IsValidDynamicCP(PLAYER_TEMP[playerid][pt_GPS_CHECKPOINT]))
	{
		DestroyDynamicCP(PLAYER_TEMP[playerid][pt_GPS_CHECKPOINT]);
		PLAYER_TEMP[playerid][pt_GPS_CHECKPOINT] = INVALID_STREAMER_ID;
	}
	PLAYER_TEMP[playerid][pt_GPS_CHECKPOINT] = CreateDynamicCP(x, y, z, 5.0, world, interior, playerid, 9999999999.0);
	
	new info[1];
	info[0] = CHECKPOINT_TYPE_GPS;
	Streamer_SetArrayData(STREAMER_TYPE_CP, PLAYER_TEMP[playerid][pt_GPS_CHECKPOINT], E_STREAMER_EXTRA_ID, info);
	
	if(GetPlayerState(playerid) == PLAYER_STATE_PASSENGER)
	{
		new vehicleid = GetPlayerVehicleID(playerid);
		if(WORK_VEHICLES[vehicleid][work_vehicle_VALID])
		{
			if(WORK_VEHICLES[vehicleid][work_vehicle_WORK] == WORK_TAXI)
			{
				if(TAXI_METER_VEHICLE[vehicleid][veh_taxi_meter_ENABLED])
				{
					if(IsPlayerConnected(GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER]))
					{
						if(IsValidDynamicCP(PLAYER_TEMP[ GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER] ][pt_GPS_CHECKPOINT]))
						{
							DestroyDynamicCP(PLAYER_TEMP[ GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER] ][pt_GPS_CHECKPOINT]);
							PLAYER_TEMP[ GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER] ][pt_GPS_CHECKPOINT] = INVALID_STREAMER_ID;
						}
						PLAYER_TEMP[ GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER] ][pt_GPS_CHECKPOINT] = CreateDynamicCP(x, y, z, 5.0, world, interior, GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER], 9999999999.0);
						
						new taxi_info[1];
						taxi_info[0] = CHECKPOINT_TYPE_GPS;
						Streamer_SetArrayData(STREAMER_TYPE_CP, PLAYER_TEMP[ GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER] ][pt_GPS_CHECKPOINT], E_STREAMER_EXTRA_ID, taxi_info);
						
						Auto_SendPlayerAction(playerid, "configura su GPS y se lo muestra al taxista.");
						return 1;
					}
				}
			}
		}
	}
	
	Auto_SendPlayerAction(playerid, "configura su GPS.");
	return 1;
}
public OnPlayerEnterArea(playerid, areaid)
{
	foreach(new i : Zones)
	{
		if(areaid == ZInfo[i][Region])
		{
			new str[70];

			if(ZInfo[i][BANDA] == 0)
			{
				format(str,sizeof str,"~b~~h~Zona dominada por nadie.");
	            MensajeAyuda_4(playerid,str);
			}
			else
			{
	   			format(str,sizeof str,"~r~~h~~h~Zona dominada por: ~w~%s",GetNameBandaId(ZInfo[i][BANDA]));
	   			MensajeAyuda_4(playerid,str);
			}
			VARIABLE_MULTI_USO[playerid] = areaid;
            SetPVarInt(playerid, "GZoneID", i);
			return 1;
		}

	}
	return 1;
}
 
public OnPlayerLeaveArea(playerid, areaid)
{
	new city[45], zone[45];
	GetPlayerZones(playerid, city, zone);
    if(Capturing[playerid]== true)
    {
    	CapturarZona[playerid]=0;
    	SetTimerEx("HideCaptureZone",5000,false,"d",playerid);
    	TextDrawSetString(Jugador_Textdraws[ playerid ][textdraw_capturar_zona][0],"~r~Fallido");
		foreach(new i : Zones)
		{
			if(areaid == ZInfo[i][Region])
			{
				if(Capturing[playerid])
				{
		            format(string2,sizeof (string2),"~Conquista: de la banda (%s) fallo en conquistar la zona en {FF0000}['%s,%s' la zona se desbloqueara en 5 minutos]",CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_NAME],city, zone);
		            SendClientMessageToAll(0x81F7D8FF,string2);
					Capturing[playerid] = false;
					KillTimer(ZInfo[i][timercap_main]);
					PlayerTextDrawHide(playerid,TimerTD[playerid][0]);
		            ZInfo[i][timer] = 300;
					ZInfo[i][locked] = true;
					ZInfo[i][timer_main] = SetTimerEx("UnlockZone",1000,true,"i",i);
				}
				ZInfo[i][U_Attack] = false;
				GangZoneStopFlashForAll(ZInfo[i][_Zone]);
			}
	    }
    }
	return 1;
}
funcion SalioDeConquista(playerid)
{
	new city[45], zone[45];
	GetPlayerZones(playerid, city, zone);
    if(Capturing[playerid]== true)
    {
    	CapturarZona[playerid]=0;
    	SetTimerEx("HideCaptureZone",5000,false,"d",playerid);
    	TextDrawSetString(Jugador_Textdraws[ playerid ][textdraw_capturar_zona][0],"~r~Fallido");
		foreach(new i : Zones)
		{
			if(VARIABLE_MULTI_USO[playerid] == ZInfo[i][Region])
			{
				if(Capturing[playerid])
				{
		            format(string2,sizeof (string2),"~Conquista: de la banda (%s) fallo en conquistar la zona en {FF0000}['%s,%s' la zona se desbloqueara en 5 minutos]",CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_NAME],city, zone);
		            SendClientMessageToAll(0x81F7D8FF,string2);
					Capturing[playerid] = false;
					KillTimer(ZInfo[i][timercap_main]);
					PlayerTextDrawHide(playerid,TimerTD[playerid][0]);
		            ZInfo[i][timer] = 300;
					ZInfo[i][locked] = true;
					ZInfo[i][timer_main] = SetTimerEx("UnlockZone",1000,true,"i",i);
				}
				ZInfo[i][U_Attack] = false;
				GangZoneStopFlashForAll(ZInfo[i][_Zone]);
			}
	    }
    }
    return 1;
}
public OnPlayerEnterDynamicArea(playerid, areaid)
{
	new info[2];
	Streamer_GetArrayData(STREAMER_TYPE_AREA, areaid, E_STREAMER_EXTRA_ID, info);
	
	switch(info[0])
	{
		case AREA_TYPE_NONE:
		{
			if(areaid == Mechanic_Area)
			{
				if(PLAYER_TEMP[playerid][pt_WANT_MECHANIC])
				{
					PLAYER_TEMP[playerid][pt_WANT_MECHANIC] = false;
					DisablePlayerMechanicMark(playerid);
				}
			}
		}
		case AREA_TYPE_GANGZONE:
		{
			new index = info[1];
			
			if(TERRITORIES[index][territory_VALID])
			{
				PLAYER_TEMP[playerid][pt_LAST_TERRITORY] = index;
				if(PLAYER_CREW[playerid][player_crew_VALID])
				{
					if(TERRITORIES[index][territory_WAR])
					{
						SendClientMessageEx(playerid, -1, "Este territorio está siendo atacado por la banda {%06x}'%s'.", CREW_INFO[ TERRITORIES[index][territory_ATTACKER_CREW_INDEX] ][crew_COLOR] >>> 8, CREW_INFO[ TERRITORIES[index][territory_ATTACKER_CREW_INDEX] ][crew_NAME]);
						
						new r, g, b, a;
						HexToRGBA(CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_COLOR], r, g, b, a);
						SetPlayerColorEx(playerid, RGBAToHex(r, g, b, 0));
						
						TextDrawShowForPlayer(playerid, Textdraws[textdraw_TERRITORY_BOX]);
						TextDrawShowForPlayer(playerid, TERRITORIES[index][territory_TEXTDRAW]);
					}
				}
			}
		}
	}

	return 1;
}

public OnPlayerLeaveDynamicArea(playerid, areaid)
{
	new info[2];
	Streamer_GetArrayData(STREAMER_TYPE_AREA, areaid, E_STREAMER_EXTRA_ID, info);
	
	switch(info[0])
	{
		case AREA_TYPE_NONE:
		{
			if(areaid == Lumberjack_Area)
			{
				if(PLAYER_TEMP[playerid][pt_WORKING_IN] == WORK_LUMBERJACK)
				{
					SendClientMessage(playerid, -1, "{00FF80}Has abandonado el trabajo de leñador porque te has alejado demasiado de la zona.");
					EndPlayerJob(playerid);
				}
			}
			else if(areaid == Farmer_Area)
			{
				if(PLAYER_TEMP[playerid][pt_WORKING_IN] == WORK_FARMER) EndPlayerJob(playerid);
			}
			else if(areaid == Harvest_Area)
			{
				if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
				{
					if(PLAYER_TEMP[playerid][pt_WORKING_IN] == WORK_HARVESTER)
					{
						SendClientMessage(playerid, -1, "{E6F8E0}Has abandonado tu trabajo de cosechador porque te has alejado demasiado de la zona.");
						EndPlayerJob(playerid);
					}
				}
			}
			
			if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_JAIL)
			{
				if(areaid == Jail_Areas[0] || areaid == Jail_Areas[1] || areaid == Jail_Areas[2])
				{
					SetPlayerPosEx(playerid, JAIL_POSITIONS[ CHARACTER_INFO[playerid][ch_POLICE_JAIL_ID] ][jail_X], JAIL_POSITIONS[ CHARACTER_INFO[playerid][ch_POLICE_JAIL_ID]  ][jail_Y], JAIL_POSITIONS[ CHARACTER_INFO[playerid][ch_POLICE_JAIL_ID]  ][jail_Z], JAIL_POSITIONS[ CHARACTER_INFO[playerid][ch_POLICE_JAIL_ID]  ][jail_ANGLE], JAIL_POSITIONS[ CHARACTER_INFO[playerid][ch_POLICE_JAIL_ID]  ][jail_INTERIOR], 0, true);
				}
			}
		}
		case AREA_TYPE_GANGZONE:
		{
			new index = info[1];
			
			if(TERRITORIES[index][territory_VALID])
			{
				if(PLAYER_CREW[playerid][player_crew_VALID])
				{
					SetPlayerNormalColor(playerid);
					TextDrawHideForPlayer(playerid, Textdraws[textdraw_TERRITORY_BOX]);
					TextDrawHideForPlayer(playerid, TERRITORIES[index][territory_TEXTDRAW]);
				}
			}
		}
	}
	return 1;
}

public OnPlayerEnterDynamicCP(playerid, checkpointid)
{
	new info[1];
	Streamer_GetArrayData(STREAMER_TYPE_CP, checkpointid, E_STREAMER_EXTRA_ID, info);

	switch(info[0])
	{
		case CHECKPOINT_TYPE_GPS:
		{
			DestroyDynamicCP(PLAYER_TEMP[playerid][pt_GPS_CHECKPOINT]);
			PLAYER_TEMP[playerid][pt_GPS_CHECKPOINT] = INVALID_STREAMER_ID;
		}
		case CHECKPOINT_TYPE_UNLOAD_CARRIER:
		{
			if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return 1;
			if(!PLAYER_WORKS[playerid][WORK_CARRIER]) return 1;
			if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_CARRIER) return 1;
			new vehicleid = GetPlayerVehicleID(playerid);

			if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_TRANSPORTISTA] == false) return 1;
			//if(GLOBAL_VEHICLES[vehicleid][carrier_vehicle_LOADED] == false) return 1;
			if(GLOBAL_VEHICLES[vehicleid][carrier_vehicle_DELIVERED]) return 1;
			if(GLOBAL_VEHICLES[vehicleid][carrier_vehicle_UNLOADING]) return 1;
			if(PLAYER_VEHICLES[vehicleid][player_vehicle_OWNER_ID] != ACCOUNT_INFO[playerid][ac_ID]) return SendClientMessage(playerid, -1, "{00FF80}Solo aceptaremos el contenedor del dueño de este vehiculo.");
			new string[100];
			DestroyDynamicObject(GLOBAL_VEHICLES[vehicleid][gp_vehicle_TRANS_OBJETO]);
			format(string,sizeof(string),"Carga entregada : ~y~%s~w~ regresa al punto de carga para recibir la paga",Carrier_Contents[ GLOBAL_VEHICLES[vehicleid][gp_vehicle_TRANS_CONTIENE] ][truck_content_NAME]);
			MensajesAyuda(playerid,string);

			GLOBAL_VEHICLES[vehicleid][carrier_vehicle_DELIVERED] = true;

			DestroyDynamicCP(PLAYER_TEMP[playerid][pt_CARRIER_CHECKPOINT]);
			PLAYER_TEMP[playerid][pt_CARRIER_CHECKPOINT] = INVALID_STREAMER_ID;

			SetVehicleVelocity(vehicleid, 0.0, 0.0, 0.0);
			GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE] = 0;
			UpdateVehicleParams(vehicleid);

			GLOBAL_VEHICLES[vehicleid][carrier_vehicle_UNLOADING] = true;
			/*GLOBAL_VEHICLES[vehicleid][truck_vehicle_UNLOADING] = false;
			GLOBAL_VEHICLES[vehicleid][truck_vehicle_DELIVERED] = true;*/

			SetPlayerCarrierCheckpoint(playerid, vehicleid);
		}
		case CHECKPOINT_TYPE_FINISH_CARRIER:
		{
			if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return 1;
			if(!PLAYER_WORKS[playerid][WORK_CARRIER]) return 1;
			if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_CARRIER) return 1;
			new vehicleid = GetPlayerVehicleID(playerid);

			DestroyDynamicCP(PLAYER_TEMP[playerid][pt_CARRIER_CHECKPOINT]);
			PLAYER_TEMP[playerid][pt_CARRIER_CHECKPOINT] = INVALID_STREAMER_ID;

			GLOBAL_VEHICLES[vehicleid][carrier_vehicle_LOADED] = false;
			GLOBAL_VEHICLES[vehicleid][carrier_vehicle_LOADING] = false;
			GLOBAL_VEHICLES[vehicleid][gb_vehicle_TRANSPORTISTA] = false;
			GLOBAL_VEHICLES[vehicleid][gp_vehicle_TRANS_CONTIENE] = 0;

			new work_extra_payment;
			if(work_info[WORK_CARRIER][work_info_EXTRA_PAY] > 0 && work_info[WORK_CARRIER][work_info_EXTRA_PAY_EXP] > 0)
			{
				work_extra_payment = (work_info[WORK_CARRIER][work_info_EXTRA_PAY] * floatround(floatdiv(PLAYER_SKILLS[playerid][WORK_CARRIER], work_info[WORK_CARRIER][work_info_EXTRA_PAY_EXP])));
				if(work_info[WORK_CARRIER][work_info_EXTRA_PAY_LIMIT] != 0) if(work_extra_payment > work_info[WORK_CARRIER][work_info_EXTRA_PAY_LIMIT]) work_extra_payment = work_info[WORK_CARRIER][work_info_EXTRA_PAY_LIMIT];
			
				if(ACCOUNT_INFO[playerid][ac_SU]) work_extra_payment += SU_WORK_EXTRA_PAY;
			}
			new levelduh = Get_Work_Level(playerid,WORK_CARRIER);
			if(levelduh==0) levelduh=1;
			levelduh=levelduh*100;
			GivePlayerCash(playerid, Carrier_Contents[ GLOBAL_VEHICLES[vehicleid][carrier_vehicle_POINT] ][truck_content_MONEY] + work_extra_payment+levelduh);
			PLAYER_SKILLS[playerid][WORK_CARRIER] ++;
			
			new StrText[20];
			format(StrText,sizeof(StrText), "~n~~n~~n~~n~~g~+%s$~n~+%d de nivel", number_format_thousand(Carrier_Contents[ GLOBAL_VEHICLES[vehicleid][carrier_vehicle_POINT] ][truck_content_MONEY] + work_extra_payment),levelduh);
			GameTextForPlayer(playerid, StrText, 5000, 3);
			//Terminar camionero
			Update_Work_Level(playerid,WORK_CARRIER);

		}
		case CHECKPOINT_TYPE_UNLOAD_TRUCK:
		{
			if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return 1;
			if(!PLAYER_WORKS[playerid][WORK_TRUCK]) return 1;
			if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_TRUCK) return 1;
	
			new vehicleid = GetPlayerVehicleID(playerid);
			if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_TYPE] != VEHICLE_TYPE_WORK) return 1;
			if(WORK_VEHICLES[vehicleid][work_vehicle_WORK] != WORK_TRUCK) return 1;
			if(TRUCK_VEHICLE[vehicleid][truck_vehicle_DELIVERED]) return 1;
			if(TRUCK_VEHICLE[vehicleid][truck_vehicle_UNLOADING]) return 1;
			if(TRUCK_VEHICLE[vehicleid][truck_vehicle_DRIVER_USER_ID] != ACCOUNT_INFO[playerid][ac_ID]) return SendClientMessage(playerid, -1, "{00FF80}Solo aceptaremos la carga del conductor de este camión.");
			
			DestroyDynamicCP(PLAYER_TEMP[playerid][pt_TRUCK_CHECKPOINT]);
			PLAYER_TEMP[playerid][pt_TRUCK_CHECKPOINT] = INVALID_STREAMER_ID;
			
			SetVehicleVelocity(vehicleid, 0.0, 0.0, 0.0);
				
			GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE] = 0;
			UpdateVehicleParams(vehicleid);
			
			TRUCK_VEHICLE[vehicleid][truck_vehicle_UNLOADING] = true;
			PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][0], "");
			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][0]);
			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][1]);
			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][2]);
			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][3]);
				
			PLAYER_TEMP[playerid][pt_TRUCK_LOADING_VALUE] = 40.0;
			UpdatePlayerLoadingTruckSize(playerid);
			KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][7]);
			KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][9]);

			ApplyDynamicActorAnimation(ACTOR_TRUCUNLOAD[ PLAYER_TEMP[playerid][pt_ACTOR_TRUCK] ][ID], "CARRY", "PUTDWN", 4.1, true, true, true, false, 0);
			PLAYER_TEMP[playerid][pt_TIMERS][9] = SetTimerEx("TruckUnLoadUp", 1000, false, "ii", playerid, vehicleid);
		}
		case CHECKPOINT_TYPE_FINISH_TRUCK:
		{
			if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return 1;
			if(!PLAYER_WORKS[playerid][WORK_TRUCK]) return 1;
			if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_TRUCK) return 1;
	
			new vehicleid = GetPlayerVehicleID(playerid);
			if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_TYPE] != VEHICLE_TYPE_WORK) return 1;
			if(WORK_VEHICLES[vehicleid][work_vehicle_WORK] != WORK_TRUCK) return 1;
			if(!TRUCK_VEHICLE[vehicleid][truck_vehicle_DELIVERED]) return 1;
			if(TRUCK_VEHICLE[vehicleid][truck_vehicle_UNLOADING]) return 1;
			if(TRUCK_VEHICLE[vehicleid][truck_vehicle_DRIVER_USER_ID] != ACCOUNT_INFO[playerid][ac_ID]) return SendClientMessage(playerid, -1, "{00FF80}Solo le pagaremos al conductor que entregó la mercancía.");
			
			DestroyDynamicCP(PLAYER_TEMP[playerid][pt_TRUCK_CHECKPOINT]);
			PLAYER_TEMP[playerid][pt_TRUCK_CHECKPOINT] = INVALID_STREAMER_ID;
			
			SetVehicleVelocity(vehicleid, 0.0, 0.0, 0.0);
			
			new work_extra_payment;
			if(work_info[WORK_TRUCK][work_info_EXTRA_PAY] > 0 && work_info[WORK_TRUCK][work_info_EXTRA_PAY_EXP] > 0)
			{
				work_extra_payment = (work_info[WORK_TRUCK][work_info_EXTRA_PAY] * floatround(floatdiv(PLAYER_SKILLS[playerid][WORK_TRUCK], work_info[WORK_TRUCK][work_info_EXTRA_PAY_EXP])));
				if(work_info[WORK_TRUCK][work_info_EXTRA_PAY_LIMIT] != 0) if(work_extra_payment > work_info[WORK_TRUCK][work_info_EXTRA_PAY_LIMIT]) work_extra_payment = work_info[WORK_TRUCK][work_info_EXTRA_PAY_LIMIT];
			
				if(ACCOUNT_INFO[playerid][ac_SU]) work_extra_payment += SU_WORK_EXTRA_PAY;
			}
			new levelduh = Get_Work_Level(playerid,WORK_TRUCK);
			if(levelduh==0) levelduh=1;
			levelduh=levelduh*200;
			GivePlayerCash(playerid, Truck_Contents[ TRUCK_VEHICLE[vehicleid][truck_vehicle_POINT] ][truck_content_MONEY] + work_extra_payment+levelduh);
			PLAYER_SKILLS[playerid][WORK_TRUCK] ++;
			
			new StrText[20];
			format(StrText,sizeof(StrText), "~n~~n~~n~~n~~g~+%s$~n~+%d de nivel", number_format_thousand(Truck_Contents[ TRUCK_VEHICLE[vehicleid][truck_vehicle_POINT] ][truck_content_MONEY] + work_extra_payment),levelduh);
			GameTextForPlayer(playerid, StrText, 5000, 3);
			SetVehicleToRespawnEx(vehicleid);

			//Terminar camionero
			Update_Work_Level(playerid,WORK_TRUCK);
		}
		case CHECKPOINT_TYPE_TRASH:
		{
			if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return 1;
			if(!PLAYER_WORKS[playerid][WORK_TRASH]) return DestroyPlayerTrashCheckpoint(playerid);
			if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_TRASH) return DestroyPlayerTrashCheckpoint(playerid);
			if(!PLAYER_TEMP[playerid][pt_TRASH_PASSENGER]) return 1;
			
			new driver = TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_DRIVER_ID];
			SendClientMessage(driver, -1, "{E6F8E0}Espera mientras tu compañero recoge la basura.");
			
			new Float:offset = floatdiv(PLAYER_SKILLS[playerid][WORK_TRASH], 10);
			if(offset > 30.0) offset = 30.0;
			
			PLAYER_TEMP[playerid][pt_RECYCLE_BIN_VALUE] = 10.0 + offset;
			UpdatePlayerTrashRecycleSize(playerid);
			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][0]);
			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][1]);
			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][2]);
			
			TogglePlayerControllableEx(playerid, false);
			SetCameraBehindPlayer(playerid);
			ApplyAnimation(playerid, "ROB_BANK", "CAT_Safe_Rob", 4.1, true, false, false, false, 0);
			
			KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][10]);
			PLAYER_TEMP[playerid][pt_TIMERS][10] = SetTimerEx("RecycleUp", 1000, false, "i", playerid);
		}
		case CHECKPOINT_TYPE_FINISH_TRASH:
		{
			if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return 1;
			if(!PLAYER_WORKS[playerid][WORK_TRASH]) return DestroyPlayerTrashCheckpoint(playerid);
			if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_TRASH) return DestroyPlayerTrashCheckpoint(playerid);
			if(!PLAYER_TEMP[playerid][pt_TRASH_DRIVER]) return 1;
			
			new route = TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_ROUTE];
			new money = TRASH_OBJECTS[route][trash_route_MONEY];
			
			new driver_work_extra_payment, passenger_work_extra_payment;
			if(work_info[WORK_TRASH][work_info_EXTRA_PAY] > 0 && work_info[WORK_TRASH][work_info_EXTRA_PAY_EXP] > 0)
			{
				driver_work_extra_payment = (work_info[WORK_TRASH][work_info_EXTRA_PAY] * floatround(floatdiv(PLAYER_SKILLS[playerid][WORK_TRASH], work_info[WORK_TRASH][work_info_EXTRA_PAY_EXP])));
				if(work_info[WORK_TRASH][work_info_EXTRA_PAY_LIMIT] != 0) if(driver_work_extra_payment > work_info[WORK_TRASH][work_info_EXTRA_PAY_LIMIT]) driver_work_extra_payment = work_info[WORK_TRASH][work_info_EXTRA_PAY_LIMIT];
				if(ACCOUNT_INFO[playerid][ac_SU]) driver_work_extra_payment += SU_WORK_EXTRA_PAY;
				
				passenger_work_extra_payment = (work_info[WORK_TRASH][work_info_EXTRA_PAY] * floatround(floatdiv(PLAYER_SKILLS[ TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_PASSENGER_ID] ][WORK_TRASH], work_info[WORK_TRASH][work_info_EXTRA_PAY_EXP])));
				if(work_info[WORK_TRASH][work_info_EXTRA_PAY_LIMIT] != 0) if(passenger_work_extra_payment > work_info[WORK_TRASH][work_info_EXTRA_PAY_LIMIT]) passenger_work_extra_payment = work_info[WORK_TRASH][work_info_EXTRA_PAY_LIMIT];
				if(ACCOUNT_INFO[ TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_PASSENGER_ID] ][ac_SU]) passenger_work_extra_payment += SU_WORK_EXTRA_PAY;
			}
			
			GivePlayerCash(playerid, money + driver_work_extra_payment);
			SendClientMessageEx(playerid, -1, "Trabajo finalizado, has ganado %s$.", number_format_thousand(money + driver_work_extra_payment));
			PLAYER_SKILLS[playerid][WORK_TRASH] ++;
			
			GivePlayerCash(TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_PASSENGER_ID], money + passenger_work_extra_payment);
			SendClientMessageEx(TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_PASSENGER_ID], -1, "Trabajo finalizado, has ganado %s$.", number_format_thousand(money + passenger_work_extra_payment));
			PLAYER_SKILLS[ TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_PASSENGER_ID] ][WORK_TRASH] ++;
			
			CancelTrashWork(playerid, TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_PASSENGER_ID], PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID]);
		}
		case CHECKPOINT_TYPE_LUMBERJACK:
		{
			if(PLAYER_TEMP[playerid][pt_WORKING_IN] == WORK_LUMBERJACK)
			{
				DestroyDynamicCP(PLAYER_TEMP[playerid][pt_LUMBERJACK_CHECKPOINT]);
				PLAYER_TEMP[playerid][pt_LUMBERJACK_CHECKPOINT] = INVALID_STREAMER_ID;
				
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
				RemovePlayerAttachedObject(playerid, 8);
				PLAYER_TEMP[playerid][pt_PLAYER_CARRYING_TREE] = false;
				ApplyAnimation(playerid, "CARRY", "putdwn05", 4.1, 0, 1, 1, 0, 0, 1);
				
				new work_extra_payment;
				if(work_info[WORK_LUMBERJACK][work_info_EXTRA_PAY] > 0 && work_info[WORK_LUMBERJACK][work_info_EXTRA_PAY_EXP] > 0)
				{
					work_extra_payment = (work_info[WORK_LUMBERJACK][work_info_EXTRA_PAY] * floatround(floatdiv(PLAYER_SKILLS[playerid][WORK_LUMBERJACK], work_info[WORK_LUMBERJACK][work_info_EXTRA_PAY_EXP])));
					if(work_info[WORK_LUMBERJACK][work_info_EXTRA_PAY_LIMIT] != 0) if(work_extra_payment > work_info[WORK_LUMBERJACK][work_info_EXTRA_PAY_LIMIT]) work_extra_payment = work_info[WORK_LUMBERJACK][work_info_EXTRA_PAY_LIMIT];
					
					if(ACCOUNT_INFO[playerid][ac_SU]) work_extra_payment += SU_WORK_EXTRA_PAY;
				}
				PLAYER_SKILLS[playerid][WORK_LUMBERJACK] ++;
				
				new levelduh = Get_Work_Level(playerid,WORK_LUMBERJACK);
				if(levelduh==0) levelduh=1;
				levelduh=levelduh*100;

				new Dinero = minrand(50, 100) + work_extra_payment;
				GivePlayerCash(playerid, Dinero+levelduh);
				new StrText[20];
				format(StrText, sizeof(StrText), "~g~+%d +(%d)$", Dinero,levelduh);
				GameTextForPlayer(playerid, StrText, 5000, 1);

				Update_Work_Level(playerid,WORK_LUMBERJACK);

			}
			else
			{
				DestroyDynamicCP(PLAYER_TEMP[playerid][pt_LUMBERJACK_CHECKPOINT]);
				PLAYER_TEMP[playerid][pt_LUMBERJACK_CHECKPOINT] = INVALID_STREAMER_ID;
			}
		}
		case CHECKPOINT_TYPE_PIZZA_DEL:
		{
			if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return 1;
			PLAYER_TEMP[playerid][pt_PIZZA_PROCCESS] --;
			PLAYER_TEMP[playerid][pt_DELIVERED_PIZZAS] ++;
			RemovePlayerAttachedObject(playerid, 9);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			ApplyDynamicActorAnimation(PLAYER_TEMP[playerid][pt_PIZZA_ACTOR], "FOOD", "EAT_Pizza", 4.1, false, true, true, false, 0);
			ApplyDynamicActorAnimation(PLAYER_TEMP[playerid][pt_PIZZA_ACTOR], "FOOD", "EAT_Pizza", 4.1, false, true, true, false, 0);
			DestroyDynamicCP(PLAYER_TEMP[playerid][pt_PIZZA_CHECKPOINT]);
			PIZZA_VEHICLE[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][pizza_vehicle_PIZZA_POINT_DELI] = true;
			PLAYER_TEMP[playerid][pt_PIZZA_CHECKPOINT] = INVALID_STREAMER_ID;
			
			SendClientMessage(playerid, -1, "{E6F8E0}Genial, vuelve a subir a la moto para continuar.");
		}
		case CHECKPOINT_TYPE_PIZZA_FINISH:
		{
			if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return 1;
			
			new vehicleid = GetPlayerVehicleID(playerid);
			if(!PIZZA_VEHICLE[vehicleid][pizza_vehicle_STARTED]) return 1;
			if(PIZZA_VEHICLE[vehicleid][pizza_vehicle_DRIVER_AID] != ACCOUNT_INFO[playerid][ac_ID]) return SendClientMessage(playerid, -1, "{00FF80}Solo le pagaremos al conductor que realizó el trabajo.");
		
			new work_extra_payment;
			if(work_info[WORK_PIZZA][work_info_EXTRA_PAY] > 0 && work_info[WORK_PIZZA][work_info_EXTRA_PAY_EXP] > 0)
			{
				work_extra_payment = (work_info[WORK_PIZZA][work_info_EXTRA_PAY] * floatround(floatdiv(PLAYER_SKILLS[playerid][WORK_PIZZA], work_info[WORK_PIZZA][work_info_EXTRA_PAY_EXP])));
				if(work_info[WORK_PIZZA][work_info_EXTRA_PAY_LIMIT] != 0) if(work_extra_payment > work_info[WORK_PIZZA][work_info_EXTRA_PAY_LIMIT]) work_extra_payment = work_info[WORK_PIZZA][work_info_EXTRA_PAY_LIMIT];
			
			  	if(ACCOUNT_INFO[playerid][ac_SU]) work_extra_payment += SU_WORK_EXTRA_PAY;
			}
			
			PLAYER_SKILLS[playerid][WORK_PIZZA] ++;
			new money = (PLAYER_TEMP[playerid][pt_DELIVERED_PIZZAS] * 200) + work_extra_payment;
			GivePlayerCash(playerid, money);
			SendClientMessageEx(playerid, -1, "{E6F8E0}Gracias por tu trabajo, has repartido %d pizzas y has ganado {adf442}%s$ {E6F8E0}.", PLAYER_TEMP[playerid][pt_DELIVERED_PIZZAS], number_format_thousand(money));
			
			EndPlayerJob(playerid);
		}
		default: return 1;
	}
	return 1;
}

RegisterNewPlayer_GPS_Site(playerid, slot)
{
	new DBResult:Result, DB_Query[340];
	format(DB_Query, sizeof DB_Query,
	"\
		INSERT INTO `PLAYER_GPS`\
		(\
			`ID_USER`, `NAME`, `X`, `Y`, `Z`, `WORLD`, `INTERIOR`\
		)\
		VALUES\
		(\
			'%d', '%q', '%f', '%f', '%f', '%d', '%d'\
		);\
		SELECT MAX(`ID`) FROM `PLAYER_GPS`;\
	",
		ACCOUNT_INFO[playerid][ac_ID], PLAYER_GPS[playerid][slot][player_gps_NAME], PLAYER_GPS[playerid][slot][player_gps_X], PLAYER_GPS[playerid][slot][player_gps_Y], PLAYER_GPS[playerid][slot][player_gps_Z], PLAYER_GPS[playerid][slot][player_gps_WORLD], PLAYER_GPS[playerid][slot][player_gps_INTERIOR]
	);
	Result = db_query(Database, DB_Query);

	if(db_num_rows(Result)) PLAYER_GPS[playerid][slot][player_gps_ID] = db_get_field_int(Result, 0);
	db_free_result(Result);
	return 1;
}

SetPlayerToys(playerid)
{
	for(new i = 0; i != MAX_PLAYER_ATTACHED_OBJECTS; i ++) RemovePlayerAttachedObject(playerid, i);
		
	for(new i = 0; i != MAX_PLAYER_ATTACHED_OBJECTS; i ++)
	{
		if(i >= MAX_NU_TOYS && !ACCOUNT_INFO[playerid][ac_SU]) break;

		if(PLAYER_TOYS[playerid][i][player_toy_VALID])
		{
			if(PLAYER_TOYS[playerid][i][player_toy_ATTACHED])
			{
				SetPlayerAttachedObject
				(
					playerid, 
					i,
					PLAYER_TOYS[playerid][ i ][player_toy_MODELID],
					PLAYER_TOYS[playerid][ i ][player_toy_BONE],
					PLAYER_TOYS[playerid][ i ][player_toy_OFFSET_X],
					PLAYER_TOYS[playerid][ i ][player_toy_OFFSET_Y],
					PLAYER_TOYS[playerid][ i ][player_toy_OFFSET_Z],
					PLAYER_TOYS[playerid][ i ][player_toy_ROT_X],
					PLAYER_TOYS[playerid][ i ][player_toy_ROT_Y],
					PLAYER_TOYS[playerid][ i ][player_toy_ROT_Z],
					PLAYER_TOYS[playerid][ i ][player_toy_SCALE_X],
					PLAYER_TOYS[playerid][ i ][player_toy_SCALE_Y],
					PLAYER_TOYS[playerid][ i ][player_toy_SCALE_Z],
					PLAYER_TOYS[playerid][ i ][player_toy_COLOR_1],
					PLAYER_TOYS[playerid][ i ][player_toy_COLOR_2]
				);
			}
		}
	}
	
	return 1;
}

UpdatePlayerToy(playerid, index)
{
	RemovePlayerAttachedObject(playerid, index);
	SetPlayerAttachedObject
	(
		playerid, 
		index,
		PLAYER_TOYS[playerid][ index ][player_toy_MODELID],
		PLAYER_TOYS[playerid][ index ][player_toy_BONE],
		PLAYER_TOYS[playerid][ index ][player_toy_OFFSET_X],
		PLAYER_TOYS[playerid][ index ][player_toy_OFFSET_Y],
		PLAYER_TOYS[playerid][ index ][player_toy_OFFSET_Z],
		PLAYER_TOYS[playerid][ index ][player_toy_ROT_X],
		PLAYER_TOYS[playerid][ index ][player_toy_ROT_Y],
		PLAYER_TOYS[playerid][ index ][player_toy_ROT_Z],
		PLAYER_TOYS[playerid][ index ][player_toy_SCALE_X],
		PLAYER_TOYS[playerid][ index ][player_toy_SCALE_Y],
		PLAYER_TOYS[playerid][ index ][player_toy_SCALE_Z],
		PLAYER_TOYS[playerid][ index ][player_toy_COLOR_1],
		PLAYER_TOYS[playerid][ index ][player_toy_COLOR_2]
	);
	return 1;
}

EditPlayerToy(playerid)
{
	if(PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ATTACHED]) RemovePlayerAttachedObject(playerid, PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT]);
				
	SetPlayerAttachedObject
	(
		playerid, 
		PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT],
		PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_MODELID],
		PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_BONE],
		PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_OFFSET_X],
		PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_OFFSET_Y],
		PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_OFFSET_Z],
		PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ROT_X],
		PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ROT_Y],
		PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ROT_Z],
		PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_SCALE_X],
		PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_SCALE_Y],
		PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_SCALE_Z],
		PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_COLOR_1],
		PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_COLOR_2]
	);
	
	SendClientMessage(playerid, -1, "{f4d442}Ajusta el accesorio y haz clic en el icono de guardar, si pulsas {aed164}'ESCAPE' {f4d442}no se guardará la configuración.");
	SendClientMessage(playerid, -1, "{f4d442}Mantén presionado {aed164}'ESPACIO' {f4d442}para mover la cámara.");
	EditAttachedObject(playerid, PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT]);
	return 1;
}

public OnPlayerEditAttachedObject(playerid, response, index, modelid, boneid, Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:fRotX, Float:fRotY, Float:fRotZ, Float:fScaleX, Float:fScaleY, Float:fScaleZ)
{
 	if(Editando_prenda[playerid]==true)
 	{

    	switch(response)
		{
			case EDIT_RESPONSE_CANCEL:
			{
		        /*if(fScaleX >= 1.5 || fScaleY >= 1.5 || fScaleZ >= 1.5)
			    {
			        SendClientMessage(playerid, -1, "{00FF80}El tamaño del accesorio es demasiado grande, y la configuracion no se guardo.");
			        RemovePlayerAttachedObject(playerid, OBJETO_BONE_ID[playerid]);
			        return 1;
			    }
			    if((fOffsetX >= 0.6 || -0.6 >= fOffsetX) || (fOffsetY >= 0.6 || -0.6 >= fOffsetY) || (fOffsetZ >= 0.6 || -0.6 >= fOffsetZ))
		        {
		            SendClientMessage(playerid, -1, "{00FF80}La posición del objeto está demasiado lejos de ti, y la configuracion no se guardo");
		            RemovePlayerAttachedObject(playerid, OBJETO_BONE_ID[playerid]);
		            return 1;
				}*/

				new Query[600],DBResult:Result;
				format(Query, sizeof(Query), "SELECT * FROM `OBJETOS_EQUIPADOS` WHERE `PLAYER` = '%d' AND `OBJETO` = '%d'", ACCOUNT_INFO[playerid][ac_ID],OBJETO_EDITAR[playerid]);
				Result = db_query(_DB_, Query);
				if(db_num_rows(Result))
				{
					format(Query, sizeof(Query), "UPDATE `OBJETOS_EQUIPADOS` SET `OffsetX` = '%f',`OffsetY` = '%f',`OffsetZ` = '%f',\
					`RotX` = '%f',`RotY` = '%f',`RotZ` = '%f',`ScaleX` = '%f',`ScaleY` = '%f',`ScaleZ` = '%f' WHERE `PLAYER` = '%d' AND `OBJETO` = '%d' ",\
					fOffsetX,fOffsetY,fOffsetZ,
					fRotX,fRotY,fRotZ,
					fScaleX,fScaleY,fScaleZ,
					ACCOUNT_INFO[playerid][ac_ID],OBJETO_EDITAR[playerid]);
					db_query(_DB_, Query);
					GameTextForPlayer( playerid, "~n~~n~~n~~n~~w~Objeto ~y~~h~Actualizado.", 5000, 4 );
				}
				else
				{
					format(Query, sizeof(Query),"INSERT INTO `OBJETOS_EQUIPADOS` (`PLAYER`,`OBJETO`,`OffsetX`,`OffsetY`,`OffsetZ`,`RotX`,`RotY`,`RotZ`,\
						`ScaleX`,`ScaleY`,`ScaleZ`) VALUES('%d', '%d','%f', '%f', '%f', '%f', '%f', '%f', '%f', '%f', '%f')",\
					ACCOUNT_INFO[playerid][ac_ID],OBJETO_EDITAR[playerid],
					fOffsetX,fOffsetY,fOffsetZ,
					fRotX,fRotY,fRotZ,
					fScaleX,fScaleY,fScaleZ);
					db_query(_DB_, Query);
					GameTextForPlayer( playerid, "~n~~n~~n~~n~~w~Objeto ~g~~h~Guardado.", 5000, 4 );
				}
				RemovePlayerAttachedObject(playerid, OBJETO_BONE_ID[playerid]);
				SendClientMessage(playerid,-1, "* Equipate la prenda");
			}
			case EDIT_RESPONSE_FINAL:
			{
				if(fScaleX >= 1.5 || fScaleY >= 1.5 || fScaleZ >= 1.5)
			    {
			        SendClientMessage(playerid, -1, "{00FF80}El tamaño del accesorio es demasiado grande, y la configuracion no se guardo.");
			        RemovePlayerAttachedObject(playerid, OBJETO_BONE_ID[playerid]);
			        return 1;
			    }
			    if((fOffsetX >= 0.6 || -0.6 >= fOffsetX) || (fOffsetY >= 0.6 || -0.6 >= fOffsetY) || (fOffsetZ >= 0.6 || -0.6 >= fOffsetZ))
		        {
		            SendClientMessage(playerid, -1, "{00FF80}La posición del objeto está demasiado lejos de ti, y la configuracion no se guardo");
		            RemovePlayerAttachedObject(playerid, OBJETO_BONE_ID[playerid]);
		            return 1;
				}

				new Query[600],DBResult:Result;
				format(Query, sizeof(Query), "SELECT * FROM `OBJETOS_EQUIPADOS` WHERE `PLAYER` = '%d' AND `OBJETO` = '%d'", ACCOUNT_INFO[playerid][ac_ID],OBJETO_EDITAR[playerid]);
				Result = db_query(_DB_, Query);
				if(db_num_rows(Result))
				{
					format(Query, sizeof(Query), "UPDATE `OBJETOS_EQUIPADOS` SET `OffsetX` = '%f',`OffsetY` = '%f',`OffsetZ` = '%f',\
					`RotX` = '%f',`RotY` = '%f',`RotZ` = '%f',`ScaleX` = '%f',`ScaleY` = '%f',`ScaleZ` = '%f' WHERE `PLAYER` = '%d' AND `OBJETO` = '%d' ",\
					fOffsetX,fOffsetY,fOffsetZ,
					fRotX,fRotY,fRotZ,
					fScaleX,fScaleY,fScaleZ,
					ACCOUNT_INFO[playerid][ac_ID],OBJETO_EDITAR[playerid]);
					db_query(_DB_, Query);
					GameTextForPlayer( playerid, "~n~~n~~n~~n~~w~Objeto ~y~~h~Actualizado.", 5000, 4 );
				}
				else
				{
					format(Query, sizeof(Query),"INSERT INTO `OBJETOS_EQUIPADOS` (`PLAYER`,`OBJETO`,`OffsetX`,`OffsetY`,`OffsetZ`,`RotX`,`RotY`,`RotZ`,\
						`ScaleX`,`ScaleY`,`ScaleZ`) VALUES('%d', '%d','%f', '%f', '%f', '%f', '%f', '%f', '%f', '%f', '%f')",\
					ACCOUNT_INFO[playerid][ac_ID],OBJETO_EDITAR[playerid],
					fOffsetX,fOffsetY,fOffsetZ,
					fRotX,fRotY,fRotZ,
					fScaleX,fScaleY,fScaleZ);
					db_query(_DB_, Query);
					GameTextForPlayer( playerid, "~n~~n~~n~~n~~w~Objeto ~g~~h~Guardado.", 5000, 4 );
				}
				RemovePlayerAttachedObject(playerid, OBJETO_BONE_ID[playerid]);
				SendClientMessage(playerid,-1, "* Equipate la prenda");
			}
		}	
		
 	}
	if(index != PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT]) return 0;
	
    if(response)
    {
        if(fScaleX >= 1.5 || fScaleY >= 1.5 || fScaleZ >= 1.5)
	    {
	        SendClientMessage(playerid, -1, "{00FF80}El tamaño del accesorio es demasiado grande.");
			
			RemovePlayerAttachedObject(playerid, PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT]);
			if(PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ATTACHED])
			{
				SetPlayerAttachedObject
				(
					playerid, 
					PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT],
					PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_MODELID],
					PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_BONE],
					PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_OFFSET_X],
					PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_OFFSET_Y],
					PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_OFFSET_Z],
					PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ROT_X],
					PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ROT_Y],
					PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ROT_Z],
					PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_SCALE_X],
					PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_SCALE_Y],
					PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_SCALE_Z],
					PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_COLOR_1],
					PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_COLOR_2]
				);
			}
			return 1;
	    }
        if((fOffsetX >= 0.6 || -0.6 >= fOffsetX) || (fOffsetY >= 0.6 || -0.6 >= fOffsetY) || (fOffsetZ >= 0.6 || -0.6 >= fOffsetZ))
        {
            SendClientMessage(playerid, -1, "{00FF80}La posición del objeto está demasiado lejos de ti.");
			
			RemovePlayerAttachedObject(playerid, PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT]);
			if(PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ATTACHED])
			{
				SetPlayerAttachedObject
				(
					playerid, 
					PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT],
					PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_MODELID],
					PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_BONE],
					PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_OFFSET_X],
					PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_OFFSET_Y],
					PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_OFFSET_Z],
					PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ROT_X],
					PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ROT_Y],
					PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ROT_Z],
					PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_SCALE_X],
					PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_SCALE_Y],
					PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_SCALE_Z],
					PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_COLOR_1],
					PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_COLOR_2]
				);
			}
			return 1;
        }
        
		PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_OFFSET_X] = fOffsetX;
		PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_OFFSET_Y] = fOffsetY;
		PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_OFFSET_Z] = fOffsetZ;
		PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ROT_X] = fRotX;
		PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ROT_Y] = fRotY;
		PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ROT_Z] = fRotZ;
		PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_SCALE_X] = fScaleX;
		PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_SCALE_Y] = fScaleY;
		PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_SCALE_Z] = fScaleZ;
		
		if(!PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ATTACHED]) PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ATTACHED] = true;
		
        SendClientMessageEx(playerid, -1, "{E6F8E0}Accesorio {98d16c}'%s' {E6F8E0}actualizado.", PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_NAME]);
    }
    else
    {
        RemovePlayerAttachedObject(playerid, PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT]);
		if(PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ATTACHED])
		{
			SetPlayerAttachedObject
			(
				playerid, 
				PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT],
				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_MODELID],
				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_BONE],
				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_OFFSET_X],
				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_OFFSET_Y],
				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_OFFSET_Z],
				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ROT_X],
				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ROT_Y],
				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ROT_Z],
				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_SCALE_X],
				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_SCALE_Y],
				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_SCALE_Z],
				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_COLOR_1],
				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_COLOR_2]
			);
		}
		
        SendClientMessage(playerid, -1, "{E6F8E0}Has cancelado la edición.");
    }
    return 1;
}

ConnectDatabase()
{
	Database = db_open("SERVER/Super_RolePlay.db");
	_DB_ = db_open("SERVER/InfoServer.db");
	DBCASA = db_open(ObjetosCasa);
	if(Database == DB:0)
	{
		print("\n----------------------------------");
		print("  ¡ATENCION! No hay conexión con la base de datos.\n");
		print("----------------------------------\n");
		SendRconCommand("exit");
	}
	else
	{
		print("La conexión con la base de datos funciona.");
		db_query(Database, 
		"\
			PRAGMA FOREIGN_KEYS = ON;\
			UPDATE `CUENTA` SET `CONNECTED` = '0', PLAYERID = '-1';\
		");
	}
	new DB_Query[50],DBResult:Result,DBResult:Resulta;
	format(DB_Query, sizeof DB_Query, "SELECT * FROM CREW");
	Result = db_query(Database,DB_Query);
	for(new i=0; i < db_num_rows(Result); i++)
	{
		new ida=db_get_field_assoc_int(Result,"ID");
		format(DB_Query, sizeof DB_Query, "SELECT * FROM CREW_VARS WHERE ='%d';",ida);
		Resulta = db_query(Database,DB_Query);
		if(!db_num_rows(Resulta))
		{
			format(DB_Query, sizeof DB_Query, "INSERT INTO CREW_VARS (CREW_ID) VALUES ('%d')",ida);
			db_query(Database,DB_Query);
		}
		db_next_row(Result);
	}
	db_free_result(Result);

	CargarActores();
	CargarPersonajes();
	CargarNegocios();
	CargarCasasVIP();
	CargarZonas();
	CargarRadares();
	LoadInfoFacciones();
	CargarApartamentos();
 
	CargarMueblesCasaFaccion();
	
	CargarMapeosAfuerAcasa();
	CargarCasaFacciones();
	CargarGrafitis();
	//SetTimer("UpdateConquistaGrafitis",1000,true);
	return 1;
}
funcion CargarGrafitis()
{
	new DBResult:qresult,did = -1, count = 0,loaded;
	new Text[50];
    qresult = db_query(Database,  "SELECT * FROM `GRAFITIS`");
    count = db_num_rows(qresult);
    if(count == 0) return print("NO SE CARGO NINGUN GRAFITI");
    for(new a=0;a<count;a++)
    {
    	did = db_get_field_assoc_int(qresult, "ID");

    	did = Iter_Free(DisputaGrafitis);


    	GRAFITI[did][GRAFITI_ID] = did;
        GRAFITI[did][PosX] = db_get_field_assoc_float(qresult, "X");
        GRAFITI[did][PosY] = db_get_field_assoc_float(qresult, "Y");
        GRAFITI[did][PosZ] = db_get_field_assoc_float(qresult, "Z");

        GRAFITI[did][PosRx] = db_get_field_assoc_float(qresult, "Rx");
        GRAFITI[did][PosRy] = db_get_field_assoc_float(qresult, "Ry");
        GRAFITI[did][PosRz] = db_get_field_assoc_float(qresult, "Rz");

        GRAFITI[did][DIAS] = db_get_field_assoc_int(qresult, "DIAS");
		GRAFITI[did][HORAS] = db_get_field_assoc_int(qresult, "HORAS");
		GRAFITI[did][MINUTOS] = db_get_field_assoc_int(qresult, "MINUTOS");
		GRAFITI[did][SEGUNDOS] = db_get_field_assoc_int(qresult, "MINUTOS");

		GRAFITI[did][CREW_ID] = db_get_field_assoc_int(qresult, "CREWID");
		GRAFITI[did][CONQUISTADO] = db_get_field_assoc_int(qresult, "CONQUISTADO");
 	
 		db_get_field_assoc(qresult, "NAME",GRAFITI[a][NOMBRE], 50);

 		format(Text,sizeof(Text),"{%06x}%s",GetColorCrewId(GRAFITI[did][CREW_ID]) >>> 8,GetNameBandaId(GRAFITI[did][CREW_ID]));

		GRAFITI[did][STATUS]=0;
		GRAFITI[did][CAPTURADO_POR]=0;
		GRAFITI[did][CAPTURANDO]=false;
		GRAFITI[did][CAPTURADO_POR_PLAYER] = -1;

		if(GRAFITI[did][CREW_ID]==0)
		{
	 		GRAFITI[did][OBJETO] = CreateDynamicObject(19482,GRAFITI[did][PosX],GRAFITI[did][PosY],GRAFITI[did][PosZ],GRAFITI[did][PosRx],GRAFITI[did][PosRy],GRAFITI[did][PosRz]);
	 		SetDynamicObjectMaterialText(GRAFITI[did][OBJETO], 0, "Grafiti", OBJECT_MATERIAL_SIZE_512x512, "Arial", 80, 1, -1, 0, 1);
	 	}
	 	else
	 	{
	 		GRAFITI[did][OBJETO] = CreateDynamicObject(19482,GRAFITI[did][PosX],GRAFITI[did][PosY],GRAFITI[did][PosZ],GRAFITI[did][PosRx],GRAFITI[did][PosRy],GRAFITI[did][PosRz]);
	 		SetDynamicObjectMaterialText(GRAFITI[did][OBJETO], 0, Text, OBJECT_MATERIAL_SIZE_512x512, "Arial", 80, 1, -1, 0, 1);
	 	}
	 	//printf("%s",GetNameBandaId(GRAFITI[did][CREW_ID]));
 		Iter_Add(DisputaGrafitis, did);
        loaded++;
    	db_next_row(qresult);
    }
    /*for(new i=0; i <= MAX_CREWS; i++)
    {
    	GRAFITISTATUS[ i ] [ ID_CONQUISTA ]=false;
    }*/
    db_free_result(qresult);
    printf("Se cargaron: %d grafitis de bandas.", loaded);
	return 1;
}
GetColorCrewId(ida_)
{
	new clor,Query[100],DBResult:Result;
	format(Query, sizeof(Query), "SELECT COLOR FROM `CREW` WHERE `ID` = '%d';",ida_);
	Result = db_query(Database, Query);
	if(db_num_rows(Result))
	{
		clor=db_get_field_assoc_int(Result, "COLOR");
	}
	db_free_result(Result);
	return clor;
}
GetNameBandaId(ida_)
{
	new name_[30],Query[100],DBResult:Result;
	format(Query, sizeof(Query), "SELECT NAME FROM `CREW` WHERE `ID` = '%d';",ida_);
	Result = db_query(Database, Query);
	if(db_num_rows(Result))
	{
		db_get_field_assoc(Result, "NAME",name_, 256);
	}
	else
	{
		name_="Crew removed";
	}
	db_free_result(Result);
	return name_;
}
/*funcion UpdateConquistaGrafitis()
{
	new DBResult:qresult,did,count = 0,status;
    qresult = db_query(Database,  "SELECT * FROM `GRAFITIS`");
    count = db_num_rows(qresult);
    for(new a=0;a<count;a++)
    {
    	did = db_get_field_assoc_int(qresult,"ID");
        GRAFITI[did][DIAS] = db_get_field_assoc_int(qresult, "DIAS");
		GRAFITI[did][HORAS] = db_get_field_assoc_int(qresult, "HORAS");
		GRAFITI[did][MINUTOS] = db_get_field_assoc_int(qresult, "MINUTOS");
		GRAFITI[did][SEGUNDOS] = db_get_field_assoc_int(qresult, "SEGUNDOS");
		status = db_get_field_assoc_int(qresult, "CONQUISTADO");
		if(status == 0)
		{
			GRAFITI[did][MINUTOS]--;
			if(GRAFITI[did][MINUTOS] == 0)
			{
				if(GRAFITI[did][HORAS] < 1 && GRAFITI[did][DIAS] < 1)
				{
					GRAFITI[did][MINUTOS]=60;
					GRAFITI[did][HORAS]--;
					if(GRAFITI[did][HORAS] == 0)
					{
						GRAFITI[did][HORAS]=24;
						GRAFITI[did][DIAS]--;
						if(GRAFITI[did][DIAS]== 0 && GRAFITI[did][HORAS]== 0 && GRAFITI[did][MINUTOS])
						{
							
						}
					}
				}
			}

			GRAFITI[did][SEGUNDOS]--;
		    if(GRAFITI[did][HORAS] < 1 && GRAFITI[did][DIAS] >= 0) 
		    {
		    	GRAFITI[did][DIAS]--;
		    	GRAFITI[did][HORAS] = 24;
		    }
		    
	    	if(GRAFITI[did][MINUTOS] < 1 && GRAFITI[did][HORAS] >= 0) 
	    	{
	    		GRAFITI[did][HORAS]--;
	    		GRAFITI[did][MINUTOS] = 60;
	    	}
	    	
	    	if(GRAFITI[did][SEGUNDOS] < 1 && GRAFITI[did][MINUTOS] >= 0) 
	    	{
	    		GRAFITI[did][MINUTOS]--;
	    		GRAFITI[did][SEGUNDOS] = 60;
	    	}
	    	
		    if(GRAFITI[did][DIAS] <= 0  && GRAFITI[did][HORAS] <= 0 && GRAFITI[did][MINUTOS] <= 0)
			{
				UnLockGrafiti(did);
			}
			new cquery[150];
			format(cquery, sizeof(cquery), "UPDATE `GRAFITIS` SET `DIAS` = '%d',`HORAS` = '%d',`MINUTOS` = '%d',`SEGUNDOS` = '%d' WHERE `ID` = '%d';",
				GRAFITI[did][DIAS],GRAFITI[did][HORAS],GRAFITI[did][MINUTOS],GRAFITI[did][SEGUNDOS],did);
			db_query(Database, cquery);
		}
    	db_next_row(qresult);
    }
    db_free_result(qresult);
	return 1;
}
funcion UnLockGrafiti(id)
{
	GRAFITI[id][CONQUISTADO]=1;
	new cquery[150];
	format(cquery, sizeof(cquery), "UPDATE `GRAFITIS` SET `CONQUISTADO` = '1',`DIAS` = '0',`HORAS` = '0',`MINUTOS` = '0',`SEGUNDOS` = '0' WHERE `ID` = '%d';",id);
	db_query(Database, cquery);
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++) 					
	{
		if(IsPlayerConnected(i))
		{
			format(cquery,sizeof(cquery),"El grafiti en ~y~%s ~w~ah sido desbloqueado",GetNameGrafiti(id));
			MensajesAyuda(i,cquery);
		}
	}
	return 1;
}*/

funcion CargarCasaFacciones()
{
	new DBResult:qresult,did,id = -1, count = 0, label[400],loaded;
    qresult = db_query(_DB_,  "SELECT * FROM `CASASFACCIONES`");
    count = db_num_rows(qresult);
    if(count == 0) return print("NO SE CARGO NINGUNA CASA DE FACCIONES");
    for(new a=0;a<count;a++)
    {
    	id = Iter_Free(CasaFacciones);

    	did = db_get_field_assoc_int(qresult, "ID");
    	CASAFACCION[did][FACCIONID]= did;
        CASAFACCION[did][PosX] = db_get_field_assoc_float(qresult, "X");
        CASAFACCION[did][PosY] = db_get_field_assoc_float(qresult, "Y");
        CASAFACCION[did][PosZ] = db_get_field_assoc_float(qresult, "Z");

        CASAFACCION[did][InX] = db_get_field_assoc_float(qresult, "InX");
        CASAFACCION[did][InY] = db_get_field_assoc_float(qresult, "InY");
        CASAFACCION[did][InZ] = db_get_field_assoc_float(qresult, "InZ");

        CASAFACCION[did][INTERIOR] = db_get_field_assoc_int(qresult, "INTERIOR");
		CASAFACCION[did][LOCKTYPE] = db_get_field_assoc_int(qresult, "LOCKTYPE");
        format(label, sizeof(label), "(%d)\n\n{FFFFFF}Casa de la faccion\n\n{FFFF00}%s ",did,GetNameFaccionID(did));
        CASAFACCION[did][CasaFaccionPickup] = CreateDynamicPickup(19524, 1, CASAFACCION[did][PosX],CASAFACCION[did][PosY],CASAFACCION[did][PosZ]);
				
		CASAFACCION[did][CasaFaccionLabel] = CreateDynamic3DTextLabel(label, 0xFFFFFFFF, CASAFACCION[did][PosX], CASAFACCION[did][PosY], CASAFACCION[did][PosZ]+0.35, 15.0, .testlos = 1);

        loaded++;
        Iter_Add(CasaFacciones, id);
    	db_next_row(qresult);
    }
    db_free_result(qresult);
    printf("Se cargaron: %d casas de facciones.", loaded);
	return 1;
}
funcion CargarRadares()
{
	new id2,DBResult:qresult,loaded,count;
	qresult = db_query(_DB_,  "SELECT * FROM `RADAR`");
    count = db_num_rows(qresult);
    if(count == 0) return print("* No se cargo ningun radar.");
    for(new a=0;a<count;a++)
    {
    	
    	/**/
    	//id2 = Iter_Free(Radares);
    	id2 = db_get_field_assoc_int(qresult, "ID");
    	
		RADARESDEVELOCIDAD[id2][SPEEDCHECK] = db_get_field_assoc_int(qresult, "SPEED");
		RADARESDEVELOCIDAD[id2][PosX] = db_get_field_assoc_float(qresult, "X");
        RADARESDEVELOCIDAD[id2][PosY] = db_get_field_assoc_float(qresult, "Y");
        RADARESDEVELOCIDAD[id2][PosZ] = db_get_field_assoc_float(qresult, "Z");
        RADARESDEVELOCIDAD[id2][RPosX] = db_get_field_assoc_float(qresult, "RX");
        RADARESDEVELOCIDAD[id2][RPosY] = db_get_field_assoc_float(qresult, "RY");
        RADARESDEVELOCIDAD[id2][RPosZ] = db_get_field_assoc_float(qresult, "RZ");
    	/**/
        RADARESDEVELOCIDAD[id2][OBJETOID] = CreateDynamicObject(18880,RADARESDEVELOCIDAD[id2][PosX],RADARESDEVELOCIDAD[id2][PosY],RADARESDEVELOCIDAD[id2][PosZ],
        	RADARESDEVELOCIDAD[id2][RPosX],RADARESDEVELOCIDAD[id2][RPosY],RADARESDEVELOCIDAD[id2][RPosZ],0);
        new label[256];
		format(label, sizeof(label), "Camara de velocidad\n\nVelocidad maxima: (%d) Km/H",RADARESDEVELOCIDAD[id2][SPEEDCHECK]);
        RADARESDEVELOCIDAD[id2][LABEL] = CreateDynamic3DTextLabel(label, 0x2EFE2E90, RADARESDEVELOCIDAD[id2][PosX],RADARESDEVELOCIDAD[id2][PosY],RADARESDEVELOCIDAD[id2][PosZ]+3.0, 80.0);
    	/**/
   		loaded++;
        Iter_Add(Radares, id2);

    	db_next_row(qresult);
    }
    db_free_result(qresult);
    printf("Se cargaron: %d radares.", loaded);
    return true;
}
funcion CargarApartamentos()
{
	new DBResult:qresult,id = -1, count = 0, label[400],loaded,casa_type[30];
    new TEXTURAPARED,TEXTURAPISO,TEXTURATECHO,TEXTURAPUERTA,TEXTURACAMA,TEXTURACOCINA,TEXTURAARMARIO,TEXTURAEQUIPO,TEXTURAESTANTERIA;
    qresult = db_query(_DB_,  "SELECT * FROM `APARTAMENTOS`");
    count = db_num_rows(qresult);
    if(count == 0) return print("Error: No se cargo ningun apartamento.");
    for(new a=0;a<count;a++)
    {
        id = Iter_Free(Apartamentos);
        APARTAMENTO[a][CasaDuenoID] = db_get_field_assoc_int(qresult, "PLAYER");
        if(APARTAMENTO[a][CasaDuenoID] != -1)
        {
   			format(APARTAMENTO[a][CasaDueno],24,"%s",GetNameCuentaID(APARTAMENTO[a][CasaDuenoID]));
   		}
   		
    	APARTAMENTO[a][PRECIO] = db_get_field_assoc_int(qresult, "PRECIO");
    	APARTAMENTO[a][CasaID] = db_get_field_assoc_int(qresult, "ID");
    	APARTAMENTO[a][Lock] = db_get_field_assoc_int(qresult, "CANDADO");
    	APARTAMENTO[a][ENVENTA] = db_get_field_assoc_int(qresult, "ENVENTA");
    	APARTAMENTO[a][TIPOMONEDA] = db_get_field_assoc_int(qresult, "TIPOMONEDA");
        APARTAMENTO[a][CasaX] = db_get_field_assoc_float(qresult, "X");
        APARTAMENTO[a][CasaY] = db_get_field_assoc_float(qresult, "Y");
        APARTAMENTO[a][CasaZ] = db_get_field_assoc_float(qresult, "Z");
        APARTAMENTO[a][INTERIOR] = db_get_field_assoc_int(qresult, "INTERIOR");

        TEXTURAPARED = db_get_field_assoc_int(qresult, "TEXTURAPARED");
        TEXTURAPISO = db_get_field_assoc_int(qresult, "TEXTURAPISO");
        TEXTURATECHO = db_get_field_assoc_int(qresult, "TEXTURATECHO");
        TEXTURAPUERTA = db_get_field_assoc_int(qresult, "TEXTURAPUERTA");
        TEXTURACAMA = db_get_field_assoc_int(qresult, "TEXTURACAMA");
 
        TEXTURACOCINA = db_get_field_assoc_int(qresult, "TEXTURACOCINA");
        TEXTURAARMARIO = db_get_field_assoc_int(qresult, "TEXTURAARMARIO");	
        TEXTURAEQUIPO = db_get_field_assoc_int(qresult, "TEXTURAEQUIPO");
        TEXTURAESTANTERIA = db_get_field_assoc_int(qresult, "TEXTURAESTANTERIA");	
        CrearInteriorParaApartamento(a,APARTAMENTO[a][INTERIOR],
        TEXTURAPARED,TEXTURAPISO,TEXTURATECHO,TEXTURAPUERTA,TEXTURACAMA,TEXTURACOCINA,TEXTURAARMARIO,TEXTURAEQUIPO,TEXTURAESTANTERIA);
        
        APARTAMENTO[a][TYPE_HOUSE] = db_get_field_assoc_int(qresult, "TYPE_HOUSE");
        CargarMueblesApartamento(a);
        switch(APARTAMENTO[a][TYPE_HOUSE])
        {
        	case 1:
        	{
        		format(casa_type, sizeof(casa_type), "Apartamento");
        	}
        	case 2:
        	{
        		format(casa_type, sizeof(casa_type), "Casa");
        	}
        }
        switch(APARTAMENTO[a][ENVENTA])
        {
        	case 0:
        	{
        		format(label, sizeof(label), "{FFFFFF}%s en venta\n\nCosto: {FFFF00}%s ",casa_type,number_format_thousand(APARTAMENTO[a][PRECIO]));
        		APARTAMENTO[a][CasaPickup] = CreateDynamicPickup(1273, 1, APARTAMENTO[a][CasaX],APARTAMENTO[a][CasaY],APARTAMENTO[a][CasaZ]);
				
        	}
        	case 1:
        	{
				format(label, sizeof(label), "{FFFFFF}%s de:\n {FFFF00}%s",casa_type,APARTAMENTO[a][CasaDueno]);
				APARTAMENTO[a][CasaPickup] = CreateDynamicPickup(19522, 1, APARTAMENTO[a][CasaX],APARTAMENTO[a][CasaY],APARTAMENTO[a][CasaZ]);
        	}
        }
		APARTAMENTO[a][CasaLabel] = CreateDynamic3DTextLabel(label, 0xFFFFFFFF, APARTAMENTO[a][CasaX], APARTAMENTO[a][CasaY], APARTAMENTO[a][CasaZ]+0.35, 15.0, .testlos = 1);
		Cargar_Estanteria_Depa(a,APARTAMENTO[a][INTERIOR]);
        loaded++;
        Iter_Add(Apartamentos, id);

    	db_next_row(qresult);
    }
    db_free_result(qresult);
 
    TeveDepa=CreateDynamicObject(19786, -241.29192, 2328.24658, 351.72147,   0.00000, 0.00000, 0.00000);
    printf("Se cargaron: %d apartamentos.", loaded);
    return true;
}

Cargar_Estanteria_Depa(karenmivida,interior)
{
	new DB_Query[100],DBResult:Result,id=karenmivida,itemda_;
	format(DB_Query,sizeof(DB_Query),"SELECT * FROM ESTANTERIA_DEPA WHERE APARTAMENTOID='%d';",karenmivida);
	Result = db_query(_DB_, DB_Query);
	new empeza=0;
	for(new a=0;a<db_num_rows(Result);a++)
	{
		empeza++;
		ESTANTERIA_DEPA[empeza][ id ][CASAID] = karenmivida;
		itemda_ = db_get_field_assoc_int(Result, "ITEM");
		ESTANTERIA_DEPA[empeza][ id ][ARMA] = itemda_;
		ESTANTERIA_DEPA[empeza][ id ][AMMO] = db_get_field_assoc_int(Result, "ESTADO");
		switch(interior)
		{
			case 1:
			{
				switch(empeza)
				{
					case 1: ESTANTERIA_DEPA[empeza][ id ][OBJETO] = CreateDynamicObject(INVENTARIOPLAYER[ itemda_ ][OBJETO],-245.3893, 2327.8826, 352.0574,GetRotX_EstanteriaDepa(itemda_),GetRotY_EstanteriaDepa(itemda_),GetRotZ_EstanteriaDepa(itemda_),ESTANTERIA_DEPA[empeza][ id ][CASAID]);
					case 2: ESTANTERIA_DEPA[empeza][ id ][OBJETO] = CreateDynamicObject(INVENTARIOPLAYER[ itemda_ ][OBJETO],-244.5478, 2327.8503, 352.0574,GetRotX_EstanteriaDepa(itemda_), GetRotY_EstanteriaDepa(itemda_),GetRotZ_EstanteriaDepa(itemda_),ESTANTERIA_DEPA[empeza][ id ][CASAID]);
					case 3: ESTANTERIA_DEPA[empeza][ id ][OBJETO] = CreateDynamicObject(INVENTARIOPLAYER[ itemda_ ][OBJETO],-245.3893, 2327.8826, 351.7174,GetRotX_EstanteriaDepa(itemda_), GetRotY_EstanteriaDepa(itemda_),GetRotZ_EstanteriaDepa(itemda_),ESTANTERIA_DEPA[empeza][ id ][CASAID]);
					case 4: ESTANTERIA_DEPA[empeza][ id ][OBJETO] = CreateDynamicObject(INVENTARIOPLAYER[ itemda_ ][OBJETO],-244.5478, 2327.8503, 351.7174,GetRotX_EstanteriaDepa(itemda_),GetRotY_EstanteriaDepa(itemda_),GetRotZ_EstanteriaDepa(itemda_),ESTANTERIA_DEPA[empeza][ id ][CASAID]);
					case 5: ESTANTERIA_DEPA[empeza][ id ][OBJETO] = CreateDynamicObject(INVENTARIOPLAYER[ itemda_ ][OBJETO],-245.3893, 2327.8826, 351.3574,GetRotX_EstanteriaDepa(itemda_),GetRotY_EstanteriaDepa(itemda_),GetRotZ_EstanteriaDepa(itemda_),ESTANTERIA_DEPA[empeza][ id ][CASAID]);
					case 6: ESTANTERIA_DEPA[empeza][ id ][OBJETO] = CreateDynamicObject(INVENTARIOPLAYER[ itemda_ ][OBJETO],-244.5478, 2327.8503, 351.3974,GetRotX_EstanteriaDepa(itemda_),GetRotY_EstanteriaDepa(itemda_),GetRotZ_EstanteriaDepa(itemda_),ESTANTERIA_DEPA[empeza][ id ][CASAID]);
					case 7: ESTANTERIA_DEPA[empeza][ id ][OBJETO] = CreateDynamicObject(INVENTARIOPLAYER[ itemda_ ][OBJETO],-245.3893, 2327.8826, 350.9974,GetRotX_EstanteriaDepa(itemda_),GetRotY_EstanteriaDepa(itemda_),GetRotZ_EstanteriaDepa(itemda_),ESTANTERIA_DEPA[empeza][ id ][CASAID]);
					case 8: ESTANTERIA_DEPA[empeza][ id ][OBJETO] = CreateDynamicObject(INVENTARIOPLAYER[ itemda_ ][OBJETO],-244.5478, 2327.8503, 351.0174,GetRotX_EstanteriaDepa(itemda_),GetRotY_EstanteriaDepa(itemda_),GetRotZ_EstanteriaDepa(itemda_),ESTANTERIA_DEPA[empeza][ id ][CASAID]);
					case 9: ESTANTERIA_DEPA[empeza][ id ][OBJETO] = CreateDynamicObject(INVENTARIOPLAYER[ itemda_ ][OBJETO],-245.3893, 2327.8826, 350.6374,GetRotX_EstanteriaDepa(itemda_),GetRotY_EstanteriaDepa(itemda_),GetRotZ_EstanteriaDepa(itemda_),ESTANTERIA_DEPA[empeza][ id ][CASAID]);
					case 10: ESTANTERIA_DEPA[empeza][ id ][OBJETO] = CreateDynamicObject(INVENTARIOPLAYER[ itemda_ ][OBJETO],-244.5478, 2327.8503, 350.6574,GetRotX_EstanteriaDepa(itemda_),GetRotY_EstanteriaDepa(itemda_),GetRotZ_EstanteriaDepa(itemda_),ESTANTERIA_DEPA[empeza][ id ][CASAID]);
					case 11: ESTANTERIA_DEPA[empeza][ id ][OBJETO] = CreateDynamicObject(INVENTARIOPLAYER[ itemda_ ][OBJETO],-245.3893, 2327.8826, 350.2974,GetRotX_EstanteriaDepa(itemda_),GetRotY_EstanteriaDepa(itemda_),GetRotZ_EstanteriaDepa(itemda_),ESTANTERIA_DEPA[empeza][ id ][CASAID]);
					case 12: ESTANTERIA_DEPA[empeza][ id ][OBJETO] = CreateDynamicObject(INVENTARIOPLAYER[ itemda_ ][OBJETO],-244.5478, 2327.8503, 350.3374,GetRotX_EstanteriaDepa(itemda_),GetRotY_EstanteriaDepa(itemda_),GetRotZ_EstanteriaDepa(itemda_),ESTANTERIA_DEPA[empeza][ id ][CASAID]);
				}
			}
			case 2:
			{
				switch(empeza)
				{
					case 1: ESTANTERIA_DEPA[empeza][ id ][OBJETO] = CreateDynamicObject(INVENTARIOPLAYER[ itemda_ ][OBJETO],1890.0254, -26.3156, 640.4746,GetRotX_EstanteriaDepa(itemda_),GetRotY_EstanteriaDepa(itemda_),GetRotZ_EstanteriaDepa(itemda_),ESTANTERIA_DEPA[empeza][ id ][CASAID]);
					case 2: ESTANTERIA_DEPA[empeza][ id ][OBJETO] = CreateDynamicObject(INVENTARIOPLAYER[ itemda_ ][OBJETO],1889.1639, -26.3347, 640.4746,GetRotX_EstanteriaDepa(itemda_), GetRotY_EstanteriaDepa(itemda_),GetRotZ_EstanteriaDepa(itemda_),ESTANTERIA_DEPA[empeza][ id ][CASAID]);
					case 3: ESTANTERIA_DEPA[empeza][ id ][OBJETO] = CreateDynamicObject(INVENTARIOPLAYER[ itemda_ ][OBJETO],1890.0254, -26.3156, 640.1346,GetRotX_EstanteriaDepa(itemda_), GetRotY_EstanteriaDepa(itemda_),GetRotZ_EstanteriaDepa(itemda_),ESTANTERIA_DEPA[empeza][ id ][CASAID]);
					case 4: ESTANTERIA_DEPA[empeza][ id ][OBJETO] = CreateDynamicObject(INVENTARIOPLAYER[ itemda_ ][OBJETO],1889.1682, -26.3152, 640.1546,GetRotX_EstanteriaDepa(itemda_),GetRotY_EstanteriaDepa(itemda_),GetRotZ_EstanteriaDepa(itemda_),ESTANTERIA_DEPA[empeza][ id ][CASAID]);
					case 5: ESTANTERIA_DEPA[empeza][ id ][OBJETO] = CreateDynamicObject(INVENTARIOPLAYER[ itemda_ ][OBJETO],1890.0254, -26.3156, 639.7746,GetRotX_EstanteriaDepa(itemda_),GetRotY_EstanteriaDepa(itemda_),GetRotZ_EstanteriaDepa(itemda_),ESTANTERIA_DEPA[empeza][ id ][CASAID]);
					case 6: ESTANTERIA_DEPA[empeza][ id ][OBJETO] = CreateDynamicObject(INVENTARIOPLAYER[ itemda_ ][OBJETO],1889.1682, -26.3152, 639.7946,GetRotX_EstanteriaDepa(itemda_),GetRotY_EstanteriaDepa(itemda_),GetRotZ_EstanteriaDepa(itemda_),ESTANTERIA_DEPA[empeza][ id ][CASAID]);
					case 7: ESTANTERIA_DEPA[empeza][ id ][OBJETO] = CreateDynamicObject(INVENTARIOPLAYER[ itemda_ ][OBJETO],1890.0254, -26.3156, 639.4346,GetRotX_EstanteriaDepa(itemda_),GetRotY_EstanteriaDepa(itemda_),GetRotZ_EstanteriaDepa(itemda_),ESTANTERIA_DEPA[empeza][ id ][CASAID]);
					case 8: ESTANTERIA_DEPA[empeza][ id ][OBJETO] = CreateDynamicObject(INVENTARIOPLAYER[ itemda_ ][OBJETO],1889.1682, -26.3152, 639.4346,GetRotX_EstanteriaDepa(itemda_),GetRotY_EstanteriaDepa(itemda_),GetRotZ_EstanteriaDepa(itemda_),ESTANTERIA_DEPA[empeza][ id ][CASAID]);
					case 9: ESTANTERIA_DEPA[empeza][ id ][OBJETO] = CreateDynamicObject(INVENTARIOPLAYER[ itemda_ ][OBJETO],1890.0254, -26.3156, 639.0746,GetRotX_EstanteriaDepa(itemda_),GetRotY_EstanteriaDepa(itemda_),GetRotZ_EstanteriaDepa(itemda_),ESTANTERIA_DEPA[empeza][ id ][CASAID]);
					case 10: ESTANTERIA_DEPA[empeza][ id ][OBJETO] = CreateDynamicObject(INVENTARIOPLAYER[ itemda_ ][OBJETO],1889.1682, -26.3152, 639.0946,GetRotX_EstanteriaDepa(itemda_),GetRotY_EstanteriaDepa(itemda_),GetRotZ_EstanteriaDepa(itemda_),ESTANTERIA_DEPA[empeza][ id ][CASAID]);
					case 11: ESTANTERIA_DEPA[empeza][ id ][OBJETO] = CreateDynamicObject(INVENTARIOPLAYER[ itemda_ ][OBJETO],1890.0254, -26.3156, 638.7146,GetRotX_EstanteriaDepa(itemda_),GetRotY_EstanteriaDepa(itemda_),GetRotZ_EstanteriaDepa(itemda_),ESTANTERIA_DEPA[empeza][ id ][CASAID]);
					case 12: ESTANTERIA_DEPA[empeza][ id ][OBJETO] = CreateDynamicObject(INVENTARIOPLAYER[ itemda_ ][OBJETO],1889.1682, -26.3152, 638.7346,GetRotX_EstanteriaDepa(itemda_),GetRotY_EstanteriaDepa(itemda_),GetRotZ_EstanteriaDepa(itemda_),ESTANTERIA_DEPA[empeza][ id ][CASAID]);
				}
			}
		}
		
		db_next_row(Result);
	}

	db_free_result(Result);
	return 1;
}

CrearInteriorParaApartamento(id, interiordid,TEXTURAPARED,TEXTURAPISO,TEXTURATECHO,TEXTURAPUERTA,TEXTURACAMA,TEXTURACOCINA,TEXTURAARMARIO,TEXTURAEQUIPO,TEXTURAESTANTERIA)
{
	
	switch(interiordid)
	{
		case 1:
		{
			//Paredes
			for(new i = 0; i < sizeof PAREDES_DEPART; i++)
			{
				switch(PAREDES_DEPART[i][INTERIORID])
				{
					case 1:
					{
						ObjetoDepartamento[ id ][ i ][Paredes] = CreateDynamicObject(PAREDES_DEPART[i][Model], PAREDES_DEPART[i][pX_],PAREDES_DEPART[i][pY_],PAREDES_DEPART[i][pZ_], PAREDES_DEPART[i][rX_],PAREDES_DEPART[i][rY_],PAREDES_DEPART[i][rZ_], id);
						SetDynamicObjectMaterial(ObjetoDepartamento[ id ][ i ][Paredes], 0, Get_Model_Textura(TEXTURAPARED),Get_Name_Textura_1(TEXTURAPARED),Get_Name_Textura_2(TEXTURAPARED), 0x00000000);
					}
				}
			}
			//Pisob
			for(new i = 0; i < sizeof PISO_DEPART; i++)
			{
				switch(PISO_DEPART[i][INTERIORID])
				{
					case 1:
					{
						ObjetoDepartamento[ id ][ i ][Piso] = CreateDynamicObject(PISO_DEPART[i][Model], PISO_DEPART[i][pX_],PISO_DEPART[i][pY_],PISO_DEPART[i][pZ_], PISO_DEPART[i][rX_],PISO_DEPART[i][rY_],PISO_DEPART[i][rZ_], id);
						SetDynamicObjectMaterial(ObjetoDepartamento[ id ][ i ][Piso], 0,Get_Model_Textura(TEXTURAPISO),Get_Name_Textura_1(TEXTURAPISO),Get_Name_Textura_2(TEXTURAPISO), 0x00000000);
					}
				}
			}
			//Techo
 			for(new i = 0; i < sizeof TECHO_DEPART; i++)
			{
				switch(TECHO_DEPART[i][INTERIORID])
				{
					case 1:
					{
						ObjetoDepartamento[ id ][ i ][Techo] = CreateDynamicObject(TECHO_DEPART[i][Model], TECHO_DEPART[i][pX_],TECHO_DEPART[i][pY_],TECHO_DEPART[i][pZ_], TECHO_DEPART[i][rX_],TECHO_DEPART[i][rY_],TECHO_DEPART[i][rZ_], id);
						SetDynamicObjectMaterial(ObjetoDepartamento[ id ][ i ][Techo], 0,Get_Model_Textura(TEXTURATECHO),Get_Name_Textura_1(TEXTURATECHO),Get_Name_Textura_2(TEXTURATECHO), 0x00000000);
					}
				}
			}
			//Puertas
 			for(new i = 0; i < sizeof PUERTA_DEPART; i++)
			{
				switch(PUERTA_DEPART[i][INTERIORID])
				{
					case 1:
					{
						ObjetoDepartamento[ id ][ i ][Puerta] = CreateDynamicObject(PUERTA_DEPART[i][Model], PUERTA_DEPART[i][pX_],PUERTA_DEPART[i][pY_],PUERTA_DEPART[i][pZ_], PUERTA_DEPART[i][rX_],PUERTA_DEPART[i][rY_],PUERTA_DEPART[i][rZ_], id);
						SetDynamicObjectMaterial(ObjetoDepartamento[ id ][ i ][Puerta], 1,Get_Model_Textura(TEXTURAPUERTA),Get_Name_Textura_1(TEXTURAPUERTA),Get_Name_Textura_2(TEXTURAPUERTA), 0x00000000);
					}
				}
			}
 			//Camas
 			for(new i = 0; i < sizeof CAMA_DEPART; i++)
			{
				switch(CAMA_DEPART[i][INTERIORID])
				{
					case 1:
					{
						ObjetoDepartamento[ id ][ i ][Cama] = CreateDynamicObject(CAMA_DEPART[i][Model], CAMA_DEPART[i][pX_],CAMA_DEPART[i][pY_],CAMA_DEPART[i][pZ_], CAMA_DEPART[i][rX_],CAMA_DEPART[i][rY_],CAMA_DEPART[i][rZ_], id);
						SetDynamicObjectMaterial(ObjetoDepartamento[ id ][ i ][Cama], 0,Get_Model_Textura(TEXTURACAMA),Get_Name_Textura_1(TEXTURACAMA),Get_Name_Textura_2(TEXTURACAMA), 0x00000000);
					}
				}
			}
 
			//Cocina
			for(new i = 0; i < sizeof COCINA_DEPART; i++)
			{
				switch(COCINA_DEPART[i][INTERIORID])
				{
					case 1:
					{
						ObjetoDepartamento[ id ][ i ][Cocina] = CreateDynamicObject(COCINA_DEPART[i][Model], COCINA_DEPART[i][pX_],COCINA_DEPART[i][pY_],COCINA_DEPART[i][pZ_], COCINA_DEPART[i][rX_],COCINA_DEPART[i][rY_],COCINA_DEPART[i][rZ_], id);
						SetDynamicObjectMaterial(ObjetoDepartamento[ id ][ i ][Cocina], 0, 10101, "2notherbuildsfe", "sl_vicbrikwall01", 0x00000000);
						SetDynamicObjectMaterial(ObjetoDepartamento[ id ][ i ][Cocina], 1, Get_Model_Textura(TEXTURACOCINA),Get_Name_Textura_1(TEXTURACOCINA),Get_Name_Textura_2(TEXTURACOCINA), 0x00000000);
					}
				}
			}
			//Armario
			for(new i = 0; i < sizeof ARMARIO_DEPART; i++)
			{
				switch(ARMARIO_DEPART[i][INTERIORID])
				{
					case 1:
					{
						ObjetoDepartamento[ id ][ i ][Armario] = CreateDynamicObject(ARMARIO_DEPART[i][Model], ARMARIO_DEPART[i][pX_],ARMARIO_DEPART[i][pY_],ARMARIO_DEPART[i][pZ_], ARMARIO_DEPART[i][rX_],ARMARIO_DEPART[i][rY_],ARMARIO_DEPART[i][rZ_], id);
						SetDynamicObjectMaterial(ObjetoDepartamento[ id ][ i ][Armario], 0, 10101, "2notherbuildsfe", "sl_vicbrikwall01", 0x00000000);
						SetDynamicObjectMaterial(ObjetoDepartamento[ id ][ i ][Armario], 1, Get_Model_Textura(TEXTURAARMARIO),Get_Name_Textura_1(TEXTURAARMARIO),Get_Name_Textura_2(TEXTURAARMARIO), 0x00000000);
					}
				}
			}
			// Equipo
			for(new i = 0; i < sizeof EQUIPO_DEPART; i++)
			{
				switch(EQUIPO_DEPART[i][INTERIORID])
				{
					case 1:
					{
						ObjetoDepartamento[ id ][ i ][Equipo] = CreateDynamicObject(EQUIPO_DEPART[i][Model], EQUIPO_DEPART[i][pX_],EQUIPO_DEPART[i][pY_],EQUIPO_DEPART[i][pZ_], EQUIPO_DEPART[i][rX_],EQUIPO_DEPART[i][rY_],EQUIPO_DEPART[i][rZ_], id);
						SetDynamicObjectMaterial(ObjetoDepartamento[ id ][ i ][Equipo], 5, Get_Model_Textura(TEXTURAEQUIPO),Get_Name_Textura_1(TEXTURAEQUIPO),Get_Name_Textura_2(TEXTURAEQUIPO), 0x00000000);
					}
				}
			}
			//Estanteria
			for(new i = 0; i < sizeof ESTANTERIA_DEPART; i++)
			{
				switch(ESTANTERIA_DEPART[i][INTERIORID])
				{
					case 1:
					{
						ObjetoDepartamento[ id ][ i ][Estanteria] = CreateDynamicObject(ESTANTERIA_DEPART[i][Model], ESTANTERIA_DEPART[i][pX_],ESTANTERIA_DEPART[i][pY_],ESTANTERIA_DEPART[i][pZ_], ESTANTERIA_DEPART[i][rX_],ESTANTERIA_DEPART[i][rY_],ESTANTERIA_DEPART[i][rZ_], id);
						SetDynamicObjectMaterial(ObjetoDepartamento[ id ][ i ][Estanteria], 1,Get_Model_Textura(TEXTURAESTANTERIA),Get_Name_Textura_1(TEXTURAESTANTERIA),Get_Name_Textura_2(TEXTURAESTANTERIA), 0x00000000);
					}
				}
			}
		}
		case 2://aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
		{
			for(new i = 0; i < sizeof PAREDES_DEPART; i++)
			{
				switch(PAREDES_DEPART[i][INTERIORID])
				{
					case 2:
					{
						ObjetoDepartamento[ id ][ i ][Paredes] = CreateDynamicObject(PAREDES_DEPART[i][Model], PAREDES_DEPART[i][pX_],PAREDES_DEPART[i][pY_],PAREDES_DEPART[i][pZ_], PAREDES_DEPART[i][rX_],PAREDES_DEPART[i][rY_],PAREDES_DEPART[i][rZ_], id);
						SetDynamicObjectMaterial(ObjetoDepartamento[ id ][ i ][Paredes], 0, Get_Model_Textura(TEXTURAPARED),Get_Name_Textura_1(TEXTURAPARED),Get_Name_Textura_2(TEXTURAPARED), 0x00000000);
					}
				}
			}
			//Pisob
			for(new i = 0; i < sizeof PISO_DEPART; i++)
			{
				switch(PISO_DEPART[i][INTERIORID])
				{
					case 2:
					{
						ObjetoDepartamento[ id ][ i ][Piso] = CreateDynamicObject(PISO_DEPART[i][Model], PISO_DEPART[i][pX_],PISO_DEPART[i][pY_],PISO_DEPART[i][pZ_], PISO_DEPART[i][rX_],PISO_DEPART[i][rY_],PISO_DEPART[i][rZ_], id);
						SetDynamicObjectMaterial(ObjetoDepartamento[ id ][ i ][Piso], 0,Get_Model_Textura(TEXTURAPISO),Get_Name_Textura_1(TEXTURAPISO),Get_Name_Textura_2(TEXTURAPISO), 0x00000000);
					}
				}
			}
			//Techo
 			for(new i = 0; i < sizeof TECHO_DEPART; i++)
			{
				switch(TECHO_DEPART[i][INTERIORID])
				{
					case 2:
					{
						ObjetoDepartamento[ id ][ i ][Techo] = CreateDynamicObject(TECHO_DEPART[i][Model], TECHO_DEPART[i][pX_],TECHO_DEPART[i][pY_],TECHO_DEPART[i][pZ_], TECHO_DEPART[i][rX_],TECHO_DEPART[i][rY_],TECHO_DEPART[i][rZ_], id);
						SetDynamicObjectMaterial(ObjetoDepartamento[ id ][ i ][Techo], 0,Get_Model_Textura(TEXTURATECHO),Get_Name_Textura_1(TEXTURATECHO),Get_Name_Textura_2(TEXTURATECHO), 0x00000000);
					}
				}
			}
			//Puertas
 			for(new i = 0; i < sizeof PUERTA_DEPART; i++)
			{
				switch(PUERTA_DEPART[i][INTERIORID])
				{
					case 2:
					{
						ObjetoDepartamento[ id ][ i ][Puerta] = CreateDynamicObject(PUERTA_DEPART[i][Model], PUERTA_DEPART[i][pX_],PUERTA_DEPART[i][pY_],PUERTA_DEPART[i][pZ_], PUERTA_DEPART[i][rX_],PUERTA_DEPART[i][rY_],PUERTA_DEPART[i][rZ_], id);
						SetDynamicObjectMaterial(ObjetoDepartamento[ id ][ i ][Puerta], 1,Get_Model_Textura(TEXTURAPUERTA),Get_Name_Textura_1(TEXTURAPUERTA),Get_Name_Textura_2(TEXTURAPUERTA), 0x00000000);
					}
				}
			}
 			//Camas
 			for(new i = 0; i < sizeof CAMA_DEPART; i++)
			{
				switch(CAMA_DEPART[i][INTERIORID])
				{
					case 2:
					{
						ObjetoDepartamento[ id ][ i ][Cama] = CreateDynamicObject(CAMA_DEPART[i][Model], CAMA_DEPART[i][pX_],CAMA_DEPART[i][pY_],CAMA_DEPART[i][pZ_], CAMA_DEPART[i][rX_],CAMA_DEPART[i][rY_],CAMA_DEPART[i][rZ_], id);
						SetDynamicObjectMaterial(ObjetoDepartamento[ id ][ i ][Cama], 0,Get_Model_Textura(TEXTURACAMA),Get_Name_Textura_1(TEXTURACAMA),Get_Name_Textura_2(TEXTURACAMA), 0x00000000);
					}
				}
			}
 
			//Cocina
			for(new i = 0; i < sizeof COCINA_DEPART; i++)
			{
				switch(COCINA_DEPART[i][INTERIORID])
				{
					case 2:
					{
						ObjetoDepartamento[ id ][ i ][Cocina] = CreateDynamicObject(COCINA_DEPART[i][Model], COCINA_DEPART[i][pX_],COCINA_DEPART[i][pY_],COCINA_DEPART[i][pZ_], COCINA_DEPART[i][rX_],COCINA_DEPART[i][rY_],COCINA_DEPART[i][rZ_], id);
						SetDynamicObjectMaterial(ObjetoDepartamento[ id ][ i ][Cocina], 0, 10101, "2notherbuildsfe", "sl_vicbrikwall01", 0x00000000);
						SetDynamicObjectMaterial(ObjetoDepartamento[ id ][ i ][Cocina], 1, Get_Model_Textura(TEXTURACOCINA),Get_Name_Textura_1(TEXTURACOCINA),Get_Name_Textura_2(TEXTURACOCINA), 0x00000000);
					}
				}
			}
			//Armario
			for(new i = 0; i < sizeof ARMARIO_DEPART; i++)
			{
				switch(ARMARIO_DEPART[i][INTERIORID])
				{
					case 2:
					{
						ObjetoDepartamento[ id ][ i ][Armario] = CreateDynamicObject(ARMARIO_DEPART[i][Model], ARMARIO_DEPART[i][pX_],ARMARIO_DEPART[i][pY_],ARMARIO_DEPART[i][pZ_], ARMARIO_DEPART[i][rX_],ARMARIO_DEPART[i][rY_],ARMARIO_DEPART[i][rZ_], id);
						SetDynamicObjectMaterial(ObjetoDepartamento[ id ][ i ][Armario], 0, 10101, "2notherbuildsfe", "sl_vicbrikwall01", 0x00000000);
						SetDynamicObjectMaterial(ObjetoDepartamento[ id ][ i ][Armario], 1, Get_Model_Textura(TEXTURAARMARIO),Get_Name_Textura_1(TEXTURAARMARIO),Get_Name_Textura_2(TEXTURAARMARIO), 0x00000000);
					}
				}
			}
			// Equipo
			for(new i = 0; i < sizeof EQUIPO_DEPART; i++)
			{
				switch(EQUIPO_DEPART[i][INTERIORID])
				{
					case 2:
					{
						ObjetoDepartamento[ id ][ i ][Equipo] = CreateDynamicObject(EQUIPO_DEPART[i][Model], EQUIPO_DEPART[i][pX_],EQUIPO_DEPART[i][pY_],EQUIPO_DEPART[i][pZ_], EQUIPO_DEPART[i][rX_],EQUIPO_DEPART[i][rY_],EQUIPO_DEPART[i][rZ_], id);
						SetDynamicObjectMaterial(ObjetoDepartamento[ id ][ i ][Equipo], 5, Get_Model_Textura(TEXTURAEQUIPO),Get_Name_Textura_1(TEXTURAEQUIPO),Get_Name_Textura_2(TEXTURAEQUIPO), 0x00000000);
					}
				}
			}
			//Estanteria
			for(new i = 0; i < sizeof ESTANTERIA_DEPART; i++)
			{
				switch(ESTANTERIA_DEPART[i][INTERIORID])
				{
					case 2:
					{
						ObjetoDepartamento[ id ][ i ][Estanteria] = CreateDynamicObject(ESTANTERIA_DEPART[i][Model], ESTANTERIA_DEPART[i][pX_],ESTANTERIA_DEPART[i][pY_],ESTANTERIA_DEPART[i][pZ_], ESTANTERIA_DEPART[i][rX_],ESTANTERIA_DEPART[i][rY_],ESTANTERIA_DEPART[i][rZ_], id);
						SetDynamicObjectMaterial(ObjetoDepartamento[ id ][ i ][Estanteria], 1,Get_Model_Textura(TEXTURAESTANTERIA),Get_Name_Textura_1(TEXTURAESTANTERIA),Get_Name_Textura_2(TEXTURAESTANTERIA), 0x00000000);
					}
				}
			}
		}
	}
	return 1;
}

funcion CargarCasasVIP()
{
    new DBResult:qresult,id = -1, count = 0, label[400],loaded;
    new TEXTURAPARED,TEXTURAPISO,TEXTURATECHO,TEXTURAPUERTA,TEXTURACAMA,TEXTURACOCINA,TEXTURAARMARIO,TEXTURAESTANTERIA,TEXTURAEQUIPO;
    qresult = db_query(_DB_,  "SELECT * FROM `CASASVIP`");
    count = db_num_rows(qresult);
    if(count == 0) return print("Error: Casas vip no cargadas.");
    for(new a=0;a<count;a++)
    {
        id = Iter_Free(Casasvip);
        CASAVIP[a][CasaDuenoID] = db_get_field_assoc_int(qresult, "PLAYER");
        if(CASAVIP[a][CasaDuenoID] != -1)
        {
   			format(CASAVIP[a][CasaDueno],24,"%s",GetNameCuentaID(CASAVIP[a][CasaDuenoID]));
   		}
   		
    	CASAVIP[a][PRECIO] = db_get_field_assoc_int(qresult, "PRECIO");
    	CASAVIP[a][CasaID] = db_get_field_assoc_int(qresult, "ID");
    	CASAVIP[a][Lock] = db_get_field_assoc_int(qresult, "CANDADO");
    	CASAVIP[a][ENVENTA] = db_get_field_assoc_int(qresult, "ENVENTA");
    	CASAVIP[a][TIPOMONEDA] = db_get_field_assoc_int(qresult, "TIPOMONEDA");

    	CASAVIP[a][CAJAFUERTE] = db_get_field_assoc_int(qresult, "CAJAFUERTE");
    	CASAVIP[a][CAJASTATUS] = db_get_field_assoc_int(qresult, "CAJASTATUS");

        CASAVIP[a][CasaX] = db_get_field_assoc_float(qresult, "X");
        CASAVIP[a][CasaY] = db_get_field_assoc_float(qresult, "Y");
        CASAVIP[a][CasaZ] = db_get_field_assoc_float(qresult, "Z");

        CASAVIP[a][EntradaX] = db_get_field_assoc_float(qresult, "ENTRAX");
        CASAVIP[a][EntradaY] = db_get_field_assoc_float(qresult, "ENTRAY");
        CASAVIP[a][EntradaZ] = db_get_field_assoc_float(qresult, "ENTRAZ");

        CASAVIP[a][GARAJEX] = db_get_field_assoc_float(qresult, "GARAJEX");
        CASAVIP[a][GARAJEY] = db_get_field_assoc_float(qresult, "GARAJEY");
        CASAVIP[a][GARAJEZ] = db_get_field_assoc_float(qresult, "GARAJEZ");
        CASAVIP[a][INTERIOR] = db_get_field_assoc_int(qresult, "INTERIOR");
        CASAVIP[a][GARAJETIPO] = db_get_field_assoc_int(qresult, "GARAJETIPO");

        TEXTURAPARED = db_get_field_assoc_int(qresult, "TEXTURAPARED");
        TEXTURAPISO = db_get_field_assoc_int(qresult, "TEXTURAPISO");
        TEXTURATECHO = db_get_field_assoc_int(qresult, "TEXTURATECHO");
        TEXTURAPUERTA = db_get_field_assoc_int(qresult, "TEXTURAPUERTA");
        TEXTURACAMA = db_get_field_assoc_int(qresult, "TEXTURACAMA");
        TEXTURAARMARIO = db_get_field_assoc_int(qresult, "TEXTURAARMARIO");
        TEXTURAESTANTERIA = db_get_field_assoc_int(qresult, "TEXTURAESTANTERIA");
        TEXTURACOCINA = db_get_field_assoc_int(qresult, "TEXTURACOCINA");
        TEXTURAEQUIPO = db_get_field_assoc_int(qresult, "TEXTURAEQUIPO");
        /**/
        CrearInteriorParaCasa(a,CASAVIP[a][INTERIOR],
        TEXTURAPARED,TEXTURAPISO,TEXTURATECHO,TEXTURAPUERTA,TEXTURACAMA,TEXTURACOCINA, TEXTURAARMARIO, TEXTURAESTANTERIA,TEXTURAEQUIPO);

        CargarMuebles(a);
        /**/
        switch(CASAVIP[a][ENVENTA])
        {
        	case 0:
        	{
        		switch(CASAVIP[a][TIPOMONEDA])
        		{
        			case 1: format(label, sizeof(label), "{FFFFFF}Casa en venta\n\nCosto: {FFFF00}%s ",number_format_thousand(CASAVIP[a][PRECIO]));
        			case 2: format(label, sizeof(label), "{FFFFFF}Casa en venta\n\nCosto: {FFFF00}%d {FFFFFF}(ZonCoins)",CASAVIP[a][PRECIO]);
        		}
        		CASAVIP[a][CasaPickup] = CreateDynamicPickup(1273, 1, CASAVIP[a][CasaX],CASAVIP[a][CasaY],CASAVIP[a][CasaZ]);
				
        	}
        	case 1:
        	{
				format(label, sizeof(label), "{FFFFFF}Casa de:\n {FFFF00}%s",CASAVIP[a][CasaDueno]);
				CASAVIP[a][CasaPickup] = CreateDynamicPickup(19522, 1, CASAVIP[a][CasaX],CASAVIP[a][CasaY],CASAVIP[a][CasaZ]);
        	}
        }
		CASAVIP[a][CasaLabel] = CreateDynamic3DTextLabel(label, 0xFFFFFFFF, CASAVIP[a][CasaX], CASAVIP[a][CasaY], CASAVIP[a][CasaZ]+0.35, 15.0, .testlos = 1);

		format(label, sizeof(label), "{FFFFFF}\nGaraje");
		CreateDynamic3DTextLabel(label, 0xFFFFFFFF, CASAVIP[a][GARAJEX], CASAVIP[a][GARAJEY], CASAVIP[a][GARAJEZ]+0.35, 15.0, .testlos = 1);
		CreateDynamicObject(19902,CASAVIP[a][GARAJEX], CASAVIP[a][GARAJEY], CASAVIP[a][GARAJEZ],0,0,0);
        loaded++;
        Iter_Add(Casasvip, id);
        Cargar_Estanteria_Casa(a,CASAVIP[a][INTERIOR]);
    	db_next_row(qresult);
    }
    db_free_result(qresult);
    printf("Se cargaron: %d casas VIP.", loaded);

	Televisor1 = CreateDynamicObject(19786, 1248.503540, 249.705642, 600.404174, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);//Interior 1
	Televisor2 = CreateDynamicObject(19787, 1896.472900, -20.435834, 640.684997, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);//Interior 2
	CreateDynamicObject(2332, 1240.82373, 234.83330, 598.09631,   0.00000, 0.00000, 89.22000);
	//SetDynamicObjectMaterial(Televisor1, 0, 14668, "711c", "CJ_7_11_win", 0x00000000);

	
    //SetTimer("StartTelevisors",3000,true);
    return true;
}
Cargar_Estanteria_Casa(karenmivida,interior)
{
	new DB_Query[100],DBResult:Result,id=karenmivida,itemda_;
	format(DB_Query,sizeof(DB_Query),"SELECT * FROM ESTANTERIA_CASA WHERE CasaID='%d';",karenmivida);
	Result = db_query(_DB_, DB_Query);
	new empeza=0;
	for(new a=0;a<db_num_rows(Result);a++)
	{
		empeza++;
		ESTANTERIA_CASA[empeza][ id ][CASAID] = karenmivida;
		itemda_ = db_get_field_assoc_int(Result, "ITEM");
		ESTANTERIA_CASA[empeza][ id ][ARMA] = itemda_;
		ESTANTERIA_CASA[empeza][ id ][AMMO] = db_get_field_assoc_int(Result, "ESTADO");
		switch(interior)
		{
			case 1:
			{
				switch(empeza)
				{
					case 1: ESTANTERIA_CASA[empeza][ id ][OBJETO] = CreateDynamicObject(INVENTARIOPLAYER[ itemda_ ][OBJETO],1249.06824,231.34100,599.65100,GetRotX_EstanteriaCasa(itemda_),GetRotY_EstanteriaCasa(itemda_),GetRotZ_EstanteriaCasa(itemda_),ESTANTERIA_CASA[empeza][ id ][CASAID]);
					case 2: ESTANTERIA_CASA[empeza][ id ][OBJETO] = CreateDynamicObject(INVENTARIOPLAYER[ itemda_ ][OBJETO],1248.28076, 231.29860, 599.65100,GetRotX_EstanteriaCasa(itemda_), GetRotY_EstanteriaCasa(itemda_),GetRotZ_EstanteriaCasa(itemda_),ESTANTERIA_CASA[empeza][ id ][CASAID]);
					case 3: ESTANTERIA_CASA[empeza][ id ][OBJETO] = CreateDynamicObject(INVENTARIOPLAYER[ itemda_ ][OBJETO],1249.0682, 231.3410, 599.3090,GetRotX_EstanteriaCasa(itemda_), GetRotY_EstanteriaCasa(itemda_),GetRotZ_EstanteriaCasa(itemda_),ESTANTERIA_CASA[empeza][ id ][CASAID]);
					case 4: ESTANTERIA_CASA[empeza][ id ][OBJETO] = CreateDynamicObject(INVENTARIOPLAYER[ itemda_ ][OBJETO],1248.2808, 231.2986, 599.3085,GetRotX_EstanteriaCasa(itemda_),GetRotY_EstanteriaCasa(itemda_),GetRotZ_EstanteriaCasa(itemda_),ESTANTERIA_CASA[empeza][ id ][CASAID]);
					case 5: ESTANTERIA_CASA[empeza][ id ][OBJETO] = CreateDynamicObject(INVENTARIOPLAYER[ itemda_ ][OBJETO],1249.0682, 231.3410, 598.9490,GetRotX_EstanteriaCasa(itemda_),GetRotY_EstanteriaCasa(itemda_),GetRotZ_EstanteriaCasa(itemda_),ESTANTERIA_CASA[empeza][ id ][CASAID]);
					case 6: ESTANTERIA_CASA[empeza][ id ][OBJETO] = CreateDynamicObject(INVENTARIOPLAYER[ itemda_ ][OBJETO],1248.2808, 231.2986, 598.9685,GetRotX_EstanteriaCasa(itemda_),GetRotY_EstanteriaCasa(itemda_),GetRotZ_EstanteriaCasa(itemda_),ESTANTERIA_CASA[empeza][ id ][CASAID]);
					case 7: ESTANTERIA_CASA[empeza][ id ][OBJETO] = CreateDynamicObject(INVENTARIOPLAYER[ itemda_ ][OBJETO],1249.0682, 231.3410, 598.5890,GetRotX_EstanteriaCasa(itemda_),GetRotY_EstanteriaCasa(itemda_),GetRotZ_EstanteriaCasa(itemda_),ESTANTERIA_CASA[empeza][ id ][CASAID]);
					case 8: ESTANTERIA_CASA[empeza][ id ][OBJETO] = CreateDynamicObject(INVENTARIOPLAYER[ itemda_ ][OBJETO],1248.2808, 231.2986, 598.6085,GetRotX_EstanteriaCasa(itemda_),GetRotY_EstanteriaCasa(itemda_),GetRotZ_EstanteriaCasa(itemda_),ESTANTERIA_CASA[empeza][ id ][CASAID]);
					case 9: ESTANTERIA_CASA[empeza][ id ][OBJETO] = CreateDynamicObject(INVENTARIOPLAYER[ itemda_ ][OBJETO],1249.0682, 231.3410, 598.2490,GetRotX_EstanteriaCasa(itemda_),GetRotY_EstanteriaCasa(itemda_),GetRotZ_EstanteriaCasa(itemda_),ESTANTERIA_CASA[empeza][ id ][CASAID]);
					case 10: ESTANTERIA_CASA[empeza][ id ][OBJETO] = CreateDynamicObject(INVENTARIOPLAYER[ itemda_ ][OBJETO],1248.2808, 231.2986, 598.2685,GetRotX_EstanteriaCasa(itemda_),GetRotY_EstanteriaCasa(itemda_),GetRotZ_EstanteriaCasa(itemda_),ESTANTERIA_CASA[empeza][ id ][CASAID]);
					case 11: ESTANTERIA_CASA[empeza][ id ][OBJETO] = CreateDynamicObject(INVENTARIOPLAYER[ itemda_ ][OBJETO],1249.0682, 231.3410, 597.8890,GetRotX_EstanteriaCasa(itemda_),GetRotY_EstanteriaCasa(itemda_),GetRotZ_EstanteriaCasa(itemda_),ESTANTERIA_CASA[empeza][ id ][CASAID]);
					case 12: ESTANTERIA_CASA[empeza][ id ][OBJETO] = CreateDynamicObject(INVENTARIOPLAYER[ itemda_ ][OBJETO],1248.2808, 231.2986, 597.9085,GetRotX_EstanteriaCasa(itemda_),GetRotY_EstanteriaCasa(itemda_),GetRotZ_EstanteriaCasa(itemda_),ESTANTERIA_CASA[empeza][ id ][CASAID]);
				}
			}
			case 2:
			{
				switch(empeza)
				{
					case 1: ESTANTERIA_CASA[empeza][ id ][OBJETO] = CreateDynamicObject(INVENTARIOPLAYER[ itemda_ ][OBJETO],1890.0254, -26.3156, 640.4746,GetRotX_EstanteriaCasa(itemda_),GetRotY_EstanteriaCasa(itemda_),GetRotZ_EstanteriaCasa(itemda_),ESTANTERIA_CASA[empeza][ id ][CASAID]);
					case 2: ESTANTERIA_CASA[empeza][ id ][OBJETO] = CreateDynamicObject(INVENTARIOPLAYER[ itemda_ ][OBJETO],1889.1639, -26.3347, 640.4746,GetRotX_EstanteriaCasa(itemda_), GetRotY_EstanteriaCasa(itemda_),GetRotZ_EstanteriaCasa(itemda_),ESTANTERIA_CASA[empeza][ id ][CASAID]);
					case 3: ESTANTERIA_CASA[empeza][ id ][OBJETO] = CreateDynamicObject(INVENTARIOPLAYER[ itemda_ ][OBJETO],1890.0254, -26.3156, 640.1346,GetRotX_EstanteriaCasa(itemda_), GetRotY_EstanteriaCasa(itemda_),GetRotZ_EstanteriaCasa(itemda_),ESTANTERIA_CASA[empeza][ id ][CASAID]);
					case 4: ESTANTERIA_CASA[empeza][ id ][OBJETO] = CreateDynamicObject(INVENTARIOPLAYER[ itemda_ ][OBJETO],1889.1682, -26.3152, 640.1546,GetRotX_EstanteriaCasa(itemda_),GetRotY_EstanteriaCasa(itemda_),GetRotZ_EstanteriaCasa(itemda_),ESTANTERIA_CASA[empeza][ id ][CASAID]);
					case 5: ESTANTERIA_CASA[empeza][ id ][OBJETO] = CreateDynamicObject(INVENTARIOPLAYER[ itemda_ ][OBJETO],1890.0254, -26.3156, 639.7746,GetRotX_EstanteriaCasa(itemda_),GetRotY_EstanteriaCasa(itemda_),GetRotZ_EstanteriaCasa(itemda_),ESTANTERIA_CASA[empeza][ id ][CASAID]);
					case 6: ESTANTERIA_CASA[empeza][ id ][OBJETO] = CreateDynamicObject(INVENTARIOPLAYER[ itemda_ ][OBJETO],1889.1682, -26.3152, 639.7946,GetRotX_EstanteriaCasa(itemda_),GetRotY_EstanteriaCasa(itemda_),GetRotZ_EstanteriaCasa(itemda_),ESTANTERIA_CASA[empeza][ id ][CASAID]);
					case 7: ESTANTERIA_CASA[empeza][ id ][OBJETO] = CreateDynamicObject(INVENTARIOPLAYER[ itemda_ ][OBJETO],1890.0254, -26.3156, 639.4346,GetRotX_EstanteriaCasa(itemda_),GetRotY_EstanteriaCasa(itemda_),GetRotZ_EstanteriaCasa(itemda_),ESTANTERIA_CASA[empeza][ id ][CASAID]);
					case 8: ESTANTERIA_CASA[empeza][ id ][OBJETO] = CreateDynamicObject(INVENTARIOPLAYER[ itemda_ ][OBJETO],1889.1682, -26.3152, 639.4346,GetRotX_EstanteriaCasa(itemda_),GetRotY_EstanteriaCasa(itemda_),GetRotZ_EstanteriaCasa(itemda_),ESTANTERIA_CASA[empeza][ id ][CASAID]);
					case 9: ESTANTERIA_CASA[empeza][ id ][OBJETO] = CreateDynamicObject(INVENTARIOPLAYER[ itemda_ ][OBJETO],1890.0254, -26.3156, 639.0746,GetRotX_EstanteriaCasa(itemda_),GetRotY_EstanteriaCasa(itemda_),GetRotZ_EstanteriaCasa(itemda_),ESTANTERIA_CASA[empeza][ id ][CASAID]);
					case 10: ESTANTERIA_CASA[empeza][ id ][OBJETO] = CreateDynamicObject(INVENTARIOPLAYER[ itemda_ ][OBJETO],1889.1682, -26.3152, 639.0946,GetRotX_EstanteriaCasa(itemda_),GetRotY_EstanteriaCasa(itemda_),GetRotZ_EstanteriaCasa(itemda_),ESTANTERIA_CASA[empeza][ id ][CASAID]);
					case 11: ESTANTERIA_CASA[empeza][ id ][OBJETO] = CreateDynamicObject(INVENTARIOPLAYER[ itemda_ ][OBJETO],1890.0254, -26.3156, 638.7146,GetRotX_EstanteriaCasa(itemda_),GetRotY_EstanteriaCasa(itemda_),GetRotZ_EstanteriaCasa(itemda_),ESTANTERIA_CASA[empeza][ id ][CASAID]);
					case 12: ESTANTERIA_CASA[empeza][ id ][OBJETO] = CreateDynamicObject(INVENTARIOPLAYER[ itemda_ ][OBJETO],1889.1682, -26.3152, 638.7346,GetRotX_EstanteriaCasa(itemda_),GetRotY_EstanteriaCasa(itemda_),GetRotZ_EstanteriaCasa(itemda_),ESTANTERIA_CASA[empeza][ id ][CASAID]);
				}
			}
		}
		
		db_next_row(Result);
	}

	db_free_result(Result);
	return 1;
}
CrearInteriorParaCasa(id, interiordid,TEXTURAPARED,TEXTURAPISO,TEXTURATECHO,TEXTURAPUERTA,TEXTURACAMA
	,TEXTURACOCINA, TEXTURAARMARIO, TEXTURAESTANTERIA,TEXTURAEQUIPO)
{
	
	switch(interiordid)
	{
		case 1:
		{
			//Paredes
			for(new i = 0; i < sizeof ObjetosParedes; i++)
			{
				switch(ObjetosParedes[i][INTERIORID])
				{
					case 1:
					{
						ObjetoCasa[ id ][ i ][Paredes] = CreateDynamicObject(ObjetosParedes[i][Model], ObjetosParedes[i][pX_],ObjetosParedes[i][pY_],ObjetosParedes[i][pZ_], ObjetosParedes[i][rX_],ObjetosParedes[i][rY_],ObjetosParedes[i][rZ_], id);
						SetDynamicObjectMaterial(ObjetoCasa[ id ][ i ][Paredes], 0, Get_Model_Textura(TEXTURAPARED),Get_Name_Textura_1(TEXTURAPARED),Get_Name_Textura_2(TEXTURAPARED), 0x00000000);
					}
				}
			}
			//Piso
			for(new i = 0; i < sizeof ObjetosPiso; i++)
			{
				switch(ObjetosPiso[i][INTERIORID])
				{
					case 1:
					{
						ObjetoCasa[ id ][ i ][Piso] = CreateDynamicObject(ObjetosPiso[i][Model], ObjetosPiso[i][pX_],ObjetosPiso[i][pY_],ObjetosPiso[i][pZ_], ObjetosPiso[i][rX_],ObjetosPiso[i][rY_],ObjetosPiso[i][rZ_], id);
						SetDynamicObjectMaterial(ObjetoCasa[ id ][ i ][Piso], 0, Get_Model_Textura(TEXTURAPISO),Get_Name_Textura_1(TEXTURAPISO),Get_Name_Textura_2(TEXTURAPISO), 0x00000000);

					}
				}
			}
			//Techo
 			for(new i = 0; i < sizeof ObjetosTecho; i++)
			{
				switch(ObjetosTecho[i][INTERIORID])
				{
					case 1:
					{
						ObjetoCasa[ id ][ i ][Techo] = CreateDynamicObject(ObjetosTecho[i][Model], ObjetosTecho[i][pX_],ObjetosTecho[i][pY_],ObjetosTecho[i][pZ_], ObjetosTecho[i][rX_],ObjetosTecho[i][rY_],ObjetosTecho[i][rZ_], id);
						SetDynamicObjectMaterial(ObjetoCasa[ id ][ i ][Techo], 0, Get_Model_Textura(TEXTURATECHO),Get_Name_Textura_1(TEXTURATECHO),Get_Name_Textura_2(TEXTURATECHO), 0x00000000);
					}
				}
			}
			//Puertas
 			for(new i = 0; i < sizeof ObjetosPuerta; i++)
			{
				switch(ObjetosPuerta[i][INTERIORID])
				{
					case 1:
					{
						ObjetoCasa[ id ][ i ][Puerta] = CreateDynamicObject(ObjetosPuerta[i][Model], ObjetosPuerta[i][pX_],ObjetosPuerta[i][pY_],ObjetosPuerta[i][pZ_], ObjetosPuerta[i][rX_],ObjetosPuerta[i][rY_],ObjetosPuerta[i][rZ_], id);
						SetDynamicObjectMaterial(ObjetoCasa[ id ][ i ][Puerta], 1, Get_Model_Textura(TEXTURAPUERTA),Get_Name_Textura_1(TEXTURAPUERTA),Get_Name_Textura_2(TEXTURAPUERTA), 0x00000000);
					}
				}
			}
 			//Camas
 			for(new i = 0; i < sizeof ObjetosCama; i++)
			{
				switch(ObjetosCama[i][INTERIORID])
				{
					case 1:
					{
						ObjetoCasa[ id ][ i ][Cama] = CreateDynamicObject(ObjetosCama[i][Model], ObjetosCama[i][pX_],ObjetosCama[i][pY_],ObjetosCama[i][pZ_], ObjetosCama[i][rX_],ObjetosCama[i][rY_],ObjetosCama[i][rZ_], id);
						SetDynamicObjectMaterial(ObjetoCasa[ id ][ i ][Cama], 0, Get_Model_Textura(TEXTURACAMA),Get_Name_Textura_1(TEXTURACAMA),Get_Name_Textura_2(TEXTURACAMA), 0x00000000);
					}
				}
			}

			//Cocina
			for(new i = 0; i < sizeof ObjetosCocina; i++)
			{
				switch(ObjetosCocina[i][INTERIORID])
				{
					case 1:
					{
						ObjetoCasa[ id ][ i ][Cocina] = CreateDynamicObject(ObjetosCocina[i][Model], ObjetosCocina[i][pX_],ObjetosCocina[i][pY_],ObjetosCocina[i][pZ_], ObjetosCocina[i][rX_],ObjetosCocina[i][rY_],ObjetosCocina[i][rZ_], id);
						SetDynamicObjectMaterial(ObjetoCasa[ id ][ i ][Cocina], 0, 10101, "2notherbuildsfe", "sl_vicbrikwall01", 0x00000000);
						SetDynamicObjectMaterial(ObjetoCasa[ id ][ i ][Cocina], 1, Get_Model_Textura(TEXTURACOCINA),Get_Name_Textura_1(TEXTURACOCINA),Get_Name_Textura_2(TEXTURACOCINA), 0x00000000);
					}
				}
			}
			for(new i = 0; i < sizeof ObjetosArmario; i++)
			{
				switch(ObjetosArmario[i][INTERIORID])
				{
					case 1:
					{
						ObjetoCasa[ id ][ i ][Armario] = CreateDynamicObject(ObjetosArmario[i][Model], ObjetosArmario[i][pX_],ObjetosArmario[i][pY_],ObjetosArmario[i][pZ_], ObjetosArmario[i][rX_],ObjetosArmario[i][rY_],ObjetosArmario[i][rZ_], id);
						SetDynamicObjectMaterial(ObjetoCasa[ id ][ i ][Armario], 0, 10101, "2notherbuildsfe", "sl_vicbrikwall01", 0x00000000);
						SetDynamicObjectMaterial(ObjetoCasa[ id ][ i ][Armario], 1, Get_Model_Textura(TEXTURAARMARIO),Get_Name_Textura_1(TEXTURAARMARIO),Get_Name_Textura_2(TEXTURAARMARIO), 0x00000000);
					}
				}
			}
			for(new i = 0; i < sizeof ObjetosEstanteria; i++)
			{
				switch(ObjetosEstanteria[i][INTERIORID])
				{
					case 1:
					{
						ObjetoCasa[ id ][ i ][Estanteria] = CreateDynamicObject(ObjetosEstanteria[i][Model], ObjetosEstanteria[i][pX_],ObjetosEstanteria[i][pY_],ObjetosEstanteria[i][pZ_], ObjetosEstanteria[i][rX_],ObjetosEstanteria[i][rY_],ObjetosEstanteria[i][rZ_], id);
						SetDynamicObjectMaterial(ObjetoCasa[ id ][ i ][Estanteria], 0, 10101, "gg", "gg", 0x00000000);
						SetDynamicObjectMaterial(ObjetoCasa[ id ][ i ][Estanteria], 1, Get_Model_Textura(TEXTURAESTANTERIA),Get_Name_Textura_1(TEXTURAESTANTERIA),Get_Name_Textura_2(TEXTURAESTANTERIA), 0x00000000);
					}
				}
			}
			for(new i = 0; i < sizeof ObjetosEquipo; i++)
			{
				switch(ObjetosEquipo[i][INTERIORID])
				{
					case 1:
					{
						ObjetoCasa[ id ][ i ][Equipo] = CreateDynamicObject(ObjetosEquipo[i][Model], ObjetosEquipo[i][pX_],ObjetosEquipo[i][pY_],ObjetosEquipo[i][pZ_], ObjetosEquipo[i][rX_],ObjetosEquipo[i][rY_],ObjetosEquipo[i][rZ_], id);
						SetDynamicObjectMaterial(ObjetoCasa[ id ][ i ][Equipo], 5, Get_Model_Textura(TEXTURAEQUIPO),Get_Name_Textura_1(TEXTURAEQUIPO),Get_Name_Textura_2(TEXTURAEQUIPO), 0x00000000);
					}
				}
			}
		}
		//================================================================================================================================================
		case 2:
		{
			//Paredes
			for(new i = 0; i < sizeof ObjetosParedes; i++)
			{
				switch(ObjetosParedes[i][INTERIORID])
				{
					case 2:
					{
						ObjetoCasa[ id ][ i ][Paredes] = CreateDynamicObject(ObjetosParedes[i][Model], ObjetosParedes[i][pX_],ObjetosParedes[i][pY_],ObjetosParedes[i][pZ_], ObjetosParedes[i][rX_],ObjetosParedes[i][rY_],ObjetosParedes[i][rZ_], id);
						SetDynamicObjectMaterial(ObjetoCasa[ id ][ i ][Paredes], 0, Get_Model_Textura(TEXTURAPARED),Get_Name_Textura_1(TEXTURAPARED),Get_Name_Textura_2(TEXTURAPARED), 0x00000000);
					}
				}
			}
			//Piso
			for(new i = 0; i < sizeof ObjetosPiso; i++)
			{
				switch(ObjetosPiso[i][INTERIORID])
				{
					case 2:
					{
						ObjetoCasa[ id ][ i ][Piso] = CreateDynamicObject(ObjetosPiso[i][Model], ObjetosPiso[i][pX_],ObjetosPiso[i][pY_],ObjetosPiso[i][pZ_], ObjetosPiso[i][rX_],ObjetosPiso[i][rY_],ObjetosPiso[i][rZ_], id);
						SetDynamicObjectMaterial(ObjetoCasa[ id ][ i ][Piso], 0,Get_Model_Textura(TEXTURAPISO),Get_Name_Textura_1(TEXTURAPISO),Get_Name_Textura_2(TEXTURAPISO), 0x00000000);
					}
				}
			}
			//Techo
 			for(new i = 0; i < sizeof ObjetosTecho; i++)
			{
				switch(ObjetosTecho[i][INTERIORID])
				{
					case 2:
					{
						ObjetoCasa[ id ][ i ][Techo] = CreateDynamicObject(ObjetosTecho[i][Model], ObjetosTecho[i][pX_],ObjetosTecho[i][pY_],ObjetosTecho[i][pZ_], ObjetosTecho[i][rX_],ObjetosTecho[i][rY_],ObjetosTecho[i][rZ_], id);
						SetDynamicObjectMaterial(ObjetoCasa[ id ][ i ][Techo], 0, Get_Model_Textura(TEXTURATECHO),Get_Name_Textura_1(TEXTURATECHO),Get_Name_Textura_2(TEXTURATECHO), 0x00000000);
					}
				}
			}
			//Puertas
 			for(new i = 0; i < sizeof ObjetosPuerta; i++)
			{
				switch(ObjetosPuerta[i][INTERIORID])
				{
					case 2:
					{
						ObjetoCasa[ id ][ i ][Puerta] = CreateDynamicObject(ObjetosPuerta[i][Model], ObjetosPuerta[i][pX_],ObjetosPuerta[i][pY_],ObjetosPuerta[i][pZ_], ObjetosPuerta[i][rX_],ObjetosPuerta[i][rY_],ObjetosPuerta[i][rZ_], id);
						SetDynamicObjectMaterial(ObjetoCasa[ id ][ i ][Puerta], 1, Get_Model_Textura(TEXTURAPUERTA),Get_Name_Textura_1(TEXTURAPUERTA),Get_Name_Textura_2(TEXTURAPUERTA), 0x00000000);
					}
				}
			}
 			//Camas
 			for(new i = 0; i < sizeof ObjetosCama; i++)
			{
				switch(ObjetosCama[i][INTERIORID])
				{
					case 2:
					{
						ObjetoCasa[ id ][ i ][Cama] = CreateDynamicObject(ObjetosCama[i][Model], ObjetosCama[i][pX_],ObjetosCama[i][pY_],ObjetosCama[i][pZ_], ObjetosCama[i][rX_],ObjetosCama[i][rY_],ObjetosCama[i][rZ_], id);
						SetDynamicObjectMaterial(ObjetoCasa[ id ][ i ][Cama], 0, Get_Model_Textura(TEXTURACAMA),Get_Name_Textura_1(TEXTURACAMA),Get_Name_Textura_2(TEXTURACAMA), 0x00000000);
					}
				}
			}
			//Cocina
			for(new i = 0; i < sizeof ObjetosCocina; i++)
			{
				switch(ObjetosCocina[i][INTERIORID])
				{
					case 2:
					{
						ObjetoCasa[ id ][ i ][Cocina] = CreateDynamicObject(ObjetosCocina[i][Model], ObjetosCocina[i][pX_],ObjetosCocina[i][pY_],ObjetosCocina[i][pZ_], ObjetosCocina[i][rX_],ObjetosCocina[i][rY_],ObjetosCocina[i][rZ_], id);
						SetDynamicObjectMaterial(ObjetoCasa[ id ][ i ][Cocina], 0, 10101, "2notherbuildsfe", "sl_vicbrikwall01", 0x00000000);
						SetDynamicObjectMaterial(ObjetoCasa[ id ][ i ][Cocina], 1, Get_Model_Textura(TEXTURACOCINA),Get_Name_Textura_1(TEXTURACOCINA),Get_Name_Textura_2(TEXTURACOCINA), 0x00000000);
					}
				}
			}
			for(new i = 0; i < sizeof ObjetosArmario; i++)
			{
				switch(ObjetosArmario[i][INTERIORID])
				{
					case 2:
					{
						ObjetoCasa[ id ][ i ][Armario] = CreateDynamicObject(ObjetosArmario[i][Model], ObjetosArmario[i][pX_],ObjetosArmario[i][pY_],ObjetosArmario[i][pZ_], ObjetosArmario[i][rX_],ObjetosArmario[i][rY_],ObjetosArmario[i][rZ_], id);
						SetDynamicObjectMaterial(ObjetoCasa[ id ][ i ][Armario], 0, 10101, "2notherbuildsfe", "sl_vicbrikwall01", 0x00000000);
						SetDynamicObjectMaterial(ObjetoCasa[ id ][ i ][Armario], 1, Get_Model_Textura(TEXTURACOCINA),Get_Name_Textura_1(TEXTURACOCINA),Get_Name_Textura_2(TEXTURACOCINA), 0x00000000);
					}
				}
			}
			for(new i = 0; i < sizeof ObjetosEstanteria; i++)
			{
				switch(ObjetosEstanteria[i][INTERIORID])
				{
					case 2:
					{
						ObjetoCasa[ id ][ i ][Estanteria] = CreateDynamicObject(ObjetosEstanteria[i][Model], ObjetosEstanteria[i][pX_],ObjetosEstanteria[i][pY_],ObjetosEstanteria[i][pZ_], ObjetosEstanteria[i][rX_],ObjetosEstanteria[i][rY_],ObjetosEstanteria[i][rZ_], id);
						SetDynamicObjectMaterial(ObjetoCasa[ id ][ i ][Estanteria], 0, 10101, "gg", "gg", 0x00000000);
						SetDynamicObjectMaterial(ObjetoCasa[ id ][ i ][Estanteria], 1, Get_Model_Textura(TEXTURAESTANTERIA),Get_Name_Textura_1(TEXTURAESTANTERIA),Get_Name_Textura_2(TEXTURAESTANTERIA), 0x00000000);
					}
				}
			}
			for(new i = 0; i < sizeof ObjetosEquipo; i++)
			{
				switch(ObjetosEquipo[i][INTERIORID])
				{
					case 2:
					{
						ObjetoCasa[ id ][ i ][Equipo] = CreateDynamicObject(ObjetosEquipo[i][Model], ObjetosEquipo[i][pX_],ObjetosEquipo[i][pY_],ObjetosEquipo[i][pZ_], ObjetosEquipo[i][rX_],ObjetosEquipo[i][rY_],ObjetosEquipo[i][rZ_], id);
						SetDynamicObjectMaterial(ObjetoCasa[ id ][ i ][Equipo], 5, Get_Model_Textura(TEXTURAEQUIPO),Get_Name_Textura_1(TEXTURAEQUIPO),Get_Name_Textura_2(TEXTURAEQUIPO), 0x00000000);
					}
				}
			}
		}
	}
	return 1;
}


funcion CargarMueblesCasaFaccion()
{
    new id,id2,Float:posx,Float:posy,Float:posz,Float:rotx,Float:roty,Float:rotz,string[250];
    new DBResult:Reeee,count,mund_,muebleconteo;
    format(string,sizeof(string),"SELECT * FROM `MAPEOSCASAFACCION`");
    Reeee=db_query(DBCASA,string);
    count = db_num_rows(Reeee);
    if(count == 0) return printf("NO SE CARGO NINGUN MUEBLE DE CASA FACCION");
    for(new a=0;a<count;a++)
    {
        id = db_get_field_assoc_int(Reeee, "OBJETO");
        id2 = db_get_field_assoc_int(Reeee, "ID");
        posx = db_get_field_assoc_float(Reeee, "X");
        posy = db_get_field_assoc_float(Reeee, "Y");
        posz = db_get_field_assoc_float(Reeee, "Z");
        rotx = db_get_field_assoc_float(Reeee, "rX");
        roty = db_get_field_assoc_float(Reeee, "rY");
        rotz = db_get_field_assoc_float(Reeee, "rZ");
        mund_ = db_get_field_assoc_int(Reeee, "MUNDO");
    	MUEBLEFACCION[id2][ID] = CreateDynamicObject(id, posx,posy,posz,rotx,roty,rotz,mund_);
		muebleconteo++;
        db_next_row(Reeee);
    }
    db_free_result(Reeee);
    printf("Se cargaron: %d muebles de casa faccion.",muebleconteo);
	return 1;
}

funcion CargarMueblesApartamento(depadid)
{
    new id,Float:posx,Float:posy,Float:posz,Float:rotx,Float:roty,Float:rotz,string[250];
    new DBResult:Reeee,mund_;
    format(string,sizeof(string),"SELECT * FROM `MAPEOSAPARTAMENTOS` WHERE APARTAMENTOID='%d';",depadid);
    Reeee=db_query(DBCASA,string);
    for(new a=0;a<db_num_rows(Reeee);a++)
    {
        id = db_get_field_assoc_int(Reeee, "Objeto");
        posx = db_get_field_assoc_float(Reeee, "X");
        posy = db_get_field_assoc_float(Reeee, "Y");
        posz = db_get_field_assoc_float(Reeee, "Z");
        rotx = db_get_field_assoc_float(Reeee, "rX");
        roty = db_get_field_assoc_float(Reeee, "rY");
        rotz = db_get_field_assoc_float(Reeee, "rZ");
        mund_ = db_get_field_assoc_int(Reeee, "MUNDO");
    	OBJETOS_DEPA[ depadid ][ a ][ID_OBJETO] = CreateDynamicObject(id, posx,posy,posz,rotx,roty,rotz,mund_);
        db_next_row(Reeee);
    }
    db_free_result(Reeee);
	return 1;
}

funcion CargarMuebles(casaidd)
{
    new id,Float:posx,Float:posy,Float:posz,Float:rotx,Float:roty,Float:rotz,string[250];
    new DBResult:Reeee,mund_;
    format(string,sizeof(string),"SELECT * FROM `MAPEOSCASA` WHERE CASAID='%d';",casaidd);
    Reeee=db_query(DBCASA,string);
    for(new a=0;a<db_num_rows(Reeee);a++)
    {
        id = db_get_field_assoc_int(Reeee, "Objeto");
        posx = db_get_field_assoc_float(Reeee, "X");
        posy = db_get_field_assoc_float(Reeee, "Y");
        posz = db_get_field_assoc_float(Reeee, "Z");
        rotx = db_get_field_assoc_float(Reeee, "rX");
        roty = db_get_field_assoc_float(Reeee, "rY");
        rotz = db_get_field_assoc_float(Reeee, "rZ");
        mund_ = db_get_field_assoc_int(Reeee, "MUNDO");

    	//MAPCASA[id2][ID] = CreateDynamicObject(id, posx,posy,posz,rotx,roty,rotz,mund_);
    	OBJETOS_CASA[ casaidd ][ a ][ID_OBJETO] = CreateDynamicObject(id, posx,posy,posz,rotx,roty,rotz,mund_);


        db_next_row(Reeee);
    }
    db_free_result(Reeee);
    
   
	return 1;
}


funcion CargarMapeosAfuerAcasa()
{
    new id,id2,Float:posx,Float:posy,Float:posz,Float:rotx,Float:roty,Float:rotz,string[50];
    new DBResult:Reeee,count,muebleconteo,texturamodel;
    new type,textura1[30],textura2[30];
    format(string,sizeof(string),"SELECT * FROM `MAPCASA`");
    Reeee=db_query(DBCASA,string);
    count = db_num_rows(Reeee);
    if(count == 0) return printf("NO SE CARGO NINGUN MAPEO AFUERA DE LAS CASAS VIP");
    for(new a=0;a<count;a++)
    {
        id = db_get_field_assoc_int(Reeee, "OBJETO");
        id2 = db_get_field_assoc_int(Reeee, "ID");
        posx = db_get_field_assoc_float(Reeee, "X");
        posy = db_get_field_assoc_float(Reeee, "Y");
        posz = db_get_field_assoc_float(Reeee, "Z");
        rotx = db_get_field_assoc_float(Reeee, "rX");
        roty = db_get_field_assoc_float(Reeee, "rY");
        rotz = db_get_field_assoc_float(Reeee, "rZ");
 
        type = db_get_field_assoc_int(Reeee, "TYPE");
        db_get_field_assoc(Reeee, "TEXTURA1",textura1, 30);
    	db_get_field_assoc(Reeee, "TEXTURA2",textura2, 30);
    	texturamodel = db_get_field_assoc_int(Reeee, "TEXTURAMODEL");

        switch(type)
		{
		    case 0:
		    {
        		MAPEOSFUERA[id2][ID] = CreateDynamicObject(id, posx,posy,posz,rotx,roty,rotz,0,0);
			}
			case 1:
			{
			    MAPEOSFUERA[id2][ID] = CreateDynamicObject(id, posx,posy,posz,rotx,roty,rotz,0,0);
			    SetDynamicObjectMaterial(MAPEOSFUERA[id2][ID], 0, texturamodel,textura1,textura2, 0);
			}
		}
		muebleconteo++;
        db_next_row(Reeee);
    }
    db_free_result(Reeee);
    printf("Se cargaron: %d mapeos de casas afuera.",muebleconteo);
	return 1;
}

//==========================================
funcion CargarNegocios()
{
	new DBResult:qresult,ida, count = 0, label[400],loaded;
    qresult = db_query(_DB_,  "SELECT * FROM `NEGOCIOS`");
    count = db_num_rows(qresult);
    if(count == 0) return print("No se cargo ningun negocio.");
    for(new a=0;a<count;a++)
    {
        ida = Iter_Free(Negocios);

        db_get_field_assoc(qresult, "NOMBRE",NEGOCIO[a][Nombre], 256);
        NEGOCIO[a][TIPONEGOCIO] = 		db_get_field_assoc_int(qresult, "NEGOCIOTYPE");
        NEGOCIO[a][SeVende] = 			db_get_field_assoc_int(qresult, "ENVENTA");
        NEGOCIO[a][EmpresaDueno] = 		db_get_field_assoc_int(qresult, "DUENO");
        NEGOCIO[a][INTERIOR] = 			db_get_field_assoc_int(qresult, "INT");
        NEGOCIO[a][EmpresaX] = 			db_get_field_assoc_float(qresult, "POSX");
        NEGOCIO[a][EmpresaY] = 			db_get_field_assoc_float(qresult, "POSY");
        NEGOCIO[a][EmpresaZ] = 			db_get_field_assoc_float(qresult, "POSZ");
        NEGOCIO[a][Mundo] = 			db_get_field_assoc_int(qresult, "VW");
        NEGOCIO[a][Iva] = 				db_get_field_assoc_float(qresult, "IVA");
        NEGOCIO[a][PrecioDinero] = 		db_get_field_assoc_int(qresult, "COSTO");
        NEGOCIO[a][Lock] = 				db_get_field_assoc_int(qresult, "LOCK");	
        NEGOCIO[a][Ganancia] = 			db_get_field_assoc_int(qresult, "GANANCIA");
        switch(NEGOCIO[a][TIPONEGOCIO])
		{
			case 1: CreateDynamicMapIcon(NEGOCIO[a][EmpresaX],NEGOCIO[a][EmpresaY],NEGOCIO[a][EmpresaZ], 17, 0, 0, 0, -1, 700.0);
			case 2: CreateDynamicMapIcon(NEGOCIO[a][EmpresaX],NEGOCIO[a][EmpresaY],NEGOCIO[a][EmpresaZ], 10, 0, 0, 0, -1, 700.0);
			case 3: CreateDynamicMapIcon(NEGOCIO[a][EmpresaX],NEGOCIO[a][EmpresaY],NEGOCIO[a][EmpresaZ], 29, 0, 0, 0, -1, 700.0);
			case 4: CreateDynamicMapIcon(NEGOCIO[a][EmpresaX],NEGOCIO[a][EmpresaY],NEGOCIO[a][EmpresaZ], 14, 0, 0, 0, -1, 700.0);
			case 5: CreateDynamicMapIcon(NEGOCIO[a][EmpresaX],NEGOCIO[a][EmpresaY],NEGOCIO[a][EmpresaZ], 35, 0, 0, 0, -1, 700.0);
			case 6..12: CreateDynamicMapIcon(NEGOCIO[a][EmpresaX],NEGOCIO[a][EmpresaY],NEGOCIO[a][EmpresaZ], 55, 0, 0, 0, -1, 700.0);
			case 13: CreateDynamicMapIcon(NEGOCIO[a][EmpresaX],NEGOCIO[a][EmpresaY],NEGOCIO[a][EmpresaZ], 21, 0, 0, 0, -1, 700.0);
		}
		switch(NEGOCIO[a][SeVende])
		{
			case 0:
			{
				switch(NEGOCIO[a][TIPONEGOCIO])
				{
					case 1:format(label, sizeof(label), "{FFFFFF}# %d\n\n{81F781}Negocio '24/7' en venta\n\n{ffffff}Costo: ${81F781} %s\n\n",a,number_format_thousand(NEGOCIO[a][PrecioDinero]));
					case 2:format(label, sizeof(label), "{FFFFFF}# %d\n\n{81F781}Negocio 'BurgerShot' en venta\n\n{ffffff}Costo: ${81F781} %s\n\n",a,number_format_thousand(NEGOCIO[a][PrecioDinero]));
					case 3:format(label, sizeof(label), "{FFFFFF}# %d\n\n{81F781}Negocio 'Well Stacked Pizza' en venta\n\n{ffffff}Costo: ${81F781} %s\n\n",a,number_format_thousand(NEGOCIO[a][PrecioDinero]));
					case 4:format(label, sizeof(label), "{FFFFFF}# %d\n\n{81F781}Negocio 'Cluckin Bell' en venta\n\n{ffffff}Costo: ${81F781} %s\n\n",a,number_format_thousand(NEGOCIO[a][PrecioDinero]));
					case 5:format(label, sizeof(label), "{FFFFFF}# %d\n\n{81F781}Negocio 'Hotel' en venta\n\n{ffffff}Costo: ${81F781} %s\n\n",a,number_format_thousand(NEGOCIO[a][PrecioDinero]));
					case 6..12:format(label, sizeof(label), "{FFFFFF}# %d\n\n{81F781}Negocio 'Concesonario' en venta\n\n{ffffff}Costo: ${81F781} %s\n\n",a,number_format_thousand(NEGOCIO[a][PrecioDinero]));
					case 13:format(label, sizeof(label), "{FFFFFF}# %d\n\n{81F781}Negocio 'Farmacia' en venta\n\n{ffffff}Costo: ${81F781} %s\n\n",a,number_format_thousand(NEGOCIO[a][PrecioDinero]));
				}
			}
			case 1:
			{
				format(label, sizeof(label), "{FFFFFF}# %d\n\n{FFFFFF}Tienda: {F7FE2E}%s\n\n\n{FFFFFF}Propietario: {F7FE2E}\n%s",a,NEGOCIO[a][Nombre],GetNameCuentaID(NEGOCIO[a][EmpresaDueno]));	
			}
			
		}
		CreateDynamicObject(19902,NEGOCIO[a][EmpresaX],NEGOCIO[a][EmpresaY],NEGOCIO[a][EmpresaZ],0,0,0);
		
		NEGOCIO[a][EmpresaLabel] = CreateDynamic3DTextLabel(label, 0xFFFFFFFF, NEGOCIO[a][EmpresaX],NEGOCIO[a][EmpresaY],NEGOCIO[a][EmpresaZ]+0.35, 15.0);
 
        loaded++;
        Iter_Add(Negocios, ida);
    	db_next_row(qresult);
    }
    db_free_result(qresult);
    printf("Se cargaron: %d Negocios de 24/7.", loaded);
	return 1;
}
funcion CargarPersonajes()
{
	new DBResult:qresult, count = 0,loaded;
    qresult = db_query(_DB_,  "SELECT * FROM `PERSONAJES`");
    count = db_num_rows(qresult);
    if(count == 0) return print("No se cargo ningun personaje.");
    for(new a=0;a<count;a++)
    {
        PERSONAJES[a][ANIM] = db_get_field_assoc_int(qresult, "ANIM");
        PERSONAJES[a][MUNDO] = db_get_field_assoc_int(qresult, "MUNDO");
        PERSONAJES[a][INTERIOR] = db_get_field_assoc_int(qresult, "INTERIOR");
        db_get_field_assoc(qresult, "NOMBRE",PERSONAJES[a][NOMBRE], 24);
    	PERSONAJES[a][SKIN] = db_get_field_assoc_int(qresult, "SKIN");
        PERSONAJES[a][PosX] = db_get_field_assoc_float(qresult, "X");
        PERSONAJES[a][PosY] = db_get_field_assoc_float(qresult, "Y");
        PERSONAJES[a][PosZ] = db_get_field_assoc_float(qresult, "Z");
     	PERSONAJES[a][ANGLE] = db_get_field_assoc_float(qresult, "A");

    	PERSONAJES[a][ID] = CreateDynamicActor(PERSONAJES[a][SKIN], PERSONAJES[a][PosX],PERSONAJES[a][PosY],PERSONAJES[a][PosZ],PERSONAJES[a][ANGLE],PERSONAJES[a][MUNDO],PERSONAJES[a][INTERIOR]);
	    SetDynamicActorInvulnerable(PERSONAJES[a][ID],true);
	    SetDynamicActorHealth(PERSONAJES[a][ID],100);
	    switch(PERSONAJES[a][ANIM])
	    {
	    	case 0:ApplyDynamicActorAnimation(PERSONAJES[a][ID], "RAPPING", "RAPPING", 4.1, 1, 0, 0, 0, 0); // reir
	    	case 1:ApplyDynamicActorAnimation(PERSONAJES[a][ID], "RAPPING", "Laugh_01", 4.1, 1, 0, 0, 0, 0); // reir
	    	case 2:ApplyDynamicActorAnimation(PERSONAJES[a][ID], "PED", "IDLE_chat", 4.1, 1, 0, 0, 0, 0); // hablar
	    	case 3:ApplyDynamicActorAnimation(PERSONAJES[a][ID], "RAPPING", "RAP_B_Loop", 4.1, 1, 0, 0, 0, 0); // rapear
	    	case 4:ApplyDynamicActorAnimation(PERSONAJES[a][ID], "ON_LOOKERS", "shout_02", 4.1, 1, 0, 0, 0, 0); // alentar
	    }

	    new label[256];
		format(label, sizeof(label), "%s",PERSONAJES[a][NOMBRE]);
		PERSONAJES[a][LABEL] = CreateDynamic3DTextLabel(label, 0xFFFFFF90, PERSONAJES[a][PosX],PERSONAJES[a][PosY],PERSONAJES[a][PosZ]+1.2, 20.0);

        loaded++;

    	db_next_row(qresult);
    }
    db_free_result(qresult);
    printf("Se cargaron: %d personajes.", loaded);

	return 1;
}
funcion CargarActores()
{
	new DBResult:qresult,id = -1, count = 0,loaded,labels[256];
    qresult = db_query(_DB_,  "SELECT * FROM `ACTOR`");
    count = db_num_rows(qresult);
    if(count == 0) return print("No se cargo ningun actor.");
    for(new a=0;a<count;a++)
    {
        id = Iter_Free(Actores);

        //ACTOR[a][ID] = db_get_field_assoc_int(qresult, "ID");
        ACTOR[a][VW] = db_get_field_assoc_int(qresult, "MUNDO");
        ACTOR[a][INT] = db_get_field_assoc_int(qresult, "INTERIOR");
        db_get_field_assoc(qresult, "NOMBRE",ACTOR[a][NOMBRE], 24);
    	ACTOR[a][SKIN] = db_get_field_assoc_int(qresult, "SKIN");
        ACTOR[a][_X_] = db_get_field_assoc_float(qresult, "X");
        ACTOR[a][_Y_] = db_get_field_assoc_float(qresult, "Y");
        ACTOR[a][_Z_] = db_get_field_assoc_float(qresult, "Z");
     	ACTOR[a][_A_] = db_get_field_assoc_float(qresult, "A");

     	format(labels,sizeof(labels),"{6E6E6E}(%d)\n{FFFFFF}%s",a,ACTOR[a][NOMBRE]);
     	ACTOR[a][LABEL] = CreateDynamic3DTextLabel(labels, -1, ACTOR[a][_X_] , ACTOR[a][_Y_] , ACTOR[a][_Z_] + 1, 10.0, .testlos = 1, .interiorid = ACTOR[a][INT], .worldid = ACTOR[a][VW]);
     	ACTOR[a][ID] = CreateActor(ACTOR[a][SKIN],ACTOR[a][_X_] , ACTOR[a][_Y_] , ACTOR[a][_Z_] , ACTOR[a][_A_]);
     	SetActorInvulnerable(ACTOR[a][ID], false);
    	SetActorHealth(ACTOR[a][ID],100);
    	SetActorVirtualWorld(ACTOR[a][ID], ACTOR[a][VW]);

    	ACTOR[a][ROBAR]=true;
    	ACTOR[a][ROBADOPOR]=-1;
    	ACTOR[a][ROBADO]=0;
		ACTOR[a][STEAL]=false;
		ACTOR[a][STATUS]=0;
		ACTOR[a][ROBADOPOR] = -1;
		ACTOR[a][DEAD]=false;

        loaded++;
        Iter_Add(Actores, id);

    	db_next_row(qresult);
    }
    db_free_result(qresult);
    printf("Se cargaron: %d actores.", loaded);

	return 1;
}
ClearPlayerChat(playerid)
{
	for(new i = 0; i != 32; i++) SendClientMessage(playerid, -1, " ");
	return 1;
}

RegisterBankAccountTransaction(account_id, transaction_type, ammount, extra = -1)
{
	new DB_Query[215];
	format(DB_Query, sizeof DB_Query,
	"\
		INSERT INTO `BANK_TRANSACTIONS`\
		(\
			`ID_ACCOUNT`, `TRANSACTION_TYPE`, `AMMOUNT`, `EXTRA`\
		)\
		VALUES\
		(\
			'%d', '%d', '%d', '%d'\
		);\
	", account_id, transaction_type, ammount, extra);
	db_query(Database, DB_Query);
	return 1;
}

RegisterNewPlayer(playerid)
{
	if(PLAYER_TEMP[playerid][pt_USER_EXIT]) return 0;
	
	new DBResult:Result, DB_Query[900];
	format(DB_Query, sizeof DB_Query,
	"\
		INSERT INTO `CUENTA`\
		(\
			`IP`, `NAME`, `EMAIL`, `SALT`, `PASS`, `CONNECTED`, `PLAYERID`, `TIME_FOR_REP`\
		)\
		VALUES\
		(\
			'%q', '%q', '%q', '%q', '%q', '1', '%d', '%d'\
		);\
		SELECT `ID`, `LAST_CONNECTION` FROM `CUENTA` WHERE `NAME` = '%s';\
	", ACCOUNT_INFO[playerid][ac_IP], ACCOUNT_INFO[playerid][ac_NAME], ACCOUNT_INFO[playerid][ac_EMAIL], ACCOUNT_INFO[playerid][ac_SALT], ACCOUNT_INFO[playerid][ac_PASS], playerid, TIME_FOR_REP, ACCOUNT_INFO[playerid][ac_NAME]);
	Result = db_query(Database, DB_Query);

	/*new query[520];
	mysql_format(DatabaseMysql, query, sizeof(query), "\
	INSERT INTO `CUENTASSAMPTUBE`(`IP`, `NAME`, `EMAIL`, `SALT`, `PASS`, `CONNECTED`, `PLAYERID`, `TIME_FOR_REP`)\
	VALUES\
	 ('%q', '%q', '%q', '%q', '%q', '1', '%d', '%d')",
	ACCOUNT_INFO[playerid][ac_IP],
	ACCOUNT_INFO[playerid][ac_NAME],
	ACCOUNT_INFO[playerid][ac_EMAIL],
	ACCOUNT_INFO[playerid][ac_SALT],
	ACCOUNT_INFO[playerid][ac_PASS],
	playerid,
	TIME_FOR_REP);
	mysql_query(DatabaseMysql, query);

 	mysql_format(DatabaseMysql, query, sizeof(query), "SELECT `ID`, `LAST_CONNECTION` FROM `CUENTA` WHERE `NAME` = '%s'",ACCOUNT_INFO[playerid][ac_NAME]);
    mysql_pquery(DatabaseMysql, query, "RegistroSelec2","d", playerid);*/

	if(db_num_rows(Result))
	{
		ACCOUNT_INFO[playerid][ac_ID] = db_get_field_assoc_int(Result, "ID");
		db_get_field_assoc(Result, "LAST_CONNECTION", ACCOUNT_INFO[playerid][ac_LAST_CONNECTION], 256);
		ACCOUNT_INFO[playerid][ac_DOUBT_CHANNEL] = true;
	}
	db_free_result(Result);
	
	DB_Query[0] = EOS;
	new DBResult:Result_reg;
	format(DB_Query, sizeof DB_Query,
	"\
		INSERT INTO `REGISTRO`\
		(\
			`ID_USER`, `IP`, `NAME`, `EMAIL`, `SALT`, `PASS`\
		)\
		VALUES\
		(\
			'%d', '%q', '%q', '%q', '%q', '%q'\
		);\
		SELECT `DATE` FROM `REGISTRO` WHERE `ID_USER` = '%d';\
	", ACCOUNT_INFO[playerid][ac_ID], ACCOUNT_INFO[playerid][ac_IP], ACCOUNT_INFO[playerid][ac_NAME], ACCOUNT_INFO[playerid][ac_EMAIL], ACCOUNT_INFO[playerid][ac_SALT], ACCOUNT_INFO[playerid][ac_PASS], ACCOUNT_INFO[playerid][ac_ID]);
	Result_reg = db_query(Database, DB_Query);
	
	if(db_num_rows(Result_reg)) db_get_field_assoc(Result, "DATE", ACCOUNT_INFO[playerid][reg_DATE], 24);
	db_free_result(Result_reg);
	
	for(new i = 1; i != sizeof(PLAYER_SKILLS[]); i ++)
	{
		DB_Query[0] = EOS;
		format(DB_Query, sizeof DB_Query, "INSERT INTO `PLAYER_SKILLS` (`ID_USER`, `ID_WORK`, `TOTAL`) VALUES ('%d', '%d', '0');", ACCOUNT_INFO[playerid][ac_ID], i);
		db_query(Database, DB_Query);
	}
	
	DB_Query[0] = EOS;
	format(DB_Query, sizeof DB_Query,
	"\
		INSERT INTO `PERSONAJE`\
		(\
			`ID_USER`, `SKIN`, `CASH`, `POS_X`, `POS_Y`, `POS_Z`, `ANGLE`, `SEX`\
		)\
		VALUES\
		(\
			'%d', '%d', '%d', '%f', '%f', '%f', '%f', '%d'\
		);\
	", ACCOUNT_INFO[playerid][ac_ID], CHARACTER_INFO[playerid][ch_SKIN], CHARACTER_INFO[playerid][ch_CASH], CHARACTER_INFO[playerid][ch_POS][0], CHARACTER_INFO[playerid][ch_POS][1], CHARACTER_INFO[playerid][ch_POS][2], CHARACTER_INFO[playerid][ch_ANGLE], CHARACTER_INFO[playerid][ch_SEX]);
	db_query(Database, DB_Query);
	
	DB_Query[0] = EOS;
	format(DB_Query, sizeof DB_Query, "INSERT INTO `PLAYER_OBJECT` (`ID_USER`) VALUES ('%d');", ACCOUNT_INFO[playerid][ac_ID]);
	db_query(Database, DB_Query);
	
	format( DB_Query, sizeof( DB_Query ), "INSERT INTO `INTOPOS` (PLAYER,ENCASAVIP,INNEGOCIO,ENAPARTAMENTO,ENCASAFACCION) VALUES ('%d','-1','-1','-1','-1')",ACCOUNT_INFO[playerid][ac_ID]);
	db_query(Database, DB_Query );

	new DBResult:Result_pnumber, phone_number;
	Result_pnumber = db_query(Database, "SELECT ABS(RANDOM() % 10000000) AS `NUM` WHERE `NUM` NOT IN (SELECT `PHONE_NUMBER` FROM `PHONE`) LIMIT 1;");
	if(db_num_rows(Result_pnumber)) phone_number = db_get_field_int(Result_pnumber, 0);
	db_free_result(Result_pnumber);
	
	if(phone_number)
	{
		PLAYER_PHONE[playerid][player_phone_VALID] = true;
		PLAYER_PHONE[playerid][player_phone_NUMBER] = phone_number;
		PLAYER_PHONE[playerid][player_phone_STATE] = PHONE_STATE_ON;
		PLAYER_PHONE[playerid][player_phone_VISIBLE_NUMBER] = true;
		RegisterNewPlayerPhone(playerid);
	}
	
	new slot;
	
	PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_VALID] = true;
	format(PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_NAME], 24, "Policia");
	PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_PHONE_NUMBER] = 911;
	RegisterNewPlayerPhoneBook(playerid, slot);
	slot ++;
	
	PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_VALID] = true;
	format(PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_NAME], 24, "Banco");
	PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_PHONE_NUMBER] = 6740;
	RegisterNewPlayerPhoneBook(playerid, slot);
	slot ++;
	
	PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_VALID] = true;
	format(PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_NAME], 24, "Aseguradora");
	PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_PHONE_NUMBER] = 38350;
	RegisterNewPlayerPhoneBook(playerid, slot);
	slot ++;
	
	PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_VALID] = true;
	format(PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_NAME], 24, "Taxi");
	PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_PHONE_NUMBER] = 450;
	RegisterNewPlayerPhoneBook(playerid, slot);
	slot ++;
	
	PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_VALID] = true;
	format(PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_NAME], 24, "Mecanico");
	PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_PHONE_NUMBER] = 570;
	RegisterNewPlayerPhoneBook(playerid, slot);
	slot ++;
	
	PLAYER_TEMP[playerid][pt_USER_EXIT] = true;
	return 1;
}

/*funcion RegistroSelec2(playerid)
{
	if(cache_get_row_count() == 0)
	{
		SendClientMessage(playerid,-1,"Ocurrio un error al seleccionar los datos, consulta con un administrador");
		Kick(playerid);
	}
	else
	{
	    new content[256];
		cache_get_field_content(0, "ID", content);					ACCOUNT_INFO[playerid][ac_ID] = strval(content);
		cache_get_field_content(0, "LAST_CONNECTION", content);		strmid(ACCOUNT_INFO[playerid][ac_LAST_CONNECTION], content, 0, strlen(content), 32);
		ACCOUNT_INFO[playerid][ac_DOUBT_CHANNEL] = true;

	}
	return 1;
}*/

SaveInto(playerid)
{
	if(!PLAYER_TEMP[playerid][pt_USER_LOGGED]) return 0;
	new Query[200];
    format(Query,sizeof(Query),"UPDATE `INTOPOS` SET ENCASAVIP = '%d',INNEGOCIO = '%d',ENAPARTAMENTO = '%d',ENCASAFACCION = '%d' WHERE `PLAYER` = '%d';", 
    	ENCASAVIP[playerid],InNegocio[playerid],ENAPARTAMENTO[playerid],ENCASAFACCION[playerid], ACCOUNT_INFO[playerid][ac_ID]);
	db_query(Database, Query);

	new str[64];
    format(Query, sizeof(Query), "");
    strcat(Query, "UPDATE INTOPOS SET ");
    format(str, 64, "Bacalao = '%d',",PESCADOS_PLAYER[playerid][Bacalao]); strcat(Query, str);
    format(str, 64, "Sardina = '%d',",PESCADOS_PLAYER[playerid][Sardina]); strcat(Query, str);
    format(str, 64, "Anchoa = '%d',",PESCADOS_PLAYER[playerid][Anchoa]); strcat(Query, str);
    format(str, 64, "Atun = '%d',",PESCADOS_PLAYER[playerid][Atun]); strcat(Query, str);
    format(str, 64, "Salmon = '%d',",PESCADOS_PLAYER[playerid][Salmon]); strcat(Query, str);
    format(str, 64, "Carnadas = '%d',",PESCADOS_PLAYER[playerid][Carnadas]); strcat(Query, str);

    //
    format(str, 64, "CARGOS = '%d'",ACCOUNT_INFO[playerid][ac_CARGOS]); strcat(Query, str);
    format(str, 64, " WHERE PLAYER = '%s'", ACCOUNT_INFO[playerid][ac_ID]); strcat(Query, str);
    db_query(Database, Query);
	return 1;
}

LoadInto(playerid)
{
	new Query[256],DBResult:Result;
	format(Query, sizeof(Query), "SELECT * FROM `INTOPOS` WHERE `PLAYER` = '%d'",ACCOUNT_INFO[playerid][ac_ID]);
    Result = db_query(Database, Query);
    if(db_num_rows(Result))
    {
        db_get_field_assoc(Result, "ENCASAVIP", Query, 45); ENCASAVIP[playerid] = strval(Query);
        db_get_field_assoc(Result, "INNEGOCIO", Query, 45); InNegocio[playerid] = strval(Query);
        db_get_field_assoc(Result, "ENAPARTAMENTO", Query, 45); ENAPARTAMENTO[playerid] = strval(Query);
        db_get_field_assoc(Result, "ENCASAFACCION", Query, 45); ENCASAFACCION[playerid] = strval(Query);
        
        ACCOUNT_INFO[playerid][ac_CARGOS] = db_get_field_assoc_int(Result, "CARGOS");

        if(ENCASAVIP[playerid] != -1)
        {
        	SetPlayerVirtualWorld(playerid, ENCASAVIP[playerid]);
    	}
        if(InNegocio[playerid] != -1)
        {
        	SetPlayerVirtualWorld(playerid, InNegocio[playerid]);
    	}
    	if(ENAPARTAMENTO[playerid] != -1)
        {
        	SetPlayerVirtualWorld(playerid, ENAPARTAMENTO[playerid]);
    	}
    	if(ENCASAFACCION[playerid] != -1)
        {
        	SetPlayerVirtualWorld(playerid, ENCASAFACCION[playerid]);
    	}
    	//printf("N: %d | C: %d",InNegocio[playerid],ENCASAVIP[playerid] );
    }
    db_free_result(Result);
	return 1;
}
SaveUserData(playerid)
{
	if(!PLAYER_TEMP[playerid][pt_USER_EXIT] || !PLAYER_TEMP[playerid][pt_USER_LOGGED]) return 0;
	//`LAST_CONNECTION` = CURRENT_TIMESTAMP,
	new DB_Query[1800];
	if(InfoCorredor[playerid][ENCORRE]==true)
	{
		format(DB_Query, sizeof(DB_Query), "\
			UPDATE `CUENTA` SET \
				`IP` = '%q',\
				`NAME` = '%q',\
				`EMAIL` = '%q',\
				`SALT` = '%q',\
				`PASS` = '%q',\
				`LAST_CONNECTION` = '%s',\
				`TIME-PLAYING` = '%d',\
				`LEVEL` = '%d',\
				`REP` = '%d',\
				`STATE` = '%d',\
				`DOUBT_CHANNEL` = '%d',\
				`TIME_FOR_REP` = '%d',\
				`ADMIN_LEVEL` = '%d',\
				`PAYDAY_REP` = '%d' \
			WHERE `ID` = '%d';\
			\
			UPDATE `PERSONAJE` SET \
				`SKIN` = '%d',\
				`CASH` = '%d',\
				`POS_X` = '%f',\
				`POS_Y` = '%f',\
				`POS_Z` = '%f',\
				`ANGLE` = '%f',\
				`STATE` = '%d',\
				`INTERIOR` = '%d',\
				`LOCAL_INTERIOR` = '%d',\
				`FIGHT_STYLE` = '%d',\
				`HEALTH` = '%f',\
				`ARMOUR` = '%f',\
				`SEX` = '%d',\
				`HUNGRY` = '%f',\
				`THIRST` = '%f',\
				`CANSANCIO` = '%f',\
				`BLACK_MARKET_LEVEL` = '%d',\
				`POLICE_JAIL_TIME` = '%d',\
				`POLICE_JAIL_ID` = '%d' \
			WHERE `ID_USER` = '%d';\
			\
			UPDATE `BANK_ACCOUNTS` SET\
				`BALANCE` = '%d' \
			WHERE `ID_ACCOUNT` = '%d';\
			\
			UPDATE `PHONE` SET\
				`PHONE_NUMBER` = '%d',\
				`PHONE_STATE` = '%d',\
				`VISIBLE_NUMBER` = '%d' \
			WHERE `ID_USER` = '%d';\
			\
			UPDATE `PLAYER_OBJECT` SET\
				`GPS` = '%d',\
				`MP3` = '%d',\
				`PHONE_RESOLVER` = '%d' \
			WHERE `ID_USER` = '%d';\
		",
			ACCOUNT_INFO[playerid][ac_IP], ACCOUNT_INFO[playerid][ac_NAME], ACCOUNT_INFO[playerid][ac_EMAIL], ACCOUNT_INFO[playerid][ac_SALT], ACCOUNT_INFO[playerid][ac_PASS],GetFecha(),ACCOUNT_INFO[playerid][ac_TIME_PLAYING], ACCOUNT_INFO[playerid][ac_LEVEL], ACCOUNT_INFO[playerid][ac_REP], ACCOUNT_INFO[playerid][ac_STATE], ACCOUNT_INFO[playerid][ac_DOUBT_CHANNEL], ACCOUNT_INFO[playerid][ac_TIME_FOR_REP], ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL], ACCOUNT_INFO[playerid][ac_PAYDAY_REP], ACCOUNT_INFO[playerid][ac_ID],
			CHARACTER_INFO[playerid][ch_SKIN], CHARACTER_INFO[playerid][ch_CASH], PLAYER_TEMP[playerid][pt_Pos_corre_x],PLAYER_TEMP[playerid][pt_Pos_corre_y],PLAYER_TEMP[playerid][pt_Pos_corre_z], CHARACTER_INFO[playerid][ch_ANGLE], CHARACTER_INFO[playerid][ch_STATE], CHARACTER_INFO[playerid][ch_INTERIOR], CHARACTER_INFO[playerid][ch_INTERIOR_EXTRA], CHARACTER_INFO[playerid][ch_FIGHT_STYLE], CHARACTER_INFO[playerid][ch_HEALTH], CHARACTER_INFO[playerid][ch_ARMOUR],  CHARACTER_INFO[playerid][ch_SEX], CHARACTER_INFO[playerid][ch_HUNGRY], CHARACTER_INFO[playerid][ch_THIRST],CHARACTER_INFO[playerid][CANSANCIO], CHARACTER_INFO[playerid][ch_BLACK_MARKET_LEVEL], CHARACTER_INFO[playerid][ch_POLICE_JAIL_TIME], CHARACTER_INFO[playerid][ch_POLICE_JAIL_ID], ACCOUNT_INFO[playerid][ac_ID],
			BANK_ACCOUNT[playerid][bank_account_BALANCE], BANK_ACCOUNT[playerid][bank_account_ID],
			PLAYER_PHONE[playerid][player_phone_NUMBER], PLAYER_PHONE[playerid][player_phone_STATE], PLAYER_PHONE[playerid][player_phone_VISIBLE_NUMBER], ACCOUNT_INFO[playerid][ac_ID],
			PLAYER_OBJECT[playerid][po_GPS], PLAYER_OBJECT[playerid][po_MP3], PLAYER_OBJECT[playerid][po_PHONE_RESOLVER], ACCOUNT_INFO[playerid][ac_ID]
		);
		db_query(Database, DB_Query);
	}
	else
	{
		format(DB_Query, sizeof(DB_Query), "\
		UPDATE `CUENTA` SET \
			`IP` = '%q',\
			`NAME` = '%q',\
			`EMAIL` = '%q',\
			`SALT` = '%q',\
			`PASS` = '%q',\
			`LAST_CONNECTION` = '%s',\
			`TIME-PLAYING` = '%d',\
			`LEVEL` = '%d',\
			`REP` = '%d',\
			`STATE` = '%d',\
			`DOUBT_CHANNEL` = '%d',\
			`TIME_FOR_REP` = '%d',\
			`ADMIN_LEVEL` = '%d',\
			`PAYDAY_REP` = '%d' \
		WHERE `ID` = '%d';\
		\
		UPDATE `PERSONAJE` SET \
			`SKIN` = '%d',\
			`CASH` = '%d',\
			`POS_X` = '%f',\
			`POS_Y` = '%f',\
			`POS_Z` = '%f',\
			`ANGLE` = '%f',\
			`STATE` = '%d',\
			`INTERIOR` = '%d',\
			`LOCAL_INTERIOR` = '%d',\
			`FIGHT_STYLE` = '%d',\
			`HEALTH` = '%f',\
			`ARMOUR` = '%f',\
			`SEX` = '%d',\
			`HUNGRY` = '%f',\
			`THIRST` = '%f',\
			`CANSANCIO` = '%f',\
			`BLACK_MARKET_LEVEL` = '%d',\
			`POLICE_JAIL_TIME` = '%d',\
			`POLICE_JAIL_ID` = '%d' \
		WHERE `ID_USER` = '%d';\
		\
		UPDATE `BANK_ACCOUNTS` SET\
			`BALANCE` = '%d' \
		WHERE `ID_ACCOUNT` = '%d';\
		\
		UPDATE `PHONE` SET\
			`PHONE_NUMBER` = '%d',\
			`PHONE_STATE` = '%d',\
			`VISIBLE_NUMBER` = '%d' \
		WHERE `ID_USER` = '%d';\
		\
		UPDATE `PLAYER_OBJECT` SET\
			`GPS` = '%d',\
			`MP3` = '%d',\
			`PHONE_RESOLVER` = '%d' \
		WHERE `ID_USER` = '%d';\
		",
			ACCOUNT_INFO[playerid][ac_IP], ACCOUNT_INFO[playerid][ac_NAME], ACCOUNT_INFO[playerid][ac_EMAIL], ACCOUNT_INFO[playerid][ac_SALT], ACCOUNT_INFO[playerid][ac_PASS],GetFecha(),ACCOUNT_INFO[playerid][ac_TIME_PLAYING], ACCOUNT_INFO[playerid][ac_LEVEL], ACCOUNT_INFO[playerid][ac_REP], ACCOUNT_INFO[playerid][ac_STATE], ACCOUNT_INFO[playerid][ac_DOUBT_CHANNEL], ACCOUNT_INFO[playerid][ac_TIME_FOR_REP], ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL], ACCOUNT_INFO[playerid][ac_PAYDAY_REP], ACCOUNT_INFO[playerid][ac_ID],
			CHARACTER_INFO[playerid][ch_SKIN], CHARACTER_INFO[playerid][ch_CASH], CHARACTER_INFO[playerid][ch_POS][0], CHARACTER_INFO[playerid][ch_POS][1], CHARACTER_INFO[playerid][ch_POS][2], CHARACTER_INFO[playerid][ch_ANGLE], CHARACTER_INFO[playerid][ch_STATE], CHARACTER_INFO[playerid][ch_INTERIOR], CHARACTER_INFO[playerid][ch_INTERIOR_EXTRA], CHARACTER_INFO[playerid][ch_FIGHT_STYLE], CHARACTER_INFO[playerid][ch_HEALTH], CHARACTER_INFO[playerid][ch_ARMOUR],  CHARACTER_INFO[playerid][ch_SEX], CHARACTER_INFO[playerid][ch_HUNGRY], CHARACTER_INFO[playerid][ch_THIRST],CHARACTER_INFO[playerid][CANSANCIO], CHARACTER_INFO[playerid][ch_BLACK_MARKET_LEVEL], CHARACTER_INFO[playerid][ch_POLICE_JAIL_TIME], CHARACTER_INFO[playerid][ch_POLICE_JAIL_ID], ACCOUNT_INFO[playerid][ac_ID],
			BANK_ACCOUNT[playerid][bank_account_BALANCE], BANK_ACCOUNT[playerid][bank_account_ID],
			PLAYER_PHONE[playerid][player_phone_NUMBER], PLAYER_PHONE[playerid][player_phone_STATE], PLAYER_PHONE[playerid][player_phone_VISIBLE_NUMBER], ACCOUNT_INFO[playerid][ac_ID],
			PLAYER_OBJECT[playerid][po_GPS], PLAYER_OBJECT[playerid][po_MP3], PLAYER_OBJECT[playerid][po_PHONE_RESOLVER], ACCOUNT_INFO[playerid][ac_ID]
		);
		db_query(Database, DB_Query);
	}
	
	
	

	if(BANK_ACCOUNT[playerid][bank_account_ID] != 0)
	{
		new DBResult:Result;
		format(DB_Query, sizeof DB_Query, 
			
			"DELETE FROM `BANK_TRANSACTIONS` WHERE `ID_ACCOUNT` = '%d' AND `ID_TRANSACTION` NOT IN (SELECT `ID_TRANSACTION` FROM `BANK_TRANSACTIONS` WHERE `ID_ACCOUNT` = '%d' ORDER BY `DATE` DESC LIMIT %d);",
			
			BANK_ACCOUNT[playerid][bank_account_ID], BANK_ACCOUNT[playerid][bank_account_ID], MAX_BANK_TRANSACTIONS_DIALOG
		);
		Result = db_query(Database, DB_Query);
		db_free_result(Result);
	}
	
	if(PLAYER_PHONE[playerid][player_phone_VALID])
	{
		new DBResult:Result;
		format(DB_Query, sizeof DB_Query,
		
			"DELETE FROM `PHONE_MESSAGES` WHERE `FROM` = '%d' AND `ID_MESSAGE` NOT IN (SELECT `ID_MESSAGE` FROM `PHONE_MESSAGES` WHERE `FROM` = '%d' ORDER BY `DATE` DESC LIMIT 10);\
			 DELETE FROM `PHONE_MESSAGES` WHERE `TO` = '%d' AND `ID_MESSAGE` NOT IN (SELECT `ID_MESSAGE` FROM `PHONE_MESSAGES` WHERE `TO` = '%d' ORDER BY `DATE` DESC LIMIT 10);",
			
			PLAYER_PHONE[playerid][player_phone_NUMBER], PLAYER_PHONE[playerid][player_phone_NUMBER],
			PLAYER_PHONE[playerid][player_phone_NUMBER], PLAYER_PHONE[playerid][player_phone_NUMBER]
		);
		Result = db_query(Database, DB_Query);
		db_free_result(Result);
	}
	return 1;
}

SendClientMessageEx(playerid, color, form[], {Float, _}: ...) 
{
    #pragma unused form

    static
        tmp[145]
    ;
    new
        t1 = playerid,
        t2 = color
    ;
    const
        n4 = -4,
        n16 = -16,
        size = sizeof tmp
    ;
    #emit stack 28
    #emit push.c size
    #emit push.c tmp
    #emit stack n4
    #emit sysreq.c format
    #emit stack n16

    return (t1 == -1 ? (SendClientMessageToAll(t2, tmp)) : (SendClientMessage(t1, t2, tmp)) );
}


funcion ResetearActorRobo(actorid)
{
	ACTOR[actorid][ROBADO]=0;
	ACTOR[actorid][STEAL]=false;
	ACTOR[actorid][STATUS]=0;
	ACTOR[actorid][ROBADOPOR] = -1;
	ACTOR[actorid][DEAD]=false;
	ClearActorAnimations(actorid);
	format(string2,sizeof(string2),"{6E6E6E}(%d)\n{FFFFFF}%s",actorid,ACTOR[actorid][NOMBRE]);
	UpdateDynamic3DTextLabelText(ACTOR[actorid][LABEL], -1, string2);
	printf("reseteando actor %d",actorid);
	return 1;
}

forward GetIdActorVar(playerid,apunto);
public GetIdActorVar(playerid,apunto)
{
	new Float:Distance;
	for(new id; id<MAX_ACTORS; id++ )
	{
	    Distance = GetActorID(apunto,id);
	    if(Distance < 1.0 )
	    {
	        return id;
		}
	}
	return -1;
}
 

public Float:GetActorID(apunto,actor_)
{
	new Float:x1,Float:y1,Float:z1;
	new Float:x2, Float:y2, Float:z2;
	GetActorPos(apunto,x1,y1,z1);

	x2 = ACTOR[actor_][_X_];
	y2 = ACTOR[actor_][_Y_];
	z2 = ACTOR[actor_][_Z_];
	return floatsqroot(floatpower(floatabs(floatsub(x2,x1)),2)+floatpower(floatabs(floatsub(y2,y1)),2)+floatpower(floatabs(floatsub(z2,z1)),2));
}

public OnPlayerGiveDamageActor(playerid, damaged_actorid, Float: amount, weaponid, bodypart)
{
	if(IsValidRobo(playerid))
	{
		if(ACTOR[damaged_actorid][ROBAR]==true)
		{
			if(ACTOR[damaged_actorid][DEAD]==false)
			{
				ApplyActorAnimation(ACTOR[damaged_actorid][ID], "PED", "KO_SKID_FRONT", 4.1, 0, 0, 0, 1, 0);
 				ACTOR[damaged_actorid][DEAD]=true;
 				ACTOR[damaged_actorid][ROBADOPOR] = ACCOUNT_INFO[playerid][ac_ID];
 				MensajesAyuda(playerid,"Has comido un homicidio se alertado al departamento de policia");
 				new id = InNegocio[playerid];
				NEGOCIO[id][Lock]=1;
				SetTimerEx("UnLockEmpresa", 300000,false,"i",id);
				ACTOR[damaged_actorid][TIMER] = SetTimerEx("ResetearActorRobo",240000,false,"i",damaged_actorid);
 			}
		}
	}
    return 1;
}
funcion UnLockEmpresa(empresaid)
{
	NEGOCIO[empresaid][Lock]=0;
	return 1;
}

BandaLeader(caid_)
{
	new leadr_;
	new DB_Query[100],DBResult:Result;
	format(DB_Query,sizeof DB_Query,"SELECT RANK FROM PLAYER_CREW WHERE ID_USER='%d';",caid_);
	Result = db_query(Database, DB_Query);
	if(db_num_rows(Result))
	{
		new rankito = db_get_field_assoc_int(Result, "RANK");
		if(rankito == 0)
		{
			leadr_=1;
		}
		else
		{
			leadr_=0;	
		}
	}
	else
	{
		leadr_=0;
	}
	db_free_result(Result);
	return leadr_;
}
//stock productos
ShowProductosFarmacia(playerid, id)
{
	new list[200];
	strcat(list, "# - \tProducto:\tPrecio + IVA:\n");
	for(new i; i < sizeof(ProductosFarmacia); ++i)
	{
		format(list, sizeof(list), "%s%d\t%s\t$%s\n", list, i+1, ProductosFarmacia[i][Nombre],number_format_thousand(GetPorcentaje(ProductosFarmacia[i][Precio],NEGOCIO[id][Iva])));
	}
	ShowPlayerDialog(playerid,DIALOG_PRODUCTOSFARMACIA, DIALOG_STYLE_TABLIST_HEADERS,"| PRODUCTOS |",list,"Comprar","Seguir");
	return 1;
}
ShowProductosHotel(playerid, id)
{
	new list[200];
	strcat(list, "# - \tProducto:\tPrecio + IVA:\n");
	for(new i; i < sizeof(ProductosHotel); ++i)
	{
		format(list, sizeof(list), "%s%d\t%s\t$%s\n", list, i+1, ProductosHotel[i][Nombre],number_format_thousand(GetPorcentaje(ProductosHotel[i][Precio],NEGOCIO[id][Iva])));
	}
	ShowPlayerDialog(playerid,DIALOG_PRODUCTOSHOTEL, DIALOG_STYLE_TABLIST_HEADERS,"| PRODUCTOS |",list,"Comprar","Seguir");
	return 1;
}

ShowProductosCluckin(playerid, id)
{
	new list[200];
	strcat(list, "# - \tProducto:\tPrecio + IVA:\n");
	for(new i; i < sizeof(ProductosCluckin); ++i)
	{
		format(list, sizeof(list), "%s%d\t%s\t$%s\n", list, i+1, ProductosCluckin[i][Nombre],number_format_thousand(GetPorcentaje(ProductosCluckin[i][Precio],NEGOCIO[id][Iva])));
	}
	ShowPlayerDialog(playerid,DIALOG_PRODUCTOSCLUCKIN, DIALOG_STYLE_TABLIST_HEADERS,"| PRODUCTOS |",list,"Comprar","Seguir");
	return 1;
}
ShowProductosPizza(playerid, id)
{
	new list[200];
	strcat(list, "# - \tProducto:\tPrecio + IVA:\n");
	for(new i; i < sizeof(ProductosPizza); ++i)
	{
		format(list, sizeof(list), "%s%d\t%s\t$%s\n", list, i+1, ProductosPizza[i][Nombre],number_format_thousand(GetPorcentaje(ProductosPizza[i][Precio],NEGOCIO[id][Iva])));
	}
	ShowPlayerDialog(playerid,DIALOG_PRODUCTOSPIZZA, DIALOG_STYLE_TABLIST_HEADERS,"| PRODUCTOS |",list,"Comprar","Seguir");
	return 1;
}
ShowProductosBurGuerShot(playerid, id)
{
	new list[200];
	strcat(list, "# - \tProducto:\tPrecio + IVA:\n");
	for(new i; i < sizeof(ProductosBurgerShot); ++i)
	{
		format(list, sizeof(list), "%s%d\t%s\t$%s\n", list, i+1, ProductosBurgerShot[i][Nombre],number_format_thousand(GetPorcentaje(ProductosBurgerShot[i][Precio],NEGOCIO[id][Iva])));
	}
	ShowPlayerDialog(playerid,DIALOG_PRODUCTOSBURGUERSHOT, DIALOG_STYLE_TABLIST_HEADERS,"| PRODUCTOS |",list,"Comprar","Seguir");
	return 1;
}
ShowProductos247(playerid, id)
{
	new list[200];
	strcat(list, "# - \tProducto:\tPrecio + IVA:\n");
	for(new i; i < sizeof(Productos24_7); ++i)
	{
		format(list, sizeof(list), "%s%d\t%s\t$%s\n", list, i+1, Productos24_7[i][Nombre],number_format_thousand(GetPorcentaje(Productos24_7[i][Precio],NEGOCIO[id][Iva])));
	}
	ShowPlayerDialog(playerid,DIALOG_PRODUCTOS, DIALOG_STYLE_TABLIST_HEADERS,"| PRODUCTOS |",list,"Comprar","Seguir");
	return 1;
}

stock Get_Players_With_Stars()
{
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++) 					
	{
		if(PLAYER_WORKS[i][WORK_POLICE] && PLAYER_TEMP[i][pt_WORKING_IN] == WORK_POLICE)
		{
			for(new a = 0, k = GetPlayerPoolSize(); a <= k; a++) 					
			{
				if(PLAYER_TEMP[a][CHECK_RADAR]==true)
		 		{
		 			SetPlayerMarkerForPlayer(i,a,0xEEFF1CFF);
		 		}
		 	}
	 	}
	}
	return 1;	
}
funcion QuickOutStar(playerid)
{
	if(ACCOUNT_INFO[playerid][ac_CARGOS]==1)
	{
		ACCOUNT_INFO[playerid][ac_CARGOS]=0;
		Update_Cargos(playerid);
	}
	return 1;
}
Update_Cargos(playerid)
{
	for(new i=0; i <= 5; i++)
	{
		PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][textdraw_estrellas_buscado][i]);
	}
	if(ACCOUNT_INFO[playerid][ac_CARGOS]==0) KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][26]);
	switch(ACCOUNT_INFO[playerid][ac_CARGOS])
	{
		case 1:	PLAYER_TEMP[playerid][pt_TIMERS][26] = SetTimerEx("QuickOutStar", 300000, false, "i", playerid);										   
	}
	return 1;
}
ptask UpdatePlayerEx[2000](playerid) 
{
 	if(!PLAYER_TEMP[playerid][pt_USER_LOGGED]) return 0;

	if(ACCOUNT_INFO[playerid][ac_CARGOS] >= 1)
	{
		new karen=ACCOUNT_INFO[playerid][ac_CARGOS]-1;
		for(new i=0; i <= karen; i++)
		{
			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][textdraw_estrellas_buscado][i]);
		}
	}
	new stringa[10];
	format(stringa,sizeof stringa,"");
	switch(ACCOUNT_INFO[playerid][ac_ASESINATOS])
	{
		case 0..2: UpdateDynamic3DTextLabelText(PLAYER_TEMP[playerid][pt_LABEL],0x1DF023FF,stringa);
		case 3..4: UpdateDynamic3DTextLabelText(PLAYER_TEMP[playerid][pt_LABEL],0xE6F01DFF,stringa);
		case 5..6: UpdateDynamic3DTextLabelText(PLAYER_TEMP[playerid][pt_LABEL],0xF07A1DFF,stringa);
		case 7..9: UpdateDynamic3DTextLabelText(PLAYER_TEMP[playerid][pt_LABEL],0xFF0000FF,stringa);
		default:   UpdateDynamic3DTextLabelText(PLAYER_TEMP[playerid][pt_LABEL],0x160000FF,stringa);
	}
	new Keysa,fairea,lra;
	GetPlayerKeys(playerid,Keysa,fairea,lra);
	if(Keysa == KEY_YES)
	{
    	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
    	{
    		new vehicleid = GetPlayerVehicleID(playerid),dialog[1200];
    		switch(GLOBAL_VEHICLES[vehicleid][gb_vehicle_TYPE])
    		{
    			case VEHICLE_TYPE_FACCION:
    			{
					new string[200];
		    		format(string,sizeof(string),"Estacion de la radio 	\t%s\n",GetEstacionRadio(vehicleid));
					strcat(dialog, string);
					new formt[20];
					format(formt,sizeof(formt),"{D32B2B}%s",VehicleName[GetVehicleModel(GetPlayerVehicleID(playerid)) - 400]);
			    	ShowPlayerDialog(playerid,DIALOG_MENU_VEHICLE, DIALOG_STYLE_LIST, formt,dialog, "Seguir(>>)","Cerrar");
    			}
    			case VEHICLE_TYPE_WORK:
    			{
					new string[200];
		    		format(string,sizeof(string),"Estacion de la radio 	\t%s\n",GetEstacionRadio(vehicleid));
					strcat(dialog, string);
					new formt[20];
					format(formt,sizeof(formt),"{D32B2B}%s",VehicleName[GetVehicleModel(GetPlayerVehicleID(playerid)) - 400]);
			    	ShowPlayerDialog(playerid,DIALOG_MENU_VEHICLE, DIALOG_STYLE_LIST, formt,dialog, "Seguir(>>)","Cerrar");
    			}
    			case VEHICLE_TYPE_PERSONAL:
    			{
 
		    		new string[200],Baul_Estado[20];
		    		switch(GLOBAL_VEHICLES[vehicleid][gb_vehicle_BAUL])
		    		{
		    			case 0:
		    			{
		    				Baul_Estado="Cerrado";
		    			}
		    			case 1:
		    			{
		    				Baul_Estado="Abierto";
		    			}
		    		}
		    		format(string,sizeof(string),"Mejoras\n");
					strcat(dialog, string);
					format(string,sizeof(string),"Compartir llaves 	\t%d/5\n",GetKeysLimitFromThisVehicle(GLOBAL_VEHICLES[vehicleid][gb_vehicle_ID]));
					strcat(dialog, string);
					format(string,sizeof(string),"Estacion de la radio 	\t%s\n",GetEstacionRadio(vehicleid));
					strcat(dialog, string);
					format(string,sizeof(string),"Baul.				\t%s\n",Baul_Estado);
					strcat(dialog, string);

					new formt[20];
					format(formt,sizeof(formt),"{D32B2B}%s",VehicleName[GetVehicleModel(GetPlayerVehicleID(playerid)) - 400]);
			    	ShowPlayerDialog(playerid,DIALOG_ACTIVE_ACELERACION, DIALOG_STYLE_LIST, formt,dialog, "Seguir(>>)","Cerrar");
		    	}
		    	case VEHICLE_TYPE_RENT:
		    	{
		    		new string[200];
		    		format(string,sizeof(string),"Estacion de la radio 	\t%s\n",GetEstacionRadio(vehicleid));
					strcat(dialog, string);
					format(string,sizeof(string),""R"Desrentar el vehiculo\n");
					strcat(dialog, string);

					new formt[20];
					format(formt,sizeof(formt),"{D32B2B}%s",VehicleName[GetVehicleModel(GetPlayerVehicleID(playerid)) - 400]);
			    	ShowPlayerDialog(playerid,DIALOG_MENU_VEHICLE_RENT, DIALOG_STYLE_LIST, formt,dialog, "Seguir(>>)","Cerrar");
		    	}
	    	}
    	}  
	}


	/**/
	if(EditandoCasaFuera[playerid]==true)
    {
        new id=MapeandoCasa[playerid];
        if(!IsPlayerInRangeOfPoint(playerid, 10.0,CASAVIP[id][CasaX],CASAVIP[id][CasaY],CASAVIP[id][CasaZ]))
		{
		    CancelEdit(playerid);
		    EditandoCasaFuera[playerid]=false;
		    MensajesAyuda(playerid,"La edicion del objeto se cancelo por haberte alejado de tu casa");
		}
    }
	/**/
 	 
	/**/
	for(new i =0; i < sizeof INTERACTUAR; i++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 2, INTERACTUAR[i][PosX],INTERACTUAR[i][PosY],INTERACTUAR[i][PosZ]))
		{
			MensajeTime(playerid,"Oprime 'Y' para interactuar");
		}
	}
	//======================================
	 
 
	if(ENCASAVIP[playerid] != -1)
	{
		for(new i = 0; i < sizeof SALIDACASAVIP; i++)
		{
			if(IsPlayerInRangeOfPoint(playerid,1,SALIDACASAVIP[i][POSX],SALIDACASAVIP[i][POSY],SALIDACASAVIP[i][POSZ]))
			{
				MensajeTime(playerid,"Oprime ~y~ENTER~w~ para salir de la casa");
			}
		}
	}
	if(ENAPARTAMENTO[playerid] != -1)
	{
		for(new i = 0; i < sizeof SALIDAAPARTAMENTOS; i++)
		{
			if(IsPlayerInRangeOfPoint(playerid,1,SALIDAAPARTAMENTOS[i][POSX],SALIDAAPARTAMENTOS[i][POSY],SALIDAAPARTAMENTOS[i][POSZ]))
			{
				MensajeTime(playerid,"Oprime ~y~ENTER~w~ para salir del apartamento");
			}
		}
	}

	/**/
	foreach(new i : ObjetosTirados)
	{
	 	if(IsPlayerInRangeOfPoint(playerid,1.5,PRODUCTORIADO[i][POSX],PRODUCTORIADO[i][POSY],PRODUCTORIADO[i][POSZ]))
	 	{
	 		MensajeTime(playerid,"Oprime ~y~ALT~w~ para recojer el objeto");
	 	}
	}
	foreach(new i : Negocios)
	{
		if(IsPlayerInRangeOfPoint(playerid,1.5,NEGOCIO[i][EmpresaX],NEGOCIO[i][EmpresaY],NEGOCIO[i][EmpresaZ]))
		{
			MensajeTime(playerid,"Oprime ~y~ENTER~w~ para entrar al negocio");
		}
	}
	if(InNegocio[playerid] != -1)
	{
		/**/
		for(new i = 0; i < sizeof SALIDALUGAR; i++)
		{
			if(IsPlayerInRangeOfPoint(playerid,1,SALIDALUGAR[i][xXx],SALIDALUGAR[i][yYy],SALIDALUGAR[i][zZz]))
			{
				MensajeTime(playerid,"Oprime ~y~ENTER~w~ para salir");
			}
		}
		/**/
	}
 
 	if(EscuchandoAlarma[playerid]==false) //Detectamos si no esta escuchando algun parlante y evadimos la consulta para evitar tanto lag
	{
		foreach(new i : Negocios)
		{
			if(NEGOCIO[i][Lock]==1)
			{
				if(IsPlayerInRangeOfPoint(playerid,35,NEGOCIO[i][EmpresaX],NEGOCIO[i][EmpresaY],NEGOCIO[i][EmpresaZ]))
				{
					AlarmaPos[playerid][0] = NEGOCIO[i][EmpresaX];
			        AlarmaPos[playerid][1] = NEGOCIO[i][EmpresaY];
			        AlarmaPos[playerid][2] = NEGOCIO[i][EmpresaZ];

					EscuchandoAlarma[playerid]=true;
					PlayerPlaySound(playerid, 3401 ,NEGOCIO[i][EmpresaX],NEGOCIO[i][EmpresaY],NEGOCIO[i][EmpresaZ]);
				}
			}
		}
	}
	else if(EscuchandoAlarma[playerid]==true)
	{
	    if(!IsPlayerInRangeOfPoint(playerid, 35.0,AlarmaPos[playerid][0],AlarmaPos[playerid][1],AlarmaPos[playerid][2]))
		{
		    PlayerPlaySound(playerid, 0, 0.0, 0.0, 0.0);
		    EscuchandoAlarma[playerid]=false;
		}
	}
	/**/

	if(PLAYER_TEMP[playerid][CHECK_RADAR]==true)
	{
		if(!IsPlayerInRangeOfPoint(playerid, 201, PLAYER_TEMP[playerid][RADAR_CHECK_POS_X], PLAYER_TEMP[playerid][RADAR_CHECK_POS_Y], PLAYER_TEMP[playerid][RADAR_CHECK_POS_Z]))
		{

			for(new a = 0, k = GetPlayerPoolSize(); a <= k; a++) 					
			{
				if(PLAYER_WORKS[a][WORK_POLICE] && PLAYER_TEMP[a][pt_WORKING_IN] == WORK_POLICE)
				{
			 		SetPlayerMarkerForPlayer(a,playerid,0xE9E9E900);
		 		}
		 	}

			PLAYER_TEMP[playerid][CHECK_RADAR]=false;
			MensajesAyuda(playerid,"Saliste del radar");
			Get_Players_With_Stars();
		}
	}

	/**/
	if(InNegocio[playerid] != -1)
	{
	 	new actorid = GetPlayerTargetActor(playerid); 
		//================================================= Robos a los 24/7
		if(IsValidRobo(playerid))
		{
			if(IsValidActor(actorid))
	    	{
	    		//SendClientMessageEx(playerid,-1,"Apuntando al actor: %d",actorid);

				if(ACTOR[actorid][ROBAR]==false) return MensajeTime(playerid,"No se puede robar a este personaje del juego");
				if(ACTOR[actorid][ROBAR]==true)
				{
					
					if(ACTOR[actorid][DEAD]==true && ACTOR[actorid][ROBADOPOR] != ACCOUNT_INFO[playerid][ac_ID]) return MensajeTime(playerid,"El vendedor fue asesinado, llama a la policia");
					if(ACTOR[actorid][DEAD]==true && ACTOR[actorid][ROBADOPOR] == ACCOUNT_INFO[playerid][ac_ID]) return MensajeTime(playerid,"Asesinaste al vendedor vete o te pueden capturar por homicidio");
					if(ACTOR[actorid][DEAD]==false)
					{
						if(ACTOR[actorid][ROBADO]==1) return MensajeTime(playerid,"El lugar fue robado, vete o te pueden capturar por sospechoso");
						if(ACTOR[actorid][ROBADO]==0)
						{
							if(ACTOR[actorid][STEAL]==false)
							{
								ACTOR[actorid][ROBADOPOR] = ACCOUNT_INFO[playerid][ac_ID];
								if(InNegocio[playerid] != -1)
								{
									new id = InNegocio[playerid];
									NEGOCIO[id][Lock]=1;
									SetTimerEx("UnLockEmpresa", 300000,false,"i",id);
								}

							}
							
							ACTOR[actorid][STATUS]++;
							ACTOR[actorid][STEAL]=true;
							KillTimer(ACTOR[actorid][TIMER]);
							ACTOR[actorid][TIMER] = SetTimerEx("ResetearActorRobo",240000,false,"i",actorid);
							if(ACTOR[actorid][ROBADOPOR] != ACCOUNT_INFO[playerid][ac_ID])  return MensajeTime(playerid,"Alguien mas esta robando el lugar");
							if(ACTOR[actorid][ROBADOPOR] == ACCOUNT_INFO[playerid][ac_ID])
							{
								if(ACTOR[actorid][STEAL]==true)
								{
									switch(ACTOR[actorid][STATUS])
									{
										case 1: 
										{
											foreach(new i : Player)
											{
												if(InNegocio[i] == InNegocio[playerid])
												{
													PlayerPlaySound(i, 3401 ,0,0,0);
												}
											}
											ACCOUNT_INFO[playerid][ac_CARGOS] += 1;
											Update_Cargos(playerid);

											//new id=InNegocio[playerid];
											/*new GPS_EX[MAX_ZONE_NAME];
	 										GetZoneName(NEGOCIO[id][EmpresaX],NEGOCIO[id][EmpresaY], GPS_EX, MAX_ZONE_NAME);*/

											new city[45], zone[45];
											GetPlayerZones(playerid, city, zone);

											format(string2,sizeof(string2),"{01DF01}[CENTRAL]: (%s) esta causando disturbios, en un negocio de (%s), ubicado en (%s, %s)",PLAYER_TEMP[playerid][pt_NAME],NEGOCIO[InNegocio[playerid]][Nombre],city,zone);
											SendPoliceRadioMessage(-1, -1, string2);
											MensajeTime(playerid,"Apuntale al vendedor hasta que te entregue todo el dinero de la caja");
											UpdateDynamic3DTextLabelText(ACTOR[actorid][LABEL], 0xFFFFFFFF, "¡Oh señor por favor\nno me haga daño!");
											ApplyActorAnimation(ACTOR[actorid][ID], "SHOP", "SHP_ROB_REACT", 4.1, false, false, false, 1, 0);
										}
										case 2:
										{
											new randomrobo1=random(100);
											new randomrobo=50;
											randomrobo = randomrobo + randomrobo1;
											format(string2,sizeof(string2),"%s le entrega\n{01DF01}$%s {ffffff}de dinero a {CCCCCC}%s",ACTOR[actorid][NOMBRE],number_format_thousand(randomrobo),ACCOUNT_INFO[playerid][ac_NAME]);
											UpdateDynamic3DTextLabelText(ACTOR[actorid][LABEL], 0xCCCCCCFF,string2);
											ApplyActorAnimation(ACTOR[actorid][ID], "SHOP", "SHP_ROB_GIVECASH", 4.1, false, false, false, false, 0);
											GivePlayerCash(playerid,randomrobo);
										}
										case 4:
										{
											new randomrobo1=random(100);
											new randomrobo=50;
											randomrobo = randomrobo + randomrobo1;
											format(string2,sizeof(string2),"%s le entrega\n{01DF01}$%s {ffffff}de dinero a {CCCCCC}%s",ACTOR[actorid][NOMBRE],number_format_thousand(randomrobo),ACCOUNT_INFO[playerid][ac_NAME]);
											UpdateDynamic3DTextLabelText(ACTOR[actorid][LABEL], 0xCCCCCCFF,string2);
											ApplyActorAnimation(ACTOR[actorid][ID], "SHOP", "SHP_ROB_GIVECASH", 4.1, false, false, false, false, 0);
											GivePlayerCash(playerid,randomrobo);
										}
										case 6:
										{
											new randomrobo1=random(100);
											new randomrobo=50;
											randomrobo = randomrobo + randomrobo1;
											format(string2,sizeof(string2),"%s le entrega\n{01DF01}$%s {ffffff}de dinero a {CCCCCC}%s",ACTOR[actorid][NOMBRE],number_format_thousand(randomrobo),ACCOUNT_INFO[playerid][ac_NAME]);
											UpdateDynamic3DTextLabelText(ACTOR[actorid][LABEL], 0xCCCCCCFF,string2);
											ApplyActorAnimation(ACTOR[actorid][ID], "SHOP", "SHP_ROB_GIVECASH", 4.1, false, false, false, false, 0);
											GivePlayerCash(playerid,randomrobo);
										}
										case 8:
										{
											new randomrobo1=random(100);
											new randomrobo=50;
											randomrobo = randomrobo + randomrobo1;
											format(string2,sizeof(string2),"%s le entrega\n{01DF01}$%s {ffffff}de dinero a {CCCCCC}%s",ACTOR[actorid][NOMBRE],number_format_thousand(randomrobo),ACCOUNT_INFO[playerid][ac_NAME]);
											UpdateDynamic3DTextLabelText(ACTOR[actorid][LABEL], 0xCCCCCCFF,string2);
											ApplyActorAnimation(ACTOR[actorid][ID], "SHOP", "SHP_ROB_GIVECASH", 4.1, false, false, false, false, 0);
											GivePlayerCash(playerid,randomrobo);
										}
										case 10:
										{
											new randomrobo1=random(100);
											new randomrobo=50;
											randomrobo = randomrobo + randomrobo1;
											format(string2,sizeof(string2),"%s le entrega\n{01DF01}$%s {ffffff}de dinero a {CCCCCC}%s",ACTOR[actorid][NOMBRE],number_format_thousand(randomrobo),ACCOUNT_INFO[playerid][ac_NAME]);
											UpdateDynamic3DTextLabelText(ACTOR[actorid][LABEL], 0xCCCCCCFF,string2);
											ApplyActorAnimation(ACTOR[actorid][ID], "SHOP", "SHP_ROB_GIVECASH", 4.1, false, false, false, false, 0);
											GivePlayerCash(playerid,randomrobo);
										}
										case 12:
										{
											new randomrobo1=random(100);
											new randomrobo=50;
											randomrobo = randomrobo + randomrobo1;
											format(string2,sizeof(string2),"%s le entrega\n{01DF01}$%s {ffffff}de dinero a {CCCCCC}%s",ACTOR[actorid][NOMBRE],number_format_thousand(randomrobo),ACCOUNT_INFO[playerid][ac_NAME]);
											UpdateDynamic3DTextLabelText(ACTOR[actorid][LABEL], 0xCCCCCCFF,string2);
											ApplyActorAnimation(ACTOR[actorid][ID], "SHOP", "SHP_ROB_GIVECASH", 4.1, false, false, false, false, 0);
											GivePlayerCash(playerid,randomrobo);
										}
										case 14:
										{
											ACTOR[actorid][ROBADO]=1;
											UpdateDynamic3DTextLabelText(ACTOR[actorid][LABEL], 0xFFFFFFFF, "¡Ya señor no queda mas dinero\npor favor no me haga daño!");
											ApplyActorAnimation(ACTOR[actorid][ID], "SHOP", "SHP_ROB_REACT", 4.1, false, false, false, 1, 0);
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}

	for(new i = 0; i < sizeof RADARCHECK; i++)
	{
		if (gettime() - 4 < RADARCHECK_[playerid]) return 1;
		RADARCHECK_[playerid] = gettime();

		if(IsPlayerInRangeOfPoint(playerid,200,RADARCHECK[i][xXx],RADARCHECK[i][yYy],RADARCHECK[i][zZz]))
		{
			if(ACCOUNT_INFO[playerid][ac_CARGOS] >= 1 && PLAYER_TEMP[playerid][CHECK_RADAR]==false)
			{
				new city[45], zone[45];
				GetPlayerZones(playerid, city, zone);

				format(string2,sizeof(string2),"{01DF01}[CENTRAL]: (%s) fue detectado por un radar en la zona: (%s, %s) | Extrellas de busqueda = (%d)",PLAYER_TEMP[playerid][pt_NAME],city,zone,ACCOUNT_INFO[playerid][ac_CARGOS]);
				SendPoliceRadioMessage(-1, -1, string2);
				MensajesAyuda(playerid,"~r~~h~~h~Fuiste detectado por un radar, se a dado aviso a las autoridades");
				PLAYER_TEMP[playerid][RADAR_CHECK_POS_X] = RADARCHECK[i][xXx];
				PLAYER_TEMP[playerid][RADAR_CHECK_POS_Y] = RADARCHECK[i][yYy];
				PLAYER_TEMP[playerid][RADAR_CHECK_POS_Z] = RADARCHECK[i][zZz];
				PLAYER_TEMP[playerid][CHECK_RADAR]=true;
				Get_Players_With_Stars();
			}
		}
	}
	return 1;
}
IsValidRobo(playerid)
{
	new valid=0;
	if(GetPlayerWeapon(playerid) == 4 || GetPlayerWeapon(playerid) == 22 || GetPlayerWeapon(playerid) == 23 || GetPlayerWeapon(playerid) == 24 ||
		GetPlayerWeapon(playerid) == 25 || GetPlayerWeapon(playerid) == 26 || GetPlayerWeapon(playerid) == 27 || GetPlayerWeapon(playerid) == 28
		|| GetPlayerWeapon(playerid) == 29 || GetPlayerWeapon(playerid) == 30 || GetPlayerWeapon(playerid) == 31 || GetPlayerWeapon(playerid) == 32
		|| GetPlayerWeapon(playerid) == 33)
	{
		valid=1;	
	}
	return valid;
}
MensajeTime(playerid,text[])
{
	if (gettime() - 8 < MensajeAyuda[playerid]) return 1;
	MensajesAyuda(playerid,text);
	MensajeAyuda[playerid] = gettime();
	return 1;
}


 

stock GetZoneName(Float:x, Float:y, zone[], len) //Credits to Cueball, Betamaster, Mabako, and Simon (for finetuning).
{
 	for(new i = 0; i != sizeof(gSAZones); i++ )
 	{
		if(x >= gSAZones[i][SAZONE_AREA][0] && x <= gSAZones[i][SAZONE_AREA][3] && y >= gSAZones[i][SAZONE_AREA][1] && y <= gSAZones[i][SAZONE_AREA][4])
		{
		    return format(zone, len, gSAZones[i][SAZONE_NAME], 0);
		}
	}
	return 0;
}

stock GetPlayer2DZone(playerid, zone[], len) //Credits to Cueball, Betamaster, Mabako, and Simon (for finetuning).
{
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
 	for(new i = 0; i != sizeof(gSAZones); i++ )
 	{
		if(x >= gSAZones[i][SAZONE_AREA][0] && x <= gSAZones[i][SAZONE_AREA][3] && y >= gSAZones[i][SAZONE_AREA][1] && y <= gSAZones[i][SAZONE_AREA][4])
		{
		    return format(zone, len, gSAZones[i][SAZONE_NAME], 0);
		}
	}
	return 0;
}

stock GetPlayer3DZone(playerid, zone[], len) //Credits to Cueball, Betamaster, Mabako, and Simon (for finetuning).
{
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
 	for(new i = 0; i != sizeof(gSAZones); i++ )
 	{
		if(x >= gSAZones[i][SAZONE_AREA][0] && x <= gSAZones[i][SAZONE_AREA][3] && y >= gSAZones[i][SAZONE_AREA][1] && y <= gSAZones[i][SAZONE_AREA][4] && z >= gSAZones[i][SAZONE_AREA][2] && z <= gSAZones[i][SAZONE_AREA][5])
		{
		    return format(zone, len, gSAZones[i][SAZONE_NAME], 0);
		}
	}
	return 0;
}

stock Get3DZone(Float:x, Float:y, Float:z, zone[], len) //Credits to Cueball, Betamaster, Mabako, and Simon (for finetuning).
{
 	for(new i = 0; i != sizeof(gSAZones); i++ )
 	{
		if(x >= gSAZones[i][SAZONE_AREA][0] && x <= gSAZones[i][SAZONE_AREA][3] && y >= gSAZones[i][SAZONE_AREA][1] && y <= gSAZones[i][SAZONE_AREA][4] && z >= gSAZones[i][SAZONE_AREA][2] && z <= gSAZones[i][SAZONE_AREA][5])
		{
		    return format(zone, len, gSAZones[i][SAZONE_NAME], 0);
		}
	}
	return 0;
}

stock IsPlayerInZone(playerid, zone[]) //Credits to Cueball, Betamaster, Mabako, and Simon (for finetuning).
{
	new TmpZone[MAX_ZONE_NAME];
	GetPlayer3DZone(playerid, TmpZone, sizeof(TmpZone));
	for(new i = 0; i != sizeof(gSAZones); i++)
	{
		if(strfind(TmpZone, zone, true) != -1)
			return 1;
	}
	return 0;
}


forward CheckChoque(playerid);
public CheckChoque(playerid)
{
    new Float:ovx, Float:ovy, Float:ovz;
    if(IsPlayerInAnyVehicle(playerid))
    {
        GetVehicleVelocity(GetPlayerVehicleID(playerid), ovx, ovy, ovz);
        if(ovx < -0.4 || ovx > 0.4 || ovy < -0.4 || ovy > 0.4 && !IsSpeeding[playerid])
        {
            CrashTimer[playerid] = SetTimerEx("Speeding", 100, 1, "i", playerid);
            IsSpeeding[playerid] = true;
        }
        else
        {
            KillTimer(CrashTimer[playerid]);
            IsSpeeding[playerid] = false;
        }
    }
    return 1;
}
 
forward Speeding(playerid);
public Speeding(playerid)
{
    new Float:nvx, Float:nvy, Float:nvz;
    if(IsPlayerInAnyVehicle(playerid) && IsSpeeding[playerid])
    {
        GetVehicleVelocity(GetPlayerVehicleID(playerid), nvx, nvy, nvz);
        if(nvx > -0.1 && nvx < 0.1 && nvy > -0.1 && nvy < 0.1)
        {
            new Float:crashhealth;
            GetPlayerHealth(playerid, crashhealth);
            crashhealth = crashhealth - 10.0;
            SetPlayerHealth(playerid, crashhealth);
        	SetPlayerDrunkLevel(playerid, 50000);
        	SetTimerEx("StopCameraEffect", 5000, 0, "i", playerid);
            IsSpeeding[playerid] = false;

            new action[64];
			format(action, sizeof action, "%s choca y queda mareado por el golpe");
			Auto_SendPlayerAction(playerid, action);
        }
    }
    return 1;
}

GastarRp(playerid,rp_)
{
	if(!PLAYER_TEMP[playerid][pt_USER_LOGGED]) return 0;
	SendClientMessageEx(playerid,-1,"Gastaste %d "SERVER_COIN"",rp_);
	ACCOUNT_INFO[playerid][ac_SD] = ACCOUNT_INFO[playerid][ac_SD] - rp_;
	return 1;
}

DarRp(playerid,rp_)
{
	if(!PLAYER_TEMP[playerid][pt_USER_LOGGED]) return 0;
	SendClientMessageEx(playerid,-1,"Recibiste: %d "SERVER_COIN"",rp_);
	ACCOUNT_INFO[playerid][ac_SD] = ACCOUNT_INFO[playerid][ac_SD] + rp_;
	return 1;
}
stock IsNumeric(const string[])
{
	new length=strlen(string);
	if (length==0) return false;
	for (new i = 0; i < length; i++)
	{
		if (
		(string[i] > '9' || string[i] < '0' && string[i]!='-' && string[i]!='+') //Not a number,'+' or '-'
		|| (string[i]=='-' && i!=0)                                             //A '-' but not at first.
		|| (string[i]=='+' && i!=0)                                             //A '+' but not at first.
		) return false;
	}
	if (length==1 && (string[0]=='-' || string[0]=='+')) return false;
	return true;
}
forward StopCameraEffect(playerid);
public StopCameraEffect(playerid)
{
    SetPlayerDrunkLevel(playerid, 0);
    return 1;
}
GetOffIdPlayer(player)
{
	new id=0;
	new DBResult:Result,cnect,Query[256];
	format(Query, sizeof(Query), "SELECT PLAYERID,CONNECTED FROM `CUENTA` WHERE `ID` = '%d';",player);
    Result = db_query(Database, Query);
	if(db_num_rows(Result))
    {
    	db_get_field_assoc(Result, "PLAYERID",Query, 30); id = strval(Query);
		db_get_field_assoc(Result, "CONNECTED",Query, 30); cnect = strval(Query);
		if(cnect==0)
		{
			id=0;
		}
    }
    else
    {
        id = 0;
    }
    db_free_result(Result);
	return id;
}
funcion StartTutorial(playerid)
{
	PLAYER_TEMP[playerid][line_tutorial]++;
	new td_str[200];
	switch(PLAYER_TEMP[playerid][line_tutorial])
	{
		case 1:format(td_str, sizeof td_str, "Bienvenido al servidor, a continuacion de diremos un poco de lo que trata nuestro servidor");
		case 2:format(td_str, sizeof td_str, "Servidor tipo ROL, (ROLEPLAY): es un modo de juego donde simulas lo que haces en tu vida cotidiana comer,trabajar,dormir etc.");
		case 3:format(td_str, sizeof td_str, "Debes seguir el ROL establecido por el servidor o seras baneado o expulsado del servidor");
		case 4:format(td_str, sizeof td_str, "No puedes hacer cosas que no arias en tu vida cotidiana porque seras baneado, ejemplo: Atacar sin razon una persona.");
		case 5:format(td_str, sizeof td_str, "Inventario, en el inventario se guardan todos los items consumibles que compres en las tiendas, parar verlo presiona la tecla 'N'");
		case 6:format(td_str, sizeof td_str, "Puedes comprar alimentos, vehiculos, casas, apartamentos, armas, drogas, medicamentos");
		case 7:format(td_str, sizeof td_str, "Recuerda seguir las reglas al pie del ROL para disfrutar mas a gusto del servidor, de no ser asi seras baneado.");
		case 8:format(td_str, sizeof td_str, "Puedes comprar un celular, gps etc en las tiendas 24/7 del juego");
		case 9:format(td_str, sizeof td_str, "Puedes comprar comida en las tienda espendedoras como Burgershots, Pizzerias, CluckinBells etc.");
		case 10:format(td_str, sizeof td_str, "Para cambiarte la ropa debes dirigirte a cualquier tienda de ropa, puedes localizarlas desde el GPS");
		case 11:format(td_str, sizeof td_str, "Puedes ponerte accesorios desde el comando /accesorios todos los accesorios tienen un costo de "SERVER_COIN"");
		case 12:format(td_str, sizeof td_str, "Puedes comprar una casa,mansion,departamento podras cambiarle el color a las paredes,piso,techo,sillas etc, tambien..");
		case 13:format(td_str, sizeof td_str, "Tambien puedes guardar la comida y armas darle llaves a otro jugador puedes vender la casa desde la misma casa a otro jugador");
		case 14:format(td_str, sizeof td_str, "Puedes comprar un celular, gps etc en las tiendas 24/7 del juego");
		case 15:format(td_str, sizeof td_str, "Puedes comprar vehiculos desde cualquier concesonario los cuales los localizas desde el GPS, puedes guardar tus armas en el maletero");
		case 16:format(td_str, sizeof td_str, "Esperemos que disfrutes del servidor, cualquier duda o inconveniente usa el comando /Duda para pregunta a otros jugadores.");
		case 17:format(td_str, sizeof td_str, "Usa el comando /Ayuda para recibir mas ayuda del servidor.");
		case 18:format(td_str, sizeof td_str, "Presiona la tecla 'H' para abrir el menu mas rapidiamente.");
		case 19:format(td_str, sizeof td_str, "Presiona la tecla 'T' para escribir en el chat o ejecutar comandos.");
		case 20:format(td_str, sizeof td_str, "Te deseamos mucha suerte y exito en el servidor");
		case 21: KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][21]), PlayerTextDrawHide(playerid,PlayerTextdraws[playerid][Textdrawtutorial]);
	}
	PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][Textdrawtutorial], td_str);
	PlayerTextDrawShow(playerid,PlayerTextdraws[playerid][Textdrawtutorial]);
	PlayerPlaySound(playerid, 1132, 0,0,0);
	return 1;
}

stock GetXYInFrontOfPlayer(playerid, &Float:x, &Float:y, Float:distance)
{
	new Float:a;
	GetPlayerPos(playerid, x, y, a);

	if(GetPlayerVehicleID(playerid)) { GetVehicleZAngle(GetPlayerVehicleID(playerid), a); }

	GetPlayerFacingAngle(playerid, a);
	x += (distance * floatsin(-a, degrees));
	y += (distance * floatcos(-a, degrees));
}

funcion RepariVehicl(playerid,vehicleid)
{
	ClearAnimations(playerid);
	if(Equiped_Inventary[playerid][VALID_EQUIPED]==true)
	{
		if(!GLOBAL_VEHICLES[ vehicleid ][gb_vehicle_VALID]) return 1;			
		new Float:Vehicle_Pos[3];
		GetVehiclePos(vehicleid, Vehicle_Pos[0], Vehicle_Pos[1], Vehicle_Pos[2]);
		if(!IsPlayerInRangeOfPoint(playerid, 5.0, Vehicle_Pos[0], Vehicle_Pos[1], Vehicle_Pos[2])) return SendClientMessage(playerid, -1, "{00FF80}El vehículo está demasiado lejos.");
		GameTextForPlayer(playerid,"~n~~n~~n~~n~~g~Vehiculo reparado",3000,3);
		RepairVehicleTruel(vehicleid);
		SendAndReduceInventary(playerid, Equiped_Inventary[playerid][TYPE] , INVENTARIOPLAYER[ Equiped_Inventary[playerid][TYPE] ][TIPODECONSUMO]);
	}
	return 1;
}
 
 GetRandomHexa()
{
    new Coloruwu = random(24),string[15];
    switch(Coloruwu)
    {
        case 0: format(string,15,"{FF0000}");
        case 1: format(string,15,"{FF4000}");
        case 2: format(string,15,"{FE9A2E}");
        case 3: format(string,15,"{FACC2E}");
        case 4: format(string,15,"{FFFF00}");
        case 5: format(string,15,"{BFFF00}");
        case 6: format(string,15,"{80FF00}");
        case 7: format(string,15,"{40FF00}");
        case 8: format(string,15,"{00FF00}");
        case 9: format(string,15,"{00FF40}");
        case 10: format(string,15,"{00FF80}");
        case 11: format(string,15,"{00FFBF}");
        case 12: format(string,15,"{00FFFF}");
        case 13: format(string,15,"{00BFFF}");
        case 14: format(string,15,"{0080FF}");
        case 15: format(string,15,"{0040FF}");
        case 16: format(string,15,"{0000FF}");
        case 17: format(string,15,"{7401DF}");
        case 18: format(string,15,"{BF00FF}");
        case 19: format(string,15,"{FF00FF}");
        case 20: format(string,15,"{FF00BF}");
        case 21: format(string,15,"{FF0080}");
        case 23: format(string,15,"{FF0040}");
        case 24: format(string,15,"{848484}");
    }
    return string;
}

funcion OfertaPerdida(playerid)
{
	if(ofertador[playerid] != INVALID_PLAYER_ID)
	{
		ofertador[playerid] = INVALID_PLAYER_ID;
		GuardaEspalda[playerid] = INVALID_PLAYER_ID;
	}
	return 1;
}

funcion InvitacionFaccionperdida(playerid)
{
	if(InvitadoFaccion[playerid] == true)
	{
		InvitadoFaccion[playerid]=false;
		InvitoAFaccion[playerid] = INVALID_PLAYER_ID;
	}
	return 1;
}
 
ShowBaulVehicle(playerid,vehicleid)
{
	if(ACCOUNT_INFO[playerid][ac_ID]== 0) return 1;
	for(new a=0; a < 29; a++) TextDrawSetPreviewModel(Jugador_Textdraws[playerid][textdraw_baul_vehiculo][a], 18670);
	SelectTextDraw(playerid,0xB00000FF);
	new query[256],DBResult:Result;
	format(query,sizeof(query),"~w~Baul~r~~h~ %s",VEHICLE_INFO[GLOBAL_VEHICLES[vehicleid][gb_vehicle_MODELID] - 400][vehicle_info_NAME]);
	TextDrawSetString(Jugador_Textdraws[ playerid ][textdraw_baul_vehiculo][1], query);
	for(new i=2; i < 14; i++) TO_X_VENTARIO[playerid][ ID ][ i ] = INVALID_ID;
	for(new i=15;i < 27; i++) TO_INVENTARIO_X[playerid][ ID ][ i ] = INVALID_ID;
	//Inventario
    format(query,sizeof(query),"SELECT * FROM INVENTARIO WHERE PLAYER = '%d';",ACCOUNT_INFO[playerid][ac_ID]);
    Result = db_query(Database,query);
    new empeza=1;
    for(new i; i < db_num_rows(Result); i++)
    {
 		empeza++;
 		TO_X_VENTARIO[playerid][TIPO][empeza] = db_get_field_assoc_int(Result, "TIPO");
	    TO_X_VENTARIO[playerid][ID][empeza] = db_get_field_assoc_int(Result, "ID");
	    TO_X_VENTARIO[playerid][STATUS][empeza] = db_get_field_assoc_int(Result, "ESTADO");
	    TO_X_VENTARIO[playerid][VALID][ empeza ] = true;
	    TextDrawSetPreviewModel(Jugador_Textdraws[playerid][textdraw_baul_vehiculo][empeza], INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][empeza] ][OBJETO]);
	    db_next_row(Result);
    }
    db_free_result(Result);
 	//Baul vehiculo
    format(query,sizeof(query),"SELECT * FROM BAUL WHERE VEHICULO_ID = '%d';",GLOBAL_VEHICLES[ vehicleid ][gb_vehicle_ID]);
    Result = db_query(_DB_,query);
    empeza=14;
    for(new i; i < db_num_rows(Result); i++)
    {
    	empeza++;
	    TO_INVENTARIO_X[playerid][TIPO][empeza] = db_get_field_assoc_int(Result, "ITEM");
	    TO_INVENTARIO_X[playerid][ID][empeza] = db_get_field_assoc_int(Result, "ID");
	    TO_INVENTARIO_X[playerid][STATUS][empeza] = db_get_field_assoc_int(Result, "USOS");
	    TO_INVENTARIO_X[playerid][VALID][ empeza ] = true;
	    TextDrawSetPreviewModel(Jugador_Textdraws[playerid][textdraw_baul_vehiculo][empeza], INVENTARIOPLAYER[ TO_INVENTARIO_X[playerid][TIPO][empeza] ][OBJETO]);
	    db_next_row(Result);
    }
    db_free_result(Result);
    PLAYER_TEMP[playerid][BAUL_VEHICLE] = vehicleid;
    PLAYER_TEMP[playerid][ABRIENDO_BAUL] = true;
	for(new i=0; i < 29 ; i ++) TextDrawShowForPlayer(playerid,Jugador_Textdraws[playerid][textdraw_baul_vehiculo][i]);
	return 1;
}
Hide_Baul_Vehicle(playerid)
{
	PLAYER_TEMP[playerid][ABRIENDO_BAUL] = false;
	CancelSelectTextDraw(playerid);
	for(new i=0; i < 29 ; i ++) TextDrawHideForPlayer(playerid,Jugador_Textdraws[playerid][textdraw_baul_vehiculo][i]);
	return 1;
}

Send_Armario_To_Inventario(playerid, idd)
{
	if(GetCountInventary(playerid) >= Max_Slots_For_Invetary) return MensajesAyuda(playerid,"Inventario lleno");
	new DB_Query[256];
	format(DB_Query,sizeof(DB_Query),"INSERT INTO `INVENTARIO` (`ID`,`PLAYER`,`TIPO`,`ESTADO`) VALUES ('%d','%d','%d','%d')",
	TO_INVENTARIO_X[playerid][ID][ idd ],
	ACCOUNT_INFO[playerid][ac_ID],
	TO_INVENTARIO_X[playerid][TIPO][ idd ],
	TO_INVENTARIO_X[playerid][STATUS][ idd ]);
	db_query(Database,DB_Query);
	new action[84];
	format(action, sizeof action, "saca del armario un '%s' y lo guarda en su inventario *",INVENTARIOPLAYER[ TO_INVENTARIO_X[playerid][TIPO][ idd ] ][ NOMBRE ]);
	Auto_SendPlayerAction(playerid, action);
	format(DB_Query,sizeof(DB_Query),"DELETE FROM ARMARIO_CASA WHERE ID='%d';",TO_INVENTARIO_X[playerid][ID][ idd ]);
	db_query(_DB_, DB_Query);
	for(new a=0; a < 29; a++) TextDrawSetPreviewModel(Jugador_Textdraws[playerid][textdraw_armario][a], 18670);
	Update_Armario_CasaVip(playerid);
	return 1;
}
Send_Inventario_To_Armario(playerid, idd)
{
	if(GetItemsFromArmarioCasa(ENCASAVIP[playerid]) >= 12 ) return MensajesAyuda(playerid,"Armario lleno");
	new DB_Query[256];
	format(DB_Query,sizeof(DB_Query),"INSERT INTO `ARMARIO_CASA` (`ID`,`CASAID`,`ITEM`,`USOS`) VALUES ('%d','%d','%d','%d')",
	TO_X_VENTARIO[playerid][ID][ idd ],
	ENCASAVIP[playerid],
	TO_X_VENTARIO[playerid][TIPO][ idd ],
	TO_X_VENTARIO[playerid][STATUS][ idd ]);
	db_query(_DB_,DB_Query);

	new action[84];
	format(action, sizeof action, "guarda %s en el armario *",INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][ idd ] ][ NOMBRE ]);
	Auto_SendPlayerAction(playerid, action);

	format(DB_Query,sizeof(DB_Query),"DELETE FROM INVENTARIO WHERE ID='%d';",TO_X_VENTARIO[playerid][ID][ idd ]);
	db_query(Database, DB_Query);
	for(new a=0; a < 29; a++) TextDrawSetPreviewModel(Jugador_Textdraws[playerid][textdraw_armario][a], 18670);
	Update_Armario_CasaVip(playerid);
	return 1;
}

Send_Baul_To_Inventario(playerid, idd)
{
	if(GetCountInventary(playerid) >= Max_Slots_For_Invetary) return MensajesAyuda(playerid,"Inventario lleno");
	new DB_Query[256];
	format(DB_Query,sizeof(DB_Query),"INSERT INTO `INVENTARIO` (`ID`,`PLAYER`,`TIPO`,`ESTADO`) VALUES ('%d','%d','%d','%d')",
	TO_INVENTARIO_X[playerid][ID][ idd ],
	ACCOUNT_INFO[playerid][ac_ID],
	TO_INVENTARIO_X[playerid][TIPO][ idd ],
	TO_INVENTARIO_X[playerid][STATUS][ idd ]);
	db_query(Database,DB_Query);
	new action[84];
	format(action, sizeof action, "saca del baul de su vehiculo %s un '%s' y lo guarda en su inventario *",VEHICLE_INFO[GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][BAUL_VEHICLE] ][gb_vehicle_MODELID] - 400][vehicle_info_NAME],INVENTARIOPLAYER[ TO_INVENTARIO_X[playerid][TIPO][ idd ] ][ NOMBRE ]);
	Auto_SendPlayerAction(playerid, action);
	format(DB_Query,sizeof(DB_Query),"DELETE FROM BAUL WHERE ID='%d';",TO_INVENTARIO_X[playerid][ID][ idd ]);
	db_query(_DB_, DB_Query);
	ShowBaulVehicle(playerid,PLAYER_TEMP[playerid][BAUL_VEHICLE]);
	return 1;
}
Send_Inventario_To_Baul(playerid, idd)
{
	if(GetItemsFromBaulVehicle(GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][BAUL_VEHICLE] ][gb_vehicle_ID]) >= 12 ) return MensajesAyuda(playerid,"Baul lleno");
	new DB_Query[256];
	format(DB_Query,sizeof(DB_Query),"INSERT INTO `BAUL` (`ID`,`VEHICULO_ID`,`ITEM`,`USOS`) VALUES ('%d','%d','%d','%d')",
	TO_X_VENTARIO[playerid][ID][ idd ],
	GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][BAUL_VEHICLE] ][gb_vehicle_ID],
	TO_X_VENTARIO[playerid][TIPO][ idd ],
	TO_X_VENTARIO[playerid][STATUS][ idd ]);
	db_query(_DB_,DB_Query);

	new action[84];
	format(action, sizeof action, "guarda %s en el baul de su vehiculo %s *",INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][ idd ] ][ NOMBRE ],VEHICLE_INFO[GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][BAUL_VEHICLE] ][gb_vehicle_MODELID] - 400][vehicle_info_NAME]);
	Auto_SendPlayerAction(playerid, action);

	format(DB_Query,sizeof(DB_Query),"DELETE FROM INVENTARIO WHERE ID='%d';",TO_X_VENTARIO[playerid][ID][ idd ]);
	db_query(Database, DB_Query);

	ShowBaulVehicle(playerid,PLAYER_TEMP[playerid][BAUL_VEHICLE]);
	return 1;
}
Armed_Inventary(playerid)
{

	new DBResult:Result,Query[256];
	format(Query, sizeof(Query), "SELECT TIPO,ESTADO FROM `INVENTARIO` WHERE `ID` = '%d' AND PLAYER ='%d'",IVENTARIOID[playerid],ACCOUNT_INFO[playerid][ac_ID]);
	Result = db_query(Database, Query);
	if(db_num_rows(Result))
	{
		db_get_field_assoc(Result, "TIPO",Query, 30); Equiped_Inventary[playerid][TYPE] = strval(Query);
		db_get_field_assoc(Result, "ESTADO",Query, 30); Equiped_Inventary[playerid][ESTADO] = strval(Query);

		Saved_Invetary[playerid]=Equiped_Inventary[playerid][TYPE];
		Equiped_Inventary[playerid][VALID_EQUIPED]=true;
		
		if(INVENTARIOPLAYER[ Equiped_Inventary[playerid][TYPE] ][TIPODECONSUMO] == TYPE_WEAPON)
		{
			if(Equiped_Inventary[playerid][ESTADO] == 0) MensajesAyuda(playerid,"Arma sin municion, te recomendamos ir a ammunation a comprar municion.");
			Item_Armed(playerid);
			return 1;
		}

		if(INVENTARIOPLAYER[ Equiped_Inventary[playerid][TYPE] ][TIPODECONSUMO] == TYPE_ACCESORIO)
		{
			Item_Equiped(playerid);
			return 1;
		}
 
		AttachObjetoNegocio(playerid);
		switch(INVENTARIOPLAYER[ Equiped_Inventary[playerid][TYPE] ][TIPODECONSUMO])
		{
			case TYPE_VENDAJE:
			{
				HideOrShowTextdrawsNegocio(playerid, 0);
				MensajesAyuda(playerid,"Oprime ~y~Y~w~ para vendarte~n~Oprime ~y~N~w~ para guardar ~y~Click D~w~ para tirar");
			}
			case BEBIDA_24_7:
			{
				HideOrShowTextdrawsNegocio(playerid, 0);
				MensajesAyuda(playerid,"Oprime ~y~Y~w~ para consumir~n~Oprime ~y~N~w~ para dejar de consumir ~y~Click D~w~ para tirar");
			}
			case COMIDA_24_7:
			{
				HideOrShowTextdrawsNegocio(playerid, 0);
				MensajesAyuda(playerid,"Oprime ~y~Y~w~ para consumir~n~Oprime ~y~N~w~ para dejar de consumir ~y~Click D~w~ para tirar");
			}
			case TYPE_BOTIQUIN:
			{
				HideOrShowTextdrawsNegocio(playerid, 0);
				MensajesAyuda(playerid,"Escribe ~y~/Sanar~w~ para sanar un jugador ~y~Click D~w~ para tirar");
			}
			case TYPE_KITHERRAMIENTA:
			{
				HideOrShowTextdrawsNegocio(playerid, 0);
				MensajesAyuda(playerid,"Situate frente al vehiculo y oprime~y~ 'Y'~w~ para reparar el vehiculo");
			}
			case NO_CONSUMIBLE:
			{
				HideOrShowTextdrawsNegocio(playerid, 0);
				MensajesAyuda(playerid,"Oprime ~y~Y~w~ para consumir~n~Oprime ~y~N~w~ para dejar de consumir ~y~Click D~w~ para tirar");
			}
			case CANA_PESCAR:
			{
				MensajesAyuda(playerid,"Cana de pescar equipada, sube a un bote y ve a una zona de pesca y presiona 'Y'");
			}
			case MASA_PICAR:
			{
				MensajesAyuda(playerid,"Masa para picar equipada");
			}
		}
		HiveIntaruil(playerid);
		
	}
	else
	{
		HiveIntaruil(playerid);
		DesSaveInvetary(playerid);
		Equiped_Inventary[playerid][VALID_EQUIPED]=false;
		Equiped_Inventary[playerid][ESTADO]=0;
 		Equiped_Inventary[playerid][TYPE]=0;
	}
	db_free_result(Result);
	return 1;
}
Item_Armed(playerid)
{
	for(new i=0; i < 22 ; i ++) TextDrawSetPreviewModel(Jugador_Textdraws[playerid][textdraw_invSH][i], 18670);
	new id=Equiped_Inventary[playerid][TYPE];

 	if(GetItemsEquipados(playerid) >= 5) return MensajesAyuda(playerid,"El equipamiento esta lleno.");
 	new query[256];
 	format(query,sizeof(query),"DELETE FROM INVENTARIO WHERE ID='%d';",IVENTARIOID[playerid]);
    db_query(Database,query);
    
    format(query,sizeof(query),"INSERT INTO ITEM_EQUIPED (ID,PLAYER,ITEM,ESTADO) VALUES ('%d','%d','%d','%d')",IVENTARIOID[playerid],ACCOUNT_INFO[playerid][ac_ID],id,Equiped_Inventary[playerid][ESTADO]);
    db_query(Database,query);

    Equiped_Inventary[playerid][VALID_EQUIPED]=false;
	Equiped_Inventary[playerid][ESTADO]=0;
 	Equiped_Inventary[playerid][TYPE]=0;

 	Show_Inventario(playerid);
 	Cargar_Armas(playerid);
	return 1;
}
Tirar_Inventario(playerid)
{
	HiveIntaruil(playerid);
	if(ACCOUNT_INFO[playerid][ac_ID]== 0) return 1;
	for(new i=0; i < 15 ; i ++) TextDrawSetPreviewModel(Jugador_Textdraws[playerid][textdraw_tirar_inventario][i], 18670);
	SelectTextDraw(playerid,0xB00000FF);
	TIRAR_INVENTARIO[playerid]=true;
	new query[256],DBResult:Result,tipos_,ide_,estado_;

    format(query,sizeof(query),"SELECT TIPO,ID FROM INVENTARIO WHERE PLAYER = '%d';",ACCOUNT_INFO[playerid][ac_ID]);
    Result = db_query(Database,query);
    new empeza=1;
   
    for(new i; i < db_num_rows(Result); i++)
    {
    	empeza++;
	    db_get_field_assoc(Result, "TIPO",query, 20); 		tipos_ = strval(query);
	    db_get_field_assoc(Result, "ID",query, 20);			ide_ = strval(query);
	    db_get_field_assoc(Result, "ESTADO",query, 20);			estado_ = strval(query);

	    INVENTARY_PLAYER[playerid][TIPO][empeza]=tipos_;
	    INVENTARY_PLAYER[playerid][ID][empeza]=ide_;
	    INVENTARY_PLAYER[playerid][STADO][empeza]=estado_;

	    TextDrawSetPreviewModel(Jugador_Textdraws[playerid][textdraw_tirar_inventario][empeza], INVENTARIOPLAYER[ tipos_ ][OBJETO]);
	    db_next_row(Result);
    }
    db_free_result(Result);

	for(new i=0; i < 15 ; i ++) TextDrawShowForPlayer(playerid,Jugador_Textdraws[playerid][textdraw_tirar_inventario][i]);
	SendClientMessage(playerid,-1,"Selecciona que quieres tirar al suelo");
	MensajesAyuda(playerid,"Selecciona que quieres tirar al suelo");
	return 1;
}
Tirar_Inventario_Ex(playerid, typee, idd, estadoa)
{
	if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	{
 		if(InNegocio[playerid] != -1) return MensajesAyuda(playerid,"No puedes tirar eso aca dentro");
 		foreach(new i : ObjetosTirados)
 		{
 			if(i==-1) return 1;
 			if(IsPlayerInRangeOfPoint(playerid,3,PRODUCTORIADO[i][POSX],PRODUCTORIADO[i][POSY],PRODUCTORIADO[i][POSZ]))
 			{
 				return MensajesAyuda(playerid,"No puedes tirar un objeto serca de otro alejate un poco");
 			}
 		}
	   	new DB_Query[256];
	    new id = Iter_Free(ObjetosTirados);
	    if(id==-1) return SendClientMessage(playerid,-1,"Ocurrio un error al tirar el objeto contacta con un administrador");

		new Float:post[3];
		GetPlayerPos(playerid,post[0],post[1],post[2]);
		PRODUCTORIADO[id][POSX] = post[0];
		PRODUCTORIADO[id][POSY] = post[1];
		PRODUCTORIADO[id][POSZ] = post[2];
		PRODUCTORIADO[id][IDE_R] = idd;
		PRODUCTORIADO[id][TYPE] =  typee;
		PRODUCTORIADO[id][STATUS] =  estadoa;
		format(string2,sizeof(string2),"~ %s ~",INVENTARIOPLAYER[ typee ][NOMBRE]);
		PRODUCTORIADO[id][LABEL] = CreateDynamic3DTextLabel(string2,0xFFFFFFFF,post[0],post[1],post[2]-0.8,7.0, .worldid = -1);
		PRODUCTORIADO[id][OBJETO] =  CreateDynamicObject(INVENTARIOPLAYER[ typee ][OBJETO], post[0],post[1],post[2]-0.9,-90.0, 0.0, 0.0, -1);
		HideOrShowTextdrawsNegocio(playerid, 1);
		format(DB_Query, sizeof(DB_Query), "DELETE FROM `INVENTARIO` WHERE `ID` = '%d' AND PLAYER = '%d'",idd,ACCOUNT_INFO[playerid][ac_ID]);
		db_query(Database, DB_Query);
		PRODUCTORIADO[id][TIMER] = SetTimerEx("DeleteObjetoFromPiso", 600000, false, "i",id);
		Hide_Tirar_Inventario(playerid);
		Iter_Add(ObjetosTirados, id);

		SetPlayerPos(playerid,post[0],post[1],post[2]+0.2);
	}
	else SendClientMessage(playerid,-1,"Debes estar de pie.");
	return 1;
}
Hide_Tirar_Inventario(playerid)
{
	for(new a=0; a < 15; a++) TextDrawHideForPlayer(playerid, Jugador_Textdraws[playerid][textdraw_tirar_inventario][a]);
	TIRAR_INVENTARIO[playerid]=false;
	CancelSelectTextDraw(playerid);
	return 1;
}
Registrar_Player_Arma(playerid, weapon_slot)
{
	new query[250];
	format(query,sizeof(query),"INSERT INTO INVENTARIO (PLAYER,TIPO,ESTADO) VALUES ('%d','%d','%d')",ACCOUNT_INFO[playerid][ac_ID],
		GetIdItemInventario(weapon_slot),random(100));
    db_query(Database,query);
	return 1;
}
Cargar_Armas(playerid)
{
	ResetPlayerWeaponsEx(playerid);
	new query[256],DBResult:Resulta,id;
    format(query,sizeof(query),"SELECT * FROM ITEM_EQUIPED WHERE PLAYER = '%d';",ACCOUNT_INFO[playerid][ac_ID]);
    Resulta = db_query(Database,query);
    for(new i; i < db_num_rows(Resulta); i++)
    {
		id = db_get_field_assoc_int(Resulta, "ITEM");
    	if(INVENTARIOPLAYER[id][TIPODECONSUMO] == TYPE_WEAPON)
    	{
    		new weapon_id = db_get_field_assoc_int(Resulta, "ITEM");
    		weapon_id = INVENTARIOPLAYER[ id ][MAXCONSUME];
			PLAYER_WEAPONS[playerid][ WEAPON_INFO[weapon_id][weapon_info_SLOT] ][player_weapon_VALID] = true;
			PLAYER_WEAPONS[playerid][ WEAPON_INFO[weapon_id][weapon_info_SLOT] ][player_weapon_DB_ID] = db_get_field_assoc_int(Resulta, "ID");
			PLAYER_WEAPONS[playerid][ WEAPON_INFO[weapon_id][weapon_info_SLOT] ][player_weapon_ID] = weapon_id;
			PLAYER_WEAPONS[playerid][ WEAPON_INFO[weapon_id][weapon_info_SLOT] ][player_weapon_AMMO] = db_get_field_assoc_int(Resulta, "ESTADO");	
			GivePlayerWeaponEx(playerid, weapon_id, PLAYER_WEAPONS[playerid][ WEAPON_INFO[weapon_id][weapon_info_SLOT] ][player_weapon_AMMO]);
    	}
		db_next_row(Resulta);
	}
	db_free_result(Resulta);
	return 1;
}
Remover_Player_Arma(playerid, ide)
{
	new DB_Query[200],item_karen,DBResult:Result;
	format(DB_Query,sizeof DB_Query,"SELECT TIPO FROM INVENTARIO WHERE ID='%d';",ide);
	Result = db_query(Database, DB_Query);
	if(db_num_rows(Result))
	{
		item_karen = db_get_field_assoc_int(Result, "TIPO");
	}
	db_free_result(Result);

	new slot = INVENTARIOPLAYER[ item_karen ][MAXCONSUME];
	if(PLAYER_WEAPONS[playerid][ WEAPON_INFO[slot][weapon_info_SLOT] ][player_weapon_VALID] == true)
	{
		format(DB_Query,sizeof(DB_Query),"UPDATE `INVENTARIO` SET `ESTADO`='%d' WHERE ID='%d';",PLAYER_WEAPONS[playerid][ WEAPON_INFO[slot][weapon_info_SLOT] ][player_weapon_AMMO],
			ide);
		db_query(Database,DB_Query);

		new current_weapon = GetPlayerWeapon(playerid);
		if(current_weapon == PLAYER_WEAPONS[playerid][ WEAPON_INFO[slot][weapon_info_SLOT] ][player_weapon_ID]) current_weapon = 0;
		
		PLAYER_WEAPONS[playerid][ WEAPON_INFO[slot][weapon_info_SLOT] ][player_weapon_VALID] = false;
		PLAYER_WEAPONS[playerid][ WEAPON_INFO[slot][weapon_info_SLOT] ][player_weapon_DB_ID] = 0;
		PLAYER_WEAPONS[playerid][ WEAPON_INFO[slot][weapon_info_SLOT] ][player_weapon_ID] = 0;
		PLAYER_WEAPONS[playerid][ WEAPON_INFO[slot][weapon_info_SLOT] ][player_weapon_AMMO] = 0;
		
		SetWeaponsForPlayer(playerid);
		SetPlayerArmedWeapon(playerid, current_weapon);
	}
    return 1;
}
Item_Equiped(playerid)
{
	for(new i=0; i < 22 ; i ++) TextDrawSetPreviewModel(Jugador_Textdraws[playerid][textdraw_invSH][i], 18670);
	new id=Equiped_Inventary[playerid][TYPE];
	Equiped_Inventary[playerid][VALID_EQUIPED]=false;
	Equiped_Inventary[playerid][ESTADO]=0;
 	Equiped_Inventary[playerid][TYPE]=0;
 	if(GetItemsEquipados(playerid) >= 5) return MensajesAyuda(playerid,"El equipamiento esta lleno.");
 	new query[256];
 	format(query,sizeof(query),"DELETE FROM INVENTARIO WHERE ID='%d';",IVENTARIOID[playerid]);
    db_query(Database,query);
    
    format(query,sizeof(query),"INSERT INTO ITEM_EQUIPED (ID,PLAYER,ITEM,ESTADO) VALUES ('%d','%d','%d','%d')",IVENTARIOID[playerid],ACCOUNT_INFO[playerid][ac_ID],id,Equiped_Inventary[playerid][ESTADO]);
    db_query(Database,query);

 	Show_Inventario(playerid);

 	CargarPrendas(playerid);
	return 1;
}
Update_Item_Equiped(playerid)
{
	if(ACCOUNT_INFO[playerid][ac_ID]== 0) return 1;

	new query[256],DBResult:Result;
    format(query,sizeof(query),"SELECT * FROM ITEM_EQUIPED WHERE PLAYER = '%d';",ACCOUNT_INFO[playerid][ac_ID]);
    Result = db_query(Database,query);
    new empeza=14;

    for(new i; i < db_num_rows(Result); i++)
    {
    	empeza++;
	    ITEM_PLAYER[playerid][TIPO][empeza] = db_get_field_assoc_int(Result, "ITEM");
		ITEM_PLAYER[playerid][ID][empeza] = db_get_field_assoc_int(Result, "ID");
		ITEM_PLAYER[playerid][STADO][empeza] = db_get_field_assoc_int(Result, "ESTADO");

	    TextDrawSetPreviewModel(Jugador_Textdraws[playerid][textdraw_invSH][empeza], INVENTARIOPLAYER[ ITEM_PLAYER[playerid][TIPO][empeza] ][OBJETO]);
	    db_next_row(Result);
    }
    db_free_result(Result);

	return 1;
}
Update_Inferface_Inventario(playerid)
{
	if(GetCountInventary(playerid) >= Max_Slots_For_Invetary)
	{
		MensajesAyuda(playerid,"El inventario esta lleno");
		Show_Inventario(playerid);
		return 1;
	}
	for(new i=0; i < 21 ; i ++) TextDrawSetPreviewModel(Jugador_Textdraws[playerid][textdraw_invSH][i], 18670);	
	new Tipo_,Estado;
	new DB_Query[256],DBResult:Result;
	format(DB_Query,sizeof(DB_Query),"SELECT * FROM ITEM_EQUIPED WHERE ID='%d';",ITEM_ID_EQUIPED[playerid]);
	Result = db_query(Database, DB_Query);
	if(db_num_rows(Result))
	{
		Tipo_ = db_get_field_assoc_int(Result, "ITEM");
		Estado = db_get_field_assoc_int(Result, "ESTADO");

		format(DB_Query,sizeof(DB_Query),"INSERT INTO `INVENTARIO` (`ID`,`PLAYER`,`TIPO`,`ESTADO`) VALUES ('%d','%d','%d','%d')",
		ITEM_ID_EQUIPED[playerid],
		ACCOUNT_INFO[playerid][ac_ID],
		Tipo_,
		Estado);
		db_query(Database,DB_Query);

		format(DB_Query,sizeof(DB_Query),"DELETE FROM ITEM_EQUIPED WHERE ID='%d';",ITEM_ID_EQUIPED[playerid]);
		db_query(Database, DB_Query);



	}
	else
	{
		return SendClientMessage(playerid,-1,"Error desconocido");
	}

	Show_Inventario(playerid);

	if(INVENTARIOPLAYER[ Tipo_][TIPODECONSUMO] == TYPE_WEAPON)
	{
		Remover_Player_Arma(playerid,ITEM_ID_EQUIPED[playerid]);
	}
	else
	{
		CargarPrendas(playerid);
	}	
	return 1;
}
CargarPrendas(playerid)
{
	for(new a=0; a < MAX_PLAYER_ATTACHED_OBJECTS; a++) RemovePlayerAttachedObject(playerid, a);
	new Float:ofsetx,Float:ofsety,Float:ofsetz,Float:rotax,Float:rotay,Float:rotaz,Float:scaleex,Float:scaleey,Float:scaleez,col;	
	new DB_Query[256],DBResult:Resulta;
	new query[256],DBResult:Result,id;
    format(query,sizeof(query),"SELECT ITEM FROM ITEM_EQUIPED WHERE PLAYER = '%d';",ACCOUNT_INFO[playerid][ac_ID]);
    Resulta = db_query(Database,query);
    for(new i; i < db_num_rows(Resulta); i++)
    {
    	id = db_get_field_assoc_int(Resulta, "ITEM");
    	if(id == 65)
    	{
    		TieneMask[playerid] = true;
    	}
    	else
    	{
    		TieneMask[playerid] = false;
    	}
    	if(INVENTARIOPLAYER[id][TIPODECONSUMO] == TYPE_ACCESORIO)
    	{
			format(DB_Query,sizeof(DB_Query),"SELECT * FROM OBJETOS_EQUIPADOS WHERE PLAYER='%d' AND OBJETO='%d';",ACCOUNT_INFO[playerid][ac_ID],INVENTARIOPLAYER[ id ][OBJETO]);
			Result = db_query(_DB_, DB_Query);
			if(db_num_rows(Result))
			{
				ofsetx = db_get_field_assoc_float(Result, "OffsetX");
				ofsety = db_get_field_assoc_float(Result, "OffsetY");
				ofsetz = db_get_field_assoc_float(Result, "OffsetZ");
				rotax = db_get_field_assoc_float(Result, "RotX");
				rotay = db_get_field_assoc_float(Result, "RotY");
				rotaz = db_get_field_assoc_float(Result, "RotZ");
				scaleex = db_get_field_assoc_float(Result, "ScaleX");
				scaleey = db_get_field_assoc_float(Result, "ScaleY");
				scaleez = db_get_field_assoc_float(Result, "ScaleZ");
				col = db_get_field_assoc_int(Result, "COLOR");
				SetPlayerAttachedObject(playerid,INVENTARIOPLAYER[ id ][INDEX_ID],INVENTARIOPLAYER[ id ][OBJETO],INVENTARIOPLAYER[ id ][BONE],
					ofsetx,ofsety,ofsetz,
						rotax,rotay,rotaz,
							scaleex,scaleey,scaleez,col,col);
			}
			else
			{
				/*SetPlayerAttachedObject(playerid,INVENTARIOPLAYER[ id ][INDEX_ID],INVENTARIOPLAYER[ id ][OBJETO],INVENTARIOPLAYER[ id ][BONE],
					INVENTARIOPLAYER[ id ][OffsetX],INVENTARIOPLAYER[ id ][OffsetY],INVENTARIOPLAYER[ id ][OffsetZ],
						INVENTARIOPLAYER[ id ][RotX],INVENTARIOPLAYER[ id ][RotY],INVENTARIOPLAYER[ id ][RotZ],
							INVENTARIOPLAYER[ id ][ScaleX],INVENTARIOPLAYER[ id ][ScaleY],INVENTARIOPLAYER[ id ][ScaleZ],0,0);*/

				SetPlayerAttachedObject(playerid, INVENTARIOPLAYER[ id ][INDEX_ID], INVENTARIOPLAYER[ id ][OBJETO],INVENTARIOPLAYER[ id ][BONE]); 
			}

			db_free_result(Result);
		}
		db_next_row(Resulta);
	}
	db_free_result(Resulta);
	return 1;
}
HiveIntaruil(playerid)
{
	for(new a=0; a < 22; a++) TextDrawHideForPlayer(playerid, Jugador_Textdraws[playerid][textdraw_invSH][a]);
	ABRIO_INVENTARIO[playerid]=false;
	CancelSelectTextDraw(playerid);
	for(new a=2; a < 20; a++) TextDrawSetPreviewModel(Jugador_Textdraws[playerid][textdraw_invSH][a], 18670);
	return 1;
}
GetGananciaNegocio(negocio)
{
	new value=0;
	new Query[60],DBResult:Result,DB_Query[60];
    format(Query, sizeof(Query), "SELECT GANANCIA FROM NEGOCIOS WHERE ID='%d'",negocio);
	Result = db_query(_DB_, Query);
	if(db_num_rows(Result))
	{
		db_get_field_assoc(Result, "GANANCIA",DB_Query, 30);
        value = strval(DB_Query);
	}
	db_free_result(Result);

	return value;
}
 
Update_Field_Exp_Nivel_Work(playerid,work_idd)
{
	new DBResult:Result,DB_Query[100],exp_;
    format(DB_Query, sizeof(DB_Query), "SELECT `WORK_EXP` FROM `WORK_NIVEL` WHERE `USER_ID` ='%d' AND `WORK_ID` ='%d';",ACCOUNT_INFO[playerid][ac_ID],work_idd);
	Result = db_query(Database, DB_Query);
	if(db_num_rows(Result))
	{
		db_get_field_assoc(Result, "WORK_EXP",DB_Query, 30); exp_ = strval(DB_Query);

		exp_=exp_+1;

		format(DB_Query,sizeof(DB_Query), "UPDATE `WORK_NIVEL` SET `WORK_EXP` = '%d' WHERE `USER_ID`='%d' AND `WORK_ID`='%d';",exp_,ACCOUNT_INFO[playerid][ac_ID],work_idd);
	    db_query(Database, DB_Query);
	}
	db_free_result(Result);
	return 1;
}


GetDia()
{
    new dia,mes, mes1[12],pmyam[12],horasxd,xdxdv[130], year, hourss,segundoss, minutes;
    gettime(hourss,minutes, segundoss);
    //new hora,minuto,segundo; gettime(hora,minuto,segundo);
    getdate(year,mes,dia);
    switch(mes)
    {
        case 1: mes1 = "enero";
        case 2: mes1 = "febrero";
        case 3: mes1 = "marzo";
        case 4: mes1 = "abril";
        case 5: mes1 = "mayo";
        case 6: mes1 = "junio";
        case 7: mes1 = "julio";
        case 8: mes1 = "agosto";
        case 9: mes1 = "septiembre";
        case 10: mes1 = "octubre";
        case 11: mes1 = "noviembre";
        case 12: mes1 = "diciembre";
    }

    switch(hourss)
    {
        case 1: horasxd = 1;
        case 2: horasxd = 2;
        case 3: horasxd = 3;
        case 4: horasxd = 4;
        case 5: horasxd = 5;
        case 6: horasxd = 6;
        case 7: horasxd = 7;
        case 8: horasxd = 8;
        case 9: horasxd = 9;
        case 10: horasxd = 10;
        case 11: horasxd = 11;
        case 12: horasxd = 12;
        case 13: horasxd = 1;
        case 14: horasxd = 2;
        case 15: horasxd = 3;
        case 16: horasxd = 4;
        case 17: horasxd = 5;
        case 18: horasxd = 6;
        case 19: horasxd = 7;
        case 20: horasxd = 8;
        case 21: horasxd = 9;
        case 22: horasxd = 10;
        case 23: horasxd = 11;
        case 00: horasxd = 12;
    }
    switch(hourss)
    {
        case 1: pmyam = "AM";
        case 2: pmyam = "AM";
        case 3: pmyam = "AM";
        case 4: pmyam = "AM";
        case 5: pmyam = "AM";
        case 6: pmyam = "AM";
        case 7: pmyam = "AM";
        case 8: pmyam = "AM";
        case 9: pmyam = "AM";
        case 10: pmyam = "AM";
        case 11: pmyam = "AM";
        case 12: pmyam = "AM";
        case 13: pmyam = "PM";
        case 14: pmyam = "PM";
        case 15: pmyam = "PM";
        case 16: pmyam = "PM";
        case 17: pmyam = "PM";
        case 18: pmyam = "PM";
        case 19: pmyam = "PM";
        case 20: pmyam = "PM";
        case 21: pmyam = "PM";
        case 22: pmyam = "PM";
        case 23: pmyam = "PM";
        case 00: pmyam = "PM";
    }
    format(xdxdv, 130, "el %s %d de %s del %d a las: %d:%d %s",GetDayOfWeek(),dia,mes1,year,horasxd,minutes,pmyam);
    return xdxdv;
}

ShowPlayerMenu(playerid)
{
	for(new i=0; i <= 8; i++) PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][textdraw_menu][i]);
	PLAYER_TEMP[playerid][pt_MENU]=true;
	SelectTextDraw(playerid,0x000000FF);
	return 1;
}
HidePlayerMenu(playerid)
{
	for(new i=0; i <= 8; i++) PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][textdraw_menu][i]);
	PLAYER_TEMP[playerid][pt_MENU]=false;
	CancelSelectTextDraw(playerid);
	return 1;
}

forward IsPlayerDriver(playerid);
public IsPlayerDriver(playerid)
{
    if (!IsPlayerConnected(playerid)) return 0;

    if (GetPlayerState(playerid) == PLAYER_STATE_DRIVER) return 1;
    else return 0;
}

funcion ChangeBanderita_Inicio(id)
{
	TextureCountryFlagBandera(Banderitas_Inicio[id][ID],1,random(33));
	return 1;
}
funcion ChangeBanderita(id)
{
	TextureCountryFlagBandera(Banderitas[id][ID],0,random(33));
	return 1;
}

stock AntiSpamFuncion(playerid, tiempodelay, bool:msgeeg = true)
{
 
    new playerdelay = gettime() - PI[playerid][delay];
    if (playerdelay < tiempodelay)
    {
        if (msgeeg)
        {
            /*format(String, sizeof(String), "* Espera '%d' segundos!", tiempodelay - playerdelay);
            SendClientMessage(playerid, -1, String);*/
            GameTextForPlayer(playerid,"~n~~n~~n~~n~~n~~n~~n~~n~~n~~r~~h~~h~Cargando~w~..",1500,3);
        }
        return 0;
    }
    else
    {
        PI[playerid][delay] = gettime();
        return 1;
    }
}

/*Antiflood( playerid, bool:inc=true )
{
	AntiFlood_Data[playerid][VelocidadFlood] += inc ? RATE_INC : 0;
	AntiFlood_Data[playerid][VelocidadFlood] = AntiFlood_Data[playerid][VelocidadFlood] - ( GetTickCount() - AntiFlood_Data[playerid][UltimoUpd] );
	AntiFlood_Data[playerid][UltimoUpd] = GetTickCount();
	AntiFlood_Data[playerid][VelocidadFlood] = AntiFlood_Data[playerid][VelocidadFlood] < 0 ? 0 : AntiFlood_Data[playerid][VelocidadFlood];

	if ( AntiFlood_Data[playerid][VelocidadFlood] >= RATE_MAX )
	{
		#if THRESOLD_ACTION == 2
 
			new msg[164];
			format( msg, sizeof( msg ), "[AC-KICK]* %s fue baneado del servidor Razon: Flood Masivo [Query Flood].",PLAYER_TEMP[playerid][pt_NAME]);
			SendMessageToAdmins( 0xFF0000FF, msg );
			printf("%s",msg);
			BanEx(playerid,msg);
		#else
			SendClientMessage( playerid, 0xFF0000FF, "* Termina con el Flood." );
		#endif

		return false;
	}

	return true;
}*/

GetKeysLimitFromThisVehicle(vehiculoid)
{
	new cantidadlllaves=0;
	new query[100],DBResult:Result;
	format(query,sizeof(query),"SELECT * FROM `KEYS_VEHICLE` WHERE `VEHICLE_ID`='%d';",vehiculoid);
    Result = db_query(Database,query);
    cantidadlllaves = db_num_rows(Result);
	return cantidadlllaves;
}
stock GetKeysFromThisVehicle(playerid, vehiculoid)
{
	new Query[150],DBResult:Result,did=0;
	format(Query, sizeof(Query), "SELECT * FROM `KEYS_VEHICLE` WHERE `USER_ID` = '%d' AND `VEHICLE_ID` = '%d';",ACCOUNT_INFO[playerid][ac_ID],vehiculoid);
	Result = db_query(Database, Query);
	if(db_num_rows(Result))
	{
		did=1;
	}
	else did=0;
	db_free_result(Result);

	return did;
}
stock GetNameKeyOfThisVehicle(vehiculoid)
{
	new name_[25];
	new Query[100],DBResult:Result,id_usera;
	format(Query, sizeof(Query), "SELECT ID_USER FROM `PLAYER_VEHICLES` WHERE `ID` = '%d';",vehiculoid);
	Result = db_query(Database, Query);
	if(db_num_rows(Result))
	{
		id_usera = db_get_field_assoc_int(Result, "ID_USER");
	}
	db_free_result(Result);
	format(name_, 25, "%s",GetNamePlayerFromDB(id_usera));
	return name_;
}
stock ShowLLavesFromVehicles(playerid,vehiculoid)
{
	if(ACCOUNT_INFO[playerid][ac_ID]== 0) return 1;

	new string[500],count,query[256],DBResult:Result,id_;
    format(query,sizeof(query),"SELECT `USER_ID` FROM `KEYS_VEHICLE` WHERE `VEHICLE_ID` = '%d';",vehiculoid);
    Result = db_query(Database,query);
	count = db_num_rows(Result);
	if(count == 0) return MensajesAyuda(playerid,"Ningun jugador tiene llaves de tu vehiculo");
    for(new i; i < db_num_rows(Result); i++)
    {
	    db_get_field_assoc(Result, "USER_ID",query, 20);			id_ = strval(query);
	    format(string, sizeof(string), "%s\nNombre: %s\n", string,GetNameCuentaID(id_));
	    db_next_row(Result);
    }
    new formt[60];
    format(formt,sizeof(formt),"{D32B2B}Llaves de tu vehiculo \"%s\"",VehicleName[GetVehicleModel(GetPlayerVehicleID(playerid)) - 400]);
    ShowPlayerDialog(playerid,DIALOG_NULL, DIALOG_STYLE_LIST,formt, string, "Cerrar", "");
    db_free_result(Result);
	return 1;
}

stock GetAlreadyKeysFromMyVeh(playerdid, vehiculoid)
{
	new status=0;
	new Query[100],DBResult:Result;
	format(Query, sizeof(Query), "SELECT * FROM `KEYS_VEHICLE` WHERE `VEHICLE_ID` = '%d' AND `USER_ID`='%d';",vehiculoid,playerdid);
	Result = db_query(Database, Query);
	if(db_num_rows(Result))
	{
		status=1;
	}
	db_free_result(Result);
	return status;
}
stock ShowManageQuitarLlavesVeh(playerid, vehiculoid)
{
    new string[200],query[256],DBResult:Result;
    format(query,sizeof(query),"SELECT `ID`,`USER_ID` FROM `KEYS_VEHICLE` WHERE `VEHICLE_ID` = '%d';",vehiculoid);
    Result = db_query(Database,query);
    new lineas,id_usera,did;
    new dialog[1200];
    format(dialog, sizeof dialog,  "{CEF6F5}ID\t#\tNombre\n");
    for(new i; i < db_num_rows(Result); i++)
    {
        lineas++;

        id_usera = db_get_field_assoc_int(Result, "USER_ID");
        did = db_get_field_assoc_int(Result, "ID");
 		new text[256];
		format(text, 256, "%s",GetNamePlayerFromDB(id_usera));
        for(new l = 0; l < strlen(text); ++l)
            if(text[l] == '{')
                if(text[l+7] == '}')
                    strdel(text, l, l+8);

        if(strlen(text) > 37)
        {
            strdel(text, 34, strlen(text));
            strcat(text, "...", sizeof(text));
        }
        format(string, sizeof(string), "ID %d \t| %d \t| {%s}%s\n", did,lineas,Randomcolor(),text);
        strcat(dialog, string);
        db_next_row(Result);
    }
    new formt[60];
    format(formt,sizeof(formt),"{D32B2B}Quitar llaves de tu vehiculo \"%s\"",VehicleName[GetVehicleModel(GetPlayerVehicleID(playerid)) - 400]);

    ShowPlayerDialog(playerid, DIALOG_QUITAR_LLAVES_VEH, DIALOG_STYLE_TABLIST_HEADERS, formt, dialog, "Quitar", "Cerrar");
    db_free_result(Result);

	return 1;
}


stock GetNameKeyOfMyVehicle(vehiculoid)
{
	new name_[25];
	new Query[100],DBResult:Result,id_usera;
	format(Query, sizeof(Query), "SELECT USER_ID FROM `KEYS_VEHICLE` WHERE `ID` = '%d';",vehiculoid);
	Result = db_query(Database, Query);
	if(db_num_rows(Result))
	{
		id_usera = db_get_field_assoc_int(Result, "USER_ID");
	}
	db_free_result(Result);
	format(name_, 25, "%s",GetNamePlayerFromDB(id_usera));
	return name_;
}
GetEstacionRadio(vehiculoid)
{
	new radio_name[60];
	if(GLOBAL_VEHICLES[vehiculoid][gb_vehicle_RADIO] == MAX_RADIO) format(radio_name,sizeof(radio_name),"Link personal");
	else format(radio_name,sizeof(radio_name),"%s",Radios[ GLOBAL_VEHICLES[ vehiculoid ][gb_vehicle_RADIO] ][ Nombre ]);
	return radio_name;
}

stock ChangeRadioForThisVehicle(playerid, id_radio)
{
	new vehiculoid = GetPlayerVehicleID(playerid);

	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		
		foreach(new i : Player)
		{
			if(IsPlayerConnected(i) && IsPlayerInVehicle(i,vehiculoid) && GetPlayerState(i) == PLAYER_STATE_PASSENGER)
			{
				PlayAudioStreamForPlayer(i, Radios[ id_radio ][Link]);
				SendClientMessageEx(i, -1, ""R"@%s "W"cambio la radio del vehiculo a: "R"%s",PLAYER_TEMP[playerid][pt_NAME],Radios[ id_radio ][Nombre]);
			}
		}
	}

	PlayAudioStreamForPlayer(playerid, Radios[ id_radio ][Link]);
	SendClientMessageEx(playerid, -1, "Cambiaste la radio del vehiculo a: "R"%s",Radios[ id_radio ][Nombre]);

	GLOBAL_VEHICLES[ vehiculoid ][gb_vehicle_RADIO] = id_radio;

	return 1;
}
stock SaveVarsVehicle(vehiculoid)
{
	new DB_Query[300];
	format(DB_Query,sizeof(DB_Query), "UPDATE `VEHICLE_VARS` SET `RADIO_ID` = '%d',`RADIO_LINK` = '%s',`SALTO_V` = '%d',`SALTO_V_1` = '%d',`SALTO_V_2` = '%d',`BAUL` = '%d' WHERE `VEHICLE_ID` = '%d';",
	GLOBAL_VEHICLES[ vehiculoid ][gb_vehicle_RADIO],
	GLOBAL_VEHICLES[ vehiculoid ][gb_vehicle_RADIO_LINK],
	GLOBAL_VEHICLES[ vehiculoid ][gb_vehicle_SALTO_V],
	GLOBAL_VEHICLES[ vehiculoid ][gb_vehicle_SALTO_V_1],
	GLOBAL_VEHICLES[ vehiculoid ][gb_vehicle_SALTO_V_2],
	GLOBAL_VEHICLES[ vehiculoid ][gb_vehicle_BAUL],
	GLOBAL_VEHICLES[ vehiculoid ][gb_vehicle_ID]);
    db_query(Database, DB_Query);
	return 1;
}
stock AKA(playerid,accs[][],const size=sizeof(accs))
{
    new ip[16],Query[128];
    new DBResult:Result,rows;
    GetPlayerIp(playerid,ip,16);
    format(Query,sizeof(Query),"SELECT `NICK` FROM `AKAS` WHERE `IP` = '%q'",ip);
    Result = db_query(Database, Query);
    rows = db_num_rows(Result);
    if(rows>1)
    {
        for(new i,j; i<rows; i++)
        {
            if(j==size) break;
            db_get_field(Result,0,accs[j++],MAX_PLAYER_NAME);
            db_next_row(Result);
        }
    }
    return db_free_result(Result);
}
 //----- Sistema de Países -----
stock GetPlayerCountry(playerid, string[], const len = sizeof(string)) {
    new ip[24];
    GetPlayerIp(playerid, ip, sizeof(ip));
    GetIPCountry(ip, string, len);
    return true;
}

stock GetPlayerCity(playerid, string[], const len = sizeof(string)) {
    new ip[24];
    GetPlayerIp(playerid, ip, sizeof(ip));
    GetIPCity(ip, string, len);
    return true;
}

stock GetPlayerProxy(playerid) {
    new ip[24];
    GetPlayerIp(playerid, ip, sizeof(ip));
    return GetIPProxy(ip, playerid);
}

stock GetIPCountry(ip[], dest[], const len = sizeof(dest)) {
    new tmp[90];
    tmp = ip2long(ip);
    new string[500];
    format(string, sizeof(string), "SELECT cn FROM ip_country WHERE idx >= (%s-(%s %% 65536)) AND ip_to >= %s AND  ip_from < %s LIMIT 1", tmp, tmp, tmp, tmp);
    geoip_db = db_open(GeoIP_MainFile);
    _result = db_query(geoip_db, string);
    if(db_num_rows(_result) >= 1)
    {
    db_get_field_assoc(_result,"cn",dest,len);
    }
    db_free_result(_result);
    db_close(geoip_db);
    if(!strlen(dest)) format(dest, len, "Desconocido");
    return true;
}

stock GetIPCity(ip[], dest[], const len = sizeof(dest)) {
    new tmp[90];
    tmp = ip2long(ip);
    new string[500];
    format(string, sizeof(string), "SELECT loc.*\n FROM geolocation loc,\n geoblocks blk\n WHERE blk.idx = (%s-(%s %% 65536))\n AND blk.startIpNum < %s\n AND blk.endIpNum > %s\n AND loc.locId = blk.locId LIMIT 1;", tmp, tmp, tmp, tmp);
    geoip_city = db_open(GeoIP_CityFile);
    _result = db_query(geoip_city, string);
    if(db_num_rows(_result) >= 1)
    {
    db_get_field_assoc(_result,"city",dest,len);
    }
    db_free_result(_result);
    db_close(geoip_city);
    if(!strlen(dest)) format(dest, len, "Desconocido");
    return true;
}

new IPInfo[MAX_PLAYERS][MAX_PLAYER_NAME];
stock GetIPProxy(ip[], playerid) {
    if(IsPlayerConnected(playerid) && strlen(ip) > 0) {
        new str[128];
        GetIPCountry(ip, str, sizeof(str));
        if(strlen(str) > 0 && !strcmp("Anonymous Proxy",str)) {
        BanPorServer(playerid,"Anonymous Proxy Country","NN PVN (Proxy)");
        return true;
        } else {
            format(IPInfo[playerid], MAX_PLAYER_NAME, "%s", ip);
            format(str, sizeof(str), "www.ipqualityscore.com/api/ip_lookup.php?KEY=onekz5t6ksv8aidtrhcj7bhjit7u0&IP=%s", ip);
            //HTTP(playerid, HTTP_GET, str, "", "OnProxyRecieved");
        }
    }
    return false;
}

/*CallBack: OnProxyRecieved(index, response_code, data[]) {
    if(IsPlayerConnected(index)) {
        new ip[MAX_PLAYER_NAME];
        GetPlayerIp(index, ip, sizeof(ip));
    }
    IPInfo[index] = "";
}*/

stock ip2long(ip[]) {
    new ips[4];
    sscanf(ip, "p<.>dddd", ips[0], ips[1], ips[2], ips[3]);
    new tmp[90];
    format(tmp, sizeof(tmp), "((16777216 * %d) + (65536 * %d) + (256 * %d) + %d)", ips[0], ips[1], ips[2], ips[3]);
    return tmp;
}

stock Log(filename[], text[])
{
	new File:file;

	new string[250];
	format(string, 250, ""_LOG_"%s", filename);
	new year, month, day;
	new hour, minute, second;
	getdate(year, month, day);
	gettime(hour, minute, second);

	file = fopen(string, io_append);
	format(string2, sizeof(string2),"(%02d/%02d/%02d | %02d:%02d:%02d) %s\r\n", month, day, year, hour, minute, second, text);
	fwrite(file, string2);
	fclose(file);
	return 1;
}

stock KickBot(playerid,reason[])
{
	new str[245]; 
	format(str, 245, ""R"@Bot"W" Expulso al jugador "R"%s"W" Razon: "R"%s", ACCOUNT_INFO[playerid][ac_NAME], reason);
	SendAdminAd(-1, str);
	KickEx(playerid,100);
	return 1;
}

stock DetectarSpamSpam(playerid,SPAM[])
{
	if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] >= 1 ) return 0;
 
    if(strfind(SPAM, "S1", true) != -1) return 1;
    if(strfind(SPAM, "7777", true) != -1) return 1;
    if(strfind(SPAM, ": 7777", true) != -1) return 1;
    if(strfind(SPAM, " : 7777", true) != -1) return 1;
    if(strfind(SPAM, " 7777", true) != -1) return 1;
    if(strfind(SPAM, "zona de exterminio", true) != -1) return 1;
    if(strfind(SPAM, "gamerx", true) != -1) return 1;
    if(strfind(SPAM, "fenix zone dm", true) != -1) return 1;
    if(strfind(SPAM, "fz dm", true) != -1) return 1;
    if(strfind(SPAM, "revolution fr", true) != -1) return 1;
    if(strfind(SPAM, "revolucion freeroam", true) != -1) return 1;
    if(strfind(SPAM, "redzone", true) != -1) return 1;
    if(strfind(SPAM, "zona roja", true) != -1) return 1;
    if(strfind(SPAM, "zonaroja", true) != -1) return 1;
    if(strfind(SPAM, "super landia", true) != -1) return 1;
    if(strfind(SPAM, "superlandia", true) != -1) return 1;
    if(strfind(SPAM, "exterminiototal", true) != -1) return 1;
    if(strfind(SPAM, "exterminio total", true) != -1) return 1;
    if(strfind(SPAM, "megamania", true) != -1) return 1;
    if(strfind(SPAM, "mega mania", true) != -1) return 1;
    if(strfind(SPAM, "mega extreme", true) != -1) return 1;
    if(strfind(SPAM, "megaextreme", true) != -1) return 1;
    if(strfind(SPAM, "mxf", true) != -1) return 1;
    if(strfind(SPAM, "zn roja", true) != -1) return 1;
    if(strfind(SPAM, "zona red", true) != -1) return 1;
    if(strfind(SPAM, "zonared", true) != -1) return 1;
    if(strfind(SPAM, "zon4 roj4", true) != -1) return 1;
    if(strfind(SPAM, "z0n4r0j4", true) != -1) return 1;
    if(strfind(SPAM, "z0n4 r0j4", true) != -1) return 1;
    if(strfind(SPAM, "z0na roja", true) != -1) return 1;
    if(strfind(SPAM, "z0naroja", true) != -1) return 1;
    if(strfind(SPAM, "super fr", true) != -1) return 1;
    if(strfind(SPAM, "superfreeroam", true) != -1) return 1;
 
    return 0;
}

funcion HideTagForAllPlayers(playerid)
{
    foreach(new i : Player)
    {   
        ShowPlayerNameTagForPlayer(i, playerid, false);
    }
    return 1;
}
funcion ShowTagForAllPlayers(playerid)
{
    foreach(new i : Player)
    {   
        ShowPlayerNameTagForPlayer(i, playerid, true);
    }
    return 1;
}

Show_Inventario(playerid)
{
	if(ACCOUNT_INFO[playerid][ac_ID]== 0) return 1;
	SelectTextDraw(playerid,0xB00000FF);
	ABRIO_INVENTARIO[playerid]=true;
	new query[256],DBResult:Result,tipos_,ide_;

	ITEM_PLAYER[playerid][ID][15] = INVALID_ID;
	ITEM_PLAYER[playerid][ID][16] = INVALID_ID;
	ITEM_PLAYER[playerid][ID][17] = INVALID_ID;
	ITEM_PLAYER[playerid][ID][18] = INVALID_ID;
	ITEM_PLAYER[playerid][ID][19] = INVALID_ID;

    format(query,sizeof(query),"SELECT TIPO,ID FROM INVENTARIO WHERE PLAYER = '%d';",ACCOUNT_INFO[playerid][ac_ID]);
    Result = db_query(Database,query);
    new empeza=1;
    

    TextDrawSetPreviewModel(Jugador_Textdraws[playerid][textdraw_invSH][14], GetPlayerSkin(playerid));
    for(new i; i < db_num_rows(Result); i++)
    {
    	empeza++;
	    db_get_field_assoc(Result, "TIPO",query, 20); 		tipos_ = strval(query);
	    db_get_field_assoc(Result, "ID",query, 20);			ide_ = strval(query);

	    INVENTARY_PLAYER[playerid][TIPO][empeza]=tipos_;
	    INVENTARY_PLAYER[playerid][ID][empeza]=ide_;

	    TextDrawSetPreviewModel(Jugador_Textdraws[playerid][textdraw_invSH][empeza], INVENTARIOPLAYER[ tipos_ ][OBJETO]);
	    db_next_row(Result);
    }
    db_free_result(Result);
 
 	Update_Item_Equiped(playerid);

	for(new i=0; i < 22 ; i ++) TextDrawShowForPlayer(playerid,Jugador_Textdraws[playerid][textdraw_invSH][i]);
	return 1;
}

funcion TimerVendaje(playerid)
{
	PUNTOS_BOTIQUIN[playerid]--;

	TextDrawTextSize(Jugador_Textdraws[ playerid ][textdraw_vendaje][1], floatadd(521.786804, floatdiv(PUNTOS_BOTIQUIN[playerid], 1.0728092)), 0.000000);
	TextDrawShowForPlayer(playerid,Jugador_Textdraws[playerid][textdraw_vendaje][1]);

	new Float:deal;
	GetPlayerHealth(playerid, deal);
	deal=deal+1;
	if(deal > 100)
	{
		PUNTOS_BOTIQUIN[playerid]=0;
		for(new i=0; i < 3; i++) TextDrawHideForPlayer(playerid, Jugador_Textdraws[playerid][textdraw_vendaje][ i ]);
		KillTimer(Timer_Vendaje[playerid]);
		return 1;
	}
	SetPlayerHealthEx(playerid, deal);
	if(PUNTOS_BOTIQUIN[playerid] < 0)
	{
		PUNTOS_BOTIQUIN[playerid]=0;
		for(new i=0; i < 3; i++) TextDrawHideForPlayer(playerid, Jugador_Textdraws[playerid][textdraw_vendaje][ i ]);
		KillTimer(Timer_Vendaje[playerid]);
		return 1;
	}
	return 1;
}
GetItemsEquipados(playerid)
{
	new query[100],count,DBResult:Result;
	format(query,sizeof(query),"SELECT * FROM ITEM_EQUIPED WHERE PLAYER='%d';",ACCOUNT_INFO[playerid][ac_ID]);
    Result = db_query(Database,query);
    count=db_num_rows(Result);
	return count;
}
GetItemsFromBaulVehicle(id_vehicle)
{
	new query[100],count,DBResult:Result;
	format(query,sizeof(query),"SELECT * FROM BAUL WHERE VEHICULO_ID='%d';",id_vehicle);
    Result = db_query(_DB_,query);
    count=db_num_rows(Result);
	return count;
}
GetItemsFromEstanteriaCasa(id_casa)
{
	new query[100],count,DBResult:Result;
	format(query,sizeof(query),"SELECT * FROM ESTANTERIA_CASA WHERE CASAID='%d';",id_casa);
    Result = db_query(_DB_,query);
    count=db_num_rows(Result);
	return count;
}
GetItemsFromEstanteriaDepa(id_casa)
{
	new query[100],count,DBResult:Result;
	format(query,sizeof(query),"SELECT * FROM ESTANTERIA_DEPA WHERE APARTAMENTOID='%d';",id_casa);
    Result = db_query(_DB_,query);
    count=db_num_rows(Result);
	return count;
}
GetCountItemsNevera_Casa(id_casa)
{
	new query[100],count,DBResult:Result;
	format(query,sizeof(query),"SELECT * FROM NEVERACASAVIP WHERE CASAID='%d';",id_casa);
    Result = db_query(_DB_,query);
    count=db_num_rows(Result);
	return count;
}

GetCountItemsNevera_Depa(id_casa)
{
	new query[100],count,DBResult:Result;
	format(query,sizeof(query),"SELECT * FROM NEVERAAPARTAMENTO WHERE APARTAMENTOID='%d';",id_casa);
    Result = db_query(_DB_,query);
    count=db_num_rows(Result);
	return count;
}

GetItemsFromArmarioCasa(id_casa)
{
	new query[100],count,DBResult:Result;
	format(query,sizeof(query),"SELECT * FROM ARMARIO_CASA WHERE CASAID='%d';",id_casa);
    Result = db_query(_DB_,query);
    count=db_num_rows(Result);
	return count;
}
GetItemsFromArmarioDepa(id_casa)
{
	new query[100],count,DBResult:Result;
	format(query,sizeof(query),"SELECT * FROM ARMARIO_APARTAMENTO WHERE APARTAMENTOID='%d';",id_casa);
    Result = db_query(_DB_,query);
    count=db_num_rows(Result);
	return count;
}
stock IsPlayerInFrontVehicle(playerid,vehicleid,Float:radius,Float:vehiclelength)
{
  new Float:x,Float:y,Float:z,Float:a;
  GetVehiclePos(vehicleid, x, y, z);
  GetPlayerFacingAngle(vehicleid, a);
  x += (vehiclelength* floatsin(-a, degrees));
  y += (vehiclelength* floatcos(-a, degrees));
  return IsPlayerInRangeOfPoint(playerid,radius,x,y,z);
}

stock GetPosBehindVehicle(vehicleid, &Float:x, &Float:y, &Float:z, Float:offset=0.5) //Credits go to MP2 
{ 
    new Float:vehicleSize[3], Float:vehiclePos[3]; 
    GetVehiclePos(vehicleid, vehiclePos[0], vehiclePos[1], vehiclePos[2]); 
    GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_SIZE, vehicleSize[0], vehicleSize[1], vehicleSize[2]); 
    GetXYBehindVehicle(vehicleid, vehiclePos[0], vehiclePos[1], (vehicleSize[1]/2)+offset); 
    x = vehiclePos[0]; 
    y = vehiclePos[1]; 
    z = vehiclePos[2]; 
    return 1; 
} 

stock GetXYBehindVehicle(vehicleid, &Float:q, &Float:w, Float:distance)//Credits go to MP2 
{ 
    new Float:a; 
    GetVehiclePos(vehicleid, q, w, a); 
    GetVehicleZAngle(vehicleid, a); 
    q += (distance * -floatsin(-a, degrees)); 
    w += (distance * -floatcos(-a, degrees)); 
} 

ShowTexturasForCasa(playerid)
{
	if(PLAYER_TEMP[playerid][pt_TEXTURA_APARTAMENTO]==true)
	{
		new id=ENAPARTAMENTO[playerid];
		if(id== -1 ) return MensajesAyuda(playerid,"Errorrrrrrrrr");
		new DBResult:Result,DB_Query[100];
		format(DB_Query, sizeof DB_Query,"SELECT * FROM TEXTURAS WHERE ID='%d';",PLAYER_TEMP[playerid][pt_TEXTURA_ID]);
		Result = db_query(_DB_, DB_Query);
		new modela,name_01_[20],name_02_[20],name_[20],type_moneda,precioa;
		if(db_num_rows(Result))
		{
			type_moneda = db_get_field_assoc_int(Result,"MONEDA");
			precioa = db_get_field_assoc_int(Result,"PRECIO");
			modela = db_get_field_assoc_int(Result,"MODEL_ID");
			db_get_field_assoc(Result, "TEXT_NAME_1",name_01_, 20);
			db_get_field_assoc(Result, "TEXT_NAME_2",name_02_, 20);
			db_get_field_assoc(Result, "NOMBRE",name_, 20);
			switch(PLAYER_TEMP[playerid][pt_VIENDO_TEXTURA])
			{
				case VIENDO_PAREDES: for(new i = 0; i < sizeof PAREDES_DEPART; i++){SetDynamicObjectMaterial(ObjetoDepartamento[ id ][ i ][Paredes], 0, modela,name_01_,name_02_,0x00000000);}
				case VIENDO_PISO: for(new i = 0; i < sizeof PISO_DEPART; i++){SetDynamicObjectMaterial(ObjetoDepartamento[ id ][ i ][Piso], 0, modela,name_01_,name_02_,0x00000000);}
				case VIENDO_TECHO: for(new i = 0; i < sizeof TECHO_DEPART; i++){SetDynamicObjectMaterial(ObjetoDepartamento[ id ][ i ][Techo], 0, modela,name_01_,name_02_,0x00000000);}
				case VIENDO_PUERTAS: for(new i = 0; i < sizeof PUERTA_DEPART; i++){SetDynamicObjectMaterial(ObjetoDepartamento[ id ][ i ][Puerta], 1, modela,name_01_,name_02_,0x00000000);}
				case VIENDO_CAMAS: for(new i = 0; i < sizeof CAMA_DEPART; i++){SetDynamicObjectMaterial(ObjetoDepartamento[ id ][ i ][Cama], 0, modela,name_01_,name_02_,0x00000000);}
				case VIENDO_ARMARIO: for(new i = 0; i < sizeof ARMARIO_DEPART; i++){SetDynamicObjectMaterial(ObjetoDepartamento[ id ][ i ][Armario], 1, modela,name_01_,name_02_,0x00000000);}
				case VIENDO_ESTANTERIA: for(new i = 0; i < sizeof ESTANTERIA_DEPART; i++){SetDynamicObjectMaterial(ObjetoDepartamento[ id ][ i ][Estanteria], 1, modela,name_01_,name_02_,0x00000000);}
				case VIENDO_COCINA: for(new i = 0; i < sizeof COCINA_DEPART; i++){SetDynamicObjectMaterial(ObjetoDepartamento[ id ][ i ][Cocina], 1, modela,name_01_,name_02_,0x00000000);}
				case VIENDO_EQUIPO: for(new i = 0; i < sizeof EQUIPO_DEPART; i++){SetDynamicObjectMaterial(ObjetoDepartamento[ id ][ i ][Equipo], 5, modela,name_01_,name_02_,0x00000000);}
			}
			
		}
		else MensajesAyuda(playerid,"Error desconocido");
		db_free_result(Result);

		PLAYER_TEMP[playerid][ pt_TYPE_MONEDA_TEXTURA ] = type_moneda;
		PLAYER_TEMP[playerid][ pt_PRECIO_TEXTURA ] = precioa;
		switch(type_moneda)
		{
			case 1:
			{
				new string[30];
				format(string, sizeof string,"~g~$ %s",number_format_thousand(precioa));
				TextDrawSetString(Jugador_Textdraws[playerid][textdraw_menu_textura][2], string);
			}
			case 2:
			{
				new string[30];
				format(string, sizeof string,"~b~RP %d",precioa);
				TextDrawSetString(Jugador_Textdraws[playerid][textdraw_menu_textura][2], string);
			}
		}
		TextDrawSetString(Jugador_Textdraws[playerid][textdraw_menu_textura][3], name_);

		switch(PLAYER_TEMP[playerid][pt_VIENDO_TEXTURA])
		{
			case VIENDO_PAREDES:  TextDrawSetString(Jugador_Textdraws[playerid][textdraw_menu_textura][1], "Paredes");
			case VIENDO_PISO:  TextDrawSetString(Jugador_Textdraws[playerid][textdraw_menu_textura][1], "Piso");
			case VIENDO_TECHO:  TextDrawSetString(Jugador_Textdraws[playerid][textdraw_menu_textura][1], "Techo");
			case VIENDO_PUERTAS:  TextDrawSetString(Jugador_Textdraws[playerid][textdraw_menu_textura][1], "Puertas");
			case VIENDO_CAMAS:  TextDrawSetString(Jugador_Textdraws[playerid][textdraw_menu_textura][1], "Camas");
			case VIENDO_ARMARIO:  TextDrawSetString(Jugador_Textdraws[playerid][textdraw_menu_textura][1], "Armario");
			case VIENDO_ESTANTERIA:  TextDrawSetString(Jugador_Textdraws[playerid][textdraw_menu_textura][1], "Estanteria");
			case VIENDO_COCINA:  TextDrawSetString(Jugador_Textdraws[playerid][textdraw_menu_textura][1], "Cocina");
			case VIENDO_EQUIPO:  TextDrawSetString(Jugador_Textdraws[playerid][textdraw_menu_textura][1], "Equipo");
		}

		for(new i=0; i < 8; i++) TextDrawShowForPlayer(playerid,Jugador_Textdraws[playerid][textdraw_menu_textura][i]);

		SelectTextDraw(playerid,SELEC_TEXTDRAW);
		PLAYER_TEMP[playerid][pt_VIENDO_TEXTURAS]=true;
		return 1;
	}
	else
	{
	//===========================================================================================================
		new id=ENCASAVIP[playerid];
		if(id == INVALID_ID) return MensajesAyuda(playerid,"Error");
		new DBResult:Result,DB_Query[100];
		format(DB_Query, sizeof DB_Query,"SELECT * FROM TEXTURAS WHERE ID='%d';",PLAYER_TEMP[playerid][pt_TEXTURA_ID]);
		Result = db_query(_DB_, DB_Query);
		new modela,name_01_[20],name_02_[20],name_[20],type_moneda,precioa;
		if(db_num_rows(Result))
		{
			type_moneda = db_get_field_assoc_int(Result,"MONEDA");
			precioa = db_get_field_assoc_int(Result,"PRECIO");
			modela = db_get_field_assoc_int(Result,"MODEL_ID");
			db_get_field_assoc(Result, "TEXT_NAME_1",name_01_, 20);
			db_get_field_assoc(Result, "TEXT_NAME_2",name_02_, 20);
			db_get_field_assoc(Result, "NOMBRE",name_, 20);
			switch(PLAYER_TEMP[playerid][pt_VIENDO_TEXTURA])
			{
				case VIENDO_PAREDES: for(new i = 0; i < sizeof ObjetosParedes; i++){SetDynamicObjectMaterial(ObjetoCasa[ id ][ i ][Paredes], 0, modela,name_01_,name_02_,0x00000000);}
				case VIENDO_PISO: for(new i = 0; i < sizeof ObjetosPiso; i++){SetDynamicObjectMaterial(ObjetoCasa[ id ][ i ][Piso], 0, modela,name_01_,name_02_,0x00000000);}
				case VIENDO_TECHO: for(new i = 0; i < sizeof ObjetosTecho; i++){SetDynamicObjectMaterial(ObjetoCasa[ id ][ i ][Techo], 0, modela,name_01_,name_02_,0x00000000);}
				case VIENDO_PUERTAS: for(new i = 0; i < sizeof ObjetosPuerta; i++){SetDynamicObjectMaterial(ObjetoCasa[ id ][ i ][Puerta], 1, modela,name_01_,name_02_,0x00000000);}
				case VIENDO_CAMAS: for(new i = 0; i < sizeof ObjetosCama; i++){SetDynamicObjectMaterial(ObjetoCasa[ id ][ i ][Cama], 0, modela,name_01_,name_02_,0x00000000);}
				case VIENDO_ARMARIO: for(new i = 0; i < sizeof ObjetosArmario; i++){SetDynamicObjectMaterial(ObjetoCasa[ id ][ i ][Armario], 1, modela,name_01_,name_02_,0x00000000);}
				case VIENDO_ESTANTERIA: for(new i = 0; i < sizeof ObjetosEstanteria; i++){SetDynamicObjectMaterial(ObjetoCasa[ id ][ i ][Estanteria], 1, modela,name_01_,name_02_,0x00000000);}
				case VIENDO_COCINA: for(new i = 0; i < sizeof ObjetosCocina; i++){SetDynamicObjectMaterial(ObjetoCasa[ id ][ i ][Cocina], 1, modela,name_01_,name_02_,0x00000000);}
				case VIENDO_EQUIPO: for(new i = 0; i < sizeof ObjetosEquipo; i++){SetDynamicObjectMaterial(ObjetoCasa[ id ][ i ][Equipo], 5, modela,name_01_,name_02_,0x00000000);}
			}
			
		}
		else MensajesAyuda(playerid,"Error desconocido");
		db_free_result(Result);

		PLAYER_TEMP[playerid][ pt_TYPE_MONEDA_TEXTURA ] = type_moneda;
		PLAYER_TEMP[playerid][ pt_PRECIO_TEXTURA ] = precioa;
		switch(type_moneda)
		{
			case 1:
			{
				new string[30];
				format(string, sizeof string,"~g~$ %s",number_format_thousand(precioa));
				TextDrawSetString(Jugador_Textdraws[playerid][textdraw_menu_textura][2], string);
			}
			case 2:
			{
				new string[30];
				format(string, sizeof string,"~b~RP %d",precioa);
				TextDrawSetString(Jugador_Textdraws[playerid][textdraw_menu_textura][2], string);
			}
		}
		TextDrawSetString(Jugador_Textdraws[playerid][textdraw_menu_textura][3], name_);

		switch(PLAYER_TEMP[playerid][pt_VIENDO_TEXTURA])
		{
			case VIENDO_PAREDES:  TextDrawSetString(Jugador_Textdraws[playerid][textdraw_menu_textura][1], "Paredes");
			case VIENDO_PISO:  TextDrawSetString(Jugador_Textdraws[playerid][textdraw_menu_textura][1], "Piso");
			case VIENDO_TECHO:  TextDrawSetString(Jugador_Textdraws[playerid][textdraw_menu_textura][1], "Techo");
			case VIENDO_PUERTAS:  TextDrawSetString(Jugador_Textdraws[playerid][textdraw_menu_textura][1], "Puertas");
			case VIENDO_CAMAS:  TextDrawSetString(Jugador_Textdraws[playerid][textdraw_menu_textura][1], "Camas");
			case VIENDO_ARMARIO:  TextDrawSetString(Jugador_Textdraws[playerid][textdraw_menu_textura][1], "Armario");
			case VIENDO_ESTANTERIA:  TextDrawSetString(Jugador_Textdraws[playerid][textdraw_menu_textura][1], "Estanteria");
			case VIENDO_COCINA:  TextDrawSetString(Jugador_Textdraws[playerid][textdraw_menu_textura][1], "Cocina");
			case VIENDO_EQUIPO:  TextDrawSetString(Jugador_Textdraws[playerid][textdraw_menu_textura][1], "Equipo");
		}

		for(new i=0; i < 8; i++) TextDrawShowForPlayer(playerid,Jugador_Textdraws[playerid][textdraw_menu_textura][i]);

		SelectTextDraw(playerid,SELEC_TEXTDRAW);
		PLAYER_TEMP[playerid][pt_VIENDO_TEXTURAS]=true;
	}
	return 1;
}
HideShowTexturaCasa(playerid)
{
	LoadTextureForCasa(playerid);
	for(new i=0; i < 8; i++) TextDrawHideForPlayer(playerid,Jugador_Textdraws[playerid][textdraw_menu_textura][i]);
	CancelSelectTextDraw(playerid);
	PLAYER_TEMP[playerid][pt_VIENDO_TEXTURAS]=false;
	return 1;
}
CantidadMapeosCasaVip()
{
	new DB_Query[50],count,DBResult:Result;
	format(DB_Query, sizeof DB_Query,"SELECT * FROM MAPEOSCASAVIP");
	Result = db_query(_DB_,DB_Query);
	for(new i=0; i < db_num_rows(Result); i++)
	{
		count++;
		db_next_row(Result);
	}
	return count;
}
CantidadTexturas()
{
	new DB_Query[50],count,DBResult:Result;
	format(DB_Query, sizeof DB_Query,"SELECT * FROM TEXTURAS");
	Result = db_query(_DB_,DB_Query);
	for(new i=0; i < db_num_rows(Result); i++)
	{
		count++;
		db_next_row(Result);
	}
	return count;
}

Get_Model_Textura(id)
{
	new DB_Query[140],DBResult:Result,modelo;
	format(DB_Query, sizeof DB_Query,"SELECT MODEL_ID FROM TEXTURAS WHERE ID='%d';",id);
	Result = db_query(_DB_, DB_Query);
	if(db_num_rows(Result))
	{
		modelo=db_get_field_assoc_int(Result, "MODEL_ID");
	}
	return modelo;
}
Get_Name_Textura_1(id)
{
	new DB_Query[140],DBResult:Result,name_01_[30];
	format(DB_Query, sizeof DB_Query,"SELECT TEXT_NAME_1 FROM TEXTURAS WHERE ID='%d';",id);
	Result = db_query(_DB_, DB_Query);
	if(db_num_rows(Result))
	{
		db_get_field_assoc(Result, "TEXT_NAME_1",name_01_, 30);
	}
	return name_01_;
}
Get_Name_Textura_2(id)
{
	new DB_Query[140],DBResult:Result,name_01_[30];
	format(DB_Query, sizeof DB_Query,"SELECT TEXT_NAME_2 FROM TEXTURAS WHERE ID='%d';",id);
	Result = db_query(_DB_, DB_Query);
	if(db_num_rows(Result))
	{
		db_get_field_assoc(Result, "TEXT_NAME_2",name_01_, 30);
	}
	return name_01_;
}

LoadTextureForCasa(playerid)
{
	if(PLAYER_TEMP[playerid][pt_TEXTURA_APARTAMENTO]==true)
	{
		new DB_Query[100],DBResult:Result,id=ENAPARTAMENTO[playerid];
		if(id != -1)
		{
			new TEXTURAPARED,TEXTURAPISO,TEXTURATECHO,TEXTURAPUERTA,TEXTURACAMA,TEXTURACOCINA,TEXTURAARMARIO,TEXTURAESTANTERIA,TEXTURAEQUIPO;
			format(DB_Query, sizeof DB_Query,"SELECT * FROM APARTAMENTOS WHERE ID='%d';",id);
			Result = db_query(_DB_, DB_Query);
			if(db_num_rows(Result))
			{
				TEXTURAPARED = db_get_field_assoc_int(Result, "TEXTURAPARED");
		        TEXTURAPISO = db_get_field_assoc_int(Result, "TEXTURAPISO");
		        TEXTURATECHO = db_get_field_assoc_int(Result, "TEXTURATECHO");
		        TEXTURAPUERTA = db_get_field_assoc_int(Result, "TEXTURAPUERTA");
		        TEXTURACAMA = db_get_field_assoc_int(Result, "TEXTURACAMA");
		        TEXTURACOCINA = db_get_field_assoc_int(Result, "TEXTURACOCINA");
		        TEXTURAARMARIO = db_get_field_assoc_int(Result, "TEXTURAARMARIO");
		        TEXTURAESTANTERIA = db_get_field_assoc_int(Result, "TEXTURAESTANTERIA");
		        TEXTURAEQUIPO = db_get_field_assoc_int(Result, "TEXTURAEQUIPO");
				switch(PLAYER_TEMP[playerid][pt_VIENDO_TEXTURA])
				{
					case VIENDO_PAREDES: for(new i = 0; i < sizeof PAREDES_DEPART; i++){SetDynamicObjectMaterial(ObjetoDepartamento[ id ][ i ][Paredes], 0, Get_Model_Textura(TEXTURAPARED),Get_Name_Textura_1(TEXTURAPARED),Get_Name_Textura_2(TEXTURAPARED),0x00000000);}
					case VIENDO_PISO: for(new i = 0; i < sizeof PISO_DEPART; i++){SetDynamicObjectMaterial(ObjetoDepartamento[ id ][ i ][Piso], 0, Get_Model_Textura(TEXTURAPISO),Get_Name_Textura_1(TEXTURAPISO),Get_Name_Textura_2(TEXTURAPISO),0x00000000);}
					case VIENDO_TECHO: for(new i = 0; i < sizeof TECHO_DEPART; i++){SetDynamicObjectMaterial(ObjetoDepartamento[ id ][ i ][Techo], 0, Get_Model_Textura(TEXTURATECHO),Get_Name_Textura_1(TEXTURATECHO),Get_Name_Textura_2(TEXTURATECHO),0x00000000);}
					case VIENDO_PUERTAS: for(new i = 0; i < sizeof PUERTA_DEPART; i++){SetDynamicObjectMaterial(ObjetoDepartamento[ id ][ i ][Puerta], 1, Get_Model_Textura(TEXTURAPUERTA),Get_Name_Textura_1(TEXTURAPUERTA),Get_Name_Textura_2(TEXTURAPUERTA),0x00000000);}
					case VIENDO_CAMAS: for(new i = 0; i < sizeof CAMA_DEPART; i++){SetDynamicObjectMaterial(ObjetoDepartamento[ id ][ i ][Cama], 0, Get_Model_Textura(TEXTURACAMA),Get_Name_Textura_1(TEXTURACAMA),Get_Name_Textura_2(TEXTURACAMA),0x00000000);}
					case VIENDO_ARMARIO: for(new i = 0; i < sizeof ARMARIO_DEPART; i++){SetDynamicObjectMaterial(ObjetoDepartamento[ id ][ i ][Armario], 1, Get_Model_Textura(TEXTURAARMARIO),Get_Name_Textura_1(TEXTURAARMARIO),Get_Name_Textura_2(TEXTURAARMARIO),0x00000000);}
					case VIENDO_ESTANTERIA: for(new i = 0; i < sizeof ESTANTERIA_DEPART; i++){SetDynamicObjectMaterial(ObjetoDepartamento[ id ][ i ][Estanteria], 1, Get_Model_Textura(TEXTURAESTANTERIA),Get_Name_Textura_1(TEXTURAESTANTERIA),Get_Name_Textura_2(TEXTURAESTANTERIA),0x00000000);}
					case VIENDO_COCINA: for(new i = 0; i < sizeof COCINA_DEPART; i++){SetDynamicObjectMaterial(ObjetoDepartamento[ id ][ i ][Cocina], 1, Get_Model_Textura(TEXTURACOCINA),Get_Name_Textura_1(TEXTURACOCINA),Get_Name_Textura_2(TEXTURACOCINA),0x00000000);}
					case VIENDO_EQUIPO: for(new i = 0; i < sizeof EQUIPO_DEPART; i++){SetDynamicObjectMaterial(ObjetoDepartamento[ id ][ i ][Equipo], 5, Get_Model_Textura(TEXTURAEQUIPO),Get_Name_Textura_1(TEXTURAEQUIPO),Get_Name_Textura_2(TEXTURAEQUIPO),0x00000000);}
				}
			}
			db_free_result(Result);
		}
	}
	else
	{
		new DB_Query[100],DBResult:Result,id=ENCASAVIP[playerid];
		if(id != -1)
		{
			new TEXTURAPARED,TEXTURAPISO,TEXTURATECHO,TEXTURAPUERTA,TEXTURACAMA,TEXTURACOCINA,TEXTURAARMARIO,TEXTURAESTANTERIA,TEXTURAEQUIPO;
			format(DB_Query, sizeof DB_Query,"SELECT * FROM CASASVIP WHERE ID='%d';",id);
			Result = db_query(_DB_, DB_Query);
			if(db_num_rows(Result))
			{

				TEXTURAPARED = db_get_field_assoc_int(Result, "TEXTURAPARED");
		        TEXTURAPISO = db_get_field_assoc_int(Result, "TEXTURAPISO");
		        TEXTURATECHO = db_get_field_assoc_int(Result, "TEXTURATECHO");
		        TEXTURAPUERTA = db_get_field_assoc_int(Result, "TEXTURAPUERTA");
		        TEXTURACAMA = db_get_field_assoc_int(Result, "TEXTURACAMA");
		        TEXTURACOCINA = db_get_field_assoc_int(Result, "TEXTURACOCINA");
		        TEXTURAARMARIO = db_get_field_assoc_int(Result, "TEXTURAARMARIO");
		        TEXTURAESTANTERIA = db_get_field_assoc_int(Result, "TEXTURAESTANTERIA");
		        TEXTURAEQUIPO = db_get_field_assoc_int(Result, "TEXTURAEQUIPO");
				switch(PLAYER_TEMP[playerid][pt_VIENDO_TEXTURA])
				{
					case VIENDO_PAREDES: for(new i = 0; i < sizeof ObjetosParedes; i++){SetDynamicObjectMaterial(ObjetoCasa[ id ][ i ][Paredes], 0, Get_Model_Textura(TEXTURAPARED),Get_Name_Textura_1(TEXTURAPARED),Get_Name_Textura_2(TEXTURAPARED),0x00000000);}
					case VIENDO_PISO: for(new i = 0; i < sizeof ObjetosPiso; i++){SetDynamicObjectMaterial(ObjetoCasa[ id ][ i ][Piso], 0, Get_Model_Textura(TEXTURAPISO),Get_Name_Textura_1(TEXTURAPISO),Get_Name_Textura_2(TEXTURAPISO),0x00000000);}
					case VIENDO_TECHO: for(new i = 0; i < sizeof ObjetosTecho; i++){SetDynamicObjectMaterial(ObjetoCasa[ id ][ i ][Techo], 0, Get_Model_Textura(TEXTURATECHO),Get_Name_Textura_1(TEXTURATECHO),Get_Name_Textura_2(TEXTURATECHO),0x00000000);}
					case VIENDO_PUERTAS: for(new i = 0; i < sizeof ObjetosPuerta; i++){SetDynamicObjectMaterial(ObjetoCasa[ id ][ i ][Puerta], 1, Get_Model_Textura(TEXTURAPUERTA),Get_Name_Textura_1(TEXTURAPUERTA),Get_Name_Textura_2(TEXTURAPUERTA),0x00000000);}
					case VIENDO_CAMAS: for(new i = 0; i < sizeof ObjetosCama; i++){SetDynamicObjectMaterial(ObjetoCasa[ id ][ i ][Cama], 0, Get_Model_Textura(TEXTURACAMA),Get_Name_Textura_1(TEXTURACAMA),Get_Name_Textura_2(TEXTURACAMA),0x00000000);}
					case VIENDO_ARMARIO: for(new i = 0; i < sizeof ObjetosArmario; i++){SetDynamicObjectMaterial(ObjetoCasa[ id ][ i ][Armario], 1, Get_Model_Textura(TEXTURAARMARIO),Get_Name_Textura_1(TEXTURAARMARIO),Get_Name_Textura_2(TEXTURAARMARIO),0x00000000);}
					case VIENDO_ESTANTERIA: for(new i = 0; i < sizeof ObjetosEstanteria; i++){SetDynamicObjectMaterial(ObjetoCasa[ id ][ i ][Estanteria], 1, Get_Model_Textura(TEXTURAESTANTERIA),Get_Name_Textura_1(TEXTURAESTANTERIA),Get_Name_Textura_2(TEXTURAESTANTERIA),0x00000000);}
					case VIENDO_COCINA: for(new i = 0; i < sizeof ObjetosCocina; i++){SetDynamicObjectMaterial(ObjetoCasa[ id ][ i ][Cocina], 1, Get_Model_Textura(TEXTURACOCINA),Get_Name_Textura_1(TEXTURACOCINA),Get_Name_Textura_2(TEXTURACOCINA),0x00000000);}
					case VIENDO_EQUIPO: for(new i = 0; i < sizeof ObjetosEquipo; i++){SetDynamicObjectMaterial(ObjetoCasa[ id ][ i ][Equipo], 5, Get_Model_Textura(TEXTURAEQUIPO),Get_Name_Textura_1(TEXTURAEQUIPO),Get_Name_Textura_2(TEXTURAEQUIPO),0x00000000);}
				}
			}
			db_free_result(Result);
		}
	}
	
	return 1;
}
Buy_Textura_Casa(playerid)
{
	if(PLAYER_TEMP[playerid][pt_TEXTURA_APARTAMENTO])
	{
		new id=ENAPARTAMENTO[playerid];
		new DB_Query[200];
		switch(PLAYER_TEMP[playerid][pt_VIENDO_TEXTURA])
		{
			case VIENDO_PAREDES:
			{
				format(DB_Query, sizeof DB_Query, "UPDATE `APARTAMENTOS` SET `TEXTURAPARED` = '%d' WHERE `ID` = '%d';",PLAYER_TEMP[playerid][pt_TEXTURA_ID],id);
				db_query(_DB_, DB_Query);
				MensajesAyuda(playerid,"~g~Textura pared adquirida");
			}
			case VIENDO_PISO:
			{
				format(DB_Query, sizeof DB_Query, "UPDATE `APARTAMENTOS` SET `TEXTURAPISO` = '%d' WHERE `ID` = '%d';",PLAYER_TEMP[playerid][pt_TEXTURA_ID],id);
				db_query(_DB_, DB_Query);
				MensajesAyuda(playerid,"~g~Textura piso adquirida");
			}
			case VIENDO_TECHO:
			{
				format(DB_Query, sizeof DB_Query, "UPDATE `APARTAMENTOS` SET `TEXTURATECHO` = '%d' WHERE `ID` = '%d';",PLAYER_TEMP[playerid][pt_TEXTURA_ID],id);
				db_query(_DB_, DB_Query);
				MensajesAyuda(playerid,"~g~Textura techo adquirida");
			}
			case VIENDO_PUERTAS:
			{
				format(DB_Query, sizeof DB_Query, "UPDATE `APARTAMENTOS` SET `TEXTURAPUERTA` = '%d' WHERE `ID` = '%d';",PLAYER_TEMP[playerid][pt_TEXTURA_ID],id);
				db_query(_DB_, DB_Query);
				MensajesAyuda(playerid,"~g~Textura puertas adquirida");
			}
			case VIENDO_CAMAS:
			{
				format(DB_Query, sizeof DB_Query, "UPDATE `APARTAMENTOS` SET `TEXTURACAMA` = '%d' WHERE `ID` = '%d';",PLAYER_TEMP[playerid][pt_TEXTURA_ID],id);
				db_query(_DB_, DB_Query);
				MensajesAyuda(playerid,"~g~Textura cama adquirida");
			}
			case VIENDO_ARMARIO:
			{
				format(DB_Query, sizeof DB_Query, "UPDATE `APARTAMENTOS` SET `TEXTURAARMARIO` = '%d' WHERE `ID` = '%d';",PLAYER_TEMP[playerid][pt_TEXTURA_ID],id);
				db_query(_DB_, DB_Query);
				MensajesAyuda(playerid,"~g~Textura armario adquirida");
			}
			case VIENDO_ESTANTERIA:
			{
				format(DB_Query, sizeof DB_Query, "UPDATE `APARTAMENTOS` SET `TEXTURAESTANTERIA` = '%d' WHERE `ID` = '%d';",PLAYER_TEMP[playerid][pt_TEXTURA_ID],id);
				db_query(_DB_, DB_Query);
				MensajesAyuda(playerid,"~g~Textura estanteria adquirida");
			}
			case VIENDO_COCINA:
			{
				format(DB_Query, sizeof DB_Query, "UPDATE `APARTAMENTOS` SET `TEXTURACOCINA` = '%d' WHERE `ID` = '%d';",PLAYER_TEMP[playerid][pt_TEXTURA_ID],id);
				db_query(_DB_, DB_Query);
				MensajesAyuda(playerid,"~g~Textura cocina adquirida");
			}
			case VIENDO_EQUIPO:
			{
				format(DB_Query, sizeof DB_Query, "UPDATE `APARTAMENTOS` SET `TEXTURAEQUIPO` = '%d' WHERE `ID` = '%d';",PLAYER_TEMP[playerid][pt_TEXTURA_ID],id);
				db_query(_DB_, DB_Query);
				MensajesAyuda(playerid,"~g~Textura equipo adquirida");
			}
		}
		switch(PLAYER_TEMP[playerid][ pt_TYPE_MONEDA_TEXTURA ])
		{
			case 1:
			{
				GivePlayerCash(playerid,-PLAYER_TEMP[playerid][ pt_PRECIO_TEXTURA ]);
			}
			case 2:
			{
				GastarRp(playerid,PLAYER_TEMP[playerid][ pt_PRECIO_TEXTURA ]);
			}
		}
		
		HideShowTexturaCasa(playerid);
	}
	else
	{
		new id=ENCASAVIP[playerid];
		new DB_Query[200];
		switch(PLAYER_TEMP[playerid][pt_VIENDO_TEXTURA])
		{
			case VIENDO_PAREDES:
			{
				format(DB_Query, sizeof DB_Query, "UPDATE `CASASVIP` SET `TEXTURAPARED` = '%d' WHERE `ID` = '%d';",PLAYER_TEMP[playerid][pt_TEXTURA_ID],id);
				db_query(_DB_, DB_Query);
				MensajesAyuda(playerid,"~g~Textura pared adquirida");
			}
			case VIENDO_PISO:
			{
				format(DB_Query, sizeof DB_Query, "UPDATE `CASASVIP` SET `TEXTURAPISO` = '%d' WHERE `ID` = '%d';",PLAYER_TEMP[playerid][pt_TEXTURA_ID],id);
				db_query(_DB_, DB_Query);
				MensajesAyuda(playerid,"~g~Textura piso adquirida");
			}
			case VIENDO_TECHO:
			{
				format(DB_Query, sizeof DB_Query, "UPDATE `CASASVIP` SET `TEXTURATECHO` = '%d' WHERE `ID` = '%d';",PLAYER_TEMP[playerid][pt_TEXTURA_ID],id);
				db_query(_DB_, DB_Query);
				MensajesAyuda(playerid,"~g~Textura techo adquirida");
			}
			case VIENDO_PUERTAS:
			{
				format(DB_Query, sizeof DB_Query, "UPDATE `CASASVIP` SET `TEXTURAPUERTA` = '%d' WHERE `ID` = '%d';",PLAYER_TEMP[playerid][pt_TEXTURA_ID],id);
				db_query(_DB_, DB_Query);
				MensajesAyuda(playerid,"~g~Textura puertas adquirida");
			}
			case VIENDO_CAMAS:
			{
				format(DB_Query, sizeof DB_Query, "UPDATE `CASASVIP` SET `TEXTURACAMA` = '%d' WHERE `ID` = '%d';",PLAYER_TEMP[playerid][pt_TEXTURA_ID],id);
				db_query(_DB_, DB_Query);
				MensajesAyuda(playerid,"~g~Textura cama adquirida");
			}
			case VIENDO_ARMARIO:
			{
				format(DB_Query, sizeof DB_Query, "UPDATE `CASASVIP` SET `TEXTURAARMARIO` = '%d' WHERE `ID` = '%d';",PLAYER_TEMP[playerid][pt_TEXTURA_ID],id);
				db_query(_DB_, DB_Query);
				MensajesAyuda(playerid,"~g~Textura armario adquirida");
			}
			case VIENDO_ESTANTERIA:
			{
				format(DB_Query, sizeof DB_Query, "UPDATE `CASASVIP` SET `TEXTURAESTANTERIA` = '%d' WHERE `ID` = '%d';",PLAYER_TEMP[playerid][pt_TEXTURA_ID],id);
				db_query(_DB_, DB_Query);
				MensajesAyuda(playerid,"~g~Textura estanteria adquirida");
			}
			case VIENDO_COCINA:
			{
				format(DB_Query, sizeof DB_Query, "UPDATE `CASASVIP` SET `TEXTURACOCINA` = '%d' WHERE `ID` = '%d';",PLAYER_TEMP[playerid][pt_TEXTURA_ID],id);
				db_query(_DB_, DB_Query);
				MensajesAyuda(playerid,"~g~Textura cocina adquirida");
			}
			case VIENDO_EQUIPO:
			{
				format(DB_Query, sizeof DB_Query, "UPDATE `CASASVIP` SET `TEXTURAEQUIPO` = '%d' WHERE `ID` = '%d';",PLAYER_TEMP[playerid][pt_TEXTURA_ID],id);
				db_query(_DB_, DB_Query);
				MensajesAyuda(playerid,"~g~Textura equipo adquirida");
			}
		}
		switch(PLAYER_TEMP[playerid][ pt_TYPE_MONEDA_TEXTURA ])
		{
			case 1:
			{
				GivePlayerCash(playerid,-PLAYER_TEMP[playerid][ pt_PRECIO_TEXTURA ]);
			}
			case 2:
			{
				GastarRp(playerid,PLAYER_TEMP[playerid][ pt_PRECIO_TEXTURA ]);
			}
		}
		
		HideShowTexturaCasa(playerid);
	}
	return 1;
}

Hide_Buy_Toys(playerid)
{
	CancelSelectTextDraw(playerid);
	PLAYER_TEMP[playerid][COMPRANDO_ACCESORIOS]=false;
	for(new i=0; i < 12; i++) TextDrawHideForPlayer(playerid,Jugador_Textdraws[playerid][ textdraw_comprar_accesorio ][i]);
	return 1;
}

ShowComprarMapeosCasaVip(playerid)
{
	PLAYER_TEMP[playerid][pt_COMPRAR_MUEBLES]=true;
	new DB_Query[200],DBResult:Result,objet_karen,NAMER_KAREN[30],moneda_ic[50];
	format(DB_Query, sizeof DB_Query, "SELECT * FROM MAPEOSCASAVIP WHERE ID='%d';",PLAYER_TEMP[playerid][pt_COMPRAR_MUEBLE_ID]);
	Result = db_query(_DB_, DB_Query);
	if(db_num_rows(Result))
	{
		objet_karen = db_get_field_assoc_int(Result, "OBJETO");
		PLAYER_TEMP[playerid][pt_COMPRAR_MUEBLE_MONEDA] = db_get_field_assoc_int(Result, "MONEDA");
		PLAYER_TEMP[playerid][pt_COMPRAR_MUEBLE_PRECIO] = db_get_field_assoc_int(Result, "PRECIO");
		db_get_field_assoc(Result, "NOMBRE",NAMER_KAREN, 30);
	}
	TextDrawSetPreviewModel(Jugador_Textdraws[ playerid ][textdraw_comprarmuebles][4], objet_karen);
	switch(PLAYER_TEMP[playerid][pt_COMPRAR_MUEBLE_MONEDA])
	{
		case 1: format(moneda_ic,sizeof moneda_ic, "Costo: ~g~$$~w~%s",number_format_thousand(PLAYER_TEMP[playerid][pt_COMPRAR_MUEBLE_PRECIO]));
		case 2: format(moneda_ic,sizeof moneda_ic, "Costo: ~r~~g~RP RP~w~%d",PLAYER_TEMP[playerid][pt_COMPRAR_MUEBLE_PRECIO]);
	}
	TextDrawSetString(Jugador_Textdraws[ playerid ][textdraw_comprarmuebles][3] , moneda_ic);
	TextDrawSetString(Jugador_Textdraws[ playerid ][textdraw_comprarmuebles][1] , NAMER_KAREN);
	for(new i=0; i < 8; i++) TextDrawShowForPlayer(playerid, Jugador_Textdraws[ playerid ][textdraw_comprarmuebles][i]);
	SelectTextDraw(playerid,SELEC_TEXTDRAW);
	return 1;
}
HideComprarMapeosCasaVip(playerid)
{
	PLAYER_TEMP[playerid][pt_COMPRAR_MUEBLES]=false;
	PLAYER_TEMP[playerid][pt_COMPRANDO_DPA]=false;
	for(new i=0; i < 8; i++) TextDrawHideForPlayer(playerid, Jugador_Textdraws[ playerid ][textdraw_comprarmuebles][i]);
	CancelSelectTextDraw(playerid);
	return 1;
}
ComprarMapeoCasaVip(playerid)
{
	if(PLAYER_TEMP[playerid][pt_COMPRANDO_DPA]==true)
	{
		if(ENAPARTAMENTO[playerid] != -1)
		{
			new DB_Query[200],DBResult:Result,objet_karen,NAMER_KAREN[30],moneda_ic[50];
			format(DB_Query, sizeof DB_Query, "SELECT * FROM MAPEOSCASAVIP WHERE ID='%d';",PLAYER_TEMP[playerid][pt_COMPRAR_MUEBLE_ID]);
			Result = db_query(_DB_, DB_Query);
			if(db_num_rows(Result))
			{
				objet_karen = db_get_field_assoc_int(Result, "OBJETO");
				PLAYER_TEMP[playerid][pt_COMPRAR_MUEBLE_MONEDA] = db_get_field_assoc_int(Result, "MONEDA");
				PLAYER_TEMP[playerid][pt_COMPRAR_MUEBLE_PRECIO] = db_get_field_assoc_int(Result, "PRECIO");
				db_get_field_assoc(Result, "NOMBRE",NAMER_KAREN, 30);
			}
			switch(PLAYER_TEMP[playerid][pt_COMPRAR_MUEBLE_MONEDA])
			{
				case 1: 
				{
					if(PLAYER_TEMP[playerid][pt_COMPRAR_MUEBLE_PRECIO] > GetPlayerCash(playerid)) return MensajesAyuda(playerid,"No tienes suficiente dinero"), HideComprarMapeosCasaVip(playerid);
					GivePlayerCash(playerid,-PLAYER_TEMP[playerid][pt_COMPRAR_MUEBLE_PRECIO]);
					format(moneda_ic, sizeof moneda_ic,"Objeto %s comprado",NAMER_KAREN);
					MensajesAyuda(playerid,moneda_ic);
				}
				case 2: 
				{
					if(PLAYER_TEMP[playerid][pt_COMPRAR_MUEBLE_PRECIO] > GetPlayerRp(playerid)) return MensajesAyuda(playerid,"No tienes suficiente "SERVER_COIN""), HideComprarMapeosCasaVip(playerid);
					GastarRp(playerid,PLAYER_TEMP[playerid][pt_COMPRAR_MUEBLE_PRECIO]);
					format(moneda_ic, sizeof moneda_ic,"Objeto %s comprado",NAMER_KAREN);
					MensajesAyuda(playerid,moneda_ic);
				}
			}
			

			new Float: x, Float: y, Float: z,Query[250];
			GetPlayerPos(playerid, x, y, z);
		    GetXYInFrontOfPlayer(playerid, x, y, 1.0);

			format(Query, sizeof(Query),"INSERT INTO `MAPEOSAPARTAMENTOS` (`APARTAMENTOID`,`Objeto`,`X`,`Y`,`Z`,`MUNDO`) VALUES ('%d','%d','%f','%f','%f','%d')",ENAPARTAMENTO[playerid], objet_karen, x, y, z,GetPlayerVirtualWorld(playerid));
		    db_query(DBCASA, Query);

		 
		 	new DBResult:Result2,muebleddid;
			format(DB_Query, sizeof(DB_Query), "SELECT ID, MAX(`ID`) FROM `MAPEOSAPARTAMENTOS` WHERE ID");
			Result2 = db_query(DBCASA, DB_Query);
		 	if(db_num_rows(Result2))
		  	{
		   		db_get_field_assoc(Result2, "ID", DB_Query, 45); muebleddid = strval(DB_Query);
			}
			db_free_result(Result2);

			EditandoMueble[playerid] = muebleddid;
			new ide=GetCountObjetFromThisHouse(ENCASAVIP[playerid]);
			OBJETOS_DEPA[ ENAPARTAMENTO[playerid] ][ ide ][ID_OBJETO] = CreateDynamicObject(objet_karen, x, y, z, 0.0, 0.0, 0.0,GetPlayerVirtualWorld(playerid));

			HideComprarMapeosCasaVip(playerid);
			PLAYER_TEMP[playerid][pt_COMPRANDO_DPA]=false;
		}
		return 1;
	}
	else
	{
		if(ENCASAVIP[playerid] != -1)
		{
			new DB_Query[200],DBResult:Result,objet_karen,NAMER_KAREN[30],moneda_ic[50];
			format(DB_Query, sizeof DB_Query, "SELECT * FROM MAPEOSCASAVIP WHERE ID='%d';",PLAYER_TEMP[playerid][pt_COMPRAR_MUEBLE_ID]);
			Result = db_query(_DB_, DB_Query);
			if(db_num_rows(Result))
			{
				objet_karen = db_get_field_assoc_int(Result, "OBJETO");
				PLAYER_TEMP[playerid][pt_COMPRAR_MUEBLE_MONEDA] = db_get_field_assoc_int(Result, "MONEDA");
				PLAYER_TEMP[playerid][pt_COMPRAR_MUEBLE_PRECIO] = db_get_field_assoc_int(Result, "PRECIO");
				db_get_field_assoc(Result, "NOMBRE",NAMER_KAREN, 30);
			}
			switch(PLAYER_TEMP[playerid][pt_COMPRAR_MUEBLE_MONEDA])
			{
				case 1: 
				{
					if(PLAYER_TEMP[playerid][pt_COMPRAR_MUEBLE_PRECIO] > GetPlayerCash(playerid)) return MensajesAyuda(playerid,"No tienes suficiente dinero"), HideComprarMapeosCasaVip(playerid);
					GivePlayerCash(playerid,-PLAYER_TEMP[playerid][pt_COMPRAR_MUEBLE_PRECIO]);
					format(moneda_ic, sizeof moneda_ic,"Objeto %s comprado",NAMER_KAREN);
					MensajesAyuda(playerid,moneda_ic);
				}
				case 2: 
				{
					if(PLAYER_TEMP[playerid][pt_COMPRAR_MUEBLE_PRECIO] > GetPlayerRp(playerid)) return MensajesAyuda(playerid,"No tienes suficiente "SERVER_COIN""), HideComprarMapeosCasaVip(playerid);
					GastarRp(playerid,PLAYER_TEMP[playerid][pt_COMPRAR_MUEBLE_PRECIO]);
					format(moneda_ic, sizeof moneda_ic,"Objeto %s comprado",NAMER_KAREN);
					MensajesAyuda(playerid,moneda_ic);
				}
			}
			

			new Float: x, Float: y, Float: z,Query[250];
			GetPlayerPos(playerid, x, y, z);
		    GetXYInFrontOfPlayer(playerid, x, y, 1.0);

			format(Query, sizeof(Query),"INSERT INTO `MAPEOSCASA` (`CasaID`,`Objeto`,`X`,`Y`,`Z`,`MUNDO`) VALUES ('%d','%d','%f','%f','%f','%d')",ENCASAVIP[playerid], objet_karen, x, y, z,GetPlayerVirtualWorld(playerid));
		    db_query(DBCASA, Query);

		 
		 	new DBResult:Result2,muebleddid;
			format(DB_Query, sizeof(DB_Query), "SELECT ID, MAX(`ID`) FROM `MAPEOSCASA` WHERE ID");
			Result2 = db_query(DBCASA, DB_Query);
		 	if(db_num_rows(Result2))
		  	{
		   		db_get_field_assoc(Result2, "ID", DB_Query, 45); muebleddid = strval(DB_Query);
			}
			db_free_result(Result2);

			EditandoMueble[playerid] = muebleddid;
			new ide=GetCountObjetFromThisHouse(ENCASAVIP[playerid]);
			OBJETOS_CASA[ ENCASAVIP[playerid] ][ ide ][ID_OBJETO] = CreateDynamicObject(objet_karen, x, y, z, 0.0, 0.0, 0.0,GetPlayerVirtualWorld(playerid));

			HideComprarMapeosCasaVip(playerid);
		}
	}
	return 1;
}

ShowEditarMapeosCasa(playerid)
{
	if(ACCOUNT_INFO[playerid][ac_ID]== 0) return 1;
	for(new i=21; i < 36; i++) TextDrawHideForPlayer(playerid,Jugador_Textdraws[playerid][textdraw_editarmueblescasa][i]);
	EDITAR_OBJETO[playerid]=true;
	new query[256],DBResult:Result;
    format(query,sizeof(query),"SELECT Objeto,ID FROM MAPEOSCASA WHERE CASAID = '%d' LIMIT '15' OFFSET '0'",ENCASAVIP[playerid]);
    Result = db_query(DBCASA,query);
    new empeza=3,bjeto_karen;
    for(new i; i < db_num_rows(Result); i++)
    {
    	empeza++;
	    
	    EDITAR_OBJETO_CASA[playerid][empeza][ID] = db_get_field_assoc_int(Result,"ID");
	    bjeto_karen = db_get_field_assoc_int(Result,"Objeto");

	    TextDrawSetPreviewModel(Jugador_Textdraws[playerid][textdraw_editarmueblescasa][empeza], bjeto_karen);
	    TextDrawShowForPlayer(playerid,Jugador_Textdraws[playerid][textdraw_editarmueblescasa][empeza]);
	    db_next_row(Result);
    }
    db_free_result(Result);
 	TextDrawSetString(Jugador_Textdraws[ playerid ][textdraw_editarmueblescasa][2] , "1/2");
 	TextDrawShowForPlayer(playerid,Jugador_Textdraws[playerid][textdraw_editarmueblescasa][0]);
 	TextDrawShowForPlayer(playerid,Jugador_Textdraws[playerid][textdraw_editarmueblescasa][1]);
 	TextDrawShowForPlayer(playerid,Jugador_Textdraws[playerid][textdraw_editarmueblescasa][2]);
 	TextDrawShowForPlayer(playerid,Jugador_Textdraws[playerid][textdraw_editarmueblescasa][3]);
 	TextDrawShowForPlayer(playerid,Jugador_Textdraws[playerid][textdraw_editarmueblescasa][19]);
 	TextDrawShowForPlayer(playerid,Jugador_Textdraws[playerid][textdraw_editarmueblescasa][20]);
 	SetTimerEx("SelecTextdra_",1000,false,"d",playerid);
	return 1;
}
ShowEditarMapeosCasa_List2(playerid)
{
	for(new i=4; i < 19; i++) TextDrawHideForPlayer(playerid,Jugador_Textdraws[playerid][textdraw_editarmueblescasa][i]);
	new query[256],DBResult:Result;
    format(query,sizeof(query),"SELECT Objeto,ID FROM MAPEOSCASA WHERE CASAID = '%d' LIMIT '15' OFFSET '15'",ENCASAVIP[playerid]);
    Result = db_query(DBCASA,query);
    new empeza=20,bjeto_karen;
    for(new i; i < db_num_rows(Result); i++)
    {
    	empeza++;
	    
	    EDITAR_OBJETO_CASA[playerid][empeza][ID] = db_get_field_assoc_int(Result,"ID");
	    bjeto_karen = db_get_field_assoc_int(Result,"Objeto");

	    TextDrawSetPreviewModel(Jugador_Textdraws[playerid][textdraw_editarmueblescasa][empeza], bjeto_karen);
	    TextDrawShowForPlayer(playerid,Jugador_Textdraws[playerid][textdraw_editarmueblescasa][empeza]);
	    db_next_row(Result);
    }
    db_free_result(Result);
    TextDrawSetString(Jugador_Textdraws[ playerid ][textdraw_editarmueblescasa][2] , "2/2");
 	TextDrawShowForPlayer(playerid,Jugador_Textdraws[playerid][textdraw_editarmueblescasa][2]);
 	SetTimerEx("SelecTextdra_",1000,false,"d",playerid);
	return 1;
}
funcion SelecTextdra_(playerid)
{
	return SelectTextDraw(playerid,0xB00000FF);
}
HideEditarMapeosCasa(playerid)
{
	EDITAR_OBJETO[playerid]=false;
	CancelSelectTextDraw(playerid);
	for(new i=0; i < 36; i++) TextDrawHideForPlayer(playerid,Jugador_Textdraws[playerid][textdraw_editarmueblescasa][i]);
	return 1;
}
Editar_ObjetoCasa(playerid, ide)
{
	if(PLAYER_TEMP[playerid][pt_BORRAR_MUEBLES])
	{
		new query[100];
		format(query,sizeof(query),"DELETE FROM MAPEOSCASA WHERE CASAID = '%d' AND ID='%d';",ENCASAVIP[playerid],ide);
    	db_query(DBCASA,query);
    	//
    	MensajesAyuda(playerid,"Objeto borrado");
    	PLAYER_TEMP[playerid][pt_BORRAR_MUEBLES]=false;
		ReloadObjetosCasa(ENCASAVIP[playerid]);
		return 1;
	}
	SAVEID_EDITANDO[playerid] = ide;
	ESTAEDITANDO_Objeto[playerid]=true;
	new query[256],DBResult:Result;
	new Objeto_Nerak,Float:posr[3],Float:posrt[3];
    format(query,sizeof(query),"SELECT * FROM MAPEOSCASA WHERE CASAID = '%d' AND ID='%d';",ENCASAVIP[playerid],ide);
    Result = db_query(DBCASA,query);
    if(db_num_rows(Result))
    {
    	posr[0] = db_get_field_assoc_float(Result,"X");
    	posr[1] = db_get_field_assoc_float(Result,"Y");
    	posr[2] = db_get_field_assoc_float(Result,"Z");

    	posrt[0] = db_get_field_assoc_float(Result,"rX");
    	posrt[1] = db_get_field_assoc_float(Result,"rY");
    	posrt[2] = db_get_field_assoc_float(Result,"rZ");

    	Objeto_Nerak = db_get_field_assoc_int(Result,"Objeto");
    	OBJETO_DE_EDITAR_CASA[playerid] = CreateDynamicObject(Objeto_Nerak,posr[0],posr[1],posr[2],posrt[0],posrt[1],posrt[2],GetPlayerVirtualWorld(playerid));
    	EditDynamicObject(playerid, OBJETO_DE_EDITAR_CASA[playerid]);
    }
	return 1;
}

ReloadObjetosCasa(casaidd)
{
	for(new i=0; i < 31; i++)
	{
		if(IsValidDynamicObject(OBJETOS_CASA[ casaidd ][ i ][ID_OBJETO])) DestroyDynamicObject(OBJETOS_CASA[ casaidd ][ i ][ID_OBJETO]);
	}

	new query[256],DBResult:Result,Float:posr[3],Float:posrt[3],mundoa;
    format(query,sizeof(query),"SELECT * FROM MAPEOSCASA WHERE CASAID = '%d';",casaidd);
    Result = db_query(DBCASA,query);
    new bjeto_karen;
    for(new i; i < db_num_rows(Result); i++)
    {
    	posr[0] = db_get_field_assoc_float(Result,"X");
    	posr[1] = db_get_field_assoc_float(Result,"Y");
    	posr[2] = db_get_field_assoc_float(Result,"Z");

    	posrt[0] = db_get_field_assoc_float(Result,"rX");
    	posrt[1] = db_get_field_assoc_float(Result,"rY");
    	posrt[2] = db_get_field_assoc_float(Result,"rZ");

	    bjeto_karen = db_get_field_assoc_int(Result,"Objeto");
	    mundoa = db_get_field_assoc_int(Result,"MUNDO");
	    OBJETOS_CASA[ casaidd ][ i ][ID_OBJETO] = CreateDynamicObject(bjeto_karen,posr[0],posr[1],posr[2],posrt[0],posrt[1],posrt[2],mundoa);

	    db_next_row(Result);
    }
    db_free_result(Result);

	return 1;
}
GetPlayerVip(playerid)
{
	return ACCOUNT_INFO[playerid][ac_SU];
}
stock GetCasas(playerid)
{
	new count;
	new DB_Query[200],DBResult:Result;
	format(DB_Query, sizeof DB_Query, "SELECT * FROM CASASVIP WHERE PLAYER='%d';",ACCOUNT_INFO[playerid][ac_ID]);
	Result = db_query(_DB_, DB_Query);
	for(new i=0; i < db_num_rows(Result); i++)
	{
		count++;
	}

	format(DB_Query, sizeof DB_Query, "SELECT * FROM APARTAMENTOS WHERE PLAYER='%d';",ACCOUNT_INFO[playerid][ac_ID]);
	Result = db_query(_DB_, DB_Query);
	for(new i=0; i < db_num_rows(Result); i++)
	{
		count++;
	}
	return count;
}

GetMaxBandas()
{
	new DB_Query[120],DBResult:Result,count;
	format(DB_Query,sizeof DB_Query,"SELECT * FROM CREW");
	Result = db_query(Database, DB_Query);
	for(new i=0; i < db_num_rows(Result); i++)
	{
		count++;
	}
	return count;
}

GetZonasForThisBanda(ide)
{
	new DB_Query[120],DBResult:Result,count;
	format(DB_Query,sizeof DB_Query,"SELECT * FROM ZONAS WHERE BANDA='%d';",ide);
	Result = db_query(_DB_, DB_Query);
	for(new i=0; i < db_num_rows(Result); i++)
	{
		count++;
	}
	return count;
}

GetMiembrosForThisBanda(ide)
{
	new DB_Query[120],DBResult:Result,count;
	format(DB_Query,sizeof DB_Query,"SELECT * FROM PLAYER_CREW WHERE ID_CREW='%d';",ide);
	Result = db_query(Database, DB_Query);
	for(new i=0; i < db_num_rows(Result); i++)
	{
		count++;
	}
	return count;
}

ShowBandaUnirme(playerid)
{

	new DB_Query[120],DBResult:Result,ide,bolor_banda,name_banda[35],descripcion_banda[180];
	format(DB_Query,sizeof DB_Query,"SELECT * FROM CREW LIMIT '1' OFFSET '%d';",PLAYER_TEMP[playerid][pt_BANDA_ID]);
	Result = db_query(Database, DB_Query);
	if(db_num_rows(Result))
	{
		ide = db_get_field_assoc_int(Result, "ID");
		db_get_field_assoc(Result, "NAME",name_banda, 35);
		
		bolor_banda = db_get_field_assoc_int(Result, "COLOR");
		TextDrawColor(Jugador_Textdraws[ playerid ][textdraw_banda_inv][4], bolor_banda);
		TextDrawSetString(Jugador_Textdraws[playerid][textdraw_banda_inv][4], name_banda);
	}
	db_free_result(Result);
	PLAYER_TEMP[playerid][get_ID_BANDA_INV] = ide;
	if(PLAYER_CREW[playerid][player_crew_ID] == ide)
	{
		PLAYER_TEMP[playerid][pt_OPTION_INV_BANDA] = 1;
		TextDrawSetString(Jugador_Textdraws[playerid][textdraw_banda_inv][10], "~r~~h~________Abandonar");
	}
	else
	{
		PLAYER_TEMP[playerid][pt_OPTION_INV_BANDA] = 0;
		TextDrawSetString(Jugador_Textdraws[playerid][textdraw_banda_inv][10], "________Unirme");
	}
	format(DB_Query,sizeof DB_Query,"SELECT DESCRIPCION FROM CREW_VARS WHERE CREW_ID='%d';",ide);
	Result = db_query(Database, DB_Query);
	if(db_num_rows(Result))
	{
		db_get_field_assoc(Result, "DESCRIPCION",descripcion_banda, 180);
	}
	else
	{
		descripcion_banda="Error desconocido";
	}
	db_free_result(Result);

	//
	new Players_Banda[560],player_,rank_,Player_Rank[560],DBResult:Resulta,rank_namer[35];
	format(DB_Query,sizeof DB_Query,"SELECT ID_USER,RANK FROM PLAYER_CREW WHERE ID_CREW='%d';",ide);
	Result = db_query(Database, DB_Query);
	for(new i=0; i < db_num_rows(Result); i++)
	{
		player_ = db_get_field_assoc_int(Result, "ID_USER");
		rank_ = db_get_field_assoc_int(Result, "RANK");

		format(DB_Query,sizeof DB_Query,"SELECT RANK_NAME FROM CREW_RANKS WHERE ID_CREW='%d' AND RANK_POS='%d';",ide,rank_);
		Resulta = db_query(Database, DB_Query);
		if(db_num_rows(Resulta))
		{
			db_get_field_assoc(Resulta, "RANK_NAME",rank_namer, 35);
			if(rank_==0)
			{
				format(Player_Rank,sizeof Player_Rank,"%s~n~~g~%s",Player_Rank,rank_namer);
			}
			else
			{
				format(Player_Rank,sizeof Player_Rank,"%s~n~~w~%s",Player_Rank,rank_namer);	
			}
		}
		else
		{
			db_get_field_assoc(Resulta, "RANK_NAME",rank_namer, 35);
			format(Player_Rank,sizeof Player_Rank,"%s~n~~r~Indefinido",Player_Rank,rank_namer);
		}
		format(Players_Banda,sizeof Players_Banda,"%s~n~~r~- ~w~%s",Players_Banda,GetNameCuentaID(player_));
		db_next_row(Result);
	}

	db_free_result(Result);
	new Miembros_banda[15];
	format(Miembros_banda, sizeof Miembros_banda,"%d/20",GetMiembrosForThisBanda(ide));
	TextDrawSetString(Jugador_Textdraws[playerid][textdraw_banda_inv][8], Miembros_banda);
	TextDrawSetString(Jugador_Textdraws[playerid][textdraw_banda_inv][13], Players_Banda);
	TextDrawSetString(Jugador_Textdraws[playerid][textdraw_banda_inv][14], Player_Rank);
	TextDrawSetString(Jugador_Textdraws[playerid][textdraw_banda_inv][5], descripcion_banda);
	format(Miembros_banda, sizeof Miembros_banda,"%d/%d",GetZonasForThisBanda(ide),ZONITAS);
	TextDrawSetString(Jugador_Textdraws[playerid][textdraw_banda_inv][20], Miembros_banda);
	PLAYER_TEMP[playerid][pt_INV_BANDA] = true;
	for(new i=0; i < 21; i++) TextDrawShowForPlayer(playerid, Jugador_Textdraws[playerid][textdraw_banda_inv][i]);
	return 1;
}
HideBandaInv(playerid)
{
	CancelSelectTextDraw(playerid);
	PLAYER_TEMP[playerid][pt_INV_BANDA] = false;
	for(new i=0; i < 21; i++) TextDrawHideForPlayer(playerid, Jugador_Textdraws[playerid][textdraw_banda_inv][i]);
	return 1;
}
GetSolicitudesBanda(banda_did)
{
	new count=0,DB_Query[60],DBResult:Result;
	format(DB_Query, sizeof DB_Query, "SELECT * FROM INV_BANDA WHERE BANDA_ID ='%d';",banda_did);
	Result = db_query(_DB_, DB_Query);
	for(new i=0; i < db_num_rows(Result); i++)
	{
		count++;
	}
	db_free_result(Result);
	return count;
}
ManageSolicitudesBanda(playerid)
{
	if(ACCOUNT_INFO[playerid][ac_ID]== 0) return 1;
	new string[1820],query[256],DBResult:Result;
    format(query,sizeof(query),"SELECT * FROM INV_BANDA WHERE BANDA_ID='%d' limit 20 OFFSET %d",PLAYER_CREW[playerid][player_crew_ID],PAGE[playerid]);
    Result = db_query(_DB_,query);
    new lineas;

    if(!db_num_rows(Result))
    {
        SendClientMessage(playerid, -1, "No hay solicitudes.");
        PAGE[playerid] = 0;
        return 1;
    } 

    for(new i; i < db_num_rows(Result); i++)
    {
    lineas++;
    new text[256], labelid,boejct;
    //db_get_field_assoc(Result, "NOMBRE",text, 256);
    db_get_field_assoc(Result, "PLAYER",query, 20); boejct = strval(query);
    db_get_field_assoc(Result, "ID",query, 20); labelid = strval(query);
    format(text,sizeof(text),"%s",GetNameCuentaID(boejct));
    for(new l = 0; l < strlen(text); ++l)
        if(text[l] == '{')
            if(text[l+7] == '}')
                strdel(text, l, l+8);

    if(strlen(text) > 37)
    {
        strdel(text, 34, strlen(text));
        strcat(text, "...", sizeof(text));
    }

    if(!i)
    format(string, sizeof(string), "{000000}ID %d {FFFFFF}Nombre: %s\n", labelid,text);
    else
    format(string, sizeof(string), "%s\n{000000}ID %d {FFFFFF}Nombre: %s\n", string, labelid,text);
    db_next_row(Result);
    }
    strcat(string, "{00FFFF}Cerrar el dialogo (X)");
    PAGINA[playerid] = lineas;
    ShowPlayerDialog(playerid, DIALOG_MANAVE_INV_BANDA, DIALOG_STYLE_LIST, "| Solicitudes a tu banda |", string, "Selecionar", "+ Invitaciones");
    db_free_result(Result);
	return 1;
}
SendToBanda(playerid)
{
	if(!CREW_INFO[ PLAYER_TEMP[playerid][pt_CREW_INVITE_INFO][1] ][crew_VALID]) return SendClientMessage(playerid, -1, "{00FF80}Esta banda ya no existe.");
	
	PLAYER_CREW[playerid][player_crew_VALID] = true;
	PLAYER_CREW[playerid][player_crew_ID] = PLAYER_TEMP[playerid][pt_CREW_INVITE_INFO][0];
	PLAYER_CREW[playerid][player_crew_RANK] = PLAYER_TEMP[playerid][pt_CREW_INVITE_INFO][2];
	PLAYER_CREW[playerid][player_crew_INDEX] = PLAYER_TEMP[playerid][pt_CREW_INVITE_INFO][1];
	CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_MEMBERS] ++;
	CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_ONLINE_MEMBERS] ++;
	PLAYER_TEMP[playerid][pt_LAST_GOT_CREW] = gettime();
	SetPlayerGangZones(playerid);
	
	new DB_Query[200];
	format(DB_Query, sizeof DB_Query, 
				
			"\
				DELETE FROM `PLAYER_CREW` WHERE `ID_USER` = '%d';\
				INSERT INTO `PLAYER_CREW` (`ID_USER`, `ID_CREW`, `RANK`) VALUES ('%d', '%d', '%d');\
			",
				ACCOUNT_INFO[playerid][ac_ID],
				ACCOUNT_INFO[playerid][ac_ID],
				PLAYER_CREW[playerid][player_crew_ID],
				PLAYER_CREW[playerid][player_crew_RANK]
	);
	db_query(Database, DB_Query);
	
	new message[145];
	format(message, sizeof message, "{%06x}[Banda] {FFFFFF}%s se ha unido a la banda con el rango %s.", CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_COLOR] >>> 8, PLAYER_TEMP[playerid][pt_RP_NAME], CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_NAME]);
	SendMessageToCrewMembers(PLAYER_CREW[playerid][player_crew_ID], -1, message);
	MensajesAyuda(playerid,"Han aceptado tu solicitud a la banda");
	GameTextForPlayer(playerid,"~n~~n~~n~~n~~n~Han aceptado tu solicitud a la banda",10000,3);

	format(DB_Query, sizeof DB_Query,"DELETE FROM `INV_BANDA` WHERE `PLAYER`='%d';",ACCOUNT_INFO[playerid][ac_ID]);
	db_query(_DB_, DB_Query);
	return 1;
}

funcion TeleCorredor(playerid, Float:xaa,Float:yaa,Float:aza)
{
	new cartype = GetPlayerVehicleID(playerid); new State = GetPlayerState(playerid); new Float:Angulo; Angulo = GetVehicleZAngle(cartype, Angulo);
	if(State!=PLAYER_STATE_DRIVER)
	{
		LinkVehicleToInterior(GetPlayerVehicleID(playerid),GetPlayerInterior(playerid));
		SetVehicleVirtualWorld(GetPlayerVehicleID(playerid),GetPlayerVirtualWorld(playerid));
		SetPlayerPosEx(playerid,xaa,yaa,aza,0,0,1); SetPlayerInterior(playerid, 0); SetPlayerVirtualWorld(playerid, 1);
		SetVehicleZAngle(cartype, Angulo+1);
	}
	else if(IsPlayerInVehicle(playerid, cartype) == 1)
	{
		LinkVehicleToInterior(GetPlayerVehicleID(playerid),GetPlayerInterior(playerid));
		SetVehicleVirtualWorld(GetPlayerVehicleID(playerid),GetPlayerVirtualWorld(playerid));
		SetPlayerInterior(playerid, 0); SetPlayerVirtualWorld(playerid, 1);

		SetVehiclePosTRE(playerid,cartype,xaa,yaa,aza,Angulo+1,1,0);
		//SetVehicleZAngle(cartype, Angulo+1);
	} 
	else 
	{
		LinkVehicleToInterior(GetPlayerVehicleID(playerid),GetPlayerInterior(playerid));
		SetVehicleVirtualWorld(GetPlayerVehicleID(playerid),GetPlayerVirtualWorld(playerid));
		SetPlayerPosEx(playerid,xaa,yaa,aza,0,0,1); SetPlayerInterior(playerid, 0); SetPlayerVirtualWorld(playerid, 1);
	}
	return 1;
}
stock ConvertirSegundosP(time)
{
    new string[50], minutos, segundos;
    if(time > 59)
    {
        minutos = floatround(time / 60);
        segundos = floatround(time - minutos * 60);
        format(string, sizeof(string), "%02d:%02d", minutos, segundos);
    }
    else
    {
        segundos = floatround(time);
        format(string, sizeof(string), "00:%02d", segundos);
    }
    return string;
}


funcion CargarZonas()
{
    new  var,query[256],DBResult:Raa;
    Raa = db_query(_DB_,"SELECT * FROM `ZONAS`");
    for(new a; a < db_num_rows(Raa); a++)
    {
        var = Iter_Free(Zones);
        ZONITAS++;
        db_get_field_assoc(Raa, "ID",query, 30);
        ZInfo[var][ID] = strval(query);

        db_get_field_assoc(Raa, "MinX",query, 30);
        ZInfo[var][ZminX] = strval(query);
        db_get_field_assoc(Raa, "MinY",query, 30);
        ZInfo[var][ZminY] = strval(query);
        db_get_field_assoc(Raa, "MaxX",query, 30);
        ZInfo[var][ZmaxX] = strval(query);
        db_get_field_assoc(Raa, "MaxY",query, 30);
        ZInfo[var][ZmaxY] = strval(query);
        db_get_field_assoc(Raa, "Color",query, 30);
        ZInfo[var][_Color] = strval(query);
		db_get_field_assoc(Raa, "BANDA",query, 30);
        ZInfo[var][BANDA] = strval(query);
        ZInfo[var][locked] = false;
        ZInfo[var][Owned] = false;
        ZInfo[var][U_Attack] = false;
        ZInfo[var][ZoneRectangleZone] = CreateDynamicRectangle(ZInfo[var][ZminX], ZInfo[var][ZminY], ZInfo[var][ZmaxX], ZInfo[var][ZmaxY], -1, -1, -1);
        ZInfo[var][Region]  = Area_AddBox( ZInfo[var][ZminX] ,ZInfo[var][ZminY],  ZInfo[var][ZmaxX], ZInfo[var][ZmaxY]);
        ZInfo[var][_Zone] = GangZoneCreate( ZInfo[var][ZminX] ,ZInfo[var][ZminY],  ZInfo[var][ZmaxX], ZInfo[var][ZmaxY]);
        Iter_Add(Zones, var);
        db_next_row(Raa);
    }
	return 1;
}

funcion CaptureZone(playerid, zoneid)
{
	new city[45], zone[45];
	GetPlayerZones(playerid, city, zone);

    ZInfo[zoneid][timercap]--;

    new str[34];
    format(str,sizeof str,"%02d-%02d",(ZInfo[zoneid][timercap]/60),ZInfo[zoneid][timercap]);
 
    format(string2,sizeof(string2),"~r~~h~%s",ConvertirSegundosAFK(ZInfo[zoneid][timercap]));
   	MensajeAyuda_4(playerid,string2);
    CapturarZona[playerid]++;
    if(CapturarZona[playerid] != 180)
    {
    	TextDrawTextSize(Jugador_Textdraws[ playerid ][textdraw_capturar_zona][6], floatadd(256.129241, floatdiv(CapturarZona[playerid], 1.464954)), 0.000000);
		TextDrawShowForPlayer(playerid, Jugador_Textdraws[ playerid ][textdraw_capturar_zona][6]);
	}
    if(ZInfo[zoneid][timercap]==0)
    {
    	TextDrawSetString(Jugador_Textdraws[ playerid ][textdraw_capturar_zona][0],"~g~Capturada");
    	SetTimerEx("HideCaptureZone",5000,false,"d",playerid);
        if(ZInfo[zoneid][U_Attack])
        {
            GangZoneStopFlashForAll(ZInfo[zoneid][_Zone]);

            new Query_[300],colorin,ccolour,DBResult:Resulta;
            format(Query_, sizeof Query_,"SELECT COLOR FROM CREW WHERE ID='%d';",PLAYER_CREW[playerid][player_crew_ID]);
            Resulta = db_query(Database, Query_);
            if(db_num_rows(Resulta))
            {
            	colorin = db_get_field_assoc_int(Resulta, "COLOR");
            }
            new r, g, b, a;
			HexToRGBA(colorin, r, g, b, a);
			ccolour = RGBAToHex(r, g, b, 135);

            GangZoneShowForAll(ZInfo[zoneid][_Zone], ccolour);
            ZInfo[zoneid][locked] = true;

            ZInfo[zoneid][_Color] = ccolour;
            
            format(Query_,sizeof Query_,"UPDATE ZONAS SET BANDA = '%d',Color = %d WHERE ID = '%d';",
            	PLAYER_CREW[playerid][player_crew_ID],ccolour,ZInfo[zoneid][ID]);
            db_query(_DB_,Query_);
            
            format(string2,sizeof (string2),"~Conquista: de la banda (%s) capturo con exito la zona en {ffffff}['%s,%s']",CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_NAME],city, zone);
            SendClientMessageToAll(0x81F7D8FF,string2);

            ZInfo[zoneid][timer] = ZONE_LOCK_TIME;
            ZInfo[zoneid][timer_main] = SetTimerEx("UnlockZone",1000,true,"i",zoneid);
            ZInfo[zoneid][U_Attack] = false;
            Capturing[playerid] = false;
            ZInfo[zoneid][BANDA] = PLAYER_CREW[playerid][player_crew_ID];

        }
        new string[128];
        format(string,sizeof string,"* Tu clan ha capturado una zona en: {ffffff}'%s,%s' ",city, zone);
        format(string2,sizeof string2,"~n~~n~~n~~n~~g~~h~ Tu clan ha capturado una zona en: ~w~~n~%s - %s ",city, zone);
 
        foreach(new i : Player)
        {
            if(ZInfo[zoneid][BANDA] == PLAYER_CREW[playerid][player_crew_ID])
            {
                GameTextForPlayer(i, string2, 5000, 3);
                SendClientMessage(i,0x00ff00ff,string);
            }

        }
        KillTimer(ZInfo[zoneid][timercap_main]);
     }
    return 1;
}
funcion HideCaptureZone(playerid)
{
	TextDrawSetString(Jugador_Textdraws[ playerid ][textdraw_capturar_zona][0],"~w~Capturando..");
	for(new i=0; i < 7; i ++)
	{
		TextDrawHideForPlayer(playerid, Jugador_Textdraws[ playerid ][textdraw_capturar_zona][i]);
	}
	return 1;
}

funcion UnlockZone(zoneid)
{
    ZInfo[zoneid][timer]--;
    if(ZInfo[zoneid][timer] == 0)
    {
        KillTimer(ZInfo[zoneid][timer_main]);
        ZInfo[zoneid][locked] = false;
    }
    return 1;
}
funcion Yazonas(playerid)
{
	CapturoZona[playerid]=0;
	return 1;
}
//stocks
MensajeAyuda_4(playerid,texta[])
{
	PlayerTextDrawSetString(playerid,PlayerTextdraws[playerid][textdraw_ayuda][3],texta);
	PlayerTextDrawShow(playerid,PlayerTextdraws[playerid][textdraw_ayuda][3]);
	KillTimer(TIMER_MENSAJEAYUDA[playerid][2]);
	TIMER_MENSAJEAYUDA[playerid][2] = SetTimerEx("OcultarAyuda4", 7000, 0,"d",playerid); 
	return 1;
}

funcion MensajedeAyuda()
{
	new string[250];
    SendClientMessageToAll(0xC81F1FFF,"");
    format(string, sizeof(string), "~ Bot: {FFFFFF}%s", AutoMessages[random(sizeof(AutoMessages))]);
    SendClientMessageToAll(0xC81F1FFF, string);
    SendClientMessageToAll(0xC81F1FFF,"");
	return 1;
}
GetPlayerRp(playerid)
{
	return ACCOUNT_INFO[playerid][ac_SD];
}
GetPlayerCash(playerid)
{
	return CHARACTER_INFO[playerid][ch_CASH];
}
Get_Work_Level(playerid,wrkid)
{
	new levela=0;
	new DBResult:Result,DB_Query[100];
    format(DB_Query, sizeof(DB_Query), "SELECT WORK_NIVEL FROM WORK_NIVEL WHERE USER_ID='%d' AND WORK_ID='%d';",ACCOUNT_INFO[playerid][ac_ID],wrkid);
	Result = db_query(Database, DB_Query);
	if(db_num_rows(Result))
	{
		db_get_field_assoc(Result, "WORK_NIVEL",DB_Query, 30); levela = strval(DB_Query);
	}
	db_free_result(Result);
	return levela;
}
public Float:GetFloatCamionero(lasd)
{
	new Float:flotain;
	switch(lasd)
	{
		case 1: flotain=0.08677744;
		case 2:	flotain=0.1735549;
		case 3: flotain=0.2603324;
		case 4: flotain=0.3471098;
		case 5: flotain=0.8677746;
	}
	return flotain;
}
stock Float:GetFloatMinero(lasd)
{
	new Float:flotain;
	switch(lasd)
	{
		case 1: flotain=0.3471098;
		case 2:	flotain=0.5206647;
		case 3: flotain=0.6942195;
		case 4: flotain=0.8677746;
		case 5: flotain=1.735549;
	}
	return flotain;
}
RequerimentCaminero(levela)
{
	new num;
	switch(levela)
	{
		case 1: num=10;
		case 2: num=30;
		case 3: num=40;
		case 4: num=50;
		case 5: num=100;
	}
	return num;
}
RequerimentMinero(levela)
{
	new num;
	switch(levela)
	{
		case 1: num=40;
		case 2: num=60;
		case 3: num=80;
		case 4: num=100;
		case 5: num=200;
	}
	return num;
}
Update_Work_Level(playerid, work_idd)
{
	for(new i=0; i <= 4; i++) PlayerTextDrawShow(playerid,PlayerTextdraws[playerid][textdraws_nivel_trabajo][i]);
	/**/
	new query[256],DBResult:Result;
	format(query,sizeof(query),"SELECT * FROM WORK_NIVEL WHERE USER_ID='%d' AND WORK_ID='%d';",ACCOUNT_INFO[playerid][ac_ID], work_idd);
    Result = db_query(Database,query);
    if(!db_num_rows(Result))
    {
		format( query, sizeof( query ), "INSERT INTO WORK_NIVEL (USER_ID,WORK_ID) VALUES ('%d','%d')",ACCOUNT_INFO[playerid][ac_ID],work_idd);
		db_query(Database, query );
    }
    db_free_result(Result);
	/**/
	new levela;
	levela=Get_Work_Level(playerid,work_idd);
	new string[50];
	switch(work_idd)
	{
		case WORK_TRUCK:
		{
			if(levela == 5 && PLAYER_WORK_NIVEL[playerid][CAMIONERO] >= 100)
			{
				PLAYER_WORK_NIVEL[playerid][CAMIONERO]=100;
			}
			else
			{
				Update_Field_Exp_Nivel_Work(playerid,work_idd);
				PLAYER_WORK_NIVEL[playerid][CAMIONERO]++;
			}
			
			switch(levela)
			{
				case 1:{if(PLAYER_WORK_NIVEL[playerid][CAMIONERO] >= 10){Update_Level_Work(playerid,work_idd,2);PLAYER_WORK_NIVEL[playerid][CAMIONERO]=0;}}
				case 2:{if(PLAYER_WORK_NIVEL[playerid][CAMIONERO] >= 20){Update_Level_Work(playerid,work_idd,3);PLAYER_WORK_NIVEL[playerid][CAMIONERO]=0;}}
				case 3:{if(PLAYER_WORK_NIVEL[playerid][CAMIONERO] >= 30){Update_Level_Work(playerid,work_idd,4);PLAYER_WORK_NIVEL[playerid][CAMIONERO]=0;}}
				case 4:{if(PLAYER_WORK_NIVEL[playerid][CAMIONERO] >= 40){Update_Level_Work(playerid,work_idd,5);PLAYER_WORK_NIVEL[playerid][CAMIONERO]=0;}}
			}
			format(string,sizeof(string),"%d/%d (%d/5)",PLAYER_WORK_NIVEL[playerid][CAMIONERO],RequerimentCaminero(levela),levela);
			PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][textdraws_nivel_trabajo][2], string);
			format(string,sizeof(string),"Camionero");
			PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][textdraws_nivel_trabajo][1], string);
			PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraws_nivel_trabajo][4], floatadd(263.762695, floatdiv(PLAYER_WORK_NIVEL[playerid][CAMIONERO], GetFloatCamionero(levela))), 0.000000);
			PlayerTextDrawShow(playerid,PlayerTextdraws[playerid][textdraws_nivel_trabajo][4]);
		}
		//)))))))))))============================== Transportista ==============================
		case WORK_CARRIER:
		{
			if(levela == 5 && PLAYER_WORK_NIVEL[playerid][TRANSPORTISTA] >= 100)
			{
				PLAYER_WORK_NIVEL[playerid][TRANSPORTISTA]=100;
			}
			else
			{
				Update_Field_Exp_Nivel_Work(playerid,work_idd);
				PLAYER_WORK_NIVEL[playerid][TRANSPORTISTA]++;
			}
			
			switch(levela)
			{
				case 1:{if(PLAYER_WORK_NIVEL[playerid][TRANSPORTISTA] >= 10){Update_Level_Work(playerid,work_idd,2);PLAYER_WORK_NIVEL[playerid][TRANSPORTISTA]=0;}}
				case 2:{if(PLAYER_WORK_NIVEL[playerid][TRANSPORTISTA] >= 20){Update_Level_Work(playerid,work_idd,3);PLAYER_WORK_NIVEL[playerid][TRANSPORTISTA]=0;}}
				case 3:{if(PLAYER_WORK_NIVEL[playerid][TRANSPORTISTA] >= 30){Update_Level_Work(playerid,work_idd,4);PLAYER_WORK_NIVEL[playerid][TRANSPORTISTA]=0;}}
				case 4:{if(PLAYER_WORK_NIVEL[playerid][TRANSPORTISTA] >= 40){Update_Level_Work(playerid,work_idd,5);PLAYER_WORK_NIVEL[playerid][TRANSPORTISTA]=0;}}
			}
			format(string,sizeof(string),"%d/%d (%d/5)",PLAYER_WORK_NIVEL[playerid][TRANSPORTISTA],RequerimentCaminero(levela),levela);
			PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][textdraws_nivel_trabajo][2], string);
			format(string,sizeof(string),"Transportista");
			PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][textdraws_nivel_trabajo][1], string);
			PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraws_nivel_trabajo][4], floatadd(263.762695, floatdiv(PLAYER_WORK_NIVEL[playerid][TRANSPORTISTA], GetFloatCamionero(levela))), 0.000000);
			PlayerTextDrawShow(playerid,PlayerTextdraws[playerid][textdraws_nivel_trabajo][4]);
		}
		//)))))))))))============================== Mineroooo ==============================
		case WORK_MINER:
		{
			if(levela == 5 && PLAYER_WORK_NIVEL[playerid][MINERO] >= 200)
			{
				PLAYER_WORK_NIVEL[playerid][MINERO]=200;
			}
			else
			{
				Update_Field_Exp_Nivel_Work(playerid,work_idd);
				PLAYER_WORK_NIVEL[playerid][MINERO]++;
			}
			
			switch(levela)
			{
				case 1:{if(PLAYER_WORK_NIVEL[playerid][MINERO] >= 40){Update_Level_Work(playerid,work_idd,2);PLAYER_WORK_NIVEL[playerid][MINERO]=0;}}
				case 2:{if(PLAYER_WORK_NIVEL[playerid][MINERO] >= 60){Update_Level_Work(playerid,work_idd,3);PLAYER_WORK_NIVEL[playerid][MINERO]=0;}}
				case 3:{if(PLAYER_WORK_NIVEL[playerid][MINERO] >= 80){Update_Level_Work(playerid,work_idd,4);PLAYER_WORK_NIVEL[playerid][MINERO]=0;}}
				case 4:{if(PLAYER_WORK_NIVEL[playerid][MINERO] >= 100){Update_Level_Work(playerid,work_idd,5);PLAYER_WORK_NIVEL[playerid][MINERO]=0;}}
			}
			format(string,sizeof(string),"%d/%d (%d/5)",PLAYER_WORK_NIVEL[playerid][MINERO],RequerimentMinero(levela),levela);
			PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][textdraws_nivel_trabajo][2], string);
			format(string,sizeof(string),"Minero");
			PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][textdraws_nivel_trabajo][1], string);
			PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraws_nivel_trabajo][4], floatadd(263.762695, floatdiv(PLAYER_WORK_NIVEL[playerid][MINERO], GetFloatMinero(levela))), 0.000000);
			PlayerTextDrawShow(playerid,PlayerTextdraws[playerid][textdraws_nivel_trabajo][4]);
		}
		//)))))))))))============================== Leñadorrrrrr ==============================
		case WORK_LUMBERJACK:
		{
			if(levela == 5 && PLAYER_WORK_NIVEL[playerid][LENADOR] >= 200)
			{
				PLAYER_WORK_NIVEL[playerid][LENADOR]=200;
			}
			else
			{
				Update_Field_Exp_Nivel_Work(playerid,work_idd);
				PLAYER_WORK_NIVEL[playerid][LENADOR]++;
			}
			
			switch(levela)
			{
				case 1:{if(PLAYER_WORK_NIVEL[playerid][LENADOR] >= 40){Update_Level_Work(playerid,work_idd,2);PLAYER_WORK_NIVEL[playerid][LENADOR]=0;}}
				case 2:{if(PLAYER_WORK_NIVEL[playerid][LENADOR] >= 60){Update_Level_Work(playerid,work_idd,3);PLAYER_WORK_NIVEL[playerid][LENADOR]=0;}}
				case 3:{if(PLAYER_WORK_NIVEL[playerid][LENADOR] >= 80){Update_Level_Work(playerid,work_idd,4);PLAYER_WORK_NIVEL[playerid][LENADOR]=0;}}
				case 4:{if(PLAYER_WORK_NIVEL[playerid][LENADOR] >= 100){Update_Level_Work(playerid,work_idd,5);PLAYER_WORK_NIVEL[playerid][LENADOR]=0;}}
			}
			format(string,sizeof(string),"%d/%d (%d/5)",PLAYER_WORK_NIVEL[playerid][LENADOR],RequerimentMinero(levela),levela);
			PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][textdraws_nivel_trabajo][2], string);
			format(string,sizeof(string),"Talador");
			PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][textdraws_nivel_trabajo][1], string);
			PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraws_nivel_trabajo][4], floatadd(263.762695, floatdiv(PLAYER_WORK_NIVEL[playerid][LENADOR], GetFloatMinero(levela))), 0.000000);
			PlayerTextDrawShow(playerid,PlayerTextdraws[playerid][textdraws_nivel_trabajo][4]);
		}
	}

	SetTimerEx("Hide_Work_Level",7000,false,"d",playerid);
	return 1;
}
Update_Level_Work(playerid, work_idd, nivelea)
{
	new oquery[256];
	format(oquery,sizeof(oquery), "UPDATE `WORK_NIVEL` SET `WORK_EXP` = '0',`WORK_NIVEL` = '%d' WHERE USER_ID='%d' AND WORK_ID='%d';",nivelea,ACCOUNT_INFO[playerid][ac_ID],work_idd);
    db_query(Database, oquery);
	return 1;
}
funcion Hide_Work_Level(playerid)
{
	for(new i=0; i <= 4; i++) PlayerTextDrawHide(playerid,PlayerTextdraws[playerid][textdraws_nivel_trabajo][i]);
	return 1;
}


Randomcolor()
{
    new color_[7];
    new randam=random(10);
    switch(randam)
    {
        case 0: color_="E74F4F";
        case 1: color_="E7BE4F";
        case 2: color_="E5E74F";
        case 3: color_="6DE74F";
        case 4: color_="4FE7B0";
        case 5: color_="4FB7E7";
        case 6: color_="4F5DE7";
        case 7: color_="A44FE7";
        case 8: color_="E74FD7";
        case 9: color_="E74F92";
    }
    return color_;
}
GetPlayerGrafitis(playerid)
{
	new count_=0;
	new query[256],DBResult:Result;
	format(query,sizeof(query),"SELECT * FROM GRAFITIS WHERE CREWID='%d';",PLAYER_CREW[playerid][player_crew_ID]);
    Result = db_query(Database,query);
    count_ = db_num_rows(Result);
	return count_;
}
GetPlayerZonas(playerid)
{
	new count_=0;
	new query[256],DBResult:Result;
	format(query,sizeof(query),"SELECT * FROM ZONAS WHERE BANDA='%d';",PLAYER_CREW[playerid][player_crew_ID]);
    Result = db_query(_DB_,query);
    count_ = db_num_rows(Result);
	return count_;
}
GetPlayerVehicles(playerid)
{
	new count_;
	new query[256],DBResult:Result;
	format(query,sizeof(query),"SELECT PLATE FROM PLAYER_VEHICLES WHERE ID_USER='%d'",ACCOUNT_INFO[playerid][ac_ID]);
    Result = db_query(Database,query);
    count_ = db_num_rows(Result);
	return count_;
}
//disputas grafitis
ShowGrafitisFromMyBanda(playerid)
{
	new Float:xa,Float:ya,Float:za;
    new string[2671],query[256],DBResult:Result;
    format(query,sizeof(query),"SELECT ID,X,Y,Z FROM GRAFITIS WHERE CREWID='%d' limit 20 OFFSET %d",PLAYER_CREW[playerid][player_crew_ID],PAGE[playerid]);
    Result = db_query(Database,query);

   	if(!db_num_rows(Result))
    {
        MensajesAyuda(playerid,"No hay mas grafitis");
        PAGE[playerid] = 0;
        ShowGrafitisFromMyBanda(playerid);
        return 1;
    }

    new lineas;
    new dialog[2671];
    format(dialog, sizeof dialog,  "{CEF6F5}#\tLugar\tDistancia\n");
    for(new i; i < db_num_rows(Result); i++)
    {
        lineas=lineas+200;
        new did;
        did = db_get_field_assoc_int(Result, "ID");
        xa = db_get_field_assoc_float(Result, "X");
		ya = db_get_field_assoc_float(Result, "Y");
		za = db_get_field_assoc_float(Result, "Z");


		new text[256];
		GetZoneName(xa,ya, text, 256);

        for(new l = 0; l < strlen(text); ++l)
            if(text[l] == '{')
                if(text[l+7] == '}')
                    strdel(text, l, l+8);

        if(strlen(text) > 37)
        {
            strdel(text, 34, strlen(text));
            strcat(text, "...", sizeof(text));
        }
        format(string, sizeof(string), "ID %d \t| {%s}%s\t| {ffffff}%.2f Km\n", did,Randomcolor(),text,(GetPlayerDistanceFromPoint(playerid, xa,ya,za) * 0.01));
        strcat(dialog, string);
        db_next_row(Result);
    }
    //
    format(string, sizeof(string), "{FF0000}Total de ganancia: %d",lineas);
    strcat(dialog, string);

    //PAGINA[playerid] = lineas;
    ShowPlayerDialog(playerid, DIALOG_GRAFITI_MIBANDA, DIALOG_STYLE_TABLIST_HEADERS, "| GRAFITIS |", dialog, "Cerrar", "Ver más");
    db_free_result(Result);

	return 1;
}
ShowDisputasGrafitis(playerid)
{
	new Float:xa,Float:ya,Float:za;
    new string[2671],query[256],DBResult:Result;
    format(query,sizeof(query),"SELECT ID,X,Y,Z,CREWID FROM GRAFITIS limit 20 OFFSET %d",PAGE[playerid]);
    Result = db_query(Database,query);
    new lineas;
    new dialog[2671];
    format(dialog, sizeof dialog,  "{CEF6F5}#\tLugar\tBanda\tDistancia\n");
    for(new i; i < db_num_rows(Result); i++)
    {
        lineas++;
        new text[256], did,crewid;
        did = db_get_field_assoc_int(Result, "ID");
        xa = db_get_field_assoc_float(Result, "X");
		ya = db_get_field_assoc_float(Result, "Y");
		za = db_get_field_assoc_float(Result, "Z");
		crewid = db_get_field_assoc_int(Result, "CREWID");
		if(crewid != 0)
		{
			format(text,sizeof(text),"%s",GetNameBandaId(crewid));
		}
		else
		{
			format(text,sizeof(text),"Sin conquistar");
		}
		

		new GPS_EX[MAX_ZONE_NAME];
		GetZoneName(xa,ya, GPS_EX, MAX_ZONE_NAME);

        for(new l = 0; l < strlen(text); ++l)
            if(text[l] == '{')
                if(text[l+7] == '}')
                    strdel(text, l, l+8);

        if(strlen(text) > 37)
        {
            strdel(text, 34, strlen(text));
            strcat(text, "...", sizeof(text));
        }
        format(string, sizeof(string), "ID %d \t| %s\t| {%s}%s\t| {ffffff}%.2f Km\n", did,GPS_EX,Randomcolor(),text,(GetPlayerDistanceFromPoint(playerid, xa,ya,za) * 0.01));
        strcat(dialog, string);
        db_next_row(Result);
    }
    //
    format(string, sizeof(string), "{FF0000}Cerrar");
    strcat(dialog, string);

    PAGINA[playerid] = lineas;
    ShowPlayerDialog(playerid, DIALOG_GRAFITI_DISPUTAS, DIALOG_STYLE_TABLIST_HEADERS, "| GRAFITIS |", dialog, "Aceptar", "Ver más");
    db_free_result(Result);
	return 1;
}
/*GetNameGrafiti(ida_)
{
	new name_[256],Query[256],DBResult:Result;
	format(Query, sizeof(Query), "SELECT NAME FROM `GRAFITIS` WHERE `ID` = '%d'",ida_);
	Result = db_query(_DB_, Query);
	if(db_num_rows(Result))
	{
		db_get_field_assoc(Result, "NAME",name_, 256);
	}
	db_free_result(Result);
	return name_;
}*/
//Gps

//funciones casa facion

GetNameObjetFromCasaFaccion(ida_)
{
	new name_[256],Query[256],DBResult:Result;
	format(Query, sizeof(Query), "SELECT NOMBRE FROM `BUYMUEBLESCASAFACCION` WHERE `OBJETO` = '%d'",ida_);
	Result = db_query(_DB_, Query);
	if(db_num_rows(Result))
	{
		db_get_field_assoc(Result, "NOMBRE",name_, 256);
	}
	db_free_result(Result);
	return name_;
}

GetCountObjetFromThisCasaFac(house_)
{
	new count_;
	new query[256],DBResult:Result;
	format(query,sizeof(query),"SELECT * FROM MAPEOSCASAFACCION WHERE CASAFACCION='%d'",house_);
    Result = db_query(DBCASA,query);
    count_ = db_num_rows(Result);
	return count_;
}

ManageObjectsFromCasaFaccion(playerid)
{
	if(ACCOUNT_INFO[playerid][ac_ID]== 0) return 1;
	new string[1820],query[256],DBResult:Result;
    format(query,sizeof(query),"SELECT * FROM MAPEOSCASAFACCION DESC limit 20 OFFSET %d", PAGE[playerid]);
    Result = db_query(DBCASA,query);
    new lineas;

    if(!db_num_rows(Result))
    {
        SendClientMessage(playerid, -1, "No tienes objetos, o no hay más objetos.");
        PAGE[playerid] = 0;
        return 1;
    } 

    for(new i; i < db_num_rows(Result); i++)
    {
    lineas++;
    new text[256], labelid,boejct;
    //db_get_field_assoc(Result, "NOMBRE",text, 256);
    db_get_field_assoc(Result, "OBJETO",query, 20); boejct = strval(query);
    db_get_field_assoc(Result, "ID",query, 20); labelid = strval(query);
    format(text,sizeof(text),"%s",GetNameObjetFromCasaFaccion(boejct));
    for(new l = 0; l < strlen(text); ++l)
        if(text[l] == '{')
            if(text[l+7] == '}')
                strdel(text, l, l+8);

    if(strlen(text) > 37)
    {
        strdel(text, 34, strlen(text));
        strcat(text, "...", sizeof(text));
    }

    if(!i)
    format(string, sizeof(string), "{000000}ID %d {FFFFFF}(Objeto mueble: %s)\n", labelid,text);
    else
    format(string, sizeof(string), "%s\n{000000}ID %d {FFFFFF}(Objeto mueble: %s)\n", string, labelid,text);
    db_next_row(Result);
    }
    strcat(string, "{00FFFF}Cerrar el dialogo (X)");
    PAGINA[playerid] = lineas;
    ShowPlayerDialog(playerid, DIALOG_MANAGEOBJETOS_CASAFACC, DIALOG_STYLE_LIST, "| OBJETOS MUEBLES |", string, ">>", "+ Muebles");
    db_free_result(Result);
	return 1;
}
ManageMapearCasaFaccion(playerid)
{
	if(ACCOUNT_INFO[playerid][ac_ID]== 0) return 1;
	new string[1820],preci,query[256],DBResult:Result;
    format(query,sizeof(query),"SELECT * FROM BUYMUEBLESCASAFACCION DESC limit 20 OFFSET %d", PAGE[playerid]);
    Result = db_query(_DB_,query);
    new lineas;
    if(!db_num_rows(Result))
    {
        SendClientMessage(playerid, -1, "No hay más objetos.");
        PAGE[playerid] = 0;
        return 1;
    } 
    for(new i; i < db_num_rows(Result); i++)
    {
    lineas++;
    new text[256], labelid;
    db_get_field_assoc(Result, "NOMBRE",text, 256);
    db_get_field_assoc(Result, "ID",query, 20);labelid = strval(query);
    db_get_field_assoc(Result, "PRECIO",query, 20); preci = strval(query);

    for(new l = 0; l < strlen(text); ++l)
        if(text[l] == '{')
            if(text[l+7] == '}')
                strdel(text, l, l+8);

    if(strlen(text) > 37)
    {
        strdel(text, 34, strlen(text));
        strcat(text, "...", sizeof(text));
    }

    if(!i)
    format(string, sizeof(string), "{000000}ID %d {FFFFFF}(Mueble: {20F1FF}%s{FFFFFF}) | Precio: {23FF20}'%d'{ffffff} "SERVER_COIN"\n", labelid,text,preci);
    else
    format(string, sizeof(string), "%s\n{000000}ID %d {FFFFFF}(Mueble: {20F1FF}%s{FFFFFF}) | Precio: {23FF20}'%d'{ffffff} "SERVER_COIN"\n", string, labelid,text,preci);
    db_next_row(Result);
    }
    strcat(string, "{00FFFF}Cerrar el dialogo (X)");
    PAGINA[playerid] = lineas;
    ShowPlayerDialog(playerid, BUY_MUEBLE_FROM_CF, DIALOG_STYLE_LIST, "| OBJETOS MUEBLES |", string, ">>", "+ Muebles");
    db_free_result(Result);
	return 1;
}
//funciones casa faccion
SendToCasaFaccion(playerid, id)
{
	ENCASAFACCION[playerid]=id;
	SetPlayerPosEx(playerid,CASAFACCION[id][InX],CASAFACCION[id][InY],CASAFACCION[id][InZ],0,CASAFACCION[id][INTERIOR],id);
	return 1;
}
//funciones renta vehiculos
RestablecerVehiculoRenta(vehicleid)
{
	RepairVehicleEx(vehicleid);
	GLOBAL_VEHICLES[vehicleid][IN_RENT] = false;
	GLOBAL_VEHICLES[vehicleid][RENT_OWNER] = -1;

	DestroyDynamic3DTextLabel(RENT_VEHICLE_INFO[vehicleid][rent_vehicle_LABEL_ID]);
	new label_str[150];
	format(label_str, sizeof label_str,"{E33213}%s en alquiler\n{FFFFFF}Sube para alquilarlo\n",VEHICLE_INFO[GLOBAL_VEHICLES[vehicleid][gb_vehicle_MODELID] - 400][vehicle_info_NAME]);
	RENT_VEHICLE_INFO[vehicleid][rent_vehicle_LABEL_ID] = CreateDynamic3DTextLabel(label_str, 0xFFFFFFFF, 0.0, 0.0, 1.5, 10.0, .attachedvehicle = vehicleid, .testlos = true, .worldid = 0, .interiorid = 0);

	SetVehicleToRespawnEx(vehicleid);
	return 1;
}
stock ConvertirSegundos(time)
{
    new string[25], minutos, segundos;
    minutos = floatround(time / 60);
    segundos = floatround(time - minutos * 60);
    format(string, sizeof(string), "%02d Min ' %02d Seg", minutos, segundos);
    return string;
}
HideRentVehicle(playerid)
{
	KillTimer(RENTOVEHICULOTIMER[playerid]);
	MensajesAyuda(playerid,"~r~~h~Vehiculo desrentado.");
	VEHICLERENT[playerid]=-1;
	RENTOVEHICULO[playerid]=false;
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][Textdraw_Vehicle_Rent][0]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][Textdraw_Vehicle_Rent][1]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][Textdraw_Vehicle_Rent][2]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][Textdraw_Vehicle_Rent][3]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][Textdraw_Vehicle_Rent][4]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][Textdraw_Vehicle_Rent][5]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][Textdraw_Vehicle_Rent][6]);
	return 1;
}
ShowUpdateRentVehicle(playerid, vehicleid)
{
	format(string2,sizeof(string2),"Genial has rentado un ~r~~h~%s~w~ manten ~y~~h~'Num2' ~w~para encenderlo",VEHICLE_INFO[GLOBAL_VEHICLES[vehicleid][gb_vehicle_MODELID] - 400][vehicle_info_NAME]);
	MensajesAyuda(playerid,string2);
	VEHICLERENT[playerid] = GetPlayerVehicleID(playerid);
	RENTOVEHICULO[playerid]=true;
	TIEMPO_RENT_VEHICLE[playerid][0]=0;
	TIEMPO_RENT_VEHICLE[playerid][1]=0;
	COST_RENT_VEHCILE[playerid]=300;
	RENTOVEHICULOTIMER[playerid]=SetTimerEx("UpdateRentVehicle",1000,true,"d",playerid);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][Textdraw_Vehicle_Rent][0]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][Textdraw_Vehicle_Rent][1]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][Textdraw_Vehicle_Rent][2]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][Textdraw_Vehicle_Rent][3]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][Textdraw_Vehicle_Rent][4]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][Textdraw_Vehicle_Rent][5]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][Textdraw_Vehicle_Rent][6]);

	 
	/**/
	if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_TYPE] == VEHICLE_TYPE_RENT)
	{
		GLOBAL_VEHICLES[vehicleid][IN_RENT] = true;
		GLOBAL_VEHICLES[vehicleid][RENT_OWNER] = ACCOUNT_INFO[playerid][ac_ID];
		DestroyDynamic3DTextLabel(RENT_VEHICLE_INFO[vehicleid][rent_vehicle_LABEL_ID]);
	}

	/**/
	return 1;
}
funcion UpdateRentVehicle(playerid)
{
	TIEMPO_RENT_VEHICLE[playerid][0] ++;
	TIEMPO_RENT_VEHICLE[playerid][1] ++;
    if(TIEMPO_RENT_VEHICLE[playerid][1] == 60)
    {
        TIEMPO_RENT_VEHICLE[playerid][1] = 0;
        COST_RENT_VEHCILE[playerid]=COST_RENT_VEHCILE[playerid]+20;

        if(GetPlayerCash(playerid) < 21)
        {
			MensajeNotificacion(playerid,"El vehiculo que habias rentado se restablecio por quedarte sin dinero");
			RestablecerVehiculoRenta(VEHICLERENT[playerid]);
			HideRentVehicle(playerid);
			return 1;
		}
        GivePlayerCash(playerid, -20);
    }

	new td_str[256];
	format(td_str, sizeof td_str, "%s",ConvertirSegundos(TIEMPO_RENT_VEHICLE[playerid][0]));
 	PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][Textdraw_Vehicle_Rent][3], td_str);

	format(td_str, sizeof td_str, "~h~~h~~g~$%d",COST_RENT_VEHCILE[playerid]);
 	PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][Textdraw_Vehicle_Rent][4], td_str);
	return 1;
}
ShowMapearCasaVip(playerid)
{
	if(ACCOUNT_INFO[playerid][ac_ID]== 0) return 1;
	new string[1820],query[256],DBResult:Result;
    format(query,sizeof(query),"SELECT * FROM MAPEOSCASAVIP DESC limit 20 OFFSET %d", PAGE[playerid]);
    Result = db_query(_DB_,query);
    new lineas;
    for(new i; i < db_num_rows(Result); i++)
    {
    lineas++;
    new text[256], labelid;
    db_get_field_assoc(Result, "NOMBRE",text, 256);
    db_get_field_assoc(Result, "ID",query, 20);
    labelid = strval(query);
    for(new l = 0; l < strlen(text); ++l)
        if(text[l] == '{')
            if(text[l+7] == '}')
                strdel(text, l, l+8);

    if(strlen(text) > 37)
    {
        strdel(text, 34, strlen(text));
        strcat(text, "...", sizeof(text));
    }

    if(!i)
    format(string, sizeof(string), "{000000}ID %d {FFFFFF}(Objeto mueble: %s)\n", labelid,text);
    else
    format(string, sizeof(string), "%s\n{000000}ID %d {FFFFFF}(Objeto mueble: %s)\n", string, labelid,text);
    db_next_row(Result);
    }
    strcat(string, "{00FFFF}Cerrar el dialogo (X)");
    PAGINA[playerid] = lineas;
    ShowPlayerDialog(playerid, DIALOG_MANAGEOBJETOSMUEBLES, DIALOG_STYLE_LIST, "| OBJETOS MUEBLES |", string, ">>", "+ Muebles");
    db_free_result(Result);
	return 1;
}
/*
==================
Venta de dinero IC
10 USD = $ 100.000
15 USD = $ 200.000
20 USD = $ 300.000
==================
Venta de puntos RP
10 USD = 20 RP
20 USD = 50 RP
30 USD = 70 RP
40 USD = 100 RP
==================
Bases para bandas
30 USD
==================
*/

GetCountObjetFromThisHouse(house_)
{
	new count_;
	new query[256],DBResult:Result;
	format(query,sizeof(query),"SELECT * FROM MAPEOSCASA WHERE CASAID='%d'",house_);
    Result = db_query(DBCASA,query);
    count_ = db_num_rows(Result);
	return count_;
}
 
//Apartamento funciones


ManageArmarioDepa(playerid)
{
	if(ENAPARTAMENTO[playerid] != INVALID_EMPRESA_ID)
	{
		if((APARTAMENTO[ ENAPARTAMENTO[playerid] ][CasaDuenoID] == ACCOUNT_INFO[playerid][ac_ID]) || (GetKeysFromThisApartament(playerid,ENAPARTAMENTO[playerid]) == 1))
		{	
			if(Equiped_Inventary[playerid][VALID_EQUIPED] == true) return MensajesAyuda(playerid,"Guarda lo que tienes equipado");
			for(new a=0; a < 29; a++) TextDrawSetPreviewModel(Jugador_Textdraws[playerid][textdraw_armario][a], 18670);
			Update_Armario_Depa(playerid);
		}
		else
		{
			format(string2,sizeof(string2),"Pidele las llaves a ~y~%s~w~ para que te deje ver su armario",GetNameCuentaID(APARTAMENTO[ENAPARTAMENTO[playerid]][CasaDuenoID]));
			MensajeAyuda_4(playerid,string2);
		}
	}
	return 1;
}
Update_Armario_Depa(playerid)
{
	if(ACCOUNT_INFO[playerid][ac_ID]== 0) return 1;
	SelectTextDraw(playerid,0xB00000FF);
	new query[256],DBResult:Result;

	for(new i=2; i < 14; i++) TO_X_VENTARIO[playerid][ ID ][ i ] = INVALID_ID;
	for(new i=15;i < 27; i++) TO_INVENTARIO_X[playerid][ ID ][ i ] = INVALID_ID;
	//Inventario
    format(query,sizeof(query),"SELECT * FROM INVENTARIO WHERE PLAYER = '%d';",ACCOUNT_INFO[playerid][ac_ID]);
    Result = db_query(Database,query);
    new empeza=1;
    for(new i; i < db_num_rows(Result); i++)
    {
 		empeza++;
 		TO_X_VENTARIO[playerid][TIPO][empeza] = db_get_field_assoc_int(Result, "TIPO");
	    TO_X_VENTARIO[playerid][ID][empeza] = db_get_field_assoc_int(Result, "ID");
	    TO_X_VENTARIO[playerid][STATUS][empeza] = db_get_field_assoc_int(Result, "ESTADO");
	    TO_X_VENTARIO[playerid][VALID][ empeza ] = true;
	    TextDrawSetPreviewModel(Jugador_Textdraws[playerid][textdraw_armario][empeza], INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][empeza] ][OBJETO]);
	    db_next_row(Result);
    }
    db_free_result(Result);
 	//Nevera
    format(query,sizeof(query),"SELECT * FROM ARMARIO_APARTAMENTO WHERE APARTAMENTOID = '%d';",ENAPARTAMENTO[playerid]);
    Result = db_query(_DB_,query);
    empeza=14;
    for(new i; i < db_num_rows(Result); i++)
    {
    	empeza++;
	    TO_INVENTARIO_X[playerid][TIPO][empeza] = db_get_field_assoc_int(Result, "ITEM");
	    TO_INVENTARIO_X[playerid][ID][empeza] = db_get_field_assoc_int(Result, "ID");
	    TO_INVENTARIO_X[playerid][STATUS][empeza] = db_get_field_assoc_int(Result, "USOS");
	    TO_INVENTARIO_X[playerid][VALID][ empeza ] = true;
	    TextDrawSetPreviewModel(Jugador_Textdraws[playerid][textdraw_armario][empeza], INVENTARIOPLAYER[ TO_INVENTARIO_X[playerid][TIPO][empeza] ][OBJETO]);
	    db_next_row(Result);
    }
    db_free_result(Result);
    PLAYER_TEMP[playerid][ABRIO_ARMARIO_DEPA] = true;
	for(new i=0; i < 29 ; i ++) TextDrawShowForPlayer(playerid,Jugador_Textdraws[playerid][textdraw_armario][i]);
	return 1;
}
Hide_Armario_Depa(playerid)
{
	PLAYER_TEMP[playerid][ABRIO_ARMARIO_DEPA] = false;
	CancelSelectTextDraw(playerid);
	for(new i=0; i < 29 ; i ++) TextDrawHideForPlayer(playerid,Jugador_Textdraws[playerid][textdraw_armario][i]);
	return 1;
}
Send_Armario_To_Inv_Depa(playerid, idd)
{
	if(GetCountInventary(playerid) >= Max_Slots_For_Invetary) return MensajesAyuda(playerid,"Inventario lleno");
	new DB_Query[256];
	format(DB_Query,sizeof(DB_Query),"INSERT INTO `INVENTARIO` (`ID`,`PLAYER`,`TIPO`,`ESTADO`) VALUES ('%d','%d','%d','%d')",
	TO_INVENTARIO_X[playerid][ID][ idd ],
	ACCOUNT_INFO[playerid][ac_ID],
	TO_INVENTARIO_X[playerid][TIPO][ idd ],
	TO_INVENTARIO_X[playerid][STATUS][ idd ]);
	db_query(Database,DB_Query);
	new action[84];
	format(action, sizeof action, "saca del armario un '%s' y lo guarda en su inventario *",INVENTARIOPLAYER[ TO_INVENTARIO_X[playerid][TIPO][ idd ] ][ NOMBRE ]);
	Auto_SendPlayerAction(playerid, action);
	format(DB_Query,sizeof(DB_Query),"DELETE FROM ARMARIO_APARTAMENTO WHERE ID='%d';",TO_INVENTARIO_X[playerid][ID][ idd ]);
	db_query(_DB_, DB_Query);
	for(new a=0; a < 29; a++) TextDrawSetPreviewModel(Jugador_Textdraws[playerid][textdraw_armario][a], 18670);
	Update_Armario_Depa(playerid);
	return 1;
}
Send_Inv_To_Armario_Depa(playerid, idd)
{
	if(GetItemsFromArmarioDepa(ENAPARTAMENTO[playerid]) >= 12 ) return MensajesAyuda(playerid,"Armario lleno");
	new DB_Query[256];
	format(DB_Query,sizeof(DB_Query),"INSERT INTO `ARMARIO_APARTAMENTO` (`ID`,`APARTAMENTOID`,`ITEM`,`USOS`) VALUES ('%d','%d','%d','%d')",
	TO_X_VENTARIO[playerid][ID][ idd ],
	ENAPARTAMENTO[playerid],
	TO_X_VENTARIO[playerid][TIPO][ idd ],
	TO_X_VENTARIO[playerid][STATUS][ idd ]);
	db_query(_DB_,DB_Query);

	new action[84];
	format(action, sizeof action, "guarda %s en el armario *",INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][ idd ] ][ NOMBRE ]);
	Auto_SendPlayerAction(playerid, action);

	format(DB_Query,sizeof(DB_Query),"DELETE FROM INVENTARIO WHERE ID='%d';",TO_X_VENTARIO[playerid][ID][ idd ]);
	db_query(Database, DB_Query);
	for(new a=0; a < 29; a++) TextDrawSetPreviewModel(Jugador_Textdraws[playerid][textdraw_armario][a], 18670);
	Update_Armario_Depa(playerid);
	return 1;
}

Hide_Nevera_Depa(playerid)
{
	PLAYER_TEMP[playerid][NEVERA_DEPA] = false;
	CancelSelectTextDraw(playerid);
	for(new i=0; i < 29 ; i ++) TextDrawHideForPlayer(playerid,Jugador_Textdraws[playerid][textdraw_nevera_casa][i]);
	return 1;
}

Manage_Armas_Depa(playerid)
{
	if(ENAPARTAMENTO[playerid] != INVALID_EMPRESA_ID)
	{
		if((APARTAMENTO[ ENAPARTAMENTO[playerid] ][CasaDuenoID] == ACCOUNT_INFO[playerid][ac_ID]) || (GetKeysFromThisApartament(playerid,ENAPARTAMENTO[playerid]) == 1))
		{	
			if(Equiped_Inventary[playerid][VALID_EQUIPED] == true) return MensajesAyuda(playerid,"Guarda lo que tienes equipado");
			Update_Armeria_Depa(playerid);
		}
		else
		{
			format(string2,sizeof(string2),"Pidele las llaves a ~y~%s~w~ para que te deje ver su estanteria",GetNameCuentaID(APARTAMENTO[ENAPARTAMENTO[playerid]][CasaDuenoID]));
			MensajeAyuda_4(playerid,string2);
		}
	}
	return 1;
}
Update_Armeria_Depa(playerid)
{
	if(ACCOUNT_INFO[playerid][ac_ID]== 0) return 1;
	SelectTextDraw(playerid,0xB00000FF);
	new query[256],DBResult:Result;
	for(new a=0; a < 29; a++) TextDrawSetPreviewModel(Jugador_Textdraws[playerid][textdraw_armeria][a], 18670);
	for(new i=2; i < 14; i++) TO_X_VENTARIO[playerid][ ID ][ i ] = INVALID_ID;
	for(new i=15;i < 27; i++) TO_INVENTARIO_X[playerid][ ID ][ i ] = INVALID_ID;
	//Inventario
    format(query,sizeof(query),"SELECT * FROM INVENTARIO WHERE PLAYER = '%d';",ACCOUNT_INFO[playerid][ac_ID]);
    Result = db_query(Database,query);
    new empeza=1;
    for(new i; i < db_num_rows(Result); i++)
    {
 		empeza++;
 		TO_X_VENTARIO[playerid][TIPO][empeza] = db_get_field_assoc_int(Result, "TIPO");
	    TO_X_VENTARIO[playerid][ID][empeza] = db_get_field_assoc_int(Result, "ID");
	    TO_X_VENTARIO[playerid][STATUS][empeza] = db_get_field_assoc_int(Result, "ESTADO");
	    TO_X_VENTARIO[playerid][VALID][ empeza ] = true;
	    TextDrawSetPreviewModel(Jugador_Textdraws[playerid][textdraw_armeria][empeza], INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][empeza] ][OBJETO]);
	    db_next_row(Result);
    }
    db_free_result(Result);
 	//Nevera
    format(query,sizeof(query),"SELECT * FROM ESTANTERIA_DEPA WHERE APARTAMENTOID = '%d';",ENAPARTAMENTO[playerid]);
    Result = db_query(_DB_,query);
    empeza=14;
    for(new i; i < db_num_rows(Result); i++)
    {
    	empeza++;
	    TO_INVENTARIO_X[playerid][TIPO][empeza] = db_get_field_assoc_int(Result, "ITEM");
	    TO_INVENTARIO_X[playerid][ID][empeza] = db_get_field_assoc_int(Result, "ID");
	    TO_INVENTARIO_X[playerid][STATUS][empeza] = db_get_field_assoc_int(Result, "ESTADO");
	    TO_INVENTARIO_X[playerid][VALID][ empeza ] = true;
	    TextDrawSetPreviewModel(Jugador_Textdraws[playerid][textdraw_armeria][empeza], INVENTARIOPLAYER[ TO_INVENTARIO_X[playerid][TIPO][empeza] ][OBJETO]);
	    db_next_row(Result);
    }
    db_free_result(Result);
    PLAYER_TEMP[playerid][ABRIO_ARMERIA_DEPA] = true;
	for(new i=0; i < 29 ; i ++) TextDrawShowForPlayer(playerid,Jugador_Textdraws[playerid][textdraw_armeria][i]);
	return 1;
}
Hide_Armeria_Depa(playerid)
{
	CancelSelectTextDraw(playerid);
	PLAYER_TEMP[playerid][ABRIO_ARMERIA_DEPA] = false;
	for(new i=0; i < 29 ; i ++) TextDrawHideForPlayer(playerid,Jugador_Textdraws[playerid][textdraw_armeria][i]);
	return 1;
}

Send_Estanteria_To_Inv_Depa(playerid, idd)
{
	if(GetCountInventary(playerid) >= Max_Slots_For_Invetary) return MensajesAyuda(playerid,"Inventario lleno");
	new DB_Query[256];
	format(DB_Query,sizeof(DB_Query),"INSERT INTO `INVENTARIO` (`ID`,`PLAYER`,`TIPO`,`ESTADO`) VALUES ('%d','%d','%d','%d')",
	TO_INVENTARIO_X[playerid][ID][ idd ],
	ACCOUNT_INFO[playerid][ac_ID],
	TO_INVENTARIO_X[playerid][TIPO][ idd ],
	TO_INVENTARIO_X[playerid][STATUS][ idd ]);
	db_query(Database,DB_Query);
	new action[84];
	format(action, sizeof action, "saca de la estanteria '%s' y lo guarda en su inventario *",INVENTARIOPLAYER[ TO_INVENTARIO_X[playerid][TIPO][ idd ] ][ NOMBRE ]);
	Auto_SendPlayerAction(playerid, action);

	Detele_Estanteria_Depa(ENAPARTAMENTO[playerid]);
	format(DB_Query,sizeof(DB_Query),"DELETE FROM ESTANTERIA_DEPA WHERE ID='%d';",TO_INVENTARIO_X[playerid][ID][ idd ]);
	db_query(_DB_, DB_Query);
	Update_Estanteria_Depa(ENAPARTAMENTO[playerid]);

	new Float:Post[3];
	GetPlayerPos(playerid, Post[0],Post[1],Post[2]);
	SetPlayerPos(playerid, Post[0],Post[1],Post[2]+0.5);
	Update_Armeria_Depa(playerid);
	return 1;
}
Send_Inv_To_Estanteria_Depa(playerid, idd)
{
	if(GetItemsFromEstanteriaDepa(ENAPARTAMENTO[playerid]) >= 12 ) return MensajesAyuda(playerid,"Estanteria llena");
	Detele_Estanteria_Depa(ENAPARTAMENTO[playerid]);
	new DB_Query[256];
	format(DB_Query,sizeof(DB_Query),"INSERT INTO `ESTANTERIA_DEPA` (`ID`,`APARTAMENTOID`,`ITEM`,`ESTADO`) VALUES ('%d','%d','%d','%d')",
	TO_X_VENTARIO[playerid][ID][ idd ],
	ENAPARTAMENTO[playerid],
	TO_X_VENTARIO[playerid][TIPO][ idd ],
	TO_X_VENTARIO[playerid][STATUS][ idd ]);
	db_query(_DB_,DB_Query);

	new action[84];
	format(action, sizeof action, "guarda %s en la estanteria *",INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][ idd ] ][ NOMBRE ]);
	Auto_SendPlayerAction(playerid, action);

	format(DB_Query,sizeof(DB_Query),"DELETE FROM INVENTARIO WHERE ID='%d';",TO_X_VENTARIO[playerid][ID][ idd ]);
	db_query(Database, DB_Query);
	Update_Estanteria_Depa(ENAPARTAMENTO[playerid]);

	new Float:Post[3];
	GetPlayerPos(playerid, Post[0],Post[1],Post[2]);
	SetPlayerPos(playerid, Post[0],Post[1],Post[2]+0.5);
	Update_Armeria_Depa(playerid);
	return 1;
}
Detele_Estanteria_Depa(id)
{
	new DB_Query[200],DBResult:Result;
	format(DB_Query,sizeof(DB_Query),"SELECT * FROM ESTANTERIA_DEPA WHERE APARTAMENTOID='%d';",id);
	Result = db_query(_DB_, DB_Query);
	new empeza=0;
	for(new a=0;a<db_num_rows(Result);a++)
	{
		empeza++;
		DestroyDynamicObject(ESTANTERIA_DEPA[empeza][ id ][OBJETO]);
		db_next_row(Result);
	}
	db_free_result(Result);
	return 1;
}
Update_Estanteria_Depa(id)
{
	new DB_Query[200],DBResult:Result;
	format(DB_Query,sizeof(DB_Query),"SELECT * FROM ESTANTERIA_DEPA WHERE APARTAMENTOID='%d';",id);
	Result = db_query(_DB_, DB_Query);
	new empeza=0,itemda_;
	for(new a=0;a<db_num_rows(Result);a++)
	{
		empeza++;
		DestroyDynamicObject(ESTANTERIA_DEPA[empeza][ id ][OBJETO]);
		itemda_ = db_get_field_assoc_int(Result,"ITEM");
		switch(APARTAMENTO[id][INTERIOR])
		{
			case 1:
			{
				switch(empeza)
				{
					case 1: ESTANTERIA_DEPA[empeza][ id ][OBJETO] = CreateDynamicObject(INVENTARIOPLAYER[ itemda_ ][OBJETO],-245.3893, 2327.8826, 352.0574,GetRotX_EstanteriaDepa(itemda_),GetRotY_EstanteriaDepa(itemda_),GetRotZ_EstanteriaDepa(itemda_),id);
					case 2: ESTANTERIA_DEPA[empeza][ id ][OBJETO] = CreateDynamicObject(INVENTARIOPLAYER[ itemda_ ][OBJETO],-244.5478, 2327.8503, 352.0574,GetRotX_EstanteriaDepa(itemda_), GetRotY_EstanteriaDepa(itemda_),GetRotZ_EstanteriaDepa(itemda_),id);
					case 3: ESTANTERIA_DEPA[empeza][ id ][OBJETO] = CreateDynamicObject(INVENTARIOPLAYER[ itemda_ ][OBJETO],-245.3893, 2327.8826, 351.7174,GetRotX_EstanteriaDepa(itemda_), GetRotY_EstanteriaDepa(itemda_),GetRotZ_EstanteriaDepa(itemda_),id);
					case 4: ESTANTERIA_DEPA[empeza][ id ][OBJETO] = CreateDynamicObject(INVENTARIOPLAYER[ itemda_ ][OBJETO],-244.5478, 2327.8503, 351.7174,GetRotX_EstanteriaDepa(itemda_),GetRotY_EstanteriaDepa(itemda_),GetRotZ_EstanteriaDepa(itemda_),id);
					case 5: ESTANTERIA_DEPA[empeza][ id ][OBJETO] = CreateDynamicObject(INVENTARIOPLAYER[ itemda_ ][OBJETO],-245.3893, 2327.8826, 351.3574,GetRotX_EstanteriaDepa(itemda_),GetRotY_EstanteriaDepa(itemda_),GetRotZ_EstanteriaDepa(itemda_),id);
					case 6: ESTANTERIA_DEPA[empeza][ id ][OBJETO] = CreateDynamicObject(INVENTARIOPLAYER[ itemda_ ][OBJETO],-244.5478, 2327.8503, 351.3974,GetRotX_EstanteriaDepa(itemda_),GetRotY_EstanteriaDepa(itemda_),GetRotZ_EstanteriaDepa(itemda_),id);
					case 7: ESTANTERIA_DEPA[empeza][ id ][OBJETO] = CreateDynamicObject(INVENTARIOPLAYER[ itemda_ ][OBJETO],-245.3893, 2327.8826, 350.9974,GetRotX_EstanteriaDepa(itemda_),GetRotY_EstanteriaDepa(itemda_),GetRotZ_EstanteriaDepa(itemda_),id);
					case 8: ESTANTERIA_DEPA[empeza][ id ][OBJETO] = CreateDynamicObject(INVENTARIOPLAYER[ itemda_ ][OBJETO],-244.5478, 2327.8503, 351.0174,GetRotX_EstanteriaDepa(itemda_),GetRotY_EstanteriaDepa(itemda_),GetRotZ_EstanteriaDepa(itemda_),id);
					case 9: ESTANTERIA_DEPA[empeza][ id ][OBJETO] = CreateDynamicObject(INVENTARIOPLAYER[ itemda_ ][OBJETO],-245.3893, 2327.8826, 350.6374,GetRotX_EstanteriaDepa(itemda_),GetRotY_EstanteriaDepa(itemda_),GetRotZ_EstanteriaDepa(itemda_),id);
					case 10: ESTANTERIA_DEPA[empeza][ id ][OBJETO] = CreateDynamicObject(INVENTARIOPLAYER[ itemda_ ][OBJETO],-244.5478, 2327.8503, 350.6574,GetRotX_EstanteriaDepa(itemda_),GetRotY_EstanteriaDepa(itemda_),GetRotZ_EstanteriaDepa(itemda_),id);
					case 11: ESTANTERIA_DEPA[empeza][ id ][OBJETO] = CreateDynamicObject(INVENTARIOPLAYER[ itemda_ ][OBJETO],-245.3893, 2327.8826, 350.2974,GetRotX_EstanteriaDepa(itemda_),GetRotY_EstanteriaDepa(itemda_),GetRotZ_EstanteriaDepa(itemda_),id);
					case 12: ESTANTERIA_DEPA[empeza][ id ][OBJETO] = CreateDynamicObject(INVENTARIOPLAYER[ itemda_ ][OBJETO],-244.5478, 2327.8503, 350.3374,GetRotX_EstanteriaDepa(itemda_),GetRotY_EstanteriaDepa(itemda_),GetRotZ_EstanteriaDepa(itemda_),id);
				}
			}
		}

		db_next_row(Result);
	}
	db_free_result(Result);
	return 1;
}

ShowDepaMenu(playerid)
{
 
	new id=ENAPARTAMENTO[playerid];
	if(APARTAMENTO[id][CasaDuenoID] != ACCOUNT_INFO[playerid][ac_ID]) return MensajesAyuda(playerid,"No eres el propietario de esta propiedad");
	new Estado[25],Hause_Type[15];
	switch(APARTAMENTO[id][Lock])
	{
		case 0:Estado="Puerta: ~g~Abierta";
		case 1:Estado="Puerta: ~r~Cerrada";
	}

	switch(APARTAMENTO[id][TYPE_HOUSE])
	{
		case 1:Hause_Type="~r~APARTAMENTO";
		case 2:Hause_Type="~r~CASA";
	}

	if(PLAYER_TEMP[playerid][pt_MENU_APARTAMeNTO])
	{
		Hide_Menu_Apartamento(playerid);
	}
	else
	{
		for(new i=0; i < 17; i++) SendClientMessage(playerid,-1,"");
		
		PLAYER_TEMP[playerid][pt_MENU_APARTAMeNTO]=true;
		SelectTextDraw(playerid,SELEC_TEXTDRAW);
		TextDrawSetString(Jugador_Textdraws[playerid][textdraw_menu_apartamento][8], Estado);
		TextDrawSetString(Jugador_Textdraws[playerid][textdraw_menu_apartamento][1], Hause_Type);
		for(new i=0; i < 10; i++) TextDrawShowForPlayer(playerid, Jugador_Textdraws[playerid][textdraw_menu_apartamento][i]);
		PLAYER_TEMP[playerid][pt_TEXTURA_APARTAMENTO]=false;
		PLAYER_TEMP[playerid][pt_COMPRANDO_DPA]=true;
	}
	return 1;
}
Hide_Menu_Apartamento(playerid)
{

	PLAYER_TEMP[playerid][pt_MENU_APARTAMeNTO]=false;
	for(new i=0; i < 10; i++) TextDrawHideForPlayer(playerid, Jugador_Textdraws[playerid][textdraw_menu_apartamento][i]);
	CancelSelectTextDraw(playerid);
	return 1;
}

Select_Interior_Apartamento(playerid)
{
	for(new i=0; i < 12; i++) TextDrawShowForPlayer(playerid, Jugador_Textdraws[playerid][textdraw_interior_apartamento][i]);
	PLAYER_TEMP[playerid][pt_CHANGE_INTERIOR]=true;
	SelectTextDraw(playerid,SELEC_TEXTDRAW);
	return 1;
}


Hide_Sel_Int_Aparto(playerid)
{
	for(new i=0; i < 12; i++) TextDrawHideForPlayer(playerid, Jugador_Textdraws[playerid][textdraw_interior_apartamento][i]);
	PLAYER_TEMP[playerid][pt_CHANGE_INTERIOR]=false;
	PLAYER_TEMP[playerid][pt_TEXTURA_APARTAMENTO]=false;
	return 1;	
}

ShowEditarMapeosDepa(playerid)
{
	if(ACCOUNT_INFO[playerid][ac_ID]== 0) return 1;
	for(new i=21; i < 36; i++) TextDrawHideForPlayer(playerid,Jugador_Textdraws[playerid][textdraw_editarmueblesdepart][i]);
	EDITAR_OBJETO_DEPA[playerid]=true;
	new query[256],DBResult:Result;
    format(query,sizeof(query),"SELECT Objeto,ID FROM MAPEOSAPARTAMENTOS WHERE APARTAMENTOID = '%d' LIMIT '15' OFFSET '0'",ENAPARTAMENTO[playerid]);
    Result = db_query(DBCASA,query);
    new empeza=3,bjeto_karen;
    for(new i; i < db_num_rows(Result); i++)
    {
    	empeza++;
	    
	    EDITAR_OBJETO_CASA[playerid][empeza][ID] = db_get_field_assoc_int(Result,"ID");
	    bjeto_karen = db_get_field_assoc_int(Result,"Objeto");

	    TextDrawSetPreviewModel(Jugador_Textdraws[playerid][textdraw_editarmueblesdepart][empeza], bjeto_karen);
	    TextDrawShowForPlayer(playerid,Jugador_Textdraws[playerid][textdraw_editarmueblesdepart][empeza]);
	    db_next_row(Result);
    }
    db_free_result(Result);
 	TextDrawSetString(Jugador_Textdraws[ playerid ][textdraw_editarmueblesdepart][2] , "1/2");
 	TextDrawShowForPlayer(playerid,Jugador_Textdraws[playerid][textdraw_editarmueblesdepart][0]);
 	TextDrawShowForPlayer(playerid,Jugador_Textdraws[playerid][textdraw_editarmueblesdepart][1]);
 	TextDrawShowForPlayer(playerid,Jugador_Textdraws[playerid][textdraw_editarmueblesdepart][2]);
 	TextDrawShowForPlayer(playerid,Jugador_Textdraws[playerid][textdraw_editarmueblesdepart][3]);
 	TextDrawShowForPlayer(playerid,Jugador_Textdraws[playerid][textdraw_editarmueblesdepart][19]);
 	TextDrawShowForPlayer(playerid,Jugador_Textdraws[playerid][textdraw_editarmueblesdepart][20]);
 	SetTimerEx("SelecTextdra_",1000,false,"d",playerid);
	return 1;
}
ShowEditarMapeosDepa_List2(playerid)
{
	for(new i=4; i < 19; i++) TextDrawHideForPlayer(playerid,Jugador_Textdraws[playerid][textdraw_editarmueblesdepart][i]);
	new query[256],DBResult:Result;
    format(query,sizeof(query),"SELECT Objeto,ID FROM MAPEOSAPARTAMENTOS WHERE APARTAMENTOID = '%d' LIMIT '15' OFFSET '15'",ENAPARTAMENTO[playerid]);
    Result = db_query(DBCASA,query);
    new empeza=20,bjeto_karen;
    for(new i; i < db_num_rows(Result); i++)
    {
    	empeza++;
	    
	    EDITAR_OBJETO_CASA[playerid][empeza][ID] = db_get_field_assoc_int(Result,"ID");
	    bjeto_karen = db_get_field_assoc_int(Result,"Objeto");

	    TextDrawSetPreviewModel(Jugador_Textdraws[playerid][textdraw_editarmueblesdepart][empeza], bjeto_karen);
	    TextDrawShowForPlayer(playerid,Jugador_Textdraws[playerid][textdraw_editarmueblesdepart][empeza]);
	    db_next_row(Result);
    }
    db_free_result(Result);
    TextDrawSetString(Jugador_Textdraws[ playerid ][textdraw_editarmueblesdepart][2] , "2/2");
 	TextDrawShowForPlayer(playerid,Jugador_Textdraws[playerid][textdraw_editarmueblesdepart][2]);
 	SetTimerEx("SelecTextdra_",1000,false,"d",playerid);
	return 1;
}
 
HideEditarMapeosDepa(playerid)
{
	EDITAR_OBJETO_DEPA[playerid]=false;
	CancelSelectTextDraw(playerid);
	for(new i=0; i < 36; i++) TextDrawHideForPlayer(playerid,Jugador_Textdraws[playerid][textdraw_editarmueblesdepart][i]);
	return 1;
}

Editar_Objeto_Depa(playerid, ide)
{
	if(PLAYER_TEMP[playerid][pt_BORRAR_MUEBLES])
	{
		new query[100];
		format(query,sizeof(query),"DELETE FROM MAPEOSAPARTAMENTOS WHERE APARTAMENTOID = '%d' AND ID='%d';",ENAPARTAMENTO[playerid],ide);
    	db_query(DBCASA,query);
    	//
    	MensajesAyuda(playerid,"Objeto borrado");
    	PLAYER_TEMP[playerid][pt_BORRAR_MUEBLES]=false;
		ReloadObjetosDepa(ENAPARTAMENTO[playerid]);
		return 1;
	}
	SAVEID_EDITANDO[playerid] = ide;
	ESTAEDITANDO_Objeto_Depa[playerid]=true;
	new query[256],DBResult:Result;
	new Objeto_Nerak,Float:posr[3],Float:posrt[3];
    format(query,sizeof(query),"SELECT * FROM MAPEOSAPARTAMENTOS WHERE APARTAMENTOID = '%d' AND ID='%d';",ENAPARTAMENTO[playerid],ide);
    Result = db_query(DBCASA,query);
    if(db_num_rows(Result))
    {
    	posr[0] = db_get_field_assoc_float(Result,"X");
    	posr[1] = db_get_field_assoc_float(Result,"Y");
    	posr[2] = db_get_field_assoc_float(Result,"Z");

    	posrt[0] = db_get_field_assoc_float(Result,"rX");
    	posrt[1] = db_get_field_assoc_float(Result,"rY");
    	posrt[2] = db_get_field_assoc_float(Result,"rZ");

    	Objeto_Nerak = db_get_field_assoc_int(Result,"Objeto");
    	OBJETO_DE_EDITAR_CASA[playerid] = CreateDynamicObject(Objeto_Nerak,posr[0],posr[1],posr[2],posrt[0],posrt[1],posrt[2],GetPlayerVirtualWorld(playerid));
    	EditDynamicObject(playerid, OBJETO_DE_EDITAR_CASA[playerid]);
    }
	return 1;
}

ReloadObjetosDepa(depaida)
{
	for(new i=0; i < 31; i++)
	{
		if(IsValidDynamicObject(OBJETOS_DEPA[ depaida ][ i ][ID_OBJETO])) DestroyDynamicObject(OBJETOS_DEPA[ depaida ][ i ][ID_OBJETO]);
	}

	new query[256],DBResult:Result,Float:posr[3],Float:posrt[3],mundoa;
    format(query,sizeof(query),"SELECT * FROM MAPEOSAPARTAMENTOS WHERE APARTAMENTOID = '%d';",depaida);
    Result = db_query(DBCASA,query);
    new bjeto_karen;
    for(new i; i < db_num_rows(Result); i++)
    {
    	posr[0] = db_get_field_assoc_float(Result,"X");
    	posr[1] = db_get_field_assoc_float(Result,"Y");
    	posr[2] = db_get_field_assoc_float(Result,"Z");

    	posrt[0] = db_get_field_assoc_float(Result,"rX");
    	posrt[1] = db_get_field_assoc_float(Result,"rY");
    	posrt[2] = db_get_field_assoc_float(Result,"rZ");

	    bjeto_karen = db_get_field_assoc_int(Result,"Objeto");
	    mundoa = db_get_field_assoc_int(Result,"MUNDO");
	    OBJETOS_DEPA[ depaida ][ i ][ID_OBJETO] = CreateDynamicObject(bjeto_karen,posr[0],posr[1],posr[2],posrt[0],posrt[1],posrt[2],mundoa);

	    db_next_row(Result);
    }
    db_free_result(Result);

	return 1;
}

ObtenerItemsApartamento(playerid)
{
	if(ACCOUNT_INFO[playerid][ac_ID]== 0) return 1;
	new string[2000],query[256],count,DBResult:Result,tipos_,estado_;
    format(query,sizeof(query),"SELECT * FROM INVENTARIO WHERE PLAYER = '%d' ",ACCOUNT_INFO[playerid][ac_ID]);
    Result = db_query(Database,query);

    count = db_num_rows(Result);
	if(count == 0) return MensajesAyuda(playerid,"No tienes ningun item en el inventario");

    for(new i; i < db_num_rows(Result); i++)
    {
    new text[256], labelid;
    //db_get_field_assoc(Result, "Nombre",text, 256);
    db_get_field_assoc(Result, "TIPO",query, 20); 		tipos_ = strval(query);
    db_get_field_assoc(Result, "ID",query, 20);			labelid = strval(query);
    db_get_field_assoc(Result, "ESTADO",query, 20);		estado_ = strval(query);

    format(text,sizeof(text),"%s",INVENTARIOPLAYER[ tipos_ ][NOMBRE]);
    for(new l = 0; l < strlen(text); ++l)
        if(text[l] == '{')
            if(text[l+7] == '}')
                strdel(text, l, l+8);

    if(strlen(text) > 37)
    {
        strdel(text, 34, strlen(text));
        strcat(text, "...", sizeof(text));
    }
    
    if(INVENTARIOPLAYER[ tipos_ ][TIPODECONSUMO] == BEBIDA_24_7 || INVENTARIOPLAYER[ tipos_ ][TIPODECONSUMO] == COMIDA_24_7)
    {
		if(!i)
	    format(string, sizeof(string), "{000000}ID %d {58FAF4}(%s) {FFFFFF}| Estado: {58FAF4}%d {FFFFFF}usos restantes\n", labelid,text,estado_);
	    else
	    format(string, sizeof(string), "%s\n{000000}ID %d {58FAF4}(%s) {FFFFFF}| Estado: {58FAF4}%d {FFFFFF}usos restantes\n", string, labelid,text,estado_);
	}

    db_next_row(Result);
    }
    ShowPlayerDialog(playerid, DIALOG_MANAGENEVERAAPARTA, DIALOG_STYLE_LIST,"ITEMS", string, "Seguir", "Cerrar");
    db_free_result(Result);
	return 1;
}

 
ItemsNeveraApartamento(playerid, id)
{
	if(ACCOUNT_INFO[playerid][ac_ID]== 0) return 1;
	new string[2000],query[256],count,DBResult:Result,tipos_,estado_;
    format(query,sizeof(query),"SELECT * FROM NEVERAAPARTAMENTO WHERE APARTAMENTOID = '%d' ",id);
    Result = db_query(_DB_,query);

    count = db_num_rows(Result);
	if(count == 0) return MensajesAyuda(playerid,"No hay items en la nevera");

    for(new i; i < db_num_rows(Result); i++)
    {
    new text[256], labelid;
    db_get_field_assoc(Result, "ITEM",query, 20); 		tipos_ = strval(query);
    db_get_field_assoc(Result, "ID",query, 20);			labelid = strval(query);
    db_get_field_assoc(Result, "USOS",query, 20);		estado_ = strval(query);

    format(text,sizeof(text),"%s",INVENTARIOPLAYER[ tipos_ ][NOMBRE]);
    for(new l = 0; l < strlen(text); ++l)
        if(text[l] == '{')
            if(text[l+7] == '}')
                strdel(text, l, l+8);
    if(strlen(text) > 37)
    {
        strdel(text, 34, strlen(text));
        strcat(text, "...", sizeof(text));
    }
	if(!i)
    format(string, sizeof(string), "{000000}ID %d {58FAF4}(%s) {FFFFFF}| Estado: {58FAF4}%d {FFFFFF}usos restantes\n", labelid,text,estado_);
    else
    format(string, sizeof(string), "%s\n{000000}ID %d {58FAF4}(%s) {FFFFFF}| Estado: {58FAF4}%d {FFFFFF}usos restantes\n", string, labelid,text,estado_);
    db_next_row(Result);
    }
    ShowPlayerDialog(playerid, DIALOG_SACARITEMSNEVERADEPART, DIALOG_STYLE_LIST,"ITEMS", string, "Seguir", "Cerrar");
	return 1;
}

ManageNeveraApartamento(playerid)
{
	if(ENAPARTAMENTO[playerid] != INVALID_EMPRESA_ID)
	{
		if((APARTAMENTO[ ENAPARTAMENTO[playerid] ][CasaDuenoID] == ACCOUNT_INFO[playerid][ac_ID]) || (GetKeysFromThisApartament(playerid,ENAPARTAMENTO[playerid]) == 1))
		{	
			if(Equiped_Inventary[playerid][VALID_EQUIPED] == true) return MensajesAyuda(playerid,"Guarda lo que tienes equipado");
			for(new a=0; a < 29; a++) TextDrawSetPreviewModel(Jugador_Textdraws[playerid][textdraw_nevera_casa][a], 18670);
			UpdateNevera_Depa(playerid);
		}
		else
		{
			format(string2,sizeof(string2),"Pidele las llaves a ~y~%s~w~ para que te deje ver su nevera",GetNameCuentaID(APARTAMENTO[ENAPARTAMENTO[playerid]][CasaDuenoID]));
			MensajeAyuda_4(playerid,string2);
		}
	}
	return 1;
}

UpdateNevera_Depa(playerid)
{
	if(ACCOUNT_INFO[playerid][ac_ID]== 0) return 1;

	SelectTextDraw(playerid,0xB00000FF);
	ABRIO_NEVERA[playerid]=true;
	new query[256],DBResult:Result;

	for(new i=2; i < 14; i++) TO_X_VENTARIO[playerid][ ID ][ i ] = INVALID_ID;
	for(new i=15;i < 27; i++) TO_INVENTARIO_X[playerid][ ID ][ i ] = INVALID_ID;
	//Inventario
    format(query,sizeof(query),"SELECT * FROM INVENTARIO WHERE PLAYER = '%d';",ACCOUNT_INFO[playerid][ac_ID]);
    Result = db_query(Database,query);
    new empeza=1;
    for(new i; i < db_num_rows(Result); i++)
    {
 		empeza++;
 		TO_X_VENTARIO[playerid][TIPO][empeza] = db_get_field_assoc_int(Result, "TIPO");
	    TO_X_VENTARIO[playerid][ID][empeza] = db_get_field_assoc_int(Result, "ID");
	    TO_X_VENTARIO[playerid][STATUS][empeza] = db_get_field_assoc_int(Result, "ESTADO");
	    TO_X_VENTARIO[playerid][VALID][ empeza ] = true;
	    TextDrawSetPreviewModel(Jugador_Textdraws[playerid][textdraw_nevera_casa][empeza], INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][empeza] ][OBJETO]);
	    db_next_row(Result);
    }
    db_free_result(Result);
 	//Nevera
    format(query,sizeof(query),"SELECT * FROM NEVERAAPARTAMENTO WHERE APARTAMENTOID = '%d';",ENAPARTAMENTO[playerid]);
    Result = db_query(_DB_,query);
    empeza=14;
    for(new i; i < db_num_rows(Result); i++)
    {
    	empeza++;

	    TO_INVENTARIO_X[playerid][TIPO][empeza] = db_get_field_assoc_int(Result, "ITEM");
	    TO_INVENTARIO_X[playerid][ID][empeza] = db_get_field_assoc_int(Result, "ID");
	    TO_INVENTARIO_X[playerid][STATUS][empeza] = db_get_field_assoc_int(Result, "USOS");
	    TO_INVENTARIO_X[playerid][VALID][ empeza ] = true;

	    TextDrawSetPreviewModel(Jugador_Textdraws[playerid][textdraw_nevera_casa][empeza], INVENTARIOPLAYER[ TO_INVENTARIO_X[playerid][TIPO][empeza] ][OBJETO]);
	    db_next_row(Result);
    }
    db_free_result(Result);
	PLAYER_TEMP[playerid][NEVERA_DEPA]= true;
	for(new i=0; i < 29 ; i ++) TextDrawShowForPlayer(playerid,Jugador_Textdraws[playerid][textdraw_nevera_casa][i]);
	return 1;
}
Send_Inventario_To_NeveraDepa(playerid, idd)
{
	if(GetCountItemsNevera_Depa(ENAPARTAMENTO[playerid]) >= 12) return MensajesAyuda(playerid,"Nevera llena");
	new DB_Query[256];
	format(DB_Query,sizeof(DB_Query),"INSERT INTO `NEVERAAPARTAMENTO` (`ID`,`APARTAMENTOID`,`ITEM`,`USOS`) VALUES ('%d','%d','%d','%d')",
	TO_X_VENTARIO[playerid][ID][ idd ],
	ENAPARTAMENTO[playerid],
	TO_X_VENTARIO[playerid][TIPO][ idd ],
	TO_X_VENTARIO[playerid][STATUS][ idd ]);
	db_query(_DB_,DB_Query);


	format(DB_Query,sizeof(DB_Query),"DELETE FROM INVENTARIO WHERE ID='%d';",TO_X_VENTARIO[playerid][ID][ idd ]);
	db_query(Database, DB_Query);

	for(new a=0; a < 29; a++) TextDrawSetPreviewModel(Jugador_Textdraws[playerid][textdraw_nevera_casa][a], 18670);
	UpdateNevera_Depa(playerid);
	return 1;
}

Send_Nevera_To_InventarioDepa(playerid, idd)
{
	if(GetCountInventary(playerid) >= Max_Slots_For_Invetary) return MensajesAyuda(playerid,"Inventario lleno");
	new DB_Query[256];
	format(DB_Query,sizeof(DB_Query),"INSERT INTO `INVENTARIO` (`ID`,`PLAYER`,`TIPO`,`ESTADO`) VALUES ('%d','%d','%d','%d')",
	TO_INVENTARIO_X[playerid][ID][ idd ],
	ACCOUNT_INFO[playerid][ac_ID],
	TO_INVENTARIO_X[playerid][TIPO][ idd ],
	TO_INVENTARIO_X[playerid][STATUS][ idd ]);
	db_query(Database,DB_Query);


	format(DB_Query,sizeof(DB_Query),"DELETE FROM NEVERAAPARTAMENTO WHERE ID='%d';",TO_INVENTARIO_X[playerid][ID][ idd ]);
	db_query(_DB_, DB_Query);

	for(new a=0; a < 29; a++) TextDrawSetPreviewModel(Jugador_Textdraws[playerid][textdraw_nevera_casa][a], 18670);
	UpdateNevera_Depa(playerid);
	return 1;
}

UpdateApartamento(id)
{
	if(!Iter_Contains(Apartamentos, id)) return 0;
	new label[100];
	format(label, sizeof(label), "{FFFFFF}Apartamento de:\n {FFFF00}%s",GetNameCuentaID(APARTAMENTO[id][CasaDuenoID]));	
	UpdateDynamic3DTextLabelText(APARTAMENTO[id][CasaLabel], 0xFFFFFFFF, label);
	return 1;
}
ManageDejarPasarApartamento(playerid)
{
	if(ACCOUNT_INFO[playerid][ac_ID]== 0) return 1;
	if(ENAPARTAMENTO[playerid]== -1) return 1;
	new id=ENAPARTAMENTO[playerid];
	if(APARTAMENTO[id][CasaDuenoID] != ACCOUNT_INFO[playerid][ac_ID]) return MensajesAyuda(playerid,"No eres el propietario de esta casa");
	new string[2000],count,query[256],DBResult:Result,player_;

	/**/
	format(query,sizeof(query),"SELECT PLAYER FROM LLAMADASPUERTAAPARTAMENTOS WHERE APARTAMENTO = '%d' ",id);
    Result = db_query(_DB_,query);
	for(new a; a < db_num_rows(Result); a++)
    {
    	db_get_field_assoc(Result, "PLAYER",query, 20);		player_ = strval(query);
    	if(!IsPlayerConnected(player_) || !IsPlayerInRangeOfPoint(player_,3,CASAVIP[id][CasaX],CASAVIP[id][CasaY],CASAVIP[id][CasaZ]))
    	{
    		new DB_Query[100];
    		format(DB_Query, sizeof DB_Query, "DELETE FROM `LLAMADASPUERTAAPARTAMENTOS` WHERE `PLAYER` = '%d';",player_);
			db_query(_DB_, DB_Query);
		}
		db_next_row(Result);
	}
	db_free_result(Result);
	/**/
    format(query,sizeof(query),"SELECT PLAYER FROM LLAMADASPUERTAAPARTAMENTOS WHERE APARTAMENTO = '%d' ",id);
    Result = db_query(_DB_,query);
	count = db_num_rows(Result);
	if(count == 0) return MensajesAyuda(playerid,"Ningun jugador a tocado la puerta");
    for(new i; i < db_num_rows(Result); i++)
    {
	    new text[256];
	    db_get_field_assoc(Result, "PLAYER",query, 20);		player_ = strval(query);
	    if(!IsPlayerConnected(player_)) 
	    format(text,sizeof(text),"%s",ACCOUNT_INFO[player_][ac_NAME]);
	    for(new l = 0; l < strlen(text); ++l)
	        if(text[l] == '{')
	            if(text[l+7] == '}')
	                strdel(text, l, l+8);
	    if(strlen(text) > 37)
	    {
	        strdel(text, 34, strlen(text));
	        strcat(text, "...", sizeof(text));
	    }
	   	if(!i)
		format(string, sizeof(string), "{000000}ID %d {FFFFFF}| Nombre: %s\n", player_,ACCOUNT_INFO[player_][ac_NAME]);
		else
		format(string, sizeof(string), "%s\n{000000}ID %d {FFFFFF}| Nombre: %s\n", string, player_,ACCOUNT_INFO[player_][ac_NAME]);
	    db_next_row(Result);
    }
    ShowPlayerDialog(playerid,DIALOG_LLAMARPUERTAAPARTAMENTO, DIALOG_STYLE_LIST,"Jugador que quieren entrar:", string, "Dejar pasar", "Cerrar");
    db_free_result(Result);
	return 1;
}

ResetearApartamento(id)
{
	if(!Iter_Contains(Apartamentos, id)) return 0;
	APARTAMENTO[id][CasaDuenoID]=0;
	APARTAMENTO[id][ENVENTA]=0;
	APARTAMENTO[id][Lock] = 1;
	new label[256];
    switch(APARTAMENTO[id][TYPE_HOUSE])
    {
    	case 1:format(label, sizeof(label), "{FFFFFF}Apartamento en venta\n\nCosto: {FFFF00}%s ",number_format_thousand(APARTAMENTO[id][PRECIO]));
    	case 2:format(label, sizeof(label), "{FFFFFF}Casa en venta\n\nCosto: {FFFF00}%s ",number_format_thousand(APARTAMENTO[id][PRECIO]));
    }
    
    UpdateDynamic3DTextLabelText(APARTAMENTO[id][CasaLabel], 0xFFFFFFFF, label);
	Streamer_SetIntData(STREAMER_TYPE_PICKUP, APARTAMENTO[id][CasaPickup], E_STREAMER_MODEL_ID, 1273);
	new DB_Query[256];
	format(DB_Query,sizeof(DB_Query),"UPDATE `APARTAMENTOS` SET PLAYER = '0',CANDADO = '1', ENVENTA = '0' WHERE `ID` = '%d';",id);
	db_query(_DB_, DB_Query);

	format(DB_Query, sizeof DB_Query, "DELETE FROM `KEYSAPARTAMENTOS` WHERE `APARTAMENTOID`='%d';",id);
	db_query(_DB_, DB_Query);

	format(DB_Query, sizeof DB_Query, "DELETE FROM `ARMASAPARTAMENTOS` WHERE `APARTAMENTOID`='%d';",id);
	db_query(_DB_, DB_Query);

   	for(new i=0; i < 31; i++)
	{
		if(IsValidDynamicObject(OBJETOS_DEPA[ id ][ i ][ID_OBJETO])) DestroyDynamicObject(OBJETOS_DEPA[ id ][ i ][ID_OBJETO]);
	}

	format(DB_Query,sizeof(DB_Query),"DELETE FROM MAPEOSAPARTAMENTOS WHERE APARTAMENTOID ='%d';",id);
	db_query(DBCASA,DB_Query);

	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++) 					
	{
		if(i == INVALID_PLAYER_ID) return 1;
		if(!IsPlayerConnected(i)) return 1;
		if(ENAPARTAMENTO[i] == id)
		{
			SetPlayerPosEx(i,APARTAMENTO[id][CasaX],APARTAMENTO[id][CasaY],APARTAMENTO[id][CasaZ],0,0,0,true);
			ENAPARTAMENTO[i]=-1;
			SendClientMessage(i,-1,"El apartamento fue vendido y todos fueron echados");
		}
	}
	return 1;
}

ShowMapearApartamento(playerid)
{
	if(ACCOUNT_INFO[playerid][ac_ID]== 0) return 1;
	new string[1820],query[256],DBResult:Result;
    format(query,sizeof(query),"SELECT * FROM MAPEOSCASAVIP DESC limit 20 OFFSET %d", PAGE[playerid]);
    Result = db_query(_DB_,query);
    new lineas;
    for(new i; i < db_num_rows(Result); i++)
    {
    lineas++;
    new text[256], labelid;
    db_get_field_assoc(Result, "NOMBRE",text, 256);
    db_get_field_assoc(Result, "ID",query, 20);
    labelid = strval(query);
    for(new l = 0; l < strlen(text); ++l)
        if(text[l] == '{')
            if(text[l+7] == '}')
                strdel(text, l, l+8);

    if(strlen(text) > 37)
    {
        strdel(text, 34, strlen(text));
        strcat(text, "...", sizeof(text));
    }

    if(!i)
    format(string, sizeof(string), "{000000}ID %d {FFFFFF}(Objeto mueble: %s)\n", labelid,text);
    else
    format(string, sizeof(string), "%s\n{000000}ID %d {FFFFFF}(Objeto mueble: %s)\n", string, labelid,text);
    db_next_row(Result);
    }
    strcat(string, "{00FFFF}Cerrar el dialogo (X)");
    PAGINA[playerid] = lineas;
    ShowPlayerDialog(playerid, MANAGEOBJETOSMUEBLES_DEPART, DIALOG_STYLE_LIST, "| OBJETOS MUEBLES |", string, ">>", "+ Muebles");
    db_free_result(Result);
	return 1;
}

GetCountObjetFromThisDepa(house_)
{
	new count_;
	new query[256],DBResult:Result;
	format(query,sizeof(query),"SELECT * FROM MAPEOSAPARTAMENTOS WHERE APARTAMENTOID='%d'",house_);
    Result = db_query(DBCASA,query);
    count_ = db_num_rows(Result);
	return count_;
}

 
//Casasvip funciones

ShowTexturesForCasaVip(playerid)
{
	new string[1820],query[256],DBResult:Result,aObjeto_;
    format(query,sizeof(query),"SELECT * FROM MAPTEXTURES");
    Result = db_query(_DB_,query);
    for(new i; i < db_num_rows(Result); i++)
    {
	    new text[256], labelid;
	    db_get_field_assoc(Result, "TEXTURA1",text, 256);
	    db_get_field_assoc(Result, "ID",query, 20);
	    labelid = strval(query);
		db_get_field_assoc(Result, "TEXTURAMODEL",query, 20);
	    aObjeto_ = strval(query);

	    for(new l = 0; l < strlen(text); ++l)
	        if(text[l] == '{')
	            if(text[l+7] == '}')
	                strdel(text, l, l+8);

	    if(strlen(text) > 37)
	    {
	        strdel(text, 34, strlen(text));
	        strcat(text, "...", sizeof(text));
	    }

	    if(!i)
	    format(string, sizeof(string), "ID %d (Objeto: %d) | Textura nombre: %d", labelid,aObjeto_,text);
	    else
	    format(string, sizeof(string), "%s\nID %d (Objeto: %d) | Textura nombre: %d", string, labelid,aObjeto_,text);
	    db_next_row(Result);
    }
    ShowPlayerDialog(playerid, DIALOG_ADDTEXTUREMAP, DIALOG_STYLE_LIST, "| TEXTURAS |", string, ">>", "X");
    db_free_result(Result);
	return 1;
}

CambiarTexturaMapeo(playerid,texturamodel,textura1[],textura2[])
{
    new Query[300],DBResult:Result;
    format(Query, sizeof(Query), "SELECT * FROM `MAPCASA` WHERE `CASAID` = '%d' AND `ID` = '%d'",MapeandoCasa[playerid],MapearObjetoAfuera[playerid]);
    Result = db_query(DBCASA, Query);
    if(db_num_rows(Result))
    {
        format(Query, sizeof(Query), "UPDATE `MAPCASA` SET `TEXTURAMODEL` = '%d',`TEXTURA1` = '%s',`TEXTURA2` = '%s',`TYPE` = '1' WHERE `CASAID` = '%d' AND `ID` = '%d' ",\
        texturamodel,textura1,textura2,MapeandoCasa[playerid],MapearObjetoAfuera[playerid]);
        db_query(DBCASA, Query);
        GameTextForPlayer( playerid, "~n~~n~~n~~n~~n~~w~Textura ~y~~h~~h~cambiada.", 5000, 4 );
        SetDynamicObjectMaterial(MAPEOSFUERA[MapearObjetoAfuera[playerid]][ID], 0, texturamodel,textura1,textura2, 0);
        GastarRp(playerid,5);
    }
    else
    {
    	SendClientMessage(playerid, -1, "* Error interno.");
    }
    db_free_result(Result);
	return 1;
}

GetCountObjetFromMapCasa(house_)
{
	new count_;
	new query[256],DBResult:Result;
	format(query,sizeof(query),"SELECT * FROM MAPCASA WHERE CASAID='%d'",house_);
    Result = db_query(DBCASA,query);
    count_ = db_num_rows(Result);
	return count_;
}

GetNameObjectFromMapCasa(ida_)
{
	new name_[50],Query[70],DBResult:Result;
	format(Query, sizeof(Query), "SELECT NOMBRE FROM `BUYMAPCASA` WHERE `OBJETO` = '%d'",ida_);
	Result = db_query(_DB_, Query);
	if(db_num_rows(Result))
	{
		db_get_field_assoc(Result, "NOMBRE",name_, 50);
	}
	db_free_result(Result);
	return name_;
}
ManageObjectsFromMapCasa(playerid)
{
	if(GetCountObjetFromMapCasa(MapeandoCasa[playerid]) == 0) return MensajesAyuda(playerid,"No tienes ningun objeto agregado a esta casa");
	new string[1000],query[100],DBResult:Result,aObjeto_;
    format(query,sizeof(query),"SELECT ID,OBJETO FROM MAPCASA WHERE CASAID='%d';",MapeandoCasa[playerid]);
    Result = db_query(DBCASA,query);
    for(new i; i < db_num_rows(Result); i++)
    {
    new text[256], labelid;

    db_get_field_assoc(Result, "ID",query, 20);
    labelid = strval(query);
	db_get_field_assoc(Result, "OBJETO",query, 20);
    aObjeto_ = strval(query);
    format(text,sizeof(text),"%s",GetNameObjectFromMapCasa(aObjeto_));

    for(new l = 0; l < strlen(text); ++l)
        if(text[l] == '{')
            if(text[l+7] == '}')
                strdel(text, l, l+8);

    if(strlen(text) > 37)
    {
        strdel(text, 34, strlen(text));
        strcat(text, "...", sizeof(text));
    }

    if(!i)
    format(string, sizeof(string), "ID %d (Nombre Objeto: %s) | Objeto: %d", labelid,text,aObjeto_);
    else
    format(string, sizeof(string), "%s\nID %d (Nombre Objeto: %s) | Objeto: %d", string, labelid,text,aObjeto_);
    db_next_row(Result);
    }
    ShowPlayerDialog(playerid, DIALOG_EDITMAPCASA_AFUERA, DIALOG_STYLE_LIST, "| OBJETOS DE LA CASA |", string, ">>", "X");
    db_free_result(Result);
	return 1;
}

ShowObjectsForBuyMapCasa(playerid)
{
	new string[1820],query[256],DBResult:Result,costo_;
    format(query,sizeof(query),"SELECT * FROM BUYMAPCASA");
    Result = db_query(_DB_,query);
    for(new i; i < db_num_rows(Result); i++)
    {
    new text[256], labelid;
    db_get_field_assoc(Result, "NOMBRE",text, 256);
    db_get_field_assoc(Result, "ID",query, 20);
    labelid = strval(query);
	db_get_field_assoc(Result, "PRECIO",query, 20);
    costo_ = strval(query);


    for(new l = 0; l < strlen(text); ++l)
        if(text[l] == '{')
            if(text[l+7] == '}')
                strdel(text, l, l+8);

    if(strlen(text) > 37)
    {
        strdel(text, 34, strlen(text));
        strcat(text, "...", sizeof(text));
    }

    if(!i)
    format(string, sizeof(string), "ID %d (Objeto: %s) | Costo: %d $$", labelid,text,costo_);
    else
    format(string, sizeof(string), "%s\nID %d (Objeto: %s) | Costo: %d $$", string, labelid,text,costo_);
    db_next_row(Result);
    }
    ShowPlayerDialog(playerid, DIALOG_STARTMAPERCASAVIP, DIALOG_STYLE_LIST, "| OBJETOS |", string, ">>", "X");
    db_free_result(Result);
	SendClientMessage(playerid,-1,"*Selecciona el objeto que deseas mapear, si te alejas de la casa mas de 10 metros, se cancelara la edición");
	return 1;	
}
GetDistanceMyHouses(playerid,casaida)
{
	new distancia_;
	new DBResult:qresult,Float:pos[4],count;
	new Query[80];
	format(Query,sizeof(Query),"SELECT X,Y,Z FROM `CASASVIP` WHERE PLAYER='%d' AND ID='%d';",ACCOUNT_INFO[playerid][ac_ID],casaida);
	qresult = db_query(_DB_,Query);
    count = db_num_rows(qresult);
    for(new a=0;a<count;a++)
    {
        pos[0] = db_get_field_assoc_float(qresult, "X");
        pos[1] = db_get_field_assoc_float(qresult, "Y");
        pos[2] = db_get_field_assoc_float(qresult, "Z");
        if(!IsPlayerInRangeOfPoint(playerid, 10.0, pos[0],pos[1],pos[2]))
		{
		    distancia_=1;
			return distancia_;
		}
		db_next_row(qresult);
	}
	db_free_result(qresult);
    return distancia_;
}

ShowHouseMenu(playerid)
{
	new id=ENCASAVIP[playerid];
	if(CASAVIP[id][CasaDuenoID] != ACCOUNT_INFO[playerid][ac_ID]) return MensajesAyuda(playerid,"No eres el propietario de esta casa");
	new Estado[25],CajaF[25];
	switch(CASAVIP[id][Lock])
	{
		case 0:Estado="Puerta: ~g~Abierta";
		case 1:Estado="Puerta: ~r~Cerrada";
	}

	switch(CASAVIP[id][CAJASTATUS])
	{
		case 0:CajaF="Cafa fuerte: ~r~Cerrada";
		case 1:CajaF="Cafa fuerte: ~g~Abierta";
	}
	
	/*format(string2,sizeof(string2),"Llaves\nTexturas y pintura (Costo 5 "SERVER_COIN" por textura)\nVender la casa\nDejar pasar\nMapear la casa (Costo 1 "SERVER_COIN" por mapeo)\nPuerta: %s\nCaja fuerte: %s",Estado,CajaF);
	ShowPlayerDialog(playerid,DIALOG_CASAMENU,DIALOG_STYLE_LIST,"Menu CASA", string2, "Seguir","Cancelar");*/
	
	if(PLAYER_TEMP[playerid][pt_MENU_CASA])
	{
		Hide_Menu_Casa(playerid);
	}
	else
	{
		for(new i=0; i < 17; i++) SendClientMessage(playerid,-1,"");
		
		PLAYER_TEMP[playerid][pt_MENU_CASA]=true;
		SelectTextDraw(playerid,SELEC_TEXTDRAW);
		TextDrawSetString(Jugador_Textdraws[playerid][textdraw_menu_casa][8], Estado);
		TextDrawSetString(Jugador_Textdraws[playerid][textdraw_menu_casa][9], CajaF);
		for(new i=0; i < 10; i++) TextDrawShowForPlayer(playerid, Jugador_Textdraws[playerid][textdraw_menu_casa][i]);
	}
	return 1;
}


Hide_Menu_Casa(playerid)
{
	PLAYER_TEMP[playerid][pt_MENU_CASA]=false;
	for(new i=0; i < 10; i++) TextDrawHideForPlayer(playerid, Jugador_Textdraws[playerid][textdraw_menu_casa][i]);
	CancelSelectTextDraw(playerid);
	return 1;
}
Select_Interior_Casa(playerid)
{
	for(new i=0; i < 12; i++) TextDrawShowForPlayer(playerid, Jugador_Textdraws[playerid][textdraw_select_interior][i]);
	PLAYER_TEMP[playerid][pt_CHANGE_INTERIOR]=true;
	SelectTextDraw(playerid,SELEC_TEXTDRAW);
	return 1;
}

Hide_Select_Interior_Casa(playerid)
{
	for(new i=0; i < 12; i++) TextDrawHideForPlayer(playerid, Jugador_Textdraws[playerid][textdraw_select_interior][i]);
	PLAYER_TEMP[playerid][pt_CHANGE_INTERIOR]=false;
	
	return 1;
}
UpdateCasaVip(id)
{
	if(!Iter_Contains(Casasvip, id)) return 0;
	new label[100];
	format(label, sizeof(label), "{FFFFFF}Casa de:\n {FFFF00}%s",GetNameCuentaID(CASAVIP[id][CasaDuenoID]));	
	UpdateDynamic3DTextLabelText(CASAVIP[id][CasaLabel], 0xFFFFFFFF, label);
	return 1;
}
ManageDejarPasar(playerid)
{
	if(ACCOUNT_INFO[playerid][ac_ID]== 0) return 1;
	if(ENCASAVIP[playerid]== -1) return 1;
	new id=ENCASAVIP[playerid];
	if(CASAVIP[id][CasaDuenoID] != ACCOUNT_INFO[playerid][ac_ID]) return MensajesAyuda(playerid,"No eres el propietario de esta casa");
	new string[2000],count,query[256],DBResult:Result,player_;

	/**/
	format(query,sizeof(query),"SELECT PLAYER FROM LLAMADASPUERTACASAVIP WHERE CASA = '%d' ",id);
    Result = db_query(_DB_,query);
	for(new a; a < db_num_rows(Result); a++)
    {
    	db_get_field_assoc(Result, "PLAYER",query, 20);		player_ = strval(query);
    	if(!IsPlayerConnected(player_) || !IsPlayerInRangeOfPoint(player_,3,CASAVIP[id][CasaX],CASAVIP[id][CasaY],CASAVIP[id][CasaZ]))
    	{
    		new DB_Query[100];
    		format(DB_Query, sizeof DB_Query, "DELETE FROM `LLAMADASPUERTACASAVIP` WHERE `PLAYER` = '%d';",player_);
			db_query(_DB_, DB_Query);
		}
		db_next_row(Result);
	}
	db_free_result(Result);
	/**/
    format(query,sizeof(query),"SELECT PLAYER FROM LLAMADASPUERTACASAVIP WHERE CASA = '%d' ",id);
    Result = db_query(_DB_,query);
	count = db_num_rows(Result);
	if(count == 0) return MensajesAyuda(playerid,"Ningun jugador a tocado la puerta");
    for(new i; i < db_num_rows(Result); i++)
    {
	    new text[256];
	    db_get_field_assoc(Result, "PLAYER",query, 20);		player_ = strval(query);
	    if(!IsPlayerConnected(player_)) 
	    format(text,sizeof(text),"%s",ACCOUNT_INFO[player_][ac_NAME]);
	    for(new l = 0; l < strlen(text); ++l)
	        if(text[l] == '{')
	            if(text[l+7] == '}')
	                strdel(text, l, l+8);
	    if(strlen(text) > 37)
	    {
	        strdel(text, 34, strlen(text));
	        strcat(text, "...", sizeof(text));
	    }
	   	if(!i)
		format(string, sizeof(string), "{000000}ID %d {FFFFFF}| Nombre: %s\n", player_,ACCOUNT_INFO[player_][ac_NAME]);
		else
		format(string, sizeof(string), "%s\n{000000}ID %d {FFFFFF}| Nombre: %s\n", string, player_,ACCOUNT_INFO[player_][ac_NAME]);
	    db_next_row(Result);
    }
    ShowPlayerDialog(playerid,DIALOG_LLAMARPUERTACASAVIP, DIALOG_STYLE_LIST,"Jugador que quieren entrar:", string, "Dejar pasar", "Cerrar");
    db_free_result(Result);
	return 1;
}

ManageArmasCasasVIP(playerid)
{
	if(ENCASAVIP[playerid] != INVALID_EMPRESA_ID)
	{
		Manage_Armas_Casa(playerid);
		/*if(CASAVIP[id][CasaDuenoID] == ACCOUNT_INFO[playerid][ac_ID])
		{	
			Manage_Armas_Casa(playerid);
			//ShowPlayerDialog(playerid,DIALOG_ARMAMENTO_CASAVIP,DIALOG_STYLE_LIST,"ARMAMENTO","Guardar el arma actual\nSacar un arma", "Seguir", "Cancelar");
			return 1;	
		}
		if(GetKeysFromThisHouseVip(playerid,id) == 1)
		{
			Manage_Armas_Casa(playerid);
			//ShowPlayerDialog(playerid,DIALOG_ARMAMENTO_CASAVIP,DIALOG_STYLE_LIST,"ARMAMENTO","Guardar el arma actual\nSacar un arma", "Seguir", "Cancelar");
			return 1;
		}
		else
		{
			format(string2,sizeof(string2),"Pidele las llaves a ~y~%s~w~ para que te deje ver su armeria",GetNameCuentaID(CASAVIP[id][CasaDuenoID]));
			MensajesAyuda(playerid,string2);
		}*/
	}
	return 1;
}
Manage_Armas_Casa(playerid)
{
	if(ENCASAVIP[playerid] != INVALID_EMPRESA_ID)
	{
		if((CASAVIP[ ENCASAVIP[playerid] ][CasaDuenoID] == ACCOUNT_INFO[playerid][ac_ID]) || (GetKeysFromThisHouseVip(playerid,ENCASAVIP[playerid]) == 1))
		{	
			if(Equiped_Inventary[playerid][VALID_EQUIPED] == true) return MensajesAyuda(playerid,"Guarda lo que tienes equipado");
			Update_Armeria_Casa(playerid);
		}
		else
		{
			format(string2,sizeof(string2),"Pidele las llaves a ~y~%s~w~ para que te deje ver su estanteria",GetNameCuentaID(CASAVIP[ENCASAVIP[playerid]][CasaDuenoID]));
			MensajeAyuda_4(playerid,string2);
		}
	}
	return 1;
}
Update_Armeria_Casa(playerid)
{
	if(ACCOUNT_INFO[playerid][ac_ID]== 0) return 1;
	SelectTextDraw(playerid,0xB00000FF);
	ABRIO_NEVERA[playerid]=true;
	new query[256],DBResult:Result;
	for(new a=0; a < 29; a++) TextDrawSetPreviewModel(Jugador_Textdraws[playerid][textdraw_armeria][a], 18670);
	for(new i=2; i < 14; i++) TO_X_VENTARIO[playerid][ ID ][ i ] = INVALID_ID;
	for(new i=15;i < 27; i++) TO_INVENTARIO_X[playerid][ ID ][ i ] = INVALID_ID;
	//Inventario
    format(query,sizeof(query),"SELECT * FROM INVENTARIO WHERE PLAYER = '%d';",ACCOUNT_INFO[playerid][ac_ID]);
    Result = db_query(Database,query);
    new empeza=1;
    for(new i; i < db_num_rows(Result); i++)
    {
 		empeza++;
 		TO_X_VENTARIO[playerid][TIPO][empeza] = db_get_field_assoc_int(Result, "TIPO");
	    TO_X_VENTARIO[playerid][ID][empeza] = db_get_field_assoc_int(Result, "ID");
	    TO_X_VENTARIO[playerid][STATUS][empeza] = db_get_field_assoc_int(Result, "ESTADO");
	    TO_X_VENTARIO[playerid][VALID][ empeza ] = true;
	    TextDrawSetPreviewModel(Jugador_Textdraws[playerid][textdraw_armeria][empeza], INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][empeza] ][OBJETO]);
	    db_next_row(Result);
    }
    db_free_result(Result);
 	//Nevera
    format(query,sizeof(query),"SELECT * FROM ESTANTERIA_CASA WHERE CASAID = '%d';",ENCASAVIP[playerid]);
    Result = db_query(_DB_,query);
    empeza=14;
    for(new i; i < db_num_rows(Result); i++)
    {
    	empeza++;
	    TO_INVENTARIO_X[playerid][TIPO][empeza] = db_get_field_assoc_int(Result, "ITEM");
	    TO_INVENTARIO_X[playerid][ID][empeza] = db_get_field_assoc_int(Result, "ID");
	    TO_INVENTARIO_X[playerid][STATUS][empeza] = db_get_field_assoc_int(Result, "ESTADO");
	    TO_INVENTARIO_X[playerid][VALID][ empeza ] = true;
	    TextDrawSetPreviewModel(Jugador_Textdraws[playerid][textdraw_armeria][empeza], INVENTARIOPLAYER[ TO_INVENTARIO_X[playerid][TIPO][empeza] ][OBJETO]);
	    db_next_row(Result);
    }
    db_free_result(Result);
    PLAYER_TEMP[playerid][ABRIO_ARMERIA] = true;
	for(new i=0; i < 29 ; i ++) TextDrawShowForPlayer(playerid,Jugador_Textdraws[playerid][textdraw_armeria][i]);
	return 1;
}
Hide_Armeria_Casa(playerid)
{
	CancelSelectTextDraw(playerid);
	PLAYER_TEMP[playerid][ABRIO_ARMERIA] = false;
	for(new i=0; i < 29 ; i ++) TextDrawHideForPlayer(playerid,Jugador_Textdraws[playerid][textdraw_armeria][i]);
	return 1;
}

Send_Estanteria_To_Inventario(playerid, idd)
{
	if(GetCountInventary(playerid) >= Max_Slots_For_Invetary) return MensajesAyuda(playerid,"Inventario lleno");
	new DB_Query[256];
	format(DB_Query,sizeof(DB_Query),"INSERT INTO `INVENTARIO` (`ID`,`PLAYER`,`TIPO`,`ESTADO`) VALUES ('%d','%d','%d','%d')",
	TO_INVENTARIO_X[playerid][ID][ idd ],
	ACCOUNT_INFO[playerid][ac_ID],
	TO_INVENTARIO_X[playerid][TIPO][ idd ],
	TO_INVENTARIO_X[playerid][STATUS][ idd ]);
	db_query(Database,DB_Query);
	new action[84];
	format(action, sizeof action, "saca de la estanteria '%s' y lo guarda en su inventario *",INVENTARIOPLAYER[ TO_INVENTARIO_X[playerid][TIPO][ idd ] ][ NOMBRE ]);
	Auto_SendPlayerAction(playerid, action);

	Detele_Estanteria_Casa(ENCASAVIP[playerid]);
	format(DB_Query,sizeof(DB_Query),"DELETE FROM ESTANTERIA_CASA WHERE ID='%d';",TO_INVENTARIO_X[playerid][ID][ idd ]);
	db_query(_DB_, DB_Query);
	for(new a=0; a < 29; a++) TextDrawSetPreviewModel(Jugador_Textdraws[playerid][textdraw_armario][a], 18670);

	Update_Estanteria_Casa(ENCASAVIP[playerid]);

	new Float:Post[3];
	GetPlayerPos(playerid, Post[0],Post[1],Post[2]);
	SetPlayerPos(playerid, Post[0],Post[1],Post[2]+0.5);
	Update_Armeria_Casa(playerid);
	return 1;
}
Send_Inventario_To_Estanteria(playerid, idd)
{
	if(GetItemsFromEstanteriaCasa(ENCASAVIP[playerid]) >= 12 ) return MensajesAyuda(playerid,"Estanteria llena");
	Detele_Estanteria_Casa(ENCASAVIP[playerid]);
	new DB_Query[256];
	format(DB_Query,sizeof(DB_Query),"INSERT INTO `ESTANTERIA_CASA` (`ID`,`CasaID`,`ITEM`,`ESTADO`) VALUES ('%d','%d','%d','%d')",
	TO_X_VENTARIO[playerid][ID][ idd ],
	ENCASAVIP[playerid],
	TO_X_VENTARIO[playerid][TIPO][ idd ],
	TO_X_VENTARIO[playerid][STATUS][ idd ]);
	db_query(_DB_,DB_Query);

	new action[84];
	format(action, sizeof action, "guarda %s en la estanteria *",INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][ idd ] ][ NOMBRE ]);
	Auto_SendPlayerAction(playerid, action);

	format(DB_Query,sizeof(DB_Query),"DELETE FROM INVENTARIO WHERE ID='%d';",TO_X_VENTARIO[playerid][ID][ idd ]);
	db_query(Database, DB_Query);
	for(new a=0; a < 29; a++) TextDrawSetPreviewModel(Jugador_Textdraws[playerid][textdraw_armario][a], 18670);

	Update_Estanteria_Casa(ENCASAVIP[playerid]);

	new Float:Post[3];
	GetPlayerPos(playerid, Post[0],Post[1],Post[2]);
	SetPlayerPos(playerid, Post[0],Post[1],Post[2]+0.5);
	Update_Armeria_Casa(playerid);
	return 1;
}
Detele_Estanteria_Casa(id)
{
	new DB_Query[200],DBResult:Result;
	format(DB_Query,sizeof(DB_Query),"SELECT * FROM ESTANTERIA_CASA WHERE CasaID='%d';",id);
	Result = db_query(_DB_, DB_Query);
	new empeza=0;
	for(new a=0;a<db_num_rows(Result);a++)
	{
		empeza++;
		DestroyDynamicObject(ESTANTERIA_CASA[empeza][ id ][OBJETO]);
		db_next_row(Result);
	}
	db_free_result(Result);
	return 1;
}
Update_Estanteria_Casa(id)
{
	new DB_Query[200],DBResult:Result;
	format(DB_Query,sizeof(DB_Query),"SELECT * FROM ESTANTERIA_CASA WHERE CasaID='%d';",id);
	Result = db_query(_DB_, DB_Query);
	new empeza=0,itemda_;
	for(new a=0;a<db_num_rows(Result);a++)
	{
		empeza++;
		DestroyDynamicObject(ESTANTERIA_CASA[empeza][ id ][OBJETO]);
		itemda_ = db_get_field_assoc_int(Result,"ITEM");
		switch(CASAVIP[id][INTERIOR])
		{
			case 1:
			{
				switch(empeza)
				{
					case 1: ESTANTERIA_CASA[empeza][ id ][OBJETO] = CreateDynamicObject(INVENTARIOPLAYER[ itemda_ ][OBJETO],1249.06824,231.34100,599.65100,GetRotX_EstanteriaCasa(itemda_),GetRotY_EstanteriaCasa(itemda_),GetRotZ_EstanteriaCasa(itemda_),id);
					case 2: ESTANTERIA_CASA[empeza][ id ][OBJETO] = CreateDynamicObject(INVENTARIOPLAYER[ itemda_ ][OBJETO],1248.28076, 231.29860, 599.65100,GetRotX_EstanteriaCasa(itemda_), GetRotY_EstanteriaCasa(itemda_),GetRotZ_EstanteriaCasa(itemda_),id);
					case 3: ESTANTERIA_CASA[empeza][ id ][OBJETO] = CreateDynamicObject(INVENTARIOPLAYER[ itemda_ ][OBJETO],1249.0682, 231.3410, 599.3090,GetRotX_EstanteriaCasa(itemda_), GetRotY_EstanteriaCasa(itemda_),GetRotZ_EstanteriaCasa(itemda_),id);
					case 4: ESTANTERIA_CASA[empeza][ id ][OBJETO] = CreateDynamicObject(INVENTARIOPLAYER[ itemda_ ][OBJETO],1248.2808, 231.2986, 599.3085,GetRotX_EstanteriaCasa(itemda_),GetRotY_EstanteriaCasa(itemda_),GetRotZ_EstanteriaCasa(itemda_),id);
					case 5: ESTANTERIA_CASA[empeza][ id ][OBJETO] = CreateDynamicObject(INVENTARIOPLAYER[ itemda_ ][OBJETO],1249.0682, 231.3410, 598.9490,GetRotX_EstanteriaCasa(itemda_),GetRotY_EstanteriaCasa(itemda_),GetRotZ_EstanteriaCasa(itemda_),id);
					case 6: ESTANTERIA_CASA[empeza][ id ][OBJETO] = CreateDynamicObject(INVENTARIOPLAYER[ itemda_ ][OBJETO],1248.2808, 231.2986, 598.9685,GetRotX_EstanteriaCasa(itemda_),GetRotY_EstanteriaCasa(itemda_),GetRotZ_EstanteriaCasa(itemda_),id);
					case 7: ESTANTERIA_CASA[empeza][ id ][OBJETO] = CreateDynamicObject(INVENTARIOPLAYER[ itemda_ ][OBJETO],1249.0682, 231.3410, 598.5890,GetRotX_EstanteriaCasa(itemda_),GetRotY_EstanteriaCasa(itemda_),GetRotZ_EstanteriaCasa(itemda_),id);
					case 8: ESTANTERIA_CASA[empeza][ id ][OBJETO] = CreateDynamicObject(INVENTARIOPLAYER[ itemda_ ][OBJETO],1248.2808, 231.2986, 598.6085,GetRotX_EstanteriaCasa(itemda_),GetRotY_EstanteriaCasa(itemda_),GetRotZ_EstanteriaCasa(itemda_),id);
					case 9: ESTANTERIA_CASA[empeza][ id ][OBJETO] = CreateDynamicObject(INVENTARIOPLAYER[ itemda_ ][OBJETO],1249.0682, 231.3410, 598.2490,GetRotX_EstanteriaCasa(itemda_),GetRotY_EstanteriaCasa(itemda_),GetRotZ_EstanteriaCasa(itemda_),id);
					case 10: ESTANTERIA_CASA[empeza][ id ][OBJETO] = CreateDynamicObject(INVENTARIOPLAYER[ itemda_ ][OBJETO],1248.2808, 231.2986, 598.2685,GetRotX_EstanteriaCasa(itemda_),GetRotY_EstanteriaCasa(itemda_),GetRotZ_EstanteriaCasa(itemda_),id);
					case 11: ESTANTERIA_CASA[empeza][ id ][OBJETO] = CreateDynamicObject(INVENTARIOPLAYER[ itemda_ ][OBJETO],1249.0682, 231.3410, 597.8890,GetRotX_EstanteriaCasa(itemda_),GetRotY_EstanteriaCasa(itemda_),GetRotZ_EstanteriaCasa(itemda_),id);
					case 12: ESTANTERIA_CASA[empeza][ id ][OBJETO] = CreateDynamicObject(INVENTARIOPLAYER[ itemda_ ][OBJETO],1248.2808, 231.2986, 597.9085,GetRotX_EstanteriaCasa(itemda_),GetRotY_EstanteriaCasa(itemda_),GetRotZ_EstanteriaCasa(itemda_),id);
				}
			}
			case 2:
			{
				switch(empeza)
				{
					case 1: ESTANTERIA_CASA[empeza][ id ][OBJETO] = CreateDynamicObject(INVENTARIOPLAYER[ itemda_ ][OBJETO],1890.0254, -26.3156, 640.4746,GetRotX_EstanteriaCasa(itemda_),GetRotY_EstanteriaCasa(itemda_),GetRotZ_EstanteriaCasa(itemda_),id);
					case 2: ESTANTERIA_CASA[empeza][ id ][OBJETO] = CreateDynamicObject(INVENTARIOPLAYER[ itemda_ ][OBJETO],1889.1639, -26.3347, 640.4746,GetRotX_EstanteriaCasa(itemda_), GetRotY_EstanteriaCasa(itemda_),GetRotZ_EstanteriaCasa(itemda_),id);
					case 3: ESTANTERIA_CASA[empeza][ id ][OBJETO] = CreateDynamicObject(INVENTARIOPLAYER[ itemda_ ][OBJETO],1890.0254, -26.3156, 640.1346,GetRotX_EstanteriaCasa(itemda_), GetRotY_EstanteriaCasa(itemda_),GetRotZ_EstanteriaCasa(itemda_),id);
					case 4: ESTANTERIA_CASA[empeza][ id ][OBJETO] = CreateDynamicObject(INVENTARIOPLAYER[ itemda_ ][OBJETO],1889.1682, -26.3152, 640.1546,GetRotX_EstanteriaCasa(itemda_),GetRotY_EstanteriaCasa(itemda_),GetRotZ_EstanteriaCasa(itemda_),id);
					case 5: ESTANTERIA_CASA[empeza][ id ][OBJETO] = CreateDynamicObject(INVENTARIOPLAYER[ itemda_ ][OBJETO],1890.0254, -26.3156, 639.7746,GetRotX_EstanteriaCasa(itemda_),GetRotY_EstanteriaCasa(itemda_),GetRotZ_EstanteriaCasa(itemda_),id);
					case 6: ESTANTERIA_CASA[empeza][ id ][OBJETO] = CreateDynamicObject(INVENTARIOPLAYER[ itemda_ ][OBJETO],1889.1682, -26.3152, 639.7946,GetRotX_EstanteriaCasa(itemda_),GetRotY_EstanteriaCasa(itemda_),GetRotZ_EstanteriaCasa(itemda_),id);
					case 7: ESTANTERIA_CASA[empeza][ id ][OBJETO] = CreateDynamicObject(INVENTARIOPLAYER[ itemda_ ][OBJETO],1890.0254, -26.3156, 639.4346,GetRotX_EstanteriaCasa(itemda_),GetRotY_EstanteriaCasa(itemda_),GetRotZ_EstanteriaCasa(itemda_),id);
					case 8: ESTANTERIA_CASA[empeza][ id ][OBJETO] = CreateDynamicObject(INVENTARIOPLAYER[ itemda_ ][OBJETO],1889.1682, -26.3152, 639.4346,GetRotX_EstanteriaCasa(itemda_),GetRotY_EstanteriaCasa(itemda_),GetRotZ_EstanteriaCasa(itemda_),id);
					case 9: ESTANTERIA_CASA[empeza][ id ][OBJETO] = CreateDynamicObject(INVENTARIOPLAYER[ itemda_ ][OBJETO],1890.0254, -26.3156, 639.0746,GetRotX_EstanteriaCasa(itemda_),GetRotY_EstanteriaCasa(itemda_),GetRotZ_EstanteriaCasa(itemda_),id);
					case 10: ESTANTERIA_CASA[empeza][ id ][OBJETO] = CreateDynamicObject(INVENTARIOPLAYER[ itemda_ ][OBJETO],1889.1682, -26.3152, 639.0946,GetRotX_EstanteriaCasa(itemda_),GetRotY_EstanteriaCasa(itemda_),GetRotZ_EstanteriaCasa(itemda_),id);
					case 11: ESTANTERIA_CASA[empeza][ id ][OBJETO] = CreateDynamicObject(INVENTARIOPLAYER[ itemda_ ][OBJETO],1890.0254, -26.3156, 638.7146,GetRotX_EstanteriaCasa(itemda_),GetRotY_EstanteriaCasa(itemda_),GetRotZ_EstanteriaCasa(itemda_),id);
					case 12: ESTANTERIA_CASA[empeza][ id ][OBJETO] = CreateDynamicObject(INVENTARIOPLAYER[ itemda_ ][OBJETO],1889.1682, -26.3152, 638.7346,GetRotX_EstanteriaCasa(itemda_),GetRotY_EstanteriaCasa(itemda_),GetRotZ_EstanteriaCasa(itemda_),id);
				}
			}
		}

		db_next_row(Result);
	}
	db_free_result(Result);
	return 1;
}
ManageArmarioCasaVIP(playerid)
{
	if(ENCASAVIP[playerid] != INVALID_EMPRESA_ID)
	{
		if((CASAVIP[ ENCASAVIP[playerid] ][CasaDuenoID] == ACCOUNT_INFO[playerid][ac_ID]) || (GetKeysFromThisHouseVip(playerid,ENCASAVIP[playerid]) == 1))
		{	
			if(Equiped_Inventary[playerid][VALID_EQUIPED] == true) return MensajesAyuda(playerid,"Guarda lo que tienes equipado");
			for(new a=0; a < 29; a++) TextDrawSetPreviewModel(Jugador_Textdraws[playerid][textdraw_armario][a], 18670);
			Update_Armario_CasaVip(playerid);
		}
		else
		{
			format(string2,sizeof(string2),"Pidele las llaves a ~y~%s~w~ para que te deje ver su armario",GetNameCuentaID(CASAVIP[ENCASAVIP[playerid]][CasaDuenoID]));
			MensajeAyuda_4(playerid,string2);
		}
	}
	return 1;
}
Update_Armario_CasaVip(playerid)
{
	if(ACCOUNT_INFO[playerid][ac_ID]== 0) return 1;
	SelectTextDraw(playerid,0xB00000FF);
	ABRIO_NEVERA[playerid]=true;
	new query[256],DBResult:Result;

	for(new i=2; i < 14; i++) TO_X_VENTARIO[playerid][ ID ][ i ] = INVALID_ID;
	for(new i=15;i < 27; i++) TO_INVENTARIO_X[playerid][ ID ][ i ] = INVALID_ID;
	//Inventario
    format(query,sizeof(query),"SELECT * FROM INVENTARIO WHERE PLAYER = '%d';",ACCOUNT_INFO[playerid][ac_ID]);
    Result = db_query(Database,query);
    new empeza=1;
    for(new i; i < db_num_rows(Result); i++)
    {
 		empeza++;
 		TO_X_VENTARIO[playerid][TIPO][empeza] = db_get_field_assoc_int(Result, "TIPO");
	    TO_X_VENTARIO[playerid][ID][empeza] = db_get_field_assoc_int(Result, "ID");
	    TO_X_VENTARIO[playerid][STATUS][empeza] = db_get_field_assoc_int(Result, "ESTADO");
	    TO_X_VENTARIO[playerid][VALID][ empeza ] = true;
	    TextDrawSetPreviewModel(Jugador_Textdraws[playerid][textdraw_armario][empeza], INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][empeza] ][OBJETO]);
	    db_next_row(Result);
    }
    db_free_result(Result);
 	//Nevera
    format(query,sizeof(query),"SELECT * FROM ARMARIO_CASA WHERE CASAID = '%d';",ENCASAVIP[playerid]);
    Result = db_query(_DB_,query);
    empeza=14;
    for(new i; i < db_num_rows(Result); i++)
    {
    	empeza++;
	    TO_INVENTARIO_X[playerid][TIPO][empeza] = db_get_field_assoc_int(Result, "ITEM");
	    TO_INVENTARIO_X[playerid][ID][empeza] = db_get_field_assoc_int(Result, "ID");
	    TO_INVENTARIO_X[playerid][STATUS][empeza] = db_get_field_assoc_int(Result, "USOS");
	    TO_INVENTARIO_X[playerid][VALID][ empeza ] = true;
	    TextDrawSetPreviewModel(Jugador_Textdraws[playerid][textdraw_armario][empeza], INVENTARIOPLAYER[ TO_INVENTARIO_X[playerid][TIPO][empeza] ][OBJETO]);
	    db_next_row(Result);
    }
    db_free_result(Result);
    PLAYER_TEMP[playerid][ABRIO_ARMARIO] = true;
	for(new i=0; i < 29 ; i ++) TextDrawShowForPlayer(playerid,Jugador_Textdraws[playerid][textdraw_armario][i]);
	return 1;
}
Hide_Armario_Casavip(playerid)
{
	PLAYER_TEMP[playerid][ABRIO_ARMARIO] = false;
	CancelSelectTextDraw(playerid);
	for(new i=0; i < 29 ; i ++) TextDrawHideForPlayer(playerid,Jugador_Textdraws[playerid][textdraw_armario][i]);
	return 1;
}


//
ManageNeveraCasaVIP(playerid)
{
	if(ENCASAVIP[playerid] != INVALID_EMPRESA_ID)
	{
		if((CASAVIP[ ENCASAVIP[playerid] ][CasaDuenoID] == ACCOUNT_INFO[playerid][ac_ID]) || (GetKeysFromThisHouseVip(playerid,ENCASAVIP[playerid]) == 1))
		{	
			if(Equiped_Inventary[playerid][VALID_EQUIPED] == true) return MensajesAyuda(playerid,"Guarda lo que tienes equipado");
			for(new a=0; a < 29; a++) TextDrawSetPreviewModel(Jugador_Textdraws[playerid][textdraw_nevera_casa][a], 18670);
			UpdateNevera_CasaVip(playerid);
		}
		else
		{
			format(string2,sizeof(string2),"Pidele las llaves a ~y~%s~w~ para que te deje ver su nevera",GetNameCuentaID(CASAVIP[ENCASAVIP[playerid]][CasaDuenoID]));
			MensajeAyuda_4(playerid,string2);
		}
	}
	return 1;
}
Hide_Nevera_Casa(playerid)
{
	PLAYER_TEMP[playerid][INTERCAMBIANDO_NEVERA] = false;
	CancelSelectTextDraw(playerid);
	for(new i=0; i < 29 ; i ++) TextDrawHideForPlayer(playerid,Jugador_Textdraws[playerid][textdraw_nevera_casa][i]);
	return 1;
}
UpdateNevera_CasaVip(playerid)
{
	if(ACCOUNT_INFO[playerid][ac_ID]== 0) return 1;

	SelectTextDraw(playerid,0xB00000FF);
	ABRIO_NEVERA[playerid]=true;
	new query[256],DBResult:Result;

	for(new i=2; i < 14; i++) TO_X_VENTARIO[playerid][ ID ][ i ] = INVALID_ID;
	for(new i=15;i < 27; i++) TO_INVENTARIO_X[playerid][ ID ][ i ] = INVALID_ID;
	//Inventario
    format(query,sizeof(query),"SELECT * FROM INVENTARIO WHERE PLAYER = '%d';",ACCOUNT_INFO[playerid][ac_ID]);
    Result = db_query(Database,query);
    new empeza=1;
    for(new i; i < db_num_rows(Result); i++)
    {
 		empeza++;
 		TO_X_VENTARIO[playerid][TIPO][empeza] = db_get_field_assoc_int(Result, "TIPO");
	    TO_X_VENTARIO[playerid][ID][empeza] = db_get_field_assoc_int(Result, "ID");
	    TO_X_VENTARIO[playerid][STATUS][empeza] = db_get_field_assoc_int(Result, "ESTADO");
	    TO_X_VENTARIO[playerid][VALID][ empeza ] = true;
	    TextDrawSetPreviewModel(Jugador_Textdraws[playerid][textdraw_nevera_casa][empeza], INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][empeza] ][OBJETO]);
	    db_next_row(Result);
    }
    db_free_result(Result);
 	//Nevera
    format(query,sizeof(query),"SELECT * FROM NEVERACASAVIP WHERE CASAID = '%d';",ENCASAVIP[playerid]);
    Result = db_query(_DB_,query);
    empeza=14;
    for(new i; i < db_num_rows(Result); i++)
    {
    	empeza++;

	    TO_INVENTARIO_X[playerid][TIPO][empeza] = db_get_field_assoc_int(Result, "ITEM");
	    TO_INVENTARIO_X[playerid][ID][empeza] = db_get_field_assoc_int(Result, "ID");
	    TO_INVENTARIO_X[playerid][STATUS][empeza] = db_get_field_assoc_int(Result, "USOS");
	    TO_INVENTARIO_X[playerid][VALID][ empeza ] = true;

	    TextDrawSetPreviewModel(Jugador_Textdraws[playerid][textdraw_nevera_casa][empeza], INVENTARIOPLAYER[ TO_INVENTARIO_X[playerid][TIPO][empeza] ][OBJETO]);
	    db_next_row(Result);
    }
    db_free_result(Result);

    PLAYER_TEMP[playerid][INTERCAMBIANDO_NEVERA] = true;
	for(new i=0; i < 29 ; i ++) TextDrawShowForPlayer(playerid,Jugador_Textdraws[playerid][textdraw_nevera_casa][i]);
	return 1;
}
Send_Inventario_To_Nevera(playerid, idd)
{
	if(GetCountItemsNevera_Casa(ENCASAVIP[playerid]) >= 12) return MensajesAyuda(playerid,"Nevera llena");
	new DB_Query[256];
	format(DB_Query,sizeof(DB_Query),"INSERT INTO `NEVERACASAVIP` (`ID`,`CASAID`,`ITEM`,`USOS`) VALUES ('%d','%d','%d','%d')",
	TO_X_VENTARIO[playerid][ID][ idd ],
	ENCASAVIP[playerid],
	TO_X_VENTARIO[playerid][TIPO][ idd ],
	TO_X_VENTARIO[playerid][STATUS][ idd ]);
	db_query(_DB_,DB_Query);


	format(DB_Query,sizeof(DB_Query),"DELETE FROM INVENTARIO WHERE ID='%d';",TO_X_VENTARIO[playerid][ID][ idd ]);
	db_query(Database, DB_Query);

	for(new a=0; a < 29; a++) TextDrawSetPreviewModel(Jugador_Textdraws[playerid][textdraw_nevera_casa][a], 18670);
	UpdateNevera_CasaVip(playerid);
	return 1;
}

Send_Nevera_To_Inventario(playerid, idd)
{
	if(GetCountInventary(playerid) >= Max_Slots_For_Invetary) return MensajesAyuda(playerid,"Inventario lleno");
	new DB_Query[256];
	format(DB_Query,sizeof(DB_Query),"INSERT INTO `INVENTARIO` (`ID`,`PLAYER`,`TIPO`,`ESTADO`) VALUES ('%d','%d','%d','%d')",
	TO_INVENTARIO_X[playerid][ID][ idd ],
	ACCOUNT_INFO[playerid][ac_ID],
	TO_INVENTARIO_X[playerid][TIPO][ idd ],
	TO_INVENTARIO_X[playerid][STATUS][ idd ]);
	db_query(Database,DB_Query);


	format(DB_Query,sizeof(DB_Query),"DELETE FROM NEVERACASAVIP WHERE ID='%d';",TO_INVENTARIO_X[playerid][ID][ idd ]);
	db_query(_DB_, DB_Query);

	for(new a=0; a < 29; a++) TextDrawSetPreviewModel(Jugador_Textdraws[playerid][textdraw_nevera_casa][a], 18670);
	UpdateNevera_CasaVip(playerid);
	return 1;
}
ObtenerItemsNeveraCasaVip(playerid)
{
	if(ACCOUNT_INFO[playerid][ac_ID]== 0) return 1;
	new string[2000],query[256],count,DBResult:Result,tipos_,estado_;
    format(query,sizeof(query),"SELECT * FROM INVENTARIO WHERE PLAYER = '%d' ",ACCOUNT_INFO[playerid][ac_ID]);
    Result = db_query(Database,query);

    count = db_num_rows(Result);
	if(count == 0) return MensajesAyuda(playerid,"No tienes ningun item en el inventario");

    for(new i; i < db_num_rows(Result); i++)
    {
    new text[256], labelid;
    //db_get_field_assoc(Result, "Nombre",text, 256);
    db_get_field_assoc(Result, "TIPO",query, 20); 		tipos_ = strval(query);
    db_get_field_assoc(Result, "ID",query, 20);			labelid = strval(query);
    db_get_field_assoc(Result, "ESTADO",query, 20);		estado_ = strval(query);

    format(text,sizeof(text),"%s",INVENTARIOPLAYER[ tipos_ ][NOMBRE]);
    for(new l = 0; l < strlen(text); ++l)
        if(text[l] == '{')
            if(text[l+7] == '}')
                strdel(text, l, l+8);

    if(strlen(text) > 37)
    {
        strdel(text, 34, strlen(text));
        strcat(text, "...", sizeof(text));
    }
    
    if(INVENTARIOPLAYER[ tipos_ ][TIPODECONSUMO] == BEBIDA_24_7 || INVENTARIOPLAYER[ tipos_ ][TIPODECONSUMO] == COMIDA_24_7)
    {
		if(!i)
	    format(string, sizeof(string), "{000000}ID %d {58FAF4}(%s) {FFFFFF}| Estado: {58FAF4}%d {FFFFFF}usos restantes\n", labelid,text,estado_);
	    else
	    format(string, sizeof(string), "%s\n{000000}ID %d {58FAF4}(%s) {FFFFFF}| Estado: {58FAF4}%d {FFFFFF}usos restantes\n", string, labelid,text,estado_);
	}

    db_next_row(Result);
    }
    ShowPlayerDialog(playerid, DIALOG_MANAGENEVERACASAVIP, DIALOG_STYLE_LIST,"ITEMS", string, "Seguir", "Cerrar");
    db_free_result(Result);
	return 1;
}

 
ItemsNeveraCasaVip(playerid, id)
{
	if(ACCOUNT_INFO[playerid][ac_ID]== 0) return 1;
	new string[2000],query[256],count,DBResult:Result,tipos_,estado_;
    format(query,sizeof(query),"SELECT * FROM NEVERACASAVIP WHERE CASAID = '%d' ",id);
    Result = db_query(_DB_,query);

    count = db_num_rows(Result);
	if(count == 0) return MensajesAyuda(playerid,"No hay items en la nevera");

    for(new i; i < db_num_rows(Result); i++)
    {
    new text[256], labelid;
    db_get_field_assoc(Result, "ITEM",query, 20); 		tipos_ = strval(query);
    db_get_field_assoc(Result, "ID",query, 20);			labelid = strval(query);
    db_get_field_assoc(Result, "USOS",query, 20);		estado_ = strval(query);

    format(text,sizeof(text),"%s",INVENTARIOPLAYER[ tipos_ ][NOMBRE]);
    for(new l = 0; l < strlen(text); ++l)
        if(text[l] == '{')
            if(text[l+7] == '}')
                strdel(text, l, l+8);
    if(strlen(text) > 37)
    {
        strdel(text, 34, strlen(text));
        strcat(text, "...", sizeof(text));
    }
	if(!i)
    format(string, sizeof(string), "{000000}ID %d {58FAF4}(%s) {FFFFFF}| Estado: {58FAF4}%d {FFFFFF}usos restantes\n", labelid,text,estado_);
    else
    format(string, sizeof(string), "%s\n{000000}ID %d {58FAF4}(%s) {FFFFFF}| Estado: {58FAF4}%d {FFFFFF}usos restantes\n", string, labelid,text,estado_);
    db_next_row(Result);
    }
    ShowPlayerDialog(playerid, DIALOG_SACARITEMSNEVERACASAVIP, DIALOG_STYLE_LIST,"ITEMS", string, "Seguir", "Cerrar");
	return 1;
}
ObtenerArmaListCasaVip(playerid, id)
{
	if(ACCOUNT_INFO[playerid][ac_ID]== 0) return 1;
	if(ENCASAVIP[playerid]== -1) return 1;

	new string[2000],count,query[256],weapname[50],DBResult:Result,arma_,municion_;
    format(query,sizeof(query),"SELECT * FROM ARMASCASAVIP WHERE CasaID = '%d' ",id);
    Result = db_query(_DB_,query);
	count = db_num_rows(Result);
	if(count == 0) return MensajesAyuda(playerid,"No hay armas");
    for(new i; i < db_num_rows(Result); i++)
    {
    new text[256], id_;
    db_get_field_assoc(Result, "ID",query, 20);			id_ = strval(query);
    db_get_field_assoc(Result, "Arma",query, 20);		arma_ = strval(query);
    db_get_field_assoc(Result, "Municion",query, 20);	municion_ = strval(query);
    GetWeaponName(arma_, weapname, sizeof(weapname));
    format(text,sizeof(text),"%s",weapname);
    for(new l = 0; l < strlen(text); ++l)
        if(text[l] == '{')
            if(text[l+7] == '}')
                strdel(text, l, l+8);

    if(strlen(text) > 37)
    {
        strdel(text, 34, strlen(text));
        strcat(text, "...", sizeof(text));
    }

   	if(!i)
	format(string, sizeof(string), "{000000}ID %d {58FAF4}Arma: (%s) | Municion: %d\n", id_,text,municion_);
	else
	format(string, sizeof(string), "%s\n{000000}ID %d {58FAF4}Arma: (%s) | Municion: %d\n", string, id_,text,municion_);
   	

    db_next_row(Result);
    }

    ShowPlayerDialog(playerid, DIALOG_OBTENER_ARMA_CASAVIP, DIALOG_STYLE_LIST,"Armas:", string, "Seguir", "Cerrar");
    db_free_result(Result);
	return 1;
}
RemovePlayerWeapon(playerid, weapon)
{

	new DB_Query[200];
	format(DB_Query, sizeof DB_Query, "DELETE FROM `ITEM_EQUIPED` WHERE `ID` = '%d';",PLAYER_WEAPONS[playerid][ WEAPON_INFO[weapon][weapon_info_SLOT] ][player_weapon_DB_ID]);
	db_query(Database, DB_Query);

    new weapons[13], ammo[13];
    for(new i; i < 13; i++) GetPlayerWeaponData(playerid, i, weapons[i], ammo[i]);
    ResetPlayerWeaponsEx(playerid);
    for(new i; i < 13; i++)
    {
        if(weapons[i] == weapon) continue;
        GivePlayerWeaponEx(playerid, weapons[i], ammo[i]);
    }

    return 1;
}


ResetearCasaVip(id)
{
	if(!Iter_Contains(Casasvip, id)) return 0;
	CASAVIP[id][CasaDuenoID]=0;
	CASAVIP[id][ENVENTA]=0;
	CASAVIP[id][Lock] = 1;
	new label[256];
    switch(CASAVIP[id][ENVENTA])
    {
    	case 0:
    	{
    		switch(CASAVIP[id][TIPOMONEDA])
    		{
    			case 1: format(label, sizeof(label), "{FFFFFF}Casa en venta\n\nCosto: {FFFF00}%s ",number_format_thousand(CASAVIP[id][PRECIO]));
    			case 2: format(label, sizeof(label), "{FFFFFF}Casa en venta\n\nCosto: {FFFF00}%d {FFFFFF}(ZonCoins)",CASAVIP[id][PRECIO]);
    		}
    	}
    }
    UpdateDynamic3DTextLabelText(CASAVIP[id][CasaLabel], 0xFFFFFFFF, label);
	Streamer_SetIntData(STREAMER_TYPE_PICKUP, CASAVIP[id][CasaPickup], E_STREAMER_MODEL_ID, 1273);
	new DB_Query[256];
	format(DB_Query,sizeof(DB_Query),"UPDATE `CASASVIP` SET PLAYER = '0',CANDADO = '1', ENVENTA = '0' WHERE `ID` = '%d';",id);
	db_query(_DB_, DB_Query);

	format(DB_Query, sizeof DB_Query, "DELETE FROM `KEYSCASAVIP` WHERE `CASAIDKEY`='%d';",id);
	db_query(_DB_, DB_Query);

	format(DB_Query, sizeof DB_Query, "DELETE FROM `ARMASCASAVIP` WHERE `CasaID`='%d';",id);
	db_query(_DB_, DB_Query);

   	for(new i=0; i < 31; i++)
	{
		if(IsValidDynamicObject(OBJETOS_CASA[ id ][ i ][ID_OBJETO])) DestroyDynamicObject(OBJETOS_CASA[ id ][ i ][ID_OBJETO]);
	}


	format(DB_Query,sizeof(DB_Query),"DELETE FROM MAPEOSCASA WHERE CASAID ='%d';",id);
	db_query(DBCASA,DB_Query);

	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++) 					
	{
		if(i == INVALID_PLAYER_ID) return 1;
		if(!IsPlayerConnected(i)) return 1;
		if(ENCASAVIP[i] == id)
		{
			SetPlayerPosEx(i,CASAVIP[id][CasaX],CASAVIP[id][CasaY],CASAVIP[id][CasaZ],0,0,0,true);
			ENCASAVIP[i]=-1;
			SendClientMessage(i,-1,"La casa fue vendida y todos fueron echados");
		}
	}
	return 1;
}

//Garaje funciones
SendToGarajePlayer(playerid, id)
{
	ENGARAJE[playerid] = id;
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		new vehicledid=GetPlayerVehicleID(playerid);
		switch(CASAVIP[id][GARAJETIPO])
		{
			case 1:
			{
				SetVehiclePosTRE(playerid,vehicledid,1394.5314,-1215.4014,202.5172,5.2096,id,0);
			}
			case 2:
			{
				SetVehiclePosTRE(playerid,vehicledid,1381.0541,-1193.8451,202.5224,0.86465,id,0);
			}
		}
		return 1;
	}
	if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	{
		switch(CASAVIP[id][GARAJETIPO])
		{
			case 1:SetPlayerPosEx(playerid,1394.2594,-1208.2676,202.5172,3.8518,  0, id, true);
			case 2:SetPlayerPosEx(playerid,1381.2119,-1188.8502,202.5224,359.2353,0, id, true);
		}
	}
	return 1;
}


/*funcion UpdateFecha()
{
	new str[60];
	format(str,sizeof(str),"%s",GetFechaServer());
	TextDrawSetString(Textdraws[TextdrawFechaGlobal],str);
	return 1;
}*/
HideBuyVehicleMenu(playerid)
{
	PlayerPlaySoundEx(playerid, 1054, 0.0, 0.0, 0.0);
	for(new j = 0; j != 25 ; j ++) PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][j]);
	CancelSelectTextDrawEx(playerid);
	PLAYER_TEMP[playerid][P_SHOPCAR]=false;
	return 1;
}

GetConcesonarioidCar(playerid)
{
	new id;
	switch(PLAYER_TEMP[playerid][P_CHOPCONCEID])
	{
		case 1: id = VehiclesConce[ PLAYER_TEMP[playerid][P_SHOPCARINDEX] ][0];
		case 2: id = VehiclesConce2[ PLAYER_TEMP[playerid][P_SHOPCARINDEX] ][0];
		case 3: id = VehiclesConce3[ PLAYER_TEMP[playerid][P_SHOPCARINDEX] ][0];
		case 4: id = VehiclesConce4[ PLAYER_TEMP[playerid][P_SHOPCARINDEX] ][0];
		case 5: id = VehiclesConce5[ PLAYER_TEMP[playerid][P_SHOPCARINDEX] ][0];
		case 6: id = VehiclesConce6[ PLAYER_TEMP[playerid][P_SHOPCARINDEX] ][0];
		case 7: id = VehiclesConce7[ PLAYER_TEMP[playerid][P_SHOPCARINDEX] ][0];
	}
	return id;
}
ShowBuyVehicle(playerid, conceid)
{
	PLAYER_TEMP[playerid][P_CHOPCONCEID] = conceid;
	new VehicleKAREN=GetConcesonarioidCar(playerid);


	for(new i = 0; i != 25 ; i ++) PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][i]);
	PlayerTextDrawSetPreviewModel(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][4], VehicleKAREN);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][4]);
	new veh_money = VEHICLE_INFO[VehicleKAREN - 400][vehicle_info_PRICE] / 5000;

	new str[256]; 

	/*Costo vehiculo*/
	if(VEHICLE_INFO[ VehicleKAREN - 400][vehicle_info_VIP_LEVEL])
	{
		if(VEHICLE_INFO[ VehicleKAREN - 400][vehicle_info_COINS])
		{
			format(str, 256, "~g~~h~~h~Costo:~n~~y~~h~%d ~w~ZonCoins~n~Vip: %d ~y~Requerido",VEHICLE_INFO[ VehicleKAREN - 400][vehicle_info_COINS],VEHICLE_INFO[ VehicleKAREN - 400][vehicle_info_VIP_LEVEL]);
		}
		else
		{
			format(str, 256, "~g~~h~~h~Costo:~n~~y~~h~%s ~w~~n~Vip: %d ~y~Requerido",number_format_thousand(VEHICLE_INFO[ VehicleKAREN - 400][vehicle_info_PRICE]),VEHICLE_INFO[ VehicleKAREN - 400][vehicle_info_VIP_LEVEL]);
		}
	}
	else
	{
		if(VEHICLE_INFO[ VehicleKAREN - 400][vehicle_info_COINS])
		{
			format(str, 256, "~g~~h~~h~Costo:~n~~y~~h~%d ~w~ZonCoins",VEHICLE_INFO[ VehicleKAREN - 400][vehicle_info_COINS]);
		}
		else
		{
			format(str, 256, "~g~~h~~h~Costo:~n~~y~~h~%s",number_format_thousand(VEHICLE_INFO[ VehicleKAREN - 400][vehicle_info_PRICE]));
		}
	}

	PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][6], str);
	/*Nombre vehiculo*/
	format(str, sizeof str, "%s",VehicleName[  VehicleKAREN  - 400]);
 	PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][7], str);
 	/*Maletero*/
	format(str, sizeof str, "Espacio maletero:~r~~h~ %d", VEHICLE_INFO[ VehicleKAREN - 400][vehicle_info_BOOT_SLOTS]);
 	PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][16], str);
 	/*Nivel necesario*/
	format(str, sizeof str, "Nivel necesario: ~y~~h~ %d", VEHICLE_INFO[ VehicleKAREN - 400][vehicle_info_LEVEL]);
 	PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][17], str);
  	/*Costo seguro*/
	format(str, sizeof str, "Costo seguro: ~g~~h~~h~ %s",number_format_thousand(veh_money));
 	PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][18], str);
	/* Gasolina */
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][24], floatadd(381.0, floatdiv( VEHICLE_INFO[ VehicleKAREN - 400][vehicle_info_MAX_GAS] , 2.857143)), 0.000000);
	PlayerTextDrawShow(playerid,PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][24]);
	/* ======== */
	/* Aceite */
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][23], floatadd(381.0, floatdiv( VEHICLE_INFO[ VehicleKAREN - 400][vehicle_info_MAX_ACEITE] , 2.857143)), 0.000000);
	PlayerTextDrawShow(playerid,PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][23]);
	/* ======== */
	/* Velocidad */
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][22], floatadd(381.0, floatdiv( VEHICLE_INFO[ VehicleKAREN - 400][vehicle_info_MAX_VEL] , 3.185715)), 0.000000);
	PlayerTextDrawShow(playerid,PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][22]);
	/* ======== */
	PLAYER_TEMP[playerid][P_SHOPCAR] = true;
	SelectTextDrawEx(playerid, 0xFF0000FF);
	SendClientMessage(playerid, -1,"Oprime 'ESC' para cerrar el dialogo de venta");
	return 1;
}
forward IsPlayerNearEmpresa(playerid);
public IsPlayerNearEmpresa(playerid)
{
	new Float:Distance;
	for(new prop; prop<MAX_EMPRESAS; prop++ )
	{
	    Distance = GetDDD(playerid,prop);
	    if(Distance < 1.0 )
	    {
	        return prop;
		}
	}
	return -1;
}


public Float:GetDDD(playerid,Property)
{
	new Float:x1,Float:y1,Float:z1;
	new Float:x2, Float:y2, Float:z2;
	GetPlayerPos(playerid,x1,y1,z1);
	x2 = NEGOCIO[Property][EmpresaX];
	y2 = NEGOCIO[Property][EmpresaY];
	z2 = NEGOCIO[Property][EmpresaZ];
	return floatsqroot(floatpower(floatabs(floatsub(x2,x1)),2)+floatpower(floatabs(floatsub(y2,y1)),2)+floatpower(floatabs(floatsub(z2,z1)),2));
}
GetNamePlayerFromDB(id)
{
	new nombre_[25],Query[60],DBResult:Result;
 	format(Query, sizeof(Query), "SELECT NAME FROM `CUENTA` WHERE `ID` = '%d';",id);
 	Result = db_query(Database, Query);
 	if(db_num_rows(Result))
  	{
 		db_get_field_assoc(Result, "NAME", nombre_, 25);
  	}
 	db_free_result(Result);
	return nombre_;
}
GetIDPlayerFromDB(id)
{
	new stado,Query[80],DBResult:Result;
 	format(Query, sizeof(Query), "SELECT PLAYERID FROM `CUENTA` WHERE `ID` = '%d';",id);
 	Result = db_query(Database, Query);
 	if(db_num_rows(Result))
  	{
 		stado = db_get_field_assoc_int(Result,"PLAYERID");
  	}
 	db_free_result(Result);
	return stado;
}
GetConectedPlayer(id)
{
	new stado,Query[60],DBResult:Result;
 	format(Query, sizeof(Query), "SELECT CONNECTED FROM `CUENTA` WHERE `ID` = '%d';",id);
 	Result = db_query(Database, Query);
 	if(db_num_rows(Result))
  	{
 		stado = db_get_field_assoc_int(Result,"CONNECTED");
  	}
 	db_free_result(Result);
	return stado;
}
GetNameFaccionID(id)
{
	new nombre_[25],Query[60],DBResult:Result;
 	format(Query, sizeof(Query), "SELECT NOMBRE FROM `FACCIONES` WHERE `ID` = '%d'",id);
 	Result = db_query(_DB_, Query);
 	if(db_num_rows(Result))
  	{
 		db_get_field_assoc(Result, "NOMBRE", nombre_, 25);
  	}
 	db_free_result(Result);
	return nombre_;
}
GetNameCrew(creide)
{
	new nombre_[67],Query[78],DBResult:Result;
 	format(Query, sizeof(Query), "SELECT NAME FROM `CREW` WHERE `ID` = '%d'",creide);
 	Result = db_query(Database, Query);
 	if(db_num_rows(Result))
  	{
 		db_get_field_assoc(Result, "NAME", nombre_, 67);
  	}
 	db_free_result(Result);
	return nombre_;
}
GetNameCuentaID(cuenta)
{
	new nombre_[25],Query[60],DBResult:Result;
 	format(Query, sizeof(Query), "SELECT NAME FROM `CUENTA` WHERE `ID` = '%d'",cuenta);
 	Result = db_query(Database, Query);
 	if(db_num_rows(Result))
  	{
 		db_get_field_assoc(Result, "NAME", nombre_, 25);
  	}
 	db_free_result(Result);
	return nombre_;
}

stock EsAdmin(playerid)
{
	return ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL];
}

stock ResetVars(playerid)
{

	for(new i = 1; i != sizeof(PLAYER_SKILLS[]); i ++)
	{
		switch(i)
		{
			case WORK_TAXI: PLAYER_SKILLS[playerid][WORK_TAXI] = 0;
			case WORK_TRUCK: PLAYER_SKILLS[playerid][WORK_TRUCK] = 0;
			case WORK_MECHANIC:PLAYER_SKILLS[playerid][WORK_MECHANIC] = 0;
			case WORK_HARVESTER:PLAYER_SKILLS[playerid][WORK_HARVESTER] = 0;
			case WORK_TRASH:PLAYER_SKILLS[playerid][WORK_TRASH] = 0;
			case WORK_LUMBERJACK:PLAYER_SKILLS[playerid][WORK_LUMBERJACK] = 0;
			case WORK_FARMER:PLAYER_SKILLS[playerid][WORK_FARMER] = 0;
			case WORK_POLICE:PLAYER_SKILLS[playerid][WORK_POLICE] = 0;
			case WORK_PIZZA:PLAYER_SKILLS[playerid][WORK_PIZZA] = 0;
			case WORK_MEDIC:PLAYER_SKILLS[playerid][WORK_MEDIC] = 0;
			case WORK_MINER:PLAYER_SKILLS[playerid][WORK_MINER] = 0;
			case WORK_PROTECTOR:PLAYER_SKILLS[playerid][WORK_PROTECTOR] = 0;
			case WORK_CARRIER:PLAYER_SKILLS[playerid][WORK_CARRIER] = 0;
			case WORK_PESCADOR:PLAYER_SKILLS[playerid][WORK_PESCADOR] = 0;
		}
	}
	CapturoZona[playerid]=0;
	PLAYER_TEMP[playerid][pt_EVENTO] = false;
	PLAYER_CREW[playerid][player_crew_ID]=0;
	PLAYER_TEMP[playerid][pt_OPTION_INV_BANDA] = 0;
	PLAYER_TEMP[playerid][pt_BANDA_ID] = 0;
	PLAYER_TEMP[playerid][pt_INV_BANDA] = false;
	PLAYER_TEMP[playerid][ABRIO_ARMERIA_DEPA] = false;
	PLAYER_TEMP[playerid][ABRIO_ARMARIO_DEPA] = false;
	PLAYER_TEMP[playerid][NEVERA_DEPA] = false;
	EDITAR_OBJETO_DEPA[playerid]=false;
	PLAYER_TEMP[playerid][pt_COMPRANDO_DPA] = false;
	PLAYER_TEMP[playerid][pt_TEXTURA_APARTAMENTO] = false;
	PLAYER_TEMP[playerid][pt_MENU_APARTAMeNTO] = false;
	PLAYER_TEMP[playerid][pt_BORRAR_MUEBLES]=false;
	ESTAEDITANDO_Objeto[playerid]=false;
	EDITAR_OBJETO[playerid]=false;
	PLAYER_TEMP[playerid][pt_COMPRAR_MUEBLES]=false;
	PLAYER_TEMP[playerid][pt_COMPRAR_MUEBLE_ID]=1;
	PLAYER_TEMP[playerid][pt_COMPRANDO_ROPA]=false;
	TIRAR_INVENTARIO[playerid]=false;
	PLAYER_TEMP[playerid][LOGUEADO] = false;
	PLAYER_TEMP[playerid][pt_MENU_CASA]=false;
	PLAYER_TEMP[playerid][pt_CHANGE_INTERIOR]=false;
	PLAYER_TEMP[playerid][pt_TEXTURA_ID]=1;
	PLAYER_TEMP[playerid][pt_VIENDO_TEXTURAS]=true;
	PLAYER_TEMP[playerid][ABRIO_ARMERIA] = false;
	PLAYER_TEMP[playerid][ABRIO_ARMARIO] = false;
	PLAYER_TEMP[playerid][ABRIENDO_BAUL] =false;
	PLAYER_TEMP[playerid][INTERCAMBIANDO_NEVERA] = false;
	ABRIO_NEVERA[playerid]=false;
	PUNTOS_BOTIQUIN[playerid]=0;
	PLAYER_TEMP[playerid][INDEX_ABAJO] = 0.0;
	PLAYER_TEMP[playerid][INDEX_ARRIBA] = 0.0;
	PLAYER_TEMP[playerid][INDEX_DERECHA] = 0.0;
	PLAYER_TEMP[playerid][INDEX_IZQUIERDA] = 0.0;
	Editando_prenda[playerid]=false;
	TagOn[playerid]=0;
	PLAYER_TEMP[playerid][pt_LLAMADO_TAXI] = false;
	PLAYER_CREW[playerid][player_crew_ID] = 0;
	PLAYER_TEMP[playerid][pt_PESCAR]=false;
	PLAYER_TEMP[playerid][pt_PUEDE_PESCAR]=false;
	ACCOUNT_INFO[playerid][ac_CARGOS]=0;
	ENCIENDO_MOTOR[playerid]=0;
	ENCENDIO_MOTOR[playerid] = false;
	TRUE_MOTOR[playerid] = false;
	REPOSTANDO_VEHICULO[playerid] = false;
	REPOSTANDO_VEHICULO_STATUS[playerid] = false;
	REPOSTANDO_VEHICULO_OPTION[playerid] = 0;
	Armed_Weapon[playerid] = -1;
	for(new i=0; i <= 40; i++) WEAPON_SKIN_ACTIVE[playerid][i] = false;
	PLAYER_CREW[playerid][player_crew_ID]=0;
	PLAYER_WORK_NIVEL[playerid][TRANSPORTISTA]=0;
	PLAYER_WORK_NIVEL[playerid][CAMIONERO]=0;
	PLAYER_WORK_NIVEL[playerid][MINERO]=0;
	PLAYER_WORK_NIVEL[playerid][LENADOR]=0;
	PLAYER_TEMP[playerid][Capturando_Grafiti]=false;
	MapearObjetoFaccion[playerid]=0;
	EditandoCasaFaccion[playerid]=false;
	EditandoCasaFuera[playerid]=false;
	InvitadoFaccion[playerid]=false;
	InvitoAFaccion[playerid]=-1;
	InvitadoPORFaccion[playerid]=-1;
	EditandoApartamento[playerid]=false;
	GuardaEspalda[playerid]=0;
	dineropedido[playerid]=0;
	ofertador[playerid]=0;
	ENAPARTAMENTO[playerid]=-1;
	ENCASAFACCION[playerid]=-1;
	ENCASAVIP[playerid]=-1;
	SanandoPlayer[playerid]=false;
	InNegocio[playerid]=-1;
	ENGARAJE[playerid]=-1;
	EditandoRadarMake[playerid]=false;
	EditandoRadar[playerid]=false;
	TimerDejarPasar[playerid]=0;
	CHECKVEHICLE_RENT[playerid]=0;
	EditandoCasa[playerid]=false;
	PLAYER_TEMP[playerid][TIPOVENTACASA]=0;
	PLAYER_TEMP[playerid][CHANGE_TEXTURE]=0;
	Descansando[playerid]=false;
	PAGE[playerid]=0;
	PLAYER_TEMP[playerid][P_SHOPCAR] = false;
	SELLNEGOCIO[playerid]=-1;
	Saved_Invetary[playerid]=0;
	Equiped_Inventary[playerid][VALID_EQUIPED]=false;
	Equiped_Inventary[playerid][ESTADO]=-1;
	Equiped_Inventary[playerid][TYPE]=-1;
	IVENTARIOID[playerid]=-1;
	EscuchandoAlarma[playerid]=false;
	InNegocio[playerid] = INVALID_EMPRESA_ID;
	MensajeAyuda[playerid]=0;
	MENSAJE_AYUDA[playerid][0]=0;
	MENSAJE_AYUDA[playerid][1]=0;
	MENSAJE_AYUDA[playerid][2]=0;

	foreach(new i : Zones)
	{
		if(ZInfo[i][BANDA] == 0)
		{
			GangZoneShowForPlayer(playerid,ZInfo[i][_Zone], ZONE_COLOR);
		}
		else
		{
			new Query_[45],colorin,ccolour,DBResult:Resulta;
            format(Query_, sizeof Query_,"SELECT COLOR FROM ZONAS WHERE ID='%d';",ZInfo[i][ID]);
            Resulta = db_query(_DB_, Query_);
            if(db_num_rows(Resulta))
            {
            	colorin = db_get_field_assoc_int(Resulta, "COLOR");
            }
            new r, g, b, a;
			HexToRGBA(colorin, r, g, b, a);
			ccolour = RGBAToHex(r, g, b, 135);

			GangZoneShowForPlayer(playerid,ZInfo[i][_Zone], ccolour);
		}
	}
	return 1;
}
GetDayOfWeek()
{
    new year,month,day;
    getdate(year,month,day);
    static const DaysWeek[][24] = {
        "Lunes",        //       0
        "Martes",       //      1
        "Miercoles",    //      2
        "Jueves",       //      3
        "Viernes",      //      4
        "Sabado",       //      5
        "Domingo"       //      6
    };
    new
        d_[4],
        m_[10]
    ;

    d_[0] = (14-month) / 12, d_[2] = year - d_[0], d_[1] = month + (12*d_[0]) - 2;
    d_[3] = (day + d_[2] + (d_[2]/4) - (d_[2]/100) + (d_[2]/400) + (31*d_[1]) / 12) % 7;

    if(d_[3] == 0)
    {
        d_[3] = sizeof(DaysWeek) - 1;
    }
    else
    {
        d_[3] -= 1;
    }

    format(m_, sizeof(m_), "%s", DaysWeek[d_[3]]);
    return m_;
}

GetMes(mes)
{
	new mes_[25];
	switch(mes)
	{
	    case 0: format(mes_,sizeof(mes_),"enero");
	    case 1: format(mes_,sizeof(mes_),"enero");
	    case 2: format(mes_,sizeof(mes_),"febrero");
	    case 3: format(mes_,sizeof(mes_),"marzo");
	    case 4: format(mes_,sizeof(mes_),"abril");
	    case 5: format(mes_,sizeof(mes_),"mayo");
	    case 6: format(mes_,sizeof(mes_),"junio");
	    case 7: format(mes_,sizeof(mes_),"julio");
	    case 8: format(mes_,sizeof(mes_),"agosto");
	    case 9: format(mes_,sizeof(mes_),"septiembre");
	    case 10: format(mes_,sizeof(mes_),"octubre");
	    case 11: format(mes_,sizeof(mes_),"noviembre");
	    case 12: format(mes_,sizeof(mes_),"diciembre");
	}
	return mes_;
}
GetHora()
{
    new dia,mes, mes1[12],pmyam[12],horasxd,xdxdv[130], year, hourss,segundoss, minutes;
    gettime(hourss,minutes, segundoss);
    //new hora,minuto,segundo; gettime(hora,minuto,segundo);
    getdate(year,mes,dia);
    switch(mes)
    {
        case 1: mes1 = "enero";
        case 2: mes1 = "febrero";
        case 3: mes1 = "marzo";
        case 4: mes1 = "abril";
        case 5: mes1 = "mayo";
        case 6: mes1 = "junio";
        case 7: mes1 = "julio";
        case 8: mes1 = "agosto";
        case 9: mes1 = "septiembre";
        case 10: mes1 = "octubre";
        case 11: mes1 = "noviembre";
        case 12: mes1 = "diciembre";
    }

    switch(hourss)
    {
        case 1: horasxd = 1;
        case 2: horasxd = 2;
        case 3: horasxd = 3;
        case 4: horasxd = 4;
        case 5: horasxd = 5;
        case 6: horasxd = 6;
        case 7: horasxd = 7;
        case 8: horasxd = 8;
        case 9: horasxd = 9;
        case 10: horasxd = 10;
        case 11: horasxd = 11;
        case 12: horasxd = 12;
        case 13: horasxd = 1;
        case 14: horasxd = 2;
        case 15: horasxd = 3;
        case 16: horasxd = 4;
        case 17: horasxd = 5;
        case 18: horasxd = 6;
        case 19: horasxd = 7;
        case 20: horasxd = 8;
        case 21: horasxd = 9;
        case 22: horasxd = 10;
        case 23: horasxd = 11;
        case 00: horasxd = 12;
    }
    switch(hourss)
    {
        case 1: pmyam = "AM";
        case 2: pmyam = "AM";
        case 3: pmyam = "AM";
        case 4: pmyam = "AM";
        case 5: pmyam = "AM";
        case 6: pmyam = "AM";
        case 7: pmyam = "AM";
        case 8: pmyam = "AM";
        case 9: pmyam = "AM";
        case 10: pmyam = "AM";
        case 11: pmyam = "AM";
        case 12: pmyam = "PM";
        case 13: pmyam = "PM";
        case 14: pmyam = "PM";
        case 15: pmyam = "PM";
        case 16: pmyam = "PM";
        case 17: pmyam = "PM";
        case 18: pmyam = "PM";
        case 19: pmyam = "PM";
        case 20: pmyam = "PM";
        case 21: pmyam = "PM";
        case 22: pmyam = "PM";
        case 23: pmyam = "PM";
        case 00: pmyam = "PM";
    }
    format(xdxdv, 130, "%d:%d %s",horasxd,minutes,pmyam);
    return xdxdv;
}

stock GetDate()
{
	new ban_month, ban_days, ban_years, when[128];
	getdate(ban_years, ban_month, ban_days);
	format(when, 128, "%d de %s del %d", ban_days,GetMes(ban_month), ban_years);
	return when;
}

GetFecha()
{
	new fecha_[256];
	format(fecha_,sizeof(fecha_),"%s %s a las: %s",GetDayOfWeek(),GetDate(),GetHora());
	return fecha_;
}
stock GetFechaServer()
{
	new fecha_[256];
	format(fecha_,sizeof(fecha_),"%s %s",GetDayOfWeek(),GetDate());
	return fecha_;
}

stock TimeConvert(seconds)
{
	new tmp[16];
 	new minutes = floatround(seconds/60);
  	seconds -= minutes*60;
   	format(tmp, sizeof(tmp), "%d:%02d", minutes, seconds);
   	return tmp;
}

stock TimeConvertEx(sec, &days, &hours, &minutes, &seconds)
{
	days = floatround(sec / 86400);
	hours = floatround((sec - (days * 86400)) / 3600);
	minutes = floatround((sec - (days * 86400) - (hours * 3600)) / 60);
	seconds = sec % 60;
   	return 1;
}

ProxDetector(playerid, Float:radi, string[], col1, col2, col3, col4, col5, div = 0)
{
	new line1_str[165], line2_str[165], bool:line2_used;
	
	if(div)
	{
		format(line1_str, div + 1, "%s", string);
		if(strlen(string) > div)
		{
			format(line2_str, sizeof line2_str, " %s", string[div]);
			line2_used = true;
		}
	}
	else format(line1_str, sizeof line1_str, "%s", string);
	
	new Float:oldposx, Float:oldposy, Float:oldposz, current_vw = GetPlayerVirtualWorld(playerid), current_int = GetPlayerInterior(playerid);
	GetPlayerPos(playerid, oldposx, oldposy, oldposz);
	
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++) 					
	{
		if(!IsPlayerConnected(i)) continue;
		if(!PLAYER_TEMP[i][pt_USER_LOGGED]) continue;
		if(GetPlayerVirtualWorld(i) != current_vw) continue;
		if(GetPlayerInterior(i) != current_int) continue;
		
		if(IsPlayerInRangeOfPoint(i, radi/16, oldposx, oldposy, oldposz))
		{
			SendClientMessage(i, col1, line1_str);
			if(div && line2_used) SendClientMessage(i, col1, line2_str);
		}
		else if(IsPlayerInRangeOfPoint(i, radi/8, oldposx, oldposy, oldposz))
		{
			SendClientMessage(i, col2, line1_str);
			if(div && line2_used) SendClientMessage(i, col2, line2_str);
		}
		else if(IsPlayerInRangeOfPoint(i, radi/4, oldposx, oldposy, oldposz))
		{
			SendClientMessage(i, col3, line1_str);			
			if(div && line2_used) SendClientMessage(i, col3, line2_str);
		}
		else if(IsPlayerInRangeOfPoint(i, radi/2, oldposx, oldposy, oldposz))
		{
			SendClientMessage(i, col4, line1_str);	
			if(div && line2_used) SendClientMessage(i, col4, line2_str);
		}
		else if(IsPlayerInRangeOfPoint(i, radi, oldposx, oldposy, oldposz))
		{
			SendClientMessage(i, col5, line1_str);
			if(div && line2_used) SendClientMessage(i, col5, line2_str);
		}
	}
	return 1;
}

NearbyMessage(Float:pos_x, Float:pos_y, Float:pos_z, current_int, current_vw, Float:radi, col, string[])
{
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++) 					
	{
		if(!IsPlayerConnected(i)) continue;
		if(!PLAYER_TEMP[i][pt_USER_LOGGED]) continue;
		if(GetPlayerVirtualWorld(i) != current_vw) continue;
		if(GetPlayerInterior(i) != current_int) continue;
		
		if(IsPlayerInRangeOfPoint(i, radi, pos_x, pos_y, pos_z)) SendClientMessage(i, col, string);
	}
	return 1;
}

IsValidRPName(const string[])
{
    new regex:reg_exp = regex_new("[A-Z][a-z]+_[A-Z][a-z]{1,3}[A-Z]?[a-z]*"); 
    new result = regex_check(string, reg_exp); 
    regex_delete(reg_exp); 
    return result; 
}

StringContainsIP(const string[])
{
    new regex:reg_exp = regex_new("([0-9]{1,3}[\\.]){3}[0-9]{1,3}"), match_results:results, pos;
    new result = regex_search(string, reg_exp, results, pos);
    regex_delete(reg_exp); 
    return result; 
}

/*
IsValidName(name[])
{
	for(new c = 0; c < strlen(name); c++)
	{
	    switch(name[c])
	    {
	        case 'A' .. 'Z', 'a' .. 'z', '_': continue;
	        default: return false;
	    }
	}
	return true;
}
*/
KickEx(playerid, time = 0)
{
	PLAYER_TEMP[playerid][pt_KICKED] = true;
	if(!time) Kick(playerid);
	else
	{
		KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][0]);
		PLAYER_TEMP[playerid][pt_TIMERS][0] = SetTimerEx("KickPlayer", time, false, "i", playerid);
	}
	return 1;
}

forward KickPlayer(playerid);
public KickPlayer(playerid)
{
	return Kick(playerid);
}

SetRolePlayNames(playerid)
{
	if(isnull(PLAYER_TEMP[playerid][pt_NAME])) return 0;
	
	new name[24], bool:underscore;
	format(name, 24, "%s", PLAYER_TEMP[playerid][pt_NAME]);
	format(PLAYER_TEMP[playerid][pt_RP_NAME], 24, "%s", name);
	for(new i = 0; i < 24; i++) 
	{
		if(name[i] == '_')
		{
			PLAYER_TEMP[playerid][pt_RP_NAME][i] = ' ';
			if(!underscore)
			{
				strmid(PLAYER_TEMP[playerid][pt_FIRST_NAME], name, 0, i);
				strmid(PLAYER_TEMP[playerid][pt_SUB_NAME], name, i + 1, 24);
				underscore = true;
			}
		}
	}
	return 1;
}

LoadCharacterData(playerid)
{
	if(ACCOUNT_INFO[playerid][ac_ID] == 0) return 0;
	
	new DBResult:Result, DB_Query[80];
	format(DB_Query, sizeof(DB_Query), "SELECT * FROM `PERSONAJE` WHERE `ID_USER` = '%d';", ACCOUNT_INFO[playerid][ac_ID]);
	Result = db_query(Database, DB_Query);
	
	if(db_num_rows(Result))
	{
		CHARACTER_INFO[playerid][ch_SKIN] = db_get_field_assoc_int(Result, "SKIN");
		CHARACTER_INFO[playerid][ch_CASH] = db_get_field_assoc_int(Result, "CASH");
		CHARACTER_INFO[playerid][ch_FIGHT_STYLE] = db_get_field_assoc_int(Result, "FIGHT_STYLE");
		CHARACTER_INFO[playerid][ch_HEALTH] = db_get_field_assoc_float(Result, "HEALTH");
		CHARACTER_INFO[playerid][ch_ARMOUR] = db_get_field_assoc_float(Result, "ARMOUR");
		CHARACTER_INFO[playerid][ch_SEX] = db_get_field_assoc_int(Result, "SEX");
		CHARACTER_INFO[playerid][ch_HUNGRY] = db_get_field_assoc_float(Result, "HUNGRY");
		CHARACTER_INFO[playerid][ch_THIRST] = db_get_field_assoc_float(Result, "THIRST");
		CHARACTER_INFO[playerid][CANSANCIO] = db_get_field_assoc_float(Result, "CANSANCIO");
		CHARACTER_INFO[playerid][ch_BLACK_MARKET_LEVEL] = db_get_field_assoc_int(Result, "BLACK_MARKET_LEVEL");
		CHARACTER_INFO[playerid][ch_POLICE_JAIL_TIME] = db_get_field_assoc_int(Result, "POLICE_JAIL_TIME");
		CHARACTER_INFO[playerid][ch_POLICE_JAIL_ID] = db_get_field_assoc_int(Result, "POLICE_JAIL_ID");
	}
	db_free_result(Result);
	return 1;
}

LoadPlayerBankAccountData(playerid)
{
	if(ACCOUNT_INFO[playerid][ac_ID] == 0) return 0;
	
	new DBResult:Result, DB_Query[85];
	format(DB_Query, sizeof(DB_Query), "SELECT * FROM `BANK_ACCOUNTS` WHERE `ID_USER` = '%d';", ACCOUNT_INFO[playerid][ac_ID]);
	Result = db_query(Database, DB_Query);
	
	if(db_num_rows(Result))
	{
		BANK_ACCOUNT[playerid][bank_account_ID] = db_get_field_assoc_int(Result, "ID_ACCOUNT");
		BANK_ACCOUNT[playerid][bank_account_BALANCE] = db_get_field_assoc_int(Result, "BALANCE");
	}
	db_free_result(Result);
	return 1;
}

LoadPlayerObjectsData(playerid)
{
	if(ACCOUNT_INFO[playerid][ac_ID] == 0) return 0;
	
	new DBResult:Result, DB_Query[85];
	format(DB_Query, sizeof(DB_Query), "SELECT * FROM `PLAYER_OBJECT` WHERE `ID_USER` = '%d';", ACCOUNT_INFO[playerid][ac_ID]);
	Result = db_query(Database, DB_Query);
	
	if(db_num_rows(Result))
	{
		PLAYER_OBJECT[playerid][po_GPS] = db_get_field_assoc_int(Result, "GPS");
		PLAYER_OBJECT[playerid][po_MP3] = db_get_field_assoc_int(Result, "MP3");
		PLAYER_OBJECT[playerid][po_PHONE_RESOLVER] = db_get_field_assoc_int(Result, "PHONE_RESOLVER");
	}
	db_free_result(Result);
	return 1;
}

LoadPlayerPhoneData(playerid)
{
	if(ACCOUNT_INFO[playerid][ac_ID] == 0) return 0;
	
	new DBResult:Result, DB_Query[100];
	format(DB_Query, sizeof(DB_Query), "SELECT * FROM `PHONE` WHERE `ID_USER` = '%d';", ACCOUNT_INFO[playerid][ac_ID]);
	Result = db_query(Database, DB_Query);
	
	if(db_num_rows(Result))
	{
		PLAYER_PHONE[playerid][player_phone_VALID] = true;
		PLAYER_PHONE[playerid][player_phone_NUMBER] = db_get_field_assoc_int(Result, "PHONE_NUMBER");
		PLAYER_PHONE[playerid][player_phone_STATE] = db_get_field_assoc_int(Result, "PHONE_STATE");
		PLAYER_PHONE[playerid][player_phone_VISIBLE_NUMBER] = db_get_field_assoc_int(Result, "VISIBLE_NUMBER");
	}
	db_free_result(Result);
	
	
	DB_Query[0] = EOS;
	new DBResult:Result_phonebook;
	format(DB_Query, sizeof(DB_Query), "SELECT * FROM `PHONE_BOOK` WHERE `PHONE_ID` = '%d' LIMIT %d;", PLAYER_PHONE[playerid][player_phone_NUMBER], MAX_PHONE_CONTACTS);
	Result_phonebook = db_query(Database, DB_Query);
	
	new index;
	for(new i; i < db_num_rows(Result_phonebook); i++ )
	{
		if(index >= MAX_PHONE_CONTACTS)
		{
			printf("---> Límite superado en array 'PB' al intentar cargar de la base de datos.");
			break;
		}
		
		PLAYER_PHONE_BOOK[playerid][index][phone_book_contact_VALID] = true;
		
		PLAYER_PHONE_BOOK[playerid][index][phone_book_contact_ID] = db_get_field_assoc_int(Result_phonebook, "CONTACT_ID");
		db_get_field_assoc(Result_phonebook, "NAME", PLAYER_PHONE_BOOK[playerid][index][phone_book_contact_NAME], 24);
		PLAYER_PHONE_BOOK[playerid][index][phone_book_contact_PHONE_NUMBER] = db_get_field_assoc_int(Result_phonebook, "PHONE_NUMBER");
		
		index ++;
		db_next_row(Result_phonebook);
	}
	db_free_result(Result_phonebook);
	return 1;
}

RegisterNewPlayerPhone(playerid)
{
	if(ACCOUNT_INFO[playerid][ac_ID] == 0) return 0;
	
	new DB_Query[200];
	format(DB_Query, sizeof DB_Query,
	"\
		INSERT INTO `PHONE`\
		(\
			`PHONE_NUMBER`, `ID_USER`\
		)\
		VALUES\
		(\
			'%d', '%d'\
		);\
	",
		PLAYER_PHONE[playerid][player_phone_NUMBER], ACCOUNT_INFO[playerid][ac_ID]
	);
	db_query(Database, DB_Query);
	return 1;
}

RegisterNewPlayerPhoneBook(playerid, slot)
{
	new DBResult:Result, DB_Query[300];
	format(DB_Query, sizeof DB_Query,
	"\
		INSERT INTO `PHONE_BOOK`\
		(\
			`PHONE_ID`, `NAME`, `PHONE_NUMBER`\
		)\
		VALUES\
		(\
			'%d', '%q', '%d'\
		);\
		SELECT MAX(`CONTACT_ID`) FROM `PHONE_BOOK`;\
	",
		PLAYER_PHONE[playerid][player_phone_NUMBER], PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_NAME], PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_PHONE_NUMBER]
	);
	Result = db_query(Database, DB_Query);

	if(db_num_rows(Result)) PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_ID] = db_get_field_int(Result, 0);
	db_free_result(Result);
	return 1;
}

RegisterPhoneMessage(from, to, message[], offline = 0)
{
	new DB_Query[300];
	format(DB_Query, sizeof DB_Query,
	"\
		INSERT INTO `PHONE_MESSAGES`\
		(\
			`FROM`, `TO`, `MESSAGE`, `OFFLINE`\
		)\
		VALUES\
		(\
			'%d', '%d', '%q', '%d'\
		);\
	", from, to, message, offline);
	db_query(Database, DB_Query);
	return 1;
}


forward NoCallResponse(playerid);
public NoCallResponse(playerid)
{
	if(!PLAYER_TEMP[playerid][pt_PLAYER_IN_CALL]) return 0;
	if(PLAYER_TEMP[playerid][pt_PLAYER_PHONE_CALL_PLAYERID] == INVALID_PLAYER_ID) return 0;
	if(PLAYER_TEMP[playerid][pt_PLAYER_PHONE_CALL_STATE] != CALL_STATE_WAITING_RESPONSE) return 0;
	
	EndPhoneCall(playerid);
	return 1;
}

EndPhoneCall(playerid)
{
	if(!PLAYER_TEMP[playerid][pt_PLAYER_IN_CALL]) return 0;
	
	if(PLAYER_TEMP[playerid][pt_POLICE_CALL_NAME] || PLAYER_TEMP[playerid][pt_POLICE_CALL_DESCRIPTION])
	{
		PLAYER_TEMP[playerid][pt_PLAYER_IN_CALL] = false;
		PLAYER_TEMP[playerid][pt_POLICE_CALL_NAME] = false;
		PLAYER_TEMP[playerid][pt_POLICE_CALL_DESCRIPTION] = false;
		return 1;
	}
	
	if(PLAYER_TEMP[playerid][pt_PLAYER_PHONE_CALL_PLAYERID] == INVALID_PLAYER_ID) return 0;
	if(PLAYER_TEMP[playerid][pt_PLAYER_PHONE_CALL_STATE] == CALL_GAME_STATE_NONE) return 0;
	
	new to_playerid = PLAYER_TEMP[playerid][pt_PLAYER_PHONE_CALL_PLAYERID];
	switch(PLAYER_TEMP[playerid][pt_PLAYER_PHONE_CALL_STATE])
	{
		case CALL_STATE_WAITING_RESPONSE:
		{
			KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][6]);
			
			PLAYER_TEMP[to_playerid][pt_PLAYER_IN_CALL] = false;
			PLAYER_TEMP[to_playerid][pt_PLAYER_PHONE_CALL_STATE] = CALL_GAME_STATE_NONE;
			PLAYER_TEMP[to_playerid][pt_PLAYER_PHONE_CALL_PLAYERID] = INVALID_PLAYER_ID;
		}
		case CALL_STATE_INCOMING_CALL:
		{
			SendClientMessage(to_playerid, -1, "{00FF80}No respondieron el teléfono...");
			KillTimer(PLAYER_TEMP[to_playerid][pt_TIMERS][6]);
			
			PLAYER_TEMP[to_playerid][pt_PLAYER_IN_CALL] = false;
			PLAYER_TEMP[to_playerid][pt_PLAYER_PHONE_CALL_STATE] = CALL_GAME_STATE_NONE;
			PLAYER_TEMP[to_playerid][pt_PLAYER_PHONE_CALL_PLAYERID] = INVALID_PLAYER_ID;
		}
		case CALL_STATE_ESTABLISHED:
		{
			SendClientMessage(to_playerid, -1, "{f47d42}Llamada finalizada.");
			PLAYER_TEMP[to_playerid][pt_PLAYER_IN_CALL] = false;
			PLAYER_TEMP[to_playerid][pt_PLAYER_PHONE_CALL_STATE] = CALL_GAME_STATE_NONE;
			PLAYER_TEMP[to_playerid][pt_PLAYER_PHONE_CALL_PLAYERID] = INVALID_PLAYER_ID;
			
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
			SetPlayerSpecialAction(to_playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
		}
	}
	
	PLAYER_TEMP[playerid][pt_PLAYER_IN_CALL] = false;
	PLAYER_TEMP[playerid][pt_PLAYER_PHONE_CALL_STATE] = CALL_GAME_STATE_NONE;
	PLAYER_TEMP[playerid][pt_PLAYER_PHONE_CALL_PLAYERID] = INVALID_PLAYER_ID;
	return 1;
}

convertPhoneNumber(playerid, number)
{
	new f_string[24], bool:exists;
	for(new i = 0; i != MAX_PHONE_CONTACTS; i ++)
	{
		if(!PLAYER_PHONE_BOOK[playerid][i][phone_book_contact_VALID]) continue;
		if(number == PLAYER_PHONE_BOOK[playerid][i][phone_book_contact_PHONE_NUMBER])
		{
			exists = true;
			format(f_string, sizeof f_string, "%s", PLAYER_PHONE_BOOK[playerid][i][phone_book_contact_NAME]);
			break;
		}
	}

	if(!exists) format(f_string, sizeof f_string, "%d", number);
	return f_string;
}

GetEmptyPlayerPhoneBookSlot(playerid)
{
	for(new i = 0; i != MAX_PHONE_CONTACTS; i ++)
	{
		if(!PLAYER_PHONE_BOOK[playerid][i][phone_book_contact_VALID]) return i;
	}
	return -1;
}

RegisterNewPlayerPocketObject(playerid, slot)
{
	new DBResult:Result, DB_Query[350];
	format(DB_Query, sizeof DB_Query,
	"\
		INSERT INTO `PLAYER_POCKET`\
		(\
			`ID_USER`, `NAME`, `HUNGRY`, `THIRST`, `DRUNK`\
		)\
		VALUES\
		(\
			'%d', '%q', '%f', '%f', '%d'\
		);\
		SELECT MAX(`ID_OBJECT`) FROM `PLAYER_POCKET`;\
	",
		ACCOUNT_INFO[playerid][ac_ID], PLAYER_POCKET[playerid][slot][player_pocket_object_NAME], PLAYER_POCKET[playerid][slot][player_pocket_object_HUNGRY], PLAYER_POCKET[playerid][slot][player_pocket_object_THIRST], PLAYER_POCKET[playerid][slot][player_pocket_object_DRUNK]
	);
	Result = db_query(Database, DB_Query);
	
	if(db_num_rows(Result)) PLAYER_POCKET[playerid][slot][player_pocket_object_ID] = db_get_field_int(Result, 0);
	db_free_result(Result);
	return 1;
}

LoadPlayerPocketData(playerid)
{
	if(ACCOUNT_INFO[playerid][ac_ID] == 0) return 0;
	
	new DBResult:Result, DB_Query[90];
	format(DB_Query, sizeof(DB_Query), "SELECT * FROM `PLAYER_POCKET` WHERE `ID_USER` = '%d' LIMIT %d;", ACCOUNT_INFO[playerid][ac_ID], MAX_PLAYER_POCKET_OBJECTS);
	Result = db_query(Database, DB_Query);
	
	new index;
	for(new i; i < db_num_rows(Result); i++ )
	{
		if(index >= MAX_PLAYER_POCKET_OBJECTS)
		{
			printf("---> Límite superado en array 'PP' al intentar cargar de la base de datos.");
			break;
		}
		
		PLAYER_POCKET[playerid][index][player_pocket_VALID] = true;
		
		PLAYER_POCKET[playerid][index][player_pocket_object_ID] = db_get_field_assoc_int(Result, "ID_OBJECT");
		db_get_field_assoc(Result, "NAME", PLAYER_POCKET[playerid][index][player_pocket_object_NAME], 24);
		PLAYER_POCKET[playerid][index][player_pocket_object_HUNGRY] = db_get_field_assoc_float(Result, "HUNGRY");
		PLAYER_POCKET[playerid][index][player_pocket_object_THIRST] = db_get_field_assoc_float(Result, "THIRST");
		PLAYER_POCKET[playerid][index][player_pocket_object_DRUNK] = db_get_field_assoc_int(Result, "DRUNK");
		
		index ++;
		db_next_row(Result);
	}
	db_free_result(Result);
	return 1;
}

TransferPlayerPocketObject(from_playerid, from_slot, to_playerid, to_slot)
{
	new DB_Query[130];
	format(DB_Query, sizeof(DB_Query), "UPDATE `PLAYER_POCKET` SET `ID_USER` = '%d' WHERE `ID_OBJECT` = '%d';", ACCOUNT_INFO[to_playerid][ac_ID], PLAYER_POCKET[from_playerid][from_slot][player_pocket_object_ID]);
	db_query(Database, DB_Query);
	
	PLAYER_POCKET[to_playerid][to_slot][player_pocket_VALID] = true;
	PLAYER_POCKET[to_playerid][to_slot][player_pocket_object_ID] = PLAYER_POCKET[from_playerid][from_slot][player_pocket_object_ID];
	format(PLAYER_POCKET[to_playerid][to_slot][player_pocket_object_NAME], 24, "%s", PLAYER_POCKET[from_playerid][from_slot][player_pocket_object_NAME]);
	PLAYER_POCKET[to_playerid][to_slot][player_pocket_object_HUNGRY] = PLAYER_POCKET[from_playerid][from_slot][player_pocket_object_HUNGRY];
	PLAYER_POCKET[to_playerid][to_slot][player_pocket_object_THIRST] = PLAYER_POCKET[from_playerid][from_slot][player_pocket_object_THIRST];
	PLAYER_POCKET[to_playerid][to_slot][player_pocket_object_DRUNK] = PLAYER_POCKET[from_playerid][from_slot][player_pocket_object_DRUNK];
	
	PLAYER_POCKET[from_playerid][from_slot][player_pocket_VALID] = false;
	PLAYER_POCKET[from_playerid][from_slot][player_pocket_object_ID] = 0;
	format(PLAYER_POCKET[from_playerid][from_slot][player_pocket_object_NAME], 24, "");
	PLAYER_POCKET[from_playerid][from_slot][player_pocket_object_HUNGRY] = 0.0;
	PLAYER_POCKET[from_playerid][from_slot][player_pocket_object_THIRST] = 0.0;
	PLAYER_POCKET[from_playerid][from_slot][player_pocket_object_DRUNK] = 0;
	return 1;
}

DeletePlayerPocketObject(playerid, slot)
{
	new DB_Query[140];
	format(DB_Query, sizeof DB_Query, "DELETE FROM `PLAYER_POCKET` WHERE `ID_OBJECT` = '%d' AND `ID_USER` = '%d';", PLAYER_POCKET[playerid][slot][player_pocket_object_ID], ACCOUNT_INFO[playerid][ac_ID]);
	db_query(Database, DB_Query);

	PLAYER_POCKET[playerid][slot][player_pocket_VALID] = false;
	PLAYER_POCKET[playerid][slot][player_pocket_object_ID] = 0;
	format(PLAYER_POCKET[playerid][slot][player_pocket_object_NAME], 24, "");
	PLAYER_POCKET[playerid][slot][player_pocket_object_HUNGRY] = 0.0;
	PLAYER_POCKET[playerid][slot][player_pocket_object_THIRST] = 0.0;
	PLAYER_POCKET[playerid][slot][player_pocket_object_DRUNK] = 0;
	return 1;
}

GetEmptyPlayerPocketSlot(playerid)
{
	for(new i = 0; i != MAX_PLAYER_POCKET_OBJECTS; i ++)
	{
		if(!PLAYER_POCKET[playerid][i][player_pocket_VALID]) return i;
	}
	return -1;
}

LoadPlayerGPSData(playerid)
{
	if(ACCOUNT_INFO[playerid][ac_ID] == 0) return 0;
	
	new DBResult:Result, DB_Query[90];
	format(DB_Query, sizeof(DB_Query), "SELECT * FROM `PLAYER_GPS` WHERE `ID_USER` = '%d' LIMIT %d;", ACCOUNT_INFO[playerid][ac_ID], MAX_PLAYER_GPS_SAVES);
	Result = db_query(Database, DB_Query);
	
	new index;
	for(new i; i < db_num_rows(Result); i++ )
	{
		if(index >= MAX_PLAYER_GPS_SAVES)
		{
			printf("---> Límite superado en array 'P_GPS' al intentar cargar de la base de datos.");
			break;
		}
		
		PLAYER_GPS[playerid][index][player_gps_VALID] = true;
		
		PLAYER_GPS[playerid][index][player_gps_ID] = db_get_field_assoc_int(Result, "ID");
		db_get_field_assoc(Result, "NAME", PLAYER_GPS[playerid][index][player_gps_NAME], 24);
		PLAYER_GPS[playerid][index][player_gps_X] = db_get_field_assoc_float(Result, "X");
		PLAYER_GPS[playerid][index][player_gps_Y] = db_get_field_assoc_float(Result, "Y");
		PLAYER_GPS[playerid][index][player_gps_Z] = db_get_field_assoc_float(Result, "Z");
		PLAYER_GPS[playerid][index][player_gps_WORLD] = db_get_field_assoc_int(Result, "WORLD");
		PLAYER_GPS[playerid][index][player_gps_INTERIOR] = db_get_field_assoc_int(Result, "INTERIOR");

		index ++;
		db_next_row(Result);
	}
	db_free_result(Result);
	return 1;
}

LoadPlayerToysData(playerid)
{
	if(ACCOUNT_INFO[playerid][ac_ID] == 0) return 0;
	
	new DBResult:Result, DB_Query[90];
	format(DB_Query, sizeof(DB_Query), "SELECT * FROM `PLAYER_TOYS` WHERE `ID_USER` = '%d' LIMIT %d;", ACCOUNT_INFO[playerid][ac_ID], MAX_PLAYER_ATTACHED_OBJECTS);
	Result = db_query(Database, DB_Query);
	
	new index;
	for(new i; i < db_num_rows(Result); i++ )
	{
		if(index >= MAX_PLAYER_ATTACHED_OBJECTS)
		{
			printf("---> Límite superado en array 'PTOYS' al intentar cargar de la base de datos.");
			break;
		}
		
		PLAYER_TOYS[playerid][index][player_toy_VALID] = true;
		
		PLAYER_TOYS[playerid][index][player_toy_ID] = db_get_field_assoc_int(Result, "ID_TOY");
		db_get_field_assoc(Result, "NAME", PLAYER_TOYS[playerid][index][player_toy_NAME], 24);
		PLAYER_TOYS[playerid][index][player_toy_ATTACHED] = db_get_field_assoc_int(Result, "ATTACHED");
		PLAYER_TOYS[playerid][index][player_toy_MODELID] = db_get_field_assoc_int(Result, "MODELID");
		PLAYER_TOYS[playerid][index][player_toy_BONE] = db_get_field_assoc_int(Result, "BONE");
		PLAYER_TOYS[playerid][index][player_toy_OFFSET_X] = db_get_field_assoc_float(Result, "OFFSET_X");
		PLAYER_TOYS[playerid][index][player_toy_OFFSET_Y] = db_get_field_assoc_float(Result, "OFFSET_Y");
		PLAYER_TOYS[playerid][index][player_toy_OFFSET_Z] = db_get_field_assoc_float(Result, "OFFSET_Z");
		PLAYER_TOYS[playerid][index][player_toy_ROT_X] = db_get_field_assoc_float(Result, "ROT_X");
		PLAYER_TOYS[playerid][index][player_toy_ROT_Y] = db_get_field_assoc_float(Result, "ROT_Y");
		PLAYER_TOYS[playerid][index][player_toy_ROT_Z] = db_get_field_assoc_float(Result, "ROT_Z");
		PLAYER_TOYS[playerid][index][player_toy_SCALE_X] = db_get_field_assoc_float(Result, "SCALE_X");
		PLAYER_TOYS[playerid][index][player_toy_SCALE_Y] = db_get_field_assoc_float(Result, "SCALE_Y");
		PLAYER_TOYS[playerid][index][player_toy_SCALE_Z] = db_get_field_assoc_float(Result, "SCALE_Z");
		PLAYER_TOYS[playerid][index][player_toy_COLOR_1] = db_get_field_assoc_int(Result, "COLOR_1");
		PLAYER_TOYS[playerid][index][player_toy_COLOR_2] = db_get_field_assoc_int(Result, "COLOR_2");

		index ++;
		db_next_row(Result);
	}
	db_free_result(Result);
	return 1;
}

SavePlayerToysData(playerid)
{
	if(!PLAYER_TEMP[playerid][pt_USER_EXIT] || !PLAYER_TEMP[playerid][pt_USER_LOGGED]) return 0;
	
	for(new i = 0; i != MAX_PLAYER_ATTACHED_OBJECTS; i ++)
	{
		if(!PLAYER_TOYS[playerid][i][player_toy_VALID]) continue;
		
		new DB_Query[1000];
		format(DB_Query, sizeof(DB_Query), "\
			UPDATE `PLAYER_TOYS` SET \
				`NAME` = '%q',\
				`ATTACHED` = '%d',\
				`MODELID` = '%d',\
				`BONE` = '%d',\
				`OFFSET_X` = '%f',\
				`OFFSET_Y` = '%f',\
				`OFFSET_Z` = '%f',\
				`ROT_X` = '%f',\
				`ROT_Y` = '%f',\
				`ROT_Z` = '%f',\
				`SCALE_X` = '%f',\
				`SCALE_Y` = '%f',\
				`SCALE_Z` = '%f',\
				`COLOR_1` = '%d',\
				`COLOR_2` = '%d' \
			WHERE `ID_TOY` = '%d';\
		",
			PLAYER_TOYS[playerid][i][player_toy_NAME], PLAYER_TOYS[playerid][i][player_toy_ATTACHED],
			PLAYER_TOYS[playerid][i][player_toy_MODELID], PLAYER_TOYS[playerid][i][player_toy_BONE],
			PLAYER_TOYS[playerid][i][player_toy_OFFSET_X], PLAYER_TOYS[playerid][i][player_toy_OFFSET_Y], PLAYER_TOYS[playerid][i][player_toy_OFFSET_Z],
			PLAYER_TOYS[playerid][i][player_toy_ROT_X], PLAYER_TOYS[playerid][i][player_toy_ROT_Y], PLAYER_TOYS[playerid][i][player_toy_ROT_Z],
			PLAYER_TOYS[playerid][i][player_toy_SCALE_X], PLAYER_TOYS[playerid][i][player_toy_SCALE_Y], PLAYER_TOYS[playerid][i][player_toy_SCALE_Z],
			PLAYER_TOYS[playerid][i][player_toy_COLOR_1], PLAYER_TOYS[playerid][i][player_toy_COLOR_2],
			
			PLAYER_TOYS[playerid][i][player_toy_ID]
		);

		db_query(Database, DB_Query);
	}
	return 1;
}

GetEmptyPlayerToySlot(playerid)
{
	for(new i = 0; i != MAX_PLAYER_ATTACHED_OBJECTS; i ++)
	{
		if(!PLAYER_TOYS[playerid][i][player_toy_VALID]) return i;
	}
	return -1;
}

stock minrand(min, max) //By Alex "Y_Less" Cole
{
	return random(max - min) + min;
}

//PARA QUE PASEN 24 HORAS EN EL JUEGO EN		1 MINUTO REAL    NECESITO UN TIMER DE 125/3 MS
SetMyWorldTime(minutes_for_day)
{
	new interval = floatround(floatmul(float(minutes_for_day), floatdiv(125, 3)));

	SERVER_TIME[0] = 11;
	SERVER_TIME[1] = 0;	
	UpdateServerTimeTextDraw();
	
	SetTimer("UpdateWorldTime", interval, true);
	return 1;
}

forward UpdateWorldTime();
public UpdateWorldTime()
{
	SERVER_TIME[1] ++;
	if(SERVER_TIME[1] == 60)
	{
		SERVER_TIME[0] ++;
		if(SERVER_TIME[0] == 24) SERVER_TIME[0] = 0;
		SERVER_TIME[1] = 0;
	}
	
	UpdateServerTimeTextDraw();
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(PLAYER_TEMP[i][pt_GAME_STATE] == GAME_STATE_NORMAL || PLAYER_TEMP[i][pt_GAME_STATE] == GAME_STATE_DEAD)
			{
				SetPlayerTime(i, SERVER_TIME[0], SERVER_TIME[1]);
				SetPlayerWeather(i, SERVER_WEATHER);
			}
		}
 	}
	return 1;
}

UpdateServerTimeTextDraw()
{
	new td_str[16]; format(td_str, sizeof td_str, "%02d:%02d", SERVER_TIME[0], SERVER_TIME[1]);
	TextDrawSetString(Textdraws[textdraw_SERVER_TIME], td_str);
	return 1;
}

stock ConvertTime_SecondsToHours(sec, &hours, &minutes, &seconds)
{
	hours = floatround(sec / 3600);
	minutes = floatround((sec - (hours * 3600)) / 60);
	seconds = sec % 60;
   	return 1;
}


MensajeNotificacion(playerid,text[])
{
	new GQuery[500];
	format( GQuery, sizeof( GQuery ), "INSERT INTO PLAYERNOTIFICACIONES (PLAYER,FECHA,NOTIFICACION) VALUES ('%d','%s','%s')",ACCOUNT_INFO[playerid][ac_ID],GetFecha(),text);
	db_query(_DB_, GQuery );
	return MensajesAyuda(playerid,text);
}
MensajesAyuda(playerid,text_[])
{
	if (MENSAJE_AYUDA[playerid][0] == 0) 
	{
		PlayerTextDrawSetString(playerid,PlayerTextdraws[playerid][textdraw_ayuda][0], text_);
		PlayerTextDrawShow(playerid,PlayerTextdraws[playerid][textdraw_ayuda][0]); 
		MENSAJE_AYUDA[playerid][0] = 1; 
		TIMER_MENSAJEAYUDA[playerid][0] = SetTimerEx("OcultarAyuda1", 7000, 0,"d",playerid); 
	}
	else if (MENSAJE_AYUDA[playerid][1] == 0) 
	{
		PlayerTextDrawSetString(playerid,PlayerTextdraws[playerid][textdraw_ayuda][1], text_);
		PlayerTextDrawShow(playerid,PlayerTextdraws[playerid][textdraw_ayuda][1]); 
		MENSAJE_AYUDA[playerid][1] = 1; 
		TIMER_MENSAJEAYUDA[playerid][1] = SetTimerEx("OcultarAyuda2", 7000, 0,"d",playerid); 
	}
	else if (MENSAJE_AYUDA[playerid][2] == 0) 
	{
		PlayerTextDrawSetString(playerid,PlayerTextdraws[playerid][textdraw_ayuda][2], text_);
		PlayerTextDrawShow(playerid,PlayerTextdraws[playerid][textdraw_ayuda][2]); 
		MENSAJE_AYUDA[playerid][2] = 1; 
		TIMER_MENSAJEAYUDA[playerid][2] = SetTimerEx("OcultarAyuda3", 7000, 0,"d",playerid);
		return 1;
	}
	if(MENSAJE_AYUDA[playerid][0] == 1 && MENSAJE_AYUDA[playerid][1] == 1 && MENSAJE_AYUDA[playerid][2] == 1)
	{
		PlayerTextDrawSetString(playerid,PlayerTextdraws[playerid][textdraw_ayuda][3], text_);
		PlayerTextDrawShow(playerid,PlayerTextdraws[playerid][textdraw_ayuda][3]); 
		TIMER_MENSAJEAYUDA[playerid][2] = SetTimerEx("OcultarAyuda4", 7000, 0,"d",playerid); 
	}
	return 1;
}
funcion OcultarAyuda1(playerid)
{
	PlayerTextDrawHide(playerid,PlayerTextdraws[playerid][textdraw_ayuda][0]); 
	MENSAJE_AYUDA[playerid][0] = 0; 
	return 1;
}
funcion OcultarAyuda2(playerid)
{
	PlayerTextDrawHide(playerid,PlayerTextdraws[playerid][textdraw_ayuda][1]); 
	MENSAJE_AYUDA[playerid][1] = 0; 
	return 1;
}
funcion OcultarAyuda3(playerid)
{
	PlayerTextDrawHide(playerid,PlayerTextdraws[playerid][textdraw_ayuda][2]); 
	MENSAJE_AYUDA[playerid][2] = 0; 
	return 1;
}
funcion OcultarAyuda4(playerid)
{
	PlayerTextDrawHide(playerid,PlayerTextdraws[playerid][textdraw_ayuda][3]); 
	MENSAJE_AYUDA[playerid][2] = 0; 
	return 1;
}
CreatePlayerTextDraws(playerid)
{
	for(new i; i < sizeof(PlayerTextdraws[]); i++) PlayerTextdraws[playerid][Player_Textdraws_Enum:i] = INVALID_TEXT_DRAW;

	
	/*textdraw login*/
	PlayerTextdraws[playerid][textdraw_login][0] = CreatePlayerTextDraw(playerid, 252.986557, 220.333343, " ");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_login][0], 0.412649, 0.684166);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_login][0], 379.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_login][0], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_login][0], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][textdraw_login][0], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][textdraw_login][0], -1378294017);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_login][0], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_login][0], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_login][0], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_login][0], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_login][0], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_login][0], 0);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][textdraw_login][0], true);

	PlayerTextdraws[playerid][textdraw_login][1] = CreatePlayerTextDraw(playerid, 379.024719, 196.150024, "Nerak_Ovatsug");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_login][1], 0.287086, 1.109997);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_login][1], 3);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_login][1], -1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_login][1], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_login][1], 1);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_login][1], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_login][1], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_login][1], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_login][1], 0);

	PlayerTextdraws[playerid][textdraw_login][2] = CreatePlayerTextDraw(playerid, 379.424743, 217.266738, "~r~~h~+++++++++");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_login][2], 0.287086, 1.109997);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_login][2], 3);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_login][2], -1523963137);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_login][2], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_login][2], 1);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_login][2], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_login][2], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_login][2], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_login][2], 0);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][textdraw_login][2], true);

	PlayerTextdraws[playerid][textdraw_login][3] = CreatePlayerTextDraw(playerid, 255.898040, 260.599853, "ld_shtr:un_a");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_login][3], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_login][3], 53.000000, 16.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_login][3], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_login][3], -2147483393);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_login][3], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_login][3], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_login][3], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_login][3], 4);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_login][3], 0);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_login][3], 0);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][textdraw_login][3], true);

	PlayerTextdraws[playerid][textdraw_login][4] = CreatePlayerTextDraw(playerid, 327.581970, 260.016540, "ld_shtr:un_c");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_login][4], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_login][4], 53.000000, 16.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_login][4], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_login][4], -2147483393);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_login][4], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_login][4], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_login][4], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_login][4], 4);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_login][4], 0);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_login][4], 0);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][textdraw_login][4], true);

	PlayerTextdraws[playerid][textdraw_login][5] = CreatePlayerTextDraw(playerid, 253.049591, 298.250122, "_");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_login][5], 0.383601, 0.287499);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_login][5], 379.010009, 0.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_login][5], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_login][5], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][textdraw_login][5], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][textdraw_login][5], -1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_login][5], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_login][5], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_login][5], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_login][5], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_login][5], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_login][5], 0);
	 


	/*textdraw pescar*/
	PlayerTextdraws[playerid][textdraw_pesca][0] = CreatePlayerTextDraw(playerid, 521.449890, 176.000030, "_");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_pesca][0], 0.433732, 3.198333);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_pesca][0], 612.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_pesca][0], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_pesca][0], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][textdraw_pesca][0], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][textdraw_pesca][0], 153);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_pesca][0], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_pesca][0], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_pesca][0], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_pesca][0], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_pesca][0], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_pesca][0], 0);

	PlayerTextdraws[playerid][textdraw_pesca][1] = CreatePlayerTextDraw(playerid, 522.386779, 172.500030, "Pescando...");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_pesca][1], 0.328784, 1.104165);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_pesca][1], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_pesca][1], -1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_pesca][1], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_pesca][1], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_pesca][1], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_pesca][1], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_pesca][1], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_pesca][1], 0);

	PlayerTextdraws[playerid][textdraw_pesca][2] = CreatePlayerTextDraw(playerid, 521.918334, 181.250030, "Espera que muerdan~n~el anzuelo..");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_pesca][2], 0.240702, 1.413332);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_pesca][2], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_pesca][2], -1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_pesca][2], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_pesca][2], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_pesca][2], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_pesca][2], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_pesca][2], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_pesca][2], 0);

	PlayerTextdraws[playerid][textdraw_pesca][3] = CreatePlayerTextDraw(playerid, 523.324035, 196.666809, "_");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_pesca][3], 0.408432, 0.404166);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_pesca][3], 610.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_pesca][3], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_pesca][3], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][textdraw_pesca][3], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][textdraw_pesca][3], -2139062017);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_pesca][3], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_pesca][3], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_pesca][3], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_pesca][3], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_pesca][3], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_pesca][3], 0);

	PlayerTextdraws[playerid][textdraw_pesca][4] = CreatePlayerTextDraw(playerid, 523.324218, 196.750091, "_");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_pesca][4], 0.408432, 0.404166);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_pesca][4], 610.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_pesca][4], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_pesca][4], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][textdraw_pesca][4], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][textdraw_pesca][4], -1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_pesca][4], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_pesca][4], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_pesca][4], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_pesca][4], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_pesca][4], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_pesca][4], 0);

	PlayerTextdraws[playerid][textdraw_pesca][5] = CreatePlayerTextDraw(playerid, 521.653869, 173.616622, "Presiona ALT Izq. tan~n~rapido como puedas");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_pesca][5], 0.262721, 1.191666);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_pesca][5], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_pesca][5], -1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_pesca][5], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_pesca][5], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_pesca][5], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_pesca][5], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_pesca][5], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_pesca][5], 0);

	/*enciendo motor*/
		
	PlayerTextdraws[playerid][textdraw_enciendomoto][0] = CreatePlayerTextDraw(playerid, 278.755584, 280.416687, "_");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_enciendomoto][0], 0.385475, 0.602499);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_enciendomoto][0], 366.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_enciendomoto][0], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_enciendomoto][0], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][textdraw_enciendomoto][0], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][textdraw_enciendomoto][0], 255);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_enciendomoto][0], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_enciendomoto][0], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_enciendomoto][0], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_enciendomoto][0], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_enciendomoto][0], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_enciendomoto][0], 0);

	PlayerTextdraws[playerid][textdraw_enciendomoto][1] = CreatePlayerTextDraw(playerid, 280.629760, 282.166656, "_");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_enciendomoto][1], 0.383601, 0.270000);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_enciendomoto][1], 364.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_enciendomoto][1], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_enciendomoto][1], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][textdraw_enciendomoto][1], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][textdraw_enciendomoto][1], -2139062017);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_enciendomoto][1], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_enciendomoto][1], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_enciendomoto][1], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_enciendomoto][1], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_enciendomoto][1], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_enciendomoto][1], 0);

	PlayerTextdraws[playerid][textdraw_enciendomoto][2] = CreatePlayerTextDraw(playerid, 280.629760, 282.166656, "_");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_enciendomoto][2], 0.383601, 0.270000);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_enciendomoto][2], 364.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_enciendomoto][2], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_enciendomoto][2], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][textdraw_enciendomoto][2], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][textdraw_enciendomoto][2], -1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_enciendomoto][2], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_enciendomoto][2], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_enciendomoto][2], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_enciendomoto][2], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_enciendomoto][2], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_enciendomoto][2], 0);

	PlayerTextdraws[playerid][textdraw_enciendomoto][3] = CreatePlayerTextDraw(playerid, 289.531433, 266.999938, "Encendiendo..");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_enciendomoto][3], 0.306295, 1.209166);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_enciendomoto][3], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_enciendomoto][3], 8388863);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_enciendomoto][3], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_enciendomoto][3], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_enciendomoto][3], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_enciendomoto][3], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_enciendomoto][3], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_enciendomoto][3], 0);
	/*textdraw menu*/
	PlayerTextdraws[playerid][textdraw_menu][0] = CreatePlayerTextDraw(playerid, 615.622619, 1.000010, "_");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_menu][0], 0.433265, 29.763332);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_menu][0], 638.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_menu][0], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_menu][0], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][textdraw_menu][0], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][textdraw_menu][0], -1378294017);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_menu][0], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_menu][0], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_menu][0], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_menu][0], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_menu][0], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_menu][0], 0);

	PlayerTextdraws[playerid][textdraw_menu][1] = CreatePlayerTextDraw(playerid, 619.202270, 12.083326, "hud:radar_modgarage");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_menu][1], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_menu][1], 16.000000, 16.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_menu][1], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_menu][1], -1378294017);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_menu][1], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_menu][1], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_menu][1], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_menu][1], 4);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_menu][1], 0);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_menu][1], 0);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][textdraw_menu][1], true);

	PlayerTextdraws[playerid][textdraw_menu][2] = CreatePlayerTextDraw(playerid, 619.202270, 44.749992, "hud:radar_qmark");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_menu][2], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_menu][2], 16.000000, 16.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_menu][2], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_menu][2], -5963521);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_menu][2], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_menu][2], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_menu][2], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_menu][2], 4);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_menu][2], 0);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_menu][2], 0);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][textdraw_menu][2], true);

	PlayerTextdraws[playerid][textdraw_menu][3] = CreatePlayerTextDraw(playerid, 619.202331, 80.916664, "hud:radar_truck");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_menu][3], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_menu][3], 16.000000, 16.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_menu][3], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_menu][3], -2139062017);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_menu][3], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_menu][3], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_menu][3], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_menu][3], 4);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_menu][3], 0);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_menu][3], 0);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][textdraw_menu][3], true);

	PlayerTextdraws[playerid][textdraw_menu][4] = CreatePlayerTextDraw(playerid, 620.607910, 114.166679, "hud:radar_tshirt");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_menu][4], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_menu][4], 16.000000, 16.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_menu][4], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_menu][4], -1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_menu][4], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_menu][4], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_menu][4], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_menu][4], 4);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_menu][4], 0);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_menu][4], 0);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][textdraw_menu][4], true);

	PlayerTextdraws[playerid][textdraw_menu][5] = CreatePlayerTextDraw(playerid, 619.670959, 255.333267, "ld_beat:cross");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_menu][5], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_menu][5], 15.000000, 16.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_menu][5], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_menu][5], -1523963137);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_menu][5], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_menu][5], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_menu][5], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_menu][5], 4);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_menu][5], 0);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_menu][5], 0);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][textdraw_menu][5], true);

	PlayerTextdraws[playerid][textdraw_menu][6] = CreatePlayerTextDraw(playerid, 616.859802, 149.166610, "hud:arrow");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_menu][6], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_menu][6], 20.000000, 22.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_menu][6], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_menu][6], -2139062017);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_menu][6], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_menu][6], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_menu][6], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_menu][6], 4);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_menu][6], 0);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_menu][6], 0);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][textdraw_menu][6], true);

	PlayerTextdraws[playerid][textdraw_menu][7] = CreatePlayerTextDraw(playerid, 617.796813, 185.916717, "hud:radar_datefood");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_menu][7], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_menu][7], 20.000000, 14.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_menu][7], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_menu][7], -2139094785);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_menu][7], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_menu][7], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_menu][7], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_menu][7], 4);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_menu][7], 0);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_menu][7], 0);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][textdraw_menu][7], true);

	PlayerTextdraws[playerid][textdraw_menu][8] = CreatePlayerTextDraw(playerid, 619.670898, 215.666641, "ld_none:warp");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_menu][8], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_menu][8], 16.000000, 21.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_menu][8], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_menu][8], -1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_menu][8], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_menu][8], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_menu][8], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_menu][8], 4);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_menu][8], 0);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_menu][8], 0);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][textdraw_menu][8], true);

	/*textdraw estrellas buscado*/
	PlayerTextdraws[playerid][textdraw_estrellas_buscado][0] = CreatePlayerTextDraw(playerid, 140.073211, 393.583282, "]");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_estrellas_buscado][0], 0.517598, 2.014167);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_estrellas_buscado][0], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_estrellas_buscado][0], -2139094785);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_estrellas_buscado][0], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_estrellas_buscado][0], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_estrellas_buscado][0], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_estrellas_buscado][0], 2);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_estrellas_buscado][0], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_estrellas_buscado][0], 0);

	PlayerTextdraws[playerid][textdraw_estrellas_buscado][1] = CreatePlayerTextDraw(playerid, 163.967788, 393.583251, "]");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_estrellas_buscado][1], 0.517598, 2.014167);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_estrellas_buscado][1], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_estrellas_buscado][1], -2139094785);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_estrellas_buscado][1], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_estrellas_buscado][1], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_estrellas_buscado][1], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_estrellas_buscado][1], 2);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_estrellas_buscado][1], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_estrellas_buscado][1], 0);

	PlayerTextdraws[playerid][textdraw_estrellas_buscado][2] = CreatePlayerTextDraw(playerid, 185.519760, 393.583282, "]");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_estrellas_buscado][2], 0.517598, 2.014167);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_estrellas_buscado][2], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_estrellas_buscado][2], -2139094785);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_estrellas_buscado][2], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_estrellas_buscado][2], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_estrellas_buscado][2], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_estrellas_buscado][2], 2);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_estrellas_buscado][2], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_estrellas_buscado][2], 0);

	PlayerTextdraws[playerid][textdraw_estrellas_buscado][3] = CreatePlayerTextDraw(playerid, 207.071731, 393.583221, "]");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_estrellas_buscado][3], 0.517598, 2.014167);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_estrellas_buscado][3], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_estrellas_buscado][3], -2139094785);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_estrellas_buscado][3], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_estrellas_buscado][3], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_estrellas_buscado][3], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_estrellas_buscado][3], 2);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_estrellas_buscado][3], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_estrellas_buscado][3], 0);

	PlayerTextdraws[playerid][textdraw_estrellas_buscado][4] = CreatePlayerTextDraw(playerid, 229.573104, 393.583221, "]");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_estrellas_buscado][4], 0.517598, 2.014167);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_estrellas_buscado][4], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_estrellas_buscado][4], -2139094785);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_estrellas_buscado][4], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_estrellas_buscado][4], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_estrellas_buscado][4], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_estrellas_buscado][4], 2);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_estrellas_buscado][4], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_estrellas_buscado][4], 0);

	PlayerTextdraws[playerid][textdraw_estrellas_buscado][5] = CreatePlayerTextDraw(playerid, 250.656555, 393.516632, "]");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_estrellas_buscado][5], 0.517598, 2.014167);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_estrellas_buscado][5], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_estrellas_buscado][5], -2139094785);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_estrellas_buscado][5], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_estrellas_buscado][5], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_estrellas_buscado][5], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_estrellas_buscado][5], 2);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_estrellas_buscado][5], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_estrellas_buscado][5], 0);
	/*textdraw taller*/
	PlayerTextdraws[playerid][textdraw_taller][0] = CreatePlayerTextDraw(playerid, 487.715911, 24.916664, "_");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_taller][0], 0.319882, 7.876666);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_taller][0], 629.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_taller][0], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_taller][0], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][textdraw_taller][0], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][textdraw_taller][0], -1523963137);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_taller][0], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_taller][0], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_taller][0], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_taller][0], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_taller][0], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_taller][0], 0);

	PlayerTextdraws[playerid][textdraw_taller][1] = CreatePlayerTextDraw(playerid, 500.834106, 23.750026, "TALLER]GYK");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_taller][1], 0.400937, 1.617500);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_taller][1], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_taller][1], -65281);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_taller][1], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_taller][1], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_taller][1], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_taller][1], 2);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_taller][1], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_taller][1], 0);

	PlayerTextdraws[playerid][textdraw_taller][2] = CreatePlayerTextDraw(playerid, 488.184570, 51.749996, "Color primario $~g~3000");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_taller][2], 0.300204, 1.139166);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_taller][2], 629.000000, 10.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_taller][2], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_taller][2], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][textdraw_taller][2], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][textdraw_taller][2], 255);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_taller][2], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_taller][2], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_taller][2], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_taller][2], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_taller][2], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_taller][2], 0);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][textdraw_taller][2], true);

	PlayerTextdraws[playerid][textdraw_taller][3] = CreatePlayerTextDraw(playerid, 487.716033, 85.000045, "Salir");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_taller][3], 0.300204, 1.139166);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_taller][3], 629.000000, 10.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_taller][3], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_taller][3], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][textdraw_taller][3], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][textdraw_taller][3], 255);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_taller][3], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_taller][3], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_taller][3], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_taller][3], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_taller][3], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_taller][3], 0);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][textdraw_taller][3], true);

	PlayerTextdraws[playerid][textdraw_taller][4] = CreatePlayerTextDraw(playerid, 487.716064, 68.450057, "Colores");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_taller][4], 0.300204, 1.139166);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_taller][4], 628.880859, 10.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_taller][4], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_taller][4], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][textdraw_taller][4], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][textdraw_taller][4], 255);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_taller][4], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_taller][4], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_taller][4], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_taller][4], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_taller][4], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_taller][4], 0);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][textdraw_taller][4], true);
	/*textdraws nivel trabajo*/

	PlayerTextdraws[playerid][textdraws_nivel_trabajo][0] = CreatePlayerTextDraw(playerid, 260.951293, 278.083374, "_");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraws_nivel_trabajo][0], 0.410307, 2.288333);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraws_nivel_trabajo][0], 381.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraws_nivel_trabajo][0], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraws_nivel_trabajo][0], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][textdraws_nivel_trabajo][0], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][textdraws_nivel_trabajo][0], 153);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraws_nivel_trabajo][0], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraws_nivel_trabajo][0], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraws_nivel_trabajo][0], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraws_nivel_trabajo][0], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraws_nivel_trabajo][0], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraws_nivel_trabajo][0], 0);

	PlayerTextdraws[playerid][textdraws_nivel_trabajo][1] = CreatePlayerTextDraw(playerid, 261.420196, 276.916748, "Camionero");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraws_nivel_trabajo][1], 0.288023, 1.279165);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraws_nivel_trabajo][1], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraws_nivel_trabajo][1], -1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraws_nivel_trabajo][1], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraws_nivel_trabajo][1], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraws_nivel_trabajo][1], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraws_nivel_trabajo][1], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraws_nivel_trabajo][1], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraws_nivel_trabajo][1], 0);

	PlayerTextdraws[playerid][textdraws_nivel_trabajo][2] = CreatePlayerTextDraw(playerid, 381.830596, 276.916778, "Nivel: ~r~2");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraws_nivel_trabajo][2], 0.288023, 1.279165);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraws_nivel_trabajo][2], 3);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraws_nivel_trabajo][2], -1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraws_nivel_trabajo][2], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraws_nivel_trabajo][2], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraws_nivel_trabajo][2], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraws_nivel_trabajo][2], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraws_nivel_trabajo][2], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraws_nivel_trabajo][2], 0);

	PlayerTextdraws[playerid][textdraws_nivel_trabajo][3] = CreatePlayerTextDraw(playerid, 263.762695, 293.250000, "_");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraws_nivel_trabajo][3], 0.385944, 0.340000);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraws_nivel_trabajo][3], 379.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraws_nivel_trabajo][3], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraws_nivel_trabajo][3], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][textdraws_nivel_trabajo][3], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][textdraws_nivel_trabajo][3], -2139062017);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraws_nivel_trabajo][3], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraws_nivel_trabajo][3], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraws_nivel_trabajo][3], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraws_nivel_trabajo][3], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraws_nivel_trabajo][3], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraws_nivel_trabajo][3], 0);

	PlayerTextdraws[playerid][textdraws_nivel_trabajo][4] = CreatePlayerTextDraw(playerid, 263.762695, 293.250000, "_");//Barra
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraws_nivel_trabajo][4], 0.385944, 0.340000);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraws_nivel_trabajo][4], 379.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraws_nivel_trabajo][4], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraws_nivel_trabajo][4], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][textdraws_nivel_trabajo][4], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][textdraws_nivel_trabajo][4], -1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraws_nivel_trabajo][4], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraws_nivel_trabajo][4], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraws_nivel_trabajo][4], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraws_nivel_trabajo][4], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraws_nivel_trabajo][4], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraws_nivel_trabajo][4], 0);

	//
	/*textdraw compra de skins en ammu nation*/
	PlayerTextdraws[playerid][Textdraws_Ammu_Skins][0] = CreatePlayerTextDraw(playerid, 132.108337, 153.250000, "_");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][0], 0.379385, 4.563332);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][0], 256.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][0], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][0], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][0], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][0], 520093849);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][0], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][0], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][0], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][0], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][0], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][0], 0);

	PlayerTextdraws[playerid][Textdraws_Ammu_Skins][1] = CreatePlayerTextDraw(playerid, 194.421646, 164.333343, "Ammu]nation~n~~y~Skins");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][1], 0.343777, 1.232499);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][1], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][1], -1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][1], 2);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][1], 1);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][1], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][1], 2);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][1], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][1], 2);

	PlayerTextdraws[playerid][Textdraws_Ammu_Skins][2] = CreatePlayerTextDraw(playerid, 132.108383, 198.749969, "_");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][2], 0.394377, 1.010833);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][2], 256.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][2], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][2], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][2], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][2], 153);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][2], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][2], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][2], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][2], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][2], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][2], 0);

	PlayerTextdraws[playerid][Textdraws_Ammu_Skins][3] = CreatePlayerTextDraw(playerid, 131.171310, 198.749984, "arma: ] rifle ]");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][3], 0.203220, 0.934999);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][3], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][3], -1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][3], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][3], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][3], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][3], 2);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][3], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][3], 0);

	PlayerTextdraws[playerid][Textdraws_Ammu_Skins][4] = CreatePlayerTextDraw(playerid, 132.108352, 212.249969, "_");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][4], 0.396720, 5.730000);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][4], 256.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][4], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][4], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][4], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][4], 520093849);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][4], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][4], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][4], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][4], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][4], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][4], 0);

	PlayerTextdraws[playerid][Textdraws_Ammu_Skins][5] = CreatePlayerTextDraw(playerid, 132.108337, 267.583282, "siguiente>>");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][5], 0.221024, 1.238332);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][5], 192.690719, 10.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][5], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][5], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][5], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][5], 16761168);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][5], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][5], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][5], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][5], 2);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][5], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][5], 0);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][5], true);

	PlayerTextdraws[playerid][Textdraws_Ammu_Skins][6] = CreatePlayerTextDraw(playerid, 199.069869, 267.516601, "<<Anterior");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][6], 0.221024, 1.238332);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][6], 255.900054, 10.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][6], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][6], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][6], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][6], 16761168);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][6], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][6], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][6], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][6], 2);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][6], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][6], 0);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][6], true);

	PlayerTextdraws[playerid][Textdraws_Ammu_Skins][7] = CreatePlayerTextDraw(playerid, 118.821365, 163.750076, "");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][7], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][7], 173.000000, 150.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][7], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][7], 255);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][7], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][7], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][7], 0);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][7], 5);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][7], 0);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][7], 0);
	PlayerTextDrawSetPreviewModel(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][7], 357);
	PlayerTextDrawSetPreviewRot(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][7], 0.000000, 0.000000, 0.000000, 3.000000);

	PlayerTextdraws[playerid][Textdraws_Ammu_Skins][8] = CreatePlayerTextDraw(playerid, 132.108383, 283.766784, "_");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][8], 0.277715, 3.915830);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][8], 256.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][8], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][8], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][8], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][8], 520093849);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][8], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][8], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][8], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][8], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][8], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][8], 0);

	PlayerTextdraws[playerid][Textdraws_Ammu_Skins][9] = CreatePlayerTextDraw(playerid, 173.982650, 323.932434, " comprar");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][9], 0.220556, 1.057500);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][9], 220.000000, 10.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][9], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][9], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][9], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][9], 1375666240);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][9], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][9], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][9], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][9], 2);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][9], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][9], 0);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][9], true);

	PlayerTextdraws[playerid][Textdraws_Ammu_Skins][10] = CreatePlayerTextDraw(playerid, 146.712936, 283.399993, "skin");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][10], 0.344245, 1.034166);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][10], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][10], -1523963137);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][10], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][10], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][10], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][10], 2);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][10], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][10], 0);

	PlayerTextdraws[playerid][Textdraws_Ammu_Skins][11] = CreatePlayerTextDraw(playerid, 232.840438, 282.750000, "precio");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][11], 0.344245, 1.034166);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][11], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][11], 8388863);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][11], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][11], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][11], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][11], 2);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][11], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][11], 0);

	PlayerTextdraws[playerid][Textdraws_Ammu_Skins][12] = CreatePlayerTextDraw(playerid, 131.171325, 299.666625, "Oro");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][12], 0.316134, 1.098332);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][12], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][12], -1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][12], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][12], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][12], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][12], 2);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][12], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][12], 0);

	PlayerTextdraws[playerid][Textdraws_Ammu_Skins][13] = CreatePlayerTextDraw(playerid, 254.860885, 299.249389, "20 RP");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][13], 0.268345, 1.115833);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][13], 3);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][13], -1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][13], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][13], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][13], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][13], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][13], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][13], 0);

	PlayerTextdraws[playerid][Textdraws_Ammu_Skins][14] = CreatePlayerTextDraw(playerid, 131.789855, 323.333251, "siguiente");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][14], 0.184011, 1.059166);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][14], 169.000000, 10.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][14], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][14], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][14], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][14], 16761168);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][14], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][14], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][14], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][14], 2);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][14], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][14], 0);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][14], true);

	PlayerTextdraws[playerid][Textdraws_Ammu_Skins][15] = CreatePlayerTextDraw(playerid, 225.025558, 323.299774, "anterior");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][15], 0.166676, 1.047500);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][15], 256.000000, 10.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][15], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][15], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][15], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][15], 16761168);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][15], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][15], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][15], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][15], 2);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][15], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][15], 0);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][15], true);

	PlayerTextdraws[playerid][Textdraws_Ammu_Skins][16] = CreatePlayerTextDraw(playerid, 258.440582, 149.750030, "ld_chat:dpad_lr");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][16], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][16], 189.000000, 115.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][16], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][16], -1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][16], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][16], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][16], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][16], 4);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][16], 0);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][16], 0);

	PlayerTextdraws[playerid][Textdraws_Ammu_Skins][17] = CreatePlayerTextDraw(playerid, 422.423095, 149.166687, "ld_chat:dpad_lr");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][17], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][17], -171.000000, 115.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][17], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][17], -1378294017);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][17], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][17], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][17], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][17], 4);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][17], 0);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][17], 0);
	/*Textdraw compra de armas ammu nation*/
	PlayerTextdraws[playerid][Textdraws_Ammu_Nation][0] = CreatePlayerTextDraw(playerid, 18.257690, 27.833337, "_");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][0], 0.401874, 5.794166);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][0], 169.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][0], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][0], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][0], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][0], 520093951);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][0], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][0], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][0], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][0], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][0], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][0], 0);

	PlayerTextdraws[playerid][Textdraws_Ammu_Nation][1] = CreatePlayerTextDraw(playerid, 33.718917, 40.666687, "AMMU]NATION");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][1], 0.405153, 2.434165);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][1], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][1], -1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][1], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][1], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][1], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][1], 2);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][1], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][1], 0);

	PlayerTextdraws[playerid][Textdraws_Ammu_Nation][2] = CreatePlayerTextDraw(playerid, 18.257720, 84.416671, "_");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][2], 0.396720, 1.022499);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][2], 169.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][2], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][2], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][2], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][2], 144);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][2], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][2], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][2], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][2], 2);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][2], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][2], 0);

	PlayerTextdraws[playerid][Textdraws_Ammu_Nation][3] = CreatePlayerTextDraw(playerid, 18.257705, 83.683311, "] Tec9 Arma rapida");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][3], 0.206032, 1.063333);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][3], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][3], -1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][3], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][3], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][3], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][3], 2);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][3], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][3], 0);

	PlayerTextdraws[playerid][Textdraws_Ammu_Nation][4] = CreatePlayerTextDraw(playerid, 18.257690, 98.416633, "_");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][4], 0.389223, 13.365830);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][4], 169.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][4], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][4], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][4], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][4], 520093951);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][4], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][4], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][4], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][4], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][4], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][4], 0);

	PlayerTextdraws[playerid][Textdraws_Ammu_Nation][5] = CreatePlayerTextDraw(playerid, 20.600275, 145.083297, "Alcance");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][5], 0.269751, 1.489166);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][5], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][5], -1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][5], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][5], 1);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][5], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][5], 2);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][5], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][5], 0);

	PlayerTextdraws[playerid][Textdraws_Ammu_Nation][6] = CreatePlayerTextDraw(playerid, 21.068796, 164.916610, "RAPIDEZ");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][6], 0.315490, 1.191666);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][6], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][6], -1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][6], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][6], 1);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][6], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][6], 2);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][6], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][6], 0);

	PlayerTextdraws[playerid][Textdraws_Ammu_Nation][7] = CreatePlayerTextDraw(playerid, 21.068796, 182.416580, "PODER");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][7], 0.269751, 1.489166);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][7], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][7], -1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][7], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][7], 1);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][7], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][7], 2);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][7], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][7], 0);

	PlayerTextdraws[playerid][Textdraws_Ammu_Nation][8] = CreatePlayerTextDraw(playerid, 91.784019, 152.002182, "_");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][8], 0.399062, 0.375000);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][8], 88.660041, 0.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][8], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][8], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][8], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][8], 255);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][8], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][8], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][8], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][8], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][8], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][8], 0);

	PlayerTextdraws[playerid][Textdraws_Ammu_Nation][9] = CreatePlayerTextDraw(playerid, -65.775856, 23.983249, "");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][9], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][9], 250.000000, 197.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][9], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][9], 255);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][9], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][9], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][9], 0);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][9], 5);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][9], 0);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][9], 0);
	PlayerTextDrawSetPreviewModel(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][9], 372);
	PlayerTextDrawSetPreviewRot(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][9], 0.000000, 0.000000, -181.000000, 3.000000);

	PlayerTextdraws[playerid][Textdraws_Ammu_Nation][10] = CreatePlayerTextDraw(playerid, 18.257711, 222.816848, "Siguiente >>");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][10], 0.161991, 1.191666);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][10], 67.000000, 10.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][10], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][10], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][10], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][10], 255);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][10], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][10], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][10], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][10], 2);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][10], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][10], 0);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][10], true);

	PlayerTextdraws[playerid][Textdraws_Ammu_Nation][11] = CreatePlayerTextDraw(playerid, 123.206443, 222.816864, "<< anterior");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][11], 0.161991, 1.197499);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][11], 169.000000, 10.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][11], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][11], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][11], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][11], 255);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][11], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][11], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][11], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][11], 2);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][11], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][11], 0);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][11], true);

	PlayerTextdraws[playerid][Textdraws_Ammu_Nation][12] = CreatePlayerTextDraw(playerid, 95.095176, 222.816955, "~g~comprar");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][12], 0.161991, 1.197499);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][12], 10.000000, 44.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][12], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][12], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][12], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][12], 255);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][12], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][12], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][12], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][12], 2);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][12], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][12], 0);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][12], true);

	PlayerTextdraws[playerid][Textdraws_Ammu_Nation][13] = CreatePlayerTextDraw(playerid, 92.052543, 152.150177, "_");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][13], 0.400468, -0.429999);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][13], 162.299957, 0.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][13], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][13], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][13], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][13], 255);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][13], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][13], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][13], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][13], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][13], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][13], 0);

	PlayerTextdraws[playerid][Textdraws_Ammu_Nation][14] = CreatePlayerTextDraw(playerid, 91.815490, 160.250000, "_");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][14], 0.400468, -0.429999);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][14], 163.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][14], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][14], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][14], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][14], 255);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][14], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][14], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][14], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][14], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][14], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][14], 0);

	PlayerTextdraws[playerid][Textdraws_Ammu_Nation][15] = CreatePlayerTextDraw(playerid, 91.346969, 169.650573, "_");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][15], 0.400468, -0.429999);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][15], 163.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][15], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][15], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][15], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][15], 255);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][15], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][15], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][15], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][15], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][15], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][15], 0);

	PlayerTextdraws[playerid][Textdraws_Ammu_Nation][16] = CreatePlayerTextDraw(playerid, 91.346969, 176.550994, "_");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][16], 0.400468, -0.429999);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][16], 163.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][16], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][16], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][16], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][16], 255);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][16], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][16], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][16], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][16], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][16], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][16], 0);

	PlayerTextdraws[playerid][Textdraws_Ammu_Nation][17] = CreatePlayerTextDraw(playerid, 91.346969, 187.751678, "_");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][17], 0.400468, -0.429999);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][17], 163.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][17], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][17], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][17], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][17], 255);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][17], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][17], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][17], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][17], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][17], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][17], 0);

	PlayerTextdraws[playerid][Textdraws_Ammu_Nation][18] = CreatePlayerTextDraw(playerid, 91.346969, 195.252136, "_");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][18], 0.400468, -0.429999);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][18], 163.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][18], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][18], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][18], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][18], 255);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][18], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][18], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][18], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][18], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][18], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][18], 0);

	PlayerTextdraws[playerid][Textdraws_Ammu_Nation][19] = CreatePlayerTextDraw(playerid, 166.647399, 151.968856, "_");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][19], 0.395783, 0.398333);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][19], 162.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][19], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][19], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][19], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][19], 255);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][19], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][19], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][19], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][19], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][19], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][19], 0);

	PlayerTextdraws[playerid][Textdraws_Ammu_Nation][20] = CreatePlayerTextDraw(playerid, 90.984031, 169.468872, "_");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][20], 0.395783, 0.398333);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][20], 88.700004, 0.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][20], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][20], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][20], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][20], 255);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][20], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][20], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][20], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][20], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][20], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][20], 0);

	PlayerTextdraws[playerid][Textdraws_Ammu_Nation][21] = CreatePlayerTextDraw(playerid, 166.915969, 169.335464, "_");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][21], 0.395783, 0.398333);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][21], 162.179656, 0.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][21], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][21], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][21], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][21], 255);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][21], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][21], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][21], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][21], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][21], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][21], 0);

	PlayerTextdraws[playerid][Textdraws_Ammu_Nation][22] = CreatePlayerTextDraw(playerid, 91.015548, 187.935531, "_");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][22], 0.395783, 0.398333);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][22], 89.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][22], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][22], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][22], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][22], 255);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][22], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][22], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][22], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][22], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][22], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][22], 0);

	PlayerTextdraws[playerid][Textdraws_Ammu_Nation][23] = CreatePlayerTextDraw(playerid, 166.447448, 187.968917, "_");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][23], 0.395783, 0.398333);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][23], 162.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][23], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][23], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][23], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][23], 255);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][23], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][23], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][23], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][23], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][23], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][23], 0);

	PlayerTextdraws[playerid][Textdraws_Ammu_Nation][24] = CreatePlayerTextDraw(playerid, 92.726692, 153.402359, "_");//a
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][24], 0.413118, 0.207500);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][24], 113.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][24], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][24], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][24], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][24], -1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][24], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][24], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][24], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][24], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][24], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][24], 0);

	PlayerTextdraws[playerid][Textdraws_Ammu_Nation][25] = CreatePlayerTextDraw(playerid, 92.426696, 170.503402, "_");//r
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][25], 0.413118, 0.157500);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][25], 162.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][25], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][25], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][25], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][25], -1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][25], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][25], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][25], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][25], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][25], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][25], 0);

	PlayerTextdraws[playerid][Textdraws_Ammu_Nation][26] = CreatePlayerTextDraw(playerid, 92.426696, 188.504501, "_");//p
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][26], 0.413118, 0.157500);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][26], 106.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][26], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][26], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][26], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][26], -1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][26], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][26], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][26], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][26], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][26], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][26], 0);

	PlayerTextdraws[playerid][Textdraws_Ammu_Nation][27] = CreatePlayerTextDraw(playerid, 20.600326, 201.666671, "Precio: $ ~g~2.000");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][27], 0.257569, 1.319999);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][27], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][27], -1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][27], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][27], 1);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][27], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][27], 2);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][27], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][27], 0);

	PlayerTextdraws[playerid][Textdraws_Ammu_Nation][28] = CreatePlayerTextDraw(playerid, 170.527038, 84.850036, "Nivel: ~r~~h~3");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][28], 0.258506, 0.847499);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][28], 3);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][28], -1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][28], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][28], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][28], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][28], 2);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][28], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][28], 0);
 
	/*Textdraw de renta vehiculo*/
	PlayerTextdraws[playerid][Textdraw_Vehicle_Rent][0] = CreatePlayerTextDraw(playerid,140.000000, 346.000000, "_");
	PlayerTextDrawBackgroundColor(playerid,PlayerTextdraws[playerid][Textdraw_Vehicle_Rent][0], 255);
	PlayerTextDrawFont(playerid,PlayerTextdraws[playerid][Textdraw_Vehicle_Rent][0], 1);
	PlayerTextDrawLetterSize(playerid,PlayerTextdraws[playerid][Textdraw_Vehicle_Rent][0], 0.700000, 4.600000);
	PlayerTextDrawColor(playerid,PlayerTextdraws[playerid][Textdraw_Vehicle_Rent][0], -1);
	PlayerTextDrawSetOutline(playerid,PlayerTextdraws[playerid][Textdraw_Vehicle_Rent][0], 0);
	PlayerTextDrawSetProportional(playerid,PlayerTextdraws[playerid][Textdraw_Vehicle_Rent][0], 1);
	PlayerTextDrawSetShadow(playerid,PlayerTextdraws[playerid][Textdraw_Vehicle_Rent][0], 1);
	PlayerTextDrawUseBox(playerid,PlayerTextdraws[playerid][Textdraw_Vehicle_Rent][0], 1);
	PlayerTextDrawBoxColor(playerid,PlayerTextdraws[playerid][Textdraw_Vehicle_Rent][0], 168430280);
	PlayerTextDrawTextSize(playerid,PlayerTextdraws[playerid][Textdraw_Vehicle_Rent][0], 255.000000, 0.000000);
	PlayerTextDrawSetSelectable(playerid,PlayerTextdraws[playerid][Textdraw_Vehicle_Rent][0], 0);

	PlayerTextdraws[playerid][Textdraw_Vehicle_Rent][1] = CreatePlayerTextDraw(playerid,140.000000, 345.000000, "Tiempo del alquiler");
	PlayerTextDrawBackgroundColor(playerid,PlayerTextdraws[playerid][Textdraw_Vehicle_Rent][1], 255);
	PlayerTextDrawFont(playerid,PlayerTextdraws[playerid][Textdraw_Vehicle_Rent][1], 1);
	PlayerTextDrawLetterSize(playerid,PlayerTextdraws[playerid][Textdraw_Vehicle_Rent][1], 0.200000, 1.000000);
	PlayerTextDrawColor(playerid,PlayerTextdraws[playerid][Textdraw_Vehicle_Rent][1], -1);
	PlayerTextDrawSetOutline(playerid,PlayerTextdraws[playerid][Textdraw_Vehicle_Rent][1], 0);
	PlayerTextDrawSetProportional(playerid,PlayerTextdraws[playerid][Textdraw_Vehicle_Rent][1], 1);
	PlayerTextDrawSetShadow(playerid,PlayerTextdraws[playerid][Textdraw_Vehicle_Rent][1], 0);
	PlayerTextDrawSetSelectable(playerid,PlayerTextdraws[playerid][Textdraw_Vehicle_Rent][1], 0);

	PlayerTextdraws[playerid][Textdraw_Vehicle_Rent][2] = CreatePlayerTextDraw(playerid,237.000000, 345.000000, "coste");
	PlayerTextDrawBackgroundColor(playerid,PlayerTextdraws[playerid][Textdraw_Vehicle_Rent][2], 255);
	PlayerTextDrawFont(playerid,PlayerTextdraws[playerid][Textdraw_Vehicle_Rent][2], 1);
	PlayerTextDrawLetterSize(playerid,PlayerTextdraws[playerid][Textdraw_Vehicle_Rent][2], 0.200000, 1.000000);
	PlayerTextDrawColor(playerid,PlayerTextdraws[playerid][Textdraw_Vehicle_Rent][2], -1);
	PlayerTextDrawSetOutline(playerid,PlayerTextdraws[playerid][Textdraw_Vehicle_Rent][2], 0);
	PlayerTextDrawSetProportional(playerid,PlayerTextdraws[playerid][Textdraw_Vehicle_Rent][2], 1);
	PlayerTextDrawSetShadow(playerid,PlayerTextdraws[playerid][Textdraw_Vehicle_Rent][2], 0);
	PlayerTextDrawSetSelectable(playerid,PlayerTextdraws[playerid][Textdraw_Vehicle_Rent][2], 0);

	PlayerTextdraws[playerid][Textdraw_Vehicle_Rent][3] = CreatePlayerTextDraw(playerid,141.000000, 355.000000, "10 segundos");
	PlayerTextDrawBackgroundColor(playerid,PlayerTextdraws[playerid][Textdraw_Vehicle_Rent][3], 255);
	PlayerTextDrawFont(playerid,PlayerTextdraws[playerid][Textdraw_Vehicle_Rent][3], 1);
	PlayerTextDrawLetterSize(playerid,PlayerTextdraws[playerid][Textdraw_Vehicle_Rent][3], 0.200000, 1.000000);
	PlayerTextDrawColor(playerid,PlayerTextdraws[playerid][Textdraw_Vehicle_Rent][3], -1);
	PlayerTextDrawSetOutline(playerid,PlayerTextdraws[playerid][Textdraw_Vehicle_Rent][3], 0);
	PlayerTextDrawSetProportional(playerid,PlayerTextdraws[playerid][Textdraw_Vehicle_Rent][3], 1);
	PlayerTextDrawSetShadow(playerid,PlayerTextdraws[playerid][Textdraw_Vehicle_Rent][3], 0);
	PlayerTextDrawSetSelectable(playerid,PlayerTextdraws[playerid][Textdraw_Vehicle_Rent][3], 0);

	PlayerTextdraws[playerid][Textdraw_Vehicle_Rent][4] = CreatePlayerTextDraw(playerid,255.000000, 355.000000, "~h~~h~~g~$350");
	PlayerTextDrawAlignment(playerid,PlayerTextdraws[playerid][Textdraw_Vehicle_Rent][4], 3);
	PlayerTextDrawBackgroundColor(playerid,PlayerTextdraws[playerid][Textdraw_Vehicle_Rent][4], 255);
	PlayerTextDrawFont(playerid,PlayerTextdraws[playerid][Textdraw_Vehicle_Rent][4], 1);
	PlayerTextDrawLetterSize(playerid,PlayerTextdraws[playerid][Textdraw_Vehicle_Rent][4], 0.200000, 1.000000);
	PlayerTextDrawColor(playerid,PlayerTextdraws[playerid][Textdraw_Vehicle_Rent][4], -1);
	PlayerTextDrawSetOutline(playerid,PlayerTextdraws[playerid][Textdraw_Vehicle_Rent][4], 0);
	PlayerTextDrawSetProportional(playerid,PlayerTextdraws[playerid][Textdraw_Vehicle_Rent][4], 1);
	PlayerTextDrawSetShadow(playerid,PlayerTextdraws[playerid][Textdraw_Vehicle_Rent][4], 0);
	PlayerTextDrawSetSelectable(playerid,PlayerTextdraws[playerid][Textdraw_Vehicle_Rent][4], 0);

	PlayerTextdraws[playerid][Textdraw_Vehicle_Rent][5] = CreatePlayerTextDraw(playerid,140.000000, 371.000000, "Maten pulsado~h~~h~~y~Y~w~ para desrentar");
	PlayerTextDrawBackgroundColor(playerid,PlayerTextdraws[playerid][Textdraw_Vehicle_Rent][5], 255);
	PlayerTextDrawFont(playerid,PlayerTextdraws[playerid][Textdraw_Vehicle_Rent][5], 1);
	PlayerTextDrawLetterSize(playerid,PlayerTextdraws[playerid][Textdraw_Vehicle_Rent][5], 0.200000, 1.000000);
	PlayerTextDrawColor(playerid,PlayerTextdraws[playerid][Textdraw_Vehicle_Rent][5], -1);
	PlayerTextDrawSetOutline(playerid,PlayerTextdraws[playerid][Textdraw_Vehicle_Rent][5], 0);
	PlayerTextDrawSetProportional(playerid,PlayerTextdraws[playerid][Textdraw_Vehicle_Rent][5], 1);
	PlayerTextDrawSetShadow(playerid,PlayerTextdraws[playerid][Textdraw_Vehicle_Rent][5], 0);
	PlayerTextDrawSetSelectable(playerid,PlayerTextdraws[playerid][Textdraw_Vehicle_Rent][5], 0);

	PlayerTextdraws[playerid][Textdraw_Vehicle_Rent][6] = CreatePlayerTextDraw(playerid,140.000000, 379.000000, "el vehiculo.");
	PlayerTextDrawBackgroundColor(playerid,PlayerTextdraws[playerid][Textdraw_Vehicle_Rent][6], 255);
	PlayerTextDrawFont(playerid,PlayerTextdraws[playerid][Textdraw_Vehicle_Rent][6], 1);
	PlayerTextDrawLetterSize(playerid,PlayerTextdraws[playerid][Textdraw_Vehicle_Rent][6], 0.200000, 1.000000);
	PlayerTextDrawColor(playerid,PlayerTextdraws[playerid][Textdraw_Vehicle_Rent][6], -1);
	PlayerTextDrawSetOutline(playerid,PlayerTextdraws[playerid][Textdraw_Vehicle_Rent][6], 0);
	PlayerTextDrawSetProportional(playerid,PlayerTextdraws[playerid][Textdraw_Vehicle_Rent][6], 1);
	PlayerTextDrawSetShadow(playerid,PlayerTextdraws[playerid][Textdraw_Vehicle_Rent][6], 0);
	PlayerTextDrawSetSelectable(playerid,PlayerTextdraws[playerid][Textdraw_Vehicle_Rent][6], 0);
	/*Textdraw de inventario*/
	 
	/**/
	PlayerTextdraws[playerid][Textdrawtutorial] = CreatePlayerTextDraw(playerid, 254.860794, 316.000030, "Inventario: en el se guardan todas las cosas consumibles que compres en los negocios, puedes verlo con la tecla 'Y'");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][Textdrawtutorial], 0.293176, 1.506666);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][Textdrawtutorial], 386.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][Textdrawtutorial], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][Textdrawtutorial], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][Textdrawtutorial], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][Textdrawtutorial], 144);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][Textdrawtutorial], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][Textdrawtutorial], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][Textdrawtutorial], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][Textdrawtutorial], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][Textdrawtutorial], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][Textdrawtutorial], 0);

	PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][0] = CreatePlayerTextDraw(playerid, 204.729110, 129.916671, "BOX");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][0], 0.352679, 18.067508);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][0], 472.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][0], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][0], 0);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][0], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][0], 80);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][0], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][0], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][0], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][0], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][0], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][0], 0);

	PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][1] = CreatePlayerTextDraw(playerid, 274.538513, 252.999969, "Siguiente");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][1], 0.304888, 1.162497);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][1], 324.000000, 10.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][1], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][1], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][1], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][1], 80);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][1], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][1], 1);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][1], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][1], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][1], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][1], 0);
	PlayerTextDrawSetSelectable(playerid,PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][1], true);

	PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][2] = CreatePlayerTextDraw(playerid, 348.396636, 251.699905, "Anterior");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][2], 0.304888, 1.162497);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][2], 395.300018, 10.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][2], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][2], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][2], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][2], 80);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][2], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][2], 1);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][2], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][2], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][2], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][2], 0);
	PlayerTextDrawSetSelectable(playerid,PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][2], true);

	PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][3] = CreatePlayerTextDraw(playerid, 311.866912, 274.000000, "Comprar");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][3], 0.304888, 1.162497);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][3], 359.000305, 10.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][3], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][3], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][3], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][3], 80);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][3], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][3], 1);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][3], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][3], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][3], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][3], 0);
	PlayerTextDrawSetSelectable(playerid,PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][3], true);

	PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][4] = CreatePlayerTextDraw(playerid, 220.021926, 152.666671, "");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][4], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][4], 90.000000, 90.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][4], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][4], -1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][4], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][4], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][4], 80);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][4], 5);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][4], 0);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][4], 0);
	PlayerTextDrawSetPreviewModel(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][4], 411);
	PlayerTextDrawSetPreviewRot(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][4], -20.000000, 10.000000, 30.000000, 1.000000);
	PlayerTextDrawSetPreviewVehCol(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][4], 1, 1);

	PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][5] = CreatePlayerTextDraw(playerid, 323.733581, 154.233169, "BOX2");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][5], 0.514787, 9.457500);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][5], 454.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][5], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][5], 520298240);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][5], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][5], 80);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][5], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][5], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][5], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][5], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][5], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][5], 0);

	PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][6] = CreatePlayerTextDraw(playerid, 265.168121, 155.283157, "~g~~h~~h~Costo:~n~~y~~h~50.000.000");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][6], 0.256630, 1.179998);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][6], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][6], -1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][6], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][6], 1);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][6], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][6], 2);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][6], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][6], 0);

	PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][7] = CreatePlayerTextDraw(playerid, 263.762664, 227.333312, "Infernus");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][7], 0.400000, 1.600000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][7], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][7], -1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][7], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][7], 1);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][7], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][7], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][7], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][7], 0);

	PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][8] = CreatePlayerTextDraw(playerid, 299.838958, 129.916656, "Vehiculos");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][8], 0.489955, 1.932499);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][8], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][8], -1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][8], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][8], 1);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][8], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][8], 3);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][8], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][8], 0);

	PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][9] = CreatePlayerTextDraw(playerid, 203.323562, 129.916702, "linea");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][9], 0.346118, 18.055833);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][9], 202.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][9], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][9], 572661504);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][9], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][9], 255);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][9], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][9], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][9], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][9], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][9], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][9], 0);

	PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][10] = CreatePlayerTextDraw(playerid, 474.128967, 129.916687, "linea");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][10], 0.429515, 18.067501);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][10], 473.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][10], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][10], 572661504);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][10], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][10], 255);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][10], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][10], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][10], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][10], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][10], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][10], 0);

	PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][11] = CreatePlayerTextDraw(playerid, 203.323577, 126.416709, "linea");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][11], 0.385475, -0.091664);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][11], 473.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][11], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][11], 572661504);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][11], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][11], 255);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][11], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][11], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][11], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][11], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][11], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][11], 0);

	PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][12] = CreatePlayerTextDraw(playerid, 204.729141, 293.499969, "linea");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][12], 0.385475, -0.091664);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][12], 470.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][12], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][12], 572661504);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][12], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][12], 255);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][12], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][12], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][12], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][12], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][12], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][12], 0);

	PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][13] = CreatePlayerTextDraw(playerid, 327.013305, 157.333343, "Velocidad:");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][13], 0.204157, 1.086665);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][13], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][13], -1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][13], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][13], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][13], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][13], 2);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][13], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][13], 0);

	PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][14] = CreatePlayerTextDraw(playerid, 327.013336, 170.166625, "Aceite:");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][14], 0.204157, 1.086665);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][14], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][14], -1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][14], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][14], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][14], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][14], 2);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][14], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][14], 0);

	PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][15] = CreatePlayerTextDraw(playerid, 326.076293, 182.416610, "Gasolina:");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][15], 0.204157, 1.086665);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][15], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][15], -1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][15], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][15], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][15], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][15], 2);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][15], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][15], 0);

	PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][16] = CreatePlayerTextDraw(playerid, 326.076293, 195.833251, "Espacio maletero:~r~~h~ 10");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][16], 0.204157, 1.086665);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][16], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][16], -1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][16], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][16], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][16], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][16], 2);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][16], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][16], 0);

	PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][17] = CreatePlayerTextDraw(playerid, 326.076293, 209.249923, "Nivel necesario: ~y~~h~8");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][17], 0.204157, 1.086665);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][17], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][17], -1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][17], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][17], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][17], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][17], 2);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][17], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][17], 0);

	PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][18] = CreatePlayerTextDraw(playerid, 326.076293, 222.450729, "Costo seguro: ~g~~h~~h~5.000");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][18], 0.204157, 1.086665);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][18], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][18], -1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][18], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][18], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][18], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][18], 2);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][18], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][18], 0);

	PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][19] = CreatePlayerTextDraw(playerid, 382.767395, 159.666671, "box velocidad");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][19], 0.231332, 0.654999);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][19], 452.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][19], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][19], 0);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][19], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][19], 96);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][19], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][19], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][19], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][19], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][19], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][19], 0);

	PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][20] = CreatePlayerTextDraw(playerid, 382.767395, 172.767471, "box aceite");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][20], 0.231332, 0.654999);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][20], 452.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][20], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][20], 0);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][20], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][20], 96);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][20], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][20], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][20], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][20], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][20], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][20], 0);

	PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][21] = CreatePlayerTextDraw(playerid, 382.767395, 185.068222, "box basolina");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][21], 0.231332, 0.654999);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][21], 452.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][21], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][21], 0);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][21], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][21], 96);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][21], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][21], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][21], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][21], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][21], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][21], 0);

	PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][22] = CreatePlayerTextDraw(playerid, 384.467498, 162.266830, "V");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][22], 0.231332, 0.135000);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][22], 451.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][22], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][22], 572661504);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][22], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][22], -1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][22], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][22], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][22], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][22], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][22], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][22], 0);

	PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][23] = CreatePlayerTextDraw(playerid, 384.467498, 175.467636, "A");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][23], 0.231332, 0.135000);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][23], 451.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][23], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][23], 572661504);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][23], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][23], -1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][23], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][23], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][23], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][23], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][23], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][23], 0);

	PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][24] = CreatePlayerTextDraw(playerid, 384.467498, 187.468368, "G");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][24], 0.231332, 0.135000);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][24], 451.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][24], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][24], 572661504);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][24], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][24], -1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][24], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][24], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][24], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][24], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][24], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][24], 0);
	/////////////////////////////////////////////
	PlayerTextdraws[playerid][textdraw_statusproducto][0] = CreatePlayerTextDraw(playerid, 520.981079, 175.416656, "box bebida");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_statusproducto][0], 0.319882, 2.311665);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_statusproducto][0], 612.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_statusproducto][0], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_statusproducto][0], 0);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][textdraw_statusproducto][0], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][textdraw_statusproducto][0], 96);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_statusproducto][0], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_statusproducto][0], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_statusproducto][0], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_statusproducto][0], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_statusproducto][0], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_statusproducto][0], 0);

	PlayerTextdraws[playerid][textdraw_statusproducto][1] = CreatePlayerTextDraw(playerid, 524.080322, 188.117431, "box bebida");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_statusproducto][1], 0.323162, 0.281665);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_statusproducto][1], 609.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_statusproducto][1], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_statusproducto][1], 0);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][textdraw_statusproducto][1], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][textdraw_statusproducto][1], 96);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_statusproducto][1], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_statusproducto][1], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_statusproducto][1], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_statusproducto][1], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_statusproducto][1], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_statusproducto][1], 0);

	PlayerTextdraws[playerid][textdraw_statusproducto][2] = CreatePlayerTextDraw(playerid, 524.542907, 189.117477, "b");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_statusproducto][2], 0.321288, 0.036665);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_statusproducto][2], 608.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_statusproducto][2], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_statusproducto][2], 0);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][textdraw_statusproducto][2], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][textdraw_statusproducto][2], -1378294017);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_statusproducto][2], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_statusproducto][2], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_statusproducto][2], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_statusproducto][2], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_statusproducto][2], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_statusproducto][2], 0);

	PlayerTextdraws[playerid][textdraw_statusproducto][3] = CreatePlayerTextDraw(playerid, 564.553649, 174.249984, "Botella de agua");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_statusproducto][3], 0.254758, 1.220833);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_statusproducto][3], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_statusproducto][3], -2139062017);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_statusproducto][3], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_statusproducto][3], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_statusproducto][3], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_statusproducto][3], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_statusproducto][3], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_statusproducto][3], 0);

	PlayerTextdraws[playerid][textdraw_gps] = CreatePlayerTextDraw(playerid,310.000000, 420.000000, "Bony country");
	PlayerTextDrawAlignment(playerid,PlayerTextdraws[playerid][textdraw_gps], 2);
	PlayerTextDrawBackgroundColor(playerid,PlayerTextdraws[playerid][textdraw_gps], 255);
	PlayerTextDrawFont(playerid,PlayerTextdraws[playerid][textdraw_gps], 1);
	PlayerTextDrawLetterSize(playerid,PlayerTextdraws[playerid][textdraw_gps], 0.409999, 1.300000);
	PlayerTextDrawColor(playerid,PlayerTextdraws[playerid][textdraw_gps], -858993584);
	PlayerTextDrawSetOutline(playerid,PlayerTextdraws[playerid][textdraw_gps], 0);
	PlayerTextDrawSetProportional(playerid,PlayerTextdraws[playerid][textdraw_gps], 1);
	PlayerTextDrawSetShadow(playerid,PlayerTextdraws[playerid][textdraw_gps], 0);
	PlayerTextDrawSetSelectable(playerid,PlayerTextdraws[playerid][textdraw_gps], 0);

	PlayerTextdraws[playerid][textdraw_encendido] = CreatePlayerTextDraw(playerid,326.000000, 332.000000, "Encendiendo..");
	PlayerTextDrawAlignment(playerid,PlayerTextdraws[playerid][textdraw_encendido], 2);
	PlayerTextDrawBackgroundColor(playerid,PlayerTextdraws[playerid][textdraw_encendido], 255);
	PlayerTextDrawFont(playerid,PlayerTextdraws[playerid][textdraw_encendido], 1);
	PlayerTextDrawLetterSize(playerid,PlayerTextdraws[playerid][textdraw_encendido], 0.519999, 1.400000);
	PlayerTextDrawColor(playerid,PlayerTextdraws[playerid][textdraw_encendido], -1);
	PlayerTextDrawSetOutline(playerid,PlayerTextdraws[playerid][textdraw_encendido], 0);
	PlayerTextDrawSetProportional(playerid,PlayerTextdraws[playerid][textdraw_encendido], 1);
	PlayerTextDrawSetShadow(playerid,PlayerTextdraws[playerid][textdraw_encendido], 1);
	PlayerTextDrawSetSelectable(playerid,PlayerTextdraws[playerid][textdraw_encendido], 0);

	PlayerTextdraws[playerid][textdraw_ayuda][0] = CreatePlayerTextDraw(playerid,15.000000, 295.000000, "Apuntale al vendedor hasta que te todo el dinero de la caja");
	PlayerTextDrawBackgroundColor(playerid,PlayerTextdraws[playerid][textdraw_ayuda][0], 255);
	PlayerTextDrawFont(playerid,PlayerTextdraws[playerid][textdraw_ayuda][0], 1);
	PlayerTextDrawLetterSize(playerid,PlayerTextdraws[playerid][textdraw_ayuda][0], 0.260000, 1.600000);
	PlayerTextDrawColor(playerid,PlayerTextdraws[playerid][textdraw_ayuda][0], -1);
	PlayerTextDrawSetOutline(playerid,PlayerTextdraws[playerid][textdraw_ayuda][0], 0);
	PlayerTextDrawSetProportional(playerid,PlayerTextdraws[playerid][textdraw_ayuda][0], 1);
	PlayerTextDrawSetShadow(playerid,PlayerTextdraws[playerid][textdraw_ayuda][0], 0);
	PlayerTextDrawUseBox(playerid,PlayerTextdraws[playerid][textdraw_ayuda][0], 1);
	PlayerTextDrawBoxColor(playerid,PlayerTextdraws[playerid][textdraw_ayuda][0], 168430280);
	PlayerTextDrawTextSize(playerid,PlayerTextdraws[playerid][textdraw_ayuda][0], 142.000000, 0.000000);
	PlayerTextDrawSetSelectable(playerid,PlayerTextdraws[playerid][textdraw_ayuda][0], 0);

	PlayerTextdraws[playerid][textdraw_ayuda][1] = CreatePlayerTextDraw(playerid,15.000000, 246.000000, "El vehiculo se a quedado sin gasolina");
	PlayerTextDrawBackgroundColor(playerid,PlayerTextdraws[playerid][textdraw_ayuda][1], 255);
	PlayerTextDrawFont(playerid,PlayerTextdraws[playerid][textdraw_ayuda][1], 1);
	PlayerTextDrawLetterSize(playerid,PlayerTextdraws[playerid][textdraw_ayuda][1], 0.260000, 1.600000);
	PlayerTextDrawColor(playerid,PlayerTextdraws[playerid][textdraw_ayuda][1], -1);
	PlayerTextDrawSetOutline(playerid,PlayerTextdraws[playerid][textdraw_ayuda][1], 0);
	PlayerTextDrawSetProportional(playerid,PlayerTextdraws[playerid][textdraw_ayuda][1], 1);
	PlayerTextDrawSetShadow(playerid,PlayerTextdraws[playerid][textdraw_ayuda][1], 0);
	PlayerTextDrawUseBox(playerid,PlayerTextdraws[playerid][textdraw_ayuda][1], 1);
	PlayerTextDrawBoxColor(playerid,PlayerTextdraws[playerid][textdraw_ayuda][1], 168430280);
	PlayerTextDrawTextSize(playerid,PlayerTextdraws[playerid][textdraw_ayuda][1], 142.000000, 0.000000);
	PlayerTextDrawSetSelectable(playerid,PlayerTextdraws[playerid][textdraw_ayuda][1], 0);

	PlayerTextdraws[playerid][textdraw_ayuda][2] = CreatePlayerTextDraw(playerid,15.000000, 197.000000, "Presiona Y para comprar una bebida");
	PlayerTextDrawBackgroundColor(playerid,PlayerTextdraws[playerid][textdraw_ayuda][2], 255);
	PlayerTextDrawFont(playerid,PlayerTextdraws[playerid][textdraw_ayuda][2], 1);
	PlayerTextDrawLetterSize(playerid,PlayerTextdraws[playerid][textdraw_ayuda][2], 0.260000, 1.600000);
	PlayerTextDrawColor(playerid,PlayerTextdraws[playerid][textdraw_ayuda][2], -1);
	PlayerTextDrawSetOutline(playerid,PlayerTextdraws[playerid][textdraw_ayuda][2], 0);
	PlayerTextDrawSetProportional(playerid,PlayerTextdraws[playerid][textdraw_ayuda][2], 1);
	PlayerTextDrawSetShadow(playerid,PlayerTextdraws[playerid][textdraw_ayuda][2], 0);
	PlayerTextDrawUseBox(playerid,PlayerTextdraws[playerid][textdraw_ayuda][2], 1);
	PlayerTextDrawBoxColor(playerid,PlayerTextdraws[playerid][textdraw_ayuda][2], 168430280);
	PlayerTextDrawTextSize(playerid,PlayerTextdraws[playerid][textdraw_ayuda][2], 142.000000, 0.000000);
	PlayerTextDrawSetSelectable(playerid,PlayerTextdraws[playerid][textdraw_ayuda][2], 0);

	PlayerTextdraws[playerid][textdraw_ayuda][3] = CreatePlayerTextDraw(playerid,320.000000, 368.000000, "Presiona la tecla ~y~T~w~ para hablar en el chat o ejecutar ~y~COMANDOS");
	PlayerTextDrawAlignment(playerid,PlayerTextdraws[playerid][textdraw_ayuda][3], 2);
	PlayerTextDrawBackgroundColor(playerid,PlayerTextdraws[playerid][textdraw_ayuda][3], 255);
	PlayerTextDrawFont(playerid,PlayerTextdraws[playerid][textdraw_ayuda][3], 1);
	PlayerTextDrawLetterSize(playerid,PlayerTextdraws[playerid][textdraw_ayuda][3], 0.280000, 2.000000);
	PlayerTextDrawColor(playerid,PlayerTextdraws[playerid][textdraw_ayuda][3], -1);
	PlayerTextDrawSetOutline(playerid,PlayerTextdraws[playerid][textdraw_ayuda][3], 1);
	PlayerTextDrawSetProportional(playerid,PlayerTextdraws[playerid][textdraw_ayuda][3], 1);
	PlayerTextDrawSetSelectable(playerid,PlayerTextdraws[playerid][textdraw_ayuda][3], 0);

	PlayerTextdraws[playerid][ptextdraw_HOSPITAL][0] = CreatePlayerTextDraw(playerid, 320.000000, 380.000000, "_");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][0], 0.400000, 1.600000);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][0], 0.000000, 100.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][0], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][0], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][0], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][0], 255);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][0], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][0], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][0], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][0], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][0], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][0], 0);

	PlayerTextdraws[playerid][ptextdraw_HOSPITAL][1] = CreatePlayerTextDraw(playerid, 272.000000, 382.000000, "_");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][1], 0.400000, 1.127111);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][1], 368.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][1], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][1], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][1], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][1], -16777123);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][1], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][1], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][1], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][1], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][1], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][1], 0);
	
	PlayerTextdraws[playerid][ptextdraw_HOSPITAL][2] = CreatePlayerTextDraw(playerid, 272.000000, 382.000000, "_");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][2], 0.400000, 1.127111);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][2], 270.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][2], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][2], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][2], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][2], -16777123);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][2], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][2], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][2], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][2], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][2], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][2], 0);
	
	
	PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][0] = CreatePlayerTextDraw(playerid, 320.000000, 350.000000, "I");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][0], 27.410259, 5.897183);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][0], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][0], 145);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][0], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][0], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][0], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][0], 2);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][0], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][0], 0);

	PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][1] = CreatePlayerTextDraw(playerid, 320.000000, 358.000000, "Tienda");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][1], 0.361666, 1.400889);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][1], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][1], -1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][1], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][1], 1);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][1], 90);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][1], 0);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][1], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][1], 0);

	PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2] = CreatePlayerTextDraw(playerid, 320.000000, 377.000000, "COMPRAR");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], 0.193666, 0.915556);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], 10.000000, 34.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], -201); // Money = 9306312   ,  -1459617611  No money
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], 0);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], true);

	PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][3] = CreatePlayerTextDraw(playerid, 363.000000, 377.000000, "SIGUIENTE");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][3], 0.193666, 0.915556);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][3], 10.000000, 34.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][3], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][3], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][3], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][3], -132);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][3], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][3], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][3], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][3], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][3], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][3], 0);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][3], true);

	PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][4] = CreatePlayerTextDraw(playerid, 277.000000, 377.000000, "ANTERIOR");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][4], 0.193666, 0.915556);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][4], 10.000000, 34.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][4], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][4], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][4], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][4], -132);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][4], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][4], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][4], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][4], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][4], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][4], 0);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][4], true);

	PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][5] = CreatePlayerTextDraw(playerid, 320.000000, 398.000000, "Precio:_0$~n~Ropa:_0/0");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][5], 0.171666, 0.782815);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][5], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][5], -86);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][5], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][5], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][5], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][5], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][5], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][5], 0);
	
	PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][0] = CreatePlayerTextDraw(playerid, 320.000000, 298.000000, "l");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][0], 33.579376, 12.750882);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][0], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][0], 172);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][0], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][0], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][0], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][0], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][0], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][0], 0);

	PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][1] = CreatePlayerTextDraw(playerid, 320.000000, 316.000000, "Ropa_del_personaje");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][1], 0.400000, 1.600000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][1], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][1], -81);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][1], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][1], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][1], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][1], 0);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][1], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][1], 0);

	PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][2] = CreatePlayerTextDraw(playerid, 290.000000, 340.000000, "_");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][2], 0.221999, 1.558518);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][2], 0.000000, 50.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][2], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][2], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][2], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][2], -256); // seleccionado -94);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][2], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][2], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][2], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][2], 2);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][2], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][2], 0);

	PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][3] = CreatePlayerTextDraw(playerid, 290.000000, 342.000000, "hombre");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][3], 0.221999, 1.147852);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][3], 13.000000, 47.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][3], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][3], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][3], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][3], -1936945921);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][3], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][3], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][3], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][3], 2);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][3], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][3], 0);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][3], true);

	PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][4] = CreatePlayerTextDraw(playerid, 350.000000, 340.000000, "_");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][4], 0.221999, 1.558518);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][4], 0.000000, 50.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][4], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][4], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][4], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][4], -256);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][4], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][4], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][4], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][4], 2);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][4], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][4], 0);

	PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][5] = CreatePlayerTextDraw(playerid, 350.000000, 342.000000, "mujer");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][5], 0.221999, 1.147852);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][5], 13.000000, 47.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][5], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][5], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][5], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][5], -1936945921);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][5], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][5], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][5], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][5], 2);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][5], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][5], 0);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][5], true);
	
	PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][6] = CreatePlayerTextDraw(playerid, 320.000000, 365.000000, "continuar");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][6], 0.221999, 1.147852);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][6], 13.000000, 50.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][6], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][6], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][6], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][6], -1936945921);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][6], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][6], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][6], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][6], 2);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][6], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][6], 0);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][6], true);

	PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][7] = CreatePlayerTextDraw(playerid, 362.000000, 365.000000, "Seguir");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][7], 0.221999, 1.147852);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][7], 13.000000, 23.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][7], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][7], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][7], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][7], -1936945921);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][7], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][7], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][7], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][7], 2);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][7], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][7], 0);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][7], true);

	PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][8] = CreatePlayerTextDraw(playerid, 278.000000, 365.000000, "<<");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][8], 0.221999, 1.147852);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][8], 13.000000, 23.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][8], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][8], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][8], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][8], -1936945921);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][8], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][8], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][8], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][8], 2);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][8], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][8], 0);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][8], true);

	PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][9] = CreatePlayerTextDraw(playerid, 320.000000, 380.000000, "0/0");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][9], 0.158000, 0.770370);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][9], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][9], -171);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][9], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][9], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][9], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][9], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][9], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][9], 0);

	
	PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][0] = CreatePlayerTextDraw(playerid, 320.000000, 159.000000, "box");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][0], 0.000000, 15.033352);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][0], 0.000000, 240.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][0], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][0], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][0], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][0], 1869574143);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][0], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][0], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][0], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][0], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][0], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][0], 0);

	PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][1] = CreatePlayerTextDraw(playerid, 320.000000, 156.000000, "Tienda");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][1], 0.400000, 1.600000);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][1], 0.000000, 240.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][1], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][1], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][1], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][1], -1633916417);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][1], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][1], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][1], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][1], 0);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][1], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][1], 0);

	PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][2] = CreatePlayerTextDraw(playerid, 215.000000, 184.000000, "");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][2], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][2], 80.000000, 85.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][2], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][2], -1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][2], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][2], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][2], -19201);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][2], 5);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][2], 0);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][2], 0);
	PlayerTextDrawSetPreviewModel(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][2], 18864);
	PlayerTextDrawSetPreviewRot(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][2], 344.000000, 0.000000, 109.000000, 1.000000);

	PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][3] = CreatePlayerTextDraw(playerid, 217.000000, 186.000000, "");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][3], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][3], 76.000000, 81.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][3], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][3], -1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][3], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][3], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][3], -926365441);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][3], 5);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][3], 0);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][3], 0);
	PlayerTextDrawSetPreviewModel(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][3], Toys_Shop[0][shop_toy_model]);
	PlayerTextDrawSetPreviewRot(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][3], 344.000000, 0.000000, 109.000000, 1.000000);

	PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][4] = CreatePlayerTextDraw(playerid, 311.000000, 207.000000, "Modelo:__~n~Precio:__$");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][4], 0.219000, 1.081481);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][4], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][4], -1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][4], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][4], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][4], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][4], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][4], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][4], 0);

	PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5] = CreatePlayerTextDraw(playerid, 363.000000, 233.000000, "Comprar");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5], 0.188333, 1.189333);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5], 13.000000, 50.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5], 1855979775); // sin dinero color = -900267777
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5], 2);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5], 0);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5], true);

	PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][6] = CreatePlayerTextDraw(playerid, 404.000000, 233.000000, "Seguir");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][6], 0.188333, 1.189333);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][6], 13.000000, 20.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][6], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][6], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][6], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][6], -1094795521);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][6], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][6], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][6], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][6], 2);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][6], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][6], 0);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][6], true);

	PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][7] = CreatePlayerTextDraw(playerid, 322.000000, 233.000000, "<<");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][7], 0.188333, 1.189333);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][7], 13.000000, 20.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][7], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][7], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][7], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][7], -1094795521);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][7], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][7], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][7], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][7], 2);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][7], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][7], 0);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][7], true);

	PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][8] = CreatePlayerTextDraw(playerid, 255.000000, 271.000000, "0/0");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][8], 0.163666, 0.832593);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][8], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][8], -66);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][8], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][8], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][8], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][8], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][8], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][8], 0);

	PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][9] = CreatePlayerTextDraw(playerid, 320.000000, 284.000000, "Accesorios");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][9], 0.400000, 1.600000);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][9], 0.000000, 240.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][9], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][9], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][9], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][9], -1633916417);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][9], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][9], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][9], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][9], 0);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][9], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][9], 0);
	
	
	PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][0] = CreatePlayerTextDraw(playerid, 553.000000, 176.000000, "box");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][0], 0.000000, 8.766664);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][0], 0.000000, 108.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][0], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][0], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][0], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][0], 255);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][0], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][0], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][0], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][0], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][0], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][0], 0);

	PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][1] = CreatePlayerTextDraw(playerid, 505.000000, 181.000000, "Interior:_0/0");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][1], 0.300000, 1.438221);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][1], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][1], -1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][1], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][1], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][1], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][1], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][1], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][1], 0);

	PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][2] = CreatePlayerTextDraw(playerid, 505.000000, 206.000000, "Anterior");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][2], 0.300000, 1.438221);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][2], 546.000000, 15.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][2], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][2], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][2], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][2], 1684301055);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][2], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][2], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][2], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][2], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][2], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][2], 0);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][2], true);

	PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][3] = CreatePlayerTextDraw(playerid, 555.000000, 206.000000, "Siguiente");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][3], 0.300000, 1.438221);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][3], 600.000000, 15.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][3], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][3], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][3], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][3], 1684301055);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][3], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][3], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][3], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][3], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][3], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][3], 0);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][3], true);

	PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][4] = CreatePlayerTextDraw(playerid, 505.000000, 230.000000, "Crear");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][4], 0.300000, 1.438221);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][4], 533.000000, 15.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][4], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][4], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][4], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][4], 1684301055);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][4], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][4], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][4], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][4], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][4], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][4], 0);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][4], true);

	PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][5] = CreatePlayerTextDraw(playerid, 542.000000, 230.000000, "Cancelar");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][5], 0.300000, 1.438221);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][5], 583.000000, 15.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][5], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][5], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][5], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][5], 1684301055);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][5], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][5], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][5], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][5], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][5], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][5], 0);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][5], true);
	
	PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][0] = CreatePlayerTextDraw(playerid, 534.568176, 394.750091, "box");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][0], 0.402342, 1.191666);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][0], 632.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][0], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][0], 572661504);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][0], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][0], 112);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][0], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][0], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][0], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][0], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][0], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][0], 0);

	PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][1] = CreatePlayerTextDraw(playerid, 536.273925, 395.750061, "hud:radar_hostpital");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][1], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][1], 9.000000, 11.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][1], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][1], -1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][1], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][1], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][1], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][1], 4);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][1], 0);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][1], 0);

	PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][2] = CreatePlayerTextDraw(playerid, 549.729553, 399.700073, "box");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][2], 0.407496, 0.145000);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][2], 629.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][2], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][2], 572661504);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][2], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][2], 112);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][2], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][2], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][2], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][2], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][2], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][2], 0);

	PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][3] = CreatePlayerTextDraw(playerid, 549.729553, 399.700073, "_");//Barra de vida
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][3], 0.404216, 0.170833);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][3], 629.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][3], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][3], 572661504);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][3], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][3], -2147483393);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][3], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][3], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][3], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][3], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][3], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][3], 0);

	PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][4] = CreatePlayerTextDraw(playerid, 571.112365, 375.016174, "box gasolina");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][4], 0.167613, 1.596667);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][4], 632.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][4], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][4], 572661504);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][4], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][4], 112);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][4], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][4], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][4], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][4], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][4], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][4], 0);

	PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][5] = CreatePlayerTextDraw(playerid, 571.112365, 375.416198, "box g peque");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][5], 0.146529, 0.135834);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][5], 632.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][5], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][5], 572661504);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][5], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][5], 112);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][5], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][5], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][5], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][5], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][5], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][5], 0);

	PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][6] = CreatePlayerTextDraw(playerid, 571.112365, 374.816162, "_");//Barra de gasolina
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][6], 0.146529, 0.185001);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][6], 632.000000, -0.190000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][6], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][6], 572661504);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][6], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][6], -5963521);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][6], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][6], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][6], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][6], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][6], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][6], 0);

	PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][7] = CreatePlayerTextDraw(playerid, 571.112365, 353.614868, "box aceite");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][7], 0.167144, 1.722501);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][7], 632.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][7], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][7], 572661504);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][7], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][7], 112);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][7], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][7], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][7], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][7], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][7], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][7], 0);

	PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][8] = CreatePlayerTextDraw(playerid, 571.112365, 354.514923, "box aceite p");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][8], 0.146529, 0.015834);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][8], 632.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][8], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][8], 572661504);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][8], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][8], 112);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][8], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][8], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][8], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][8], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][8], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][8], 0);

	PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][9] = CreatePlayerTextDraw(playerid, 571.112365, 353.714874, "_");//Barra de aceite
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][9], 0.146529, 0.135834);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][9], 632.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][9], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][9], 572661504);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][9], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][9], -1378294017);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][9], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][9], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][9], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][9], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][9], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][9], 0);

	PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][10] = CreatePlayerTextDraw(playerid, 534.568176, 353.747589, "box velo");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][10], 0.402342, 1.981666);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][10], 566.799804, 0.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][10], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][10], 572661504);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][10], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][10], 112);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][10], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][10], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][10], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][10], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][10], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][10], 0);

	PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][11] = CreatePlayerTextDraw(playerid, 551.434631, 357.866851, "154");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][11], 0.415929, 2.405000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][11], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][11], -1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][11], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][11], 1);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][11], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][11], 3);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][11], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][11], 0);

	PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][12] = CreatePlayerTextDraw(playerid, 538.778930, 378.366943, "KM/H");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][12], 0.163865, 1.080833);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][12], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][12], 255);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][12], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][12], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][12], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][12], 2);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][12], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][12], 0);

	PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][13] = CreatePlayerTextDraw(playerid, 603.244689, 376.333587, "");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][13], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][13], -23.000000, 18.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][13], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][13], 255);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][13], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][13], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][13], 572661504);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][13], 5);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][13], 0);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][13], 0);
	PlayerTextDrawSetPreviewModel(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][13], 1650);
	PlayerTextDrawSetPreviewRot(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][13], 0.000000, 0.000000, 0.000000, 1.000000);

	PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][14] = CreatePlayerTextDraw(playerid, 599.770935, 379.550140, "Gas");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][14], 0.245856, 1.290832);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][14], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][14], -2139062017);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][14], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][14], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][14], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][14], 2);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][14], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][14], 0);

	PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][15] = CreatePlayerTextDraw(playerid, 555.014831, 351.833404, "");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][15], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][15], 34.000000, 24.490011);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][15], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][15], 255);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][15], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][15], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][15], 572661504);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][15], 5);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][15], 0);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][15], 0);
	PlayerTextDrawSetPreviewModel(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][15], 19621);
	PlayerTextDrawSetPreviewRot(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][15], 0.000000, 0.000000, -90.000000, 1.000000);

	PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][16] = CreatePlayerTextDraw(playerid, 587.042480, 359.749969, "Aceite");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][16], 0.244450, 1.092499);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][16], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][16], -2139062017);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][16], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][16], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][16], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][16], 2);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][16], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][16], 0);

	PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][17] = CreatePlayerTextDraw(playerid, 576.566894, 296.750000, "");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][17], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][17], 49.000000, 68.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][17], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][17], -1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][17], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][17], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][17], 572661504);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][17], 5);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][17], 0);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][17], 0);
	PlayerTextDrawSetPreviewModel(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][17], 411);
	PlayerTextDrawSetPreviewRot(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][17], 0.000000, 0.000000, -90.000000, 1.000000);
	PlayerTextDrawSetPreviewVehCol(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][17], 2, 33);

	PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][18] = CreatePlayerTextDraw(playerid, 563.616455, 337.583404, "Infernus");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][18], 0.366266, 1.063333);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][18], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][18], 255);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][18], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][18], 1);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][18], -1378294017);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][18], 0);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][18], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][18], 0);

	PlayerTextdraws[playerid][ptextdraw_TAXI_METER][0] = CreatePlayerTextDraw(playerid, 490.058837, 225.583297, "I");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_TAXI_METER][0], 15.816685, 12.280832);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_TAXI_METER][0], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_TAXI_METER][0], 128);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TAXI_METER][0], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_TAXI_METER][0], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_TAXI_METER][0], 96);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_TAXI_METER][0], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_TAXI_METER][0], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TAXI_METER][0], 0);

	PlayerTextdraws[playerid][ptextdraw_TAXI_METER][1] = CreatePlayerTextDraw(playerid, 623.587646, 261.166625, "Tarifa:_14$/Km~n~~n~Recorrido:_0.0_Km~n~A_pagar:_0$~n~");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_TAXI_METER][1], 0.204158, 1.109999);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_TAXI_METER][1], 3);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_TAXI_METER][1], -2139062017);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TAXI_METER][1], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_TAXI_METER][1], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_TAXI_METER][1], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_TAXI_METER][1], 2);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_TAXI_METER][1], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TAXI_METER][1], 0);

	PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][0] = CreatePlayerTextDraw(playerid, 320.000000, 317.000000, "Cargando_cami¦n...");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][0], 0.255666, 1.176888);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][0], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][0], -1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][0], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][0], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][0], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][0], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][0], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][0], 0);

	PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][1] = CreatePlayerTextDraw(playerid, 250.000000, 332.000000, "Borde");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][1], 0.000000, 3.766666);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][1], 390.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][1], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][1], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][1], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][1], 255);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][1], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][1], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][1], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][1], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][1], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][1], 0);

	PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][2] = CreatePlayerTextDraw(playerid, 253.000000, 336.000000, "Abajo");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][2], 0.000000, 2.866667);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][2], 387.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][2], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][2], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][2], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][2], -594542436);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][2], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][2], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][2], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][2], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][2], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][2], 0);

	PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][3] = CreatePlayerTextDraw(playerid, 253.000000, 336.000000, "Sellena");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][3], 0.000000, 2.866667);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][3], 250.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][3], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][3], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][3], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][3], -594542357);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][3], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][3], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][3], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][3], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][3], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][3], 0);
	
	
	PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][0] = CreatePlayerTextDraw(playerid, 320.000000, 315.000000, "");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][0], 0.298999, 1.483852);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][0], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][0], -161);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][0], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][0], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][0], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][0], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][0], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][0], 0);

	PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][1] = CreatePlayerTextDraw(playerid, 320.000000, 333.000000, "box");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][1], 0.000000, 0.766669);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][1], 0.000000, 130.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][1], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][1], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][1], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][1], 2021161125);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][1], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][1], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][1], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][1], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][1], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][1], 0);

	PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][2] = CreatePlayerTextDraw(playerid, 320.000000, 333.000000, "box");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][2], 0.000000, 0.766669);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][2], 0.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][2], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][2], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][2], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][2], 1988896255);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][2], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][2], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][2], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][2], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][2], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][2], 0);

	
	PlayerTextdraws[playerid][ptextdraw_PLANT_PLANT][0] = CreatePlayerTextDraw(playerid, 260.000000, 350.000000, "Borde");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_PLANT_PLANT][0], 0.000000, 2.633335);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_PLANT_PLANT][0], 380.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_PLANT_PLANT][0], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_PLANT_PLANT][0], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_PLANT_PLANT][0], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_PLANT_PLANT][0], 110);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_PLANT_PLANT][0], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_PLANT_PLANT][0], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_PLANT_PLANT][0], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_PLANT_PLANT][0], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_PLANT_PLANT][0], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_PLANT_PLANT][0], 0);

	PlayerTextdraws[playerid][ptextdraw_PLANT_PLANT][1] = CreatePlayerTextDraw(playerid, 260.000000, 353.000000, "Lleno");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_PLANT_PLANT][1], 0.000000, 1.933335);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_PLANT_PLANT][1], 380.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_PLANT_PLANT][1], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_PLANT_PLANT][1], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_PLANT_PLANT][1], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_PLANT_PLANT][1], 12216722);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_PLANT_PLANT][1], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_PLANT_PLANT][1], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_PLANT_PLANT][1], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_PLANT_PLANT][1], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_PLANT_PLANT][1], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_PLANT_PLANT][1], 0);

	PlayerTextdraws[playerid][ptextdraw_PLANT_PLANT][2] = CreatePlayerTextDraw(playerid, 260.000000, 353.000000, "Sellena");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_PLANT_PLANT][2], 0.000000, 1.933335);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_PLANT_PLANT][2], 260.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_PLANT_PLANT][2], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_PLANT_PLANT][2], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_PLANT_PLANT][2], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_PLANT_PLANT][2], 12216831);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_PLANT_PLANT][2], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_PLANT_PLANT][2], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_PLANT_PLANT][2], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_PLANT_PLANT][2], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_PLANT_PLANT][2], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_PLANT_PLANT][2], 0);

	PlayerTextdraws[playerid][ptextdraw_PLANT_PLANT][3] = CreatePlayerTextDraw(playerid, 320.000000, 335.000000, "Plantando...");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_PLANT_PLANT][3], 0.213333, 1.131259);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_PLANT_PLANT][3], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_PLANT_PLANT][3], -111);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_PLANT_PLANT][3], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_PLANT_PLANT][3], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_PLANT_PLANT][3], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_PLANT_PLANT][3], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_PLANT_PLANT][3], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_PLANT_PLANT][3], 0);
	
	PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][0] = CreatePlayerTextDraw(playerid, 275.000000, 325.000000, "+_Publicar_anuncio");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][0], 0.223666, 1.139557);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][0], 10.000000, 80.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][0], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][0], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][0], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][0], 190);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][0], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][0], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][0], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][0], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][0], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][0], 0);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][0], true);

	PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][1] = CreatePlayerTextDraw(playerid, 365.000000, 325.000000, "-_Mis_anuncios");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][1], 0.223666, 1.139557);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][1], 10.000000, 80.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][1], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][1], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][1], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][1], 190);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][1], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][1], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][1], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][1], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][1], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][1], 0);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][1], true);

	PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][2] = CreatePlayerTextDraw(playerid, 320.000000, 307.000000, "Cerrar");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][2], 0.223666, 1.139557);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][2], 10.000000, 50.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][2], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][2], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][2], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][2], 190);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][2], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][2], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][2], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][2], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][2], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][2], 0);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][2], true);

	PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][3] = CreatePlayerTextDraw(playerid, 380.000000, 307.000000, "Siguiente");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][3], 0.223666, 1.139557);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][3], 10.000000, 50.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][3], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][3], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][3], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][3], 190);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][3], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][3], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][3], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][3], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][3], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][3], 0);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][3], true);

	PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][4] = CreatePlayerTextDraw(playerid, 260.000000, 307.000000, "Anterior");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][4], 0.223666, 1.139557);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][4], 10.000000, 50.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][4], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][4], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][4], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][4], 190);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][4], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][4], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][4], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][4], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][4], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][4], 0);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][4], true);
	
	PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PAGE] = CreatePlayerTextDraw(playerid, 320.000000, 134.000000, "-_0/0_-");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PAGE], 0.169000, 0.766222);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PAGE], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PAGE], -1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PAGE], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PAGE], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PAGE], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PAGE], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PAGE], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PAGE], 0);
	
	PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_NUMBER] = CreatePlayerTextDraw(playerid, 320.000000, 152.000000, "");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_NUMBER], 0.214666, 0.936296);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_NUMBER], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_NUMBER], -1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_NUMBER], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_NUMBER], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_NUMBER], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_NUMBER], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_NUMBER], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_NUMBER], 0);

	PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_INFO] = CreatePlayerTextDraw(playerid, 321.000000, 181.000000, "");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_INFO], 0.259333, 1.181036);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_INFO], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_INFO], -36);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_INFO], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_INFO], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_INFO], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_INFO], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_INFO], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_INFO], 0);
	
	PlayerTextdraws[playerid][ptextdraw_TUNING_SHOP] = CreatePlayerTextDraw(playerid, 320.000000, 350.000000, "Objeto:_0/0~n~Precio:_0$");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_TUNING_SHOP], 0.200333, 1.098074);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_TUNING_SHOP], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_TUNING_SHOP], -121);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TUNING_SHOP], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_TUNING_SHOP], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_TUNING_SHOP], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_TUNING_SHOP], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_TUNING_SHOP], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TUNING_SHOP], 0);
	
	
	PlayerTextdraws[playerid][ptextdraw_MESSAGE] = CreatePlayerTextDraw(playerid, 320.000000, 365.000000, "_");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_MESSAGE], 0.298333, 1.376000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_MESSAGE], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_MESSAGE], -1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_MESSAGE], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_MESSAGE], 1);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_MESSAGE], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_MESSAGE], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_MESSAGE], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_MESSAGE], 0);
	
	PlayerTextdraws[playerid][ptextdraw_HUD][0] = CreatePlayerTextDraw(playerid, 0.001543, 439.833526, "_");//Barra reputacion
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][0], 0.400936, 0.345831);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][0], 145.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][0], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][0], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][0], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][0], -1523963137);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][0], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][0], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][0], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][0], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][0], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][0], 0);

	PlayerTextdraws[playerid][ptextdraw_HUD][1] = CreatePlayerTextDraw(playerid, 521.256774, 111.266769, "_");//Barrahambre
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][1], 0.410306, 0.188332);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][1], 521.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][1], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][1], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][1], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][1], 8388863);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][1], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][1], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][1], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][1], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][1], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][1], 0);

	PlayerTextdraws[playerid][ptextdraw_HUD][2] = CreatePlayerTextDraw(playerid, 521.086608, 120.516845, "_");//BarraSed
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][2], 0.410055, 0.124164);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][2], 521.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][2], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][2], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][2], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][2], -5963521);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][2], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][2], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][2], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][2], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][2], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][2], 0);

	PlayerTextdraws[playerid][ptextdraw_HUD][3] = CreatePlayerTextDraw(playerid, 46.913681, 424.500122, "Nivel: ~y~0~w~ Exp: ~y~(0 / 0 )");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][3], 0.223367, 1.086665);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][3], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][3], -1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][3], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][3], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][3], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][3], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][3], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][3], 0);

	PlayerTextdraws[playerid][ptextdraw_HUD][4] = CreatePlayerTextDraw(playerid, 520.512451, 132.833343, "Banco: ~g~1.291.219");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][4], 0.283338, 1.185832);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][4], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][4], -1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][4], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][4], 1);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][4], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][4], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][4], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][4], 0);
	//

	PlayerTextdraws[playerid][texdrawsbarras][0] = CreatePlayerTextDraw(playerid, 521.328979, 111.183204, "box grande hambre");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][texdrawsbarras][0], 0.274434, 1.162497);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][texdrawsbarras][0], 611.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][texdrawsbarras][0], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][texdrawsbarras][0], 572661504);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][texdrawsbarras][0], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][texdrawsbarras][0], 128);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][texdrawsbarras][0], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][texdrawsbarras][0], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][texdrawsbarras][0], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][texdrawsbarras][0], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][texdrawsbarras][0], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][texdrawsbarras][0], 0);

	PlayerTextdraws[playerid][texdrawsbarras][1] = CreatePlayerTextDraw(playerid, 521.449035, 111.250007, "_");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][texdrawsbarras][1], 0.406089, 0.170827);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][texdrawsbarras][1], 611.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][texdrawsbarras][1], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][texdrawsbarras][1], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][texdrawsbarras][1], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][texdrawsbarras][1], 80);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][texdrawsbarras][1], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][texdrawsbarras][1], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][texdrawsbarras][1], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][texdrawsbarras][1], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][texdrawsbarras][1], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][texdrawsbarras][1], 0);

	PlayerTextdraws[playerid][texdrawsbarras][2] = CreatePlayerTextDraw(playerid, 521.256774, 111.266769, "_");//Barra hambre
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][texdrawsbarras][2], 0.410306, 0.188332);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][texdrawsbarras][2], 522.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][texdrawsbarras][2], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][texdrawsbarras][2], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][texdrawsbarras][2], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][texdrawsbarras][2], -1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][texdrawsbarras][2], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][texdrawsbarras][2], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][texdrawsbarras][2], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][texdrawsbarras][2], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][texdrawsbarras][2], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][texdrawsbarras][2], 0);

	PlayerTextdraws[playerid][texdrawsbarras][3] = CreatePlayerTextDraw(playerid, 521.092102, 126.982917, "box s p");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][texdrawsbarras][3], 0.407027, 0.135830);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][texdrawsbarras][3], 611.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][texdrawsbarras][3], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][texdrawsbarras][3], 572661504);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][texdrawsbarras][3], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][texdrawsbarras][3], 80);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][texdrawsbarras][3], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][texdrawsbarras][3], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][texdrawsbarras][3], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][texdrawsbarras][3], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][texdrawsbarras][3], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][texdrawsbarras][3], 0);

	PlayerTextdraws[playerid][texdrawsbarras][4] = CreatePlayerTextDraw(playerid, 572.518554, 145.666702, "Cansancio");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][texdrawsbarras][4], 0.211186, 1.069166);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][texdrawsbarras][4], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][texdrawsbarras][4], -2139062017);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][texdrawsbarras][4], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][texdrawsbarras][4], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][texdrawsbarras][4], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][texdrawsbarras][4], 2);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][texdrawsbarras][4], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][texdrawsbarras][4], 0);

	PlayerTextdraws[playerid][texdrawsbarras][5] = CreatePlayerTextDraw(playerid, 547.950378, 115.699958, "hud:radar_datefood");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][texdrawsbarras][5], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][texdrawsbarras][5], 10.000000, 7.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][texdrawsbarras][5], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][texdrawsbarras][5], -5963521);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][texdrawsbarras][5], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][texdrawsbarras][5], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][texdrawsbarras][5], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][texdrawsbarras][5], 4);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][texdrawsbarras][5], 0);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][texdrawsbarras][5], 0);

	PlayerTextdraws[playerid][texdrawsbarras][6] = CreatePlayerTextDraw(playerid, 548.613281, 130.366607, "hud:radar_centre");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][texdrawsbarras][6], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][texdrawsbarras][6], 8.000000, 8.640014);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][texdrawsbarras][6], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][texdrawsbarras][6], 16777215);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][texdrawsbarras][6], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][texdrawsbarras][6], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][texdrawsbarras][6], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][texdrawsbarras][6], 4);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][texdrawsbarras][6], 0);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][texdrawsbarras][6], 0);

	PlayerTextdraws[playerid][texdrawsbarras][7] = CreatePlayerTextDraw(playerid, 557.994079, 115.333320, "Hambre");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][texdrawsbarras][7], 0.217276, 0.841666);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][texdrawsbarras][7], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][texdrawsbarras][7], -2139062017);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][texdrawsbarras][7], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][texdrawsbarras][7], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][texdrawsbarras][7], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][texdrawsbarras][7], 2);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][texdrawsbarras][7], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][texdrawsbarras][7], 0);

	PlayerTextdraws[playerid][texdrawsbarras][8] = CreatePlayerTextDraw(playerid, 521.328979, 142.583831, "box grande cansansio");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][texdrawsbarras][8], 0.289895, 0.707497);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][texdrawsbarras][8], 611.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][texdrawsbarras][8], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][texdrawsbarras][8], 572661504);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][texdrawsbarras][8], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][texdrawsbarras][8], 128);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][texdrawsbarras][8], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][texdrawsbarras][8], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][texdrawsbarras][8], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][texdrawsbarras][8], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][texdrawsbarras][8], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][texdrawsbarras][8], 0);

	PlayerTextdraws[playerid][texdrawsbarras][9] = CreatePlayerTextDraw(playerid, 521.092041, 142.784149, "box p c");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][texdrawsbarras][9], 0.407027, 0.135830);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][texdrawsbarras][9], 611.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][texdrawsbarras][9], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][texdrawsbarras][9], 572661504);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][texdrawsbarras][9], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][texdrawsbarras][9], 80);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][texdrawsbarras][9], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][texdrawsbarras][9], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][texdrawsbarras][9], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][texdrawsbarras][9], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][texdrawsbarras][9], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][texdrawsbarras][9], 0);

	PlayerTextdraws[playerid][texdrawsbarras][10] = CreatePlayerTextDraw(playerid, 521.328979, 126.682968, "box grande sed");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][texdrawsbarras][10], 0.448255, 0.579164);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][texdrawsbarras][10], 611.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][texdrawsbarras][10], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][texdrawsbarras][10], 572661504);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][texdrawsbarras][10], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][texdrawsbarras][10], 128);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][texdrawsbarras][10], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][texdrawsbarras][10], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][texdrawsbarras][10], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][texdrawsbarras][10], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][texdrawsbarras][10], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][texdrawsbarras][10], 0);

	PlayerTextdraws[playerid][texdrawsbarras][11] = CreatePlayerTextDraw(playerid, 558.462646, 131.083343, "Sed");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][texdrawsbarras][11], 0.217276, 0.841666);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][texdrawsbarras][11], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][texdrawsbarras][11], -2139062017);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][texdrawsbarras][11], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][texdrawsbarras][11], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][texdrawsbarras][11], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][texdrawsbarras][11], 2);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][texdrawsbarras][11], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][texdrawsbarras][11], 0);

	PlayerTextdraws[playerid][texdrawsbarras][12] = CreatePlayerTextDraw(playerid, 521.086608, 126.916755, "_");//Barra sed
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][texdrawsbarras][12], 0.410055, 0.124164);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][texdrawsbarras][12], 521.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][texdrawsbarras][12], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][texdrawsbarras][12], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][texdrawsbarras][12], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][texdrawsbarras][12], -1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][texdrawsbarras][12], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][texdrawsbarras][12], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][texdrawsbarras][12], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][texdrawsbarras][12], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][texdrawsbarras][12], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][texdrawsbarras][12], 0);

	PlayerTextdraws[playerid][texdrawsbarras][13] = CreatePlayerTextDraw(playerid, 521.086608, 142.917648, "_");//Barra cansancio
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][texdrawsbarras][13], 0.410055, 0.124164);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][texdrawsbarras][13], 521.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][texdrawsbarras][13], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][texdrawsbarras][13], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][texdrawsbarras][13], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][texdrawsbarras][13], -1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][texdrawsbarras][13], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][texdrawsbarras][13], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][texdrawsbarras][13], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][texdrawsbarras][13], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][texdrawsbarras][13], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][texdrawsbarras][13], 0);

	PlayerTextdraws[playerid][texdrawsbarras][14] = CreatePlayerTextDraw(playerid, 539.430908, 146.399932, "hud:radar_gangy");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][texdrawsbarras][14], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][texdrawsbarras][14], 8.430009, 10.170026);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][texdrawsbarras][14], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][texdrawsbarras][14], -16711681);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][texdrawsbarras][14], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][texdrawsbarras][14], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][texdrawsbarras][14], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][texdrawsbarras][14], 4);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][texdrawsbarras][14], 0);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][texdrawsbarras][14], 0);

	 
	return 1;
}

DestroyPlayerTextDraws(playerid)
{
	for(new i; i < sizeof(PlayerTextdraws[]); i++)
	{
		if(PlayerTextdraws[playerid][Player_Textdraws_Enum:i] == INVALID_TEXT_DRAW) continue;
		PlayerTextDrawDestroy(playerid, PlayerText:PlayerTextdraws[playerid][Player_Textdraws_Enum:i]);
		PlayerTextdraws[playerid][Player_Textdraws_Enum:i] = INVALID_TEXT_DRAW;
	}
	return 1;
}
  
public OnPlayerClickTextDraw(playerid, Text:clickedid)
{
	if (!AntiSpamFuncion(playerid, 1)) return 1;
	
	if(PLAYER_TEMP[playerid][pt_MENU_APARTAMeNTO])
	{
		new id=ENAPARTAMENTO[playerid];
		new Estado[25];
		if(APARTAMENTO[id][CasaDuenoID] != ACCOUNT_INFO[playerid][ac_ID])
		{
			Hide_Menu_Casa(playerid);
			MensajesAyuda(playerid,"No eres el propietario de esta propiedad");
			return 1;
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_menu_apartamento][2])
		{
 			Hide_Menu_Apartamento(playerid);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_menu_apartamento][3])
		{
 			Hide_Menu_Apartamento(playerid);
 			Select_Interior_Apartamento(playerid);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_menu_apartamento][4])
		{
			Hide_Menu_Apartamento(playerid);
 			ShowPlayerDialog(playerid, DIALOG_MANAGEAPARTAMENTOSELECT, DIALOG_STYLE_LIST,"Opciones mapear","Comprar muebles\nEditar muebles\nBorrar muebles","Seguir","Cancelar");
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_menu_apartamento][5])
		{
			Hide_Menu_Apartamento(playerid);
 			ShowPlayerDialog(playerid,DIALOG_APARTAMENTOMENULLAVES,DIALOG_STYLE_LIST,"Llaves","Dar llaves\nRemover llaves", "Seguir", "Cancelar");
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_menu_apartamento][6])
		{
			Hide_Menu_Apartamento(playerid);
 			ManageDejarPasarApartamento(playerid);
		}	
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_menu_apartamento][7])
		{
			Hide_Menu_Apartamento(playerid);
 			format(string2,sizeof(string2),"Vender el apartamento por $%s\nVender el apartamento a un jugador",number_format_thousand(APARTAMENTO[id][PRECIO]/2));
			ShowPlayerDialog(playerid,DIALOG_APARTAMENTOVENDER,DIALOG_STYLE_LIST,"| Vender apartamento |",string2, "Seguir", "Cancelar");
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_menu_apartamento][8])
		{
			new DB_Query[80];
			if(APARTAMENTO[id][Lock]==0)
			{
				APARTAMENTO[id][Lock]=1;
				format(DB_Query, sizeof DB_Query, "UPDATE `APARTAMENTOS` SET CANDADO='1' WHERE `ID` = '%d';",id);
				db_query(_DB_, DB_Query);
			}
			else
			{
				APARTAMENTO[id][Lock]=0;
				format(DB_Query, sizeof DB_Query, "UPDATE `APARTAMENTOS` SET CANDADO='0' WHERE `ID` = '%d';",id);
				db_query(_DB_, DB_Query);
			}
			switch(CASAVIP[id][Lock])
			{
				case 0:Estado="Puerta: ~g~Abierta";
				case 1:Estado="Puerta: ~r~Cerrada";
			}
			TextDrawSetString(Jugador_Textdraws[playerid][textdraw_menu_apartamento][8], Estado);
			TextDrawShowForPlayer(playerid, Jugador_Textdraws[playerid][textdraw_menu_apartamento][8]);
			SelectTextDraw(playerid,SELEC_TEXTDRAW);
		}
 
	}
	if(PLAYER_TEMP[playerid][pt_CHANGE_INTERIOR])
	{
		if(clickedid == Jugador_Textdraws[playerid][textdraw_interior_apartamento][2])
		{
			Hide_Sel_Int_Aparto(playerid);
			for(new i=0; i < 10; i++) TextDrawShowForPlayer(playerid, Jugador_Textdraws[playerid][textdraw_menu_apartamento][i]);
			PLAYER_TEMP[playerid][pt_MENU_APARTAMeNTO]=true;
			SelectTextDraw(playerid,SELEC_TEXTDRAW);
		}
		if(clickedid == Jugador_Textdraws[playerid][textdraw_interior_apartamento][3])
		{
			Hide_Sel_Int_Aparto(playerid);
			PLAYER_TEMP[playerid][pt_VIENDO_TEXTURA] = VIENDO_PAREDES;
			PLAYER_TEMP[playerid][pt_TEXTURA_APARTAMENTO]=true;
			ShowTexturasForCasa(playerid);
		}
		if(clickedid == Jugador_Textdraws[playerid][textdraw_interior_apartamento][4])
		{
			Hide_Sel_Int_Aparto(playerid);
			PLAYER_TEMP[playerid][pt_VIENDO_TEXTURA] = VIENDO_PISO;
			PLAYER_TEMP[playerid][pt_TEXTURA_APARTAMENTO]=true;
			ShowTexturasForCasa(playerid);
		}
		if(clickedid == Jugador_Textdraws[playerid][textdraw_interior_apartamento][5])
		{
			Hide_Sel_Int_Aparto(playerid);
			PLAYER_TEMP[playerid][pt_VIENDO_TEXTURA] = VIENDO_TECHO;
			PLAYER_TEMP[playerid][pt_TEXTURA_APARTAMENTO]=true;
			ShowTexturasForCasa(playerid);
		}
		if(clickedid == Jugador_Textdraws[playerid][textdraw_interior_apartamento][6])
		{
			Hide_Sel_Int_Aparto(playerid);
			PLAYER_TEMP[playerid][pt_VIENDO_TEXTURA] = VIENDO_PUERTAS;
			PLAYER_TEMP[playerid][pt_TEXTURA_APARTAMENTO]=true;
			ShowTexturasForCasa(playerid);
		}
		if(clickedid == Jugador_Textdraws[playerid][textdraw_interior_apartamento][7])
		{
			Hide_Sel_Int_Aparto(playerid);
			PLAYER_TEMP[playerid][pt_VIENDO_TEXTURA] = VIENDO_CAMAS;
			PLAYER_TEMP[playerid][pt_TEXTURA_APARTAMENTO]=true;
			ShowTexturasForCasa(playerid);
		}
		if(clickedid == Jugador_Textdraws[playerid][textdraw_interior_apartamento][8])
		{
			Hide_Sel_Int_Aparto(playerid);
			PLAYER_TEMP[playerid][pt_VIENDO_TEXTURA] = VIENDO_COCINA;
			PLAYER_TEMP[playerid][pt_TEXTURA_APARTAMENTO]=true;
			ShowTexturasForCasa(playerid);
		}
		if(clickedid == Jugador_Textdraws[playerid][textdraw_interior_apartamento][9])
		{
			Hide_Sel_Int_Aparto(playerid);
			PLAYER_TEMP[playerid][pt_VIENDO_TEXTURA] = VIENDO_ESTANTERIA;
			PLAYER_TEMP[playerid][pt_TEXTURA_APARTAMENTO]=true;
			ShowTexturasForCasa(playerid);
		}
		if(clickedid == Jugador_Textdraws[playerid][textdraw_interior_apartamento][10])
		{
			Hide_Sel_Int_Aparto(playerid);
			PLAYER_TEMP[playerid][pt_VIENDO_TEXTURA] = VIENDO_ARMARIO;
			PLAYER_TEMP[playerid][pt_TEXTURA_APARTAMENTO]=true;
			ShowTexturasForCasa(playerid);
		}
 		if(clickedid == Jugador_Textdraws[playerid][textdraw_interior_apartamento][11])
		{
			Hide_Sel_Int_Aparto(playerid);
			PLAYER_TEMP[playerid][pt_VIENDO_TEXTURA] = VIENDO_EQUIPO;
			PLAYER_TEMP[playerid][pt_TEXTURA_APARTAMENTO]=true;
			ShowTexturasForCasa(playerid);
		}
	}
	if(PLAYER_TEMP[playerid][ABRIO_ARMERIA_DEPA] == true)
	{
		if(TIRAR_INVENTARIO[playerid]==true) return SendClientMessage(playerid,-1,"Cierra el menu de tirar");
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_armeria][28])
		{
			Hide_Armeria_Depa(playerid);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_armeria][15])
		{
			if(TO_INVENTARIO_X[playerid][ ID ][ 15 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Estanteria_To_Inv_Depa(playerid,15);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_armeria][16])
		{
			if(TO_INVENTARIO_X[playerid][ ID ][ 16 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Estanteria_To_Inv_Depa(playerid,16);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_armeria][17])
		{
			if(TO_INVENTARIO_X[playerid][ ID ][ 17 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Estanteria_To_Inv_Depa(playerid,17);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_armeria][18])
		{
			if(TO_INVENTARIO_X[playerid][ ID ][ 18 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Estanteria_To_Inv_Depa(playerid,18);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_armeria][19])
		{
			if(TO_INVENTARIO_X[playerid][ ID ][ 19 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Estanteria_To_Inv_Depa(playerid,19);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_armeria][20])
		{
			if(TO_INVENTARIO_X[playerid][ ID ][ 20 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Estanteria_To_Inv_Depa(playerid,20);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_armeria][21])
		{
			if(TO_INVENTARIO_X[playerid][ ID ][ 21 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Estanteria_To_Inv_Depa(playerid,21);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_armeria][22])
		{
			if(TO_INVENTARIO_X[playerid][ ID ][ 22 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Estanteria_To_Inv_Depa(playerid,22);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_armeria][23])
		{
			if(TO_INVENTARIO_X[playerid][ ID ][ 23 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Estanteria_To_Inv_Depa(playerid,23);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_armeria][24])
		{
			if(TO_INVENTARIO_X[playerid][ ID ][ 24 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Estanteria_To_Inv_Depa(playerid,24);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_armeria][25])
		{
			if(TO_INVENTARIO_X[playerid][ ID ][ 25 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Estanteria_To_Inv_Depa(playerid,25);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_armeria][26])
		{
			if(TO_INVENTARIO_X[playerid][ ID ][ 26 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Estanteria_To_Inv_Depa(playerid,26);
		}
		/*                                              
					SEPARAR
												*/
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_armeria][2])
		{
			if((INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][2] ][TIPODECONSUMO] == COMIDA_24_7) || (INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][2] ][TIPODECONSUMO] == BEBIDA_24_7)) return MensajesAyuda(playerid,"No se puede guardar esto aca");
			if(INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][2] ][TIPODECONSUMO] == TYPE_ACCESORIO) return MensajesAyuda(playerid,"No se puede guardar esto aca");
			if(TO_X_VENTARIO[playerid][ ID ][ 2 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Inv_To_Estanteria_Depa(playerid,2);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_armeria][3])
		{
			if((INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][3] ][TIPODECONSUMO] == COMIDA_24_7) || (INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][3] ][TIPODECONSUMO] == BEBIDA_24_7)) return MensajesAyuda(playerid,"No se puede guardar esto aca");
			if(INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][3] ][TIPODECONSUMO] == TYPE_ACCESORIO) return MensajesAyuda(playerid,"No se puede guardar esto aca");
			if(TO_X_VENTARIO[playerid][ ID ][ 3 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Inv_To_Estanteria_Depa(playerid,3);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_armeria][4])
		{
			if((INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][4] ][TIPODECONSUMO] == COMIDA_24_7) || (INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][4] ][TIPODECONSUMO] == BEBIDA_24_7)) return MensajesAyuda(playerid,"No se puede guardar esto aca");
			if(INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][4] ][TIPODECONSUMO] == TYPE_ACCESORIO) return MensajesAyuda(playerid,"No se puede guardar esto aca");
			if(TO_X_VENTARIO[playerid][ ID ][ 4 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Inv_To_Estanteria_Depa(playerid,4);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_armeria][5])
		{
			if((INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][5] ][TIPODECONSUMO] == COMIDA_24_7) || (INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][5] ][TIPODECONSUMO] == BEBIDA_24_7)) return MensajesAyuda(playerid,"No se puede guardar esto aca");
			if(INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][5] ][TIPODECONSUMO] == TYPE_ACCESORIO) return MensajesAyuda(playerid,"No se puede guardar esto aca");
			if(TO_X_VENTARIO[playerid][ ID ][ 5 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Inv_To_Estanteria_Depa(playerid,5);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_armeria][6])
		{
			if((INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][6] ][TIPODECONSUMO] == COMIDA_24_7) || (INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][6] ][TIPODECONSUMO] == BEBIDA_24_7)) return MensajesAyuda(playerid,"No se puede guardar esto aca");
			if(INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][6] ][TIPODECONSUMO] == TYPE_ACCESORIO) return MensajesAyuda(playerid,"No se puede guardar esto aca");
			if(TO_X_VENTARIO[playerid][ ID ][ 6 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Inv_To_Estanteria_Depa(playerid,6);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_armeria][7])
		{
			if((INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][7] ][TIPODECONSUMO] == COMIDA_24_7) || (INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][7] ][TIPODECONSUMO] == BEBIDA_24_7)) return MensajesAyuda(playerid,"No se puede guardar esto aca");
			if(INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][7] ][TIPODECONSUMO] == TYPE_ACCESORIO) return MensajesAyuda(playerid,"No se puede guardar esto aca");
			if(TO_X_VENTARIO[playerid][ ID ][ 7 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Inv_To_Estanteria_Depa(playerid,7);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_armeria][8])
		{
			if((INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][8] ][TIPODECONSUMO] == COMIDA_24_7) || (INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][8] ][TIPODECONSUMO] == BEBIDA_24_7)) return MensajesAyuda(playerid,"No se puede guardar esto aca");
			if(INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][8] ][TIPODECONSUMO] == TYPE_ACCESORIO) return MensajesAyuda(playerid,"No se puede guardar esto aca");
			if(TO_X_VENTARIO[playerid][ ID ][ 8 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Inv_To_Estanteria_Depa(playerid,8);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_armeria][9])
		{
			if((INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][9] ][TIPODECONSUMO] == COMIDA_24_7) || (INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][9] ][TIPODECONSUMO] == BEBIDA_24_7)) return MensajesAyuda(playerid,"No se puede guardar esto aca");
			if(INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][9] ][TIPODECONSUMO] == TYPE_ACCESORIO) return MensajesAyuda(playerid,"No se puede guardar esto aca");
			if(TO_X_VENTARIO[playerid][ ID ][ 9 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Inv_To_Estanteria_Depa(playerid,9);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_armeria][10])
		{
			if((INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][10] ][TIPODECONSUMO] == COMIDA_24_7) || (INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][10] ][TIPODECONSUMO] == BEBIDA_24_7)) return MensajesAyuda(playerid,"No se puede guardar esto aca");
			if(INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][10] ][TIPODECONSUMO] == TYPE_ACCESORIO) return MensajesAyuda(playerid,"No se puede guardar esto aca");
			if(TO_X_VENTARIO[playerid][ ID ][ 10 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Inv_To_Estanteria_Depa(playerid,10);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_armeria][11])
		{
			if((INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][11] ][TIPODECONSUMO] == COMIDA_24_7) || (INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][11] ][TIPODECONSUMO] == BEBIDA_24_7)) return MensajesAyuda(playerid,"No se puede guardar esto aca");
			if(INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][11] ][TIPODECONSUMO] == TYPE_ACCESORIO) return MensajesAyuda(playerid,"No se puede guardar esto aca");
			if(TO_X_VENTARIO[playerid][ ID ][ 11 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Inv_To_Estanteria_Depa(playerid,11);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_armeria][12])
		{
			if((INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][12] ][TIPODECONSUMO] == COMIDA_24_7) || (INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][12] ][TIPODECONSUMO] == BEBIDA_24_7)) return MensajesAyuda(playerid,"No se puede guardar esto aca");
			if(INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][12] ][TIPODECONSUMO] == TYPE_ACCESORIO) return MensajesAyuda(playerid,"No se puede guardar esto aca");
			if(TO_X_VENTARIO[playerid][ ID ][ 12 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Inv_To_Estanteria_Depa(playerid,12);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_armeria][13])
		{
			if((INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][13] ][TIPODECONSUMO] == COMIDA_24_7) || (INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][13] ][TIPODECONSUMO] == BEBIDA_24_7)) return MensajesAyuda(playerid,"No se puede guardar esto aca");
			if(INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][13] ][TIPODECONSUMO] == TYPE_ACCESORIO) return MensajesAyuda(playerid,"No se puede guardar esto aca");
			if(TO_X_VENTARIO[playerid][ ID ][ 13 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Inv_To_Estanteria_Depa(playerid,13);
		}
	}

	if(EDITAR_OBJETO_DEPA[playerid])
	{
	   if(clickedid == Jugador_Textdraws[playerid][textdraw_editarmueblesdepart][19])
	   {
	   		ShowEditarMapeosDepa_List2(playerid);
	   }
	   if(clickedid == Jugador_Textdraws[playerid][textdraw_editarmueblesdepart][20])
	   {
	   		ShowEditarMapeosDepa(playerid);
	   }
	   if(clickedid == Jugador_Textdraws[playerid][textdraw_editarmueblesdepart][3])
	   {
	   		HideEditarMapeosDepa(playerid);
	   }
	   if(clickedid == Jugador_Textdraws[playerid][textdraw_editarmueblesdepart][4])
	   {
	   		HideEditarMapeosDepa(playerid), Editar_Objeto_Depa(playerid,EDITAR_OBJETO_CASA[playerid][4][ID]);
	   }
	   if(clickedid == Jugador_Textdraws[playerid][textdraw_editarmueblesdepart][5])
	   {
	   		HideEditarMapeosDepa(playerid), Editar_Objeto_Depa(playerid,EDITAR_OBJETO_CASA[playerid][5][ID]);
	   }
	   if(clickedid == Jugador_Textdraws[playerid][textdraw_editarmueblesdepart][6])
	   {
	   		HideEditarMapeosDepa(playerid), Editar_Objeto_Depa(playerid,EDITAR_OBJETO_CASA[playerid][6][ID]);
	   }
	   if(clickedid == Jugador_Textdraws[playerid][textdraw_editarmueblesdepart][7])
	   {
	   		HideEditarMapeosDepa(playerid), Editar_Objeto_Depa(playerid,EDITAR_OBJETO_CASA[playerid][7][ID]);
	   }
	   if(clickedid == Jugador_Textdraws[playerid][textdraw_editarmueblesdepart][8])
	   {
	   		HideEditarMapeosDepa(playerid), Editar_Objeto_Depa(playerid,EDITAR_OBJETO_CASA[playerid][8][ID]);
	   }
	   if(clickedid == Jugador_Textdraws[playerid][textdraw_editarmueblesdepart][9])
	   {
	   		HideEditarMapeosDepa(playerid), Editar_Objeto_Depa(playerid,EDITAR_OBJETO_CASA[playerid][9][ID]);
	   }
	   if(clickedid == Jugador_Textdraws[playerid][textdraw_editarmueblesdepart][10])
	   {
	   		HideEditarMapeosDepa(playerid), Editar_Objeto_Depa(playerid,EDITAR_OBJETO_CASA[playerid][10][ID]);
	   }
	   if(clickedid == Jugador_Textdraws[playerid][textdraw_editarmueblesdepart][11])
	   {
	   		HideEditarMapeosDepa(playerid), Editar_Objeto_Depa(playerid,EDITAR_OBJETO_CASA[playerid][11][ID]);
	   }
	   if(clickedid == Jugador_Textdraws[playerid][textdraw_editarmueblesdepart][12])
	   {
	   		HideEditarMapeosDepa(playerid), Editar_Objeto_Depa(playerid,EDITAR_OBJETO_CASA[playerid][12][ID]);
	   }
	   if(clickedid == Jugador_Textdraws[playerid][textdraw_editarmueblesdepart][13])
	   {
	   		HideEditarMapeosDepa(playerid), Editar_Objeto_Depa(playerid,EDITAR_OBJETO_CASA[playerid][13][ID]);
	   }
	   if(clickedid == Jugador_Textdraws[playerid][textdraw_editarmueblesdepart][14])
	   {
	   		HideEditarMapeosDepa(playerid), Editar_Objeto_Depa(playerid,EDITAR_OBJETO_CASA[playerid][14][ID]);
	   }
	   if(clickedid == Jugador_Textdraws[playerid][textdraw_editarmueblesdepart][15])
	   {
	   		HideEditarMapeosDepa(playerid), Editar_Objeto_Depa(playerid,EDITAR_OBJETO_CASA[playerid][15][ID]);
	   }
	   if(clickedid == Jugador_Textdraws[playerid][textdraw_editarmueblesdepart][16])
	   {
	   		HideEditarMapeosDepa(playerid), Editar_Objeto_Depa(playerid,EDITAR_OBJETO_CASA[playerid][16][ID]);
	   }
	   if(clickedid == Jugador_Textdraws[playerid][textdraw_editarmueblesdepart][17])
	   {
	   		HideEditarMapeosDepa(playerid), Editar_Objeto_Depa(playerid,EDITAR_OBJETO_CASA[playerid][17][ID]);
	   }
	   if(clickedid == Jugador_Textdraws[playerid][textdraw_editarmueblesdepart][18])
	   {
	   		HideEditarMapeosDepa(playerid), Editar_Objeto_Depa(playerid,EDITAR_OBJETO_CASA[playerid][18][ID]);
	   }
	   if(clickedid == Jugador_Textdraws[playerid][textdraw_editarmueblesdepart][21])
	   {
	   		HideEditarMapeosDepa(playerid), Editar_Objeto_Depa(playerid,EDITAR_OBJETO_CASA[playerid][21][ID]);
	   }
	   if(clickedid == Jugador_Textdraws[playerid][textdraw_editarmueblesdepart][22])
	   {
	   		HideEditarMapeosDepa(playerid), Editar_Objeto_Depa(playerid,EDITAR_OBJETO_CASA[playerid][22][ID]);
	   }
	   if(clickedid == Jugador_Textdraws[playerid][textdraw_editarmueblesdepart][23])
	   {
	   		HideEditarMapeosDepa(playerid), Editar_Objeto_Depa(playerid,EDITAR_OBJETO_CASA[playerid][23][ID]);
	   }
	   if(clickedid == Jugador_Textdraws[playerid][textdraw_editarmueblesdepart][24])
	   {
	   		HideEditarMapeosDepa(playerid), Editar_Objeto_Depa(playerid,EDITAR_OBJETO_CASA[playerid][24][ID]);
	   }
	   if(clickedid == Jugador_Textdraws[playerid][textdraw_editarmueblesdepart][25])
	   {
	   		HideEditarMapeosDepa(playerid), Editar_Objeto_Depa(playerid,EDITAR_OBJETO_CASA[playerid][25][ID]);
	   }
	   if(clickedid == Jugador_Textdraws[playerid][textdraw_editarmueblesdepart][26])
	   {
	   		HideEditarMapeosDepa(playerid), Editar_Objeto_Depa(playerid,EDITAR_OBJETO_CASA[playerid][26][ID]);
	   }
	   if(clickedid == Jugador_Textdraws[playerid][textdraw_editarmueblesdepart][27])
	   {
	   		HideEditarMapeosDepa(playerid), Editar_Objeto_Depa(playerid,EDITAR_OBJETO_CASA[playerid][27][ID]);
	   }
	   if(clickedid == Jugador_Textdraws[playerid][textdraw_editarmueblesdepart][28])
	   {
	   		HideEditarMapeosDepa(playerid), Editar_Objeto_Depa(playerid,EDITAR_OBJETO_CASA[playerid][28][ID]);
	   }
	   if(clickedid == Jugador_Textdraws[playerid][textdraw_editarmueblesdepart][29])
	   {
	   		HideEditarMapeosDepa(playerid), Editar_Objeto_Depa(playerid,EDITAR_OBJETO_CASA[playerid][29][ID]);
	   }
	   if(clickedid == Jugador_Textdraws[playerid][textdraw_editarmueblesdepart][30])
	   {
	   		HideEditarMapeosDepa(playerid), Editar_Objeto_Depa(playerid,EDITAR_OBJETO_CASA[playerid][30][ID]);
	   }
	   if(clickedid == Jugador_Textdraws[playerid][textdraw_editarmueblesdepart][31])
	   {
	   		HideEditarMapeosDepa(playerid), Editar_Objeto_Depa(playerid,EDITAR_OBJETO_CASA[playerid][31][ID]);
	   }
	   if(clickedid == Jugador_Textdraws[playerid][textdraw_editarmueblesdepart][32])
	   {
	   		HideEditarMapeosDepa(playerid), Editar_Objeto_Depa(playerid,EDITAR_OBJETO_CASA[playerid][32][ID]);
	   }
	   if(clickedid == Jugador_Textdraws[playerid][textdraw_editarmueblesdepart][33])
	   {
	   		HideEditarMapeosDepa(playerid), Editar_Objeto_Depa(playerid,EDITAR_OBJETO_CASA[playerid][33][ID]);
	   }
	   if(clickedid == Jugador_Textdraws[playerid][textdraw_editarmueblesdepart][34])
	   {
	   		HideEditarMapeosDepa(playerid), Editar_Objeto_Depa(playerid,EDITAR_OBJETO_CASA[playerid][34][ID]);
	   }
	   if(clickedid == Jugador_Textdraws[playerid][textdraw_editarmueblesdepart][35])
	   {
	   		HideEditarMapeosDepa(playerid), Editar_Objeto_Depa(playerid,EDITAR_OBJETO_CASA[playerid][35][ID]);
	   }
	}
	if(PLAYER_TEMP[playerid][ABRIO_ARMARIO_DEPA]==true)
	{
		if(TIRAR_INVENTARIO[playerid]==true) return SendClientMessage(playerid,-1,"Cierra el menu de tirar");
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_armario][28])
		{
			Hide_Armario_Depa(playerid);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_armario][15])
		{
			if(TO_INVENTARIO_X[playerid][ ID ][ 15 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Armario_To_Inv_Depa(playerid,15);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_armario][16])
		{
			if(TO_INVENTARIO_X[playerid][ ID ][ 16 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Armario_To_Inv_Depa(playerid,16);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_armario][17])
		{
			if(TO_INVENTARIO_X[playerid][ ID ][ 17 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Armario_To_Inv_Depa(playerid,17);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_armario][18])
		{
			if(TO_INVENTARIO_X[playerid][ ID ][ 18 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Armario_To_Inv_Depa(playerid,18);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_armario][19])
		{
			if(TO_INVENTARIO_X[playerid][ ID ][ 19 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Armario_To_Inv_Depa(playerid,19);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_armario][20])
		{
			if(TO_INVENTARIO_X[playerid][ ID ][ 20 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Armario_To_Inv_Depa(playerid,20);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_armario][21])
		{
			if(TO_INVENTARIO_X[playerid][ ID ][ 21 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Armario_To_Inv_Depa(playerid,21);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_armario][22])
		{
			if(TO_INVENTARIO_X[playerid][ ID ][ 22 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Armario_To_Inv_Depa(playerid,22);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_armario][23])
		{
			if(TO_INVENTARIO_X[playerid][ ID ][ 23 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Armario_To_Inv_Depa(playerid,23);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_armario][24])
		{
			if(TO_INVENTARIO_X[playerid][ ID ][ 24 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Armario_To_Inv_Depa(playerid,24);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_armario][25])
		{
			if(TO_INVENTARIO_X[playerid][ ID ][ 25 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Armario_To_Inv_Depa(playerid,25);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_armario][26])
		{
			if(TO_INVENTARIO_X[playerid][ ID ][ 26 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Armario_To_Inv_Depa(playerid,26);
		}
		/*                                              
							SEPARAR
														*/
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_armario][2])
		{
			if(INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][2] ][TIPODECONSUMO] != TYPE_ACCESORIO) return MensajesAyuda(playerid,"Solo puedes guardar prendas");
			if(TO_X_VENTARIO[playerid][ ID ][ 2 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Inv_To_Armario_Depa(playerid,2);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_armario][3])
		{
			if(INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][3] ][TIPODECONSUMO] != TYPE_ACCESORIO) return MensajesAyuda(playerid,"Solo puedes guardar prendas");
			if(TO_X_VENTARIO[playerid][ ID ][ 3 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Inv_To_Armario_Depa(playerid,3);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_armario][4])
		{
			if(INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][4] ][TIPODECONSUMO] != TYPE_ACCESORIO) return MensajesAyuda(playerid,"Solo puedes guardar prendas");
			if(TO_X_VENTARIO[playerid][ ID ][ 4 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Inv_To_Armario_Depa(playerid,4);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_armario][5])
		{
			if(INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][5] ][TIPODECONSUMO] != TYPE_ACCESORIO) return MensajesAyuda(playerid,"Solo puedes guardar prendas");
			if(TO_X_VENTARIO[playerid][ ID ][ 5 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Inv_To_Armario_Depa(playerid,5);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_armario][6])
		{
			if(INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][6] ][TIPODECONSUMO] != TYPE_ACCESORIO) return MensajesAyuda(playerid,"Solo puedes guardar prendas");
			if(TO_X_VENTARIO[playerid][ ID ][ 6 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Inv_To_Armario_Depa(playerid,6);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_armario][7])
		{
			if(INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][7] ][TIPODECONSUMO] != TYPE_ACCESORIO) return MensajesAyuda(playerid,"Solo puedes guardar prendas");
			if(TO_X_VENTARIO[playerid][ ID ][ 7 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Inv_To_Armario_Depa(playerid,7);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_armario][8])
		{
			if(INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][8] ][TIPODECONSUMO] != TYPE_ACCESORIO) return MensajesAyuda(playerid,"Solo puedes guardar prendas");
			if(TO_X_VENTARIO[playerid][ ID ][ 8 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Inv_To_Armario_Depa(playerid,8);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_armario][9])
		{
			if(INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][9] ][TIPODECONSUMO] != TYPE_ACCESORIO) return MensajesAyuda(playerid,"Solo puedes guardar prendas");
			if(TO_X_VENTARIO[playerid][ ID ][ 9 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Inv_To_Armario_Depa(playerid,9);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_armario][10])
		{
			if(INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][10] ][TIPODECONSUMO] != TYPE_ACCESORIO) return MensajesAyuda(playerid,"Solo puedes guardar prendas");
			if(TO_X_VENTARIO[playerid][ ID ][ 10 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Inv_To_Armario_Depa(playerid,10);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_armario][11])
		{
			if(INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][11] ][TIPODECONSUMO] != TYPE_ACCESORIO) return MensajesAyuda(playerid,"Solo puedes guardar prendas");
			if(TO_X_VENTARIO[playerid][ ID ][ 11 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Inv_To_Armario_Depa(playerid,11);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_armario][12])
		{
			if(INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][12] ][TIPODECONSUMO] != TYPE_ACCESORIO) return MensajesAyuda(playerid,"Solo puedes guardar prendas");
			if(TO_X_VENTARIO[playerid][ ID ][ 12 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Inv_To_Armario_Depa(playerid,12);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_armario][13])
		{
			if(INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][13] ][TIPODECONSUMO] != TYPE_ACCESORIO) return MensajesAyuda(playerid,"Solo puedes guardar prendas");
			if(TO_X_VENTARIO[playerid][ ID ][ 13 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Inv_To_Armario_Depa(playerid,13);
		}
	}

	if(PLAYER_TEMP[playerid][NEVERA_DEPA] == true)
	{
		if(TIRAR_INVENTARIO[playerid]==true) return SendClientMessage(playerid,-1,"Cierra el menu de tirar");
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_nevera_casa][28])
		{
			Hide_Nevera_Depa(playerid);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_nevera_casa][15])
		{
			if(TO_INVENTARIO_X[playerid][ ID ][ 15 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Nevera_To_InventarioDepa(playerid,15);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_nevera_casa][16])
		{
			if(TO_INVENTARIO_X[playerid][ ID ][ 16 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Nevera_To_InventarioDepa(playerid,16);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_nevera_casa][17])
		{
			if(TO_INVENTARIO_X[playerid][ ID ][ 17 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Nevera_To_InventarioDepa(playerid,17);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_nevera_casa][18])
		{
			if(TO_INVENTARIO_X[playerid][ ID ][ 18 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Nevera_To_InventarioDepa(playerid,18);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_nevera_casa][19])
		{
			if(TO_INVENTARIO_X[playerid][ ID ][ 19 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Nevera_To_InventarioDepa(playerid,19);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_nevera_casa][20])
		{
			if(TO_INVENTARIO_X[playerid][ ID ][ 20 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Nevera_To_InventarioDepa(playerid,20);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_nevera_casa][21])
		{
			if(TO_INVENTARIO_X[playerid][ ID ][ 21 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Nevera_To_InventarioDepa(playerid,21);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_nevera_casa][22])
		{
			if(TO_INVENTARIO_X[playerid][ ID ][ 22 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Nevera_To_InventarioDepa(playerid,22);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_nevera_casa][23])
		{
			if(TO_INVENTARIO_X[playerid][ ID ][ 23 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Nevera_To_InventarioDepa(playerid,23);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_nevera_casa][24])
		{
			if(TO_INVENTARIO_X[playerid][ ID ][ 24 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Nevera_To_InventarioDepa(playerid,24);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_nevera_casa][25])
		{
			if(TO_INVENTARIO_X[playerid][ ID ][ 25 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Nevera_To_InventarioDepa(playerid,25);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_nevera_casa][26])
		{
			if(TO_INVENTARIO_X[playerid][ ID ][ 26 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Nevera_To_InventarioDepa(playerid,26);
		}
		/*                                              
							SEPARAR
														*/
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_nevera_casa][2])
		{
			if((INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][2] ][TIPODECONSUMO] == COMIDA_24_7) || (INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][2] ][TIPODECONSUMO] == BEBIDA_24_7))
			{
				if(TO_X_VENTARIO[playerid][ ID ][ 2 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
				Send_Inventario_To_NeveraDepa(playerid,2);
			} else MensajesAyuda(playerid,"Solo puedes guardar comida");
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_nevera_casa][3])
		{
			if((INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][3] ][TIPODECONSUMO] == COMIDA_24_7) || (INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][3] ][TIPODECONSUMO] == BEBIDA_24_7))
			{
				if(TO_X_VENTARIO[playerid][ ID ][ 3 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
				Send_Inventario_To_NeveraDepa(playerid,3);
			} else MensajesAyuda(playerid,"Solo puedes guardar comida");
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_nevera_casa][4])
		{
			if((INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][4] ][TIPODECONSUMO] == COMIDA_24_7) || (INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][4] ][TIPODECONSUMO] == BEBIDA_24_7))
			{
				if(TO_X_VENTARIO[playerid][ ID ][ 4 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
				Send_Inventario_To_NeveraDepa(playerid,4);
			} else MensajesAyuda(playerid,"Solo puedes guardar comida");
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_nevera_casa][5])
		{
			if((INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][5] ][TIPODECONSUMO] == COMIDA_24_7) || (INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][5] ][TIPODECONSUMO] == BEBIDA_24_7))
			{
				if(TO_X_VENTARIO[playerid][ ID ][ 5 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
				Send_Inventario_To_NeveraDepa(playerid,5);
			} else MensajesAyuda(playerid,"Solo puedes guardar comida");
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_nevera_casa][6])
		{
			if((INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][6] ][TIPODECONSUMO] == COMIDA_24_7) || (INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][6] ][TIPODECONSUMO] == BEBIDA_24_7))
			{
				if(TO_X_VENTARIO[playerid][ ID ][ 6 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
				Send_Inventario_To_NeveraDepa(playerid,6);
			} else MensajesAyuda(playerid,"Solo puedes guardar comida");
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_nevera_casa][7])
		{
			if((INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][7] ][TIPODECONSUMO] == COMIDA_24_7) || (INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][7] ][TIPODECONSUMO] == BEBIDA_24_7))
			{
				if(TO_X_VENTARIO[playerid][ ID ][ 7 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
				Send_Inventario_To_NeveraDepa(playerid,7);
			} else MensajesAyuda(playerid,"Solo puedes guardar comida");
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_nevera_casa][8])
		{
			if((INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][8] ][TIPODECONSUMO] == COMIDA_24_7) || (INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][8] ][TIPODECONSUMO] == BEBIDA_24_7))
			{
				if(TO_X_VENTARIO[playerid][ ID ][ 8 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
				Send_Inventario_To_NeveraDepa(playerid,8);
			} else MensajesAyuda(playerid,"Solo puedes guardar comida");
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_nevera_casa][9])
		{
			if((INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][9] ][TIPODECONSUMO] == COMIDA_24_7) || (INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][9] ][TIPODECONSUMO] == BEBIDA_24_7))
			{
				if(TO_X_VENTARIO[playerid][ ID ][ 9 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
				Send_Inventario_To_NeveraDepa(playerid,9);
			} else MensajesAyuda(playerid,"Solo puedes guardar comida");
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_nevera_casa][10])
		{
			if((INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][10] ][TIPODECONSUMO] == COMIDA_24_7) || (INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][10] ][TIPODECONSUMO] == BEBIDA_24_7))
			{
				if(TO_X_VENTARIO[playerid][ ID ][ 10 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
				Send_Inventario_To_NeveraDepa(playerid,10);
			} else MensajesAyuda(playerid,"Solo puedes guardar comida");
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_nevera_casa][11])
		{
			if((INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][11] ][TIPODECONSUMO] == COMIDA_24_7) || (INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][11] ][TIPODECONSUMO] == BEBIDA_24_7))
			{
				if(TO_X_VENTARIO[playerid][ ID ][ 11 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
				Send_Inventario_To_NeveraDepa(playerid,11);
			} else MensajesAyuda(playerid,"Solo puedes guardar comida");
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_nevera_casa][12])
		{
			if((INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][12] ][TIPODECONSUMO] == COMIDA_24_7) || (INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][12] ][TIPODECONSUMO] == BEBIDA_24_7))
			{
				if(TO_X_VENTARIO[playerid][ ID ][ 12 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
				Send_Inventario_To_NeveraDepa(playerid,12);
			} else MensajesAyuda(playerid,"Solo puedes guardar comida");
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_nevera_casa][13])
		{
			if((INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][13] ][TIPODECONSUMO] == COMIDA_24_7) || (INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][13] ][TIPODECONSUMO] == BEBIDA_24_7))
			{
				if(TO_X_VENTARIO[playerid][ ID ][ 13 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
				Send_Inventario_To_NeveraDepa(playerid,13);
			} else MensajesAyuda(playerid,"Solo puedes guardar comida");
		}
	}





	//
	if(EDITAR_OBJETO[playerid])
	{
	   if(clickedid == Jugador_Textdraws[playerid][textdraw_editarmueblescasa][19])
	   {
	   		ShowEditarMapeosCasa_List2(playerid);
	   }
	   if(clickedid == Jugador_Textdraws[playerid][textdraw_editarmueblescasa][20])
	   {
	   		ShowEditarMapeosCasa(playerid);
	   }
	   if(clickedid == Jugador_Textdraws[playerid][textdraw_editarmueblescasa][3])
	   {
	   		HideEditarMapeosCasa(playerid);
	   }
	   if(clickedid == Jugador_Textdraws[playerid][textdraw_editarmueblescasa][4])
	   {
	   		HideEditarMapeosCasa(playerid), Editar_ObjetoCasa(playerid,EDITAR_OBJETO_CASA[playerid][4][ID]);
	   }
	   if(clickedid == Jugador_Textdraws[playerid][textdraw_editarmueblescasa][5])
	   {
	   		HideEditarMapeosCasa(playerid), Editar_ObjetoCasa(playerid,EDITAR_OBJETO_CASA[playerid][5][ID]);
	   }
	   if(clickedid == Jugador_Textdraws[playerid][textdraw_editarmueblescasa][6])
	   {
	   		HideEditarMapeosCasa(playerid), Editar_ObjetoCasa(playerid,EDITAR_OBJETO_CASA[playerid][6][ID]);
	   }
	   if(clickedid == Jugador_Textdraws[playerid][textdraw_editarmueblescasa][7])
	   {
	   		HideEditarMapeosCasa(playerid), Editar_ObjetoCasa(playerid,EDITAR_OBJETO_CASA[playerid][7][ID]);
	   }
	   if(clickedid == Jugador_Textdraws[playerid][textdraw_editarmueblescasa][8])
	   {
	   		HideEditarMapeosCasa(playerid), Editar_ObjetoCasa(playerid,EDITAR_OBJETO_CASA[playerid][8][ID]);
	   }
	   if(clickedid == Jugador_Textdraws[playerid][textdraw_editarmueblescasa][9])
	   {
	   		HideEditarMapeosCasa(playerid), Editar_ObjetoCasa(playerid,EDITAR_OBJETO_CASA[playerid][9][ID]);
	   }
	   if(clickedid == Jugador_Textdraws[playerid][textdraw_editarmueblescasa][10])
	   {
	   		HideEditarMapeosCasa(playerid), Editar_ObjetoCasa(playerid,EDITAR_OBJETO_CASA[playerid][10][ID]);
	   }
	   if(clickedid == Jugador_Textdraws[playerid][textdraw_editarmueblescasa][11])
	   {
	   		HideEditarMapeosCasa(playerid), Editar_ObjetoCasa(playerid,EDITAR_OBJETO_CASA[playerid][11][ID]);
	   }
	   if(clickedid == Jugador_Textdraws[playerid][textdraw_editarmueblescasa][12])
	   {
	   		HideEditarMapeosCasa(playerid), Editar_ObjetoCasa(playerid,EDITAR_OBJETO_CASA[playerid][12][ID]);
	   }
	   if(clickedid == Jugador_Textdraws[playerid][textdraw_editarmueblescasa][13])
	   {
	   		HideEditarMapeosCasa(playerid), Editar_ObjetoCasa(playerid,EDITAR_OBJETO_CASA[playerid][13][ID]);
	   }
	   if(clickedid == Jugador_Textdraws[playerid][textdraw_editarmueblescasa][14])
	   {
	   		HideEditarMapeosCasa(playerid), Editar_ObjetoCasa(playerid,EDITAR_OBJETO_CASA[playerid][14][ID]);
	   }
	   if(clickedid == Jugador_Textdraws[playerid][textdraw_editarmueblescasa][15])
	   {
	   		HideEditarMapeosCasa(playerid), Editar_ObjetoCasa(playerid,EDITAR_OBJETO_CASA[playerid][15][ID]);
	   }
	   if(clickedid == Jugador_Textdraws[playerid][textdraw_editarmueblescasa][16])
	   {
	   		HideEditarMapeosCasa(playerid), Editar_ObjetoCasa(playerid,EDITAR_OBJETO_CASA[playerid][16][ID]);
	   }
	   if(clickedid == Jugador_Textdraws[playerid][textdraw_editarmueblescasa][17])
	   {
	   		HideEditarMapeosCasa(playerid), Editar_ObjetoCasa(playerid,EDITAR_OBJETO_CASA[playerid][17][ID]);
	   }
	   if(clickedid == Jugador_Textdraws[playerid][textdraw_editarmueblescasa][18])
	   {
	   		HideEditarMapeosCasa(playerid), Editar_ObjetoCasa(playerid,EDITAR_OBJETO_CASA[playerid][18][ID]);
	   }
	   if(clickedid == Jugador_Textdraws[playerid][textdraw_editarmueblescasa][21])
	   {
	   		HideEditarMapeosCasa(playerid), Editar_ObjetoCasa(playerid,EDITAR_OBJETO_CASA[playerid][21][ID]);
	   }
	   if(clickedid == Jugador_Textdraws[playerid][textdraw_editarmueblescasa][22])
	   {
	   		HideEditarMapeosCasa(playerid), Editar_ObjetoCasa(playerid,EDITAR_OBJETO_CASA[playerid][22][ID]);
	   }
	   if(clickedid == Jugador_Textdraws[playerid][textdraw_editarmueblescasa][23])
	   {
	   		HideEditarMapeosCasa(playerid), Editar_ObjetoCasa(playerid,EDITAR_OBJETO_CASA[playerid][23][ID]);
	   }
	   if(clickedid == Jugador_Textdraws[playerid][textdraw_editarmueblescasa][24])
	   {
	   		HideEditarMapeosCasa(playerid), Editar_ObjetoCasa(playerid,EDITAR_OBJETO_CASA[playerid][24][ID]);
	   }
	   if(clickedid == Jugador_Textdraws[playerid][textdraw_editarmueblescasa][25])
	   {
	   		HideEditarMapeosCasa(playerid), Editar_ObjetoCasa(playerid,EDITAR_OBJETO_CASA[playerid][25][ID]);
	   }
	   if(clickedid == Jugador_Textdraws[playerid][textdraw_editarmueblescasa][26])
	   {
	   		HideEditarMapeosCasa(playerid), Editar_ObjetoCasa(playerid,EDITAR_OBJETO_CASA[playerid][26][ID]);
	   }
	   if(clickedid == Jugador_Textdraws[playerid][textdraw_editarmueblescasa][27])
	   {
	   		HideEditarMapeosCasa(playerid), Editar_ObjetoCasa(playerid,EDITAR_OBJETO_CASA[playerid][27][ID]);
	   }
	   if(clickedid == Jugador_Textdraws[playerid][textdraw_editarmueblescasa][28])
	   {
	   		HideEditarMapeosCasa(playerid), Editar_ObjetoCasa(playerid,EDITAR_OBJETO_CASA[playerid][28][ID]);
	   }
	   if(clickedid == Jugador_Textdraws[playerid][textdraw_editarmueblescasa][29])
	   {
	   		HideEditarMapeosCasa(playerid), Editar_ObjetoCasa(playerid,EDITAR_OBJETO_CASA[playerid][29][ID]);
	   }
	   if(clickedid == Jugador_Textdraws[playerid][textdraw_editarmueblescasa][30])
	   {
	   		HideEditarMapeosCasa(playerid), Editar_ObjetoCasa(playerid,EDITAR_OBJETO_CASA[playerid][30][ID]);
	   }
	   if(clickedid == Jugador_Textdraws[playerid][textdraw_editarmueblescasa][31])
	   {
	   		HideEditarMapeosCasa(playerid), Editar_ObjetoCasa(playerid,EDITAR_OBJETO_CASA[playerid][31][ID]);
	   }
	   if(clickedid == Jugador_Textdraws[playerid][textdraw_editarmueblescasa][32])
	   {
	   		HideEditarMapeosCasa(playerid), Editar_ObjetoCasa(playerid,EDITAR_OBJETO_CASA[playerid][32][ID]);
	   }
	   if(clickedid == Jugador_Textdraws[playerid][textdraw_editarmueblescasa][33])
	   {
	   		HideEditarMapeosCasa(playerid), Editar_ObjetoCasa(playerid,EDITAR_OBJETO_CASA[playerid][33][ID]);
	   }
	   if(clickedid == Jugador_Textdraws[playerid][textdraw_editarmueblescasa][34])
	   {
	   		HideEditarMapeosCasa(playerid), Editar_ObjetoCasa(playerid,EDITAR_OBJETO_CASA[playerid][34][ID]);
	   }
	   if(clickedid == Jugador_Textdraws[playerid][textdraw_editarmueblescasa][35])
	   {
	   		HideEditarMapeosCasa(playerid), Editar_ObjetoCasa(playerid,EDITAR_OBJETO_CASA[playerid][35][ID]);
	   }
	}
	if(PLAYER_TEMP[playerid][pt_COMPRAR_MUEBLES]==true)
	{
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_comprarmuebles][2] )
		{
			HideComprarMapeosCasaVip(playerid);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_comprarmuebles][5] ) //Siguiente objeto
		{
			PLAYER_TEMP[playerid][pt_COMPRAR_MUEBLE_ID] += 1;
			if(PLAYER_TEMP[playerid][pt_COMPRAR_MUEBLE_ID] > CantidadMapeosCasaVip()) PLAYER_TEMP[playerid][pt_COMPRAR_MUEBLE_ID] = 1, MensajesAyuda(playerid,"No hay mas");
			ShowComprarMapeosCasaVip(playerid);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_comprarmuebles][6])//Anterior objeto
		{
			PLAYER_TEMP[playerid][pt_COMPRAR_MUEBLE_ID] -= 1;
			if(PLAYER_TEMP[playerid][pt_COMPRAR_MUEBLE_ID] <= 0) PLAYER_TEMP[playerid][pt_COMPRAR_MUEBLE_ID] = 1;
			ShowComprarMapeosCasaVip(playerid);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_comprarmuebles][7])//Comprar objeto
		{
			ComprarMapeoCasaVip(playerid);
		}
	}
	if(PLAYER_TEMP[playerid][pt_CHANGE_INTERIOR])
	{
		if(clickedid == Jugador_Textdraws[playerid][textdraw_select_interior][2])
		{
			Hide_Select_Interior_Casa(playerid);
			PLAYER_TEMP[playerid][pt_MENU_CASA]=true;
			SelectTextDraw(playerid,SELEC_TEXTDRAW);
			for(new i=0; i < 10; i++) TextDrawShowForPlayer(playerid, Jugador_Textdraws[playerid][textdraw_menu_casa][i]);
		}
		if(clickedid == Jugador_Textdraws[playerid][textdraw_select_interior][3])
		{
			Hide_Select_Interior_Casa(playerid);
			PLAYER_TEMP[playerid][pt_VIENDO_TEXTURA] = VIENDO_PAREDES;
			ShowTexturasForCasa(playerid);
		}
		if(clickedid == Jugador_Textdraws[playerid][textdraw_select_interior][4])
		{
			Hide_Select_Interior_Casa(playerid);
			PLAYER_TEMP[playerid][pt_VIENDO_TEXTURA] = VIENDO_PISO;
			ShowTexturasForCasa(playerid);
		}
		if(clickedid == Jugador_Textdraws[playerid][textdraw_select_interior][5])
		{
			Hide_Select_Interior_Casa(playerid);
			PLAYER_TEMP[playerid][pt_VIENDO_TEXTURA] = VIENDO_TECHO;
			ShowTexturasForCasa(playerid);
		}
		if(clickedid == Jugador_Textdraws[playerid][textdraw_select_interior][6])
		{
			Hide_Select_Interior_Casa(playerid);
			PLAYER_TEMP[playerid][pt_VIENDO_TEXTURA] = VIENDO_PUERTAS;
			ShowTexturasForCasa(playerid);
		}
		if(clickedid == Jugador_Textdraws[playerid][textdraw_select_interior][7])
		{
			Hide_Select_Interior_Casa(playerid);
			PLAYER_TEMP[playerid][pt_VIENDO_TEXTURA] = VIENDO_CAMAS;
			ShowTexturasForCasa(playerid);
		}
		if(clickedid == Jugador_Textdraws[playerid][textdraw_select_interior][8])
		{
			Hide_Select_Interior_Casa(playerid);
			PLAYER_TEMP[playerid][pt_VIENDO_TEXTURA] = VIENDO_COCINA;
			ShowTexturasForCasa(playerid);
		}
		if(clickedid == Jugador_Textdraws[playerid][textdraw_select_interior][9])
		{
			Hide_Select_Interior_Casa(playerid);
			PLAYER_TEMP[playerid][pt_VIENDO_TEXTURA] = VIENDO_ESTANTERIA;
			ShowTexturasForCasa(playerid);
		}
		if(clickedid == Jugador_Textdraws[playerid][textdraw_select_interior][10])
		{
			Hide_Select_Interior_Casa(playerid);
			PLAYER_TEMP[playerid][pt_VIENDO_TEXTURA] = VIENDO_ARMARIO;
			ShowTexturasForCasa(playerid);
		}
 		if(clickedid == Jugador_Textdraws[playerid][textdraw_select_interior][11])
		{
			Hide_Select_Interior_Casa(playerid);
			PLAYER_TEMP[playerid][pt_VIENDO_TEXTURA] = VIENDO_EQUIPO;
			ShowTexturasForCasa(playerid);
		}
	}
	if(PLAYER_TEMP[playerid][pt_MENU_CASA])
	{
		new id=ENCASAVIP[playerid];
		new Estado[25],CajaF[25];
		if(CASAVIP[id][CasaDuenoID] != ACCOUNT_INFO[playerid][ac_ID])
		{
			Hide_Menu_Casa(playerid);
			MensajesAyuda(playerid,"No eres el propietario de esta casa");
			return 1;
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_menu_casa][2])
		{
			Hide_Menu_Casa(playerid);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_menu_casa][3])
		{
			Hide_Menu_Casa(playerid);
			Select_Interior_Casa(playerid);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_menu_casa][4])
		{
			Hide_Menu_Casa(playerid);
			ShowPlayerDialog(playerid, DIALOG_MANAGECASASELECT, DIALOG_STYLE_LIST,"Opciones","Comprar muebles\nEditar Muebles\nBorrar muebles","Seguir","Cancelar");
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_menu_casa][5])
		{
			Hide_Menu_Casa(playerid);
			ShowPlayerDialog(playerid,DIALOG_CASAMENULLAVES,DIALOG_STYLE_LIST,"Llaves","Dar llaves\nRemover llaves", "Seguir", "Cancelar");
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_menu_casa][6])
		{
			Hide_Menu_Casa(playerid);
			ManageDejarPasar(playerid);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_menu_casa][7])
		{
			Hide_Menu_Casa(playerid);
			switch(CASAVIP[id][TIPOMONEDA])
			{
				case 1:format(string2,sizeof(string2),"Vender la casa por %s\nVender la casa a un jugador",number_format_thousand(CASAVIP[id][PRECIO]));
				case 2:format(string2,sizeof(string2),"Vender la casa por %d "SERVER_COIN"\nVender la casa a un jugador",CASAVIP[id][PRECIO]/2);
			}
			ShowPlayerDialog(playerid,DIALOG_CASAVENDER,DIALOG_STYLE_LIST,"VENDER CASA",string2, "Seguir", "Cancelar");
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_menu_casa][8])
		{
			new DB_Query[80];
			if(CASAVIP[id][Lock]==0)
			{
				CASAVIP[id][Lock]=1;
				format(DB_Query, sizeof DB_Query, "UPDATE `CASASVIP` SET CANDADO='1' WHERE `ID` = '%d';",id);
				db_query(_DB_, DB_Query);
			}
			else
			{
				CASAVIP[id][Lock]=0;
				format(DB_Query, sizeof DB_Query, "UPDATE `CASASVIP` SET CANDADO='0' WHERE `ID` = '%d';",id);
				db_query(_DB_, DB_Query);
			}
			switch(CASAVIP[id][Lock])
			{
				case 0:Estado="Puerta: ~g~Abierta";
				case 1:Estado="Puerta: ~r~Cerrada";
			}

			TextDrawSetString(Jugador_Textdraws[playerid][textdraw_menu_casa][8], Estado);
			TextDrawShowForPlayer(playerid, Jugador_Textdraws[playerid][textdraw_menu_casa][8]);
			SelectTextDraw(playerid,SELEC_TEXTDRAW);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_menu_casa][9])
		{
			new DB_Query[80];
			if(CASAVIP[id][CAJASTATUS]==0)
			{
				CASAVIP[id][CAJASTATUS]=1;
				format(DB_Query, sizeof DB_Query, "UPDATE `CASASVIP` SET CAJASTATUS='1' WHERE `ID` = '%d';",id);
				db_query(_DB_, DB_Query);
			}
			else
			{
				CASAVIP[id][CAJASTATUS]=0;
				format(DB_Query, sizeof DB_Query, "UPDATE `CASASVIP` SET CAJASTATUS='0' WHERE `ID` = '%d';",id);
				db_query(_DB_, DB_Query);
			}
			switch(CASAVIP[id][CAJASTATUS])
			{
				case 0:CajaF="Cafa fuerte: ~r~Cerrada";
				case 1:CajaF="Cafa fuerte: ~g~Abierta";
			}
			TextDrawSetString(Jugador_Textdraws[playerid][textdraw_menu_casa][9], CajaF);
			TextDrawShowForPlayer(playerid, Jugador_Textdraws[playerid][textdraw_menu_casa][9]);
			SelectTextDraw(playerid,SELEC_TEXTDRAW);
 		}
	}
	if(PLAYER_TEMP[playerid][pt_VIENDO_TEXTURAS] == true)
	{
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_menu_textura][7])//Cerrar
		{
			LoadTextureForCasa(playerid);
			HideShowTexturaCasa(playerid);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_menu_textura][4])//Siguiente textura
		{

			PLAYER_TEMP[playerid][pt_TEXTURA_ID] += 1;
			if(PLAYER_TEMP[playerid][pt_TEXTURA_ID] > CantidadTexturas()) PLAYER_TEMP[playerid][pt_TEXTURA_ID] = 1, MensajesAyuda(playerid,"No hay mas");
			ShowTexturasForCasa(playerid);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_menu_textura][5])//Anterior textura
		{
			PLAYER_TEMP[playerid][pt_TEXTURA_ID] -= 1;
			if(PLAYER_TEMP[playerid][pt_TEXTURA_ID] <= 0) PLAYER_TEMP[playerid][pt_TEXTURA_ID] = 1;
			ShowTexturasForCasa(playerid);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_menu_textura][6])//Comprar
		{
			switch(PLAYER_TEMP[playerid][ pt_TYPE_MONEDA_TEXTURA ])
			{
				case 1:
				{
					SelectTextDraw(playerid,SELEC_TEXTDRAW);
					if(PLAYER_TEMP[playerid][ pt_PRECIO_TEXTURA ] > GetPlayerCash(playerid)) return MensajesAyuda(playerid,"No tienes suficiente dinero para comprar la textura");
				}
				case 2:
				{
					SelectTextDraw(playerid,SELEC_TEXTDRAW);
					if(PLAYER_TEMP[playerid][ pt_PRECIO_TEXTURA ] > GetPlayerRp(playerid)) return MensajesAyuda(playerid,"No tienes suficiente "SERVER_COIN" para comprar la textura");
				}
			}
			Buy_Textura_Casa(playerid);
			
		}
	}
	if(PLAYER_TEMP[playerid][ABRIO_ARMERIA] == true)
	{
		if(TIRAR_INVENTARIO[playerid]==true) return SendClientMessage(playerid,-1,"Cierra el menu de tirar");
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_armeria][28])
		{
			Hide_Armeria_Casa(playerid);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_armeria][15])
		{
			if(TO_INVENTARIO_X[playerid][ ID ][ 15 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Estanteria_To_Inventario(playerid,15);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_armeria][16])
		{
			if(TO_INVENTARIO_X[playerid][ ID ][ 16 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Estanteria_To_Inventario(playerid,16);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_armeria][17])
		{
			if(TO_INVENTARIO_X[playerid][ ID ][ 17 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Estanteria_To_Inventario(playerid,17);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_armeria][18])
		{
			if(TO_INVENTARIO_X[playerid][ ID ][ 18 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Estanteria_To_Inventario(playerid,18);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_armeria][19])
		{
			if(TO_INVENTARIO_X[playerid][ ID ][ 19 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Estanteria_To_Inventario(playerid,19);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_armeria][20])
		{
			if(TO_INVENTARIO_X[playerid][ ID ][ 20 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Estanteria_To_Inventario(playerid,20);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_armeria][21])
		{
			if(TO_INVENTARIO_X[playerid][ ID ][ 21 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Estanteria_To_Inventario(playerid,21);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_armeria][22])
		{
			if(TO_INVENTARIO_X[playerid][ ID ][ 22 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Estanteria_To_Inventario(playerid,22);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_armeria][23])
		{
			if(TO_INVENTARIO_X[playerid][ ID ][ 23 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Estanteria_To_Inventario(playerid,23);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_armeria][24])
		{
			if(TO_INVENTARIO_X[playerid][ ID ][ 24 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Estanteria_To_Inventario(playerid,24);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_armeria][25])
		{
			if(TO_INVENTARIO_X[playerid][ ID ][ 25 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Estanteria_To_Inventario(playerid,25);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_armeria][26])
		{
			if(TO_INVENTARIO_X[playerid][ ID ][ 26 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Estanteria_To_Inventario(playerid,26);
		}
		/*                                              
					SEPARAR
												*/
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_armeria][2])
		{
			if((INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][2] ][TIPODECONSUMO] == COMIDA_24_7) || (INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][2] ][TIPODECONSUMO] == BEBIDA_24_7)) return MensajesAyuda(playerid,"No se puede guardar esto aca");
			if(INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][2] ][TIPODECONSUMO] == TYPE_ACCESORIO) return MensajesAyuda(playerid,"No se puede guardar esto aca");
			if(TO_X_VENTARIO[playerid][ ID ][ 2 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Inventario_To_Estanteria(playerid,2);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_armeria][3])
		{
			if((INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][3] ][TIPODECONSUMO] == COMIDA_24_7) || (INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][3] ][TIPODECONSUMO] == BEBIDA_24_7)) return MensajesAyuda(playerid,"No se puede guardar esto aca");
			if(INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][3] ][TIPODECONSUMO] == TYPE_ACCESORIO) return MensajesAyuda(playerid,"No se puede guardar esto aca");
			if(TO_X_VENTARIO[playerid][ ID ][ 3 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Inventario_To_Estanteria(playerid,3);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_armeria][4])
		{
			if((INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][4] ][TIPODECONSUMO] == COMIDA_24_7) || (INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][4] ][TIPODECONSUMO] == BEBIDA_24_7)) return MensajesAyuda(playerid,"No se puede guardar esto aca");
			if(INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][4] ][TIPODECONSUMO] == TYPE_ACCESORIO) return MensajesAyuda(playerid,"No se puede guardar esto aca");
			if(TO_X_VENTARIO[playerid][ ID ][ 4 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Inventario_To_Estanteria(playerid,4);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_armeria][5])
		{
			if((INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][5] ][TIPODECONSUMO] == COMIDA_24_7) || (INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][5] ][TIPODECONSUMO] == BEBIDA_24_7)) return MensajesAyuda(playerid,"No se puede guardar esto aca");
			if(INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][5] ][TIPODECONSUMO] == TYPE_ACCESORIO) return MensajesAyuda(playerid,"No se puede guardar esto aca");
			if(TO_X_VENTARIO[playerid][ ID ][ 5 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Inventario_To_Estanteria(playerid,5);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_armeria][6])
		{
			if((INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][6] ][TIPODECONSUMO] == COMIDA_24_7) || (INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][6] ][TIPODECONSUMO] == BEBIDA_24_7)) return MensajesAyuda(playerid,"No se puede guardar esto aca");
			if(INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][6] ][TIPODECONSUMO] == TYPE_ACCESORIO) return MensajesAyuda(playerid,"No se puede guardar esto aca");
			if(TO_X_VENTARIO[playerid][ ID ][ 6 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Inventario_To_Estanteria(playerid,6);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_armeria][7])
		{
			if((INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][7] ][TIPODECONSUMO] == COMIDA_24_7) || (INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][7] ][TIPODECONSUMO] == BEBIDA_24_7)) return MensajesAyuda(playerid,"No se puede guardar esto aca");
			if(INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][7] ][TIPODECONSUMO] == TYPE_ACCESORIO) return MensajesAyuda(playerid,"No se puede guardar esto aca");
			if(TO_X_VENTARIO[playerid][ ID ][ 7 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Inventario_To_Estanteria(playerid,7);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_armeria][8])
		{
			if((INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][8] ][TIPODECONSUMO] == COMIDA_24_7) || (INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][8] ][TIPODECONSUMO] == BEBIDA_24_7)) return MensajesAyuda(playerid,"No se puede guardar esto aca");
			if(INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][8] ][TIPODECONSUMO] == TYPE_ACCESORIO) return MensajesAyuda(playerid,"No se puede guardar esto aca");
			if(TO_X_VENTARIO[playerid][ ID ][ 8 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Inventario_To_Estanteria(playerid,8);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_armeria][9])
		{
			if((INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][9] ][TIPODECONSUMO] == COMIDA_24_7) || (INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][9] ][TIPODECONSUMO] == BEBIDA_24_7)) return MensajesAyuda(playerid,"No se puede guardar esto aca");
			if(INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][9] ][TIPODECONSUMO] == TYPE_ACCESORIO) return MensajesAyuda(playerid,"No se puede guardar esto aca");
			if(TO_X_VENTARIO[playerid][ ID ][ 9 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Inventario_To_Estanteria(playerid,9);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_armeria][10])
		{
			if((INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][10] ][TIPODECONSUMO] == COMIDA_24_7) || (INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][10] ][TIPODECONSUMO] == BEBIDA_24_7)) return MensajesAyuda(playerid,"No se puede guardar esto aca");
			if(INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][10] ][TIPODECONSUMO] == TYPE_ACCESORIO) return MensajesAyuda(playerid,"No se puede guardar esto aca");
			if(TO_X_VENTARIO[playerid][ ID ][ 10 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Inventario_To_Estanteria(playerid,10);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_armeria][11])
		{
			if((INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][11] ][TIPODECONSUMO] == COMIDA_24_7) || (INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][11] ][TIPODECONSUMO] == BEBIDA_24_7)) return MensajesAyuda(playerid,"No se puede guardar esto aca");
			if(INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][11] ][TIPODECONSUMO] == TYPE_ACCESORIO) return MensajesAyuda(playerid,"No se puede guardar esto aca");
			if(TO_X_VENTARIO[playerid][ ID ][ 11 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Inventario_To_Estanteria(playerid,11);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_armeria][12])
		{
			if((INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][12] ][TIPODECONSUMO] == COMIDA_24_7) || (INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][12] ][TIPODECONSUMO] == BEBIDA_24_7)) return MensajesAyuda(playerid,"No se puede guardar esto aca");
			if(INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][12] ][TIPODECONSUMO] == TYPE_ACCESORIO) return MensajesAyuda(playerid,"No se puede guardar esto aca");
			if(TO_X_VENTARIO[playerid][ ID ][ 12 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Inventario_To_Estanteria(playerid,12);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_armeria][13])
		{
			if((INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][13] ][TIPODECONSUMO] == COMIDA_24_7) || (INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][13] ][TIPODECONSUMO] == BEBIDA_24_7)) return MensajesAyuda(playerid,"No se puede guardar esto aca");
			if(INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][13] ][TIPODECONSUMO] == TYPE_ACCESORIO) return MensajesAyuda(playerid,"No se puede guardar esto aca");
			if(TO_X_VENTARIO[playerid][ ID ][ 13 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Inventario_To_Estanteria(playerid,13);
		}
	}
	if(PLAYER_TEMP[playerid][ABRIO_ARMARIO]==true)
	{
		if(TIRAR_INVENTARIO[playerid]==true) return SendClientMessage(playerid,-1,"Cierra el menu de tirar");
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_armario][28])
		{
			Hide_Armario_Casavip(playerid);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_armario][15])
		{
			if(TO_INVENTARIO_X[playerid][ ID ][ 15 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Armario_To_Inventario(playerid,15);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_armario][16])
		{
			if(TO_INVENTARIO_X[playerid][ ID ][ 16 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Armario_To_Inventario(playerid,16);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_armario][17])
		{
			if(TO_INVENTARIO_X[playerid][ ID ][ 17 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Armario_To_Inventario(playerid,17);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_armario][18])
		{
			if(TO_INVENTARIO_X[playerid][ ID ][ 18 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Armario_To_Inventario(playerid,18);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_armario][19])
		{
			if(TO_INVENTARIO_X[playerid][ ID ][ 19 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Armario_To_Inventario(playerid,19);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_armario][20])
		{
			if(TO_INVENTARIO_X[playerid][ ID ][ 20 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Armario_To_Inventario(playerid,20);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_armario][21])
		{
			if(TO_INVENTARIO_X[playerid][ ID ][ 21 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Armario_To_Inventario(playerid,21);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_armario][22])
		{
			if(TO_INVENTARIO_X[playerid][ ID ][ 22 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Armario_To_Inventario(playerid,22);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_armario][23])
		{
			if(TO_INVENTARIO_X[playerid][ ID ][ 23 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Armario_To_Inventario(playerid,23);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_armario][24])
		{
			if(TO_INVENTARIO_X[playerid][ ID ][ 24 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Armario_To_Inventario(playerid,24);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_armario][25])
		{
			if(TO_INVENTARIO_X[playerid][ ID ][ 25 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Armario_To_Inventario(playerid,25);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_armario][26])
		{
			if(TO_INVENTARIO_X[playerid][ ID ][ 26 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Armario_To_Inventario(playerid,26);
		}
		/*                                              
							SEPARAR
														*/
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_armario][2])
		{
			if(INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][2] ][TIPODECONSUMO] != TYPE_ACCESORIO) return MensajesAyuda(playerid,"Solo puedes guardar prendas");
			if(TO_X_VENTARIO[playerid][ ID ][ 2 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Inventario_To_Armario(playerid,2);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_armario][3])
		{
			if(INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][3] ][TIPODECONSUMO] != TYPE_ACCESORIO) return MensajesAyuda(playerid,"Solo puedes guardar prendas");
			if(TO_X_VENTARIO[playerid][ ID ][ 3 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Inventario_To_Armario(playerid,3);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_armario][4])
		{
			if(INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][4] ][TIPODECONSUMO] != TYPE_ACCESORIO) return MensajesAyuda(playerid,"Solo puedes guardar prendas");
			if(TO_X_VENTARIO[playerid][ ID ][ 4 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Inventario_To_Armario(playerid,4);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_armario][5])
		{
			if(INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][5] ][TIPODECONSUMO] != TYPE_ACCESORIO) return MensajesAyuda(playerid,"Solo puedes guardar prendas");
			if(TO_X_VENTARIO[playerid][ ID ][ 5 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Inventario_To_Armario(playerid,5);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_armario][6])
		{
			if(INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][6] ][TIPODECONSUMO] != TYPE_ACCESORIO) return MensajesAyuda(playerid,"Solo puedes guardar prendas");
			if(TO_X_VENTARIO[playerid][ ID ][ 6 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Inventario_To_Armario(playerid,6);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_armario][7])
		{
			if(INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][7] ][TIPODECONSUMO] != TYPE_ACCESORIO) return MensajesAyuda(playerid,"Solo puedes guardar prendas");
			if(TO_X_VENTARIO[playerid][ ID ][ 7 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Inventario_To_Armario(playerid,7);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_armario][8])
		{
			if(INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][8] ][TIPODECONSUMO] != TYPE_ACCESORIO) return MensajesAyuda(playerid,"Solo puedes guardar prendas");
			if(TO_X_VENTARIO[playerid][ ID ][ 8 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Inventario_To_Armario(playerid,8);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_armario][9])
		{
			if(INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][9] ][TIPODECONSUMO] != TYPE_ACCESORIO) return MensajesAyuda(playerid,"Solo puedes guardar prendas");
			if(TO_X_VENTARIO[playerid][ ID ][ 9 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Inventario_To_Armario(playerid,9);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_armario][10])
		{
			if(INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][10] ][TIPODECONSUMO] != TYPE_ACCESORIO) return MensajesAyuda(playerid,"Solo puedes guardar prendas");
			if(TO_X_VENTARIO[playerid][ ID ][ 10 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Inventario_To_Armario(playerid,10);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_armario][11])
		{
			if(INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][11] ][TIPODECONSUMO] != TYPE_ACCESORIO) return MensajesAyuda(playerid,"Solo puedes guardar prendas");
			if(TO_X_VENTARIO[playerid][ ID ][ 11 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Inventario_To_Armario(playerid,11);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_armario][12])
		{
			if(INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][12] ][TIPODECONSUMO] != TYPE_ACCESORIO) return MensajesAyuda(playerid,"Solo puedes guardar prendas");
			if(TO_X_VENTARIO[playerid][ ID ][ 12 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Inventario_To_Armario(playerid,12);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_armario][13])
		{
			if(INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][13] ][TIPODECONSUMO] != TYPE_ACCESORIO) return MensajesAyuda(playerid,"Solo puedes guardar prendas");
			if(TO_X_VENTARIO[playerid][ ID ][ 13 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Inventario_To_Armario(playerid,13);
		}
	}
	/*                                              
					SEPARAR
												*/
	if(PLAYER_TEMP[playerid][ABRIENDO_BAUL]==true)
	{
		if(TIRAR_INVENTARIO[playerid]==true) return SendClientMessage(playerid,-1,"Cierra el menu de tirar");
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_baul_vehiculo][28])
		{
			Hide_Baul_Vehicle(playerid);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_baul_vehiculo][15])
		{
			if(TO_INVENTARIO_X[playerid][ ID ][ 15 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Baul_To_Inventario(playerid,15);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_baul_vehiculo][16])
		{
			if(TO_INVENTARIO_X[playerid][ ID ][ 16 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Baul_To_Inventario(playerid,16);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_baul_vehiculo][17])
		{
			if(TO_INVENTARIO_X[playerid][ ID ][ 17 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Baul_To_Inventario(playerid,17);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_baul_vehiculo][18])
		{
			if(TO_INVENTARIO_X[playerid][ ID ][ 18 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Baul_To_Inventario(playerid,18);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_baul_vehiculo][19])
		{
			if(TO_INVENTARIO_X[playerid][ ID ][ 19 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Baul_To_Inventario(playerid,19);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_baul_vehiculo][20])
		{
			if(TO_INVENTARIO_X[playerid][ ID ][ 20 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Baul_To_Inventario(playerid,20);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_baul_vehiculo][21])
		{
			if(TO_INVENTARIO_X[playerid][ ID ][ 21 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Baul_To_Inventario(playerid,21);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_baul_vehiculo][22])
		{
			if(TO_INVENTARIO_X[playerid][ ID ][ 22 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Baul_To_Inventario(playerid,22);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_baul_vehiculo][23])
		{
			if(TO_INVENTARIO_X[playerid][ ID ][ 23 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Baul_To_Inventario(playerid,23);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_baul_vehiculo][24])
		{
			if(TO_INVENTARIO_X[playerid][ ID ][ 24 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Baul_To_Inventario(playerid,24);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_baul_vehiculo][25])
		{
			if(TO_INVENTARIO_X[playerid][ ID ][ 25 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Baul_To_Inventario(playerid,25);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_baul_vehiculo][26])
		{
			if(TO_INVENTARIO_X[playerid][ ID ][ 26 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Baul_To_Inventario(playerid,26);
		}
		/*                                              
							SEPARAR
														*/
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_baul_vehiculo][2])
		{
			if(TO_X_VENTARIO[playerid][ ID ][ 2 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Inventario_To_Baul(playerid,2);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_baul_vehiculo][3])
		{
			if(TO_X_VENTARIO[playerid][ ID ][ 3 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Inventario_To_Baul(playerid,3);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_baul_vehiculo][4])
		{
			if(TO_X_VENTARIO[playerid][ ID ][ 4 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Inventario_To_Baul(playerid,4);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_baul_vehiculo][5])
		{
			if(TO_X_VENTARIO[playerid][ ID ][ 5 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Inventario_To_Baul(playerid,5);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_baul_vehiculo][6])
		{
			if(TO_X_VENTARIO[playerid][ ID ][ 6 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Inventario_To_Baul(playerid,6);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_baul_vehiculo][7])
		{
			if(TO_X_VENTARIO[playerid][ ID ][ 7 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Inventario_To_Baul(playerid,7);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_baul_vehiculo][8])
		{
			if(TO_X_VENTARIO[playerid][ ID ][ 8 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Inventario_To_Baul(playerid,8);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_baul_vehiculo][9])
		{
			if(TO_X_VENTARIO[playerid][ ID ][ 9 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Inventario_To_Baul(playerid,9);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_baul_vehiculo][10])
		{
			if(TO_X_VENTARIO[playerid][ ID ][ 10 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Inventario_To_Baul(playerid,10);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_baul_vehiculo][11])
		{
			if(TO_X_VENTARIO[playerid][ ID ][ 11 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Inventario_To_Baul(playerid,11);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_baul_vehiculo][12])
		{
			if(TO_X_VENTARIO[playerid][ ID ][ 12 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Inventario_To_Baul(playerid,12);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_baul_vehiculo][13])
		{
			if(TO_X_VENTARIO[playerid][ ID ][ 13 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Inventario_To_Baul(playerid,13);
		}
	}
	/*                                              
							SEPARAR
														*/
	if(PLAYER_TEMP[playerid][INTERCAMBIANDO_NEVERA] == true)
	{
		if(TIRAR_INVENTARIO[playerid]==true) return SendClientMessage(playerid,-1,"Cierra el menu de tirar");
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_nevera_casa][28])
		{
			Hide_Nevera_Casa(playerid);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_nevera_casa][15])
		{
			if(TO_INVENTARIO_X[playerid][ ID ][ 15 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Nevera_To_Inventario(playerid,15);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_nevera_casa][16])
		{
			if(TO_INVENTARIO_X[playerid][ ID ][ 16 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Nevera_To_Inventario(playerid,16);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_nevera_casa][17])
		{
			if(TO_INVENTARIO_X[playerid][ ID ][ 17 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Nevera_To_Inventario(playerid,17);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_nevera_casa][18])
		{
			if(TO_INVENTARIO_X[playerid][ ID ][ 18 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Nevera_To_Inventario(playerid,18);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_nevera_casa][19])
		{
			if(TO_INVENTARIO_X[playerid][ ID ][ 19 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Nevera_To_Inventario(playerid,19);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_nevera_casa][20])
		{
			if(TO_INVENTARIO_X[playerid][ ID ][ 20 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Nevera_To_Inventario(playerid,20);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_nevera_casa][21])
		{
			if(TO_INVENTARIO_X[playerid][ ID ][ 21 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Nevera_To_Inventario(playerid,21);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_nevera_casa][22])
		{
			if(TO_INVENTARIO_X[playerid][ ID ][ 22 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Nevera_To_Inventario(playerid,22);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_nevera_casa][23])
		{
			if(TO_INVENTARIO_X[playerid][ ID ][ 23 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Nevera_To_Inventario(playerid,23);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_nevera_casa][24])
		{
			if(TO_INVENTARIO_X[playerid][ ID ][ 24 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Nevera_To_Inventario(playerid,24);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_nevera_casa][25])
		{
			if(TO_INVENTARIO_X[playerid][ ID ][ 25 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Nevera_To_Inventario(playerid,25);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_nevera_casa][26])
		{
			if(TO_INVENTARIO_X[playerid][ ID ][ 26 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
			Send_Nevera_To_Inventario(playerid,26);
		}
		/*                                              
							SEPARAR
														*/
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_nevera_casa][2])
		{
			if((INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][2] ][TIPODECONSUMO] == COMIDA_24_7) || (INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][2] ][TIPODECONSUMO] == BEBIDA_24_7))
			{
				if(TO_X_VENTARIO[playerid][ ID ][ 2 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
				Send_Inventario_To_Nevera(playerid,2);
			} else MensajesAyuda(playerid,"Solo puedes guardar comida");
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_nevera_casa][3])
		{
			if((INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][3] ][TIPODECONSUMO] == COMIDA_24_7) || (INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][3] ][TIPODECONSUMO] == BEBIDA_24_7))
			{
				if(TO_X_VENTARIO[playerid][ ID ][ 3 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
				Send_Inventario_To_Nevera(playerid,3);
			} else MensajesAyuda(playerid,"Solo puedes guardar comida");
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_nevera_casa][4])
		{
			if((INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][4] ][TIPODECONSUMO] == COMIDA_24_7) || (INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][4] ][TIPODECONSUMO] == BEBIDA_24_7))
			{
				if(TO_X_VENTARIO[playerid][ ID ][ 4 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
				Send_Inventario_To_Nevera(playerid,4);
			} else MensajesAyuda(playerid,"Solo puedes guardar comida");
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_nevera_casa][5])
		{
			if((INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][5] ][TIPODECONSUMO] == COMIDA_24_7) || (INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][5] ][TIPODECONSUMO] == BEBIDA_24_7))
			{
				if(TO_X_VENTARIO[playerid][ ID ][ 5 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
				Send_Inventario_To_Nevera(playerid,5);
			} else MensajesAyuda(playerid,"Solo puedes guardar comida");
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_nevera_casa][6])
		{
			if((INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][6] ][TIPODECONSUMO] == COMIDA_24_7) || (INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][6] ][TIPODECONSUMO] == BEBIDA_24_7))
			{
				if(TO_X_VENTARIO[playerid][ ID ][ 6 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
				Send_Inventario_To_Nevera(playerid,6);
			} else MensajesAyuda(playerid,"Solo puedes guardar comida");
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_nevera_casa][7])
		{
			if((INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][7] ][TIPODECONSUMO] == COMIDA_24_7) || (INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][7] ][TIPODECONSUMO] == BEBIDA_24_7))
			{
				if(TO_X_VENTARIO[playerid][ ID ][ 7 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
				Send_Inventario_To_Nevera(playerid,7);
			} else MensajesAyuda(playerid,"Solo puedes guardar comida");
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_nevera_casa][8])
		{
			if((INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][8] ][TIPODECONSUMO] == COMIDA_24_7) || (INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][8] ][TIPODECONSUMO] == BEBIDA_24_7))
			{
				if(TO_X_VENTARIO[playerid][ ID ][ 8 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
				Send_Inventario_To_Nevera(playerid,8);
			} else MensajesAyuda(playerid,"Solo puedes guardar comida");
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_nevera_casa][9])
		{
			if((INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][9] ][TIPODECONSUMO] == COMIDA_24_7) || (INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][9] ][TIPODECONSUMO] == BEBIDA_24_7))
			{
				if(TO_X_VENTARIO[playerid][ ID ][ 9 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
				Send_Inventario_To_Nevera(playerid,9);
			} else MensajesAyuda(playerid,"Solo puedes guardar comida");
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_nevera_casa][10])
		{
			if((INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][10] ][TIPODECONSUMO] == COMIDA_24_7) || (INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][10] ][TIPODECONSUMO] == BEBIDA_24_7))
			{
				if(TO_X_VENTARIO[playerid][ ID ][ 10 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
				Send_Inventario_To_Nevera(playerid,10);
			} else MensajesAyuda(playerid,"Solo puedes guardar comida");
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_nevera_casa][11])
		{
			if((INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][11] ][TIPODECONSUMO] == COMIDA_24_7) || (INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][11] ][TIPODECONSUMO] == BEBIDA_24_7))
			{
				if(TO_X_VENTARIO[playerid][ ID ][ 11 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
				Send_Inventario_To_Nevera(playerid,11);
			} else MensajesAyuda(playerid,"Solo puedes guardar comida");
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_nevera_casa][12])
		{
			if((INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][12] ][TIPODECONSUMO] == COMIDA_24_7) || (INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][12] ][TIPODECONSUMO] == BEBIDA_24_7))
			{
				if(TO_X_VENTARIO[playerid][ ID ][ 12 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
				Send_Inventario_To_Nevera(playerid,12);
			} else MensajesAyuda(playerid,"Solo puedes guardar comida");
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_nevera_casa][13])
		{
			if((INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][13] ][TIPODECONSUMO] == COMIDA_24_7) || (INVENTARIOPLAYER[ TO_X_VENTARIO[playerid][TIPO][13] ][TIPODECONSUMO] == BEBIDA_24_7))
			{
				if(TO_X_VENTARIO[playerid][ ID ][ 13 ] == INVALID_ID) return MensajesAyuda(playerid,"Vacio");
				Send_Inventario_To_Nevera(playerid,13);
			} else MensajesAyuda(playerid,"Solo puedes guardar comida");
		}
	}
	if(PLAYER_TEMP[playerid][COMPRANDO_ACCESORIOS] == true)
	{
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_comprar_accesorio][1])//Siguiente
		{
			if(PLAYER_TEMP[playerid][INDEX_SHOP_PRENDA] == sizeof(Prendas_Info)-1) PLAYER_TEMP[playerid][INDEX_SHOP_PRENDA] = 0;
			else PLAYER_TEMP[playerid][INDEX_SHOP_PRENDA] += 1;

			new nerak[30];
			/*nombre prenda*/
			format(nerak,sizeof(nerak),"%s",Prendas_Info[ PLAYER_TEMP[playerid][INDEX_SHOP_PRENDA] ][ NAME ]);
			TextDrawSetString(Jugador_Textdraws[playerid][ textdraw_comprar_accesorio ][11], nerak);
			/*prenda model*/
			TextDrawSetPreviewModel(Jugador_Textdraws[playerid][textdraw_comprar_accesorio][6], Prendas_Info[ PLAYER_TEMP[playerid][INDEX_SHOP_PRENDA] ][ OBJETO ]);
			TextDrawShowForPlayer(playerid,Jugador_Textdraws[playerid][ textdraw_comprar_accesorio ][6]);
			switch(Prendas_Info[ PLAYER_TEMP[playerid][INDEX_SHOP_PRENDA]][TIPO_MONEDA])
			{
				case 1:
				{
					format(nerak,sizeof(nerak),"%s",number_format_thousand(Prendas_Info[ PLAYER_TEMP[playerid][INDEX_SHOP_PRENDA] ][PRECIO]));
					TextDrawSetString(Jugador_Textdraws[playerid][textdraw_comprar_accesorio][ 5 ], nerak);
				}
				case 2:
				{
					format(nerak,sizeof(nerak),"~y~ %d RP",Prendas_Info[ PLAYER_TEMP[playerid][INDEX_SHOP_PRENDA] ][PRECIO]);
					TextDrawSetString(Jugador_Textdraws[playerid][textdraw_comprar_accesorio][ 5 ], nerak);
				}
			}
			for(new i=0; i < 12; i++) TextDrawShowForPlayer(playerid,Jugador_Textdraws[playerid][ textdraw_comprar_accesorio ][i]);
 		}
 		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_comprar_accesorio][2])//Anterior
 		{
 			if(PLAYER_TEMP[playerid][INDEX_SHOP_PRENDA] == 0) PLAYER_TEMP[playerid][INDEX_SHOP_PRENDA] = sizeof(Prendas_Info)-1;
			else PLAYER_TEMP[playerid][INDEX_SHOP_PRENDA] -= 1;

			new nerak[30];
			/*nombre prenda*/
			format(nerak,sizeof(nerak),"%s",Prendas_Info[ PLAYER_TEMP[playerid][INDEX_SHOP_PRENDA] ][ NAME ]);
			TextDrawSetString(Jugador_Textdraws[playerid][ textdraw_comprar_accesorio ][11], nerak);
			/*prenda model*/
			TextDrawSetPreviewModel(Jugador_Textdraws[playerid][textdraw_comprar_accesorio][6], Prendas_Info[ PLAYER_TEMP[playerid][INDEX_SHOP_PRENDA] ][ OBJETO ]);
			TextDrawShowForPlayer(playerid,Jugador_Textdraws[playerid][ textdraw_comprar_accesorio ][6]);
			switch(Prendas_Info[ PLAYER_TEMP[playerid][INDEX_SHOP_PRENDA]][TIPO_MONEDA])
			{
				case 1:
				{
					format(nerak,sizeof(nerak),"%s",number_format_thousand(Prendas_Info[ PLAYER_TEMP[playerid][INDEX_SHOP_PRENDA] ][PRECIO]));
					TextDrawSetString(Jugador_Textdraws[playerid][textdraw_comprar_accesorio][ 5 ], nerak);
				}
				case 2:
				{
					format(nerak,sizeof(nerak),"~y~ %d RP",Prendas_Info[ PLAYER_TEMP[playerid][INDEX_SHOP_PRENDA] ][PRECIO]);
					TextDrawSetString(Jugador_Textdraws[playerid][textdraw_comprar_accesorio][ 5 ], nerak);
				}
			}
			for(new i=0; i < 12; i++) TextDrawShowForPlayer(playerid,Jugador_Textdraws[playerid][ textdraw_comprar_accesorio ][i]);
 		}
 		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_comprar_accesorio][3])//Comprar
 		{
 			if(GetCountInventary(playerid) >= Max_Slots_For_Invetary) return MensajesAyuda(playerid,"El inventario esta lleno");
 			switch(Prendas_Info[ PLAYER_TEMP[playerid][INDEX_SHOP_PRENDA]][TIPO_MONEDA])
			{
				case 1:
				{
					if(Prendas_Info[ PLAYER_TEMP[playerid][INDEX_SHOP_PRENDA] ][PRECIO] > GetPlayerCash(playerid)) return MensajesAyuda(playerid,"No tienes suficiente dinero para comprar la prenda");
					GivePlayerCash(playerid,-Prendas_Info[ PLAYER_TEMP[playerid][INDEX_SHOP_PRENDA] ][PRECIO]);
				}
				case 2:
				{
					if(Prendas_Info[ PLAYER_TEMP[playerid][INDEX_SHOP_PRENDA] ][PRECIO] > GetPlayerRp(playerid)) return MensajesAyuda(playerid,"No tienes suficiente "SERVER_COIN" para comprar la prenda");
					GastarRp(playerid,Prendas_Info[ PLAYER_TEMP[playerid][INDEX_SHOP_PRENDA] ][PRECIO]);
				}
			}
			new Query[256];
			format(Query,sizeof(Query),"INSERT INTO INVENTARIO (PLAYER,TIPO,ESTADO) VALUES ('%d','%d','1')",ACCOUNT_INFO[playerid][ac_ID],Prendas_Info[ PLAYER_TEMP[playerid][INDEX_SHOP_PRENDA]][ID_PRENDA]);
    		db_query(Database,Query);
    		CancelSelectTextDraw(playerid);
			MensajesAyuda(playerid,"Prenda adquirida");
			PLAYER_TEMP[playerid][COMPRANDO_ACCESORIOS]=false;
			for(new i=0; i < 12; i++) TextDrawHideForPlayer(playerid,Jugador_Textdraws[playerid][ textdraw_comprar_accesorio ][i]);

 		}
 		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_comprar_accesorio][7]) //Abajo
 		{
 			PLAYER_TEMP[playerid][INDEX_ABAJO] = PLAYER_TEMP[playerid][INDEX_ABAJO] - 5.5;
 			printf("%f",PLAYER_TEMP[playerid][INDEX_ABAJO]);
 			TextDrawSetPreviewRot(Jugador_Textdraws[ playerid ][textdraw_invSH][6], PLAYER_TEMP[playerid][INDEX_ABAJO], PLAYER_TEMP[playerid][INDEX_ARRIBA], PLAYER_TEMP[playerid][INDEX_DERECHA], 1.0);
 			TextDrawShowForPlayer(playerid,Jugador_Textdraws[playerid][ textdraw_comprar_accesorio ][6]);
 		}
 		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_comprar_accesorio][8]) //Arriba
 		{
 			PLAYER_TEMP[playerid][INDEX_ARRIBA] = PLAYER_TEMP[playerid][INDEX_ARRIBA] + 5.5;
 			TextDrawSetPreviewRot(Jugador_Textdraws[ playerid ][textdraw_invSH][6], PLAYER_TEMP[playerid][INDEX_ABAJO], PLAYER_TEMP[playerid][INDEX_ARRIBA], PLAYER_TEMP[playerid][INDEX_DERECHA], 1.0);
 			TextDrawShowForPlayer(playerid,Jugador_Textdraws[playerid][ textdraw_comprar_accesorio ][6]);
 		}
 		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_comprar_accesorio][9]) //Derecha
 		{
 			PLAYER_TEMP[playerid][INDEX_DERECHA] = PLAYER_TEMP[playerid][INDEX_DERECHA] - 5.5;
 			TextDrawSetPreviewRot(Jugador_Textdraws[ playerid ][textdraw_invSH][6], PLAYER_TEMP[playerid][INDEX_ABAJO], PLAYER_TEMP[playerid][INDEX_ARRIBA], PLAYER_TEMP[playerid][INDEX_DERECHA], 1.0);
 			TextDrawShowForPlayer(playerid,Jugador_Textdraws[playerid][ textdraw_comprar_accesorio ][6]);
 		}
 		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_comprar_accesorio][10]) //Izquierda
 		{
 			PLAYER_TEMP[playerid][INDEX_DERECHA] = PLAYER_TEMP[playerid][INDEX_DERECHA] + 5.5;
 			TextDrawSetPreviewRot(Jugador_Textdraws[ playerid ][textdraw_invSH][6], PLAYER_TEMP[playerid][INDEX_ABAJO], PLAYER_TEMP[playerid][INDEX_ARRIBA], PLAYER_TEMP[playerid][INDEX_DERECHA], 1.0);
 			TextDrawShowForPlayer(playerid,Jugador_Textdraws[playerid][ textdraw_comprar_accesorio ][6]);
 		}
	}
	if(ABRIO_INVENTARIO[playerid]==true)
	{
		if(clickedid == Jugador_Textdraws[playerid][textdraw_invSH][15])
		{
			if(ITEM_PLAYER[playerid][ID][15] == INVALID_ID) return HiveIntaruil(playerid);
			ITEM_ID_EQUIPED[playerid] = ITEM_PLAYER[playerid][ID][15];
			TextDrawSetPreviewModel(Jugador_Textdraws[playerid][textdraw_invSH][15], 18670);
			Update_Inferface_Inventario(playerid);
		}
		if(clickedid == Jugador_Textdraws[playerid][textdraw_invSH][16])
		{
			if(ITEM_PLAYER[playerid][ID][16] == INVALID_ID) return HiveIntaruil(playerid);
			ITEM_ID_EQUIPED[playerid] = ITEM_PLAYER[playerid][ID][16];
			TextDrawSetPreviewModel(Jugador_Textdraws[playerid][textdraw_invSH][16], 18670);
			Update_Inferface_Inventario(playerid);
		}
		if(clickedid == Jugador_Textdraws[playerid][textdraw_invSH][17])
		{
			if(ITEM_PLAYER[playerid][ID][17] == INVALID_ID) return HiveIntaruil(playerid);
			ITEM_ID_EQUIPED[playerid] = ITEM_PLAYER[playerid][ID][17];
			TextDrawSetPreviewModel(Jugador_Textdraws[playerid][textdraw_invSH][17], 18670);
			Update_Inferface_Inventario(playerid);
		}
		if(clickedid == Jugador_Textdraws[playerid][textdraw_invSH][18])
		{
			if(ITEM_PLAYER[playerid][ID][18] == INVALID_ID) return HiveIntaruil(playerid);
			ITEM_ID_EQUIPED[playerid] = ITEM_PLAYER[playerid][ID][18];
			TextDrawSetPreviewModel(Jugador_Textdraws[playerid][textdraw_invSH][18], 18670);
			Update_Inferface_Inventario(playerid);
		}
		if(clickedid == Jugador_Textdraws[playerid][textdraw_invSH][19])
		{
			if(ITEM_PLAYER[playerid][ID][19] == INVALID_ID) return HiveIntaruil(playerid);
			ITEM_ID_EQUIPED[playerid] = ITEM_PLAYER[playerid][ID][19];
			TextDrawSetPreviewModel(Jugador_Textdraws[playerid][textdraw_invSH][19], 18670);
			Update_Inferface_Inventario(playerid);
		}
		//=========================================================================================================
		if(clickedid == Jugador_Textdraws[playerid][textdraw_invSH][2])
		{
			IVENTARIOID[playerid]=INVENTARY_PLAYER[playerid][ ID ][2];
			Armed_Inventary(playerid);
		}
		else if(clickedid == Jugador_Textdraws[playerid][textdraw_invSH][3])
		{
			IVENTARIOID[playerid]=INVENTARY_PLAYER[playerid][ ID ][3];
			Armed_Inventary(playerid);
		}
		else if(clickedid == Jugador_Textdraws[playerid][textdraw_invSH][4])
		{
			IVENTARIOID[playerid]=INVENTARY_PLAYER[playerid][ ID ][4];
			Armed_Inventary(playerid);
		}
		else if(clickedid == Jugador_Textdraws[playerid][textdraw_invSH][5])
		{
			IVENTARIOID[playerid]=INVENTARY_PLAYER[playerid][ ID ][5];
			Armed_Inventary(playerid);
		}
		else if(clickedid == Jugador_Textdraws[playerid][textdraw_invSH][6])
		{
			IVENTARIOID[playerid]=INVENTARY_PLAYER[playerid][ ID ][6];
			Armed_Inventary(playerid);
		}
		else if(clickedid == Jugador_Textdraws[playerid][textdraw_invSH][7])
		{
			IVENTARIOID[playerid]=INVENTARY_PLAYER[playerid][ ID ][7];
			Armed_Inventary(playerid);
		}
		else if(clickedid == Jugador_Textdraws[playerid][textdraw_invSH][8])
		{
			IVENTARIOID[playerid]=INVENTARY_PLAYER[playerid][ ID ][8];
			Armed_Inventary(playerid);
		}
		else if(clickedid == Jugador_Textdraws[playerid][textdraw_invSH][9])
		{
			IVENTARIOID[playerid]=INVENTARY_PLAYER[playerid][ ID ][9];
			Armed_Inventary(playerid);
		}
		else if(clickedid == Jugador_Textdraws[playerid][textdraw_invSH][10])
		{
			IVENTARIOID[playerid]=INVENTARY_PLAYER[playerid][ ID ][10];
			Armed_Inventary(playerid);
		}
		else if(clickedid == Jugador_Textdraws[playerid][textdraw_invSH][11])
		{
			IVENTARIOID[playerid]=INVENTARY_PLAYER[playerid][ ID ][11];
			Armed_Inventary(playerid);
		}
		else if(clickedid == Jugador_Textdraws[playerid][textdraw_invSH][12])
		{
			IVENTARIOID[playerid]=INVENTARY_PLAYER[playerid][ ID ][12];
			Armed_Inventary(playerid);
		}
		else if(clickedid == Jugador_Textdraws[playerid][textdraw_invSH][13])
		{
			IVENTARIOID[playerid]=INVENTARY_PLAYER[playerid][ ID ][13];
			Armed_Inventary(playerid);
		}
		//=========================================================================================================
		else if(clickedid == Jugador_Textdraws[playerid][textdraw_invSH][20])
		{
			HiveIntaruil(playerid);
		}
		else if(clickedid == Jugador_Textdraws[playerid][textdraw_invSH][21])
		{
			//Tirar_Inventario(playerid);
			HiveIntaruil(playerid);
			ShowBandaUnirme(playerid);
			SelectTextDraw(playerid,SELEC_TEXTDRAW);
		}
	}
	if(PLAYER_TEMP[playerid][pt_INV_BANDA] == true)
	{
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_banda_inv][15])
		{
			HideBandaInv(playerid);

		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_banda_inv][1])
		{
			HideBandaInv(playerid);
			ABRIO_INVENTARIO[playerid]=true;
		 	Show_Inventario(playerid);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_banda_inv][18])
		{
			HideBandaInv(playerid);
			ShowDisputasa(playerid);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_banda_inv][16])
		{
			PLAYER_TEMP[playerid][pt_BANDA_ID] ++;
			if(PLAYER_TEMP[playerid][pt_BANDA_ID] >= GetMaxBandas()) PLAYER_TEMP[playerid][pt_BANDA_ID]=0;
			ShowBandaUnirme(playerid);
			SelectTextDraw(playerid,SELEC_TEXTDRAW);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_banda_inv][17])
		{
			PLAYER_TEMP[playerid][pt_BANDA_ID] --;
			if(PLAYER_TEMP[playerid][pt_BANDA_ID] <= 0) PLAYER_TEMP[playerid][pt_BANDA_ID]=0;
			ShowBandaUnirme(playerid);
			SelectTextDraw(playerid,SELEC_TEXTDRAW);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_banda_inv][10])
		{
			HideBandaInv(playerid);
			if(PLAYER_TEMP[playerid][pt_OPTION_INV_BANDA]== 1)
			{
				ShowPlayerDialog(playerid,DIALOG_ABANDoNAR_BANDA,DIALOG_STYLE_MSGBOX, "Abandonar banda","Estas seguro que deseas abandonar la banda?:", "Si", "No");
				return 1;
			}

			if(PLAYER_WORKS[playerid][WORK_POLICE]) return SendClientMessage(playerid, -1, "{00FF80}Los policias no pueden tener bandas");
			if(PLAYER_CREW[playerid][player_crew_VALID]) return SendClientMessage(playerid, -1, "{00FF80}Ya perteneces a otra banda.");
			if(PLAYER_TEMP[playerid][pt_GAME_STATE] != GAME_STATE_NORMAL) return SendClientMessage(playerid, -1, "{00FF80}No puedes unirte por ahora intenta mas tarde.");
			
			if(PLAYER_TEMP[playerid][pt_OPTION_INV_BANDA]== 0)
			{
				HideBandaInv(playerid);
				if(GetMiembrosForThisBanda(PLAYER_TEMP[playerid][get_ID_BANDA_INV]) >= 20) return MensajesAyuda(playerid,"La banda esta llena");
				ShowPlayerDialog(playerid,DIALOG_MENSAJE_INV_BANDA,DIALOG_STYLE_INPUT,"Mensaje","Ingresa el mensaje que quieres dejarle al lider de la banda","Enviar","Cancelar");
				return 1;
			}

		}
	}
	if(TIRAR_INVENTARIO[playerid]==true)
	{
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_tirar_inventario][14])
		{
			Hide_Tirar_Inventario(playerid);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_tirar_inventario][2])
		{
			Tirar_Inventario_Ex(playerid,INVENTARY_PLAYER[playerid][TIPO][2],INVENTARY_PLAYER[playerid][ID][2],INVENTARY_PLAYER[playerid][STADO][2]);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_tirar_inventario][3])
		{
			Tirar_Inventario_Ex(playerid,INVENTARY_PLAYER[playerid][TIPO][3],INVENTARY_PLAYER[playerid][ID][3],INVENTARY_PLAYER[playerid][STADO][3]);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_tirar_inventario][4])
		{
			Tirar_Inventario_Ex(playerid,INVENTARY_PLAYER[playerid][TIPO][4],INVENTARY_PLAYER[playerid][ID][4],INVENTARY_PLAYER[playerid][STADO][4]);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_tirar_inventario][5])
		{
			Tirar_Inventario_Ex(playerid,INVENTARY_PLAYER[playerid][TIPO][5],INVENTARY_PLAYER[playerid][ID][5],INVENTARY_PLAYER[playerid][STADO][5]);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_tirar_inventario][6])
		{
			Tirar_Inventario_Ex(playerid,INVENTARY_PLAYER[playerid][TIPO][6],INVENTARY_PLAYER[playerid][ID][6],INVENTARY_PLAYER[playerid][STADO][6]);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_tirar_inventario][7])
		{
			Tirar_Inventario_Ex(playerid,INVENTARY_PLAYER[playerid][TIPO][7],INVENTARY_PLAYER[playerid][ID][7],INVENTARY_PLAYER[playerid][STADO][7]);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_tirar_inventario][8])
		{
			Tirar_Inventario_Ex(playerid,INVENTARY_PLAYER[playerid][TIPO][8],INVENTARY_PLAYER[playerid][ID][8],INVENTARY_PLAYER[playerid][STADO][8]);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_tirar_inventario][9])
		{
			Tirar_Inventario_Ex(playerid,INVENTARY_PLAYER[playerid][TIPO][9],INVENTARY_PLAYER[playerid][ID][9],INVENTARY_PLAYER[playerid][STADO][9]);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_tirar_inventario][10])
		{
			Tirar_Inventario_Ex(playerid,INVENTARY_PLAYER[playerid][TIPO][10],INVENTARY_PLAYER[playerid][ID][10],INVENTARY_PLAYER[playerid][STADO][10]);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_tirar_inventario][11])
		{
			Tirar_Inventario_Ex(playerid,INVENTARY_PLAYER[playerid][TIPO][11],INVENTARY_PLAYER[playerid][ID][11],INVENTARY_PLAYER[playerid][STADO][11]);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_tirar_inventario][12])
		{
			Tirar_Inventario_Ex(playerid,INVENTARY_PLAYER[playerid][TIPO][12],INVENTARY_PLAYER[playerid][ID][12],INVENTARY_PLAYER[playerid][STADO][12]);
		}
		if(clickedid == Jugador_Textdraws[ playerid ][textdraw_tirar_inventario][13])
		{
			Tirar_Inventario_Ex(playerid,INVENTARY_PLAYER[playerid][TIPO][13],INVENTARY_PLAYER[playerid][ID][13],INVENTARY_PLAYER[playerid][STADO][13]);
		}

	    return 1;
	}
    if(clickedid == Text:INVALID_TEXT_DRAW)
    {

    	//
		PLAYER_TEMP[playerid][pt_SELECT_TEXTDRAW] = false;
	
		if(PLAYER_TEMP[playerid][pt_READING_GUIDE])
		{
			SendClientMessage(playerid, 0xA9F5A9AA, "Antes de continuar debes leer el tutorial de conceptos.");
			SelectTextDrawEx(playerid, 0xe8d08fFF);
			return 1;
		}
		
		if(PLAYER_TEMP[playerid][pt_REGISTER_SELECTING_SKIN])
		{
			SendClientMessage(playerid, 0xA9F5A9AA, "Antes de continuar debes elegir tu sexo y tu ropa.");
			SelectTextDrawEx(playerid, 0xe8d08fFF);
			return 1;
		}	

		if(PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_ENABLED])
		{
			ExitPlayerPropertyConstructor(playerid);
			return 1;
		}
		
		if(PLAYER_TEMP[playerid][pt_CLOTHING_SHOP] != -1) // Tiene abierto el menú de ropa
		{
			ClosePlayerClothingMenu(playerid);
			ExitPlayerWardrobe(playerid);
		}
		
		if(PLAYER_TEMP[playerid][pt_CHANGE_INTERIOR]) Hide_Select_Interior_Casa(playerid);
		if(PLAYER_TEMP[playerid][COMPRANDO_ACCESORIOS]) Hide_Buy_Toys(playerid);
		if(PLAYER_TEMP[playerid][pt_VIENDO_TEXTURAS] == true) LoadTextureForCasa(playerid), HideShowTexturaCasa(playerid);
		if(PLAYER_TEMP[playerid][ABRIO_ARMERIA] == true) Hide_Armeria_Casa(playerid);
		if(PLAYER_TEMP[playerid][ABRIO_ARMARIO]==true) Hide_Armario_Casavip(playerid);
		if(PLAYER_TEMP[playerid][ABRIENDO_BAUL]==true) Hide_Baul_Vehicle(playerid);
		if(PLAYER_TEMP[playerid][INTERCAMBIANDO_NEVERA] == true) Hide_Nevera_Casa(playerid);
		if(ABRIO_INVENTARIO[playerid]==true) HiveIntaruil(playerid);
		if(PLAYER_TEMP[playerid][pt_TOYS_SHOP]) ClosePlayerToysMenu(playerid);
		if(PLAYER_TEMP[playerid][P_SHOPCAR]) HideBuyVehicleMenu(playerid);
		if(PI[playerid][P_SHOP_WEAPON]) HidePlayerTextdrawsAmmu(playerid);
		if(PI[playerid][P_SHOP_SKIN]) HidePlayerTextdrawsSkin(playerid);
		if(PLAYER_TEMP[playerid][pt_SHOP]) HidePlayerShop(playerid);
		if(PLAYER_TALLER[playerid][OPEN_F]) HideTaller(playerid);
			
		if(PLAYER_TEMP[playerid][pt_TUNING_GARAGE_SHOP])
		{
			CancelPlayerTuningShop(playerid);
			ShowDialog(playerid, DIALOG_VOBJECT_MENU);
		}
		return 1;
	}

	if(PLAYER_TEMP[playerid][pt_SHOP] && (PLAYER_TEMP[playerid][pt_SHOP_STATE] == PLAYER_SHOP_STATE_ALL || PLAYER_TEMP[playerid][pt_SHOP_STATE] == PLAYER_SHOP_STATE_MY_ADS))
	{
		for(new i = 0; i != 6; i ++)
		{
			if(clickedid == Textdraws[textdraw_SHOP_ARTICLES_BOX][i])
			{
				if(!PLAYER_TEMP[playerid][pt_SHOP_ARTICLE_ID][i]) return SendClientMessage(playerid, -1, "{00FF80}Este anuncio ya no está disponible.");
				
				new DBResult:Result, DB_Query[64], bool:found;
				format(DB_Query, sizeof DB_Query, "SELECT `ID` FROM `SHOP` WHERE `ID` = '%d';", PLAYER_TEMP[playerid][pt_SHOP_ARTICLE_ID][i]);
				Result = db_query(Database, DB_Query);

				if(db_num_rows(Result)) found = true;
				db_free_result(Result);
				
				if(!found) return SendClientMessage(playerid, -1, "{00FF80}Este anuncio ya no está disponible.");
				PLAYER_TEMP[playerid][pt_SHOP_SELECTED_ARTICLE_ID] = PLAYER_TEMP[playerid][pt_SHOP_ARTICLE_ID][i];
				PLAYER_TEMP[playerid][pt_SHOP_STATE] = PLAYER_SHOP_STATE_AD;
				
				UpdatePlayerShop(playerid);
				break;
			}
		}
		return 1;
	}
	
	if(PLAYER_TEMP[playerid][pt_TUNING_GARAGE_SHOP])
	{
		if(clickedid == Textdraws[textdraw_SHOP_TUNING][2]) //Comprar
		{
			new slot = GetVehicleFreeObjectSlot(PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID]);
			if(!ACCOUNT_INFO[playerid][ac_SU] && slot >= MAX_NU_VOBJECTS)
			{
				PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
				SendClientMessageEx(playerid, -1, "{E6F8E0}¡Los jugadores {b1fc6f}VIP {E6F8E0}pueden tener hasta %d objetos en vehículos! Usa {fffb49}/ayuda {E6F8E0}si quieres ser {b1fc6f}VIP.", MAX_SU_VOBJECTS);
				return 1;
			}
			if(slot == -1)
			{
				SendClientMessage(playerid, -1, "{00FF80}No hay más espacio para objetos en este vehículo.");
				return 1;
			}
			
			if(Tuning_Shop_Objects[ PLAYER_TEMP[playerid][pt_SELECT_TUNING_OBJECT] ][tuning_object_PRICE] > CHARACTER_INFO[playerid][ch_CASH])
			{
				PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
				SendClientMessageEx(playerid, -1, "{E6F8E0}No tienes dinero suficiente, te faltan {FF6633}%s$ {E6F8E0}para poder comprar este objeto.", number_format_thousand(Tuning_Shop_Objects[ PLAYER_TEMP[playerid][pt_SELECT_TUNING_OBJECT] ][tuning_object_PRICE] - CHARACTER_INFO[playerid][ch_CASH]));
				return 1;
			}
			
			GivePlayerCash(playerid, -Tuning_Shop_Objects[ PLAYER_TEMP[playerid][pt_SELECT_TUNING_OBJECT] ][tuning_object_PRICE]);
			
			VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][slot][vobject_VALID] = true;
			VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][slot][vobject_TYPE] = VOBJECT_TYPE_OBJECT;
			VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][slot][vobject_ID] = 0;
			VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][slot][vobject_MODELID] = Tuning_Shop_Objects[ PLAYER_TEMP[playerid][pt_SELECT_TUNING_OBJECT] ][tuning_object_MODELID];
			format(VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][slot][vobject_NAME], 32, "%s", Tuning_Shop_Objects[ PLAYER_TEMP[playerid][pt_SELECT_TUNING_OBJECT] ][tuning_object_NAME]);
			VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][slot][vobject_ATTACHED] = true;
			UpdateVehicleAttachedObject(PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID], slot);
			
			RegisterNewVehicleObject(PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID], slot);
			CancelPlayerTuningShop(playerid);
			
			SendClientMessage(playerid, -1, "{f4d442}Ajusta el objeto y haz clic en el icono de guardar, si pulsas {aed164}'ESCAPE' {f4d442}no se guardará la configuración.");
			SendClientMessage(playerid, -1, "{f4d442}Mantén presionado {aed164}'W' {f4d442}para mover la cámara.");
			EditVehicleObject(playerid, PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID], slot);
			return 1;
		}
		else if(clickedid == Textdraws[textdraw_SHOP_TUNING][3]) //Siguiente
		{
			if(PLAYER_TEMP[playerid][pt_SELECT_TUNING_OBJECT] == (sizeof(Tuning_Shop_Objects) - 1)) PLAYER_TEMP[playerid][pt_SELECT_TUNING_OBJECT] = 0;			
			else PLAYER_TEMP[playerid][pt_SELECT_TUNING_OBJECT] ++;
			UpdateTuningShop(playerid);
			return 1;
		}
		else if(clickedid == Textdraws[textdraw_SHOP_TUNING][4]) //Anterior
		{
			if(PLAYER_TEMP[playerid][pt_SELECT_TUNING_OBJECT] == 0) PLAYER_TEMP[playerid][pt_SELECT_TUNING_OBJECT] = sizeof(Tuning_Shop_Objects) - 1;
			else PLAYER_TEMP[playerid][pt_SELECT_TUNING_OBJECT] --;
			UpdateTuningShop(playerid);
			return 1;
		}
		return 1;
	}
	
	return 1;
}
 
Show_Preview_Skin_Arma(playerid)
{
	switch (YHash(Armas_Skin[ PI[playerid][P_SHOP_SKIN_INDEX_NOMBRE]][2]))
	{
	    case _H<Rojo>:SetPlayerAttachedObject(playerid,9,Armas_Skin_Informacion[ PI[playerid][P_SHOP_SKIN_INDEX_INFORMACION]][1],2,0.359999,0.000000,0.174998,0.000000,83.499961,0.000000,1.126999,1.167000,1.157999,-65536,-65536);
	    case _H<Verde>:SetPlayerAttachedObject(playerid,9,Armas_Skin_Informacion[ PI[playerid][P_SHOP_SKIN_INDEX_INFORMACION]][1],2,0.359999,0.000000,0.174998,0.000000,83.499961,0.000000,1.126999,1.167000,1.157999,-12009472,-12009472);
	    case _H<Rosado>:SetPlayerAttachedObject(playerid,9,Armas_Skin_Informacion[ PI[playerid][P_SHOP_SKIN_INDEX_INFORMACION]][1],2,0.359999,0.000000,0.174998,0.000000,83.499961,0.000000,1.126999,1.167000,1.157999,-383796,-383796);
	    case _H<Cafe>:SetPlayerAttachedObject(playerid,9,Armas_Skin_Informacion[ PI[playerid][P_SHOP_SKIN_INDEX_INFORMACION]][1],2,0.359999,0.000000,0.174998,0.000000,83.499961,0.000000,1.126999,1.167000,1.157999,-12837875,-12837875);
	    case _H<Amarillo>:SetPlayerAttachedObject(playerid,9,Armas_Skin_Informacion[ PI[playerid][P_SHOP_SKIN_INDEX_INFORMACION]][1],2,0.359999,0.000000,0.174998,0.000000,83.499961,0.000000,1.126999,1.167000,1.157999,-1856494,-1856494);
	    case _H<Azul>:SetPlayerAttachedObject(playerid,9,Armas_Skin_Informacion[ PI[playerid][P_SHOP_SKIN_INDEX_INFORMACION]][1],2,0.359999,0.000000,0.174998,0.000000,83.499961,0.000000,1.126999,1.167000,1.157999,-15738374,-15738374);
	    case _H<Negro>:SetPlayerAttachedObject(playerid,9,Armas_Skin_Informacion[ PI[playerid][P_SHOP_SKIN_INDEX_INFORMACION]][1],2,0.359999,0.000000,0.174998,0.000000,83.499961,0.000000,1.126999,1.167000,1.157999,-16777216,-16777216);
	}
	return 1;
}
funcion UpdateGamePlay(playerid)
{
	PLAYER_TEMP[playerid][pt_TIMER_LOGIN]--;
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_login][5], floatadd(253.049591, floatdiv(float(PLAYER_TEMP[playerid][pt_TIMER_LOGIN]), 0.47635916)), 0.000000);
	PlayerTextDrawShow(playerid,PlayerTextdraws[playerid][textdraw_login][5]);
	if(PLAYER_TEMP[playerid][pt_TIMER_LOGIN] <= 0)
	{
		KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][20]);
		SendClientMessage(playerid,-1,"Fuiste expulsado por no haberte logueado");
		KickEx(playerid,100);
	}
	return 1;
}
stock PlayGame(playerid)
{
	if(!PLAYER_TEMP[playerid][pt_USER_VALID_NAME] || PLAYER_TEMP[playerid][pt_KICKED]) return 0;
	switch(PLAYER_TEMP[playerid][pt_OPCION_LOGIN])
	{
		case LOGUEARSE:
		{
			new password[64 + 1];
			SHA256_PassHash(PLAYER_TEMP[playerid][Contrasena], ACCOUNT_INFO[playerid][ac_SALT], password, sizeof password);
		
			if(!strcmp(password, ACCOUNT_INFO[playerid][ac_PASS], false))
			{
				PLAYER_TEMP[playerid][LOGUEADO]=true;
				LoadCharacterData(playerid);
				LoadPlayerBankAccountData(playerid);
				LoadPlayerToysData(playerid);
				LoadPlayerPocketData(playerid);
				LoadPlayerPhoneData(playerid);
				LoadPlayerGPSData(playerid);
				LoadPlayerObjectsData(playerid);
				LoadPlayerVehicles(playerid);
				LoadPlayerSkills(playerid);
				LoadPlayerWorks(playerid);
				LoadPlayerMisc(playerid);
				LoadPlayerWeaponsData(playerid);
				LoadPlayerCrewInfo(playerid);
				LoadPlayerWorks_Nivel(playerid);
				LoadPlayerSkinsWeapons(playerid);
				LoadPlayerPescados(playerid);
				SetPlayerScore(playerid, ACCOUNT_INFO[playerid][ac_LEVEL]);
				PLAYER_TEMP[playerid][pt_DOUBT_CHANNEL_TIME] = gettime();
				ResetPlayerWeapons(playerid);
				ResetPlayerMoney(playerid);
				GivePlayerMoney(playerid, CHARACTER_INFO[playerid][ch_CASH]);
				SetPlayerFightingStyle(playerid, CHARACTER_INFO[playerid][ch_FIGHT_STYLE]);
				SetPlayerHealthEx(playerid, CHARACTER_INFO[playerid][ch_HEALTH]);
				SetPlayerArmourEx(playerid, CHARACTER_INFO[playerid][ch_ARMOUR]);
				SetPlayerVirtualWorld(playerid, 0);
				SetPlayerNormalColor(playerid);
				StopAudioStreamForPlayer(playerid);
				SetSpawnInfo(playerid, NO_TEAM, CHARACTER_INFO[playerid][ch_SKIN], CHARACTER_INFO[playerid][ch_POS][0], CHARACTER_INFO[playerid][ch_POS][1], CHARACTER_INFO[playerid][ch_POS][2], CHARACTER_INFO[playerid][ch_ANGLE], 0, 0, 0, 0, 0, 0);
				SetPlayerInterior(playerid, CHARACTER_INFO[playerid][ch_INTERIOR]);
				PLAYER_TEMP[playerid][pt_LOGUEAR]=false;
				PLAYER_TEMP[playerid][pt_BAD_LOGIN_ATTEMP] = 0;
				TogglePlayerSpectatingEx(playerid, false);
				TogglePlayerControllableEx(playerid, false);
				SendClientMessageEx(playerid, -1, "Bienvenido {58ACFA}%s, {FFFFFF}te vimos por última vez el {58ACFA}%s.", PLAYER_TEMP[playerid][pt_RP_NAME], ACCOUNT_INFO[playerid][ac_LAST_CONNECTION]);
				SendClientMessage(playerid,-1,"Usa la tecla {58ACFA}'T'{FFFFFF} para escribir o ejecutar comandos, usa {58ACFA}/Duda {FFFFFF}si tienes alguna duda acerca del servidor");
				GameTextForPlayer(playerid,"~n~~n~~n~~n~~b~~h~Datos cargados.",3000,3);

				for(new i=0; i<= 5; i++) PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][textdraw_login][i]);
			    for(new i=0; i <= 12; i++) TextDrawHideForPlayer(playerid, Textdraws[textdraw_login_imagine][i]);
			    PLAYER_TEMP[playerid][pt_LOGUEAR]=false;
			    CancelSelectTextDraw(playerid);
			    KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][20]);
			}
			else // Error
			{
				PLAYER_TEMP[playerid][pt_BAD_LOGIN_ATTEMP] ++;
				if(PLAYER_TEMP[playerid][pt_BAD_LOGIN_ATTEMP] > MAX_BAD_LOGIN_ATTEMPS) return Kick(playerid);
				SelectTextDraw(playerid, 0xe8d08fFF);
				SendClientMessageEx(playerid,-1,""R"@Error: "W"La contraseña escrita es incorrecta intentos:"R"%d/",PLAYER_TEMP[playerid][pt_BAD_LOGIN_ATTEMP],MAX_BAD_LOGIN_ATTEMPS);
			}
		}
		case REGISTRARSE:
		{
			if(strlen(PLAYER_TEMP[playerid][Contrasena]) < MIN_PASS_LENGTH || strlen(PLAYER_TEMP[playerid][Contrasena]) > MAX_PASS_LENGTH)
			{
				SelectTextDraw(playerid, 0xe8d08fFF);
				SendClientMessage(playerid,-1,""R"@Error: "W"La contraseña escrita es muy larga o muy corta intentalo de nuevo tipeando una nueva "R"contraseña");
				return 1;
			}
			for(new i=0; i<= 5; i++) PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][textdraw_login][i]);
		    for(new i=0; i <= 12; i++) TextDrawHideForPlayer(playerid, Textdraws[textdraw_login_imagine][i]);
		    	
		    KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][20]);
		    PLAYER_TEMP[playerid][pt_LOGUEAR]=false;
		    CancelSelectTextDraw(playerid);
			format(ACCOUNT_INFO[playerid][ac_IP], 16, "%s", PLAYER_TEMP[playerid][pt_IP]);
			format(ACCOUNT_INFO[playerid][ac_NAME], 24, "%s", PLAYER_TEMP[playerid][pt_NAME]);
			format(PLAYER_TEMP[playerid][pt_PASSWD], 24, "%s", PLAYER_TEMP[playerid][Contrasena]);
			
			new salt[16];
			getRandomSalt(salt);
			format(ACCOUNT_INFO[playerid][ac_SALT], 16, "%s", salt);
			SHA256_PassHash(PLAYER_TEMP[playerid][Contrasena], ACCOUNT_INFO[playerid][ac_SALT], ACCOUNT_INFO[playerid][ac_PASS], 64 + 1);
			PLAYER_TEMP[playerid][LOGUEADO]=true;
			ACCOUNT_INFO[playerid][ac_LEVEL] = 1;
			ACCOUNT_INFO[playerid][ac_REP] = 1;
			ACCOUNT_INFO[playerid][ac_TIME_FOR_REP] = TIME_FOR_REP;
			
			ShowDialog(playerid, DIALOG_REGISTER_EMAIL);
		}
		default: Kick(playerid);
	}
	return 1;
}
public OnPlayerClickPlayerTextDraw(playerid, PlayerText:playertextid)
{
	if (!AntiSpamFuncion(playerid, 1)) return 1;

	if(PLAYER_TEMP[playerid][pt_LOGUEAR]==true)
	{
		if(playertextid == PlayerTextdraws[playerid][textdraw_login][0] || playertextid == PlayerTextdraws[playerid][textdraw_login][2])
		{
			PLAYER_TEMP[playerid][pt_DIALOG_RESPONDED] = false;
			ShowPlayerDialog(playerid,DIALOG_PUTPASS,DIALOG_STYLE_PASSWORD,"| CONTRASEÑA |", "{ffffff}Hola bienvenido(a) por favor escribe tu contraseña\nEn el cuadro que vez abajo, luego selecciona{ffff00} PLAY",">>","(X)");
		}
		else if(playertextid == PlayerTextdraws[playerid][textdraw_login][3])
		{
			if(strlen(PLAYER_TEMP[playerid][Contrasena]) < MIN_PASS_LENGTH)
			{
				SelectTextDraw(playerid, 0xe8d08fFF);
				SendClientMessage(playerid,-1,""R"@Error: "W"No has escrito tu "R"contraseña");
				return 1;
			}
			else
			{
				GameTextForPlayer(playerid,"~n~~n~~n~~n~~r~~h~Cargando tus datos..",5000,3);
				PlayGame(playerid);
			}
		}
		else if(playertextid == PlayerTextdraws[playerid][textdraw_login][4])
		{
			Kick(playerid);
		}
	}
	if(PLAYER_TEMP[playerid][pt_MENU]==true)
	{
		if(playertextid == PlayerTextdraws[playerid][textdraw_menu][1])
		{
			callcmd::notificaciones(playerid,"");
			HidePlayerMenu(playerid);
		}
		else if(playertextid == PlayerTextdraws[playerid][textdraw_menu][2])
		{
			callcmd::ayuda(playerid,"");
			HidePlayerMenu(playerid);
		}
		else if(playertextid == PlayerTextdraws[playerid][textdraw_menu][3])
		{
			ShowDialog(playerid, DIALOG_PLAYER_GPS_VEHICLES);
			HidePlayerMenu(playerid);
		}
		else if(playertextid == PlayerTextdraws[playerid][textdraw_menu][4])
		{
			callcmd::accesorios(playerid,"");
			HidePlayerMenu(playerid);
		}
		else if(playertextid == PlayerTextdraws[playerid][textdraw_menu][5])
		{
			HidePlayerMenu(playerid);
		}
		else if(playertextid == PlayerTextdraws[playerid][textdraw_menu][6])
		{
			callcmd::mapa(playerid,"");
			HidePlayerMenu(playerid);
		}
		else if(playertextid == PlayerTextdraws[playerid][textdraw_menu][7])
		{
			if(PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] == -1 || PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] == 0)
		 	{
			 	if(ABRIO_INVENTARIO[playerid]==false)
			 	{
			 		if(PLAYER_TEMP[playerid][pt_PLAYER_LUMBERJACK_TREE] == -1)
					{
						for(new i=0; i <= 8; i++) PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][textdraw_menu][i]);
						PLAYER_TEMP[playerid][pt_MENU]=false;
	 					ABRIO_INVENTARIO[playerid]=true;
			 			Show_Inventario(playerid);
			 		}
			 	}
			 	else
			 	{
			 		HiveIntaruil(playerid);
			 	}
		 	}
		}
		else if(playertextid == PlayerTextdraws[playerid][textdraw_menu][8])
		{
			callcmd::panel(playerid,"");
			HidePlayerMenu(playerid);
		}
	}
	
	//
	if(PLAYER_TALLER[playerid][OPEN_F] == true)
	{
		switch(PLAYER_TALLER[playerid][FUNCION])
		{
			case 1:
			{
				if(playertextid == PlayerTextdraws[playerid][textdraw_taller][2])
				{
					ShowPlayerDialog(playerid,DIALOG_TALLER_REPAIR_VEH,DIALOG_STYLE_MSGBOX,"Reparar vehiculo","Reparar el vehiculo por un costo de: $ 5.000?", "Aceptar", "Cancelar");
				}
				else if(playertextid == PlayerTextdraws[playerid][textdraw_taller][3])
				{
					HideTaller(playerid);
				}
				else if(playertextid == PlayerTextdraws[playerid][textdraw_taller][4])
				{
					ShowTaller(playerid, 2);
				}
			}
			case 2:
			{
				if(playertextid == PlayerTextdraws[playerid][textdraw_taller][2])
				{
					new caption[60];
					format(caption, sizeof caption, "Pintar vehiculo color primario");
					new dialog[4500];// * (sizeof(VEHICLE_COLORS) + 1) ];
					for(new i = 0; i != sizeof VEHICLE_COLORS; i++)
					{
						new line_str[50];
						format(line_str, sizeof(line_str), "{%06x}%d color\n", VEHICLE_COLORS[i] >>> 8, i);
						strcat(dialog, line_str);
					}
					ShowPlayerDialog(playerid, DIALOG_TALLER_COLOR_1, DIALOG_STYLE_LIST, caption, dialog, "Seleccionar", "Cancelar");
				}
				if(playertextid == PlayerTextdraws[playerid][textdraw_taller][4])
				{
					new caption[60];
					format(caption, sizeof caption, "Pintar vehiculo color segundario");
					new dialog[4500];// * (sizeof(VEHICLE_COLORS) + 1) ];
					for(new i = 0; i != sizeof VEHICLE_COLORS; i++)
					{
						new line_str[50];
						format(line_str, sizeof(line_str), "{%06x}%d color\n", VEHICLE_COLORS[i] >>> 8, i);
						strcat(dialog, line_str);
					}
					ShowPlayerDialog(playerid, DIALOG_TALLER_COLOR_2, DIALOG_STYLE_LIST, caption, dialog, "Seleccionar", "Cancelar");
				}
				if(playertextid == PlayerTextdraws[playerid][textdraw_taller][3])
				{
					ShowTaller(playerid, 1);
				}
			}
		}
	}
	//
	if(PI[playerid][P_SHOP_SKIN]==true)
	{
		//================================================================
		if(playertextid == PlayerTextdraws[playerid][Textdraws_Ammu_Skins][9]) //Comprar
		{
			switch(Armas_Skin[ PI[playerid][P_SHOP_SKIN_INDEX_NOMBRE]][0])
			{
				case 0://dinero
				{
					if(Armas_Skin[ PI[playerid][P_SHOP_SKIN_INDEX_NOMBRE]][1] > CHARACTER_INFO[playerid][ch_CASH]) return MensajesAyuda(playerid,"No tienes dinero suficiente para comprar el skin");
				}
				case 1://rp
				{
					if(Armas_Skin[ PI[playerid][P_SHOP_SKIN_INDEX_NOMBRE]][1] > ACCOUNT_INFO[playerid][ac_SD]) return MensajesAyuda(playerid,"No tienes suficientes para comprar el skin");
				}
			}

			new query[256],DBResult:Result;
		    format(query,sizeof(query),"SELECT * FROM WEAPON_SKINS WHERE SKIN_ID='%d' AND USER_ID='%d' AND WEAPON_ID='%d';",PI[playerid][P_SHOP_SKIN_INDEX_NOMBRE],ACCOUNT_INFO[playerid][ac_ID],Armas_Skin_Informacion[ PI[playerid][P_SHOP_SKIN_INDEX_INFORMACION]][0]);
		    Result = db_query(Database,query);
		    if(db_num_rows(Result))
		    {
		        MensajesAyuda(playerid,"Ya has adquirido este skin");
		        return 1;
		    }
		    else
		    {
		    	format( query, sizeof( query ), "INSERT INTO WEAPON_SKINS (USER_ID,WEAPON_ID,SKIN_ID,ACTIVE) VALUES ('%d','%d','%d','0')",ACCOUNT_INFO[playerid][ac_ID],
		    		Armas_Skin_Informacion[ PI[playerid][P_SHOP_SKIN_INDEX_INFORMACION]][0],PI[playerid][P_SHOP_SKIN_INDEX_NOMBRE]);
    			db_query(Database, query );
		    }
		    new string[200];
		    switch(Armas_Skin[ PI[playerid][P_SHOP_SKIN_INDEX_NOMBRE]][0])
			{
				case 0:
				{
					format(string,sizeof(string),"Skin %s para el arma: %s comprado por $ (%d)",Armas_Skin[ PI[playerid][P_SHOP_SKIN_INDEX_NOMBRE]][2],WEAPON_INFO[ Armas_Skin_Informacion[ PI[playerid][P_SHOP_SKIN_INDEX_INFORMACION]][0] ][weapon_info_NAME],Armas_Skin[ PI[playerid][P_SHOP_SKIN_INDEX_NOMBRE]][1]);
					GivePlayerCash(playerid,-Armas_Skin[ PI[playerid][P_SHOP_SKIN_INDEX_NOMBRE]][1]);
				}
				case 1:
				{
					format(string,sizeof(string),"Skin %s para el arma: %s comprado por %d de "SERVER_COIN"",Armas_Skin[ PI[playerid][P_SHOP_SKIN_INDEX_NOMBRE]][2],WEAPON_INFO[ Armas_Skin_Informacion[ PI[playerid][P_SHOP_SKIN_INDEX_INFORMACION]][0] ][weapon_info_NAME],Armas_Skin[ PI[playerid][P_SHOP_SKIN_INDEX_NOMBRE]][1]);
					GastarRp(playerid,Armas_Skin[ PI[playerid][P_SHOP_SKIN_INDEX_NOMBRE]][1]);
				}
			}
		    SendClientMessage(playerid,-1,"Usa /Skinarma para activar los skins");
		    MensajeNotificacion(playerid,string);
		}
		//================================================================
		if(playertextid == PlayerTextdraws[playerid][Textdraws_Ammu_Skins][5])//Siguiente
		{
			if(PI[playerid][P_SHOP_SKIN_INDEX_INFORMACION] == sizeof(Armas_Skin_Informacion)-1) PI[playerid][P_SHOP_SKIN_INDEX_INFORMACION] = 0;
			else PI[playerid][P_SHOP_SKIN_INDEX_INFORMACION] += 1;
			new nerak[50];
			/*nombre arma*/
			format(nerak,sizeof(nerak),"Arma ] %s ]",WEAPON_INFO[ Armas_Skin_Informacion[ PI[playerid][P_SHOP_SKIN_INDEX_INFORMACION]][0] ][weapon_info_NAME]);
			PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][3], nerak);
			/*arma model*/
			PlayerTextDrawSetPreviewModel(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][7], Armas_Skin_Informacion[ PI[playerid][P_SHOP_SKIN_INDEX_INFORMACION]][1]);
			PlayerTextDrawShow(playerid,PlayerTextdraws[playerid][Textdraws_Ammu_Skins][7]);
			Show_Preview_Skin_Arma(playerid);
		}
		if(playertextid == PlayerTextdraws[playerid][Textdraws_Ammu_Skins][6])//Antetior
		{
			if(PI[playerid][P_SHOP_SKIN_INDEX_INFORMACION] == 0) PI[playerid][P_SHOP_SKIN_INDEX_INFORMACION] = sizeof(Armas_Skin_Informacion)-1;
			else PI[playerid][P_SHOP_SKIN_INDEX_INFORMACION] -= 1;
			new nerak[50];
			/*nombre arma*/
			format(nerak,sizeof(nerak),"Arma ] %s ]",WEAPON_INFO[ Armas_Skin_Informacion[ PI[playerid][P_SHOP_SKIN_INDEX_INFORMACION]][0] ][weapon_info_NAME]);
			PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][3], nerak);
			/*arma model*/
			PlayerTextDrawSetPreviewModel(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][7], Armas_Skin_Informacion[ PI[playerid][P_SHOP_SKIN_INDEX_INFORMACION]][1]);
			PlayerTextDrawShow(playerid,PlayerTextdraws[playerid][Textdraws_Ammu_Skins][7]);
			Show_Preview_Skin_Arma(playerid);
		}
		//===========================================================================================================
		if(playertextid == PlayerTextdraws[playerid][Textdraws_Ammu_Skins][14])//Siguiente
		{

			if(PI[playerid][P_SHOP_SKIN_INDEX_NOMBRE] == sizeof(Armas_Skin)-1) PI[playerid][P_SHOP_SKIN_INDEX_NOMBRE] = 0;
			else PI[playerid][P_SHOP_SKIN_INDEX_NOMBRE] += 1;
			new nerak[50];
			/*nombre skin*/
			format(nerak,sizeof(nerak),"%s",Armas_Skin[ PI[playerid][P_SHOP_SKIN_INDEX_NOMBRE]][2] );
			PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][12], nerak);
			switch(Armas_Skin[ PI[playerid][P_SHOP_SKIN_INDEX_NOMBRE]][0])
			{
				case 0:
				{
					format(nerak,sizeof(nerak),"$ %s",number_format_thousand(Armas_Skin[ PI[playerid][P_SHOP_SKIN_INDEX_NOMBRE]][1]));
					PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][13], nerak);
				}
				case 1:
				{
					format(nerak,sizeof(nerak),"~y~ %d RP",Armas_Skin[ PI[playerid][P_SHOP_SKIN_INDEX_NOMBRE]][1]);
					PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][13], nerak);
				}
			}
			Show_Preview_Skin_Arma(playerid);
		}
		if(playertextid == PlayerTextdraws[playerid][Textdraws_Ammu_Skins][15])//Anterior
		{
			if(PI[playerid][P_SHOP_SKIN_INDEX_NOMBRE] == 0) PI[playerid][P_SHOP_SKIN_INDEX_NOMBRE] = sizeof(Armas_Skin)-1;
			else PI[playerid][P_SHOP_SKIN_INDEX_NOMBRE] -= 1;
			new nerak[50];
			/*nombre skin*/
			format(nerak,sizeof(nerak),"%s",Armas_Skin[ PI[playerid][P_SHOP_SKIN_INDEX_NOMBRE]][2] );
			PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][12], nerak);
			switch(Armas_Skin[ PI[playerid][P_SHOP_SKIN_INDEX_NOMBRE]][0])
			{
				case 0:
				{
					format(nerak,sizeof(nerak),"$ %s",number_format_thousand(Armas_Skin[ PI[playerid][P_SHOP_SKIN_INDEX_NOMBRE]][1]));
					PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][13], nerak);
				}
				case 1:
				{
					format(nerak,sizeof(nerak),"~y~ %d RP",Armas_Skin[ PI[playerid][P_SHOP_SKIN_INDEX_NOMBRE]][1]);
					PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Skins][13], nerak);
				}
			}
			Show_Preview_Skin_Arma(playerid);
		}
	}
	if(PI[playerid][P_SHOP_WEAPON]== true)
	{
		if(playertextid == PlayerTextdraws[playerid][Textdraws_Ammu_Nation][12]) //>>Comprar
		{
			//
			if(Armas_Ammu[	PI[playerid][P_SHOP_WEAPON_INDEX]	] [1] > ACCOUNT_INFO[playerid][ac_LEVEL]) return SendClientMessage(playerid,-1,"Tu nivel no es suficente para comprar esta arma");
			if(CHARACTER_INFO[playerid][ch_CASH] >= Armas_Ammu[	PI[playerid][P_SHOP_WEAPON_INDEX]	] [2])
			{
				new weapon_slot = WEAPON_INFO[ Armas_Ammu[ PI[playerid][P_SHOP_WEAPON_INDEX]][0] ][weapon_info_SLOT];
				if(PLAYER_WEAPONS[playerid][weapon_slot][player_weapon_ID] != 0)
				{
					SendClientMessageEx(playerid, -1, "{00FF80}Para comprar esta arma tienes que deshacerte de tu '%s' (%d) para tener espacio.", WEAPON_INFO[ PLAYER_WEAPONS[playerid][weapon_slot][player_weapon_ID] ][weapon_info_NAME], weapon_slot);
					return 1;
				}

				if(GetCountInventary(playerid) >= Max_Slots_For_Invetary) return MensajesAyuda(playerid,"El inventario esta lleno");
				
				

				GivePlayerCash(playerid, -Armas_Ammu[	PI[playerid][P_SHOP_WEAPON_INDEX]	] [2]);
				/*if(Armas_Ammu[ PI[playerid][P_SHOP_WEAPON_INDEX]][0] == 41)
				{
					GivePlayerWeaponEx(playerid, Armas_Ammu[ PI[playerid][P_SHOP_WEAPON_INDEX]][0], 9999);
				}
				else
				{
					GivePlayerWeaponEx(playerid, Armas_Ammu[ PI[playerid][P_SHOP_WEAPON_INDEX]][0], 100);
				}*/
				//RegisterNewPlayerWeapon(playerid, weapon_slot); 
				Registrar_Player_Arma(playerid,Armas_Ammu[ PI[playerid][P_SHOP_WEAPON_INDEX]][0]);
				new stringa[150];
				format(stringa,sizeof stringa,"Arma %s agregada al inventario",WEAPON_INFO[ Armas_Ammu[ PI[playerid][P_SHOP_WEAPON_INDEX]][0] ][weapon_info_NAME]);
				MensajesAyuda(playerid,stringa);
				SendClientMessageEx(playerid, -1, "{E6F8E0}Arma {98d16c}'%s' {E6F8E0}comprada por %s$.", WEAPON_INFO[ Armas_Ammu[ PI[playerid][P_SHOP_WEAPON_INDEX]][0] ][weapon_info_NAME], number_format_thousand(Armas_Ammu[	PI[playerid][P_SHOP_WEAPON_INDEX]	] [2]));
				if(PI[playerid][P_SHOP_WEAPON]) HidePlayerTextdrawsAmmu(playerid);
			}
			else
			{
				PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
				SendClientMessageEx(playerid, -1, "{E6F8E0}No tienes dinero suficiente, te faltan {FF6633}%s$ {E6F8E0}para poder comprar esta arma.", number_format_thousand(Armas_Ammu[	PI[playerid][P_SHOP_WEAPON_INDEX]	] [2] - CHARACTER_INFO[playerid][ch_CASH]));
			}
		}
		else if(playertextid == PlayerTextdraws[playerid][Textdraws_Ammu_Nation][10]) //>>Siguiente
		{
			if(PI[playerid][P_SHOP_WEAPON_INDEX] == sizeof(Armas_Ammu)-1) PI[playerid][P_SHOP_WEAPON_INDEX] = 0;
			else PI[playerid][P_SHOP_WEAPON_INDEX] += 1;
			//
			new nerak[200];
			/*nombre arma*/
			format(nerak,sizeof(nerak),"] %s",WEAPON_INFO[ Armas_Ammu[ PI[playerid][P_SHOP_WEAPON_INDEX]][0] ][weapon_info_NAME]);
			PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][3], nerak);
			/*nivel para comprar*/
			format(nerak,sizeof(nerak),"Nivel:~r~~h~ %d",Armas_Ammu[	PI[playerid][P_SHOP_WEAPON_INDEX]	] [1]);
			PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][28], nerak);
			/*precio*/
			format(nerak,sizeof(nerak),"Precio: $ ~g~ %d",Armas_Ammu[	PI[playerid][P_SHOP_WEAPON_INDEX]	] [2]);
			PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][27], nerak);
			//Barra alcance//
			PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][24], floatadd(90.0, floatdiv(Armas_Ammu[	PI[playerid][P_SHOP_WEAPON_INDEX]	] [3], 1.388889)), 0.000000);
			PlayerTextDrawShow(playerid,PlayerTextdraws[playerid][Textdraws_Ammu_Nation][24]);
			//barra Rapidez
			PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][25], floatadd(90.0, floatdiv(Armas_Ammu[	PI[playerid][P_SHOP_WEAPON_INDEX]	] [4], 1.388889)), 0.000000);
			PlayerTextDrawShow(playerid,PlayerTextdraws[playerid][Textdraws_Ammu_Nation][25]);
			//Barra poder
			PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][26], floatadd(90.0, floatdiv(Armas_Ammu[	PI[playerid][P_SHOP_WEAPON_INDEX]	] [5], 1.388889)), 0.000000);
			PlayerTextDrawShow(playerid,PlayerTextdraws[playerid][Textdraws_Ammu_Nation][26]);
			//=======
			PlayerTextDrawSetPreviewModel(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][9], Armas_Ammu[ PI[playerid][P_SHOP_WEAPON_INDEX]][6]);
			PlayerTextDrawShow(playerid,PlayerTextdraws[playerid][Textdraws_Ammu_Nation][9]);
		}
		else if(playertextid == PlayerTextdraws[playerid][Textdraws_Ammu_Nation][11]) //>>Anterior
		{
			if(PI[playerid][P_SHOP_WEAPON_INDEX] == 0) PI[playerid][P_SHOP_WEAPON_INDEX] = sizeof(Armas_Ammu)-1;
			else PI[playerid][P_SHOP_WEAPON_INDEX] -= 1;
			//
			new nerak[200];
			/*nombre arma*/
			format(nerak,sizeof(nerak),"] %s",WEAPON_INFO[ Armas_Ammu[ PI[playerid][P_SHOP_WEAPON_INDEX]][0] ][weapon_info_NAME]);
			PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][3], nerak);
			/*nivel para comprar*/
			format(nerak,sizeof(nerak),"Nivel:~r~~h~ %d",Armas_Ammu[	PI[playerid][P_SHOP_WEAPON_INDEX]	] [1]);
			PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][28], nerak);
			/*precio*/
			format(nerak,sizeof(nerak),"Precio: $ ~g~ %d",Armas_Ammu[	PI[playerid][P_SHOP_WEAPON_INDEX]	] [2]);
			PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][27], nerak);
			//Barra alcance//
			PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][24], floatadd(90.0, floatdiv(Armas_Ammu[	PI[playerid][P_SHOP_WEAPON_INDEX]	] [3], 1.388889)), 0.000000);
			PlayerTextDrawShow(playerid,PlayerTextdraws[playerid][Textdraws_Ammu_Nation][24]);
			//barra Rapidez
			PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][25], floatadd(90.0, floatdiv(Armas_Ammu[	PI[playerid][P_SHOP_WEAPON_INDEX]	] [4], 1.388889)), 0.000000);
			PlayerTextDrawShow(playerid,PlayerTextdraws[playerid][Textdraws_Ammu_Nation][25]);
			//Barra poder
			PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][26], floatadd(90.0, floatdiv(Armas_Ammu[	PI[playerid][P_SHOP_WEAPON_INDEX]	] [5], 1.388889)), 0.000000);
			PlayerTextDrawShow(playerid,PlayerTextdraws[playerid][Textdraws_Ammu_Nation][26]);
			//=======
			PlayerTextDrawSetPreviewModel(playerid, PlayerTextdraws[playerid][Textdraws_Ammu_Nation][9], Armas_Ammu[ PI[playerid][P_SHOP_WEAPON_INDEX]][6]);
			PlayerTextDrawShow(playerid,PlayerTextdraws[playerid][Textdraws_Ammu_Nation][9]);
		}
	}
	//
	if(PLAYER_TEMP[playerid][P_SHOPCAR] && InNegocio[playerid] != -1)
	{
		if(playertextid == PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][3]) //>>Comprar
		{
			new DBResult:Result, DB_Query[120], player_vehicles;
			format(DB_Query, sizeof(DB_Query), "SELECT COUNT(`ID_USER`) AS `VEHICLES` FROM `PLAYER_VEHICLES` WHERE `ID_USER` = '%d';", ACCOUNT_INFO[playerid][ac_ID]);
			Result = db_query(Database, DB_Query);
			if(db_num_rows(Result)) player_vehicles = db_get_field_assoc_int(Result, "VEHICLES");
			db_free_result(Result);
			
			/**/
			new DBResult:Resulta,Query1[256],debugganacia;
			format(Query1,sizeof(Query1),"SELECT `GANANCIA` FROM NEGOCIOS WHERE ID = '%d'",InNegocio[playerid]);
			Resulta = db_query(_DB_,Query1);
			if(db_num_rows(Resulta))
			{
				db_get_field_assoc(Resulta,"GANANCIA",Query1,10);
				debugganacia = strval(Query1);
				debugganacia= debugganacia + 200;

				NEGOCIO[ InNegocio[playerid] ][Ganancia] = debugganacia;
				format(DB_Query,sizeof(DB_Query), "UPDATE `NEGOCIOS` SET `GANANCIA` = '%d' WHERE ID = '%d'",debugganacia,InNegocio[playerid]);
		    	db_query(_DB_, DB_Query);
			}
		    db_free_result(Resulta);
			/**/	
				
			if(player_vehicles >= MAX_SU_VEHICLES) 
			{
				format(string2,sizeof(string2),"No puedes comprar mas vehiculos el limite es de: %d",MAX_NU_VEHICLES);
				MensajesAyuda(playerid,string2);
				return 1;
			}
			if(!ACCOUNT_INFO[playerid][ac_SU])
			{
				if(player_vehicles >= 2)
				{
					format(string2,sizeof(string2),"No puedes comprar mas vehiculos los jugadores ~y~vip~w~ pueden comprar hasta %d",MAX_NU_VEHICLES);
					MensajesAyuda(playerid,string2);
					return 1;
				}
			}
			//
			if(ACCOUNT_INFO[playerid][ac_SU]==1)
			{
				if(player_vehicles >= 4)
				{
					format(string2,sizeof(string2),"No puedes comprar mas vehiculos los jugadores ~y~vip 2~w~ pueden comprar hasta 6");
					MensajesAyuda(playerid,string2);
					return 1;
				}
			}
			if(ACCOUNT_INFO[playerid][ac_SU]>=2)
			{
				if(player_vehicles >= 6)
				{
					format(string2,sizeof(string2),"No puedes comprar mas vehiculos alcansaste el maximo permitido");
					MensajesAyuda(playerid,string2);
					return 1;
				}
			}
			/**/
			new VehicleKAREN=GetConcesonarioidCar(playerid);

			if(VEHICLE_INFO[ VehicleKAREN - 400][vehicle_info_EXTRA] > ACCOUNT_INFO[playerid][ac_SD]) return MensajesAyuda(playerid,"No tienes ZonCoins suficiente para comprar este vehiculo");
			if(BANK_ACCOUNT[playerid][bank_account_ID] == 0) return MensajesAyuda(playerid,"No tienes una cuenta bancaria para comprar vehiculos");
			if(VEHICLE_INFO[ VehicleKAREN - 400][vehicle_info_COINS] > ACCOUNT_INFO[playerid][ac_SD]) return MensajesAyuda(playerid,"No tienes ZonCoins suficiente para comprar este vehiculo");
			if(VEHICLE_INFO[ VehicleKAREN - 400][vehicle_info_PRICE] > BANK_ACCOUNT[playerid][bank_account_BALANCE] && VEHICLE_INFO[ VehicleKAREN - 400][vehicle_info_COINS]==0) return MensajesAyuda(playerid,"No tienes dinero suficiente en tu cuenta bancanria para comprar este vehiculo");
			if(VEHICLE_INFO[ VehicleKAREN - 400][vehicle_info_LEVEL] > ACCOUNT_INFO[playerid][ac_LEVEL]) return MensajesAyuda(playerid,"Tu nivel no es suficiente para comprar el vehiculo");
			if(VEHICLE_INFO[ VehicleKAREN - 400][vehicle_info_VIP_LEVEL] > ACCOUNT_INFO[playerid][ac_SU])
			{
				format(string2,sizeof(string2),"Nesecitas membresia Vip %d para comprar este vehiculo",VEHICLE_INFO[ VehicleKAREN - 400][vehicle_info_VIP_LEVEL]);
				MensajesAyuda(playerid,string2);
				return 1;
			}
			/**/
			new vid;
			switch(PLAYER_TEMP[playerid][P_CHOPCONCEID])
			{
				case 1://LS
				{
					vid = AddPersonalVehicle(playerid,VehicleKAREN,563.774475, -1273.510986, 16.867170, 12.636687,random(200),random(200),VEHICLE_INFO[ VehicleKAREN - 400][vehicle_info_MAX_GAS],VEHICLE_INFO[ VehicleKAREN - 400][vehicle_info_MAX_ACEITE]);
					SetPlayerPosEx(playerid,562.8322,-1268.8458,17.2422,198.8610, 0, 0 , true);
				}
				case 2://SF
				{
					vid = AddPersonalVehicle(playerid,VehicleKAREN,-1920.1965, 302.7697, 40.5643, -90.0000,random(200),random(200),VEHICLE_INFO[ VehicleKAREN - 400][vehicle_info_MAX_GAS],VEHICLE_INFO[ VehicleKAREN - 400][vehicle_info_MAX_ACEITE]);
					SetPlayerPosEx(playerid,-1920.0898,291.5200,41.0469,1.7854,0, 0, true);
				}
				case 3://LS jeferson
				{
					vid = AddPersonalVehicle(playerid,VehicleKAREN,2133.863037, -1129.836791, 25.270145, 71.406616,random(200),random(200),VEHICLE_INFO[ VehicleKAREN - 400][vehicle_info_MAX_GAS],VEHICLE_INFO[ VehicleKAREN - 400][vehicle_info_MAX_ACEITE]);
					SetPlayerPosEx(playerid,2133.9590, -1135.3309, 26.3622,198.8610,0, 0, true);
				}
				case 4://LV
				{
					vid = AddPersonalVehicle(playerid,VehicleKAREN,1677.705078, 1790.098144, 10.445111, 89.955596,random(200),random(200),VEHICLE_INFO[ VehicleKAREN - 400][vehicle_info_MAX_GAS],VEHICLE_INFO[ VehicleKAREN - 400][vehicle_info_MAX_ACEITE]);
					SetPlayerPosEx(playerid,1667.9579, 1788.8873, 10.0379,198.8610,0, 0, true);
				}
				case 5://SF 2
				{
					vid = AddPersonalVehicle(playerid,VehicleKAREN,-1645.245361, 1217.047973, 6.732273, 224.517120,random(200),random(200),VEHICLE_INFO[ VehicleKAREN - 400][vehicle_info_MAX_GAS],VEHICLE_INFO[ VehicleKAREN - 400][vehicle_info_MAX_ACEITE]);
					SetPlayerPosEx(playerid,-1637.4911,1209.5215,7.1797,46.8019,0, 0, true);
				}
				case 6://LS coches vip
				{
					vid = AddPersonalVehicle(playerid,VehicleKAREN,1722.7098,-1755.5043,13.5609,274.7646,random(200),random(200),VEHICLE_INFO[ VehicleKAREN - 400][vehicle_info_MAX_GAS],VEHICLE_INFO[ VehicleKAREN - 400][vehicle_info_MAX_ACEITE]);
					SetPlayerPosEx(playerid,1731.7423, -1755.2291, 12.4826,198.8610,0, 0, true);
				}
				case 7://LV BOTES
				{
					vid = AddPersonalVehicle(playerid,VehicleKAREN,-2258.0054, 2477.0315, 0.2512, 313.4971,random(200),random(200),VEHICLE_INFO[ VehicleKAREN - 400][vehicle_info_MAX_GAS],VEHICLE_INFO[ VehicleKAREN - 400][vehicle_info_MAX_ACEITE]);
					SetPlayerPosEx(playerid,-2262.1829,2466.3684,0.5429,339.7367,0, 0, true);
				}
			}
			
			if(!vid) return SendClientMessage(playerid, -1, "{00FF80}No se pueden añadir más vehículos.");

			if(VEHICLE_INFO[ VehicleKAREN - 400][vehicle_info_COINS])
			{
				ACCOUNT_INFO[playerid][ac_SD] -= VEHICLE_INFO[ VehicleKAREN - 400][vehicle_info_COINS];
			
				new DB_Query_update[160];
				format(DB_Query_update, sizeof(DB_Query_update), "UPDATE `CUENTA` SET `SD` = '%d' WHERE `ID` = '%d';", ACCOUNT_INFO[playerid][ac_SD], ACCOUNT_INFO[playerid][ac_ID]);
				db_query(Database, DB_Query_update);
					
				SendClientMessageEx(playerid, -1, "Has gastado %d "SERVER_COIN" en la compra de este vehículo.", VEHICLE_INFO[ VehicleKAREN - 400][vehicle_info_COINS]);
				format(string2,sizeof(string2),"Vehiculo comprado: %s - Precio: %d "SERVER_COIN"",VehicleName[ VehicleKAREN  - 400],VEHICLE_INFO[ VehicleKAREN - 400][vehicle_info_COINS]);
				MensajeNotificacion(playerid,string2);	
			}
			else
			{
				if(PLAYER_PHONE[playerid][player_phone_VALID])
				{
					new message[64]; format(message, sizeof message, "VEHICULO COMPRADO: - %s $", number_format_thousand(VEHICLE_INFO[ VehicleKAREN - 400][vehicle_info_PRICE]));
					RegisterPhoneMessage(6740, PLAYER_PHONE[playerid][player_phone_NUMBER], message);
					if(PLAYER_PHONE[playerid][player_phone_STATE] == PHONE_STATE_ON) SendClientMessageEx(playerid, -1, "{b7dd80}[NUEVO MENSAJE]: {e5f442}De: {FFFFFF}%s {b7dd80}Mensaje: {FFFFFF}%s", convertPhoneNumber(playerid, 6740), message);
				}
				format(string2,sizeof(string2),"Vehiculo comprado: %s - Precio: %s",VehicleName[ VehicleKAREN  - 400],number_format_thousand(VEHICLE_INFO[ VehicleKAREN - 400][vehicle_info_PRICE]));
				MensajeNotificacion(playerid,string2);	

				BANK_ACCOUNT[playerid][bank_account_BALANCE] -= VEHICLE_INFO[ VehicleKAREN - 400][vehicle_info_PRICE];
				new DB_Query_update[160];
				format(DB_Query_update, sizeof(DB_Query_update), "UPDATE `BANK_ACCOUNTS` SET `BALANCE` = '%d' WHERE `ID_ACCOUNT` = '%d';", BANK_ACCOUNT[playerid][bank_account_BALANCE], BANK_ACCOUNT[playerid][bank_account_ID]);
				db_query(Database, DB_Query_update);
				RegisterBankAccountTransaction(BANK_ACCOUNT[playerid][bank_account_ID], BANK_TRANSACTION_BUY_VEHICLE, VEHICLE_INFO[ VehicleKAREN - 400][vehicle_info_PRICE]);
			}	
			
			MensajesAyuda(playerid,"Compraste un vehiculo, usa ~y~/Ayuda vehiculo~w~ para ver que puedes hacer con tu vehiculo");
			MensajesAyuda(playerid,"Maten la tecla '2' para encender o apagar el motor del vehiculo");
			SendClientMessage(playerid,-1, "Usa Spacio + Y para abrir/cerrar las puertas del vehiculo");
			PlayerPlaySoundEx(playerid, 1058, 0.0, 0.0, 0.0);

			/**/


			InNegocio[playerid]=-1;
			if(PLAYER_TEMP[playerid][P_SHOPCAR]) HideBuyVehicleMenu(playerid);
			GameTextForPlayer(playerid, "~g~~h~vehiculo_comprado", 5000, 1);
			PlayerPlaySoundEx(playerid, 1149, 0.0, 0.0, 0.0);
			
			return 1;
		}
		else if(playertextid == PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][1]) //>>Siguiente
		{
			new VehicleKAREN;
			switch(PLAYER_TEMP[playerid][P_CHOPCONCEID])
			{
				case 1: 
				{
					if(PLAYER_TEMP[playerid][P_SHOPCARINDEX] == sizeof(VehiclesConce)-1) PLAYER_TEMP[playerid][P_SHOPCARINDEX] = 0;
					else PLAYER_TEMP[playerid][P_SHOPCARINDEX] += 1;
					VehicleKAREN = VehiclesConce[ PLAYER_TEMP[playerid][P_SHOPCARINDEX] ][0];
				}
				case 2: 
				{
					if(PLAYER_TEMP[playerid][P_SHOPCARINDEX] == sizeof(VehiclesConce2)-1) PLAYER_TEMP[playerid][P_SHOPCARINDEX] = 0;
					else PLAYER_TEMP[playerid][P_SHOPCARINDEX] += 1;
					VehicleKAREN = VehiclesConce2[ PLAYER_TEMP[playerid][P_SHOPCARINDEX] ][0];
				}
				case 3:
				{
					if(PLAYER_TEMP[playerid][P_SHOPCARINDEX] == sizeof(VehiclesConce3)-1) PLAYER_TEMP[playerid][P_SHOPCARINDEX] = 0;
					else PLAYER_TEMP[playerid][P_SHOPCARINDEX] += 1;
					VehicleKAREN = VehiclesConce3[ PLAYER_TEMP[playerid][P_SHOPCARINDEX] ][0];
				}
				case 4:
				{
					if(PLAYER_TEMP[playerid][P_SHOPCARINDEX] == sizeof(VehiclesConce4)-1) PLAYER_TEMP[playerid][P_SHOPCARINDEX] = 0;
					else PLAYER_TEMP[playerid][P_SHOPCARINDEX] += 1;
					VehicleKAREN = VehiclesConce4[ PLAYER_TEMP[playerid][P_SHOPCARINDEX] ][0];
				}
				case 5:
				{
					if(PLAYER_TEMP[playerid][P_SHOPCARINDEX] == sizeof(VehiclesConce5)-1) PLAYER_TEMP[playerid][P_SHOPCARINDEX] = 0;
					else PLAYER_TEMP[playerid][P_SHOPCARINDEX] += 1;
					VehicleKAREN = VehiclesConce5[ PLAYER_TEMP[playerid][P_SHOPCARINDEX] ][0];
				}
				case 6:
				{
					if(PLAYER_TEMP[playerid][P_SHOPCARINDEX] == sizeof(VehiclesConce6)-1) PLAYER_TEMP[playerid][P_SHOPCARINDEX] = 0;
					else PLAYER_TEMP[playerid][P_SHOPCARINDEX] += 1;
					VehicleKAREN = VehiclesConce6[ PLAYER_TEMP[playerid][P_SHOPCARINDEX] ][0];
				}
				case 7:
				{
					if(PLAYER_TEMP[playerid][P_SHOPCARINDEX] == sizeof(VehiclesConce7)-1) PLAYER_TEMP[playerid][P_SHOPCARINDEX] = 0;
					else PLAYER_TEMP[playerid][P_SHOPCARINDEX] += 1;
					VehicleKAREN = VehiclesConce7[ PLAYER_TEMP[playerid][P_SHOPCARINDEX] ][0];
				}
			}
			//
			PlayerPlaySoundEx(playerid, 1054, 0.0, 0.0, 0.0);
			

			PlayerTextDrawSetPreviewModel(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][4], VehicleKAREN);
			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][4]);

			new veh_money = VEHICLE_INFO[VehicleKAREN - 400][vehicle_info_PRICE] / 5000;

			new str[256]; 

			/*Costo vehiculo*/
			if(VEHICLE_INFO[VehicleKAREN - 400][vehicle_info_VIP_LEVEL])
			{
				if(VEHICLE_INFO[VehicleKAREN - 400][vehicle_info_COINS])
				{
					format(str, 256, "~g~~h~~h~Costo:~n~~y~~h~%d ~w~ZonCoins~n~Vip: %d ~y~Requerido",VEHICLE_INFO[VehicleKAREN - 400][vehicle_info_COINS],VEHICLE_INFO[VehicleKAREN - 400][vehicle_info_VIP_LEVEL]);
				}
				else
				{
					format(str, 256, "~g~~h~~h~Costo:~n~~y~~h~%s ~w~~n~Vip: %d ~y~Requerido",number_format_thousand(VEHICLE_INFO[VehicleKAREN - 400][vehicle_info_PRICE]),VEHICLE_INFO[VehicleKAREN - 400][vehicle_info_VIP_LEVEL]);
				}
			}
			else
			{
				if(VEHICLE_INFO[VehicleKAREN - 400][vehicle_info_COINS])
				{
					format(str, 256, "~g~~h~~h~Costo:~n~~y~~h~%d ~w~ZonCoins",VEHICLE_INFO[VehicleKAREN - 400][vehicle_info_COINS]);
				}
				else
				{
					format(str, 256, "~g~~h~~h~Costo:~n~~y~~h~%s",number_format_thousand(VEHICLE_INFO[VehicleKAREN - 400][vehicle_info_PRICE]));
				}
			}
	 
			PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][6], str);
			/*Nombre vehiculo*/
			format(str, sizeof str, "%s",VehicleName[ VehicleKAREN  - 400]);
		 	PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][7], str);
		 	/*Maletero*/
			format(str, sizeof str, "Espacio maletero:~r~~h~ %d", VEHICLE_INFO[VehicleKAREN - 400][vehicle_info_BOOT_SLOTS]);
		 	PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][16], str);
		 	/*Nivel necesario*/
			format(str, sizeof str, "Nivel necesario: ~y~~h~ %d", VEHICLE_INFO[VehicleKAREN - 400][vehicle_info_LEVEL]);
		 	PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][17], str);
		  	/*Costo seguro*/
			format(str, sizeof str, "Costo seguro: ~g~~h~~h~ %s",number_format_thousand(veh_money));
		 	PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][18], str);
			/* Gasolina */
			PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][24], floatadd(381.0, floatdiv( VEHICLE_INFO[VehicleKAREN - 400][vehicle_info_MAX_GAS] , 2.857143)), 0.000000);
			PlayerTextDrawShow(playerid,PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][24]);
			/* ======== */
			/* Aceite */
			PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][23], floatadd(381.0, floatdiv( VEHICLE_INFO[VehicleKAREN - 400][vehicle_info_MAX_ACEITE] , 2.857143)), 0.000000);
			PlayerTextDrawShow(playerid,PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][23]);
			/* ======== */
			/* Velocidad */
			PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][22], floatadd(381.0, floatdiv( VEHICLE_INFO[VehicleKAREN - 400][vehicle_info_MAX_VEL] , 3.185715)), 0.000000);
			PlayerTextDrawShow(playerid,PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][22]);
			/* ======== */
			return 1;
		}
		else if(playertextid == PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][2]) //Anterior
		{
			new VehicleKAREN;
			switch(PLAYER_TEMP[playerid][P_CHOPCONCEID])
			{
				case 1: 
				{
					if(PLAYER_TEMP[playerid][P_SHOPCARINDEX] == 0) PLAYER_TEMP[playerid][P_SHOPCARINDEX] = sizeof(VehiclesConce)-1;
					else PLAYER_TEMP[playerid][P_SHOPCARINDEX] -= 1;
					VehicleKAREN = VehiclesConce[ PLAYER_TEMP[playerid][P_SHOPCARINDEX] ][0];
				}
				case 2: 
				{
					if(PLAYER_TEMP[playerid][P_SHOPCARINDEX] == 0) PLAYER_TEMP[playerid][P_SHOPCARINDEX] = sizeof(VehiclesConce2)-1;
					else PLAYER_TEMP[playerid][P_SHOPCARINDEX] -= 1;
					VehicleKAREN = VehiclesConce2[ PLAYER_TEMP[playerid][P_SHOPCARINDEX] ][0];
				}
				case 3: 
				{
					if(PLAYER_TEMP[playerid][P_SHOPCARINDEX] == 0) PLAYER_TEMP[playerid][P_SHOPCARINDEX] = sizeof(VehiclesConce3)-1;
					else PLAYER_TEMP[playerid][P_SHOPCARINDEX] -= 1;
					VehicleKAREN = VehiclesConce3[ PLAYER_TEMP[playerid][P_SHOPCARINDEX] ][0];
				}
				case 4: 
				{
					if(PLAYER_TEMP[playerid][P_SHOPCARINDEX] == 0) PLAYER_TEMP[playerid][P_SHOPCARINDEX] = sizeof(VehiclesConce4)-1;
					else PLAYER_TEMP[playerid][P_SHOPCARINDEX] -= 1;
					VehicleKAREN = VehiclesConce4[ PLAYER_TEMP[playerid][P_SHOPCARINDEX] ][0];
				}
				case 5: 
				{
					if(PLAYER_TEMP[playerid][P_SHOPCARINDEX] == 0) PLAYER_TEMP[playerid][P_SHOPCARINDEX] = sizeof(VehiclesConce5)-1;
					else PLAYER_TEMP[playerid][P_SHOPCARINDEX] -= 1;
					VehicleKAREN = VehiclesConce5[ PLAYER_TEMP[playerid][P_SHOPCARINDEX] ][0];
				}
				case 6: 
				{
					if(PLAYER_TEMP[playerid][P_SHOPCARINDEX] == 0) PLAYER_TEMP[playerid][P_SHOPCARINDEX] = sizeof(VehiclesConce6)-1;
					else PLAYER_TEMP[playerid][P_SHOPCARINDEX] -= 1;
					VehicleKAREN = VehiclesConce6[ PLAYER_TEMP[playerid][P_SHOPCARINDEX] ][0];
				}
				case 7: 
				{
					if(PLAYER_TEMP[playerid][P_SHOPCARINDEX] == 0) PLAYER_TEMP[playerid][P_SHOPCARINDEX] = sizeof(VehiclesConce7)-1;
					else PLAYER_TEMP[playerid][P_SHOPCARINDEX] -= 1;
					VehicleKAREN = VehiclesConce7[ PLAYER_TEMP[playerid][P_SHOPCARINDEX] ][0];
				}
			}
			//
			PlayerPlaySoundEx(playerid, 1054, 0.0, 0.0, 0.0);
			

			PlayerTextDrawSetPreviewModel(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][4], VehicleKAREN);
			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][4]);

			new veh_money = VEHICLE_INFO[VehicleKAREN - 400][vehicle_info_PRICE] / 5000;

			new str[256]; 

			/*Costo vehiculo*/
			if(VEHICLE_INFO[VehicleKAREN - 400][vehicle_info_VIP_LEVEL])
			{
				if(VEHICLE_INFO[VehicleKAREN - 400][vehicle_info_COINS])
				{
					format(str, 256, "~g~~h~~h~Costo:~n~~y~~h~%d ~w~ZonCoins~n~Vip: %d ~y~Requerido",VEHICLE_INFO[VehicleKAREN - 400][vehicle_info_COINS],VEHICLE_INFO[VehicleKAREN - 400][vehicle_info_VIP_LEVEL]);
				}
				else
				{
					format(str, 256, "~g~~h~~h~Costo:~n~~y~~h~%s ~w~~n~Vip: %d ~y~Requerido",number_format_thousand(VEHICLE_INFO[VehicleKAREN - 400][vehicle_info_PRICE]),VEHICLE_INFO[VehicleKAREN - 400][vehicle_info_VIP_LEVEL]);
				}
			}
			else
			{
				if(VEHICLE_INFO[VehicleKAREN - 400][vehicle_info_COINS])
				{
					format(str, 256, "~g~~h~~h~Costo:~n~~y~~h~%d ~w~ZonCoins",VEHICLE_INFO[VehicleKAREN - 400][vehicle_info_COINS]);
				}
				else
				{
					format(str, 256, "~g~~h~~h~Costo:~n~~y~~h~%s",number_format_thousand(VEHICLE_INFO[VehicleKAREN - 400][vehicle_info_PRICE]));
				}
			}
	 
			PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][6], str);
			/*Nombre vehiculo*/
			format(str, sizeof str, "%s",VehicleName[ VehicleKAREN  - 400]);
		 	PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][7], str);
		 	/*Maletero*/
			format(str, sizeof str, "Espacio maletero:~r~~h~ %d", VEHICLE_INFO[VehicleKAREN - 400][vehicle_info_BOOT_SLOTS]);
		 	PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][16], str);
		 	/*Nivel necesario*/
			format(str, sizeof str, "Nivel necesario: ~y~~h~ %d", VEHICLE_INFO[VehicleKAREN - 400][vehicle_info_LEVEL]);
		 	PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][17], str);
		  	/*Costo seguro*/
			format(str, sizeof str, "Costo seguro: ~g~~h~~h~ %s",number_format_thousand(veh_money));
		 	PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][18], str);
			/* Gasolina */
			PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][24], floatadd(381.0, floatdiv( VEHICLE_INFO[VehicleKAREN - 400][vehicle_info_MAX_GAS] , 2.857143)), 0.000000);
			PlayerTextDrawShow(playerid,PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][24]);
			/* ======== */
			/* Aceite */
			PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][23], floatadd(381.0, floatdiv( VEHICLE_INFO[VehicleKAREN - 400][vehicle_info_MAX_ACEITE] , 2.857143)), 0.000000);
			PlayerTextDrawShow(playerid,PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][23]);
			/* ======== */
			/* Velocidad */
			PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][22], floatadd(381.0, floatdiv( VEHICLE_INFO[VehicleKAREN - 400][vehicle_info_MAX_VEL] , 3.185715)), 0.000000);
			PlayerTextDrawShow(playerid,PlayerTextdraws[playerid][textdraw_comprarvehiculoconce][22]);
			/* ======== */
			return 1;
		}
	}
	if(PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_ENABLED])
	{
		if(playertextid == PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][2]) //Anterior
		{
			if(PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_INTERIO] == 0) PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_INTERIO] = sizeof(PROPERTY_INTERIORS) - 1;
			else PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_INTERIO] --;
			UpdatePlayerPropertyContructor(playerid);
			return 1;
		}
		else if(playertextid == PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][3]) //Siguiente
		{
			if(PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_INTERIO] == (sizeof(PROPERTY_INTERIORS) - 1)) PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_INTERIO] = 0;			
			else PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_INTERIO] ++;
			UpdatePlayerPropertyContructor(playerid);
			return 1;
		}
		else if(playertextid == PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][4]) //Crear
		{
			Create_PlayerPropertyConstructo(playerid);
			return 1;
		}
		else if(playertextid == PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][5]) //Cancelar
		{
			ExitPlayerPropertyConstructor(playerid);
			return 1;
		}
		return 1;
	}
	
	
	if(PLAYER_TEMP[playerid][pt_READING_GUIDE])
	{
		if(playertextid == PlayerTextdraws[playerid][ptextdraw_GUIDE][2]) // Siguiente
		{
			if(PLAYER_TEMP[playerid][pt_GUIDE_STEP] + 1 >= sizeof(Server_Rules) )
			{
				PLAYER_TEMP[playerid][pt_READING_GUIDE] = false;
				PLAYER_TEMP[playerid][pt_GUIDE_STEP] = 0;
				DestroyPlayerRulesTextDraw(playerid);
				
				TextDrawHideForPlayer(playerid, Textdraws[textdraw_LOAD_SCREEN][0]);
				TextDrawHideForPlayer(playerid, Textdraws[textdraw_LOAD_SCREEN][1]);
				TextDrawHideForPlayer(playerid, Textdraws[textdraw_LOAD_SCREEN][2]);
				TextDrawHideForPlayer(playerid, Textdraws[textdraw_LOAD_SCREEN][3]);
				TextDrawHideForPlayer(playerid, Textdraws[textdraw_LOAD_SCREEN][4]);

				PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][0]);
				PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][1]);
				PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][2]);
				PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][3]);
				PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][4]);
				PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][5]);
				PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][6]);
				PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][7]);
				PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][8]);
				PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][9]);
				
				CHARACTER_INFO[playerid][ch_SEX] = -1;
				PLAYER_TEMP[playerid][pt_REGISTER_SELECTING_SKIN] = true;
				PLAYER_TEMP[playerid][pt_REGISTER_SELECTED_SKIN] = 0;
			
				new td_str[64];
				format(td_str, sizeof td_str, "%d/%d", PLAYER_TEMP[playerid][pt_REGISTER_SELECTED_SKIN] + 1, sizeof(Intro_Skins[]));
				PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][9], td_str);
				
				SendClientMessage(playerid, 0xCCCCCCCC, "Info: Debes configurar tu personaje, presionar 'continuar' para finalizar.");
				SelectTextDrawEx(playerid, 0xe8d08fFF);
				return 1;
			}
			
			PLAYER_TEMP[playerid][pt_GUIDE_STEP] ++;
			SetPlayerRulesTextDraw(playerid, Server_Rules[ PLAYER_TEMP[playerid][pt_GUIDE_STEP] ][Rule_Title], Server_Rules[ PLAYER_TEMP[playerid][pt_GUIDE_STEP] ][Rule_Info], Server_Rules[ PLAYER_TEMP[playerid][pt_GUIDE_STEP] ][Rule_Pages], PLAYER_TEMP[playerid][pt_GUIDE_STEP] + 1, sizeof(Server_Rules) );
			return 1;
		}
		else if(playertextid == PlayerTextdraws[playerid][ptextdraw_GUIDE][3]) // Anterior
		{
			if(PLAYER_TEMP[playerid][pt_GUIDE_STEP] <= 0) return 1;
			
			PLAYER_TEMP[playerid][pt_GUIDE_STEP] --;
			SetPlayerRulesTextDraw(playerid, Server_Rules[ PLAYER_TEMP[playerid][pt_GUIDE_STEP] ][Rule_Title], Server_Rules[ PLAYER_TEMP[playerid][pt_GUIDE_STEP] ][Rule_Info], Server_Rules[ PLAYER_TEMP[playerid][pt_GUIDE_STEP] ][Rule_Pages], PLAYER_TEMP[playerid][pt_GUIDE_STEP] + 1, sizeof(Server_Rules) );
			return 1;
		}
	}
	
	if(PLAYER_TEMP[playerid][pt_REGISTER_SELECTING_SKIN])
	{
		if(playertextid == PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][3]) // Hombre
		{
			CHARACTER_INFO[playerid][ch_SEX] = SEX_MALE;
			
			PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][2], -94);
			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][2]);
			PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][4], -256);
			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][4]);
			
			SetActorSkin(PLAYER_TEMP[playerid][pt_REGISTER_ACTOR], Intro_Skins[CHARACTER_INFO[playerid][ch_SEX]][PLAYER_TEMP[playerid][pt_REGISTER_SELECTED_SKIN]], PLAYER_TEMP[playerid][pt_REGISTER_ACTOR]);
			ApplyActorAnimation(PLAYER_TEMP[playerid][pt_REGISTER_ACTOR], "INT_SHOP", "shop_loop", 4.1, 1, 1, 1, 0, 0);
			return 1;
		}
		else if(playertextid == PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][5]) // Mujer
		{
			CHARACTER_INFO[playerid][ch_SEX] = SEX_FEMALE;
			
			PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][2], -256);
			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][2]);
			PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][4], -94);
			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][4]);
			
			SetActorSkin(PLAYER_TEMP[playerid][pt_REGISTER_ACTOR], Intro_Skins[CHARACTER_INFO[playerid][ch_SEX]][PLAYER_TEMP[playerid][pt_REGISTER_SELECTED_SKIN]], PLAYER_TEMP[playerid][pt_REGISTER_ACTOR]);
			ApplyActorAnimation(PLAYER_TEMP[playerid][pt_REGISTER_ACTOR], "INT_SHOP", "shop_loop", 4.1, 1, 1, 1, 0, 0);
			return 1;
		}
		else if(playertextid == PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][6]) // Continuar
		{
			if(CHARACTER_INFO[playerid][ch_SEX] == -1)
			{
				SendClientMessage(playerid, 0xCCCCCCCC, "Info: Antes de continuar debes optar por un género entre 'hombre' ó 'mujer'.");
				SelectTextDrawEx(playerid, 0xe8d08fFF);
				return 1;
			}
			
			CHARACTER_INFO[playerid][ch_SKIN] = Intro_Skins[CHARACTER_INFO[playerid][ch_SEX]][PLAYER_TEMP[playerid][pt_REGISTER_SELECTED_SKIN]];
			
			PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][0]);
			PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][1]);
			PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][2]);
			PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][3]);
			PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][4]);
			PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][5]);
			PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][6]);
			PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][7]);
			PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][8]);
			PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][9]);
			
			PLAYER_TEMP[playerid][pt_REGISTER_SELECTING_SKIN] = false;
			PLAYER_TEMP[playerid][pt_REGISTER_SELECTED_SKIN] = 0;

			CancelSelectTextDrawEx(playerid);
			InterpolateCameraPos(playerid, 447.1717, 512.9380, 1001.6884, 445.1415, 511.0175, 1002.8450, 2500);
			InterpolateCameraLookAt(playerid, 446.4043, 513.5767, 1001.7037, 444.2802, 510.5127, 1004.5925, 2500);
			
			KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][18]);
			PLAYER_TEMP[playerid][pt_TIMERS][18] = SetTimerEx("ContinuePlayerIntro", 2500, false, "id", playerid, 0);
			return 1;
		}
		else if(playertextid == PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][7]) // Siguiente ropa
		{
			if(CHARACTER_INFO[playerid][ch_SEX] == -1) return SendClientMessage(playerid, 0xCCCCCCCC, "Info: Primero debes optar por un género antes de cambiar de ropa.");
			
			if(PLAYER_TEMP[playerid][pt_REGISTER_SELECTED_SKIN] == (sizeof(Intro_Skins[]) - 1)) PLAYER_TEMP[playerid][pt_REGISTER_SELECTED_SKIN] = 0;			
			else PLAYER_TEMP[playerid][pt_REGISTER_SELECTED_SKIN] ++;
			
			new td_str[64];
			format(td_str, sizeof td_str, "%d/%d", PLAYER_TEMP[playerid][pt_REGISTER_SELECTED_SKIN] + 1, sizeof(Intro_Skins[]));
			PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][9], td_str);
			
			SetActorSkin(PLAYER_TEMP[playerid][pt_REGISTER_ACTOR], Intro_Skins[CHARACTER_INFO[playerid][ch_SEX]][PLAYER_TEMP[playerid][pt_REGISTER_SELECTED_SKIN]], PLAYER_TEMP[playerid][pt_REGISTER_ACTOR]);
			ApplyActorAnimation(PLAYER_TEMP[playerid][pt_REGISTER_ACTOR], "INT_SHOP", "shop_loop", 4.1, 1, 1, 1, 0, 0);
			return 1;
		}
		else if(playertextid == PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][8]) // Anterior ropa
		{
			if(CHARACTER_INFO[playerid][ch_SEX] == -1) return SendClientMessage(playerid, 0xCCCCCCCC, "Info: Primero debes optar por un género antes de cambiar de ropa.");
			
			if(PLAYER_TEMP[playerid][pt_REGISTER_SELECTED_SKIN] == 0) PLAYER_TEMP[playerid][pt_REGISTER_SELECTED_SKIN] = sizeof(Intro_Skins[]) - 1;
			else PLAYER_TEMP[playerid][pt_REGISTER_SELECTED_SKIN] --;
			
			new td_str[64];
			format(td_str, sizeof td_str, "%d/%d", PLAYER_TEMP[playerid][pt_REGISTER_SELECTED_SKIN] + 1, sizeof(Intro_Skins[]));
			PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][9], td_str);
			
			SetActorSkin(PLAYER_TEMP[playerid][pt_REGISTER_ACTOR], Intro_Skins[CHARACTER_INFO[playerid][ch_SEX]][PLAYER_TEMP[playerid][pt_REGISTER_SELECTED_SKIN]], PLAYER_TEMP[playerid][pt_REGISTER_ACTOR]);
			ApplyActorAnimation(PLAYER_TEMP[playerid][pt_REGISTER_ACTOR], "INT_SHOP", "shop_loop", 4.1, 1, 1, 1, 0, 0);
			return 1;
		}
		return 1;
	}
	
	if(PLAYER_TEMP[playerid][pt_GAME_STATE] != GAME_STATE_NORMAL) return 0;
	
	if(PLAYER_TEMP[playerid][pt_CLOTHING_SHOP] != -1)
	{
		if(playertextid == PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2]) // Comprar
		{
			new clothe_info[3];
			switch(ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_INTERIOR_TYPE])
			{
				case INTERIOR_BINCO:
				{
					switch(CHARACTER_INFO[playerid][ch_SEX])
					{
						case SEX_MALE: clothe_info = Binco_Shop_Male_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]];
						case SEX_FEMALE: clothe_info = Binco_Shop_Female_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]];
					}
				}
				case INTERIOR_SUBURBAN:
				{
					switch(CHARACTER_INFO[playerid][ch_SEX])
					{
						case SEX_MALE: clothe_info = Suburban_Shop_Male_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]];
						case SEX_FEMALE: clothe_info = Suburban_Shop_Female_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]];
					}
				}
				case INTERIOR_PROLAPS:
				{
					switch(CHARACTER_INFO[playerid][ch_SEX])
					{
						case SEX_MALE: clothe_info = Prolaps_Shop_Male_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]];
						case SEX_FEMALE: clothe_info = Prolaps_Shop_Female_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]];
					}
				}
				case INTERIOR_DIDIER_SACHS:
				{
					switch(CHARACTER_INFO[playerid][ch_SEX])
					{
						case SEX_MALE: clothe_info = Didier_Shop_Male_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]];
						case SEX_FEMALE: clothe_info = Didier_Shop_Female_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]];
					}
				}
				case INTERIOR_VICTIM:
				{
					switch(CHARACTER_INFO[playerid][ch_SEX])
					{
						case SEX_MALE: clothe_info = Victim_Shop_Male_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]];
						case SEX_FEMALE: clothe_info = Victim_Shop_Female_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]];
					}
				}
				case INTERIOR_ZIP:
				{
					switch(CHARACTER_INFO[playerid][ch_SEX])
					{
						case SEX_MALE: clothe_info = Zip_Shop_Male_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]];
						case SEX_FEMALE: clothe_info = Zip_Shop_Female_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]];
					}
				}
			}
			
			if(CHARACTER_INFO[playerid][ch_CASH] >= clothe_info[2])
			{
				GivePlayerCash(playerid, -clothe_info[2]);
				CHARACTER_INFO[playerid][ch_SKIN] = clothe_info[0];
				
				PlayerPlaySoundEx(playerid, 1058, 0.0, 0.0, 0.0);
				SendClientMessageEx(playerid, -1, "Gracias por comprar ropa en {6a98e2}%s {FFFFFF}vuelva pronto.", Clothing_Shop_Positions[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP]][clothing_shop_NAME]);
				
				ClosePlayerClothingMenu(playerid);
				ExitPlayerWardrobe(playerid);
			}
			else
			{
				PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
				SendClientMessageEx(playerid, -1, "{E6F8E0}No tienes dinero suficiente, te faltan {FF6633}%s$ {E6F8E0}para poder comprar esta ropa.", number_format_thousand(clothe_info[2] - CHARACTER_INFO[playerid][ch_CASH]));
			}
			return 1;
		}
		else if(playertextid == PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][3]) // Siguiente
		{
			PlayerPlaySoundEx(playerid, 1052, 0.0, 0.0, 0.0);
			
			switch(ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_INTERIOR_TYPE])
			{
				case INTERIOR_BINCO:
				{
					switch(CHARACTER_INFO[playerid][ch_SEX])
					{
						case SEX_MALE:
						{
							if(PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] == (sizeof(Binco_Shop_Male_Skins) - 1)) PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] = 0;
							else PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] ++;
						}
						case SEX_FEMALE:
						{
							if(PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] == (sizeof(Binco_Shop_Female_Skins) - 1)) PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] = 0;
							else PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] ++;
						}
					}
				}
				case INTERIOR_SUBURBAN:
				{
					switch(CHARACTER_INFO[playerid][ch_SEX])
					{
						case SEX_MALE:
						{
							if(PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] == (sizeof(Suburban_Shop_Male_Skins) - 1)) PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] = 0;
							else PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] ++;
						}
						case SEX_FEMALE:
						{
							if(PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] == (sizeof(Suburban_Shop_Female_Skins) - 1)) PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] = 0;
							else PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] ++;
						}
					}
				}
				case INTERIOR_PROLAPS:
				{
					switch(CHARACTER_INFO[playerid][ch_SEX])
					{
						case SEX_MALE:
						{
							if(PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] == (sizeof(Prolaps_Shop_Male_Skins) - 1)) PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] = 0;
							else PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] ++;
						}
						case SEX_FEMALE:
						{
							if(PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] == (sizeof(Prolaps_Shop_Female_Skins) - 1)) PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] = 0;
							else PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] ++;
						}
					}
				}
				case INTERIOR_DIDIER_SACHS:
				{
					switch(CHARACTER_INFO[playerid][ch_SEX])
					{
						case SEX_MALE:
						{
							if(PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] == (sizeof(Didier_Shop_Male_Skins) - 1)) PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] = 0;
							else PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] ++;
						}
						case SEX_FEMALE:
						{
							if(PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] == (sizeof(Didier_Shop_Female_Skins) - 1)) PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] = 0;
							else PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] ++;
						}
					}
				}
				case INTERIOR_VICTIM:
				{
					switch(CHARACTER_INFO[playerid][ch_SEX])
					{
						case SEX_MALE:
						{
							if(PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] == (sizeof(Victim_Shop_Male_Skins) - 1)) PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] = 0;
							else PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] ++;
						}
						case SEX_FEMALE:
						{
							if(PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] == (sizeof(Victim_Shop_Female_Skins) - 1)) PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] = 0;
							else PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] ++;
						}
					}
				}
				case INTERIOR_ZIP:
				{
					switch(CHARACTER_INFO[playerid][ch_SEX])
					{
						case SEX_MALE:
						{
							if(PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] == (sizeof(Zip_Shop_Male_Skins) - 1)) PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] = 0;
							else PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] ++;
						}
						case SEX_FEMALE:
						{
							if(PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] == (sizeof(Zip_Shop_Female_Skins) - 1)) PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] = 0;
							else PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] ++;
						}
					}
				}
			}
			
			UpdateClothingShop(playerid);
			return 1;
		}
		else if(playertextid == PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][4]) // Anterior
		{
			PlayerPlaySoundEx(playerid, 1053, 0.0, 0.0, 0.0);
			
			switch(ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_INTERIOR_TYPE])
			{
				case INTERIOR_BINCO:
				{
					switch(CHARACTER_INFO[playerid][ch_SEX])
					{
						case SEX_MALE:
						{
							if(PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] == 0) PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] = sizeof(Binco_Shop_Male_Skins) - 1;
							else PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] --;
						}
						case SEX_FEMALE:
						{
							if(PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] == 0) PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] = sizeof(Binco_Shop_Female_Skins) - 1;
							else PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] --;
						}
					}
				}
				case INTERIOR_SUBURBAN:
				{
					switch(CHARACTER_INFO[playerid][ch_SEX])
					{
						case SEX_MALE:
						{
							if(PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] == 0) PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] = sizeof(Suburban_Shop_Male_Skins) - 1;
							else PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] --;
						}
						case SEX_FEMALE:
						{
							if(PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] == 0) PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] = sizeof(Suburban_Shop_Female_Skins) - 1;
							else PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] --;
						}
					}
				}
				case INTERIOR_PROLAPS:
				{
					switch(CHARACTER_INFO[playerid][ch_SEX])
					{
						case SEX_MALE:
						{
							if(PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] == 0) PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] = sizeof(Prolaps_Shop_Male_Skins) - 1;
							else PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] --;
						}
						case SEX_FEMALE:
						{
							if(PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] == 0) PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] = sizeof(Prolaps_Shop_Female_Skins) - 1;
							else PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] --;
						}
					}
				}
				case INTERIOR_DIDIER_SACHS:
				{
					switch(CHARACTER_INFO[playerid][ch_SEX])
					{
						case SEX_MALE:
						{
							if(PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] == 0) PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] = sizeof(Didier_Shop_Male_Skins) - 1;
							else PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] --;
						}
						case SEX_FEMALE:
						{
							if(PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] == 0) PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] = sizeof(Didier_Shop_Female_Skins) - 1;
							else PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] --;
						}
					}
				}
				case INTERIOR_VICTIM:
				{
					switch(CHARACTER_INFO[playerid][ch_SEX])
					{
						case SEX_MALE:
						{
							if(PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] == 0) PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] = sizeof(Victim_Shop_Male_Skins) - 1;
							else PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] --;
						}
						case SEX_FEMALE:
						{
							if(PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] == 0) PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] = sizeof(Victim_Shop_Female_Skins) - 1;
							else PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] --;
						}
					}
				}
				case INTERIOR_ZIP:
				{
					switch(CHARACTER_INFO[playerid][ch_SEX])
					{
						case SEX_MALE:
						{
							if(PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] == 0) PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] = sizeof(Zip_Shop_Male_Skins) - 1;
							else PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] --;
						}
						case SEX_FEMALE:
						{
							if(PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] == 0) PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] = sizeof(Zip_Shop_Female_Skins) - 1;
							else PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] --;
						}
					}
				}
			}
			
			UpdateClothingShop(playerid);
			return 1;
		}
	}
	
	if(PLAYER_TEMP[playerid][pt_TOYS_SHOP])
	{
		if(playertextid == PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5]) //Comprar
		{		
			if(CHARACTER_INFO[playerid][ch_CASH] >= Toys_Shop[ PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] ][shop_toy_price])
			{
				new slot = GetEmptyPlayerToySlot(playerid);
				if(!ACCOUNT_INFO[playerid][ac_SU] && slot >= MAX_NU_TOYS)
				{
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					SendClientMessageEx(playerid, -1, "{E6F8E0}¡Los jugadores {b1fc6f}VIP {E6F8E0}pueden tener hasta %d accesorios! Usa {fffb49}/ayuda {E6F8E0}si quieres ser {b1fc6f}VIP.", MAX_PLAYER_ATTACHED_OBJECTS);
					return 1;
				}
				if(ACCOUNT_INFO[playerid][ac_SU] == 1 && slot >= 5)
				{
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					SendClientMessageEx(playerid, -1, "{E6F8E0}¡Ya no puedes ponerte mas accesorios, compra vip 2 para poder ponerte hasta 10.", MAX_PLAYER_ATTACHED_OBJECTS);
					return 1;
				}
				if(slot == -1)
				{
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					SendClientMessage(playerid, -1, "{E6F8E0}No tienes más espacio para accesorios, elimina alguno si quieres comprar otro.");
					ClosePlayerToysMenu(playerid);
					return 1;
				}
								
				PLAYER_TOYS[playerid][slot][player_toy_VALID] = true;
				format(PLAYER_TOYS[playerid][slot][player_toy_NAME], 24, "%s", Toys_Shop[ PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] ][shop_toy_model]);
				PLAYER_TOYS[playerid][slot][player_toy_ATTACHED] = false;
				PLAYER_TOYS[playerid][slot][player_toy_MODELID] = Toys_Shop[ PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] ][shop_toy_modelid];
				PLAYER_TOYS[playerid][slot][player_toy_BONE] = -1; // Sin utilizar aún
				PLAYER_TOYS[playerid][slot][player_toy_OFFSET_X] = 0.0;
				PLAYER_TOYS[playerid][slot][player_toy_OFFSET_Y] = 0.0;
				PLAYER_TOYS[playerid][slot][player_toy_OFFSET_Z] = 0.0;
				PLAYER_TOYS[playerid][slot][player_toy_ROT_X] = 0.0;
				PLAYER_TOYS[playerid][slot][player_toy_ROT_Y] = 0.0;
				PLAYER_TOYS[playerid][slot][player_toy_ROT_Z] = 0.0;
				PLAYER_TOYS[playerid][slot][player_toy_SCALE_X] = 1.0;
				PLAYER_TOYS[playerid][slot][player_toy_SCALE_Y] = 1.0;
				PLAYER_TOYS[playerid][slot][player_toy_SCALE_Z] = 1.0;
				PLAYER_TOYS[playerid][slot][player_toy_COLOR_1] = 0;
				PLAYER_TOYS[playerid][slot][player_toy_COLOR_2] = 0;
				RegisterNewPlayerToy(playerid, slot);
				
				GivePlayerCash(playerid, -Toys_Shop[ PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] ][shop_toy_price]);
				
				PlayerPlaySoundEx(playerid, 1058, 0.0, 0.0, 0.0);
				SendClientMessageEx(playerid, -1, "Gracias por comprar accesorios en {6a98e2}%s {FFFFFF}para ponertelo usa {6a98e2}/accesorios.", ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_NAME]);
				
				ClosePlayerToysMenu(playerid);
			}
			else
			{
				PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
				SendClientMessageEx(playerid, -1, "{E6F8E0}No tienes dinero suficiente, te faltan {FF6633}%s$ {E6F8E0}para poder comprar esta ropa.", number_format_thousand(Toys_Shop[ PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] ][shop_toy_price] - CHARACTER_INFO[playerid][ch_CASH]));
			}
			
		}
		else if(playertextid == PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][6]) // Siguiente
		{
			PlayerPlaySoundEx(playerid, 1052, 0.0, 0.0, 0.0);
			
			if(PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] == (sizeof(Toys_Shop) - 1)) PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] = 0;
			else PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] ++;
			
			UpdateToysShop(playerid);
		}
		else if(playertextid == PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][7]) // Anterior
		{
			PlayerPlaySoundEx(playerid, 1053, 0.0, 0.0, 0.0);
			
			if(PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] == 0) PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] = sizeof(Toys_Shop) - 1;
			else PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] --;
			
			UpdateToysShop(playerid);
		}
		
	}
	
	if(PLAYER_TEMP[playerid][pt_SHOP])
	{
		HidePlayerDialog(playerid);
		if(playertextid == PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][0])
		{
			switch(PLAYER_TEMP[playerid][pt_SHOP_STATE])
			{
				case PLAYER_SHOP_STATE_ALL:
				{
					if(ACCOUNT_INFO[playerid][ac_LEVEL] < 2) return SendClientMessage(playerid, -1, "{00FF80}Debes ser al menos nivel 2 para publicar anuncios.");
					
					new interval = GetTickDiff(GetTickCount(), PLAYER_TEMP[playerid][pt_ANTIFLOOD_SHOP]);
					if(interval < 500) return SendClientMessage(playerid, -1, "{00FF80}Cálmate.");
					PLAYER_TEMP[playerid][pt_ANTIFLOOD_SHOP] = GetTickCount();
					
					new DBResult:Result, DB_Query[80], total_ads;
					format(DB_Query, sizeof DB_Query, "SELECT COUNT() FROM `SHOP` WHERE `ID_USER` = '%d';", ACCOUNT_INFO[playerid][ac_ID]);
					Result = db_query(Database, DB_Query);

					if(db_num_rows(Result)) total_ads = db_get_field_int(Result, 0);
					db_free_result(Result);
					
					if(total_ads >= MAX_ADS_PER_PLAYER) return SendClientMessageEx(playerid, -1, "{00FF80}No puedes publicar más de %d anuncios, borra alguno.", MAX_ADS_PER_PLAYER);
					
					HidePlayerShop(playerid);
					ShowDialog(playerid, DIALOG_SHOP_ADD);
				}
			}
		}
		else if(playertextid == PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][1])
		{
			switch(PLAYER_TEMP[playerid][pt_SHOP_STATE])
			{
				case PLAYER_SHOP_STATE_ALL:
				{
					PLAYER_TEMP[playerid][pt_SHOP_COME_FROM_MY_ADS] = true;
					PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] = 0;
					PLAYER_TEMP[playerid][pt_SHOP_STATE] = PLAYER_SHOP_STATE_MY_ADS;
					UpdatePlayerShop(playerid);
				}
			}
		}
		else if(playertextid == PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][2])
		{
			switch(PLAYER_TEMP[playerid][pt_SHOP_STATE])
			{
				case PLAYER_SHOP_STATE_ALL: HidePlayerShop(playerid);
				case PLAYER_SHOP_STATE_MY_ADS: // Atras
				{
					new interval = GetTickDiff(GetTickCount(), PLAYER_TEMP[playerid][pt_ANTIFLOOD_SHOP]);
					if(interval < 500) return SendClientMessage(playerid, -1, "{00FF80}Cálmate.");
					PLAYER_TEMP[playerid][pt_ANTIFLOOD_SHOP] = GetTickCount();
					
					PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] = 0;
					PLAYER_TEMP[playerid][pt_SHOP_COME_FROM_MY_ADS] = false;
					PLAYER_TEMP[playerid][pt_SHOP_STATE] = PLAYER_SHOP_STATE_ALL;
					UpdatePlayerShop(playerid);
				}
				case PLAYER_SHOP_STATE_AD: ShowDialog(playerid, DIALOG_SHOP_ARTICLE_MODIFY);
			}
		}
		else if(playertextid == PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][3])
		{
			switch(PLAYER_TEMP[playerid][pt_SHOP_STATE])
			{
				case PLAYER_SHOP_STATE_ALL: // Siguiente
				{
					new interval = GetTickDiff(GetTickCount(), PLAYER_TEMP[playerid][pt_ANTIFLOOD_SHOP]);
					if(interval < 500) return SendClientMessage(playerid, -1, "{00FF80}Cálmate.");
					PLAYER_TEMP[playerid][pt_ANTIFLOOD_SHOP] = GetTickCount();
					
					if(PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] >= GetDatabasePages("SELECT COUNT() FROM `SHOP`;", PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT]) - 1) PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] = 0;
					else PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] ++;
					
					UpdatePlayerShop(playerid);
				}
				case PLAYER_SHOP_STATE_MY_ADS: // Siguiente
				{
					new interval = GetTickDiff(GetTickCount(), PLAYER_TEMP[playerid][pt_ANTIFLOOD_SHOP]);
					if(interval < 500) return SendClientMessage(playerid, -1, "{00FF80}Cálmate.");
					PLAYER_TEMP[playerid][pt_ANTIFLOOD_SHOP] = GetTickCount();
					
					new the_query[80];
					format(the_query, sizeof the_query, "SELECT COUNT() FROM `SHOP` WHERE `ID_USER` = '%d';", ACCOUNT_INFO[playerid][ac_ID]);
					
					if(PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] >= GetDatabasePages(the_query, PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT]) - 1) PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] = 0;
					else PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] ++;
					
					UpdatePlayerShop(playerid);
				}
				case PLAYER_SHOP_STATE_AD: ShowDialog(playerid, DIALOG_SHOP_ARTICLE_REMOVE);
			}
		}
		else if(playertextid == PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][4])
		{
			switch(PLAYER_TEMP[playerid][pt_SHOP_STATE])
			{
				case PLAYER_SHOP_STATE_ALL: // Anterior
				{
					new interval = GetTickDiff(GetTickCount(), PLAYER_TEMP[playerid][pt_ANTIFLOOD_SHOP]);
					if(interval < 500) return SendClientMessage(playerid, -1, "{00FF80}Cálmate.");
					PLAYER_TEMP[playerid][pt_ANTIFLOOD_SHOP] = GetTickCount();
					
					if(PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] <= 0) PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] = GetDatabasePages("SELECT COUNT() FROM `SHOP`;", PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT]) - 1;
					else PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] --;
					
					UpdatePlayerShop(playerid);
				}
				case PLAYER_SHOP_STATE_MY_ADS: // Anterior
				{
					new interval = GetTickDiff(GetTickCount(), PLAYER_TEMP[playerid][pt_ANTIFLOOD_SHOP]);
					if(interval < 500) return SendClientMessage(playerid, -1, "{00FF80}Cálmate.");
					PLAYER_TEMP[playerid][pt_ANTIFLOOD_SHOP] = GetTickCount();
					
					new the_query[80];
					format(the_query, sizeof the_query, "SELECT COUNT() FROM `SHOP` WHERE `ID_USER` = '%d';", ACCOUNT_INFO[playerid][ac_ID]);
					
					if(PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] <= 0) PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] = GetDatabasePages(the_query, PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT]) - 1;
					else PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] --;
					
					UpdatePlayerShop(playerid);
				}
				case PLAYER_SHOP_STATE_AD: // Atrás
				{
					if(PLAYER_TEMP[playerid][pt_SHOP_COME_FROM_MY_ADS])
					{
						PLAYER_TEMP[playerid][pt_SHOP_STATE] = PLAYER_SHOP_STATE_MY_ADS;
						UpdatePlayerShop(playerid);
					}
					else
					{
						PLAYER_TEMP[playerid][pt_SHOP_STATE] = PLAYER_SHOP_STATE_ALL;
						UpdatePlayerShop(playerid);
					}
				}
			}
		}
	}
    return 1;
}

UpdateReputationTextDraws(playerid)
{
	new neccessary_rep = ACCOUNT_INFO[playerid][ac_LEVEL] * REP_MULTIPLIER, str[64];
	// vacio 0, lleno 450
	
	if(ACCOUNT_INFO[playerid][ac_REP] >= neccessary_rep)
	{
		PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][0], 636.0, 0.0);
		if(PLAYER_MISC[playerid][MISC_CONFIG_HUD]) PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][0]);
		format(str, sizeof str, "~w~Nivel:_~y~%d__~r~~h~(/comprarnivel)", ACCOUNT_INFO[playerid][ac_LEVEL]);
		PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][3], str);
	}
	else
	{
		new Float:sizeX = floatmul(floatdiv(ACCOUNT_INFO[playerid][ac_REP], neccessary_rep), 636.0);
		PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][0], sizeX, 0.0);
		if(PLAYER_MISC[playerid][MISC_CONFIG_HUD]) PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][0]);
		format(str, sizeof str, "~w~Nivel:~y~_%d_~w~Exp:_~y~(%d/%d)", ACCOUNT_INFO[playerid][ac_LEVEL], ACCOUNT_INFO[playerid][ac_REP], neccessary_rep);
		PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][3], str);
	}
	return 1;
}

forward AddPlayerReputation(playerid);
public AddPlayerReputation(playerid)
{
	new neccessary_rep = ACCOUNT_INFO[playerid][ac_LEVEL] * REP_MULTIPLIER;
	if(ACCOUNT_INFO[playerid][ac_REP] < neccessary_rep)
	{
		ACCOUNT_INFO[playerid][ac_REP] ++;
		UpdateReputationTextDraws(playerid);
		
		if(ACCOUNT_INFO[playerid][ac_REP] >= neccessary_rep) ShowPlayerMessage(playerid, "Escribe ~g~/comprarnivel ~w~para subir de nivel.", 6);
		
		ACCOUNT_INFO[playerid][ac_PAYDAY_REP] ++;
		if(ACCOUNT_INFO[playerid][ac_PAYDAY_REP] >= REP_FOR_PAYDAY)
		{
			PlayerPayday(playerid);
			ACCOUNT_INFO[playerid][ac_PAYDAY_REP] = 0;
		}
		
		
		ACCOUNT_INFO[playerid][ac_TIME_PLAYING] += gettime() - PLAYER_TEMP[playerid][pt_TIME_PLAYING];
		PLAYER_TEMP[playerid][pt_TIME_PLAYING] = gettime();
		new DB_Query[256];
		format(DB_Query, sizeof DB_Query, 
		
			"\
				UPDATE `CUENTA` SET `TIME-PLAYING` = '%d', `LEVEL` = '%d', `REP` = '%d', `TIME_FOR_REP` = '%d', `PAYDAY_REP` = '%d' WHERE `ID` = '%d';\
			",
				ACCOUNT_INFO[playerid][ac_TIME_PLAYING], ACCOUNT_INFO[playerid][ac_LEVEL], ACCOUNT_INFO[playerid][ac_REP], TIME_FOR_REP, ACCOUNT_INFO[playerid][ac_PAYDAY_REP], ACCOUNT_INFO[playerid][ac_ID]
		);
		db_query(Database, DB_Query);
		
		ACCOUNT_INFO[playerid][ac_TIME_FOR_REP] = TIME_FOR_REP;
		PLAYER_TEMP[playerid][pt_TIME_PASSED_LAST_REP] = gettime() * 1000;

		KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][2]);
		PLAYER_TEMP[playerid][pt_TIMERS][2] = SetTimerEx("AddPlayerReputation", ACCOUNT_INFO[playerid][ac_TIME_FOR_REP], false, "i", playerid);
		return 1;
	}
	KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][2]);
	return 0;
}

CMD:comprarnivel(playerid, params[])
{
	new neccessary_rep = ACCOUNT_INFO[playerid][ac_LEVEL] * REP_MULTIPLIER;
	if(ACCOUNT_INFO[playerid][ac_REP] < neccessary_rep) return SendClientMessage(playerid, 0xA9F5A9AA, "Aún no tienes la suficiente reputación para subir de nivel.");
	if(ACCOUNT_INFO[playerid][ac_LEVEL] * 150 > CHARACTER_INFO[playerid][ch_CASH]) return SendClientMessageEx(playerid, 0xA9F5A9AA, "No tienes suficiente dinero para subir de nivel, te faltan {FF6633}%s$ {E6F8E0}para poder comprarlo.", number_format_thousand((ACCOUNT_INFO[playerid][ac_LEVEL] * 150) - CHARACTER_INFO[playerid][ch_CASH]));
	GivePlayerCash(playerid, -(ACCOUNT_INFO[playerid][ac_LEVEL] * 150));
	
	ACCOUNT_INFO[playerid][ac_REP] = 1;
	ACCOUNT_INFO[playerid][ac_LEVEL] ++;
	UpdateReputationTextDraws(playerid);
	SetPlayerSkillLevels(playerid);
	
	//SendClientMessageEx(playerid, -1, "{58ACFA}¡Felicidades! {FFFFFF}Has subido al nivel %d.", ACCOUNT_INFO[playerid][ac_LEVEL]);
	SetPlayerScore(playerid, ACCOUNT_INFO[playerid][ac_LEVEL]);
	format(string2,sizeof(string2),"Felicidades, subiste al nivel: %d",ACCOUNT_INFO[playerid][ac_LEVEL]);
	MensajeNotificacion(playerid,string2);
	PlayerPlaySoundEx(playerid, 1058, 0.0, 0.0, 0.0);
	
	ACCOUNT_INFO[playerid][ac_TIME_FOR_REP] = TIME_FOR_REP;
	PLAYER_TEMP[playerid][pt_TIME_PASSED_LAST_REP] = gettime() * 1000;
	
	
	ACCOUNT_INFO[playerid][ac_TIME_PLAYING] += gettime() - PLAYER_TEMP[playerid][pt_TIME_PLAYING];
	PLAYER_TEMP[playerid][pt_TIME_PLAYING] = gettime();
	new DB_Query[256];
	format(DB_Query, sizeof DB_Query, 
	
		"\
			UPDATE `CUENTA` SET `TIME-PLAYING` = '%d', `LEVEL` = '%d', `REP` = '%d', `TIME_FOR_REP` = '%d', `PAYDAY_REP` = '%d' WHERE `ID` = '%d';\
		",
			ACCOUNT_INFO[playerid][ac_TIME_PLAYING], ACCOUNT_INFO[playerid][ac_LEVEL], ACCOUNT_INFO[playerid][ac_REP], TIME_FOR_REP, ACCOUNT_INFO[playerid][ac_PAYDAY_REP], ACCOUNT_INFO[playerid][ac_ID]
	);
	db_query(Database, DB_Query);
	
	KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][2]);
	PLAYER_TEMP[playerid][pt_TIMERS][2] = SetTimerEx("AddPlayerReputation", ACCOUNT_INFO[playerid][ac_TIME_FOR_REP], false, "i", playerid);
	return 1;
}

stock SetPlayerCash(playerid, ammount, bool:update = true)
{
	CHARACTER_INFO[playerid][ch_CASH] = ammount;
	ResetPlayerMoney(playerid);
	GivePlayerMoney(playerid, CHARACTER_INFO[playerid][ch_CASH]);
	
	if(update)
	{
		new DB_Query[160];
		format(DB_Query, sizeof DB_Query, "UPDATE `PERSONAJE` SET `CASH` = '%d' WHERE `ID_USER` = '%d';", CHARACTER_INFO[playerid][ch_CASH], ACCOUNT_INFO[playerid][ac_ID]);
		db_query(Database, DB_Query);
	}
	return 1;
}

GivePlayerCash(playerid, ammount, bool:update = true)
{
	new varxd,string[50];
	varxd = CHARACTER_INFO[playerid][ch_CASH];

	CHARACTER_INFO[playerid][ch_CASH] += ammount;
	ResetPlayerMoney(playerid);
	GivePlayerMoney(playerid, CHARACTER_INFO[playerid][ch_CASH]);
	
	if(CHARACTER_INFO[playerid][ch_CASH] >= varxd)
	{
		format(string,sizeof(string),"~g~+$%d",ammount);
	}
	else
	{
		format(string,sizeof(string),"~r~$%d",ammount);
	}
	GameTextForPlayer(playerid,string,5000,1);
	//PlayerPlaySound(playerid, 4201, 0.0, 0.0, 0.0);
	if(update)
	{
		new DB_Query[160];
		format(DB_Query, sizeof DB_Query, "UPDATE `PERSONAJE` SET `CASH` = '%d' WHERE `ID_USER` = '%d';", CHARACTER_INFO[playerid][ch_CASH], ACCOUNT_INFO[playerid][ac_ID]);
		db_query(Database, DB_Query);
	}
	return 1;
}

LoadEnterExits()
{
	new total_enterexits, label_str[256], info[3];
		
	for(new i = 0; i != sizeof ENTER_EXIT; i ++)
	{
		ENTER_EXIT[total_enterexits][ee_ID] = total_enterexits + 1;

		//if(ENTER_EXIT[total_enterexits][ee_TIME_OPEN] == 0 && ENTER_EXIT[total_enterexits][ee_TIME_CLOSE] == 0) format(label_str, sizeof label_str, "{FFFFFF}Lugar:\n{58ACFA}%s\n\n{FFFFFF}Presiona la tecla {58ACFA}'Y' {FFFFFF}para entrar", ENTER_EXIT[total_enterexits][ee_NAME]);
		//else format(label_str, sizeof label_str, "{FFFFFF}Lugar:\n{58ACFA}%s\n{FFFFFF}Horario de atencion: {58ACFA}%02d:00 - %02d:00\n\n{FFFFFF}Escribe {58ACFA}/entrar {FFFFFF}para entrar", ENTER_EXIT[total_enterexits][ee_NAME], ENTER_EXIT[total_enterexits][ee_TIME_OPEN], ENTER_EXIT[total_enterexits][ee_TIME_CLOSE]);
		format(label_str, sizeof label_str, "{FFFFFF}Lugar:\n{58ACFA}%s\n\n{FFFFFF}Presiona la tecla {58ACFA}'Y' {FFFFFF}para entrar", ENTER_EXIT[total_enterexits][ee_NAME]);

		ENTER_EXIT[total_enterexits][ee_INT_LABEL_ID] = CreateDynamic3DTextLabel("{FF6633}> SALIDA <\n{FFFFFF}Presiona la tecla {58ACFA}'N' {FFFFFF}Para salir", 0xFFFFFFFF, ENTER_EXIT[total_enterexits][ee_INT_X], ENTER_EXIT[total_enterexits][ee_INT_Y], ENTER_EXIT[total_enterexits][ee_INT_Z] + 0.25, 10.0, .testlos = true, .worldid = ENTER_EXIT[total_enterexits][ee_INT_WORLD], .interiorid = ENTER_EXIT[total_enterexits][ee_INT_INTERIOR]);
		ENTER_EXIT[total_enterexits][ee_EXT_LABEL_ID] = CreateDynamic3DTextLabel(label_str, 0xFFFFFFFF, ENTER_EXIT[total_enterexits][ee_EXT_X], ENTER_EXIT[total_enterexits][ee_EXT_Y], ENTER_EXIT[total_enterexits][ee_EXT_Z] + 0.25, 10.0, .testlos = true, .worldid = ENTER_EXIT[total_enterexits][ee_EXT_WORLD], .interiorid = ENTER_EXIT[total_enterexits][ee_EXT_INTERIOR]);
		
		if(ENTER_EXIT[total_enterexits][ee_INT_MAPICON] != -1) ENTER_EXIT[total_enterexits][ee_INT_MAPICON_ID] = CreateDynamicMapIcon(ENTER_EXIT[total_enterexits][ee_INT_X], ENTER_EXIT[total_enterexits][ee_INT_Y], ENTER_EXIT[total_enterexits][ee_INT_Z], ENTER_EXIT[total_enterexits][ee_INT_MAPICON], -1, ENTER_EXIT[total_enterexits][ee_INT_WORLD], ENTER_EXIT[total_enterexits][ee_INT_INTERIOR]);
		if(ENTER_EXIT[total_enterexits][ee_EXT_MAPICON] != -1) ENTER_EXIT[total_enterexits][ee_EXT_MAPICON_ID] = CreateDynamicMapIcon(ENTER_EXIT[total_enterexits][ee_EXT_X], ENTER_EXIT[total_enterexits][ee_EXT_Y], ENTER_EXIT[total_enterexits][ee_EXT_Z], ENTER_EXIT[total_enterexits][ee_EXT_MAPICON], -1, ENTER_EXIT[total_enterexits][ee_EXT_WORLD], ENTER_EXIT[total_enterexits][ee_EXT_INTERIOR]);
		
		ENTER_EXIT[total_enterexits][ee_INT_PICKUP_ID] = CreateDynamicPickup(0, 1, ENTER_EXIT[total_enterexits][ee_INT_X], ENTER_EXIT[total_enterexits][ee_INT_Y], ENTER_EXIT[total_enterexits][ee_INT_Z], ENTER_EXIT[total_enterexits][ee_INT_WORLD], ENTER_EXIT[total_enterexits][ee_INT_INTERIOR]);
		ENTER_EXIT[total_enterexits][ee_EXT_PICKUP_ID] = CreateDynamicPickup(1318, 1, ENTER_EXIT[total_enterexits][ee_EXT_X], ENTER_EXIT[total_enterexits][ee_EXT_Y], ENTER_EXIT[total_enterexits][ee_EXT_Z] + 0.10, ENTER_EXIT[total_enterexits][ee_EXT_WORLD], ENTER_EXIT[total_enterexits][ee_EXT_INTERIOR]);
		
		info[0] = PICKUP_TYPE_ENTER_EXIT;
		info[1] = total_enterexits; // Index
		info[2] = 1; // Pickup Interior
		Streamer_SetArrayData(STREAMER_TYPE_PICKUP, ENTER_EXIT[total_enterexits][ee_INT_PICKUP_ID], E_STREAMER_EXTRA_ID, info);
		
		info[0] = PICKUP_TYPE_ENTER_EXIT;
		info[1] = total_enterexits; // Index
		info[2] = 2; // Pickup Exterior
		Streamer_SetArrayData(STREAMER_TYPE_PICKUP, ENTER_EXIT[total_enterexits][ee_EXT_PICKUP_ID], E_STREAMER_EXTRA_ID, info);
		CreateInteriorActor(ENTER_EXIT[total_enterexits][ee_INTERIOR_TYPE], ENTER_EXIT[total_enterexits][ee_INT_WORLD], ENTER_EXIT[total_enterexits][ee_INT_INTERIOR]);
		
		total_enterexits ++;
	}
	return 1;
}

stock LoadProperties()
{
	new DBResult:Result;
	Result = db_query(Database, "SELECT `PROPERTY`.*, `PROPERTY_INFO`.* FROM `PROPERTY`, `PROPERTY_INFO` WHERE `PROPERTY_INFO`.ID_PROPERTY = `PROPERTY`.ID;");
	
	new total_houses, total_houses_free;
	for(new i = 0; i < db_num_rows(Result); i ++)
	{
		if(total_houses >= MAX_PROPERTIES)
		{
			printf("---> Límite superado en array 'PROPERTY_INFO' al intentar cargar de la base de datos.");
			break;
		}
		
		PROPERTY_INFO[total_houses][property_VALID] = true;
		PROPERTY_INFO[total_houses][property_ID] = db_get_field_assoc_int(Result, "ID");
		
		PROPERTY_INFO[total_houses][property_EXT_X] = db_get_field_assoc_float(Result, "EXT_X");
		PROPERTY_INFO[total_houses][property_EXT_Y] = db_get_field_assoc_float(Result, "EXT_Y");
		PROPERTY_INFO[total_houses][property_EXT_Z] = db_get_field_assoc_float(Result, "EXT_Z");
		PROPERTY_INFO[total_houses][property_EXT_ANGLE] = db_get_field_assoc_float(Result, "EXT_ANGLE");
		PROPERTY_INFO[total_houses][property_EXT_INTERIOR] = db_get_field_assoc_int(Result, "EXT_INTERIOR");
		PROPERTY_INFO[total_houses][property_EXT_FREEZE] = db_get_field_assoc_int(Result, "EXT_FREEZE");
		PROPERTY_INFO[total_houses][property_ID_INTERIOR] = db_get_field_assoc_int(Result, "ID_INTERIOR");
		
		PROPERTY_INFO[total_houses][property_PRICE] = db_get_field_assoc_int(Result, "PRICE");
		PROPERTY_INFO[total_houses][property_PRICE_BASE] = PROPERTY_INFO[total_houses][property_PRICE];
		PROPERTY_INFO[total_houses][property_LEVEL] = db_get_field_assoc_int(Result, "LEVEL");
		PROPERTY_INFO[total_houses][property_EXTRA] = db_get_field_assoc_int(Result, "EXTRA"); 
		PROPERTY_INFO[total_houses][property_VIP_LEVEL] = db_get_field_assoc_int(Result, "VIP_LEVEL"); 
		
		if(PROPERTY_INFO[total_houses][property_EXTRA]) PROPERTY_INFO[total_houses][property_PRICE] = 0;
		if(PROPERTY_INFO[total_houses][property_VIP_LEVEL]) PROPERTY_INFO[total_houses][property_LEVEL] = 1;
		
		new DBResult:Result_info_owner, DB_Query[600], owner[24], info[3], label_str[256], pickup_modelid;
		format(DB_Query, sizeof DB_Query, "SELECT `CUENTA`.`NAME`, `PROPERTY_OWNER`.`ID_USER`, `PROPERTY_OWNER`.`PROPERTY_NAME` FROM `CUENTA`, `PROPERTY_OWNER` WHERE `PROPERTY_OWNER`.`ID_PROPERTY` = '%d' AND `CUENTA`.`ID` = `PROPERTY_OWNER`.`ID_USER`;", PROPERTY_INFO[total_houses][property_ID]);
		Result_info_owner = db_query(Database, DB_Query);
	
		if(db_num_rows(Result_info_owner))
		{
			pickup_modelid = 0;
			PROPERTY_INFO[total_houses][property_SOLD] = true;
			PROPERTY_INFO[total_houses][property_CREW] = false;
			db_get_field_assoc(Result_info_owner, "NAME", owner, 24);
			PROPERTY_INFO[total_houses][property_OWNER_ID] = db_get_field_assoc_int(Result_info_owner, "ID_USER");
			PROPERTY_INFO[total_houses][property_CREW_ID] = 0;
			db_get_field_assoc(Result_info_owner, "PROPERTY_NAME", PROPERTY_INFO[total_houses][property_NAME], 24);

			format
			(
				label_str, 
				sizeof label_str, 
				"\
					Propiedad {58ACFA}#%d\n\n\
					{FFFFFF}Propietario: {58ACFA}%s\n\
					{FFFFFF}Presiona la tecla{58ACFA}'Y' {FFFFFF}para entrar.\
				", PROPERTY_INFO[total_houses][property_ID], owner
			);
		}
		else
		{
			new DBResult:Result_info_crew, crew_name[24];
			format(DB_Query, sizeof DB_Query, "SELECT `CREW`.`ID`, `CREW`.`NAME` FROM `PROPERTY_TERRITORY`, `CREW` WHERE `PROPERTY_TERRITORY`.`ID_PROPERTY` = '%d' AND `CREW`.`ID` = (SELECT `CREW_TERRITORIES`.`ID_CREW` FROM `CREW_TERRITORIES` WHERE `CREW_TERRITORIES`.`ID_TERRITORY` = `PROPERTY_TERRITORY`.`ID_TERRITORY`);", PROPERTY_INFO[total_houses][property_ID]);
			Result_info_crew = db_query(Database, DB_Query);
			
			if(db_num_rows(Result_info_crew))
			{
				pickup_modelid = 0;
				PROPERTY_INFO[total_houses][property_SOLD] = true;
				PROPERTY_INFO[total_houses][property_CREW] = true;
				db_get_field_assoc(Result_info_crew, "NAME", crew_name, 24);
				PROPERTY_INFO[total_houses][property_CREW_ID] = db_get_field_assoc_int(Result_info_crew, "ID");
				PROPERTY_INFO[total_houses][property_OWNER_ID] = 0;
				format(PROPERTY_INFO[total_houses][property_NAME], 24, "PROPIEDAD %d", PROPERTY_INFO[total_houses][property_ID]);

				format
				(
					label_str, 
					sizeof label_str, 
					"\
						Propiedad {58ACFA}#%d\n\n\
						{FFFFFF}Banda: {58ACFA}%s\n\
						{FFFFFF}Presiona la tecla{58ACFA}'Y' {FFFFFF}para entrar.\
					", PROPERTY_INFO[total_houses][property_ID], crew_name
				);
			}
			else
			{
				pickup_modelid = 1273;
				PROPERTY_INFO[total_houses][property_SOLD] = false;
				PROPERTY_INFO[total_houses][property_OWNER_ID] = 0;
				format(PROPERTY_INFO[total_houses][property_NAME], 24, "PROPIEDAD %d", PROPERTY_INFO[total_houses][property_ID]);
				
				if(PROPERTY_INFO[total_houses][property_VIP_LEVEL])
				{
					if(PROPERTY_INFO[total_houses][property_EXTRA])
					{
						format
						(
							label_str, 
							sizeof label_str, 
							"\
								{F4DC42}Membresía VIP%d requerida\n\
								\n\
								{FFFFFF}Propiedad {58ACFA}#%d {FFFFFF}está en venta\n\n\
								Interior: {58ACFA}%d\n\
								{FFFFFF}Coste: {58ACFA}%d "SERVER_COIN"\n\
								{FFFFFF}Nivel necesario: {58ACFA}%d\n\
								{FFFFFF}Usa {58ACFA}/ayuda {FFFFFF}para ver como adquirirla.\
							", PROPERTY_INFO[total_houses][property_VIP_LEVEL], PROPERTY_INFO[total_houses][property_ID], PROPERTY_INFO[total_houses][property_ID_INTERIOR], PROPERTY_INFO[total_houses][property_EXTRA], PROPERTY_INFO[total_houses][property_LEVEL]
						);
					}
					else
					{
						format
						(
							label_str, 
							sizeof label_str, 
							"\
								{F4DC42}Membresía VIP%d requerida\n\
								\n\
								{FFFFFF}Propiedad {58ACFA}#%d {FFFFFF}está en venta\n\n\
								Interior: {58ACFA}%d\n\
								{FFFFFF}Precio: {58ACFA}%s$\n\
								{FFFFFF}Nivel: {58ACFA}%d\n\
								{FFFFFF}Usa {58ACFA}/ayuda {FFFFFF}para ver como adquirirla.\
							", PROPERTY_INFO[total_houses][property_VIP_LEVEL], PROPERTY_INFO[total_houses][property_ID], PROPERTY_INFO[total_houses][property_ID_INTERIOR], number_format_thousand(PROPERTY_INFO[total_houses][property_PRICE]), PROPERTY_INFO[total_houses][property_LEVEL]
						);
					}
				}
				else
				{
					if(PROPERTY_INFO[total_houses][property_EXTRA])
					{
						format
						(
							label_str, 
							sizeof label_str, 
							"\
								{FFFFFF}Propiedad {58ACFA}#%d {FFFFFF}está en venta\n\n\
								Interior: {58ACFA}%d\n\
								{FFFFFF}Coste: {58ACFA}%d "SERVER_COIN"\n\
								{FFFFFF}Nivel necesario: {58ACFA}%d\n\
								{FFFFFF}Usa {58ACFA}/ayuda {FFFFFF}para ver como adquirirla.\
							", PROPERTY_INFO[total_houses][property_ID], PROPERTY_INFO[total_houses][property_ID_INTERIOR], PROPERTY_INFO[total_houses][property_EXTRA], PROPERTY_INFO[total_houses][property_LEVEL]
						);
					}
					else
					{
						format
						(
							label_str, 
							sizeof label_str, 
							"\
								{FFFFFF}Propiedad {58ACFA}#%d {FFFFFF}está en venta\n\n\
								Interior: {58ACFA}%d\n\
								{FFFFFF}Precio: {58ACFA}%s$\n\
								{FFFFFF}Nivel: {58ACFA}%d\n\
								{FFFFFF}Usa {58ACFA}/ayuda {FFFFFF}para ver como adquirirla.\
							", PROPERTY_INFO[total_houses][property_ID], PROPERTY_INFO[total_houses][property_ID_INTERIOR], number_format_thousand(PROPERTY_INFO[total_houses][property_PRICE]), PROPERTY_INFO[total_houses][property_LEVEL]
						);
					}
				}
				total_houses_free ++;
			}
			db_free_result(Result_info_crew);
		}
		db_free_result(Result_info_owner);
		
		
		PROPERTY_INFO[total_houses][property_EXT_LABEL_ID] = CreateDynamic3DTextLabel(label_str, 0xFFFFFFFF, PROPERTY_INFO[total_houses][property_EXT_X], PROPERTY_INFO[total_houses][property_EXT_Y], PROPERTY_INFO[total_houses][property_EXT_Z] + 0.25, 5.0, .testlos = true, .worldid = 0, .interiorid = PROPERTY_INFO[total_houses][property_EXT_INTERIOR]);
		PROPERTY_INFO[total_houses][property_INT_LABEL_ID] = CreateDynamic3DTextLabel("Escribe {58ACFA}/salir {FFFFFF}para salir\nEscribe {457ad1}/casa {FFFFFF}para más opciones", 0xFFFFFFFF, PROPERTY_INTERIORS[ PROPERTY_INFO[total_houses][property_ID_INTERIOR] ][property_INT_X], PROPERTY_INTERIORS[ PROPERTY_INFO[total_houses][property_ID_INTERIOR] ][property_INT_Y], PROPERTY_INTERIORS[ PROPERTY_INFO[total_houses][property_ID_INTERIOR] ][property_INT_Z] + 0.25, 3.0, .testlos = true, .worldid = PROPERTY_INFO[total_houses][property_ID], .interiorid = PROPERTY_INTERIORS[ PROPERTY_INFO[total_houses][property_ID_INTERIOR] ][property_INT_INTERIOR]);
		
		PROPERTY_INFO[total_houses][property_EXT_PICKUP_ID] = CreateDynamicPickup(pickup_modelid, 1, PROPERTY_INFO[total_houses][property_EXT_X], PROPERTY_INFO[total_houses][property_EXT_Y], PROPERTY_INFO[total_houses][property_EXT_Z], 0, PROPERTY_INFO[total_houses][property_EXT_INTERIOR]);
		PROPERTY_INFO[total_houses][property_INT_PICKUP_ID] = CreateDynamicPickup(0, 1, PROPERTY_INTERIORS[ PROPERTY_INFO[total_houses][property_ID_INTERIOR] ][property_INT_X], PROPERTY_INTERIORS[ PROPERTY_INFO[total_houses][property_ID_INTERIOR] ][property_INT_Y], PROPERTY_INTERIORS[ PROPERTY_INFO[total_houses][property_ID_INTERIOR] ][property_INT_Z], PROPERTY_INFO[total_houses][property_ID], PROPERTY_INTERIORS[ PROPERTY_INFO[total_houses][property_ID_INTERIOR] ][property_INT_INTERIOR]);
		
		
		info[0] = PICKUP_TYPE_PROPERTY;
		info[1] = total_houses; // Index
		info[2] = 1; // Pickup Interior
		Streamer_SetArrayData(STREAMER_TYPE_PICKUP, PROPERTY_INFO[total_houses][property_INT_PICKUP_ID], E_STREAMER_EXTRA_ID, info);
		
		info[0] = PICKUP_TYPE_PROPERTY;
		info[1] = total_houses; // Index
		info[2] = 2; // Pickup Exterior
		Streamer_SetArrayData(STREAMER_TYPE_PICKUP, PROPERTY_INFO[total_houses][property_EXT_PICKUP_ID], E_STREAMER_EXTRA_ID, info);
		
		TOTAL_PROPERTIES_LOADED ++;
		total_houses ++;
		db_next_row(Result);
	}
	db_free_result(Result);

	printf("---> Se han cargado %d propiedades, %d libres.", total_houses, total_houses_free);
	return 1;
}

GetOwnerIntProperty(id_house)
{
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(CHARACTER_INFO[i][ch_STATE] == ROLEPLAY_STATE_OWN_PROPERTY)
			{
				if(CHARACTER_INFO[i][ch_INTERIOR_EXTRA] == id_house)
				{
					return i;
				}
			}
		}
	}
	return -1;
}

LoadCrews()
{
	new DBResult:Result, DB_Query[128];
	Result = db_query(Database, "SELECT * FROM `CREW`;");

	new total_crews;
	for(new i = 0; i < db_num_rows(Result); i ++)
	{
		if(total_crews >= MAX_CREWS)
		{
			printf("---> Límite superado en array 'CREW_INFO' al intentar cargar de la base de datos.");
			break;
		}
		
		CREW_INFO[total_crews][crew_VALID] = true;
		CREW_INFO[total_crews][crew_ID] = db_get_field_assoc_int(Result, "ID");
		db_get_field_assoc(Result, "NAME", CREW_INFO[total_crews][crew_NAME], 32);
		CREW_INFO[total_crews][crew_COLOR] = db_get_field_assoc_int(Result, "COLOR");
		CREW_INFO[total_crews][crew_ONLINE_MEMBERS] = 0;
		
		new DBResult:Result_members;
		format(DB_Query, sizeof DB_Query, "SELECT COUNT() FROM `PLAYER_CREW` WHERE `ID_CREW` = '%d';", CREW_INFO[total_crews][crew_ID]);
		Result_members = db_query(Database, DB_Query);

		if(db_num_rows(Result_members)) CREW_INFO[total_crews][crew_MEMBERS] = db_get_field_int(Result_members, 0);
		db_free_result(Result_members);
		
		
		new DBResult:Result_ranks;
		format(DB_Query, sizeof DB_Query, "SELECT * FROM `CREW_RANKS` WHERE `ID_CREW` = '%d' LIMIT %d;", CREW_INFO[total_crews][crew_ID], MAX_CREW_RANKS);
		Result_ranks = db_query(Database, DB_Query);
		for(new x = 0; x < db_num_rows(Result_ranks); x ++)
		{
			new pos = db_get_field_assoc_int(Result_ranks, "RANK_POS");
			if(pos < 0 || pos > MAX_CREW_RANKS) continue;
			
			CREW_RANK_INFO[total_crews][pos][crew_rank_VALID] = true;
			CREW_RANK_INFO[total_crews][pos][crew_rank_ID] = db_get_field_assoc_int(Result_ranks, "ID");
			db_get_field_assoc(Result_ranks, "RANK_NAME", CREW_RANK_INFO[total_crews][pos][crew_rank_NAME], 32);
			
			new DBResult:Result_ranks_permissions;
			format(DB_Query, sizeof DB_Query, "SELECT * FROM `RANK_PERMISSIONS` WHERE `ID_RANK` = '%d' LIMIT %d;", CREW_RANK_INFO[total_crews][pos][crew_rank_ID], CREW_RANK_SIZE);
			Result_ranks_permissions = db_query(Database, DB_Query);
			for(new z = 0; z < db_num_rows(Result_ranks_permissions); z ++)
			{
				new permission = db_get_field_assoc_int(Result_ranks_permissions, "PERMISSION");
				if(permission < 0 || permission > CREW_RANK_SIZE) continue;
				
				CREW_RANK_INFO[total_crews][pos][crew_rank_PERMISSION][permission] = db_get_field_assoc_int(Result_ranks_permissions, "SET");
				db_next_row(Result_ranks_permissions);
			}
			db_free_result(Result_ranks_permissions);
			db_next_row(Result_ranks);
		}
		db_free_result(Result_ranks);
		
		total_crews ++;
		db_next_row(Result);
	}
	
	db_free_result(Result);
	
	
	/*
	for(new i = 0; i != total_crews; i ++)
	{
		if(!CREW_INFO[i][crew_VALID]) continue;
		print("\n\n");
		printf("---- Index: %d, Crew ID: %d, Crew Name: %s, Crew Color: %d ----", i, CREW_INFO[i][crew_ID], CREW_INFO[i][crew_NAME], CREW_INFO[i][crew_COLOR]);
		
		for(new x = 0; x != MAX_CREW_RANKS; x ++)
		{
			if(!CREW_RANK_INFO[i][x][crew_rank_VALID]) continue;
			printf("\tRank Pos: %d, Rank ID: %d, Rank Name: %s", x, CREW_RANK_INFO[i][x][crew_rank_ID], CREW_RANK_INFO[i][x][crew_rank_NAME]);
			
			for(new z = 0; z != CREW_RANK_SIZE; z ++)
			{
				printf("\t\tPermiso: %d, Set: %d", z, CREW_RANK_INFO[i][x][crew_rank_PERMISSION][z]);
			}
		}
	}
	*/
	return 1;
}
public OnPlayerPickUpPickup(playerid, pickupid )
{
	if(PickcupCorredores == pickupid)
	{
	    WinCorredores();
	    INFOCORREDOR[STATUS]=3;
	    return 1;
	}
	return 1;
}
public OnPlayerPickUpDynamicPickup(playerid, pickupid)
{
	//assert( Antiflood( playerid ) );
	PLAYER_TEMP[playerid][pt_LAST_PICKUP_ID] = pickupid;
	return 1;
}
funcion HideEncendido(playerid)
{
	PlayerTextDrawHide(playerid,PlayerTextdraws[playerid][textdraw_encendido]); 
	return 1;
}
SendAccion(playerid,text[],tiempo)
{
	return SetPlayerChatBubble(playerid,text,0x9AFE2EFF, 50.0, tiempo);
}

stock SendAndReduceInventary(playerid,karensita,comidaobebida)
{
	new DB_Query[256];

	switch(comidaobebida)
	{
		case BEBIDA_24_7://Bebidas
		{
			format(string2,sizeof(string2)," * consume: %s * ",INVENTARIOPLAYER[ karensita ][NOMBRE]);
			if(CHARACTER_INFO[playerid][ch_THIRST] >= 99.0) 
			{
				CHARACTER_INFO[playerid][ch_THIRST]=80.0;
				ApplyAnimation(playerid, "FOOD", "EAT_VOMIT_P", 4.1, false, false, false, false, 0, false);
				SendClientMessage(playerid, -1, "{E6F8E0}¿Es que quieres te reventar la barriga?");
				return 1;
			}
			Add_Hungry_Thirst(playerid, 0, 5);

			Equiped_Inventary[playerid][ESTADO]--;
			format(DB_Query, sizeof(DB_Query), "UPDATE `INVENTARIO` SET `ESTADO` = '%d' WHERE `ID` = '%d' AND PLAYER = '%d'",Equiped_Inventary[playerid][ESTADO],IVENTARIOID[playerid],ACCOUNT_INFO[playerid][ac_ID]);
			db_query(Database, DB_Query);
			ApplyAnimation(playerid, "VENDING", "VEND_DRINK2_P", 4.1, false, false, false, false, 0, false);
			if(Equiped_Inventary[playerid][ESTADO] <= 0)
			{
				format(string2,sizeof(string2),"~r~~h~%s~w~ acabado",INVENTARIOPLAYER[ karensita ][NOMBRE]);
				MensajesAyuda(playerid,string2);
				Equiped_Inventary[playerid][VALID_EQUIPED]=false;
				Equiped_Inventary[playerid][TYPE]=0;
				Saved_Invetary[playerid]=0;
				RemovePlayerAttachedObject(playerid, 9);
				format(DB_Query, sizeof(DB_Query), "DELETE FROM `INVENTARIO` WHERE `ID` = '%d' AND PLAYER = '%d'",IVENTARIOID[playerid],ACCOUNT_INFO[playerid][ac_ID]);
				db_query(Database, DB_Query);
				HideOrShowTextdrawsNegocio(playerid, 1);
			}
		}
		case COMIDA_24_7://Comidas
		{
			format(string2,sizeof(string2)," * consume: %s * ",INVENTARIOPLAYER[ karensita ][NOMBRE]);
			if(CHARACTER_INFO[playerid][ch_HUNGRY] >= 99.0)
			{
				CHARACTER_INFO[playerid][ch_HUNGRY] = 80.0;
				ApplyAnimation(playerid, "FOOD", "EAT_VOMIT_P", 4.1, false, false, false, false, 0, false);
				SendClientMessage(playerid, -1, "{E6F8E0}¿Es que quieres te reventar la barriga?");
				return 1;
			}
			Add_Hungry_Thirst(playerid, 5, 0);

			Equiped_Inventary[playerid][ESTADO]--;
			format(DB_Query, sizeof(DB_Query), "UPDATE `INVENTARIO` SET `ESTADO` = '%d' WHERE `ID` = '%d' AND PLAYER = '%d'",Equiped_Inventary[playerid][ESTADO],IVENTARIOID[playerid],ACCOUNT_INFO[playerid][ac_ID]);
			db_query(Database, DB_Query);
			ApplyAnimation(playerid, "FOOD", "EAT_BURGER", 4.1, false, false, false, false, 0, false);
			if(Equiped_Inventary[playerid][ESTADO] <= 0)
			{
				format(string2,sizeof(string2),"~r~~h~%s~w~ acabado",INVENTARIOPLAYER[ karensita ][NOMBRE]);
				MensajesAyuda(playerid,string2);
				Equiped_Inventary[playerid][VALID_EQUIPED]=false;
				Equiped_Inventary[playerid][TYPE]=0;
				Saved_Invetary[playerid]=0;
				RemovePlayerAttachedObject(playerid, 9);
				format(DB_Query, sizeof(DB_Query), "DELETE FROM `INVENTARIO` WHERE `ID` = '%d' AND PLAYER = '%d'",IVENTARIOID[playerid],ACCOUNT_INFO[playerid][ac_ID]);
				db_query(Database, DB_Query);
				HideOrShowTextdrawsNegocio(playerid, 1);
			}
		}
		case TYPE_BOTIQUIN://Botiquin
		{
			format(string2,sizeof(string2)," * usa un %s * ",INVENTARIOPLAYER[ karensita ][NOMBRE]);
			
			Equiped_Inventary[playerid][ESTADO]--;
			format(DB_Query, sizeof(DB_Query), "UPDATE `INVENTARIO` SET `ESTADO` = '%d' WHERE `ID` = '%d' AND PLAYER = '%d'",Equiped_Inventary[playerid][ESTADO],IVENTARIOID[playerid],ACCOUNT_INFO[playerid][ac_ID]);
			db_query(Database, DB_Query);
			if(SanandoPlayer[playerid]==true)
			{
				ApplyAnimation(playerid, "FOOD", "EAT_BURGER", 4.1, false, false, false, false, 0, false);
				StartSanar(playerid);
				SanandoPlayer[playerid]=false;
			}
			if(Equiped_Inventary[playerid][ESTADO] <= 0)
			{
				format(string2,sizeof(string2),"~r~~h~%s~w~ acabado",INVENTARIOPLAYER[ karensita ][NOMBRE]);
				MensajesAyuda(playerid,string2);
				Equiped_Inventary[playerid][VALID_EQUIPED]=false;
				Equiped_Inventary[playerid][TYPE]=0;
				Saved_Invetary[playerid]=0;
				RemovePlayerAttachedObject(playerid, 9);
				format(DB_Query, sizeof(DB_Query), "DELETE FROM `INVENTARIO` WHERE `ID` = '%d' AND PLAYER = '%d'",IVENTARIOID[playerid],ACCOUNT_INFO[playerid][ac_ID]);
				db_query(Database, DB_Query);
				HideOrShowTextdrawsNegocio(playerid, 1);
			}
		}
		case TYPE_VENDAJE:
		{
			format(string2,sizeof(string2)," * usa un %s * ",INVENTARIOPLAYER[ karensita ][NOMBRE]);
			format(DB_Query, sizeof(DB_Query), "UPDATE `INVENTARIO` SET `ESTADO` = '%d' WHERE `ID` = '%d' AND PLAYER = '%d'",Equiped_Inventary[playerid][ESTADO],IVENTARIOID[playerid],ACCOUNT_INFO[playerid][ac_ID]);
			db_query(Database, DB_Query);
			ApplyAnimation(playerid, "FOOD", "EAT_BURGER", 4.1, false, false, false, false, 0, false);
			Equiped_Inventary[playerid][ESTADO]--;
			if(Equiped_Inventary[playerid][ESTADO] <= 0)
			{
				format(string2,sizeof(string2),"~r~~h~%s~w~ acabado",INVENTARIOPLAYER[ karensita ][NOMBRE]);
				MensajesAyuda(playerid,string2);
				Equiped_Inventary[playerid][VALID_EQUIPED]=false;
				Equiped_Inventary[playerid][TYPE]=0;
				Saved_Invetary[playerid]=0;
				RemovePlayerAttachedObject(playerid, 9);
				format(DB_Query, sizeof(DB_Query), "DELETE FROM `INVENTARIO` WHERE `ID` = '%d' AND PLAYER = '%d'",IVENTARIOID[playerid],ACCOUNT_INFO[playerid][ac_ID]);
				db_query(Database, DB_Query);
				HideOrShowTextdrawsNegocio(playerid, 1);
			}
		}
		case TYPE_KITHERRAMIENTA:
		{
			format(string2,sizeof(string2)," * Reparando un vehiculo * ");
			Equiped_Inventary[playerid][ESTADO]--;
			format(DB_Query, sizeof(DB_Query), "UPDATE `INVENTARIO` SET `ESTADO` = '%d' WHERE `ID` = '%d' AND PLAYER = '%d'",Equiped_Inventary[playerid][ESTADO],IVENTARIOID[playerid],ACCOUNT_INFO[playerid][ac_ID]);
			db_query(Database, DB_Query);

			if(Equiped_Inventary[playerid][ESTADO] <= 0)
			{
				format(string2,sizeof(string2),"~r~~h~%s~w~ acabado",INVENTARIOPLAYER[ karensita ][NOMBRE]);
				MensajesAyuda(playerid,string2);
				Equiped_Inventary[playerid][VALID_EQUIPED]=false;
				Equiped_Inventary[playerid][TYPE]=0;
				Saved_Invetary[playerid]=0;
				RemovePlayerAttachedObject(playerid, 9);
				format(DB_Query, sizeof(DB_Query), "DELETE FROM `INVENTARIO` WHERE `ID` = '%d' AND PLAYER = '%d'",IVENTARIOID[playerid],ACCOUNT_INFO[playerid][ac_ID]);
				db_query(Database, DB_Query);
				HideOrShowTextdrawsNegocio(playerid, 1);
			}
		}
	}

	SendAccion(playerid,string2,5000);
	UpdateStatusProductoNegocio(playerid);
	return 1;
}
StartSanar(playerid)
{
	Equiped_Inventary[playerid][ESTADO]--;
	KillTimer(SanarTimer[playerid]);
	GameTextForPlayer(playerid,"~y~~n~~n~~n~~n~~n~Sanandote..",2501,3);
	SanarTimer[playerid]=SetTimerEx("SanarPlayer",2500, false,"d",playerid);
	return 1;
}
funcion SanarPlayer(playerid)
{
	new Float:health;
    GetPlayerHealth(playerid,health);
    if(health <= 80)
    {
        SetPlayerHealthEx(playerid,health+20);
    }
    else if(health >= 80 && health <= 100)
    {
        SetPlayerHealthEx(playerid,100);
    }
    GameTextForPlayer(playerid,"~g~~n~~n~~n~~n~~n~Te has sanado.",2501,3);
	return 1;
}
stock Float:GetSizeProductoNegocio(size)
{
	new Float:flotsize;
	switch(size)
	{
		case 5: flotsize=0.0595238;
		case 7: flotsize=0.08333331;
		case 8: flotsize=0.0952381;
		case 10: flotsize=0.1190476;
	}
	return flotsize;
}
UpdateStatusProductoNegocio(playerid)
{
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_statusproducto][2], floatadd(524.0, floatdiv(Equiped_Inventary[playerid][ESTADO], GetSizeProductoNegocio(INVENTARIOPLAYER[ Equiped_Inventary[playerid][TYPE] ][MAXCONSUME] ))), 0.000000);
	PlayerTextDrawShow(playerid,PlayerTextdraws[playerid][textdraw_statusproducto][2]);

	new td_str[256];
	format(td_str, sizeof td_str, "%s~r~~h~~h~(%d)",INVENTARIOPLAYER[ Equiped_Inventary[playerid][TYPE] ][NOMBRE],Equiped_Inventary[playerid][ESTADO]);
 	PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][textdraw_statusproducto][3], td_str);
	return 1;
}

HideOrShowTextdrawsNegocio(playerid, tipe)
{
	switch(tipe)
	{
		case 0:
		{
			PlayerTextDrawShow(playerid,PlayerTextdraws[playerid][textdraw_statusproducto][0]);
			PlayerTextDrawShow(playerid,PlayerTextdraws[playerid][textdraw_statusproducto][1]);
			PlayerTextDrawShow(playerid,PlayerTextdraws[playerid][textdraw_statusproducto][2]);
			PlayerTextDrawShow(playerid,PlayerTextdraws[playerid][textdraw_statusproducto][3]);
			new td_str[256];
			format(td_str, sizeof td_str, "%s~r~~h~~h~(%d)",INVENTARIOPLAYER[ Equiped_Inventary[playerid][TYPE] ][NOMBRE],Equiped_Inventary[playerid][ESTADO]);
 			PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][textdraw_statusproducto][3], td_str);
 			PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_statusproducto][2], floatadd(524.0, floatdiv(Equiped_Inventary[playerid][ESTADO], GetSizeProductoNegocio(INVENTARIOPLAYER[ Equiped_Inventary[playerid][TYPE] ][MAXCONSUME]))), 0.000000);
			PlayerTextDrawShow(playerid,PlayerTextdraws[playerid][textdraw_statusproducto][2]);
		}
		case 1:
		{
			PlayerTextDrawHide(playerid,PlayerTextdraws[playerid][textdraw_statusproducto][0]);
			PlayerTextDrawHide(playerid,PlayerTextdraws[playerid][textdraw_statusproducto][1]);
			PlayerTextDrawHide(playerid,PlayerTextdraws[playerid][textdraw_statusproducto][2]);
			PlayerTextDrawHide(playerid,PlayerTextdraws[playerid][textdraw_statusproducto][3]);
		}
	}
	return 1;
}
funcion DeleteObjetoFromPiso(id)
{
	DestroyDynamicObject(PRODUCTORIADO[id][OBJETO]);
	DestroyDynamic3DTextLabel(PRODUCTORIADO[id][LABEL]);
	Iter_Remove(ObjetosTirados, id);
	return 1;
}
funcion Descansar(playerid)
{
	Add_cansancio(playerid,0.5);
	if(CHARACTER_INFO[playerid][CANSANCIO] >= 99.0)
	{
		MensajesAyuda(playerid,"Te has recuperado ya puedes seguir con tus labores");
		ClearAnimations(playerid);
		Descansando[playerid]=false;
		KillTimer(DescansarTimer[playerid]);
	}
	return 1;
}
funcion ResetMineID(mineid)
{

	new randa=random(2);
    switch(randa)
    {
    	case 0:OBJETO_MINA[mineid][ID] = CreateDynamicObject(905, OBJETO_MINA[mineid][PosX],OBJETO_MINA[mineid][PosY],OBJETO_MINA[mineid][PosZ],0,0,0, .worldid = -1, .interiorid = -1);
    	case 1:OBJETO_MINA[mineid][ID] = CreateDynamicObject(2936, OBJETO_MINA[mineid][PosX],OBJETO_MINA[mineid][PosY],OBJETO_MINA[mineid][PosZ],0,0,0, .worldid = -1, .interiorid = -1);
    	case 2:OBJETO_MINA[mineid][ID] = CreateDynamicObject(2936, OBJETO_MINA[mineid][PosX],OBJETO_MINA[mineid][PosY],OBJETO_MINA[mineid][PosZ],0,0,0, .worldid = -1, .interiorid = -1);
    }
    switch(OBJETO_MINA[mineid][MINERAL_TYPE])
    {
    	case MINERAL_GRANITO: format(string2,sizeof(string2),"Granito");
    	case MINERAL_COBRE: format(string2,sizeof(string2),"Cobre");
    	case MINERAL_HIERRO: format(string2,sizeof(string2),"Hierro");
    	case MINERAL_PLATA: format(string2,sizeof(string2),"Plata");
    }
	
	OBJETO_MINA[mineid][LABEL]=CreateDynamic3DTextLabel(string2, 0xFFFF0080,OBJETO_MINA[mineid][PosX],OBJETO_MINA[mineid][PosY],OBJETO_MINA[mineid][PosZ]+0.5, 30.0, .testlos = false, .worldid = -1);

	OBJETO_MINA[mineid][STRACTING]=false;
	OBJETO_MINA[mineid][STRAC_VALID]=false;
	Iter_Add(Objetos_Mina, mineid);
	return 1;
}
funcion Minar(playerid)
{	
	COUT_MINE_PLAYER[playerid]=COUT_MINE_PLAYER[playerid]+10;
	new stringa[58],stringa2[10];

    switch(OBJETO_MINA[ STRATIG_MINE_ID[playerid] ][MINERAL_TYPE])
    {
    	case MINERAL_GRANITO: format(stringa2,sizeof(stringa2),"Granito");
    	case MINERAL_COBRE: format(stringa2,sizeof(stringa2),"Cobre");
    	case MINERAL_HIERRO: format(stringa2,sizeof(stringa2),"Hierro");
    	case MINERAL_PLATA: format(stringa2,sizeof(stringa2),"Plata");
    }

	format(stringa,sizeof(stringa),"~n~~n~~n~~n~~y~~h~Estrayendo %s~n~..~g~~h~%d %",stringa2,COUT_MINE_PLAYER[playerid]);
	GameTextForPlayer(playerid,stringa,450,3);
	if(COUT_MINE_PLAYER[playerid] >= 100)
	{
		ResetMineForPlayer(playerid);
		return 1;
	}
	return 1;
}
ResetMineForPlayer(playerid)
{
	DestroyDynamic3DTextLabel(OBJETO_MINA[ STRATIG_MINE_ID[playerid] ][LABEL]);
	DestroyDynamicObject(OBJETO_MINA[ STRATIG_MINE_ID[playerid] ][ID]);
	Iter_Remove(ObjetosTirados, STRATIG_MINE_ID[playerid]);
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
	SetPlayerAttachedObject(playerid, 2, 905, 5, 0.105, 0.086, 0.22, -80.3, 3.3, 28.7, 0.35, 0.35, 0.35);
	COUT_MINE_PLAYER[playerid]=0;
	OBJETO_MINA[ STRATIG_MINE_ID[playerid] ][STRAC_VALID]=true;
	KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][22]);
	PLAYER_TEMP[playerid][pt_TIMERS][23]=SetTimerEx("DebugResetMine_player",45000,true,"d",playerid); 
	TogglePlayerControllable(playerid, 1);
	SetTimerEx("ResetMineID",60000,false,"d",STRATIG_MINE_ID[playerid]);

	new stringa2[56];

    switch(OBJETO_MINA[ STRATIG_MINE_ID[playerid] ][MINERAL_TYPE])
    {
    	case MINERAL_GRANITO: format(stringa2,sizeof(stringa2),"Lleva el mineral: ~y~~h~'Granito' ~w~a la procesadora");
    	case MINERAL_COBRE: format(stringa2,sizeof(stringa2),"Lleva el mineral: ~y~~h~'Cobre' ~w~a la procesadora");
    	case MINERAL_HIERRO: format(stringa2,sizeof(stringa2),"Lleva el mineral: ~y~~h~'Hierro' ~w~a la procesadora");
    	case MINERAL_PLATA: format(stringa2,sizeof(stringa2),"Lleva el mineral: ~y~~h~'Plata' ~w~a la procesadora");
    }

	MensajesAyuda(playerid,stringa2);
	return 1;
}
funcion DebugResetMine_player(playerid)
{

	new stringa2[70];
	new paga=50+random(30);
	
	new levelduh = Get_Work_Level(playerid,WORK_MINER);
	if(levelduh==0) levelduh=1;
	levelduh=levelduh*100;

    switch(OBJETO_MINA[ STRATIG_MINE_ID[playerid] ][MINERAL_TYPE])
    {
    	case MINERAL_GRANITO: format(stringa2,sizeof(stringa2),"Ganaste: ~g~ %d + (%d)~w~ por extraer el mineral de: ~y~Granito",paga,levelduh);
    	case MINERAL_COBRE: format(stringa2,sizeof(stringa2),"Ganaste: ~g~ %d + (%d)~w~ por extraer el mineral de: ~y~Cobre",paga,levelduh);
    	case MINERAL_HIERRO: format(stringa2,sizeof(stringa2),"Ganaste: ~g~ %d + (%d)~w~ por extraer el mineral de: ~y~Hierro",paga,levelduh);
    	case MINERAL_PLATA: format(stringa2,sizeof(stringa2),"Ganaste: ~g~ %d + (%d)~w~ por extraer el mineral de: ~y~Plata",paga,levelduh);
    }
    MensajesAyuda(playerid,stringa2);
    PLAYER_SKILLS[playerid][WORK_MINER] ++;
	GivePlayerCash(playerid,paga+levelduh);
    Update_Work_Level(playerid,WORK_MINER);

	KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][23]);
	ClearAnimations(playerid);
	ApplyAnimation(playerid, "CARRY", "putdwn05", 4.1, 0, 1, 1, 0, 0, 1);
	ApplyAnimation(playerid, "CARRY", "putdwn05", 4.1, 0, 1, 1, 0, 0, 1);
	COUT_MINE_PLAYER[playerid]=0;
	ISMINING_PLAYER[playerid]=false;
	STRATIG_MINE_ID[playerid]=-1;
	RemovePlayerAttachedObject(playerid,2);
	PLAYER_TEMP[playerid][pt_TIMERS][24]=SetTimerEx("ClearAnims_",1000,false,"d",playerid); 
	return 1;
}
funcion ClearAnims_(playerid)
{
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	ClearAnimations(playerid);	
	return 1;
}

ShowTaller(playerid, funciona)
{
	for(new i=0; i <= 4 ; i++) PlayerTextDrawShow(playerid,PlayerTextdraws[playerid][textdraw_taller][i]);
	SelectTextDraw(playerid,0xFFFF0080);
	new string[200];
	PLAYER_TALLER[playerid][FUNCION] = funciona;
	PLAYER_TALLER[playerid][OPEN_F] = true;
	switch(funciona)
	{
		case 1:
		{
			format(string,sizeof(string),"Reparar  $~g~ 5.000");
			PlayerTextDrawSetString(playerid,PlayerTextdraws[playerid][textdraw_taller][2], string);
			format(string,sizeof(string),"Colores");
			PlayerTextDrawSetString(playerid,PlayerTextdraws[playerid][textdraw_taller][4], string);
			format(string,sizeof(string),"Salir");
			PlayerTextDrawSetString(playerid,PlayerTextdraws[playerid][textdraw_taller][3], string);
		}
		case 2:
		{
			format(string,sizeof(string),"Color primario  $~g~ 2.000");
			PlayerTextDrawSetString(playerid,PlayerTextdraws[playerid][textdraw_taller][2], string);
			format(string,sizeof(string),"Color segundario  $~g~ 2.000");
			PlayerTextDrawSetString(playerid,PlayerTextdraws[playerid][textdraw_taller][4], string);
			format(string,sizeof(string),"Atras");
			PlayerTextDrawSetString(playerid,PlayerTextdraws[playerid][textdraw_taller][3], string);
		}
	}
	return 1;
}

HideTaller(playerid)
{
	for(new i=0; i <= 4 ; i++) PlayerTextDrawHide(playerid,PlayerTextdraws[playerid][textdraw_taller][i]);
	CancelSelectTextDraw(playerid);
	PLAYER_TALLER[playerid][FUNCION] = 0;
	PLAYER_TALLER[playerid][OPEN_F] = false;
	return 1;
}
StartPesca(playerid)
{
	PLAYER_TEMP[playerid][pt_PESCAR]=true;
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][textdraw_pesca][3]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][textdraw_pesca][4]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][textdraw_pesca][5]);

	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][textdraw_pesca][0]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][textdraw_pesca][1]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][textdraw_pesca][2]);
	ApplyAnimation(playerid, "PED", "ARRESTGUN", 4.1, false, false, false, true, 0, false);
	ApplyAnimation(playerid, "PED", "ARRESTGUN", 4.1, false, false, false, true, 0, false);
	SetPlayerAttachedObject(playerid,9,18632,5,0.064998,0.032000,0.016000,27.100023,-33.200016,-47.800014,1.000000,1.000000,1.000000,0,0);
	KillTimer(TIMER_PESCAR[playerid]);
	TIMER_PESCAR[playerid] = SetTimerEx("CapturarPescado",20000, false, "d", playerid);
	return 1;
}
funcion CapturarPescado(playerid)
{
	for(new i = 0; i != sizeof BOYAS_PESCADOR; i ++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 50.0, BOYAS_PESCADOR[i][xXx], BOYAS_PESCADOR[i][yYy], BOYAS_PESCADOR[i][zZz]))
		{
			if(!PLAYER_WORKS[playerid][WORK_PESCADOR]) return SendClientMessage(playerid, -1, "{00FF80}No eres pescador."), HideCapturarPes(playerid);
			if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_PESCADOR ) return MensajesAyuda(playerid,"Debes estar en servicio como pescador"), HideCapturarPes(playerid);
			new Float:Posta[3];
			GetPlayerPos(playerid,Posta[0],Posta[1],Posta[2]);
			if(Posta[2] < 0)
			{
				return SendClientMessage(playerid,-1,"Debes estar encima de un bote"), HideCapturarPes(playerid);
			}

			new Float:pX, Float:pY, Float:pZ, Float:vX, Float:vY, Float:vZ, Found = 0, vid = 0;
		    GetPlayerPos(playerid, pX, pY, pZ);
		    while(vid < MAX_VEHICLES && !Found)
		    {
		        vid++, GetVehiclePos(vid, vX, vY, vZ);
		        if((floatabs(pX-vX) < 7.0) && (floatabs(pY-vY) < 7.0) && (floatabs(pZ-vZ) < 7.0) && (vid != GetPlayerVehicleID(playerid)))
		        {
		        	new randomperc=random(5);
		        	switch(randomperc)
		        	{
		        		case 0: 
		        		{
		        			Pescar(playerid);
		        		}
		        		case 1: 
		        		{
		        			Pescar(playerid);	
		        		}
		        		case 2: 
		        		{
		        			Pescar(playerid);
		        		}
		        		case 3: 
		        		{
		        			Pescar(playerid);
		        		}
		        		case 4: 
		        		{
		        			Pescar(playerid);
		     			}
		     			case 5:
		     			{
		     				new string[90];
		        			PESCADOS_PLAYER[playerid][Carnadas]--;
		        			format(string,sizeof(string),"El pescado se llevo la carnada, te quedan %d carnadas",PESCADOS_PLAYER[playerid][Carnadas]);
		        			MensajesAyuda(playerid,string);
		        			HideCapturarPes(playerid);
		     			}
		        	}
					
		        }
		    }
			
		}
	}
	return 1;
}
Pescar(playerid)
{
	PLAYER_TEMP[playerid][pt_PESCAR]=true;
	PLAYER_TEMP[playerid][pt_PUEDE_PESCAR]=true;
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][textdraw_pesca][1]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][textdraw_pesca][2]);
	PLAYER_TEMP[playerid][pt_PESCA] = 25;
	PLAYER_TEMP[playerid][pt_PESCO] = 5;
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][textdraw_pesca][3]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][textdraw_pesca][4]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][textdraw_pesca][5]);
	KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][28]);
	PLAYER_TEMP[playerid][pt_TIMERS][28]=SetTimerEx("Pescando",1000,true,"d",playerid);
	return 1;
}
funcion Pescando(playerid)
{
	new i=-1;
	i = IsPlayerinNearBoya(playerid);

	if(i != -1)
	{	
		MensajesAyuda(playerid,"~r~~h~~h~Fallaste al tomar el pescado");
		HideCapturarPes(playerid);
	}
 
	new Float:Posta[3];
	GetPlayerPos(playerid,Posta[0],Posta[1],Posta[2]);
	if(Posta[2] < 0)
	{
		SendClientMessage(playerid,-1,"Debes estar encima de un bote");
		HideCapturarPes(playerid);
	}

	PLAYER_TEMP[playerid][pt_PESCA] = PLAYER_TEMP[playerid][pt_PESCA] - random(25);

	

	if(PLAYER_TEMP[playerid][pt_PESCA] <= 0)
	{
		new string[90];
		PESCADOS_PLAYER[playerid][Carnadas]--;
		format(string,sizeof(string),"El pescado se llevo la carnada, te quedan %d carnadas",PESCADOS_PLAYER[playerid][Carnadas]);
		MensajesAyuda(playerid,string);
		MensajesAyuda(playerid,"~r~~h~~h~Fallaste al tomar el pescado");
		HideCapturarPes(playerid);
	}

	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_pesca][4], floatadd(523.324218, floatdiv(PLAYER_TEMP[playerid][pt_PESCA], 1.153725)), 0.000000);
	PlayerTextDrawShow(playerid,PlayerTextdraws[playerid][textdraw_pesca][4]);
	return 1;
}
HideCapturarPes(playerid)
{
	PLAYER_TEMP[playerid][pt_PESCAR]=false;
	PLAYER_TEMP[playerid][pt_PUEDE_PESCAR]=false;
	PLAYER_TEMP[playerid][pt_PESCA]=30;
	ClearAnimations(playerid);
	KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][28]);
	for(new i=0; i <= 5; i++)  PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][textdraw_pesca][i]);

	SetTimerEx("Hide_4",500,false,"d",playerid); 
	return 1;
}
funcion Hide_4(playerid)
{
	return PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][textdraw_pesca][4]);
}

ShowPecesVender(playerid)
{
	new dialog[2671],string[200];
    format(dialog, sizeof dialog, "{FFFFFF}Pescado\tPrecio\tTienes\tGanas\n");
	format(string, sizeof(string), "{%s}Bacalao \t{ffffff}| \"300\"\t| %d\t| ${00E100}\"%d\"\n", Randomcolor(),PESCADOS_PLAYER[playerid][Bacalao],PESCADOS_PLAYER[playerid][Bacalao] * 300);
	strcat(dialog, string);
	format(string, sizeof(string), "{%s}Sardina \t{ffffff}| \"150\"\t| %d\t| ${00E100}\"%d\"\n", Randomcolor(),PESCADOS_PLAYER[playerid][Sardina],PESCADOS_PLAYER[playerid][Sardina] * 150);
	strcat(dialog, string);
	format(string, sizeof(string), "{%s}Anchoa \t{ffffff}| \"500\"\t| %d\t| ${00E100}\"%d\"\n", Randomcolor(),PESCADOS_PLAYER[playerid][Anchoa],PESCADOS_PLAYER[playerid][Anchoa] * 500);
	strcat(dialog, string);
	format(string, sizeof(string), "{%s}Atun \t{ffffff}| \"400\"\t| %d\t| ${00E100}\"%d\"\n", Randomcolor(),PESCADOS_PLAYER[playerid][Atun],PESCADOS_PLAYER[playerid][Atun] * 400);
	strcat(dialog, string);
	format(string, sizeof(string), "{%s}Salmon \t{ffffff}| \"800\"\t| %d\t| ${00E100}\"%d\"\n", Randomcolor(),PESCADOS_PLAYER[playerid][Salmon],PESCADOS_PLAYER[playerid][Salmon] * 800);
	strcat(dialog, string);
    ShowPlayerDialog(playerid, DIALOG_VENDER_PESCADOS, DIALOG_STYLE_TABLIST_HEADERS, "              VENDER PESCADO", dialog, "Vender", "Cancelar");
	return 1;
}
public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
	if(InfoCorredor[playerid][ESATROPELLAR]==true && PLAYER_TEMP[playerid][pt_EVENTO] == true)
	{
		if(IsPlayerInAnyVehicle(playerid))
		{
			if(newkeys &  KEY_ACTION)
	        {
	            if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	            {
	                new vehicleid = GetPlayerVehicleID(playerid);
	                new Float:angle;
	                GetVehicleZAngle(vehicleid, angle);
	                SetVehicleZAngle(vehicleid, floatsub(angle, 180));
	                new Float:posqe[3];
	                GetVehicleVelocity(vehicleid, posqe[0], posqe[1], posqe[2]);
	                SetVehicleVelocity(vehicleid, floatmul(posqe[0], -1), floatmul(posqe[1], -1), posqe[2]);
	            }
	        }
	        if(RELEASED(KEY_FIRE) || RELEASED(KEY_WALK))
	        {
	            new vehicleid = GetPlayerVehicleID(playerid);
	            new Float:Xv, Float:Yv, Float:Zv;//, Float:absV;
	            GetVehicleVelocity(vehicleid, Xv, Yv, Zv);
	            new Float:Zangle;//, Float:mp = floatdiv(GetTickCount() - vJumpAngular[playerid], 3000.0);
	            //if(mp > 4.0) mp = 2.0;
	            GetVehicleZAngle(vehicleid, Zangle);
	            Xv = (0.09 * floatsin(Zangle, degrees) * 5.0);
	            Yv = (0.09 * floatcos(Zangle, degrees) * 5.0);
	            SetVehicleAngularVelocity(vehicleid, Yv, Xv, 0);
	            Xv = (0.25 * floatcos(Zangle, degrees) * 5.0);
	            Yv = (-0.25 * floatsin(Zangle, degrees) * 5.0);
	            SetVehicleVelocity(vehicleid, Yv, Xv, 0);
	            new Float:angle;
	            GetVehicleZAngle(GetPlayerVehicleID(playerid), angle);
	            SetVehicleZAngle(GetPlayerVehicleID(playerid), angle);
	            SetVehicleAngularVelocity(GetPlayerVehicleID(playerid), 0.0, 0.0, 0.0);
	        }
	        if(newkeys & KEY_SUBMISSION)
		    {
		        new VehicleID, Float:X, Float:Y, Float:Z, Float:Angle; GetPlayerPos(playerid, X, Y, Z); VehicleID = GetPlayerVehicleID(playerid);
		        GetVehicleZAngle(VehicleID, Angle); SetVehiclePos(VehicleID, X, Y, Z); SetVehicleZAngle(VehicleID, Angle);
		        GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~b~Vehiculo volteado", 500, 3);
		    }
		}
	}


	if(PRESSED(KEY_WALK))
	{
		if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
		{
	    	for(new i = 0; i != sizeof BOYAS_PESCADOR; i ++)
			{
				if(IsPlayerInRangeOfPoint(playerid, 50.0, BOYAS_PESCADOR[i][xXx], BOYAS_PESCADOR[i][yYy], BOYAS_PESCADOR[i][zZz]))
				{
					if(PLAYER_TEMP[playerid][pt_PESCAR] == false) return 1;
					if(PLAYER_TEMP[playerid][pt_PUEDE_PESCAR] == false ) return 1;
					if(!PLAYER_WORKS[playerid][WORK_PESCADOR]) return SendClientMessage(playerid, -1, "{00FF80}No eres pescador."), HideCapturarPes(playerid);
					if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_PESCADOR ) return MensajesAyuda(playerid,"Debes estar en servicio como pescador"), HideCapturarPes(playerid);
					if(Equiped_Inventary[playerid][TYPE] != 11) return MensajesAyuda(playerid,"Debes tener equipado una caña de pescar");
					if(Equiped_Inventary[playerid][TYPE] == 11 && Equiped_Inventary[playerid][ESTADO] == 0) return MensajesAyuda(playerid,"La cana de pescar ya vencio");
					if(Equiped_Inventary[playerid][TYPE] == 11 && Equiped_Inventary[playerid][ESTADO] >= 1)
					{
						PLAYER_TEMP[playerid][pt_PESCA]=PLAYER_TEMP[playerid][pt_PESCA] + random(5);
						if(PLAYER_TEMP[playerid][pt_PESCA] >= 100)
						{
							
							HideCapturarPes(playerid);
							new randompes=random(5),string[80];
							PLAYER_TEMP[playerid][pt_PESCO] --;
							PESCADOS_PLAYER[playerid][Carnadas]--;
							switch(randompes)
							{
								case 0: format(string,sizeof(string),"~w~Genial has pescado un ~y~Bacalao.",PLAYER_TEMP[playerid][pt_PESCO]), PESCADOS_PLAYER[playerid][Bacalao]++;
								case 1: format(string,sizeof(string),"~w~Genial has pescado una ~y~Sardina.",PLAYER_TEMP[playerid][pt_PESCO]), PESCADOS_PLAYER[playerid][Sardina]++;
								case 2: format(string,sizeof(string),"~w~Genial has pescado una ~y~Anchoa.",PLAYER_TEMP[playerid][pt_PESCO]), PESCADOS_PLAYER[playerid][Anchoa]++;
								case 3: format(string,sizeof(string),"~w~Genial has pescado un ~y~Atun.",PLAYER_TEMP[playerid][pt_PESCO]), PESCADOS_PLAYER[playerid][Atun]++;
								case 4: format(string,sizeof(string),"~w~Genial has pescado un ~y~Salmon.",PLAYER_TEMP[playerid][pt_PESCO]), PESCADOS_PLAYER[playerid][Salmon]++;
							}
							MensajeAyuda_4(playerid,string);

 							MensajesAyuda(playerid,"Lleva el pescado al proveedor para venderlo");
 							format(string,sizeof(string),"Te quedan '%d' carnadas",PESCADOS_PLAYER[playerid][Carnadas]);
							MensajesAyuda(playerid,string);
							return 1;
						}
						PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_pesca][4], floatadd(523.324218, floatdiv(PLAYER_TEMP[playerid][pt_PESCA], 1.153725)), 0.000000);
						PlayerTextDrawShow(playerid,PlayerTextdraws[playerid][textdraw_pesca][4]);
					}
				}
			}
		}
	}
	else if(PRESSED(KEY_YES))
	{
		if(PLAYER_TEMP[playerid][pt_VIENDO_NOVE]==true)
		{
			PLAYER_TEMP[playerid][pt_VIENDO_NOVE]=false;
			for(new i=0; i <= 18; i++)
		    {
		    	TextDrawHideForPlayer(playerid, Textdraws[textdraw_actualizaciones][i]);
		    }
		}
		for(new i = 0; i < sizeof POSPEAJES; i++)
    	{
    		if(IsPlayerInRangeOfPoint(playerid, 4, POSPEAJES[i][xXx],POSPEAJES[i][yYy],POSPEAJES[i][zZz]))
    		{
    			PEAJEID[playerid]=i;
    			ShowPlayerDialog(playerid,DIALOG_PEAJE,DIALOG_STYLE_MSGBOX,"Peaje","Pagar peaje costo: $5","Seguir","Cancelar");
    		}
    	}
    	if(IsPlayerInRangeOfPoint(playerid, 2, 2890.0784,-1986.6405,5.2189))
    	{
    		ShowPlayerDialog(playerid,DIALOG_COMPRAR_CANA_PESCAR,DIALOG_STYLE_MSGBOX,"{D5230B}Caña de pescar", "{FFFFFF}Comprar una caña de pescar?\n\nCosto: {07B605}$ 100", "Aceptar", "Cancelar");
    	}
    	if(IsPlayerInRangeOfPoint(playerid, 2, 2889.70703, -1980.50537, 5.56910))
    	{
    		ShowPlayerDialog(playerid,DIALOG_COMPRAR_CARNADAS,DIALOG_STYLE_MSGBOX,"{D5230B}Carnadas", "{FFFFFF}Comprar carnadas?\n\nCosto: {07B605}$ 350", "Aceptar", "Cancelar");
    	}
    	if(IsPlayerInRangeOfPoint(playerid, 2, 422.4710, -862.5123, 26.3487))
    	{
    		ShowPlayerDialog(playerid,DIALOG_COMPRAR_MASA,DIALOG_STYLE_MSGBOX,"{D5230B}Masa para picar", "{FFFFFF}Comprar masa para picar?\n\nCosto: {07B605}$ 500", "Aceptar", "Cancelar");
    	}
    	if(IsPlayerInRangeOfPoint(playerid, 2, 2816.2725,-1926.3018,-1.6366))
    	{
    		ShowPecesVender(playerid);
    	}
    	//Pescador
    	if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
		{
	    	for(new i = 0; i != sizeof BOYAS_PESCADOR; i ++)
			{
				if(IsPlayerInRangeOfPoint(playerid, 50.0, BOYAS_PESCADOR[i][xXx], BOYAS_PESCADOR[i][yYy], BOYAS_PESCADOR[i][zZz]))
				{
					if(!PLAYER_WORKS[playerid][WORK_PESCADOR]) return SendClientMessage(playerid, -1, "{00FF80}No eres pescador.");
					if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_PESCADOR ) return MensajesAyuda(playerid,"Debes estar en servicio como pescador");
					new Float:Posta[3];
					GetPlayerPos(playerid,Posta[0],Posta[1],Posta[2]);
					if(Posta[2] < 0)
					{
						return SendClientMessage(playerid,-1,"Debes estar encima de un bote");
					}
	
					new Float:pX, Float:pY, Float:pZ, Float:vX, Float:vY, Float:vZ, Found = 0, vid = 0;
				    GetPlayerPos(playerid, pX, pY, pZ);
				    while(vid < MAX_VEHICLES && !Found)
				    {
				        vid++, GetVehiclePos(vid, vX, vY, vZ);
				        if((floatabs(pX-vX) < 7.0) && (floatabs(pY-vY) < 7.0) && (floatabs(pZ-vZ) < 7.0) && (vid != GetPlayerVehicleID(playerid)))
				        {
				        	if(PESCADOS_PLAYER[playerid][Carnadas] == 0) return MensajesAyuda(playerid,"No te quedan carnadas");
				        	if(Equiped_Inventary[playerid][TYPE] != 11) return MensajesAyuda(playerid,"Debes tener equipado una caña de pescar");
							if(Equiped_Inventary[playerid][TYPE] == 11 && Equiped_Inventary[playerid][ESTADO] == 0) return MensajesAyuda(playerid,"La cana de pescar ya vencio");
							StartPesca(playerid);
				        }
				    }
					
				}
			}
		}
		if(IsPlayerInRangeOfPoint(playerid,1.3,2635.6230, -1524.6859, 1402.9672))
		{
			if(ISMINING_PLAYER[playerid]==true)
			{
				DebugResetMine_player(playerid);
			}
		}
		if(IsPlayerInRangeOfPoint(playerid, 2, 1380.4633, -1296.6357, 20.8112))
		{
			if(PI[playerid][P_SHOP_WEAPON] == true) return HidePlayerTextdrawsAmmu(playerid);
			if(PI[playerid][P_SHOP_SKIN] == true) return HidePlayerTextdrawsSkin(playerid);
			PLAYER_TEMP[playerid][pt_DIALOG_RESPONDED] = false;
			if(ACCOUNT_INFO[playerid][ac_ASESINATOS] >= 7) return SendClientMessage(playerid,-1,""R"* No puedes comprar armas aqui porque tienes mala reputacion.");
			ShowPlayerDialog(playerid,DIALOG_SEL_TYPE_BUY_AMMO,DIALOG_STYLE_LIST,"Ammu nation","Comprar armas\nComprar Municion\nSkins para armas", "Aceptar", "Cerrar");
			return 1;
		}
		foreach(new i : Objetos_Mina)
		{
			if(IsPlayerInRangeOfPoint(playerid, 2, OBJETO_MINA[i][PosX],OBJETO_MINA[i][PosY],OBJETO_MINA[i][PosZ]))
    		{
    			if(OBJETO_MINA[i][STRAC_VALID]==false)
    			{
    				if(Equiped_Inventary[playerid][TYPE] != 12) return MensajesAyuda(playerid,"Debes tener equipado una masa para picar");
	    			if(ISMINING_PLAYER[playerid]==true) return MensajesAyuda(playerid,"Ya estas estrayendo un mineral");
	    			if(OBJETO_MINA[i][STRACTING]==true) return MensajesAyuda(playerid,"Alguien mas esta estrayendo el mineral");
	    			if(!PLAYER_WORKS[playerid][WORK_MINER]) return SendClientMessage(playerid, -1, "{00FF80}No eres minero, el trabajo se consigue dentro de la mineria.");
					if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_MINER ) return MensajesAyuda(playerid,"Debes estar en servicio como minero");

					if (gettime() - 4 < PLAYER_MINE[playerid]) return 1;
				 	PLAYER_MINE[playerid] = gettime();
				 	COUT_MINE_PLAYER[playerid]=0;
					ISMINING_PLAYER[playerid]=true;
	    			STRATIG_MINE_ID[playerid]=i;
					
					TogglePlayerControllable(playerid, 0);
					SetPlayerArmedWeapon(playerid, 0);
					
					ApplyAnimation(playerid,"BASEBALL","Bat_4",4.1,1,0,0,1,11000,1);
					ApplyAnimation(playerid,"BASEBALL","Bat_4",4.1,1,0,0,1,11000,1);

					PLAYER_TEMP[playerid][pt_TIMERS][22]=SetTimerEx("Minar",1000,true,"d",playerid);
					GameTextForPlayer(playerid,"~n~~n~~n~~n~~y~~h~Estrayendo..",1000,3);
					return 1;
				}
    		}
		}
	}
 	if(PRESSED(KEY_YES))
    {
 

    	for(new i = 0; i < sizeof GPS_HELP; i ++)
		{
	 		if(IsPlayerInRangeOfPoint(playerid, 2, GPS_HELP[i][atm_X],GPS_HELP[i][atm_Y],GPS_HELP[i][atm_Z]))
    		{
    			if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_JAIL || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1, "{00FF80}Ahora no puedes usar esto.");
    			Auto_SendPlayerAction(playerid, "mira el GPS.");
				ShowDialog(playerid, DIALOG_PLAYER_GPS_TURISTA);
    		}	
	 	}
	 	for(new i = 0; i < sizeof FONE_PUBLICS; i ++)
		{
			if(IsPlayerInRangeOfPoint(playerid, 2, FONE_PUBLICS[i][atm_X],FONE_PUBLICS[i][atm_Y],FONE_PUBLICS[i][atm_Z]))
    		{
    			if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_JAIL || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1, "{00FF80}Ahora no puedes usar esto.");
				if(PLAYER_TEMP[playerid][pt_PLAYER_IN_CALL]) SendClientMessageEx(playerid, -1, "{00FF80}Estás en una llamada.");
				Auto_SendPlayerAction(playerid, "mira el teléfono.");
				ShowDialog(playerid, DIALOG_PHONE_PUBLIC);
    		}
		}
		for(new i = 0; i < sizeof ATM_BANK; i ++)
		{
			if(IsPlayerInRangeOfPoint(playerid, 2, ATM_BANK[i][atm_X],ATM_BANK[i][atm_Y],ATM_BANK[i][atm_Z]))
    		{
				callcmd::cajero(playerid,"");
			}
		}
    	for(new i = 0; i < sizeof POSTALLERES; i++)
    	{
    		if(IsPlayerInRangeOfPoint(playerid, 2, POSTALLERES[i][xXx],POSTALLERES[i][yYy],POSTALLERES[i][zZz]))
    		{
    			PassengerCheck(playerid);
    			if(IsPlayerInAnyVehicle(playerid))
    			{
    				ShowTaller(playerid, 1);
    			}
    		}
    	}

    	//=====================================================================
    	for(new i = 0; i < sizeof COMPRARENCONCESONARIO; i++)
		{
			if(IsPlayerInRangeOfPoint(playerid,1,COMPRARENCONCESONARIO[i][xXx],COMPRARENCONCESONARIO[i][yYy],COMPRARENCONCESONARIO[i][zZz]))
			{
		    	if(!PLAYER_TEMP[playerid][P_SHOPCAR])
				{
					ShowBuyVehicle(playerid, COMPRARENCONCESONARIO[i][CONCEID]);
				}
			}
		}
    	//=====================================================================
  		if(InNegocio[playerid] != INVALID_EMPRESA_ID)
		{
			for(new i = 0; i < sizeof COMPRARPRODUCTOPOS; i++)
			{
				if(IsPlayerInRangeOfPoint(playerid,1,COMPRARPRODUCTOPOS[i][xXx],COMPRARPRODUCTOPOS[i][yYy],COMPRARPRODUCTOPOS[i][zZz]))
				{
					new id=InNegocio[playerid];
					switch(NEGOCIO[id][TIPONEGOCIO])
					{
						case 1: ShowProductos247(playerid, id);
						case 2: ShowProductosBurGuerShot(playerid, id);
						case 3: ShowProductosPizza(playerid, id);
						case 4: ShowProductosCluckin(playerid, id);
						case 5: ShowProductosHotel(playerid, id);
						case 13: ShowProductosFarmacia(playerid, id);
					}
				}
			}
		}
		//Entrar a la habitacion de hotel
		if(IsPlayerInRangeOfPoint(playerid,2,2227.8535, -1150.3351, 1028.7958))
		{
			if(Equiped_Inventary[playerid][TYPE] != 30) return MensajesAyuda(playerid,"Debes tener equipado una llave de hotel para entrar a la habitacion");
			if(Equiped_Inventary[playerid][TYPE] == 30 && Equiped_Inventary[playerid][ESTADO] == 0) return MensajesAyuda(playerid,"La llave ya vencio sus usos, compra otra llave");
			if(Equiped_Inventary[playerid][TYPE] == 30 && Equiped_Inventary[playerid][ESTADO] >= 1)
			{
				MensajesAyuda(playerid,"Entraste a la habitacion de hotel, acercate a la cama y oprime 'Y' para descansar");
				SetPlayerPosEx(playerid,1512.3088, -1558.0371, 3480.7085, 400, 0, GetPlayerVirtualWorld(playerid),true);
				new DB_Query[256];
				Equiped_Inventary[playerid][ESTADO]--;
				format(DB_Query, sizeof(DB_Query), "UPDATE `INVENTARIO` SET `ESTADO` = '%d' WHERE `ID` = '%d' AND PLAYER = '%d'",Equiped_Inventary[playerid][ESTADO],IVENTARIOID[playerid],ACCOUNT_INFO[playerid][ac_ID]);
				db_query(Database, DB_Query);
				UpdateStatusProductoNegocio(playerid);
			}	
		}
		if(IsPlayerInRangeOfPoint(playerid,2,1513.9270, -1556.3319, 3480.4951))
		{
			new id=InNegocio[playerid];
			if(id==-1)id=1;
			SetPlayerPosEx(playerid,2227.8535, -1150.3351, 1029.4027, 400, 	15 	,NEGOCIO[id][Mundo], true);//Devolver al lobby del hotel
		}
		for(new i = 0; i < sizeof POS_DORMIR; i++)
		{
			if(IsPlayerInRangeOfPoint(playerid,1,POS_DORMIR[i][xXx],POS_DORMIR[i][yYy],POS_DORMIR[i][zZz]))
			{
				if(Descansando[playerid]==false)
				{
					if(CHARACTER_INFO[playerid][CANSANCIO] >= 99.0) return MensajesAyuda(playerid,"No tienes cansancio por ahora");
					Descansando[playerid]=true;
					MensajesAyuda(playerid,"Para dejar de descansar oprime 'N'");
					ApplyAnimation(playerid,"INT_HOUSE","BED_In_R",4.1,0,0,0,1,0);
					ApplyAnimation(playerid,"INT_HOUSE","BED_In_R",4.1,0,0,0,1,0);
					DescansarTimer[playerid] = SetTimerEx("Descansar",1000,true,"i",playerid);
				}
			}
		}
		if(IsPlayerInRangeOfPoint(playerid,2,1241.8928,234.8473,598.6759) || IsPlayerInRangeOfPoint(playerid,2,1889.2452,-21.7584,639.2450))
		{
			new id=ENCASAVIP[playerid];
			if(id == -1) return SendClientMessage(playerid,-1,"Error");

			if(CASAVIP[id][CAJASTATUS] == 1)
			{
				new string[55];
				format(string,sizeof(string),"Caja fuerte: '$%s'",number_format_thousand(CASAVIP[id][CAJAFUERTE]));
				ShowPlayerDialog(playerid, DIALOG_CAJAFUERTECASAVIP, DIALOG_STYLE_LIST,string,"Retirar dinero\nGuardar dinero",">>","X"); 
			}
			else SendClientMessage(playerid,-1,"Caja fuerte cerrada");
		}
		
    }
	if(PRESSED(KEY_HANDBRAKE))
    {
    	if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
		{
	    	if(Equiped_Inventary[playerid][VALID_EQUIPED]==true)
		 	{
		 		if(InNegocio[playerid] != -1) return MensajesAyuda(playerid,"No puedes tirar eso aca dentro");
		 		foreach(new i : ObjetosTirados)
		 		{
		 			if(i==-1) return 1;
		 			if(IsPlayerInRangeOfPoint(playerid,3,PRODUCTORIADO[i][POSX],PRODUCTORIADO[i][POSY],PRODUCTORIADO[i][POSZ]))
		 			{
		 				return MensajesAyuda(playerid,"No puedes tirar un objeto serca de otro alejate un poco");
		 			}
		 		}
			   	new DB_Query[256];
			    new id = Iter_Free(ObjetosTirados);
			    if(id==-1) return SendClientMessage(playerid,-1,"Ocurrio un error al tirar el objeto contacta con un administrador");
				//new id=DebugProductoSuelo;
				new Float:post[3];
				GetPlayerPos(playerid,post[0],post[1],post[2]);
				PRODUCTORIADO[id][POSX] = post[0];
				PRODUCTORIADO[id][POSY] = post[1];
				PRODUCTORIADO[id][POSZ] = post[2];
				PRODUCTORIADO[id][IDE_R] = IVENTARIOID[playerid];
				PRODUCTORIADO[id][TYPE] =  Equiped_Inventary[playerid][TYPE];
				PRODUCTORIADO[id][STATUS] =  Equiped_Inventary[playerid][ESTADO];
				format(string2,sizeof(string2),"~ %s ~",INVENTARIOPLAYER[ Equiped_Inventary[playerid][TYPE] ][NOMBRE]);
				PRODUCTORIADO[id][LABEL] = CreateDynamic3DTextLabel(string2,0xFFFFFFFF,post[0],post[1],post[2]-0.8,7.0, .worldid = -1);
				PRODUCTORIADO[id][OBJETO] =  CreateDynamicObject(INVENTARIOPLAYER[ Equiped_Inventary[playerid][TYPE] ][OBJETO], post[0],post[1],post[2]-0.9,-90.0, 0.0, 0.0, -1);
				HideOrShowTextdrawsNegocio(playerid, 1);
				format(DB_Query, sizeof(DB_Query), "DELETE FROM `INVENTARIO` WHERE `ID` = '%d' AND PLAYER = '%d'",IVENTARIOID[playerid],ACCOUNT_INFO[playerid][ac_ID]);
				db_query(Database, DB_Query);
				PRODUCTORIADO[id][TIMER] = SetTimerEx("DeleteObjetoFromPiso", 600000, false, "i",id);
				Equiped_Inventary[playerid][VALID_EQUIPED]=false;
				RemovePlayerAttachedObject(playerid, 9);
		 		Equiped_Inventary[playerid][TYPE]=0;
				Iter_Add(ObjetosTirados, id);
				return 1;
			}
		}
	}
	else if(PRESSED(KEY_WALK))
    {
		foreach(new i : ObjetosTirados)
		{
			if(i==-1) return 1;
	 		if(IsPlayerInRangeOfPoint(playerid,1.5,PRODUCTORIADO[i][POSX],PRODUCTORIADO[i][POSY],PRODUCTORIADO[i][POSZ]))
	 		{
	 			if(GetCountInventary(playerid) >= Max_Slots_For_Invetary) return MensajesAyuda(playerid,"El inventario esta lleno");

	 			if(Equiped_Inventary[playerid][VALID_EQUIPED]==true) return SendClientMessage(playerid,-1,"Guarda primero lo que tienes equipado para recojer el ojeto");
	 			KillTimer(PRODUCTORIADO[i][TIMER]);
	 			Equiped_Inventary[playerid][TYPE]= PRODUCTORIADO[i][TYPE];
	 			Equiped_Inventary[playerid][ESTADO]= PRODUCTORIADO[i][STATUS];
	 			Saved_Invetary[playerid]=Equiped_Inventary[playerid][TYPE];
				Equiped_Inventary[playerid][VALID_EQUIPED]=true;
				IVENTARIOID[playerid] = PRODUCTORIADO[i][IDE_R];
				DestroyDynamicObject(PRODUCTORIADO[i][OBJETO]);
				DestroyDynamic3DTextLabel(PRODUCTORIADO[i][LABEL]);
				AttachObjetoNegocio(playerid);


				switch(INVENTARIOPLAYER[ Equiped_Inventary[playerid][TYPE] ][TIPODECONSUMO])
				{
					case TYPE_WEAPON:
					{
						Equiped_Inventary[playerid][VALID_EQUIPED]=false;
						Equiped_Inventary[playerid][TYPE]=0;
						Equiped_Inventary[playerid][ESTADO]=0;
						Saved_Invetary[playerid]=0;
						IVENTARIOID[playerid]=0;
						MensajesAyuda(playerid,"Recojiste un arma, se agrego al inventario");
					}
					case TYPE_ACCESORIO:
					{
						Equiped_Inventary[playerid][VALID_EQUIPED]=false;
						Equiped_Inventary[playerid][TYPE]=0;
						Equiped_Inventary[playerid][ESTADO]=0;
						Saved_Invetary[playerid]=0;
						IVENTARIOID[playerid]=0;
						MensajesAyuda(playerid,"Recojiste un accesorio, se agrego al inventario");
					}
					case BEBIDA_24_7:
					{
						HideOrShowTextdrawsNegocio(playerid, 0);
						MensajesAyuda(playerid,"Oprime ~y~Y~w~ para consumir~n~Oprime ~y~N~w~ para dejar de consumir ~y~Click D~w~ para tirar");
					}
					case COMIDA_24_7:
					{
						HideOrShowTextdrawsNegocio(playerid, 0);
						MensajesAyuda(playerid,"Oprime ~y~Y~w~ para consumir~n~Oprime ~y~N~w~ para dejar de consumir ~y~Click D~w~ para tirar");
					}
					case TYPE_VENDAJE:
					{
						HideOrShowTextdrawsNegocio(playerid, 0);
						MensajesAyuda(playerid,"Oprime ~y~Y~w~ para vendarte~n~Oprime ~y~N~w~ para guardar ~y~Click D~w~ para tirar");
					}
					case TYPE_BOTIQUIN:
					{
						HideOrShowTextdrawsNegocio(playerid, 0);
						MensajesAyuda(playerid,"/Sanar~w~ para sanar un jugador ~y~Click D~w~ para tirar");
					}
					case TYPE_KITHERRAMIENTA:
					{
						HideOrShowTextdrawsNegocio(playerid, 0);
						MensajesAyuda(playerid,"Situate frente al vehiculo y oprime~y~ 'Y'~w~ para reparar el vehiculo");
					}
					case NO_CONSUMIBLE:
					{
						HideOrShowTextdrawsNegocio(playerid, 0);
						MensajeTime(playerid,"Oprime ~y~Y~w~ para consumir~n~Oprime ~y~N~w~ para dejar de consumir, ~y~Click D~w~ para tirar");
					}
					case CANA_PESCAR:
					{
						MensajeTime(playerid,"Recojiste una cana de pescar");
					}
					case MASA_PICAR:
					{
						MensajesAyuda(playerid,"Recojiste una para picar equipada");
					}
				}
				
				new GQuery[120];
				format( GQuery, sizeof( GQuery ), "INSERT INTO INVENTARIO (ID,PLAYER,TIPO,ESTADO) VALUES ('%d','%d','%d','%d')",PRODUCTORIADO[i][IDE_R],ACCOUNT_INFO[playerid][ac_ID],PRODUCTORIADO[i][TYPE],PRODUCTORIADO[i][STATUS]);
			   	db_query(Database, GQuery );
				
			   	Iter_Remove(ObjetosTirados, i);
				return 1;
	 		}
	 	}
    }
	if(PRESSED(KEY_YES))
	{

	 	if(Equiped_Inventary[playerid][VALID_EQUIPED]==true)
	 	{
	 		if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK) return MensajesAyuda(playerid,"No puedes usar eso ahora");
	 		if(IsPlayerInAnyVehicle(playerid)) return 1;
	 		switch(Equiped_Inventary[playerid][TYPE])
			{
				case 9:
				{
					if (gettime() - 4 < ANTIFLOODINVENTARY[playerid]) return 1;
			 		ANTIFLOODINVENTARY[playerid] = gettime();
			 		SendAndReduceInventary(playerid, Equiped_Inventary[playerid][TYPE] , INVENTARIOPLAYER[ Equiped_Inventary[playerid][TYPE] ][TIPODECONSUMO]);
			 		PUNTOS_BOTIQUIN[playerid]=PUNTOS_BOTIQUIN[playerid] + 10;
			 		if(PUNTOS_BOTIQUIN[playerid] > 100) PUNTOS_BOTIQUIN[playerid]=100;
					TextDrawTextSize(Jugador_Textdraws[ playerid ][textdraw_vendaje][1], floatadd(521.786804, floatdiv(PUNTOS_BOTIQUIN[playerid], 1.0728092)), 0.000000);
					TextDrawShowForPlayer(playerid,Jugador_Textdraws[playerid][textdraw_vendaje][0]);
					TextDrawShowForPlayer(playerid,Jugador_Textdraws[playerid][textdraw_vendaje][2]);
					TextDrawShowForPlayer(playerid,Jugador_Textdraws[playerid][textdraw_vendaje][1]);
					KillTimer(Timer_Vendaje[playerid]);
					Timer_Vendaje[playerid] = SetTimerEx("TimerVendaje", 5000, true, "d",playerid);
			 		return 1;
			 	}
			 	case 27:
			 	{
					if (gettime() - 4 < ANTIFLOODINVENTARY[playerid]) return SendClientMessage(playerid,-1,"Esperar un momento para volver a usar");
			 		ANTIFLOODINVENTARY[playerid] = gettime();

					if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendClientMessage(playerid, -1, "{00FF80}No estás depie.");
					new vehicleid = GetPlayerCameraTargetVehicle(playerid);
					if(vehicleid == INVALID_VEHICLE_ID) return SendClientMessage(playerid, -1, "{00FF80}No estás cerca de ningún vehículo.");

					if(!GLOBAL_VEHICLES[ vehicleid ][gb_vehicle_VALID]) return 1;
					PlayerPlaySound(playerid,32000,0,0,0);
					new Float:Vehicle_Pos[3];
					GetVehiclePos(vehicleid, Vehicle_Pos[0], Vehicle_Pos[1], Vehicle_Pos[2]);
					if(!IsPlayerInRangeOfPoint(playerid, 5.0, Vehicle_Pos[0], Vehicle_Pos[1], Vehicle_Pos[2])) return SendClientMessage(playerid, -1, "{00FF80}El vehículo está demasiado lejos.");
					KillTimer(TimerRepariVehicle[playerid]);
					TimerRepariVehicle[playerid]=SetTimerEx("RepariVehicl",5000,false,"dd",playerid,vehicleid);
					GameTextForPlayer(playerid,"~n~~n~~n~~n~~y~Repando vehiculo..",4900,3);
					ApplyAnimation(playerid, "SCRATCHING", "SCLNG_L", 4.1, true, false, false, false, 0, false);
					return 1;
			 	}
			}

			//
	 		if(INVENTARIOPLAYER[ Equiped_Inventary[playerid][TYPE] ][TIPODECONSUMO] == NO_CONSUMIBLE) return 1;
	 		if(INVENTARIOPLAYER[ Equiped_Inventary[playerid][TYPE] ][TIPODECONSUMO] == CANA_PESCAR) return 1;
	 		if(INVENTARIOPLAYER[ Equiped_Inventary[playerid][TYPE] ][TIPODECONSUMO] == MASA_PICAR) return 1;
	 		
	 		if(INVENTARIOPLAYER[ Equiped_Inventary[playerid][TYPE] ][TIPODECONSUMO] == BEBIDA_24_7 || INVENTARIOPLAYER[ Equiped_Inventary[playerid][TYPE] ][TIPODECONSUMO] == COMIDA_24_7)
	 		{
		 		if (gettime() - 3 < ANTIFLOODINVENTARY[playerid]) return 1;
		 		ANTIFLOODINVENTARY[playerid] = gettime();
		 		SendAndReduceInventary(playerid, Equiped_Inventary[playerid][TYPE] , INVENTARIOPLAYER[ Equiped_Inventary[playerid][TYPE] ][TIPODECONSUMO]);
		 	}
	 	}
	 	if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
		{
			new vehicleid = GetPlayerCameraTargetVehicle(playerid);
			if(vehicleid != INVALID_VEHICLE_ID)
			{
				//if(IsPlayerInFrontVehicle(playerid,vehicleid,2.0,5))
				new Float:Pos_[3];
				GetPlayerPos(playerid, Pos_[0],Pos_[1],Pos_[2]);
				if(GetPosBehindVehicle(vehicleid,Pos_[0],Pos_[1],Pos_[2],0.5))
				{
					if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_TYPE] == VEHICLE_TYPE_PERSONAL)
				 	{
				 		new boot_slot = GetPlayerVehicleAvaibleBootSlot(vehicleid);
						if(boot_slot == -1) return SendClientMessage(playerid, -1, "{00FF80}No hay maletero?");

				 		if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_BAUL]== 1)
				 		{
				 			if(Equiped_Inventary[playerid][VALID_EQUIPED] == true) return MensajesAyuda(playerid,"Guarda lo que tienes equipado");
				 			new action[74];
							format(action, sizeof action, "mira el baul de su vehiculo %s *", VEHICLE_INFO[GLOBAL_VEHICLES[vehicleid][gb_vehicle_MODELID] - 400][vehicle_info_NAME]);
							Auto_SendPlayerAction(playerid, action);
			 				ShowBaulVehicle(playerid,vehicleid);
			 				return 1;
			 			}
			 			else
			 			{
			 				new string[100];
				 			format(string,sizeof(string),"~r~~h~Baul con candado");
				 			MensajeAyuda_4(playerid,string);
			 			}
			 		}
		 		}
		 	}
		}
		//
	}
 
    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
    {
    	new vehicleid = GetPlayerVehicleID(playerid);
	    if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_SALTO_V]==2)
	    {
	    	if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_SALTO_V_2] == 1)
    		{
			    if(newkeys & 40 && oldkeys ^ 40) vJumpAngular[playerid] = GetTickCount();
			    if(newkeys & 8 && oldkeys && 8 && oldkeys & 32 && !(newkeys & 32))
			    {
			    	new Float:Xv, Float:Yv, Float:Zv, Float:absV;
			        GetVehicleVelocity(vehicleid, Xv, Yv, Zv);
			        absV = floatsqroot((Xv * Xv) + (Yv * Yv) + (Zv * Zv));

			    	if(absV < 0.04)
			    	{
			        	new Float:Zangle, Float:mp = floatdiv(GetTickCount() - vJumpAngular[playerid], 3000.0);
			        	if(mp > 4.0) mp = 2.0;
			            GetVehicleZAngle(vehicleid, Zangle);
			            Xv = (0.09 * floatsin(Zangle, degrees) * mp);
			            Yv = (0.09 * floatcos(Zangle, degrees) * mp);
			        	SetVehicleAngularVelocity(vehicleid, Yv, Xv, 0);
			            Xv = (0.25 * floatcos(Zangle, degrees) * mp);
			            Yv = (-0.25 * floatsin(Zangle, degrees) * mp);
			        	SetVehicleVelocity(vehicleid, Yv, Xv, 0);
			        }
			    }
			}
		}
	}
	if(PRESSED(KEY_NO))
    {
    	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
    	{
    		new vehicleid = GetPlayerVehicleID(playerid);
    		if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_TYPE] == VEHICLE_TYPE_PERSONAL)
    		{
				if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_SALTO_V] == 1)
				{
					if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_SALTO_V_1] == 1)
					{
			    		new Float:Xv, Float:Yv, Float:Zv;
			        	GetVehicleVelocity(vehicleid, Xv, Yv, Zv);
			        	new Float:Zangle;
			            GetVehicleZAngle(vehicleid, Zangle);
			            Xv = (0.09 * floatsin(Zangle, degrees) * 1.3);
			            Yv = (0.09 * floatcos(Zangle, degrees) * 1.3);
			        	SetVehicleAngularVelocity(vehicleid, Yv, Xv, 0);
			            Xv = (0.25 * floatcos(Zangle, degrees) * 1.3);
			            Yv = (-0.25 * floatsin(Zangle, degrees) * 1.3);

			            return 1;
		        	}
		        }
		    }
		}

		if(PLAYER_TEMP[playerid][P_SHOPCAR])
		{
			HideBuyVehicleMenu(playerid);
			return 1;
		}
		if(PI[playerid][P_SHOP_WEAPON]) 
		{
			HidePlayerTextdrawsAmmu(playerid);
			return 1;
		}
		if(PI[playerid][P_SHOP_SKIN]) 
		{
			HidePlayerTextdrawsSkin(playerid);
			return 1;
		}
		if(PLAYER_TALLER[playerid][OPEN_F])
		{
			HideTaller(playerid);
			return 1;
		}
    	if(Descansando[playerid]==true)
		{
			ClearAnimations(playerid);
			Descansando[playerid]=false;
			KillTimer(DescansarTimer[playerid]);
			return 1;
		}
		if(Equiped_Inventary[playerid][VALID_EQUIPED]==true)
	 	{
			DesSaveInvetary(playerid);
			Equiped_Inventary[playerid][VALID_EQUIPED]=false;
			Equiped_Inventary[playerid][ESTADO]=0;
	 		Equiped_Inventary[playerid][TYPE]=0;
	 		return 1;
	 	}

		new Float:pos[3]; 
		Streamer_GetFloatData(STREAMER_TYPE_PICKUP, PLAYER_TEMP[playerid][pt_LAST_PICKUP_ID], E_STREAMER_X, pos[0]);
		Streamer_GetFloatData(STREAMER_TYPE_PICKUP, PLAYER_TEMP[playerid][pt_LAST_PICKUP_ID], E_STREAMER_Y, pos[1]);
		Streamer_GetFloatData(STREAMER_TYPE_PICKUP, PLAYER_TEMP[playerid][pt_LAST_PICKUP_ID], E_STREAMER_Z, pos[2]);
		
		if(!IsPlayerInRangeOfPoint(playerid, 1.0, pos[0], pos[1], pos[2]))   
		{
		 	if(ABRIO_INVENTARIO[playerid]==false)
		 	{
		 		if(PLAYER_TEMP[playerid][pt_EVENTO] == true) return SendClientMessage(playerid,-1,"No puedes abrir el inventario en el evento");
		 		if(TIRAR_INVENTARIO[playerid]==true) return SendClientMessage(playerid,-1,"Cierra el menu de tirar");
				ABRIO_INVENTARIO[playerid]=true;
		 		Show_Inventario(playerid);
		 		return 1;
		 	}
		 	else
		 	{
		 		HiveIntaruil(playerid);
		 	}
	 	}
    }
    //Casa facciones
    if(PRESSED(KEY_SECONDARY_ATTACK))
	{
		if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_JAIL || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return 1;
		//
		if(ENCASAFACCION[playerid] == INVALID_EMPRESA_ID)
		{
			new i = IsPlayerInCasaFaccion(playerid);
			//if(i == -1) return 1;
			if(i != -1)
			{	
				switch(CASAFACCION[i][LOCKTYPE])
				{
					 
					case 0:
					{
						SendToCasaFaccion(playerid, i);
					}
					case 1:
					{
						if(FACCION_PLAYER[playerid][FACCION_ID] != i)
						{
							SendClientMessageEx(playerid,-1,"Casa con candado, no eres de la faccion: %s",GetNameFaccionID(i));
						}
						else
						{
							SendToCasaFaccion(playerid, i);
						}
					}
					case 2:
					{
						if(FACCIONES_INFO[ i ][FACCION_LIDER] == ACCOUNT_INFO[playerid][ac_ID] || FACCIONES_INFO[ i ][FACCION_SUB_LIDER]) 
						{
							SendToCasaFaccion(playerid, i);
						}
						else
						{
							SendClientMessage(playerid,-1,"Casa de faccion cerrada");
						}
					}
				}
			}
		}
		else
		{
			for(new i = 0; i < sizeof SALIDACASASFACCION; i++)
			{
				if(IsPlayerInRangeOfPoint(playerid,1,SALIDACASASFACCION[i][POSX],SALIDACASASFACCION[i][POSY],SALIDACASASFACCION[i][POSZ]))
				{
			 		new id=ENCASAFACCION[playerid];
			 		SetPlayerPosEx(playerid,CASAFACCION[id][PosX], CASAFACCION[id][PosY], CASAFACCION[id][PosZ],0,0,0,true);
			 		ENCASAFACCION[playerid]=-1;
	 				return 1;
	 			}
	 		}
		}
	}
    //Apartamentos
    if(PRESSED(KEY_SECONDARY_ATTACK))
	{
		if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_JAIL || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return 1;
		//

		for(new i = 0; i < sizeof SALIDAAPARTAMENTOS; i++)
		{
			if(IsPlayerInRangeOfPoint(playerid,2,SALIDAAPARTAMENTOS[i][POSX],SALIDAAPARTAMENTOS[i][POSY],SALIDAAPARTAMENTOS[i][POSZ]))
			{
		 		new id=ENAPARTAMENTO[playerid];
		 		SetPlayerPosEx(playerid,APARTAMENTO[id][CasaX],APARTAMENTO[id][CasaY],APARTAMENTO[id][CasaZ],0,0,0,true);
		 		ENAPARTAMENTO[playerid]=-1;
 				return 1;
 			}
 		}
 		
		if(ENAPARTAMENTO[playerid] == INVALID_EMPRESA_ID)
		{
			new i = IsPlayerInApartamento(playerid);
			//if(i == -1) return 1;
			if(i != -1)
			{
				switch(APARTAMENTO[i][ENVENTA])
				{
					case 0:
					{
						if(GetCasas(playerid) >= 2 && GetPlayerVip(playerid) <= 1) return MensajesAyuda(playerid,"No puedes adquirir mas propiedades maximo 2, compra vip 2 para tener 3 espacios");
						if(GetCasas(playerid) >= 5 && GetPlayerVip(playerid) >= 2) return MensajesAyuda(playerid,"No puedes adquirir mas propiedades maximo 5");
						new money=GetPlayerMoney(playerid);
						if(APARTAMENTO[i][PRECIO] > money) return MensajesAyuda(playerid,"No tienes fucientes dinero para comprar la casa");
						new string[164];
						
						ENAPARTAMENTO[playerid]=i;
						format(string, sizeof(string), "Apartamento #: %d\nEste apartamento esta en venta por\n\n{2ECC71}($ %s)",i,number_format_thousand(APARTAMENTO[i][PRECIO]));
						ShowPlayerDialog(playerid, DIALOG_APARTAMENTO, DIALOG_STYLE_MSGBOX, "| APARTAMENTO EN VENTA |", string, "Comprar", "Cerrar");

						
					}
					case 1:
					{
						switch(APARTAMENTO[i][Lock])
						{
							case 0:
							{
								EnviaraApartamento(playerid,i);
								return 1;
							}
							case 1:
							{
								if(APARTAMENTO[i][CasaDuenoID] != ACCOUNT_INFO[playerid][ac_ID])
								{	
									new player=GetOffIdPlayer(APARTAMENTO[i][CasaDuenoID]);

									//
									if(IsPlayerConnected(player) && ENAPARTAMENTO[player] == i && GetKeysFromThisApartament(playerid,i) == 1)
									{
										foreach(new j : Player)
										{
											if(ENAPARTAMENTO[j] == i)
											{
												if(APARTAMENTO[i][CasaDuenoID] == ACCOUNT_INFO[j][ac_ID])
												{
													SendClientMessageEx(j,-1,"%s Entro a tu apartamento",PLAYER_TEMP[playerid][pt_NAME]);
												}
											}
										}

										EnviaraApartamento(playerid,i);
										return 1;
									}

									foreach(new j : Player)
									{
										if(ENAPARTAMENTO[j] == i)
										{
											if(APARTAMENTO[i][CasaDuenoID] == ACCOUNT_INFO[j][ac_ID])
											{
												SendClientMessageEx(j,-1,"%s esta llamando a la puerta, usa /DEPA (Llamadas puerta) para dejarlo pasar",PLAYER_TEMP[playerid][pt_NAME]);
											}
										}
									}
									//
									if(IsPlayerConnected(player) && ENAPARTAMENTO[player] == i)
									{

										if (gettime() - 4 < TimerDejarPasar[playerid]) return SendClientMessage(playerid,-1,"Espera un momento para volver a llamar la puerta, mantente en la posicion del apartamento y espera a que te dejen pasar");

										TimerDejarPasar[playerid] = gettime();

										new Query[100],DBResult:Result;
										format(Query, sizeof(Query), "SELECT CASA,PLAYER FROM `LLAMADASPUERTAAPARTAMENTOS` WHERE `PLAYER` = '%d' AND `APARTAMENTO`='%d';",playerid,i);
										Result = db_query(_DB_, Query);
										if(!db_num_rows(Result))
										{
											new GQuery[80];
											format( GQuery, sizeof( GQuery ), "INSERT INTO LLAMADASPUERTAAPARTAMENTOS (PLAYER,APARTAMENTO) VALUES ('%d','%d')",playerid,i);
						   					db_query(_DB_, GQuery );
						   				}
						   				db_free_result(Result);
						   				format(string2,sizeof(string2),"Llamaste a la puerta espera a que %s te deje pasar",GetNameCuentaID(APARTAMENTO[i][CasaDuenoID]));
						   				MensajesAyuda(playerid,string2);

						   				return 1;
									}
								}
								if(APARTAMENTO[i][CasaDuenoID] == ACCOUNT_INFO[playerid][ac_ID])
								{	
									EnviaraApartamento(playerid,i);
									return 1;	
								}
								if(GetKeysFromThisApartament(playerid,i) == 1)
								{
									EnviaraApartamento(playerid,i);
									return 1;
								}
								else
								{
									format(string2,sizeof(string2),"Apartamento con candado pidele las llaves a ~y~%s~w~ para que te deje entrar",GetNameCuentaID(APARTAMENTO[i][CasaDuenoID]));
									MensajesAyuda(playerid,string2);
								}
							}
						}
						
					}
				}
				return 1;
			}
		}
		else
		{
			for(new i = 0; i < sizeof SALIDAAPARTAMENTOS; i++)
			{
				if(IsPlayerInRangeOfPoint(playerid,2,SALIDAAPARTAMENTOS[i][POSX],SALIDAAPARTAMENTOS[i][POSY],SALIDAAPARTAMENTOS[i][POSZ]))
				{
			 		new id=ENAPARTAMENTO[playerid];
			 		SetPlayerPosEx(playerid,APARTAMENTO[id][CasaX],APARTAMENTO[id][CasaY],APARTAMENTO[id][CasaZ],0,0,0,true);
			 		ENAPARTAMENTO[playerid]=-1;
	 				return 1;
	 			}
	 		}
		}
	}
    //CAsas
	if(PRESSED(KEY_SECONDARY_ATTACK))
	{
		if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_JAIL || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return 1;
		//
		if(ENCASAVIP[playerid] == INVALID_EMPRESA_ID)
		{
			new i = IsPlayerInCasaVip(playerid);
			//if(i == -1) return 1;
			if(i != -1)
			{
				switch(CASAVIP[i][ENVENTA])
				{
					case 0:
					{
						
						new string[164];
						switch(CASAVIP[i][TIPOMONEDA])
						{
							case 1:
							{
								if(GetCasas(playerid) >= 2 && GetPlayerVip(playerid) <= 1) return MensajesAyuda(playerid,"No puedes adquirir mas propiedades maximo 2, compra vip 2 para tener 3 espacios");
								if(GetCasas(playerid) >= 5 && GetPlayerVip(playerid) >= 2) return MensajesAyuda(playerid,"No puedes adquirir mas propiedades maximo 5");

								if(CASAVIP[i][PRECIO] > GetPlayerCash(playerid)) return MensajesAyuda(playerid,"No tienes fuciente Dinero para comprar esta casa");
								ENCASAVIP[playerid]=i;
								format(string, sizeof(string), "Casa #: %d\nEstá casa esta en venta por\n\n{2ECC71}($ %s)",i,number_format_thousand(CASAVIP[i][PRECIO]));
								ShowPlayerDialog(playerid, DIALOG_CASAVIP, DIALOG_STYLE_MSGBOX, "| CASA EN VENTA |", string, "Comprar", "Cerrar");
							}
							case 2:
							{
								if(GetCasas(playerid) >= 2 && GetPlayerVip(playerid) <= 1) return MensajesAyuda(playerid,"No puedes adquirir mas propiedades maximo 2, compra vip 2 para tener 3 espacios");
								if(GetCasas(playerid) >= 5 && GetPlayerVip(playerid) >= 2) return MensajesAyuda(playerid,"No puedes adquirir mas propiedades maximo 5");	

								if(CASAVIP[i][PRECIO] > ACCOUNT_INFO[playerid][ac_SD]) return MensajesAyuda(playerid,"No tienes fucientes "SERVER_COIN" para comprar esta casa");
								ENCASAVIP[playerid]=i;
								format(string, sizeof(string), "Casa #: %d\nEstá casa esta en venta por\n\n{2ECC71}($%d) de ZonCoins",i,CASAVIP[i][PRECIO]);
								ShowPlayerDialog(playerid, DIALOG_CASAVIP, DIALOG_STYLE_MSGBOX, "| CASA EN VENTA |", string, "Comprar", "Cerrar");
							}
						}
						
					}
					case 1:
					{
						switch(CASAVIP[i][Lock])
						{
							case 0:
							{
								EnviaraLaCasa(playerid,i);
								return 1;
							}
							case 1:
							{
								if(CASAVIP[i][CasaDuenoID] != ACCOUNT_INFO[playerid][ac_ID])
								{	
									new player=GetOffIdPlayer(CASAVIP[i][CasaDuenoID]);
									//
									if(IsPlayerConnected(player) && ENCASAVIP[player] == i && GetKeysFromThisHouseVip(playerid,i) == 1)
									{
										foreach(new j : Player)
										{
											if(ENCASAVIP[j] == i)
											{
												if(CASAVIP[i][CasaDuenoID] == ACCOUNT_INFO[j][ac_ID])
												{
													SendClientMessageEx(j,-1,"%s Entro a tu casa",PLAYER_TEMP[playerid][pt_NAME]);
												}
											}
										}

										EnviaraApartamento(playerid,i);
										return 1;
									}
									//
									foreach(new j : Player)
									{
										if(ENCASAVIP[j] == i)
										{
											if(CASAVIP[i][CasaDuenoID] == ACCOUNT_INFO[j][ac_ID])
											{
												SendClientMessageEx(j,-1,"%s esta llamando a la puerta, usa /Casa (Llamadas puerta) para dejarlo pasar",PLAYER_TEMP[playerid][pt_NAME]);
											}
										}
									}
									//
									if(IsPlayerConnected(player) && ENCASAVIP[player] == i)
									{

										if (gettime() - 4 < TimerDejarPasar[playerid]) return SendClientMessage(playerid,-1,"Espera un momento para volver a llamar la puerta, mantente en la posicion de la casa y espera a que te dejen pasar");

										TimerDejarPasar[playerid] = gettime();

										new Query[100],DBResult:Result;
										format(Query, sizeof(Query), "SELECT CASA,PLAYER FROM `LLAMADASPUERTACASAVIP` WHERE `PLAYER` = '%d' AND `CASA`='%d';",playerid,i);
										Result = db_query(_DB_, Query);
										if(!db_num_rows(Result))
										{
											new GQuery[80];
											format( GQuery, sizeof( GQuery ), "INSERT INTO LLAMADASPUERTACASAVIP (PLAYER,CASA) VALUES ('%d','%d')",playerid,i);
						   					db_query(_DB_, GQuery );
						   				}
						   				db_free_result(Result);
						   				format(string2,sizeof(string2),"Llamaste a la puerta espera a que %s te deje pasar",GetNameCuentaID(CASAVIP[i][CasaDuenoID]));
						   				MensajesAyuda(playerid,string2);

						   				return 1;
									}
								}
								if(CASAVIP[i][CasaDuenoID] == ACCOUNT_INFO[playerid][ac_ID])
								{	
									EnviaraLaCasa(playerid,i);
									return 1;	
								}
								if(GetKeysFromThisHouseVip(playerid,i) == 1)
								{
									EnviaraLaCasa(playerid,i);
									return 1;
								}
								else
								{
									format(string2,sizeof(string2),"Casa con candado pidele las llaves a ~y~%s~w~ para que te deje entrar",GetNameCuentaID(CASAVIP[i][CasaDuenoID]));
									MensajesAyuda(playerid,string2);
								}
							}
						}
						
					}
				}
				return 1;
			}
		}
		else
		{
			for(new i = 0; i < sizeof SALIDACASAVIP; i++)
			{
				if(IsPlayerInRangeOfPoint(playerid,2,SALIDACASAVIP[i][POSX],SALIDACASAVIP[i][POSY],SALIDACASAVIP[i][POSZ]))
				{
			 		new id=ENCASAVIP[playerid];
			 		SetPlayerPosEx(playerid,CASAVIP[id][CasaX],CASAVIP[id][CasaY],CASAVIP[id][CasaZ],0,0,0,true);
			 		ENCASAVIP[playerid]=-1;
	 				return 1;
	 			}
	 		}
		}
	}

	/**/
	if(RELEASED(KEY_CTRL_BACK))
	{
		if(ENAPARTAMENTO[playerid] !=-1)
		{
			if(ENCASAVIP[playerid] != -1) return SendClientMessage(playerid,-1,"Error casa id 2");
			ShowDepaMenu(playerid);
			return 1;
		}
	
		if(ENCASAVIP[playerid] != -1)
		{
			if(ENAPARTAMENTO[playerid] != -1) return SendClientMessage(playerid,-1,"Error departamento id 2");
			ShowHouseMenu(playerid);
			return 1;
		}
	}
	if(PRESSED(KEY_YES))
	{	
		//==============================================================================
		if(ENCASAVIP[playerid] != INVALID_EMPRESA_ID)
		{
			for(new i = 0; i < sizeof POSICIONESARMERIACASAVIP; i++)
			{
				if(IsPlayerInRangeOfPoint(playerid,1,POSICIONESARMERIACASAVIP[i][POSX],POSICIONESARMERIACASAVIP[i][POSY],POSICIONESARMERIACASAVIP[i][POSZ]))
				{
					ManageArmasCasasVIP(playerid);
				}
			}
			//
			//
			for(new i = 0; i < sizeof POSICIONESNEVERACASAVIP; i++)
			{
				if(IsPlayerInRangeOfPoint(playerid,1,POSICIONESNEVERACASAVIP[i][POSX],POSICIONESNEVERACASAVIP[i][POSY],POSICIONESNEVERACASAVIP[i][POSZ]))
				{
					ManageNeveraCasaVIP(playerid);
				}
			}
			for(new i = 0; i < sizeof POSICIONESARMARIOCASAVIP; i++)
			{
				if(IsPlayerInRangeOfPoint(playerid,1,POSICIONESARMARIOCASAVIP[i][POSX],POSICIONESARMARIOCASAVIP[i][POSY],POSICIONESARMARIOCASAVIP[i][POSZ]))
				{
					ManageArmarioCasaVIP(playerid);
				}
			}

		}
		if(ENAPARTAMENTO[playerid] != INVALID_EMPRESA_ID)
		{
			for(new i = 0; i < sizeof POSICIONESARMERIADEPART; i++)
			{
				if(IsPlayerInRangeOfPoint(playerid,1,POSICIONESARMERIADEPART[i][POSX],POSICIONESARMERIADEPART[i][POSY],POSICIONESARMERIADEPART[i][POSZ]))
				{
					Manage_Armas_Depa(playerid);
				}
			}
			for(new i = 0; i < sizeof POSICIONESNEVERADEPART; i++)
			{
				if(IsPlayerInRangeOfPoint(playerid,1,POSICIONESNEVERADEPART[i][POSX],POSICIONESNEVERADEPART[i][POSY],POSICIONESNEVERADEPART[i][POSZ]))
				{
					ManageNeveraApartamento(playerid);
				}
			}
			for(new i = 0; i < sizeof POSICIONESARMARIODEPA; i++)
			{
				if(IsPlayerInRangeOfPoint(playerid,1,POSICIONESARMARIODEPA[i][POSX],POSICIONESARMARIODEPA[i][POSY],POSICIONESARMARIODEPA[i][POSZ]))
				{
					ManageArmarioDepa(playerid);
				}
			}

		}
		//==============================================================================
		if(ENGARAJE[playerid] == INVALID_EMPRESA_ID)
		{
			//new i = IsPlayerNearGaraje(playerid);
			foreach(new i : Casasvip)
			{
				if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER || GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
				{
					if(IsPlayerInRangeOfPoint(playerid,2,CASAVIP[i][GARAJEX],CASAVIP[i][GARAJEY],CASAVIP[i][GARAJEZ]))
					{
						if(i != -1)
						{
							switch(CASAVIP[i][ENVENTA])
							{
								case 0:
								{
									MensajesAyuda(playerid,"Debes comprar la casa para adquirir este garaje");
								}
								case 1:
								{
									if(CASAVIP[i][CasaDuenoID] == ACCOUNT_INFO[playerid][ac_ID])
									{
										SendToGarajePlayer(playerid, i);
										
										return 1;
									}
									if(GetKeysFromThisHouseVip(playerid,i) == 1)
									{
										SendToGarajePlayer(playerid, i);
										format(string2,sizeof(string2),"Entraste al garaje de la casa de ~y~%s",GetNameCuentaID( CASAVIP[i][CasaDuenoID]));
										MensajeTime(playerid,string2);
										return 1;
									}
									else
									{
										format(string2,sizeof(string2),"Garaje con candado pidele las llaves a ~y~%s~w~ para que te deje entrar",GetNameCuentaID(CASAVIP[i][CasaDuenoID]));
										MensajeTime(playerid,string2);
									}
								}
							}
						}
					}
				}
			}
		}
		else
		{
			if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
			{
				for(new i = 0; i < sizeof POSICIONESSALIDAGARAJEAUTO; i++)
				{
					if(IsPlayerInRangeOfPoint(playerid,2,POSICIONESSALIDAGARAJEAUTO[i][POSX],POSICIONESSALIDAGARAJEAUTO[i][POSY],POSICIONESSALIDAGARAJEAUTO[i][POSZ]))
					{
						new id=ENGARAJE[playerid];
						new vehidledid=GetPlayerVehicleID(playerid);
						SetVehiclePosTRE(playerid,vehidledid,CASAVIP[id][GARAJEX],CASAVIP[id][GARAJEY],CASAVIP[id][GARAJEZ],0,0,0);
						ENGARAJE[playerid] = -1;
					}
				}
			}
			//
			if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
			{
				for(new i = 0; i < sizeof POSICIONESSALIDAGARAJEAPIE; i++)
				{
					if(IsPlayerInRangeOfPoint(playerid,2,POSICIONESSALIDAGARAJEAPIE[i][POSX],POSICIONESSALIDAGARAJEAPIE[i][POSY],POSICIONESSALIDAGARAJEAPIE[i][POSZ]))
					{
						new id=ENGARAJE[playerid];
						SetPlayerPosEx(playerid,CASAVIP[id][GARAJEX],CASAVIP[id][GARAJEY],CASAVIP[id][GARAJEZ],0, 0, 0, true);
						SetPlayerVirtualWorld(playerid, 0);
						ENGARAJE[playerid] = -1;
					}
				}
			}
		}
		//
    }
	if(PRESSED(KEY_SECONDARY_ATTACK))
    {
    	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_JAIL || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return 1;

		if(InNegocio[playerid] == INVALID_EMPRESA_ID)
		{
			new i = IsPlayerNearEmpresa(playerid);
			//if(i == -1) return 1;
			if(i != -1)
			{
				InNegocio[playerid] = i ;
				switch(NEGOCIO[i][Lock])
				{
					case 1: 
					{
						InNegocio[playerid]=-1;
						MensajesAyuda(playerid,"El lugar fue cerrado por un asalto, regresa mas tarde");
						return 1;
					}
				}
				switch(NEGOCIO[i][SeVende])
				{
					case 0:
					{
						new string[164];
						format(string, sizeof(string), "Entrar a comprar\nComprar esta empresa (Costo: %d)",NEGOCIO[i][PrecioDinero]);
						ShowPlayerDialog(playerid, DIALOG_EMPRESA, DIALOG_STYLE_LIST, "| EMPRESA |", string, "Seguir", "Cerrar");
					}
					case 1:
					{
						MandaANegocio247(playerid, i);
					}
				}
				return 1;
			}
		}
		else
		{
			for(new i = 0; i < sizeof SALIDALUGAR; i++)
			{
				if(IsPlayerInRangeOfPoint(playerid,1,SALIDALUGAR[i][xXx],SALIDALUGAR[i][yYy],SALIDALUGAR[i][zZz]))
				{
					new id=InNegocio[playerid];
					SetPlayerPosEx(playerid,NEGOCIO[id][EmpresaX],NEGOCIO[id][EmpresaY],NEGOCIO[id][EmpresaZ],200,0,0, true);
					InNegocio[playerid] = INVALID_EMPRESA_ID;
					return 1;
				}
			}
			
		}
	}

	if(PLAYER_TEMP[playerid][pt_GAME_STATE] != GAME_STATE_NORMAL) return 1;
	if(PRESSED(KEY_LOOK_BEHIND))
	{
		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
			if (gettime() - 3 < MensajeAyuda[playerid]) return 1;

			MensajeAyuda[playerid] = gettime();
			new vehicleid = GetPlayerVehicleID(playerid);

			if(vehicleid == PLAYER_TEMP[playerid][tp_VEHICLE]) return GameTextForPlayer(playerid,"~n~~n~~n~~n~~n~~n~~n~Vehiculo invalido",3000,3);
			KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][7]);
			if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE])
			{
				PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_NOFUEL][p_ac_info_IMMUNITY] = gettime() + 15;
				GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE] = 0;
				UpdateVehicleParams(vehicleid);
				

				PlayerTextDrawSetString(playerid,PlayerTextdraws[playerid][textdraw_encendido], "~r~~h~Motor apagado");
				SendAccion(playerid,"*Apaga el motor del vehiculo*",6000);
				PlayerTextDrawShow(playerid,PlayerTextdraws[playerid][textdraw_encendido]); 
				SetTimerEx("HideEncendido",5000,false,"d",playerid);
			}
			/*else
			{
				PlayerTextDrawSetString(playerid,PlayerTextdraws[playerid][textdraw_encendido], "~w~~h~Encendiendo..");
				SendAccion(playerid,"*Enciende el motor del vehiculo*",6000);
				PlayerTextDrawShow(playerid,PlayerTextdraws[playerid][textdraw_encendido]); 
				PLAYER_TEMP[playerid][pt_TIMERS][7] = SetTimerEx("StartVehicleEngine", 1000, false, "ii", playerid, vehicleid);
			}*/
			return 1;
		}
	}
	if(PRESSED(KEY_NO))//Salir del interior
	{
		if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_JAIL || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return 1;
		if(PLAYER_TEMP[playerid][pt_LAST_PICKUP_ID] == 0) return 1;
			
		new info[3];
		Streamer_GetArrayData(STREAMER_TYPE_PICKUP, PLAYER_TEMP[playerid][pt_LAST_PICKUP_ID], E_STREAMER_EXTRA_ID, info);
		 
		
		new Float:pos[3]; 
		Streamer_GetFloatData(STREAMER_TYPE_PICKUP, PLAYER_TEMP[playerid][pt_LAST_PICKUP_ID], E_STREAMER_X, pos[0]);
		Streamer_GetFloatData(STREAMER_TYPE_PICKUP, PLAYER_TEMP[playerid][pt_LAST_PICKUP_ID], E_STREAMER_Y, pos[1]);
		Streamer_GetFloatData(STREAMER_TYPE_PICKUP, PLAYER_TEMP[playerid][pt_LAST_PICKUP_ID], E_STREAMER_Z, pos[2]);
		
		if(IsPlayerInRangeOfPoint(playerid, 1.0, pos[0], pos[1], pos[2]))   
		{
			switch(info[0])
			{
				case PICKUP_TYPE_ENTER_EXIT:
				{
					if(info[2] == 1) // Está en el Pickup Interior y quiere ir al exterior
					{
						CHARACTER_INFO[playerid][ch_STATE] = ROLEPLAY_STATE_NORMAL;
						CHARACTER_INFO[playerid][ch_INTERIOR_EXTRA] = 0;
						PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] = -1;
						SetPlayerPosEx(playerid, ENTER_EXIT[info[1]][ee_EXT_X], ENTER_EXIT[info[1]][ee_EXT_Y], ENTER_EXIT[info[1]][ee_EXT_Z], ENTER_EXIT[info[1]][ee_EXT_ANGLE], ENTER_EXIT[info[1]][ee_EXT_INTERIOR], ENTER_EXIT[info[1]][ee_EXT_WORLD], false /*ENTER_EXIT[info[1]][ee_EXT_FREEZE]*/);
						SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
						StopAudioStreamForPlayer(playerid);
						FreezePlayer(playerid);
					}
				}
				case PICKUP_TYPE_PROPERTY:
				{
					if(info[2] == 1)
					{
						CHARACTER_INFO[playerid][ch_STATE] = ROLEPLAY_STATE_NORMAL;
						CHARACTER_INFO[playerid][ch_INTERIOR_EXTRA] = 0;
						PLAYER_TEMP[playerid][pt_PROPERTY_INDEX] = -1;
						SetPlayerPosEx(playerid, PROPERTY_INFO[info[1]][property_EXT_X], PROPERTY_INFO[info[1]][property_EXT_Y], PROPERTY_INFO[info[1]][property_EXT_Z], PROPERTY_INFO[info[1]][property_EXT_ANGLE], PROPERTY_INFO[info[1]][property_EXT_INTERIOR], 0, false /*PROPERTY_INFO[info[1]][property_EXT_FREEZE]*/, false);
						SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
						StopAudioStreamForPlayer(playerid);
						FreezePlayer(playerid);
					}
				}
			}
			return 1;
		}
	}

	

	//=================================
    if(PRESSED(KEY_YES))//Entrar
	{
 

		if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_JAIL || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return 1;
		if(PLAYER_TEMP[playerid][pt_LAST_PICKUP_ID] == 0) return 1;
		
		

		new info[3];
		Streamer_GetArrayData(STREAMER_TYPE_PICKUP, PLAYER_TEMP[playerid][pt_LAST_PICKUP_ID], E_STREAMER_EXTRA_ID, info);
		//if(info[0] == PICKUP_TYPE_NONE) return ShowPlayerMessage(playerid, "No estás en el lugar adecuado.", 3);
		
		new Float:pos[3]; 
		Streamer_GetFloatData(STREAMER_TYPE_PICKUP, PLAYER_TEMP[playerid][pt_LAST_PICKUP_ID], E_STREAMER_X, pos[0]);
		Streamer_GetFloatData(STREAMER_TYPE_PICKUP, PLAYER_TEMP[playerid][pt_LAST_PICKUP_ID], E_STREAMER_Y, pos[1]);
		Streamer_GetFloatData(STREAMER_TYPE_PICKUP, PLAYER_TEMP[playerid][pt_LAST_PICKUP_ID], E_STREAMER_Z, pos[2]);
		
		if(IsPlayerInRangeOfPoint(playerid, 1.0, pos[0], pos[1], pos[2]))  
		{
			switch(info[0])
			{
				case PICKUP_TYPE_ENTER_EXIT:
				{
					PLAYER_TEMP[playerid][pt_HOSPITAL] = GetNearestHospitalForPlayer(playerid);
					if(PLAYER_TEMP[playerid][pt_HOSPITAL] == -1) PLAYER_TEMP[playerid][pt_HOSPITAL] = 1;
			
					if(info[2] == 2) // Está en el Pickup Exterior y quiere ir al interior
					{
						if(ENTER_EXIT[info[1]][ee_TIME_OPEN] == 0 && ENTER_EXIT[info[1]][ee_TIME_CLOSE] == 0) // 24 horas
						{
							CHARACTER_INFO[playerid][ch_STATE] = ROLEPLAY_STATE_INTERIOR;
							CHARACTER_INFO[playerid][ch_INTERIOR_EXTRA] = ENTER_EXIT[info[1]][ee_ID];
							PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] = info[1];
							SetPlayerPosEx(playerid, ENTER_EXIT[info[1]][ee_INT_X], ENTER_EXIT[info[1]][ee_INT_Y], ENTER_EXIT[info[1]][ee_INT_Z], ENTER_EXIT[info[1]][ee_INT_ANGLE], ENTER_EXIT[info[1]][ee_INT_INTERIOR], ENTER_EXIT[info[1]][ee_INT_WORLD], false /*ENTER_EXIT[info[1]][ee_INT_FREEZE]*/, true);
							FreezePlayer(playerid);
						}
						else
						{
							//if(is_open(SERVER_TIME[0], ENTER_EXIT[info[1]][ee_TIME_OPEN], ENTER_EXIT[info[1]][ee_TIME_CLOSE]))
							//{
								CHARACTER_INFO[playerid][ch_STATE] = ROLEPLAY_STATE_INTERIOR;
								CHARACTER_INFO[playerid][ch_INTERIOR_EXTRA] = ENTER_EXIT[info[1]][ee_ID];
								PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] = info[1];
								SetPlayerPosEx(playerid, ENTER_EXIT[info[1]][ee_INT_X], ENTER_EXIT[info[1]][ee_INT_Y], ENTER_EXIT[info[1]][ee_INT_Z], ENTER_EXIT[info[1]][ee_INT_ANGLE], ENTER_EXIT[info[1]][ee_INT_INTERIOR], ENTER_EXIT[info[1]][ee_INT_WORLD], false /*ENTER_EXIT[info[1]][ee_INT_FREEZE]*/, true);
								FreezePlayer(playerid);
								
								if(ENTER_EXIT[info[1]][ee_INTERIOR_TYPE] == INTERIOR_CLUB) PlayAudioStreamForPlayerEx(playerid, "https://www.dropbox.com/s/yeuwio26i7y00ly/striptease.mp3?dl=1");
							//}
							//else SendClientMessageEx(playerid, -1, "{58ACFA}%s {FFFFFF}está cerrado, su horario es: {58ACFA}%02d:00 - %02d:00.", ENTER_EXIT[info[1]][ee_NAME], ENTER_EXIT[info[1]][ee_TIME_OPEN], ENTER_EXIT[info[1]][ee_TIME_CLOSE]);
						}
					}
					else ShowPlayerMessage(playerid, "Acercate al punto de la salida para entrar.", 3);
				}
				case PICKUP_TYPE_PROPERTY:
				{
					PLAYER_TEMP[playerid][pt_HOSPITAL] = GetNearestHospitalForPlayer(playerid);
					if(PLAYER_TEMP[playerid][pt_HOSPITAL] == -1) PLAYER_TEMP[playerid][pt_HOSPITAL] = 1;
					
					if(info[2] == 2) // Está en el Pickup Exterior y quiere ir al interior
					{
						if(!PROPERTY_INFO[info[1]][property_SOLD]) return SendClientMessage(playerid, -1, "{00FF80}Esta propiedad está en venta.");
						if(PROPERTY_INFO[info[1]][property_CREW])
						{
							if(!PLAYER_CREW[playerid][player_crew_VALID]) return SendClientMessageEx(playerid, -1, "{00FF80}Solo miembros de la banda pueden entrar.");
							if(PLAYER_CREW[playerid][player_crew_ID] != PROPERTY_INFO[info[1]][property_CREW_ID]) return SendClientMessageEx(playerid, -1, "{00FF80}Solo miembros de la banda pueden entrar.");
							
							CHARACTER_INFO[playerid][ch_STATE] = ROLEPLAY_STATE_GUEST_PROPERTY;
							CHARACTER_INFO[playerid][ch_INTERIOR_EXTRA] = PROPERTY_INFO[info[1]][property_ID];
							PLAYER_TEMP[playerid][pt_PROPERTY_INDEX] = info[1];
							SetPlayerPosEx(playerid, PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_X], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_Y], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_Z], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_ANGLE], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_INTERIOR], PROPERTY_INFO[info[1]][property_ID], false /*PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_FREEZE]*/, true);
							FreezePlayer(playerid);
						}
						else
						{
							if(PROPERTY_INFO[info[1]][property_OWNER_ID] == ACCOUNT_INFO[playerid][ac_ID])
							{
								CHARACTER_INFO[playerid][ch_STATE] = ROLEPLAY_STATE_OWN_PROPERTY;
								CHARACTER_INFO[playerid][ch_INTERIOR_EXTRA] = PROPERTY_INFO[info[1]][property_ID];
								PLAYER_TEMP[playerid][pt_PROPERTY_INDEX] = info[1];
								SetPlayerPosEx(playerid, PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_X], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_Y], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_Z], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_ANGLE], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_INTERIOR], PROPERTY_INFO[info[1]][property_ID], false /*PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_FREEZE]*/, true);
								FreezePlayer(playerid);
							}
							else
							{
								if(gettime() < PLAYER_TEMP[playerid][pt_ANTIFLOOD_KNOCK_PROPERTY] + 10) return SendClientMessage(playerid, 0xA9F5A9AA, "Espera para volver a tocar, si no te quieren abrir, vete.");
								
								new owner_playerid = GetOwnerIntProperty(PROPERTY_INFO[info[1]][property_ID]);
								if(owner_playerid == -1) return SendClientMessage(playerid, -1, "{00FF80}Esta no es tu propiedad y el dueño no está dentro para dejarte entrar.");
								
								PLAYER_TEMP[playerid][pt_ANTIFLOOD_KNOCK_PROPERTY] = gettime();
								PLAYER_TEMP[owner_playerid][pt_KNOCK_PLAYER_ID] = playerid;
								SendClientMessageEx(owner_playerid, -1, "{f4e542}%s {FFFFFF}está tocando la puerta, para dejarle entrar ve a la puerta y usa {bef441}/puerta.", PLAYER_TEMP[playerid][pt_RP_NAME]);
								SendClientMessage(playerid, -1, "{E6F8E0}Has tocado en la puerta, espera para que te abran o vete.");
							}
						}
					}
					//else ShowPlayerMessage(playerid, "Acercate al punto de salida para salir.", 3);
				}
				//default: ShowPlayerMessage(playerid, "Acercate al punto de salida para salir.", 3);
			}
			return 1;
		}
		
	}
	if(newkeys & KEY_HANDBRAKE && newkeys & KEY_YES || newkeys & KEY_SPRINT && newkeys & KEY_YES)
	{
		new vehicleid = INVALID_VEHICLE_ID;
		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER || GetPlayerState(playerid) == PLAYER_STATE_PASSENGER) vehicleid = GetPlayerVehicleID(playerid);
		else if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) vehicleid = GetPlayerCameraTargetVehicle(playerid);
		if(vehicleid == INVALID_VEHICLE_ID) return SendClientMessage(playerid, -1, "{00FF80}No estás en tu vehículo o cerca de él para abrirlo.");
		if(!PLAYER_VEHICLES[vehicleid][player_vehicle_VALID]) return SendClientMessage(playerid, -1, "{00FF80}Este no es tú vehículo.");

		switch(ACCOUNT_INFO[playerid][ac_SU])
		{
			case 0:
			{
				if(GetPlayerVehicles(playerid) > 2)
				{
					SendClientMessage(playerid, -1, "{00FF80}Este vehículo está bloqueado debido a que tienes mas de 2 vehiculos, desbloquealo con VIP.");
					SendClientMessageEx(playerid, -1, "{E6F8E0}¡Los jugadores {b1fc6f}VIP 1{E6F8E0}pueden tener hasta 4 vehículos! Usa {fffb49}/ayuda {E6F8E0}si quieres ser {b1fc6f}VIP 1.", MAX_SU_VEHICLES);
					return 1;
				}
			}
			case 1:
			{
				if(GetPlayerVehicles(playerid) > 4)
				{
					SendClientMessage(playerid, -1, "{00FF80}Este vehículo está bloqueado debido a que tienes mas de 4 vehiculos, desbloquealo con VIP.");
					SendClientMessageEx(playerid, -1, "{E6F8E0}¡Los jugadores {b1fc6f}VIP 2{E6F8E0}pueden tener hasta 6 vehículos! Usa {fffb49}/ayuda {E6F8E0}si quieres ser {b1fc6f}VIP 2.", MAX_SU_VEHICLES);
					return 1;
				}
			}
			case 2:
			{
				if(GetPlayerVehicles(playerid) > 6)
				{
					SendClientMessageEx(playerid, -1, "{E6F8E0} Ya tienes más de 6 vehiculos, no puedes desbloquear más vehiculos", MAX_SU_VEHICLES);
					return 1;
				}
			}
		}

		if((PLAYER_VEHICLES[vehicleid][player_vehicle_OWNER_ID] == ACCOUNT_INFO[playerid][ac_ID]) || (GetKeysFromThisVehicle(playerid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_ID]) == 1)) //return SendClientMessage(playerid, -1, "{00FF80}Este no es tú vehículo.");
		{
			switch(GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_DOORS])
			{
				case 0:
				{
					if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_DOORS]) return SendClientMessage(playerid, -1, "{E6F8E0}Las puertas de tu vehículo ya están cerradas.");
					GLOBAL_VEHICLES[vehicleid][gb_vehicle_LAST_CLOSED_TIME] = gettime();
					GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_DOORS] = 1;
					UpdateVehicleParams(vehicleid);
					//Auto_SendPlayerAction(playerid, "ha cerrado las puertas de su vehículo.");
					SendAccion(playerid,"ha cerrado las puertas del vehiculo",7000);
					new string[100];
					format(string,sizeof(string),"~r~~h~%s ~w~Trabado",VEHICLE_INFO[GLOBAL_VEHICLES[vehicleid][gb_vehicle_MODELID] - 400][vehicle_info_NAME]);
					MensajeAyuda_4(playerid,string);
				}
				case 1:
				{
					
					/**/
					if(!GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_DOORS]) return SendClientMessage(playerid, -1, "{E6F8E0}Las puertas de tu vehículo ya están abiertas.");
					GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_DOORS] = 0;
					UpdateVehicleParams(vehicleid);
					//Auto_SendPlayerAction(playerid, "ha abierto las puertas de su vehículo.");
					SendAccion(playerid,"ha abierto las puertas del vehiculo",7000);
					new string[100];
					format(string,sizeof(string),"~y~~h~%s ~w~Destrabado",VEHICLE_INFO[GLOBAL_VEHICLES[vehicleid][gb_vehicle_MODELID] - 400][vehicle_info_NAME]);
					MensajeAyuda_4(playerid,string);
				}
			}
		} else MensajesAyuda(playerid,"No eres el propietario de este vehiculo, tampoco posees llaves");

	}
	if(newkeys & KEY_FIRE)
	{
 
		if(PLAYER_TEMP[playerid][MAKECASA]==1)
		{
			PLAYER_TEMP[playerid][MAKECASA]=2;
			GetPlayerPos(playerid,PLAYER_TEMP[playerid][CasaPosX],PLAYER_TEMP[playerid][CasaPosY],PLAYER_TEMP[playerid][CasaPosZ]);
			SendClientMessage(playerid,-1,"Posicion de la casa seleccionada, ahora selecciona la posicion del garaje");
		}
		else if(PLAYER_TEMP[playerid][MAKECASA]==2)
		{
			PLAYER_TEMP[playerid][MAKECASA]=0;
			GetPlayerPos(playerid,PLAYER_TEMP[playerid][GarajePosX],PLAYER_TEMP[playerid][GarajePosY],PLAYER_TEMP[playerid][GarajePosZ]);
			SendClientMessage(playerid,-1,"Posicion del garaje seleccionada ahora selecciona el interior");
			ShowPlayerDialog(playerid,DIALOG_CREARCASAVIP,DIALOG_STYLE_LIST,"Interiores","Interior 1\nInterior 2","Seguir","Cancelar");
		}


		if(PLAYER_TEMP[playerid][MAKEAPARTAMENTO]==1)
		{
			GetPlayerPos(playerid,PLAYER_TEMP[playerid][CasaPosX],PLAYER_TEMP[playerid][CasaPosY],PLAYER_TEMP[playerid][CasaPosZ]);
			SendClientMessage(playerid,-1,"Posicion del apartamento seleccionada");
			PLAYER_TEMP[playerid][MAKEAPARTAMENTO]=0;
			ShowPlayerDialog(playerid,DIALOG_CREARAPARTAMENTO,DIALOG_STYLE_LIST,"Interiores","Interior 1\nInterior 2","Seguir","Cancelar");
		}

	}
	

	/*if(newkeys & KEY_FIRE)
	{
		if(ACCOUNT_INFO[playerid][ac_LEVEL] == 1 && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_NONE) ApplyAnimation(playerid, "PED", "IDLE_tired", 4.1, false, false, false, false, 0);
		return 1;
	}*/

	if(newkeys & KEY_CROUCH)
	{
		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
			if(PLAYER_TEMP[playerid][pt_GAME_STATE] == GAME_STATE_NORMAL)
			{
				for(new i = 0; i != sizeof LoadCarrierPoints; i ++)
				{
					if(IsPlayerInRangeOfPoint(playerid, 2.0, LoadCarrierPoints[i][0], LoadCarrierPoints[i][1], LoadCarrierPoints[i][2]))
					{
						if(PLAYER_WORKS[playerid][WORK_CARRIER] && PLAYER_TEMP[playerid][pt_WORKING_IN] == WORK_CARRIER)
						{
							new vehicleid = GetPlayerVehicleID(playerid);
							if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 578) return MensajesAyuda(playerid,"Nesecitas el vehiculo DFT-30 para trabajar de transportista");
							
							if(GLOBAL_VEHICLES[vehicleid][carrier_vehicle_LOADED]) return SendClientMessage(playerid, -1, "{00FF80}El DFT ya está cargado.");
							if(GLOBAL_VEHICLES[vehicleid][carrier_vehicle_LOADING]) return SendClientMessage(playerid, -1, "{00FF80}El DFT ya se está cargando.");

							SetVehicleVelocity(vehicleid, 0.0, 0.0, 0.0);
							GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE] = 0;
							UpdateVehicleParams(vehicleid);
							ShowDialog(playerid, DIALOG_SELECT_CARRIER_TYPE);
							//
							return 1;
						}
					}
				}
				for(new i = 0; i != sizeof LoadTrucksPoints; i ++)
				{
					if(IsPlayerInRangeOfPoint(playerid, 2.0, LoadTrucksPoints[i][0], LoadTrucksPoints[i][1], LoadTrucksPoints[i][2]))
					{
						if(PLAYER_WORKS[playerid][WORK_TRUCK] && PLAYER_TEMP[playerid][pt_WORKING_IN] == WORK_TRUCK)
						{
							new vehicleid = GetPlayerVehicleID(playerid);
							if(WORK_VEHICLES[vehicleid][work_vehicle_VALID] && WORK_VEHICLES[vehicleid][work_vehicle_WORK] == WORK_TRUCK)    
							{
								
								/*new Float:angle;
								GetVehicleZAngle(vehicleid, angle);
								if(angle > 180.0) angle -= 360.0;

								if(angle > (LoadTrucksPoints[i][3] - 15.0) && angle < (LoadTrucksPoints[i][3] + 15.0))
								{*/	
								if(TRUCK_VEHICLE[vehicleid][truck_vehicle_LOADED]) return SendClientMessage(playerid, -1, "{00FF80}El camión ya está cargado.");
								if(TRUCK_VEHICLE[vehicleid][truck_vehicle_LOADING]) return SendClientMessage(playerid, -1, "{00FF80}El camión ya se está cargando.");
					
								TRUCK_VEHICLE[vehicleid][truck_vehicle_LOADING] = true;
								TRUCK_VEHICLE[vehicleid][truck_vehicle_DRIVER_USER_ID] = ACCOUNT_INFO[playerid][ac_ID];
								
								SetVehicleVelocity(vehicleid, 0.0, 0.0, 0.0);
								
								GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE] = 0;
								UpdateVehicleParams(vehicleid);
								PLAYER_TEMP[playerid][pt_ACTOR_TRUCK]=i;
								ShowDialog(playerid, DIALOG_SELECT_TRUCK_TYPE);
								//}
								//else SendClientMessage(playerid, -1, "{00FF80}El camión no está correctamente colocado para cargarlo.");
								return 1;
							}
						}
					}
				}
				//
				for(new i = 0; i != sizeof San_Andreas_Barriers; i ++)
				{
					if(IsPlayerInRangeOfPoint(playerid, 15.0, San_Andreas_Barriers[i][barrier_X], San_Andreas_Barriers[i][barrier_Y], San_Andreas_Barriers[i][barrier_Z]))
					{
						if(GetPlayerInterior(playerid) == San_Andreas_Barriers[i][barrier_INTERIOR] && GetPlayerVirtualWorld(playerid) == San_Andreas_Barriers[i][barrier_WORLD])
						{
							if(San_Andreas_Barriers[i][barrier_VEHICLE_TYPE] == VEHICLE_TYPE_WORK)
							{
								if(!PLAYER_WORKS[playerid][WORK_POLICE] && PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_POLICE)
								{
									if(!PLAYER_WORKS[playerid][ San_Andreas_Barriers[i][barrier_VEHICLE_TYPE_IN] ]) break;
								}
							}
							if(IsDynamicObjectMoving(San_Andreas_Barriers[i][barrier_OBJECT_ID]) && !San_Andreas_Barriers[i][barrier_CLOSING]) break;
							
							KillTimer(San_Andreas_Barriers[i][barrier_TIMER]);
							San_Andreas_Barriers[i][barrier_TIMER] = SetTimerEx("CloseBarrier", 5000, false, "i", i);
							MoveDynamicObject(San_Andreas_Barriers[i][barrier_OBJECT_ID], San_Andreas_Barriers[i][barrier_X], San_Andreas_Barriers[i][barrier_Y], San_Andreas_Barriers[i][barrier_Z] + 0.72967 + 0.01, 0.0065, 0.0, 0.0, San_Andreas_Barriers[i][barrier_ROTATION]);
							San_Andreas_Barriers[i][barrier_CLOSING] = false;
							break;
						}
						else break;
					}
				}
				
				
				if(PLAYER_WORKS[playerid][WORK_POLICE])
				{
					if(GetPlayerInterior(playerid) == 0 && GetPlayerVirtualWorld(playerid) == 0)
					{
						for(new i = 0; i != sizeof POLICE_GARAGE_DOORS; i ++)
						{
							if(IsPlayerInRangeOfPoint(playerid, 20.0, POLICE_GARAGE_DOORS[i][police_gdoor_CLOSED_X], POLICE_GARAGE_DOORS[i][police_gdoor_CLOSED_Y], POLICE_GARAGE_DOORS[i][police_gdoor_CLOSED_Z]))
							{
								if(IsDynamicObjectMoving(POLICE_GARAGE_DOORS[i][police_gdoor_OBJECT_ID]) && !POLICE_GARAGE_DOORS[i][police_gdoor_CLOSING]) break;
								
								KillTimer(POLICE_GARAGE_DOORS[i][police_gdoor_TIMER]);
								POLICE_GARAGE_DOORS[i][police_gdoor_TIMER] = SetTimerEx("ClosePoliceGarageDoor", 5000, false, "i", i);
								MoveDynamicObject(POLICE_GARAGE_DOORS[i][police_gdoor_OBJECT_ID], POLICE_GARAGE_DOORS[i][police_gdoor_OPENED_X], POLICE_GARAGE_DOORS[i][police_gdoor_OPENED_Y], POLICE_GARAGE_DOORS[i][police_gdoor_OPENED_Z], POLICE_GARAGE_DOORS[i][police_gdoor_MOVE_SPEED], POLICE_GARAGE_DOORS[i][police_gdoor_OPENED_RX], POLICE_GARAGE_DOORS[i][police_gdoor_OPENED_RY], POLICE_GARAGE_DOORS[i][police_gdoor_OPENED_RZ]);
								POLICE_GARAGE_DOORS[i][police_gdoor_CLOSING] = false;
								break;
							}
						}
					}
				}	
			}
			return 1;
		}
	}
	else if(newkeys & KEY_SECONDARY_ATTACK)
	{
		if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
		{
			if(PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] != -1)
			{
				if(ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_INTERIOR_TYPE] == INTERIOR_CLUB)
				{
					if(IsPlayerInRangeOfPoint(playerid, 1.5, 1208.744140, -34.261119, 1000.953125) || IsPlayerInRangeOfPoint(playerid, 1.5, 1213.738037, -33.667881, 1000.953125))
                    {
                        if(CHARACTER_INFO[playerid][ch_CASH] <= 25) return SendClientMessage(playerid, -1, "{00FF80}No tienes dinero suficiente para pagarle a la strip");
						
						ApplyAnimation(playerid, "STRIP", RandomPayStripAnimations[random(sizeof(RandomPayStripAnimations))], 4.1, 0, 0, 0, 0, 0);
                        GivePlayerCash(playerid, -random(25), false);
                        return 1;
                    }
				}
			}
	
			if(PLAYER_WORKS[playerid][WORK_POLICE])
			{
				for(new i = 0; i != sizeof POLICE_DOORS; i ++)
				{
					if(GetPlayerInterior(playerid) != POLICE_DOORS[i][police_door_INTERIOR] || GetPlayerVirtualWorld(playerid) != POLICE_DOORS[i][police_door_WORLD]) continue;
					if(IsDynamicObjectMoving(POLICE_DOORS[i][police_door_OBJECT_ID]) || !POLICE_DOORS[i][police_door_CLOSED]) continue;
					
					new Float:pos[4];
					
					pos[0] = POLICE_DOORS[i][police_door_X] + (1.0 * floatsin(-POLICE_DOORS[i][police_door_RZ], degrees));
					pos[1] = POLICE_DOORS[i][police_door_Y] + (1.0 * floatcos(-POLICE_DOORS[i][police_door_RZ], degrees));
					pos[2] = POLICE_DOORS[i][police_door_X] + (-1.0 * floatsin(-POLICE_DOORS[i][police_door_RZ], degrees));
					pos[3] = POLICE_DOORS[i][police_door_Y] + (-1.0 * floatcos(-POLICE_DOORS[i][police_door_RZ], degrees));
					
					if(IsPlayerInRangeOfPoint(playerid, 1.8, pos[0], pos[1], POLICE_DOORS[i][police_door_Z]))
					{
						KillTimer(POLICE_DOORS[i][police_door_TIMER]);
						POLICE_DOORS[i][police_door_TIMER] = SetTimerEx("ClosePoliceDoor", 3000, false, "i", i);
						MoveDynamicObject(POLICE_DOORS[i][police_door_OBJECT_ID], POLICE_DOORS[i][police_door_X], POLICE_DOORS[i][police_door_Y], POLICE_DOORS[i][police_door_Z] + 0.01, 0.0125, 0.0, 0.0, POLICE_DOORS[i][police_door_RZ] - 85.0);
						POLICE_DOORS[i][police_door_CLOSED] = false;
						break;
					}
					else if(IsPlayerInRangeOfPoint(playerid, 1.8, pos[2], pos[3], POLICE_DOORS[i][police_door_Z]))
					{
						KillTimer(POLICE_DOORS[i][police_door_TIMER]);
						POLICE_DOORS[i][police_door_TIMER] = SetTimerEx("ClosePoliceDoor", 3000, false, "i", i);
						MoveDynamicObject(POLICE_DOORS[i][police_door_OBJECT_ID], POLICE_DOORS[i][police_door_X], POLICE_DOORS[i][police_door_Y], POLICE_DOORS[i][police_door_Z] + 0.01, 0.0125, 0.0, 0.0, POLICE_DOORS[i][police_door_RZ] + 85.0);
						POLICE_DOORS[i][police_door_CLOSED] = false;
						break;
					}
				}
			}
		}
		return 1;
	}
	else if(newkeys & KEY_WALK)
	{
		if(IsPlayerInDynamicArea(playerid, Lumberjack_Area))
		{
			if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
			{
				if(PLAYER_TEMP[playerid][pt_WORKING_IN] == WORK_LUMBERJACK)
				{
					if(PLAYER_TEMP[playerid][pt_PLAYER_LUMBERJACK_TREE] == -1)
					{
						if(PLAYER_TEMP[playerid][pt_PLAYER_CARRYING_TREE]) return SendClientMessage(playerid,0xCCCCCCCC,"Info: Lleva la leña cortada al punto marcado para talar más árboles.");
						
						for(new i = 0; i != sizeof LUMBER_TREES; i ++)
						{
							if(IsPlayerInRangeOfPoint(playerid, 2.0, LUMBER_TREES[i][lumber_tree_X], LUMBER_TREES[i][lumber_tree_Y], LUMBER_TREES[i][lumber_tree_Z]))
							{
								if(LUMBER_TREES[i][lumber_tree_STATE] == LUMBER_TREE_STATE_NORMAL)
								{
									TogglePlayerControllableEx(playerid, false);
									SetCameraBehindPlayer(playerid);
									ApplyAnimation(playerid, "CHAINSAW", "WEAPON_csaw", 4.1, true, false, false, false, 0);
									PlayAudioStreamForPlayer(playerid,"https://a.tumblr.com/tumblr_pteyf72BkT1ubdw5yo1.mp3");

									LUMBER_TREES[i][lumber_tree_STATE] = LUMBER_TREE_STATE_CUTTING;
									PLAYER_TEMP[playerid][pt_PLAYER_LUMBERJACK_TREE] = i;
									
									new Float:offset = floatdiv(PLAYER_SKILLS[playerid][WORK_LUMBERJACK], 10);
									if(offset > 30.0) offset = 30.0;
									
									PLAYER_TEMP[playerid][pt_PLAYER_LUMBERJACK_TREE_PROG] = frandom(10.0, 8.0, 2) + offset;
									
									RemovePlayerAttachedObject(playerid, 9);
									SetPlayerAttachedObject(playerid, 9, 341, 6);
									SetPlayerArmedWeapon(playerid, 0);
									
									new label_str[256];
									format(label_str, sizeof label_str, "{f46530}Árbol (%d)\n\n{FFFFFF}Talando... {E6F8E0}(%.1f%%)", PLAYER_TEMP[playerid][pt_PLAYER_LUMBERJACK_TREE], PLAYER_TEMP[playerid][pt_PLAYER_LUMBERJACK_TREE_PROG]);
									UpdateDynamic3DTextLabelText(LUMBER_TREES[ PLAYER_TEMP[playerid][pt_PLAYER_LUMBERJACK_TREE] ][lumber_tree_LABEL], -1, label_str);
									
									KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][11]);
									PLAYER_TEMP[playerid][pt_TIMERS][11] = SetTimerEx("LumberjackUp", 2000, false, "ii", playerid, PLAYER_TEMP[playerid][pt_PLAYER_LUMBERJACK_TREE]);
								}
								break;
							}
						}
					}
				}
			}
			return 1;
		}
	}

	if(RELEASED(KEY_CTRL_BACK))
	{
		if(PLAYER_TEMP[playerid][pt_MENU]==false)
		{
			if (!IsPlayerInAnyVehicle(playerid))
			{
				ShowPlayerMenu(playerid);
			}
		}
		else
		{
			HidePlayerMenu(playerid);
		}
	}
	return 1;
}
funcion LoadCarrierVehicle(playerid, carga_Carrier)
{

	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, -1, "{00FF80}Sube a un vehiculo.");

	new vehicle_ = GetPlayerVehicleID(playerid);

	if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 578) return MensajesAyuda(playerid,"Nesecitas el vehiculo DFT-30");
							
	GLOBAL_VEHICLES[vehicle_][carrier_vehicle_LOADED] = true;
	GLOBAL_VEHICLES[vehicle_][carrier_vehicle_LOADING] = true;

	GLOBAL_VEHICLES[vehicle_][gb_vehicle_TRANSPORTISTA] = true;

	GLOBAL_VEHICLES[vehicle_][gp_vehicle_TRANS_CONTIENE] = carga_Carrier;
	
	GLOBAL_VEHICLES[vehicle_][gp_vehicle_TRANS_OBJETO] = CreateDynamicObject(18763, GLOBAL_VEHICLES[vehicle_][gb_vehicle_POS][0], GLOBAL_VEHICLES[vehicle_][gb_vehicle_POS][1], GLOBAL_VEHICLES[vehicle_][gb_vehicle_POS][2]+2,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
	SetDynamicObjectMaterial(GLOBAL_VEHICLES[vehicle_][gp_vehicle_TRANS_OBJETO], 0, 10101, "2notherbuildsfe", "sl_vicwall02", 0);
	AttachDynamicObjectToVehicle(GLOBAL_VEHICLES[vehicle_][gp_vehicle_TRANS_OBJETO], vehicle_, -0.040, -2.572, 1.212, 90.399, 0.000, 0.000);
	new string[100];


	format(string,sizeof(string),"Carga cargada : ~y~%s~w~ se marco con un punto rojo en el radar la ubicacion de la entrega",Carrier_Contents[carga_Carrier][truck_content_NAME]);
	MensajesAyuda(playerid,string);

	GLOBAL_VEHICLES[vehicle_][gb_vehicle_PARAMS_ENGINE] = 1;
	UpdateVehicleParams(vehicle_);
	GLOBAL_VEHICLES[vehicle_][carrier_vehicle_DELIVERED] = false;
	GLOBAL_VEHICLES[vehicle_][carrier_vehicle_UNLOADING] = false;
	SendClientMessage(playerid,0xCCCCCCCC,"Info: El DFT ha sido cargado, dirígite al checkpoint para entregar el contenedor.");
	SetPlayerCarrierCheckpoint(playerid, vehicle_);
	return 1;
}
forward ClosePoliceDoor(i);
public ClosePoliceDoor(i)
{
	POLICE_DOORS[i][police_door_CLOSED] = true;
	MoveDynamicObject(POLICE_DOORS[i][police_door_OBJECT_ID], POLICE_DOORS[i][police_door_X], POLICE_DOORS[i][police_door_Y], POLICE_DOORS[i][police_door_Z], 0.0125, 0.0, 0.0, POLICE_DOORS[i][police_door_RZ]);
	return 1;
}

forward ClosePoliceGarageDoor(index);
public ClosePoliceGarageDoor(index)
{
	POLICE_GARAGE_DOORS[index][police_gdoor_CLOSING] = true;
	MoveDynamicObject(POLICE_GARAGE_DOORS[index][police_gdoor_OBJECT_ID], POLICE_GARAGE_DOORS[index][police_gdoor_CLOSED_X], POLICE_GARAGE_DOORS[index][police_gdoor_CLOSED_Y], POLICE_GARAGE_DOORS[index][police_gdoor_CLOSED_Z], POLICE_GARAGE_DOORS[index][police_gdoor_MOVE_SPEED], POLICE_GARAGE_DOORS[index][police_gdoor_CLOSED_RX], POLICE_GARAGE_DOORS[index][police_gdoor_CLOSED_RY], POLICE_GARAGE_DOORS[index][police_gdoor_CLOSED_RZ]);
	return 1;
}

forward CloseBarrier(i);
public CloseBarrier(i)
{
	San_Andreas_Barriers[i][barrier_CLOSING] = true;
	MoveDynamicObject(San_Andreas_Barriers[i][barrier_OBJECT_ID], San_Andreas_Barriers[i][barrier_X], San_Andreas_Barriers[i][barrier_Y], San_Andreas_Barriers[i][barrier_Z] + 0.72967, 0.0065, 0.0, -90.0, San_Andreas_Barriers[i][barrier_ROTATION]);
	return 1;
}

task StartTelevisors[3000]()
{
	for(new i = 0; i != MAX_VEHICLES; i ++)
	{
		switch(GLOBAL_VEHICLES[i][gb_vehicle_TYPE])
		{
			case VEHICLE_TYPE_RENT:
			{
				if(GLOBAL_VEHICLES[ i ][gb_vehicle_OCCUPIED] == false)
				{
					if(GLOBAL_VEHICLES[i][IN_RENT]==false)
					{
						new Float:EstadoVeh;
						GetVehicleHealth(i, EstadoVeh);
						if(EstadoVeh < 900)
						{
							RepairVehicleEx(i);
						}
					}
				}
			}
		}
	}
	new randoma_=random(14);
	switch(randoma_)
	{
		case 0: 
		{
			SetDynamicObjectMaterial(Televisor2, 1, 14654, "ab_trukstpe", "bbar_signs1", 0x00000000);
			SetDynamicObjectMaterial(Televisor1, 1, 14654, "ab_trukstpe", "bbar_signs1", 0x00000000);
			SetDynamicObjectMaterial(TeveDepa, 1, 14654, "ab_trukstpe", "bbar_signs1", 0x00000000);
		}
		case 1: 
		{
			SetDynamicObjectMaterial(Televisor2, 1, 14654, "ab_trukstpe", "bbar_stuff9", 0x00000000);
			SetDynamicObjectMaterial(Televisor1, 1, 14654, "ab_trukstpe", "bbar_stuff9", 0x00000000);
			SetDynamicObjectMaterial(TeveDepa, 1, 14654, "ab_trukstpe", "bbar_stuff9", 0x00000000);
		}
		case 2: 
		{
			SetDynamicObjectMaterial(Televisor2, 1, 14486, "ab_vegasgymbits01", "bbar_wall2", 0x00000000);
			SetDynamicObjectMaterial(Televisor1, 1, 14486, "ab_vegasgymbits01", "bbar_wall2", 0x00000000);
			SetDynamicObjectMaterial(TeveDepa, 1, 14486, "ab_vegasgymbits01", "bbar_wall2", 0x00000000);
		}
		case 3: 
		{
			SetDynamicObjectMaterial(Televisor2, 1, 14794, "ab_vegasgymmain", "bbar_wall3", 0x00000000);
			SetDynamicObjectMaterial(Televisor1, 1, 14794, "ab_vegasgymmain", "bbar_wall3", 0x00000000);
			SetDynamicObjectMaterial(TeveDepa, 1, 14794, "ab_vegasgymmain", "bbar_wall3", 0x00000000);
		}
		case 4: 
		{
			SetDynamicObjectMaterial(Televisor2, 1, 14534, "ab_wooziea", "ab_wuziwillow", 0x00000000);
			SetDynamicObjectMaterial(Televisor1, 1, 14534, "ab_wooziea", "ab_wuziwillow", 0x00000000);
			SetDynamicObjectMaterial(TeveDepa, 1, 14534, "ab_wooziea", "ab_wuziwillow", 0x00000000);
		}
		case 5: 
		{
			SetDynamicObjectMaterial(Televisor2, 1, 14544, "ab_woozieb", "otb_signs", 0x00000000);
			SetDynamicObjectMaterial(Televisor1, 1, 14544, "ab_woozieb", "otb_signs", 0x00000000);
			SetDynamicObjectMaterial(TeveDepa, 1, 14544, "ab_woozieb", "otb_signs", 0x00000000);
		}
		case 6: 
		{
			SetDynamicObjectMaterial(Televisor2, 1, 10023, "bigwhitesfe", "zombotech1", 0x00000000);
			SetDynamicObjectMaterial(Televisor1, 1, 10023, "bigwhitesfe", "zombotech1", 0x00000000);
			SetDynamicObjectMaterial(TeveDepa, 1, 10023, "bigwhitesfe", "zombotech1", 0x00000000);
		}
		case 7: 
		{
			SetDynamicObjectMaterial(Televisor2, 1, 9524, "blokmodb", "binco_sf2", 0x00000000);
			SetDynamicObjectMaterial(Televisor1, 1, 9524, "blokmodb", "binco_sf2", 0x00000000);
			SetDynamicObjectMaterial(TeveDepa, 1, 9524, "blokmodb", "binco_sf2", 0x00000000);
		}
		case 8: 
		{
			SetDynamicObjectMaterial(Televisor2, 1, 10310, "boigas_sfe", "vgnburger_256", 0x00000000);
			SetDynamicObjectMaterial(Televisor1, 1, 10310, "boigas_sfe", "vgnburger_256", 0x00000000);
			SetDynamicObjectMaterial(TeveDepa, 1, 10310, "boigas_sfe", "vgnburger_256", 0x00000000);
		}
		case 9: 
		{
			SetDynamicObjectMaterial(Televisor2, 1, 1736, "cj_ammo", "CJ_Deer1", 0x00000000);
			SetDynamicObjectMaterial(Televisor1, 1, 1736, "cj_ammo", "CJ_Deer1", 0x00000000);
			SetDynamicObjectMaterial(TeveDepa, 1, 1736, "cj_ammo", "CJ_Deer1", 0x00000000);
		}
		case 10: 
		{
			SetDynamicObjectMaterial(Televisor2, 1, 1736, "cj_ammo", "flametin", 0x00000000);
			SetDynamicObjectMaterial(Televisor1, 1, 1736, "cj_ammo", "flametin", 0x00000000);
			SetDynamicObjectMaterial(TeveDepa, 1, 1736, "cj_ammo", "flametin", 0x00000000);
		}
		case 11: 
		{
			SetDynamicObjectMaterial(Televisor2, 1, 2059, "cj_ammo2", "cj_don_post_1", 0x00000000);
			SetDynamicObjectMaterial(Televisor1, 1, 2059, "cj_ammo2", "cj_don_post_1", 0x00000000);
			SetDynamicObjectMaterial(TeveDepa, 1, 2059, "cj_ammo2", "cj_don_post_1", 0x00000000);
		}
		case 12: 
		{
			SetDynamicObjectMaterial(Televisor2, 1, 2059, "cj_ammo2", "CJ_gunbook1", 0x00000000);
			SetDynamicObjectMaterial(Televisor1, 1, 2059, "cj_ammo2", "CJ_gunbook1", 0x00000000);
			SetDynamicObjectMaterial(TeveDepa, 1, 2059, "cj_ammo2", "CJ_gunbook1", 0x00000000);
		}
		case 13: 
		{
			SetDynamicObjectMaterial(Televisor2, 1, 2692, "cj_banner2", "CJ_WHEEL_CHAIR1", 0x00000000);
			SetDynamicObjectMaterial(Televisor1, 1, 2692, "cj_banner2", "CJ_WHEEL_CHAIR1", 0x00000000);
			SetDynamicObjectMaterial(TeveDepa, 1, 2692, "cj_banner2", "CJ_WHEEL_CHAIR1", 0x00000000);
		}
		case 14: 
		{
			SetDynamicObjectMaterial(Televisor2, 1, 14636, "mafcas_signs", "sign_notice", 0x00000000);
			SetDynamicObjectMaterial(Televisor1, 1, 14636, "mafcas_signs", "sign_notice", 0x00000000);
			SetDynamicObjectMaterial(TeveDepa, 1, 14636, "mafcas_signs", "sign_notice", 0x00000000);
		}
	}
	return 1;
}
public OnPlayerUpdate(playerid)
{
	AFKDetect[playerid] = gettime();
	return 1;
}
funcion AFKChecker(playerid)
{

    if( (gettime() >= AFKDetect[playerid]+5) )
    {
        if(PlayerAFK[playerid] == false && FunctionCall[0][playerid] == false)
		{	
	        PlayerAFK[playerid] = true;
	        CallLocalFunction("OnPlayerPause", "i", playerid);
	        FunctionCall[0][playerid] = true;
	        FunctionCall[1][playerid] = false;
	        AFKTime[playerid] = gettime();
	        if(Capturing[playerid]==true)
	        {
	        	SalioDeConquista(playerid);
    		}
    	}
    }
    else
    {
        if(PlayerAFK[playerid] == true && FunctionCall[1][playerid] == false)
        {
	        PlayerAFK[playerid] = false;
	        CallLocalFunction("OnPlayerUnpause", "i", playerid);
	        FunctionCall[1][playerid] = true;
	        FunctionCall[0][playerid] = false;
	        AFKTime[playerid] = gettime()-AFKTime[playerid];
    	}
    }
    
    return 1;
}

funcion IsPlayerPause(playerid)
    if(PlayerAFK[playerid] == true) return 1;
            else return 0;

funcion TimeSincePaused(playerid) 
{
    if(PlayerAFK[playerid] == true) return gettime()-AFKTime[playerid];
    else return AFKTime[playerid];
}

ptask OnPlayerUpdateEx[350](playerid)
{
	if(GetPlayerPing(playerid) > 900)
	{
		SendClientMessage(playerid,-1,"Expulsado por tener el ping en mas de 900+, cierra paginas web o aplicaciones que utilicen internet");
		KickEx(playerid, 100);
		return 1;
	}
	if(PLAYER_TEMP[playerid][pt_KICKED]) return 1;
	if(PLAYER_TEMP[playerid][pt_GAME_STATE] != GAME_STATE_NORMAL) return 1;
	
	new player_state = GetPlayerState(playerid);
	if(player_state == PLAYER_STATE_SPAWNED || player_state == PLAYER_STATE_SPECTATING) return 1;
	
	new player_action = GetPlayerSpecialAction(playerid), Float:player_health, Float:player_armour, player_weapon = GetPlayerWeapon(playerid), current_gettime = gettime();
	GetPlayerHealth(playerid, player_health);
	GetPlayerArmour(playerid, player_armour);
	if(player_weapon) CheckWeaponAndAmmo(playerid, player_weapon);
	
	if(PLAYER_TEMP[playerid][pt_EVENTO] == false)
	{
		if(ac_Info[CHEAT_PLAYER_HEALTH][ac_Enabled])
		{
			if(player_health > CHARACTER_INFO[playerid][ch_HEALTH] + 5.0)
			{
				if(current_gettime > PLAYER_AC_INFO[playerid][CHEAT_PLAYER_HEALTH][p_ac_info_IMMUNITY])
				{
					if(!ac_Info[CHEAT_PLAYER_HEALTH][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_PLAYER_HEALTH);
					else
					{
						if(current_gettime - PLAYER_AC_INFO[playerid][CHEAT_PLAYER_HEALTH][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_PLAYER_HEALTH][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_PLAYER_HEALTH][p_ac_info_DETECTIONS] = 0;
						else PLAYER_AC_INFO[playerid][CHEAT_PLAYER_HEALTH][p_ac_info_DETECTIONS] ++;
						
						PLAYER_AC_INFO[playerid][CHEAT_PLAYER_HEALTH][p_ac_info_LAST_DETECTION] = current_gettime;
						if(PLAYER_AC_INFO[playerid][CHEAT_PLAYER_HEALTH][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_PLAYER_HEALTH][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_PLAYER_HEALTH);
					}
				}
			}
		}
		
		if(ac_Info[CHEAT_PLAYER_ARMOUR][ac_Enabled])
		{
			if(player_armour > CHARACTER_INFO[playerid][ch_ARMOUR] + 5.0)
			{
				if(current_gettime > PLAYER_AC_INFO[playerid][CHEAT_PLAYER_ARMOUR][p_ac_info_IMMUNITY])
				{
					if(!ac_Info[CHEAT_PLAYER_ARMOUR][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_PLAYER_ARMOUR);
					else
					{
						if(current_gettime - PLAYER_AC_INFO[playerid][CHEAT_PLAYER_ARMOUR][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_PLAYER_ARMOUR][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_PLAYER_ARMOUR][p_ac_info_DETECTIONS] = 0;
						else PLAYER_AC_INFO[playerid][CHEAT_PLAYER_ARMOUR][p_ac_info_DETECTIONS] ++;
						
						PLAYER_AC_INFO[playerid][CHEAT_PLAYER_ARMOUR][p_ac_info_LAST_DETECTION] = current_gettime;
						if(PLAYER_AC_INFO[playerid][CHEAT_PLAYER_ARMOUR][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_PLAYER_ARMOUR][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_PLAYER_ARMOUR);
					}
				}
			}
		}	
	}
	if(ac_Info[CHEAT_JETPACK][ac_Enabled])
	{
		if(player_action == SPECIAL_ACTION_USEJETPACK)
		{
			if(current_gettime > PLAYER_AC_INFO[playerid][CHEAT_JETPACK][p_ac_info_IMMUNITY])
			{
				if(!ac_Info[CHEAT_JETPACK][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_JETPACK);
				else
				{
					if(current_gettime - PLAYER_AC_INFO[playerid][CHEAT_JETPACK][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_JETPACK][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_JETPACK][p_ac_info_DETECTIONS] = 0;
					else PLAYER_AC_INFO[playerid][CHEAT_JETPACK][p_ac_info_DETECTIONS] ++;
					
					PLAYER_AC_INFO[playerid][CHEAT_JETPACK][p_ac_info_LAST_DETECTION] = current_gettime;
					if(PLAYER_AC_INFO[playerid][CHEAT_JETPACK][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_JETPACK][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_JETPACK);
				}
			}
		}
	}
	
	new Float:dis, Float:vehicle_health, vehicleid = GetPlayerVehicleID(playerid);
	if(!vehicleid) dis = GetPlayerDistanceFromPoint(playerid, CHARACTER_INFO[playerid][ch_POS][0], CHARACTER_INFO[playerid][ch_POS][1], CHARACTER_INFO[playerid][ch_POS][2]);
	else
	{
		dis = GetVehicleDistanceFromPoint(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_POS][0], GLOBAL_VEHICLES[vehicleid][gb_vehicle_POS][1], GLOBAL_VEHICLES[vehicleid][gb_vehicle_POS][2]);
		GetVehicleHealth(vehicleid, vehicle_health);
	}
	
	if(PLAYER_TEMP[playerid][pt_EVENTO] == false)
	{
		if(ac_Info[CHEAT_UNOCCUPIED_VEHICLE_TP][ac_Enabled] && vehicleid && player_state == PLAYER_STATE_PASSENGER)
		{
			if(floatabs(dis) > 20.0)
			{
				if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER] == INVALID_PLAYER_ID)
				{
					GLOBAL_VEHICLES[vehicleid][gb_vehicle_TP_IMMUNITY] = current_gettime + 5;
				}
			}
		}
		
		if(ac_Info[CHEAT_HIGH_POS][ac_Enabled])
		{
			if(current_gettime > PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_IMMUNITY])
			{
				if(floatabs(dis) > 80.0 && CHARACTER_INFO[playerid][ch_POS][2] > -97.0)
				{
					if(player_state != PLAYER_STATE_PASSENGER)
					{
						if(!ac_Info[CHEAT_HIGH_POS][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_HIGH_POS, dis);
						else
						{
							if(current_gettime - PLAYER_AC_INFO[playerid][CHEAT_HIGH_POS][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_HIGH_POS][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_HIGH_POS][p_ac_info_DETECTIONS] = 0;
							else PLAYER_AC_INFO[playerid][CHEAT_HIGH_POS][p_ac_info_DETECTIONS] ++;
							
							PLAYER_AC_INFO[playerid][CHEAT_HIGH_POS][p_ac_info_LAST_DETECTION] = current_gettime;
							if(PLAYER_AC_INFO[playerid][CHEAT_HIGH_POS][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_HIGH_POS][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_HIGH_POS, dis);
						}
					}
				}
			}
		}

		switch(player_state)
		{
			case PLAYER_STATE_ONFOOT:
			{
				if(ac_Info[CHEAT_PLAYER_SPEED][ac_Enabled])
				{
					if(current_gettime > PLAYER_AC_INFO[playerid][CHEAT_PLAYER_SPEED][p_ac_info_IMMUNITY])
					{
						new Float:speed = GetPlayerSpeed(playerid);
						if(speed > 1000.0)
						{
							if(!ac_Info[CHEAT_PLAYER_SPEED][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_PLAYER_SPEED, speed);
							else
							{
								if(current_gettime - PLAYER_AC_INFO[playerid][CHEAT_PLAYER_SPEED][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_PLAYER_SPEED][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_PLAYER_SPEED][p_ac_info_DETECTIONS] = 0;
								else PLAYER_AC_INFO[playerid][CHEAT_PLAYER_SPEED][p_ac_info_DETECTIONS] ++;
								
								PLAYER_AC_INFO[playerid][CHEAT_PLAYER_SPEED][p_ac_info_LAST_DETECTION] = current_gettime;
								if(PLAYER_AC_INFO[playerid][CHEAT_PLAYER_SPEED][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_PLAYER_SPEED][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_PLAYER_SPEED, speed);
							}
						}
					}
				}
				
				if(ac_Info[CHEAT_POS][ac_Enabled])
				{
					if(current_gettime > PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_IMMUNITY])
					{
						if(GetPlayerSurfingVehicleID(playerid) == INVALID_VEHICLE_ID && GetPlayerSurfingObjectID(playerid) == INVALID_OBJECT_ID && player_action != SPECIAL_ACTION_ENTER_VEHICLE && player_action != SPECIAL_ACTION_EXIT_VEHICLE)
						{
							if(floatabs(dis) > 6.0 && CHARACTER_INFO[playerid][ch_POS][2] > -97.0)
							{
								if(!ac_Info[CHEAT_POS][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_POS, dis);
								else
								{
									if(current_gettime - PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_POS][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_DETECTIONS] = 0;
									else PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_DETECTIONS] ++;
									
									PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_LAST_DETECTION] = current_gettime;
									if(PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_POS][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_POS, dis);
								}
							}
						}
					}
				}
			}
			case PLAYER_STATE_DRIVER:
			{	
				new Float:Vehicle_Speed = GetVehicleSpeed(vehicleid);
				
				if(ac_Info[CHEAT_VEHICLE_SPEED_HACK][ac_Enabled])
				{
					if(current_gettime > PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_SPEED_HACK][p_ac_info_IMMUNITY])
					{
						if(Vehicle_Speed > 1000.0)
						{
							if(!ac_Info[CHEAT_VEHICLE_SPEED_HACK][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_VEHICLE_SPEED_HACK);
							else
							{
								if(current_gettime - PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_SPEED_HACK][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_VEHICLE_SPEED_HACK][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_SPEED_HACK][p_ac_info_DETECTIONS] = 0;
								else PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_SPEED_HACK][p_ac_info_DETECTIONS] ++;
								
								PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_SPEED_HACK][p_ac_info_LAST_DETECTION] = current_gettime;
								if(PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_SPEED_HACK][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_VEHICLE_SPEED_HACK][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_VEHICLE_SPEED_HACK);
							}
						}
					}
				}
				
				if(ac_Info[CHEAT_VEHICLE_HEALTH][ac_Enabled])
				{
					if(vehicle_health > (GLOBAL_VEHICLES[vehicleid][gb_vehicle_HEALTH] + 20.0))
					{
						if(current_gettime > PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_HEALTH][p_ac_info_IMMUNITY])
						{						
							if(!ac_Info[CHEAT_VEHICLE_HEALTH][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_VEHICLE_HEALTH, (GLOBAL_VEHICLES[vehicleid][gb_vehicle_HEALTH] + 5.0) - vehicle_health);
							else
							{
								if(current_gettime - PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_HEALTH][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_VEHICLE_HEALTH][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_HEALTH][p_ac_info_DETECTIONS] = 0;
								else PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_HEALTH][p_ac_info_DETECTIONS] ++;
								
								PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_HEALTH][p_ac_info_LAST_DETECTION] = current_gettime;
								if(PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_HEALTH][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_VEHICLE_HEALTH][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_VEHICLE_HEALTH);
							}
						}
					}
				}
				
				if(ac_Info[CHEAT_POS][ac_Enabled])
				{
					if(current_gettime > PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_IMMUNITY])
					{
						if(Vehicle_Speed < 20.0 && floatabs(dis) >= 10.0 && GLOBAL_VEHICLES[vehicleid][gb_vehicle_POS][2] > -97.0)
						{
							if(!ac_Info[CHEAT_POS][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_POS, dis);
							else
							{
								if(current_gettime - PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_POS][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_DETECTIONS] = 0;
								else PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_DETECTIONS] ++;
								
								PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_LAST_DETECTION] = current_gettime;
								if(PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_POS][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_POS, dis);
							}
						}
					}
				}
				
				if(ac_Info[CHEAT_VEHICLE_NOFUEL][ac_Enabled])
				{
					new Keys, ud, lr;
					GetPlayerKeys(playerid, Keys, ud, lr);
					if(Keys == KEY_SPRINT)
					{
						if(!GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE] && Vehicle_Speed > 60.0 && GLOBAL_VEHICLES[vehicleid][gb_vehicle_POS][2] > -97.0 && VEHICLE_INFO[ GLOBAL_VEHICLES[vehicleid][gb_vehicle_MODELID] - 400][vehicle_info_ENGINE])
						{
							if(current_gettime > PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_NOFUEL][p_ac_info_IMMUNITY])
							{
								if(!ac_Info[CHEAT_VEHICLE_NOFUEL][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_VEHICLE_NOFUEL);
								else
								{
									if(current_gettime - PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_NOFUEL][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_VEHICLE_NOFUEL][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_NOFUEL][p_ac_info_DETECTIONS] = 0;
									else PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_NOFUEL][p_ac_info_DETECTIONS] ++;
									
									PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_NOFUEL][p_ac_info_LAST_DETECTION] = current_gettime;
									if(PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_NOFUEL][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_VEHICLE_NOFUEL][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_VEHICLE_NOFUEL);
								}
							}
						}
					}
				}
			}
		}
	}
	CHARACTER_INFO[playerid][ch_HEALTH] = player_health;
	CHARACTER_INFO[playerid][ch_ARMOUR] = player_armour;
	GetPlayerPos(playerid, CHARACTER_INFO[playerid][ch_POS][0], CHARACTER_INFO[playerid][ch_POS][1], CHARACTER_INFO[playerid][ch_POS][2]);
	if(vehicleid)
	{
		GetVehiclePos(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_POS][0], GLOBAL_VEHICLES[vehicleid][gb_vehicle_POS][1], GLOBAL_VEHICLES[vehicleid][gb_vehicle_POS][2]);
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_HEALTH] = vehicle_health;
	}
	/**/
	if(creatingzone[playerid])
	{
		new keys,ud,lr;
		GetPlayerKeys(playerid,keys,ud,lr);
		if(lr == KEY_LEFT)
		{
			minX[playerid] -= 6.0;
			GangZoneDestroy(tempzone[playerid]);
			tempzone[playerid] =  GangZoneCreate(minX[playerid],minY[playerid],maxX[playerid],maxY[playerid]);
			GangZoneShowForPlayer(playerid, tempzone[playerid], ZONE_COLOR);

		}
		else
		if(lr == KEY_RIGHT)
		{
			maxX[playerid] += 6.0;
			GangZoneDestroy(tempzone[playerid]);
			tempzone[playerid] =  GangZoneCreate(minX[playerid],minY[playerid],maxX[playerid],maxY[playerid]);
			GangZoneShowForPlayer(playerid, tempzone[playerid],ZONE_COLOR);
		}
		else
		if(ud == KEY_UP)
		{
			maxY[playerid] += 6.0;
			GangZoneDestroy(tempzone[playerid]);
			tempzone[playerid] =  GangZoneCreate(minX[playerid],minY[playerid],maxX[playerid],maxY[playerid]);
			GangZoneShowForPlayer(playerid, tempzone[playerid], ZONE_COLOR);
		}

		else
		if(ud == KEY_DOWN)
		{
			minY[playerid] -= 6.0;
			GangZoneDestroy(tempzone[playerid]);
			tempzone[playerid] =  GangZoneCreate(minX[playerid],minY[playerid],maxX[playerid],maxY[playerid]);
			GangZoneShowForPlayer(playerid, tempzone[playerid], ZONE_COLOR);
		}
		else if(keys & KEY_WALK)
		{

			creatingzone[playerid] = false;
			TogglePlayerControllable(playerid,true);
			//ShowPlayerDialog(playerid,ZONECREATE,DIALOG_STYLE_INPUT,"Escribe el nombre de la zona","Introduce el nombre de esta zona de clanes","Crear","");
            ShowPlayerDialog(playerid,MAKE_ZONE,DIALOG_STYLE_MSGBOX,"Crear zona","Preciona continuar para crear la zona","Continuar","Cancelar");
			GangZoneDestroy(tempzone[playerid]);
		}
	}
	/**/
	new Keysa,fairea,lra;
	GetPlayerKeys(playerid,Keysa,fairea,lra);
	if(Keysa == KEY_SUBMISSION)
	{
		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
    	{
    		if (gettime() - 1 < MensajeAyuda[playerid]) return 1;
    		if(ENCENDIO_MOTOR[playerid] == false)
    		{
    			new vehiculo_karen = GetPlayerVehicleID(playerid);
    			if(vehiculo_karen == PLAYER_TEMP[playerid][tp_VEHICLE]) return GameTextForPlayer(playerid,"~n~~n~~n~~n~~n~~n~~n~Vehiculo invalido",3000,3);
	    		if(GLOBAL_VEHICLES[vehiculo_karen][gb_vehicle_PARAMS_ENGINE]==0)
	    		{
	    			if(GLOBAL_VEHICLES[vehiculo_karen][gb_vehicle_TYPE] == VEHICLE_TYPE_WORK)
					{
						if(TRUCK_VEHICLE[vehiculo_karen][truck_vehicle_LOADING]) return GameTextForPlayer(playerid,"~r~~n~~n~~n~~n~Debes esperar a que se cargue el camión para arrancar.",7000, 3);
						if(TRUCK_VEHICLE[vehiculo_karen][truck_vehicle_UNLOADING]) return GameTextForPlayer(playerid,"~r~~n~~n~~n~~n~Debes esperar a que se descargue el camión para arrancar.",7000, 3);
					}

					if(PLAYER_TEMP[playerid][pt_IN_TUNING_GARAGE]) return GameTextForPlayer(playerid,"Termina primero.",7000,3);
					if(REPOSTANDO_VEHICULO[playerid]==true) return MensajesAyuda(playerid,"Espera a que se reposte el vehiculo");

		    		ENCIENDO_MOTOR[playerid]++;
		    		if(ENCIENDO_MOTOR[playerid] == 1)
		    		{
		    			SendAccion(playerid,"*Intenta encender el motor del vehiculo..*",6000);
		    			TRUE_MOTOR[playerid]=true;
		    			//SetTimerEx("CheckMotor",5000, false,"d",playerid);
		    			for(new i=0; i <= 3; i++) PlayerTextDrawShow(playerid,PlayerTextdraws[playerid][textdraw_enciendomoto][i]);
		    		}
		    		if(ENCIENDO_MOTOR[playerid] != 10)
		    		{
		    			PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_enciendomoto][2], floatadd(280.629760, floatdiv(float(ENCIENDO_MOTOR[playerid]), 0.1199469)), 0.000000);
						PlayerTextDrawShow(playerid,PlayerTextdraws[playerid][textdraw_enciendomoto][2]);
						if(ENCIENDO_MOTOR[playerid] >= 10)
		    			{
		    				TRUE_MOTOR[playerid]=false;
		    				ENCENDIO_MOTOR[playerid] = true;
		    				PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][textdraw_enciendomoto][3], "Encendido");
							PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_enciendomoto][2], floatadd(280.629760, floatdiv(10, 0.1199469)), 0.000000);
							PlayerTextDrawShow(playerid,PlayerTextdraws[playerid][textdraw_enciendomoto][2]);
							PlayerTextDrawShow(playerid,PlayerTextdraws[playerid][textdraw_enciendomoto][3]);
							PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][textdraw_enciendomoto][2], 0x00CB19FF);
							PlayerTextDrawShow(playerid,PlayerTextdraws[playerid][textdraw_enciendomoto][2]);
							StartEngineAndReset(playerid);
		    			}
		    		}
	    		}
    		}
    	}
	}
 	else
 	{
 		if(TRUE_MOTOR[playerid]==true)
 		{
 			CheckMotor(playerid);
 			TRUE_MOTOR[playerid]=false;
 		}
 	}
	if(Keysa == KEY_SPRINT)
	{
    	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
    	{
	    	new vehiculo_karen = GetPlayerVehicleID(playerid);
	    	if(GLOBAL_VEHICLES[vehiculo_karen][gb_vehicle_ACELERACION]==1)
	    	{
	    		new Float:xx,Float:xy,Float:xz;
		    	if(GLOBAL_VEHICLES[vehiculo_karen][gb_vehicle_ACELERACION_ACTIVE] == 1)
		    	{
		    		new Float:Vehicle_Speed = GetVehicleSpeed(vehicleid);
		    		new modelid = GetVehicleModel(vehicleid);
		    		if(Vehicle_Speed < VEHICLE_INFO[ modelid - 400 ][vehicle_info_MAX_VEL]) 
		    		{
			    		GetVehicleVelocity(vehiculo_karen, xx, xy, xz);
		  				SetVehicleVelocity(vehiculo_karen, xx+(xx / 3), xy+(xy / 3), xz+(xz / 3));
	  				}
		    	}//xx / 5
	    	}
    	}
	    
	}

	if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_POLICE)
	{
		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
    	{
			foreach(new i : Radares)
			{
				if(IsPlayerInRangeOfPoint(playerid,30,RADARESDEVELOCIDAD[i][PosX],RADARESDEVELOCIDAD[i][PosY],RADARESDEVELOCIDAD[i][PosZ]))
				{
					new Float:Vehicle_Speed = GetVehicleSpeed(vehicleid);
					if(Vehicle_Speed >= RADARESDEVELOCIDAD[i][SPEEDCHECK])
					{
						if (gettime() - 4 < RADARCHECKVELOCIDAD[playerid]) return 1;
						RADARCHECKVELOCIDAD[playerid] = gettime();
						
						new city[45], zone[45];
						GetPlayerZones(playerid, city, zone);

						format(string2,sizeof(string2),"{01DF01}[CENTRAL]: El vehiculo de matriculas: (%s) fue detectado por un radar en la zona: (%s, %s) Razon: Exceder la velocidad maxima permitida, (Velocidad: %d | Max permitida: %d)",GLOBAL_VEHICLES[ vehicleid ][gb_vehicle_NUMBER_PLATE],city,zone,floatround(Vehicle_Speed),RADARESDEVELOCIDAD[i][SPEEDCHECK]);
						//printf(string2);
						SendPoliceRadioMessage(-1, -1, string2);
						MensajesAyuda(playerid,"~r~~h~~h~Fuiste detectado por un radar por exceder la velocidad, se a dado aviso a las autoridades");
					}
				}
			}
		}
	}
	 

	/*grafitis*/

	weapon_ida[playerid]=GetPlayerWeapon(playerid);

    if(weapon_ida[playerid] != Armed_Weapon[playerid]) 
    {
        Check_Weapon_Skin(playerid, weapon_ida[playerid]);
        Armed_Weapon[playerid] = weapon_ida[playerid];
    }

	if(GetPlayerAnimationIndex(playerid) == 640 || 1167)
	{
		if(GetPlayerWeapon(playerid) == 41)
		{
			if (gettime() - 2 < ANTISPAMGRAFITI[playerid]) return 1;
		    ANTISPAMGRAFITI[playerid] = gettime();

			foreach(new i : DisputaGrafitis)
			{
				
				if(IsPlayerInRangeOfPoint(playerid,2, GRAFITI[i][PosX],GRAFITI[i][PosY],GRAFITI[i][PosZ]))
		    	{
		    		if(PLAYER_CREW[playerid][player_crew_VALID] == false) return SendClientMessage(playerid,-1,"Debes estar en una banda para capturar grafitis");
	    			new Keys,faire,lr;
			 		GetPlayerKeys(playerid,Keys,faire,lr);

				 	PLAYER_TEMP[playerid][GrafitiX] = GRAFITI[i][PosX];
					PLAYER_TEMP[playerid][GrafitiY] = GRAFITI[i][PosY];
					PLAYER_TEMP[playerid][GrafitiZ] = GRAFITI[i][PosZ];

					if(Keys & KEY_HANDBRAKE && Keys & KEY_FIRE) 
					{
						if(GRAFITI[i][CAPTURADO_POR_PLAYER] != playerid && GRAFITI[i][CAPTURANDO] == true) return MensajesAyuda(playerid,"Alguien mas esta capturando el grafiti");
						if(GRAFITI[i][CREW_ID] == PLAYER_CREW[playerid][player_crew_ID]) return MensajesAyuda(playerid,"Este grafiti ya le pertene a tu banda");
						if(GRAFITI[i][LOCKED] == true ) return SendClientMessageEx(playerid,-1,"Este grafiti sera desbloqueado en: %s",ConvertirSegundosAFK(GRAFITI[i][TIMER]));
						UpdateGrafiti(playerid, i);
						
					}
		    	}
			} 
		}
	}
	
	if(PLAYER_TEMP[playerid][Capturando_Grafiti]==true)
	{
		if(!IsPlayerInRangeOfPoint(playerid,5, PLAYER_TEMP[playerid][GrafitiX],PLAYER_TEMP[playerid][GrafitiY],PLAYER_TEMP[playerid][GrafitiZ]))
		{
			new id = PLAYER_TEMP[playerid][Capturando_Grafiti_ID];
			PLAYER_TEMP[playerid][Capturando_Grafiti]=false;
			MensajesAyuda(playerid,"Fallaste al capturar el grafiti, sera desbloqueado de nuevo en 30 minutos");

			GRAFITI[id][STATUS]=0;
			GRAFITI[id][CAPTURADO_POR]=0;
			GRAFITI[id][CAPTURANDO]=false;
			GRAFITI[id][CAPTURADO_POR_PLAYER] = -1;
			GRAFITI[id][LOCKED]=true;
			GRAFITI[id][TIMER] = GRAFITI_LOCK_TIME;
		    GRAFITI[id][TIMER_MAIN] = SetTimerEx("UNLOCKGRAFITI",1000,true,"i",id);
		}
	}
	return 1;
}

StartEngineAndReset(playerid)
{
	SendAccion(playerid,"*Enciende el motor del vehiculo*",6000);
	SetTimerEx("OcultarEncendido",2500, false,"d",playerid);
	new vehicleid = GetPlayerVehicleID(playerid);
    PLAYER_TEMP[playerid][pt_TIMERS][7] = SetTimerEx("StartVehicleEngine", 10, false, "ii", playerid, vehicleid);
	return 1;
}
funcion CheckMotor(playerid)
{
	if(TRUE_MOTOR[playerid]==true)
	{
		PlayerPlaySound(playerid, 6402, 0.0, 0.0,0.0);
		SendAccion(playerid,"*Intenta encender el motor del vehiculo pero falla*",6000);
		for(new i=0; i <= 3; i++) PlayerTextDrawHide(playerid,PlayerTextdraws[playerid][textdraw_enciendomoto][i]);
		PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][textdraw_enciendomoto][2], -1);
		PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][textdraw_enciendomoto][3], "Encendiendo..");
		ENCIENDO_MOTOR[playerid]=0;
		ENCENDIO_MOTOR[playerid]=false;

		GameTextForPlayer(playerid,"~r~~n~~n~~n~~n~!!", 5000, 3);
	}
	return 1;
}
funcion OcultarEncendido(playerid)
{
	for(new i=0; i <= 3; i++) PlayerTextDrawHide(playerid,PlayerTextdraws[playerid][textdraw_enciendomoto][i]);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][textdraw_enciendomoto][2], -1);
	PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][textdraw_enciendomoto][3], "Encendiendo..");
	ENCIENDO_MOTOR[playerid]=0;
	ENCENDIO_MOTOR[playerid]=false;
	return 1;
}
UpdateGrafiti(playerid, id)
{
	if(VARIABLE_MULTI_USO[playerid] == GetPlayerAmmo(playerid))
	{
		GameTextForPlayer(playerid,"~n~~n~~n~~n~Captura bien el grafiti.",3000, 3);
		return 1;
	}
	VARIABLE_MULTI_USO[playerid] = GetPlayerAmmo(playerid);
	GRAFITI[id][CAPTURANDO]=true;
	GRAFITI[id][CAPTURADO_POR_PLAYER] = playerid;
	GRAFITI[id][CAPTURADO_POR]=PLAYER_CREW[playerid][player_crew_ID];
	new string[250];
	PLAYER_TEMP[playerid][Capturando_Grafiti_ID] = id;
	PLAYER_TEMP[playerid][Capturando_Grafiti]=true;
	if(GRAFITI[id][CAPTURANDO]==true)
	{
		if(GRAFITI[id][CAPTURADO_POR] == PLAYER_CREW[playerid][player_crew_ID])
		{
			GRAFITI[id][STATUS]=GRAFITI[id][STATUS]+random(10);
			//
			foreach(new i : Player)
			{
				if(PLAYER_CREW[i][player_crew_VALID] == true)
				{
					if(GRAFITI[id][CREW_ID] == PLAYER_CREW[i][player_crew_ID])
					{
						if (gettime() - 8 < ANTISPAMGRAFITI[i]) return 1;
				    	ANTISPAMGRAFITI[i] = gettime();

						new GPS_EX[MAX_ZONE_NAME];
						GetZoneName(GRAFITI[id][PosX],GRAFITI[id][PosY], GPS_EX, MAX_ZONE_NAME);

						format(string,sizeof(string),"{ff0000}[ALERTA BANDA]: El grafiti en la zona \"%s\" esta siendo capturado por otra banda.",GPS_EX);
						SendClientMessage(i,-1,string);
					}
				}
			}
			//
			format(string,sizeof(string),"~n~~n~~n~~n~%sCapturando grafiti..~n~~w~%d %",RandomS(),GRAFITI[id][STATUS]);
			GameTextForPlayer(playerid,string,999,3);
			if(GRAFITI[id][STATUS]>= 100)
			{
				foreach(new i : Player)
				{
					if(PLAYER_CREW[i][player_crew_VALID] == true)
					{
						if(GRAFITI[id][CREW_ID] == PLAYER_CREW[i][player_crew_ID])
						{
							new GPS_EX[MAX_ZONE_NAME];
							GetZoneName(GRAFITI[id][PosX],GRAFITI[id][PosY], GPS_EX, MAX_ZONE_NAME);
							format(string,sizeof(string),"{ff0000}[ALERTA BANDA]: El grafiti en la zona \"%s\" fue CAPTURADO por otra banda.",GPS_EX);
							SendClientMessage(i,-1,string);
						}
					}
				}
				//
				CapturarGrafiti(playerid,id);
				//
			}
		}
		else
		{
			SendClientMessage(playerid,-1,"Este grafiti ya esta siendo capturado");
		}
	}
	return 1;
}
CapturarGrafiti(playerid, id)
{
	GRAFITI[id][LOCKED]=true;
	new string[200];
	GRAFITI[id][TIMER] = GRAFITI_LOCK_TIME;
    GRAFITI[id][TIMER_MAIN] = SetTimerEx("UNLOCKGRAFITI",1000,true,"i",id);
    PLAYER_TEMP[playerid][Capturando_Grafiti]=false;
	new DB_Query[200];
	format(DB_Query, sizeof(DB_Query), "UPDATE `GRAFITIS` SET `CREWID` = '%d' WHERE `ID` = '%d';",PLAYER_CREW[playerid][player_crew_ID],id);
    db_query(Database, DB_Query);

    GRAFITI[id][CAPTURADO_POR_PLAYER] = -1;
    GRAFITI[id][STATUS]=0;
	GRAFITI[id][CAPTURADO_POR]=0;
	GRAFITI[id][CAPTURANDO]=false;


    GRAFITI[id][CREW_ID] = PLAYER_CREW[playerid][player_crew_ID];
    new Text[70];
	format(Text,sizeof(Text),"{%06x}%s",GetColorCrewId(GRAFITI[id][CREW_ID]) >>> 8,GetNameBandaId(GRAFITI[id][CREW_ID]));
	SetDynamicObjectMaterialText(GRAFITI[id][OBJETO], 0, Text, OBJECT_MATERIAL_SIZE_512x512, "Arial", 80, 1, -1, 0, 1);

    foreach(new i : Player)
    {
    	if(PLAYER_CREW[i][player_crew_ID] == PLAYER_CREW[playerid][player_crew_ID])
    	{
    		new GPS_EX[MAX_ZONE_NAME];
			GetZoneName(GRAFITI[id][PosX],GRAFITI[id][PosY], GPS_EX, MAX_ZONE_NAME);
			format(string,sizeof(string),"{2BCA0F}[INFO BANDA]: El grafiti en la zona \"%s\" fue CAPTURADO por tu banda + $ 200.",GPS_EX);
			SendClientMessage(i,-1,string);
			GivePlayerCash(playerid,200);
    	}
    }
	return  1;
}
funcion UNLOCKGRAFITI(id)
{
    GRAFITI[id][TIMER]--;
    if(GRAFITI[id][TIMER] == 0)
    {
        KillTimer(GRAFITI[id][TIMER_MAIN]);
        GRAFITI[id][LOCKED] = false;
    }
    return 1;
}
RandomS()
{
    new raa[6];
    new ra=random(5);
    switch(ra)
    {
        case 0:raa="~r~";
        case 1:raa="~y~";
        case 2:raa="~b~";
        case 3:raa="~p~";
        case 4:raa="~w~";
    }
    return raa;
}
stock ConvertirSegundosAFK(time)
{
    new string[50], minutos, segundos;
    if(time > 59)
    {
        minutos = floatround(time / 60);
        segundos = floatround(time - minutos * 60);
        format(string, sizeof(string), "%02d minutos con %02d segundos", minutos, segundos);
    }
    else
    {
        segundos = floatround(time);
        format(string, sizeof(string), "%02d segundos", segundos);
    }
    return string;
}
/*UpdateGrafiti(playerid, id)
{
	new karen=PLAYER_CREW[playerid][player_crew_INDEX];
	if(GRAFITISTATUS[ karen ] [ ID_CONQUISTA ] == false)
	{
		GRAFITISTATUS[ karen ] [ ID_CONQUISTA ] = true;
		CANTIDADGRAFITI++;

		CANTIDADGRAFITI = Iter_Free(Grafiti_Combate); 
		Iter_Add(Grafiti_Combate, CANTIDADGRAFITI);

		GRAFITISTATUS[ karen ] [ TRAER_ID ] = CANTIDADGRAFITI;
		format(GET_DINFO[ GRAFITISTATUS[ karen ] [ TRAER_ID ] ][ NOMBRE_CREW ],25,"%s",CREW_INFO[ karen ][crew_NAME]);
	}
	if(GRAFITISTATUS[ karen ] [ ID_CONQUISTA ] == true)
	{
		new did=GRAFITISTATUS[ karen ] [ TRAER_ID ];
		GRAFITISTATUS[ karen ] [ STATUS ]=GRAFITISTATUS[ karen ] [ STATUS ]+5;

		GET_DINFO[ did ][ STATUS ]=GRAFITISTATUS[ karen ] [ STATUS ];


		printf("%s | %d",GET_DINFO[ did ][ NOMBRE_CREW ],GET_DINFO[ did ][ STATUS ]);
		new release[1000],string[1000];
		for(new a=0; a <= CANTIDADGRAFITI; a++)
		{
			printf("-- %s | %d",GET_DINFO[ a ][ NOMBRE_CREW ],GET_DINFO[ a ][ STATUS ]);
			format(string,sizeof(string),"%s~n~%s: '%d -/-",string,GET_DINFO[ a ][ NOMBRE_CREW ],GET_DINFO[ a ][ STATUS ]);//string,CREW_INFO[ karen ][crew_NAME],GRAFITISTATUS[ karen ] [ STATUS ]);
		}
		format(release,sizeof(release),"Grafiti en '%s'%s",GRAFITI[id][NOMBRE],string);
		TextDrawSetString(Textdraws[textdraw_grafiti], release);
		foreach(new u : Player)
		{
			TextDrawShowForPlayer(u,Textdraws[textdraw_grafiti]);
		}
	}
	return 1;
}*/
//stock setplayerposex
SetVehiclePosTRE(playerid,vehicleid,Float:x, Float:y, Float:z, Float:angle,world,interior)
{
	PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_IMMUNITY] = gettime() + 3;
	PLAYER_AC_INFO[playerid][CHEAT_STATE_SPAMMER][p_ac_info_IMMUNITY] = gettime() + 3;
	PLAYER_AC_INFO[playerid][CHEAT_UNOCCUPIED_VEHICLE_TP][p_ac_info_IMMUNITY] = gettime() + 5;
	CHARACTER_INFO[playerid][ch_POS][0] = x;
	CHARACTER_INFO[playerid][ch_POS][1] = y;
	CHARACTER_INFO[playerid][ch_POS][2] = z;
	CHARACTER_INFO[playerid][ch_ANGLE] = angle;

	GLOBAL_VEHICLES[vehicleid][gb_vehicle_TP_IMMUNITY] = gettime() + 5;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_POS][0] = x;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_POS][1] = y;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_POS][2] = z;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_ATTACHED_TO] = INVALID_VEHICLE_ID;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_INTERIOR] = interior;

	LinkVehicleToInterior(vehicleid, interior);
	SetVehiclePos(vehicleid, x,y,z);
	SetVehicleZAngle(vehicleid,angle);
	SetVehicleVirtualWorld(vehicleid, world);
	SetPlayerVirtualWorld(playerid, world);

	return 1;
}
SetPlayerPosEx(playerid, Float:x, Float:y, Float:z, Float:angle, interior, world, freeze = 0, addoffset = 0)
{
	PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_IMMUNITY] = gettime() + 3;
	PLAYER_AC_INFO[playerid][CHEAT_STATE_SPAMMER][p_ac_info_IMMUNITY] = gettime() + 3;
	PLAYER_AC_INFO[playerid][CHEAT_UNOCCUPIED_VEHICLE_TP][p_ac_info_IMMUNITY] = gettime() + 5;
	
	if(addoffset)
	{
		x += (1.5 * floatsin(-angle, degrees));
		y += (1.5 * floatcos(-angle, degrees));
	}
	
	CHARACTER_INFO[playerid][ch_POS][0] = x;
	CHARACTER_INFO[playerid][ch_POS][1] = y;
	CHARACTER_INFO[playerid][ch_POS][2] = z;
	CHARACTER_INFO[playerid][ch_ANGLE] = angle;
	
	SetPlayerPos(playerid, x, y, z);
	SetPlayerFacingAngle(playerid, angle);
	SetPlayerInterior(playerid, interior);
	SetPlayerVirtualWorld(playerid, world);
	SetCameraBehindPlayer(playerid);
	 
	if(freeze)
	{
		TogglePlayerControllableEx(playerid, false);
		KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][3]);
		PLAYER_TEMP[playerid][pt_TIMERS][3] = SetTimerEx("TogglePlayerControl", 2000, false, "ib", playerid, true);
	}
	return 1;
}

forward TogglePlayerControl(playerid, bool:controlable);
public TogglePlayerControl(playerid, bool:controlable)
{
	return TogglePlayerControllableEx(playerid, controlable);
}


GetNearestHospitalForPlayer(playerid)
{
	new Float:distance = 99999.0,
        Float:tmp_distance,
        closest = -1; 

    for(new i = 0; i < sizeof Hospital_Spawn_Positions; i++) 
    { 
        tmp_distance = GetPlayerDistanceFromPoint(playerid, Hospital_Spawn_Positions[i][0], Hospital_Spawn_Positions[i][1], Hospital_Spawn_Positions[i][2]); 
        if (tmp_distance < distance) 
        { 
            distance = tmp_distance; 
            closest = i;
        } 
    }
	return closest;
}


/*
new Float:Hospital_1_Rooms[][4] =  
{ 
	{1956.842041, 1160.172607, -5.208699, 271.393920},
	{1955.839355, 1166.306152, -5.208699, 270.912200},
	{1956.226684, 1172.363159, -5.208699, 267.923767}
}; */

GetHospitalSpawnPosition(hospital, &Float:x, &Float:y, &Float:z, &Float:angle, &interior, &local_interior, &rp_state)
{
	x = Hospital_Spawn_Positions[hospital][0];
	y = Hospital_Spawn_Positions[hospital][1];
	z = Hospital_Spawn_Positions[hospital][2];
	angle = Hospital_Spawn_Positions[hospital][3];
	interior = 0;
	local_interior = 0;
	rp_state = ROLEPLAY_STATE_NORMAL;
	
	/*switch(hospital)
	{
		case 1:
		{
			new room = random(sizeof(Hospital_1_Rooms));
			x = Hospital_1_Rooms[room][0];
			y = Hospital_1_Rooms[room][1];
			z = Hospital_1_Rooms[room][2];
			angle = Hospital_1_Rooms[room][3];
			interior = 10;
			local_interior = 1;
			rp_state = ROLEPLAY_STATE_INTERIOR;
		}
		default:
		{
			x = Hospital_Spawn_Positions[hospital][0];
			y = Hospital_Spawn_Positions[hospital][1];
			z = Hospital_Spawn_Positions[hospital][2];
			angle = Hospital_Spawn_Positions[hospital][3];
			interior = 0;
			local_interior = 0;
			rp_state = ROLEPLAY_STATE_NORMAL;
		}
	}*/
	return 1;
}

UpdateHospitalSizeTextdrawLife(playerid)
{
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][2], 270.0 + ( PLAYER_TEMP[playerid][pt_HOSPITAL_LIFE] * 0.98), 0.000000);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][2]);
	return 1;
}

forward HealthUp(playerid);
public HealthUp(playerid)
{
	if(CHARACTER_INFO[playerid][ch_STATE] != ROLEPLAY_STATE_HOSPITAL) return 1;
	
	if(PLAYER_TEMP[playerid][pt_HOSPITAL_LIFE] < 100.0)
	{
		if(ACCOUNT_INFO[playerid][ac_SU]==0) PLAYER_TEMP[playerid][pt_HOSPITAL_LIFE] += 5.0;
		if(ACCOUNT_INFO[playerid][ac_SU]==1) PLAYER_TEMP[playerid][pt_HOSPITAL_LIFE] += 10.0;
		if(ACCOUNT_INFO[playerid][ac_SU]>=2) PLAYER_TEMP[playerid][pt_HOSPITAL_LIFE] += 30.0;
		//else PLAYER_TEMP[playerid][pt_HOSPITAL_LIFE] += 5.0;
		
		if(PLAYER_TEMP[playerid][pt_HOSPITAL_LIFE] > 100.0) PLAYER_TEMP[playerid][pt_HOSPITAL_LIFE] = 100.0;
		UpdateHospitalSizeTextdrawLife(playerid);
		KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][4]);
		PLAYER_TEMP[playerid][pt_TIMERS][4] = SetTimerEx("HealthUp", 1000, false, "i", playerid);
	}
	else
	{
		if(ACCOUNT_INFO[playerid][ac_SU]) CHARACTER_INFO[playerid][ch_HEALTH] = 100.0;
		else CHARACTER_INFO[playerid][ch_HEALTH] = 50.0;
		
		SetPlayerHealthEx(playerid, CHARACTER_INFO[playerid][ch_HEALTH]);
		
		ClearPlayerChat(playerid);
		SendClientMessage(playerid, -1, "{E6F8E0}Te has recuperado.");
		new price = ACCOUNT_INFO[playerid][ac_LEVEL] * 200;
		if(price > 1200) price = 1200;
		price += minrand(100, 200);
		
		if(price > CHARACTER_INFO[playerid][ch_CASH])
		{
			price = CHARACTER_INFO[playerid][ch_CASH];
			if(price < 0) price = 0;
		}

		SendClientMessageEx(playerid, -1, "{E6F8E0}El coste de los servicios médicos ofrecidos es de {98d16c}%s$", number_format_thousand(price));
		GivePlayerCash(playerid, -price);
		PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][0]);
		PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][1]);
		PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][2]);
		CHARACTER_INFO[playerid][ch_INTERIOR_EXTRA] = 0;
		PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] = -1;
		
		if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED)
		{
			CHARACTER_INFO[playerid][ch_STATE] = ROLEPLAY_STATE_JAIL;
			CHARACTER_INFO[playerid][ch_POLICE_JAIL_TIME] = 300;
			CHARACTER_INFO[playerid][ch_POLICE_JAIL_ID] = 0;
			PLAYER_TEMP[playerid][pt_ENTER_JAIL_TIME] = gettime();
			SetSpawnInfo(playerid, NO_TEAM, CHARACTER_INFO[playerid][ch_SKIN], JAIL_POSITIONS[ CHARACTER_INFO[playerid][ch_POLICE_JAIL_ID] ][jail_X], JAIL_POSITIONS[ CHARACTER_INFO[playerid][ch_POLICE_JAIL_ID]  ][jail_Y], JAIL_POSITIONS[ CHARACTER_INFO[playerid][ch_POLICE_JAIL_ID]  ][jail_Z], JAIL_POSITIONS[ CHARACTER_INFO[playerid][ch_POLICE_JAIL_ID]  ][jail_ANGLE], 0, 0, 0, 0, 0, 0);
			CHARACTER_INFO[playerid][ch_INTERIOR] = JAIL_POSITIONS[ CHARACTER_INFO[playerid][ch_POLICE_JAIL_ID]  ][jail_INTERIOR];
			
			new time = CHARACTER_INFO[playerid][ch_POLICE_JAIL_TIME] - (gettime() - PLAYER_TEMP[playerid][pt_ENTER_JAIL_TIME]);
			SendClientMessageEx(playerid, -1, "{E6F8E0}Te quedan %s minutos de condena.", TimeConvert(time));
		}
		else
		{
			GetHospitalSpawnPosition(PLAYER_TEMP[playerid][pt_HOSPITAL], CHARACTER_INFO[playerid][ch_POS][0], CHARACTER_INFO[playerid][ch_POS][1], CHARACTER_INFO[playerid][ch_POS][2], CHARACTER_INFO[playerid][ch_ANGLE], CHARACTER_INFO[playerid][ch_INTERIOR], CHARACTER_INFO[playerid][ch_INTERIOR_EXTRA], CHARACTER_INFO[playerid][ch_STATE]);
			SetSpawnInfo(playerid, NO_TEAM, CHARACTER_INFO[playerid][ch_SKIN], CHARACTER_INFO[playerid][ch_POS][0], CHARACTER_INFO[playerid][ch_POS][1], CHARACTER_INFO[playerid][ch_POS][2], CHARACTER_INFO[playerid][ch_ANGLE], 0, 0, 0, 0, 0, 0);
		}
		PLAYER_TEMP[playerid][pt_PLAYER_FINISH_HOSPITAL] = true;
		TogglePlayerSpectatingEx(playerid, false);
	}
	return 1;
}

TogglePlayerSpectatingEx(playerid, bool:spectate)
{
	PLAYER_AC_INFO[playerid][CHEAT_STATE_SPAMMER][p_ac_info_IMMUNITY] = gettime() + 3;
	PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_IMMUNITY] = gettime() + 3;
	PLAYER_AC_INFO[playerid][CHEAT_SPECTATE][p_ac_info_IMMUNITY] = gettime() + 3;
	PLAYER_TEMP[playerid][pt_PLAYER_SPECTATE] = spectate;
	return TogglePlayerSpectating(playerid, spectate);
}

CreateInteriorActor(interior_type, world, interior)
{
	if(interior_type == INTERIOR_NO_INFO) return 0;
	
	new skin, Float:pos[4];
	
	switch(interior_type)
	{
		/*case INTERIOR_GENERAL_HOSPITAL:
		{
			skin 	= 308;
			pos[0]	= 1969.236572;
			pos[1]	= 1169.541259;
			pos[2]	= -5.208700;
			pos[3]	= 178.0;
		}*/
		case INTERIOR_BINCO:
		{
			skin 	= 119;
			pos[0]	= 208.376373;
			pos[1]	= -98.703956;
			pos[2]	= 1005.257812;
			pos[3]	= 180.0;
		}
		case INTERIOR_SUBURBAN:
		{
			skin 	= 191;
			pos[0]	= 203.826187;
			pos[1]	= -41.667518;
			pos[2]	= 1001.804687;
			pos[3]	= 180.0;
		}
		case INTERIOR_PROLAPS:
		{
			skin 	= 190;
			pos[0]	= 207.139907;
			pos[1]	= -127.805473;
			pos[2]	= 1003.507812;
			pos[3]	= 180.0;
		}
		case INTERIOR_DIDIER_SACHS:
		{
			skin 	= 169;
			pos[0]	= 204.275909;
			pos[1]	= -157.829010;
			pos[2]	= 1000.523437;
			pos[3]	= 180.0;
		}
		case INTERIOR_VICTIM:
		{
			skin 	= 217;
			pos[0]	= 204.853225;
			pos[1]	= -8.764448;
			pos[2]	= 1001.210937;
			pos[3]	= 270.0;
		}
		case INTERIOR_ZIP:
		{
			skin 	= 211;
			pos[0]	= 162.226135;
			pos[1]	= -81.191978;
			pos[2]	= 1001.804687;
			pos[3]	= 180.0;
		}
		case INTERIOR_247:
		{
			skin 	= 184;
			pos[0]	= -27.483411;
			pos[1]	= -91.628837;
			pos[2]	= 1003.546875;
			pos[3]	= 0.0;
		}
		case INTERIOR_PIZZA:
		{
			skin 	= 155;
			pos[0] 	= 375.114501;
			pos[1] 	= -117.272621;
			pos[2] 	= 1001.492187;
			pos[3]	= 180.0;
		}
		case INTERIOR_CLUCKIN_BELL:
		{
			skin 	= 167;
			pos[0] 	= 368.652679;
			pos[1] 	= -4.492218;
			pos[2] 	= 1001.851562;
			pos[3]	= 180.0;
		}
		case INTERIOR_BURGER_SHOT:
		{
			skin 	= 205;
			pos[0] 	= 376.114227;
			pos[1] 	= -65.848991;
			pos[2] 	= 1001.507812;
			pos[3]	= 180.0;
		}
		case INTERIOR_BANK_LS:
		{
			skin 	= 59;
			pos[0] 	= 1407.526489;
			pos[1] 	= 1321.833496;
			pos[2] 	= 1501.091918;
			pos[3]	= 180.0;
		}
		case INTERIOR_BANK_SF:
		{
			skin 	= 59;
			pos[0] 	= 1104.802001;
			pos[1] 	= 1531.275634;
			pos[2] 	= 1452.475097;
			pos[3]	= 180.0;
		}
		case INTERIOR_BANK_LV:
		{
			skin 	= 59;
			pos[0] 	= 2692.497558;
			pos[1] 	= -610.933593;
			pos[2] 	= -71.658203;
			pos[3]	= 90.0;
		}
		case INTERIOR_CITY_HALL_LS:
		{
			skin 	= 186;
			pos[0] 	= -474.572387;
			pos[1] 	= 287.982879;
			pos[2] 	= 2004.584960;
			pos[3]	= 0.0;
		}
		case INTERIOR_UNITY_STATION:
		{
			skin 	= 184;
			pos[0] 	= 1489.038818;
			pos[1] 	= 1305.631591;
			pos[2] 	= 1093.296386;
			pos[3]	= 270.0;
		}
		case INTERIOR_TRUCK:
		{
			skin 	= 127;
			pos[0] 	= 1297.120117;
			pos[1] 	= -66.351226;
			pos[2] 	= 1002.497375;
			pos[3]	= 0.0;
		}
	}
	CreateDynamicActor(skin, pos[0], pos[1], pos[2], pos[3], true, 100.0, world, interior);
	return 1;
}

GetBuyPropertySiteIndexByIntTyp(interior_type)
{
	for(new i = 0; i != sizeof BUY_PROPERTIES_SITES; i ++)
	{
		if(BUY_PROPERTIES_SITES[i][site_INTERIOR_TYPE] == interior_type) return i;
	}
	return -1;
}

GetBankLocalIndexByIntType(interior_type)
{
	for(new i = 0; i != sizeof Bank_Interior_Positions; i ++)
	{
		if(Bank_Interior_Positions[i][bank_INTERIOR_TYPE] == interior_type) return i;
	}
	return -1;
}

 
GetClothingShopIndexByIntType(interior_type)
{
	for(new i = 0; i != sizeof Clothing_Shop_Positions; i ++)
	{
		if(Clothing_Shop_Positions[i][clothing_shop_INTERIOR_TYPE] == interior_type) return i;
	}
	return -1;
}

/*ShowToysShopTextdraws(playerid)
{
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][0]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][1]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][2]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][3]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][4]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][6]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][7]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][8]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][9]);
	return 1;
}
*/
HideToysShopTextdraws(playerid)
{
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][0]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][1]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][2]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][3]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][4]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][6]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][7]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][8]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][9]);
	return 1;
}

ClosePlayerToysMenu(playerid)
{
	SetPlayerVirtualWorld(playerid, ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_INT_WORLD] );
	TogglePlayerControllableEx(playerid, true);
	
	HideToysShopTextdraws(playerid);
	//PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] = 0;
	PLAYER_TEMP[playerid][pt_TOYS_SHOP] = false;
	CancelSelectTextDrawEx(playerid);
	return 1;
}

RegisterNewPlayerToy(playerid, slot)
{
	new DBResult:Result, DB_Query[800];
	format(DB_Query, sizeof DB_Query,
	"\
		INSERT INTO `PLAYER_TOYS`\
		(\
			`ID_USER`, `NAME`, `ATTACHED`, `MODELID`, `BONE`, `OFFSET_X`, `OFFSET_Y`, `OFFSET_Z`, `ROT_X`, `ROT_Y`, `ROT_Z`, `SCALE_X`, `SCALE_Y`, `SCALE_Z`, `COLOR_1`, `COLOR_2`\
		)\
		VALUES\
		(\
			'%d', '%q', '%d', '%d', '%d', '%f', '%f', '%f', '%f', '%f', '%f', '%f', '%f', '%f', '%d', '%d'\
		);\
		SELECT MAX(`ID_TOY`) FROM `PLAYER_TOYS`;\
	",
		ACCOUNT_INFO[playerid][ac_ID],
		PLAYER_TOYS[playerid][slot][player_toy_NAME], PLAYER_TOYS[playerid][slot][player_toy_ATTACHED], PLAYER_TOYS[playerid][slot][player_toy_MODELID], PLAYER_TOYS[playerid][slot][player_toy_BONE],
		PLAYER_TOYS[playerid][slot][player_toy_OFFSET_X], PLAYER_TOYS[playerid][slot][player_toy_OFFSET_Y], PLAYER_TOYS[playerid][slot][player_toy_OFFSET_Z],
		PLAYER_TOYS[playerid][slot][player_toy_ROT_X], PLAYER_TOYS[playerid][slot][player_toy_ROT_Y], PLAYER_TOYS[playerid][slot][player_toy_ROT_Z],
		PLAYER_TOYS[playerid][slot][player_toy_SCALE_X], PLAYER_TOYS[playerid][slot][player_toy_SCALE_Y], PLAYER_TOYS[playerid][slot][player_toy_SCALE_Z],
		PLAYER_TOYS[playerid][slot][player_toy_COLOR_1], PLAYER_TOYS[playerid][slot][player_toy_COLOR_2]
	);
	Result = db_query(Database, DB_Query);
	
	if(db_num_rows(Result)) PLAYER_TOYS[playerid][slot][player_toy_ID] = db_get_field_int(Result, 0);
	db_free_result(Result);
	return 1;
}


UpdateToysShop(playerid)
{
	if(!PLAYER_TEMP[playerid][pt_TOYS_SHOP]) return 0;
	
	PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][1],"ACCESORIOS"); //ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_NAME]);
	PlayerTextDrawSetPreviewModel(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][3], Toys_Shop[ PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] ][shop_toy_modelid]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][3]);
	
	new td_str[128]; format(td_str, sizeof td_str, "Modelo:_%s~n~Precio:_%s$", Toys_Shop[ PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] ][shop_toy_model], number_format_thousand( Toys_Shop[ PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] ][shop_toy_price] ));
	PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][4], td_str);
	
	
	if(CHARACTER_INFO[playerid][ch_CASH] < Toys_Shop[ PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] ][shop_toy_price]) PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5], -900267777);
	else PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5], 1855979775);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5]);
	
	format(td_str, sizeof td_str, "%d/%d", PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] + 1, sizeof(Toys_Shop));
	PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][8], td_str);
	return 1;
}


ShowClothingShopTextdraws(playerid)
{
	PLAYER_TEMP[playerid][pt_COMPRANDO_ROPA]=true;
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][0]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][1]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][3]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][4]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][5]);
	return 1;
}

HideClothingShopTextdraws(playerid)
{
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][0]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][1]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][3]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][4]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][5]);
	return 1;
}

ClosePlayerClothingMenu(playerid)
{
	PLAYER_TEMP[playerid][pt_COMPRANDO_ROPA]=false;
	CHARACTER_INFO[playerid][ch_POS][0] = Clothing_Shop_Positions[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP]][clothing_shop_X];
	CHARACTER_INFO[playerid][ch_POS][1] = Clothing_Shop_Positions[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP]][clothing_shop_Y];
	CHARACTER_INFO[playerid][ch_POS][2] = Clothing_Shop_Positions[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP]][clothing_shop_Z];
	CHARACTER_INFO[playerid][ch_ANGLE] = Clothing_Shop_Positions[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP]][clothing_shop_ANGLE];
	SetPlayerSkin(playerid, CHARACTER_INFO[playerid][ch_SKIN]);
	TogglePlayerControllableEx(playerid, true);
	
	HideClothingShopTextdraws(playerid);
	PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] = 0;
	PLAYER_TEMP[playerid][pt_CLOTHING_SHOP] = -1;
	CancelSelectTextDrawEx(playerid);
	return 1;
}

ExitPlayerWardrobe(playerid)
{
	SetPlayerPosEx(playerid, CHARACTER_INFO[playerid][ch_POS][0], CHARACTER_INFO[playerid][ch_POS][1], CHARACTER_INFO[playerid][ch_POS][2], CHARACTER_INFO[playerid][ch_ANGLE], ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_INT_INTERIOR], ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_INT_WORLD], false, true);
	return 1;
}

UpdateClothingShop(playerid)
{
	if(PLAYER_TEMP[playerid][pt_CLOTHING_SHOP] == -1) return 0;
	
	new cost, textdraw_str[128];
	PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][1], Clothing_Shop_Positions[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP]][clothing_shop_NAME]);
	
	switch(ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_INTERIOR_TYPE])
	{
		case INTERIOR_BINCO:
		{
			switch(CHARACTER_INFO[playerid][ch_SEX])
			{
				case SEX_MALE:
				{
					SetPlayerSkin(playerid, Binco_Shop_Male_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]][0]);
					cost = Binco_Shop_Male_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]][2];
					
					if(CHARACTER_INFO[playerid][ch_CASH] < cost) PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], -1459617611);
					else PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], 9306312);
					
					format(textdraw_str, sizeof textdraw_str, "Precio:_%s$~n~Ropa:_%d/%d", number_format_thousand(cost), PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] + 1, sizeof(Binco_Shop_Male_Skins));
					PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][5], textdraw_str);
				}
				case SEX_FEMALE:
				{
					SetPlayerSkin(playerid, Binco_Shop_Female_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]][0]);
					cost = Binco_Shop_Female_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]][2];
					
					if(CHARACTER_INFO[playerid][ch_CASH] < cost) PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], -1459617611);
					else PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], 9306312);
					
					format(textdraw_str, sizeof textdraw_str, "Precio:_%s$~n~Ropa:_%d/%d", number_format_thousand(cost), PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] + 1, sizeof(Binco_Shop_Female_Skins));
					PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][5], textdraw_str);
				}
			}
		}
		case INTERIOR_SUBURBAN:
		{
			switch(CHARACTER_INFO[playerid][ch_SEX])
			{
				case SEX_MALE:
				{
					SetPlayerSkin(playerid, Suburban_Shop_Male_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]][0]);
					cost = Suburban_Shop_Male_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]][2];
					
					if(CHARACTER_INFO[playerid][ch_CASH] < cost) PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], -1459617611);
					else PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], 9306312);
					
					format(textdraw_str, sizeof textdraw_str, "Precio:_%s$~n~Ropa:_%d/%d", number_format_thousand(cost), PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] + 1, sizeof(Suburban_Shop_Male_Skins));
					PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][5], textdraw_str);
				}
				case SEX_FEMALE:
				{
					SetPlayerSkin(playerid, Suburban_Shop_Female_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]][0]);
					cost = Suburban_Shop_Female_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]][2];
					
					if(CHARACTER_INFO[playerid][ch_CASH] < cost) PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], -1459617611);
					else PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], 9306312);
					
					format(textdraw_str, sizeof textdraw_str, "Precio:_%s$~n~Ropa:_%d/%d", number_format_thousand(cost), PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] + 1, sizeof(Suburban_Shop_Female_Skins));
					PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][5], textdraw_str);
				}
			}
		}
		case INTERIOR_PROLAPS:
		{
			switch(CHARACTER_INFO[playerid][ch_SEX])
			{
				case SEX_MALE:
				{
					SetPlayerSkin(playerid, Prolaps_Shop_Male_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]][0]);
					cost = Prolaps_Shop_Male_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]][2];
					
					if(CHARACTER_INFO[playerid][ch_CASH] < cost) PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], -1459617611);
					else PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], 9306312);
					
					format(textdraw_str, sizeof textdraw_str, "Precio:_%s$~n~Ropa:_%d/%d", number_format_thousand(cost), PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] + 1, sizeof(Prolaps_Shop_Male_Skins));
					PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][5], textdraw_str);
				}
				case SEX_FEMALE:
				{
					SetPlayerSkin(playerid, Prolaps_Shop_Female_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]][0]);
					cost = Prolaps_Shop_Female_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]][2];
					
					if(CHARACTER_INFO[playerid][ch_CASH] < cost) PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], -1459617611);
					else PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], 9306312);
					
					format(textdraw_str, sizeof textdraw_str, "Precio:_%s$~n~Ropa:_%d/%d", number_format_thousand(cost), PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] + 1, sizeof(Prolaps_Shop_Female_Skins));
					PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][5], textdraw_str);
				}
			}
		}
		case INTERIOR_DIDIER_SACHS:
		{
			switch(CHARACTER_INFO[playerid][ch_SEX])
			{
				case SEX_MALE:
				{
					SetPlayerSkin(playerid, Didier_Shop_Male_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]][0]);
					cost = Didier_Shop_Male_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]][2];
					
					if(CHARACTER_INFO[playerid][ch_CASH] < cost) PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], -1459617611);
					else PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], 9306312);
					
					format(textdraw_str, sizeof textdraw_str, "Precio:_%s$~n~Ropa:_%d/%d", number_format_thousand(cost), PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] + 1, sizeof(Didier_Shop_Male_Skins));
					PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][5], textdraw_str);
				}
				case SEX_FEMALE:
				{
					SetPlayerSkin(playerid, Didier_Shop_Female_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]][0]);
					cost = Didier_Shop_Female_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]][2];
					
					if(CHARACTER_INFO[playerid][ch_CASH] < cost) PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], -1459617611);
					else PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], 9306312);
					
					format(textdraw_str, sizeof textdraw_str, "Precio:_%s$~n~Ropa:_%d/%d", number_format_thousand(cost), PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] + 1, sizeof(Didier_Shop_Female_Skins));
					PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][5], textdraw_str);
				}
			}
		}
		case INTERIOR_VICTIM:
		{
			switch(CHARACTER_INFO[playerid][ch_SEX])
			{
				case SEX_MALE:
				{
					SetPlayerSkin(playerid, Victim_Shop_Male_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]][0]);
					cost = Victim_Shop_Male_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]][2];
					
					if(CHARACTER_INFO[playerid][ch_CASH] < cost) PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], -1459617611);
					else PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], 9306312);
					
					format(textdraw_str, sizeof textdraw_str, "Precio:_%s$~n~Ropa:_%d/%d", number_format_thousand(cost), PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] + 1, sizeof(Victim_Shop_Male_Skins));
					PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][5], textdraw_str);
				}
				case SEX_FEMALE:
				{
					SetPlayerSkin(playerid, Victim_Shop_Female_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]][0]);
					cost = Victim_Shop_Female_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]][2];
					
					if(CHARACTER_INFO[playerid][ch_CASH] < cost) PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], -1459617611);
					else PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], 9306312);
					
					format(textdraw_str, sizeof textdraw_str, "Precio:_%s$~n~Ropa:_%d/%d", number_format_thousand(cost), PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] + 1, sizeof(Victim_Shop_Female_Skins));
					PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][5], textdraw_str);
				}
			}
		}
		case INTERIOR_ZIP:
		{
			switch(CHARACTER_INFO[playerid][ch_SEX])
			{
				case SEX_MALE:
				{
					SetPlayerSkin(playerid, Zip_Shop_Male_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]][0]);
					cost = Zip_Shop_Male_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]][2];
					
					if(CHARACTER_INFO[playerid][ch_CASH] < cost) PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], -1459617611);
					else PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], 9306312);
					
					format(textdraw_str, sizeof textdraw_str, "Precio:_%s$~n~Ropa:_%d/%d", number_format_thousand(cost), PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] + 1, sizeof(Zip_Shop_Male_Skins));
					PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][5], textdraw_str);
				}
				case SEX_FEMALE:
				{
					SetPlayerSkin(playerid, Zip_Shop_Female_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]][0]);
					cost = Zip_Shop_Female_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]][2];
					
					if(CHARACTER_INFO[playerid][ch_CASH] < cost) PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], -1459617611);
					else PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], 9306312);
					
					format(textdraw_str, sizeof textdraw_str, "Precio:_%s$~n~Ropa:_%d/%d", number_format_thousand(cost), PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] + 1, sizeof(Zip_Shop_Female_Skins));
					PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][5], textdraw_str);
				}
			}
		}
	}
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2]);
	return 1;
}

stock number_format_thousand(e_number) /* By adri1 - SFR3 4.3 */
{
	new f_string[24], bool:negative;
	format(f_string, sizeof f_string, "%d", e_number);
	if(e_number < 0)
	{
		negative = true;
		strdel(f_string, 0, 1);
	}
	
	new numbers = strlen(f_string);
	while(numbers > 3)
	{
		numbers -= 3;
		strins(f_string, ".", numbers);
	}
	
	if(negative) strins(f_string, "Cerrar", 0);
	return f_string;
}

stock number_format_dash(e_number) /* By adri1 - SFR3 4.3 */
{
	new f_string[24], bool:negative;
	format(f_string, sizeof f_string, "%d", e_number);
	if(e_number < 0)
	{
		negative = true;
		strdel(f_string, 0, 1);
	}
	
	new numbers = strlen(f_string);
	while(numbers > 3)
	{
		numbers -= 3;
		strins(f_string, "Cerrar", numbers);
	}
	
	if(negative) strins(f_string, "- ", 0);
	return f_string;
}

SelectTextDrawEx(playerid, color)
{
	PLAYER_TEMP[playerid][pt_SELECT_TEXTDRAW] = true;
	return SelectTextDraw(playerid, color);
}

CancelSelectTextDrawEx(playerid)
{
	PLAYER_TEMP[playerid][pt_SELECT_TEXTDRAW] = false;
	return CancelSelectTextDraw(playerid);
}

UpdatePlayerHud(playerid)
{
	if(!PLAYER_TEMP[playerid][pt_HUD_TEXTDRAWS]) return 0;
	
	//barrahambre 1...vacia 456, llena 546
	//barrased 2...vacia 552, llena 642

	new Float:size;
	//521
	size = 521.0 + (CHARACTER_INFO[playerid][ch_HUNGRY] * 0.9);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][texdrawsbarras][2], size, 0.000000);
	
	size = 521.0 + (CHARACTER_INFO[playerid][ch_THIRST] * 0.9);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][texdrawsbarras][12], size, 0.000000);

	size = 521.0 + (CHARACTER_INFO[playerid][CANSANCIO] * 0.9);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][texdrawsbarras][13], size, 0.000000);

	if(PLAYER_MISC[playerid][MISC_CONFIG_HUD])
	{
		PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][texdrawsbarras][2]);
		PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][texdrawsbarras][12]);
		PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][texdrawsbarras][13]);
	}
	return 1;
}

#define INTERVAL_HUNGRY_THIRST_DOWN	2 // 2 segundos de timer
#define THIRST_HOURS_STOPPED	9 // 9 horas parado si agua esta a 100 va a 0
#define HUNGRY_HOURS_STOPPED	12 // 12 horas parado si alimentacion esta a 100 va a 0

forward HungryThirstDown(playerid);
public HungryThirstDown(playerid)
{
	if(PLAYER_TEMP[playerid][pt_GAME_STATE] != GAME_STATE_NORMAL) return HidePlayerHud(playerid);
	if(!PLAYER_TEMP[playerid][pt_HUD_TEXTDRAWS]) return HidePlayerHud(playerid);
	
	new current_gettime = gettime();
	
	if(ACCOUNT_INFO[playerid][ac_SU])
	{
		if(current_gettime - PLAYER_TEMP[playerid][pt_LAST_SU_CHECK] > 300)
		{
			CheckPlayerSuperUser(playerid);
		}
	}

	CHARACTER_INFO[playerid][ch_THIRST] -= floatdiv(float(INTERVAL_HUNGRY_THIRST_DOWN), floatmul(THIRST_HOURS_STOPPED, 36));
	CHARACTER_INFO[playerid][ch_HUNGRY] -= floatdiv(float(INTERVAL_HUNGRY_THIRST_DOWN), floatmul(HUNGRY_HOURS_STOPPED, 36));
	CHARACTER_INFO[playerid][CANSANCIO] -= floatdiv(float(INTERVAL_HUNGRY_THIRST_DOWN), floatmul(HUNGRY_HOURS_STOPPED, 36));
	
	if(CHARACTER_INFO[playerid][ch_THIRST] <= 0.5) CHARACTER_INFO[playerid][ch_THIRST] = 0.5;
	if(CHARACTER_INFO[playerid][ch_HUNGRY] <= 0.5) CHARACTER_INFO[playerid][ch_HUNGRY] = 0.5;
	if(CHARACTER_INFO[playerid][CANSANCIO]   <= 0.5) CHARACTER_INFO[playerid][CANSANCIO] = 0.5;

	if(CHARACTER_INFO[playerid][CANSANCIO] < 10.0)
	{
		CHARACTER_INFO[playerid][ch_HEALTH] -= 1.0;
		
		if(CHARACTER_INFO[playerid][CANSANCIO] <= 1.0 || CHARACTER_INFO[playerid][ch_HEALTH] <= 0.5)
		{
			SendClientMessage(playerid, -1, "{E6F8E0}Te has desmayado por tanto cansancio.");
			SetPlayerHealthEx(playerid, 0.0);
			CHARACTER_INFO[playerid][CANSANCIO] = 50.0;
			return 1;
		}
		
		SetPlayerHealthEx(playerid, CHARACTER_INFO[playerid][ch_HEALTH]);
		
		if(!PLAYER_TEMP[playerid][CANSANCIO_MESSAGE])
		{
			ShowPlayerMessage(playerid, "Estas un poco cansado, si no descansas pronto acabarás mueriendo.", 6);
			PLAYER_TEMP[playerid][CANSANCIO_MESSAGE] = true;
		}
	}
	///
	if(CHARACTER_INFO[playerid][ch_THIRST] < 20.0)
	{
		CHARACTER_INFO[playerid][ch_HEALTH] -= 2.0;
		
		if(CHARACTER_INFO[playerid][ch_THIRST] <= 1.0 || CHARACTER_INFO[playerid][ch_HEALTH] <= 0.5)
		{
			SendClientMessage(playerid, -1, "{E6F8E0}Te has desmayado por deshidratación.");
			SetPlayerHealthEx(playerid, 0.0);
			CHARACTER_INFO[playerid][ch_THIRST] = 75.0;
			return 1;
		}
		
		SetPlayerHealthEx(playerid, CHARACTER_INFO[playerid][ch_HEALTH]);
		
		if(!PLAYER_TEMP[playerid][pt_THIRST_MESSAGE])
		{
			ShowPlayerMessage(playerid, "Tienes sed, si no bebes agua pronto acabarás mueriendo.", 6);
			PLAYER_TEMP[playerid][pt_THIRST_MESSAGE] = true;
		}
	}
	
	if(CHARACTER_INFO[playerid][ch_HUNGRY] < 20.0)
	{
		CHARACTER_INFO[playerid][ch_HEALTH] -= 2.0;
		
		if(CHARACTER_INFO[playerid][ch_HUNGRY] <= 1.0 || CHARACTER_INFO[playerid][ch_HEALTH] <= 0.5)
		{
			SendClientMessage(playerid, -1, "{E6F8E0}Te has desmayado por hambre.");
			SetPlayerHealthEx(playerid, 0.0);
			CHARACTER_INFO[playerid][ch_HUNGRY] = 55.0;
			return 1;
		}
		
		SetPlayerHealthEx(playerid, CHARACTER_INFO[playerid][ch_HEALTH]);
		
		if(!PLAYER_TEMP[playerid][pt_HUNGRY_MESSAGE])
		{
			ShowPlayerMessage(playerid, "Tienes hambre, si no comes nada pronto acabarás mueriendo.", 6);
			PLAYER_TEMP[playerid][pt_HUNGRY_MESSAGE] = true;
		}
	}
	
	UpdatePlayerHud(playerid);
	return 1;
}

SetPlayerHud(playerid)
{
	PLAYER_TEMP[playerid][pt_HUD_TEXTDRAWS] = true;
	UpdatePlayerHud(playerid);
	UpdateReputationTextDraws(playerid);
	
	if(PLAYER_MISC[playerid][MISC_CONFIG_TIME]) TextDrawShowForPlayer(playerid, Textdraws[textdraw_SERVER_TIME]);
	
	if(PLAYER_MISC[playerid][MISC_CONFIG_HUD])
	{
		TextDrawShowForPlayer(playerid, Textdraws[textdraw_HUD][0]);
		//PlayerTextDrawShow(playerid,PlayerTextdraws[playerid][textdraw_gps]); 
		PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][0]);
		PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][3]);
		//TextDrawShowForPlayer(playerid, Textdraws[TextdrawFechaGlobal]);
		for(new i = 0; i != 15 ; i ++) PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][texdrawsbarras][i]);
	}
	
	KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][5]);
	PLAYER_TEMP[playerid][pt_TIMERS][5] = SetTimerEx("HungryThirstDown", INTERVAL_HUNGRY_THIRST_DOWN * 1000, true, "i", playerid);
	return 1;
}

HidePlayerHud(playerid)
{
	KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][5]);
	PLAYER_TEMP[playerid][pt_HUD_TEXTDRAWS] = false;
	
	TextDrawHideForPlayer(playerid, Textdraws[textdraw_SERVER_TIME]);
	
	TextDrawHideForPlayer(playerid, Textdraws[textdraw_HUD][0]);
	//PlayerTextDrawHide(playerid,PlayerTextdraws[playerid][textdraw_gps]); 
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][0]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][3]);
	//TextDrawHideForPlayer(playerid, Textdraws[TextdrawFechaGlobal]);
	for(new i = 0; i != 15 ; i ++) PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][texdrawsbarras][i]);
	return 1;
}

/*is_open(hour, open, close)
{
	if(open > close)
	{
		if( ( (hour >= open) && (hour < 24) ) || ( (hour >= 0) && (hour < close) ) )
		{													
			return true;			
		}
		else
		{
			return false;
		}
	}
	else if(open < close)
	{
		if((hour >= open) && (hour < close))
		{
			return true;
		}
		else
		{
			return false;
		}
	}
	return false;
}*/

Add_Hungry_Thirst(playerid, Float:hungry, Float:thirst)
{
	CHARACTER_INFO[playerid][ch_HUNGRY] += hungry;
	if(CHARACTER_INFO[playerid][ch_HUNGRY] >= 99.0) CHARACTER_INFO[playerid][ch_HUNGRY] = 100.0;
	if(CHARACTER_INFO[playerid][ch_HUNGRY] > 30.0) PLAYER_TEMP[playerid][pt_HUNGRY_MESSAGE] = false;
	if(CHARACTER_INFO[playerid][ch_HUNGRY] > 100.0) CHARACTER_INFO[playerid][ch_HUNGRY] = 100.0;
	
	CHARACTER_INFO[playerid][ch_THIRST] += thirst;
	if(CHARACTER_INFO[playerid][ch_THIRST] >= 99.0) CHARACTER_INFO[playerid][ch_THIRST] = 100.0;
	if(CHARACTER_INFO[playerid][ch_THIRST] > 30.0) PLAYER_TEMP[playerid][pt_THIRST_MESSAGE] = false;
	if(CHARACTER_INFO[playerid][ch_THIRST] > 100.0) CHARACTER_INFO[playerid][ch_THIRST] = 100.0;

	UpdatePlayerHud(playerid);
	return 1;
}
Add_cansancio(playerid, Float:cansancio)
{
	CHARACTER_INFO[playerid][CANSANCIO] += cansancio;
	if(CHARACTER_INFO[playerid][CANSANCIO] > 30.0) PLAYER_TEMP[playerid][CANSANCIO_MESSAGE] = false;
	if(CHARACTER_INFO[playerid][CANSANCIO] > 100.0) CHARACTER_INFO[playerid][CANSANCIO] = 100.0;
	return 1;
}
SetActorSkin(actorid, skin, &actor)
{
	actor = INVALID_ACTOR_ID;
	
    new Float:x, Float:y, Float:z, Float:a, vw;
    GetActorPos(actorid, x, y, z); 
    GetActorFacingAngle(actorid, a);
	vw = GetActorVirtualWorld(actorid);
    DestroyActor(actorid); 
    actor = CreateActor(skin, x, y, z, a);
	SetActorVirtualWorld(actor, vw);
	return 1;
}

stock SetActorFacingAngleEx(actorid, skin, Float:angle, &actor)
{
	actor = INVALID_ACTOR_ID;
	
    new Float:x, Float:y, Float:z, vw;
    GetActorPos(actorid, x, y, z); 
	vw = GetActorVirtualWorld(actorid);
    DestroyActor(actorid); 
    actor = CreateActor(skin, x, y, z, angle);
	SetActorVirtualWorld(actor, vw);
	return 1;
}

GetPlayerIdByBankAccountId(account_id)
{
	for(new i = 0; i != sizeof(BANK_ACCOUNT); i ++)
	{
		if(BANK_ACCOUNT[i][bank_account_ID] == 0) continue;
		if(BANK_ACCOUNT[i][bank_account_ID] == account_id) return i;
	}
	return -1;
}

public OnPlayerStateChange(playerid, newstate, oldstate)
{
 
	if(PLAYER_TEMP[playerid][pt_KICKED]) return 1;
	 
	if(Capturing[playerid])
	{
	    SendClientMessage(playerid,-1, "* No puedes subir a vehiculos mientras estes capturando zonas!");
	    RemovePlayerFromVehicle(playerid);
    }
	if(PLAYER_TEMP[playerid][pt_EVENTO] == false)
	{
		if(PLAYER_TEMP[playerid][pt_GAME_STATE] == GAME_STATE_NORMAL)
		{
			if(newstate != PLAYER_STATE_SPAWNED && oldstate != PLAYER_STATE_SPAWNED)
			{
				if(ac_Info[CHEAT_STATE_SPAMMER][ac_Enabled])
				{
					if(gettime() > PLAYER_AC_INFO[playerid][CHEAT_STATE_SPAMMER][p_ac_info_IMMUNITY])
					{
						new interval = GetTickDiff(GetTickCount(), PLAYER_TEMP[playerid][pt_ANTIFLOOD_STATE]);
						
						if(interval < 50)
						{
							if(!ac_Info[CHEAT_STATE_SPAMMER][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_STATE_SPAMMER, float(interval));
							else
							{
								if(gettime() - PLAYER_AC_INFO[playerid][CHEAT_STATE_SPAMMER][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_STATE_SPAMMER][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_STATE_SPAMMER][p_ac_info_DETECTIONS] = 0;
								else PLAYER_AC_INFO[playerid][CHEAT_STATE_SPAMMER][p_ac_info_DETECTIONS] ++;
								
								PLAYER_AC_INFO[playerid][CHEAT_STATE_SPAMMER][p_ac_info_LAST_DETECTION] = gettime();
								if(PLAYER_AC_INFO[playerid][CHEAT_STATE_SPAMMER][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_STATE_SPAMMER][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_STATE_SPAMMER, float(interval));
							}
						}
						PLAYER_TEMP[playerid][pt_ANTIFLOOD_STATE] = GetTickCount();
					}
				}
			}
		}
	}

    if(newstate == PLAYER_STATE_DRIVER)
    {
		new vehicleid = GetPlayerVehicleID(playerid);

		if(PLAYER_TEMP[playerid][pt_EVENTO] == false)
		{
			if(ac_Info[CHEAT_CAR_JACKING][ac_Enabled])
			{
				if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_OCCUPIED] && GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER] != INVALID_PLAYER_ID)
				{
					if(gettime() > PLAYER_AC_INFO[playerid][CHEAT_CAR_JACKING][p_ac_info_IMMUNITY])
					{
						if(!ac_Info[CHEAT_CAR_JACKING][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_CAR_JACKING);
						else
						{
							if(gettime() - PLAYER_AC_INFO[playerid][CHEAT_CAR_JACKING][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_CAR_JACKING][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_CAR_JACKING][p_ac_info_DETECTIONS] = 0;
							else PLAYER_AC_INFO[playerid][CHEAT_CAR_JACKING][p_ac_info_DETECTIONS] ++;
							
							PLAYER_AC_INFO[playerid][CHEAT_CAR_JACKING][p_ac_info_LAST_DETECTION] = gettime();
							if(PLAYER_AC_INFO[playerid][CHEAT_CAR_JACKING][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_CAR_JACKING][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_CAR_JACKING);
						}
						
						PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] = INVALID_VEHICLE_ID;
						return 1;
					}
				}
			}
		}
		SetPlayerArmedWeapon(playerid, 0);
		PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_HEALTH][p_ac_info_IMMUNITY] = gettime() + 3;
		PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_IMMUNITY] = gettime() + 3;
		PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] = vehicleid;
		
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER] = playerid;
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_LAST_DRIVER] = playerid;
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_OCCUPIED] = true;
		
		if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_DOORS] && VEHICLE_INFO[ GLOBAL_VEHICLES[vehicleid][gb_vehicle_MODELID] - 400][vehicle_info_DRIVER_DOOR]) //cerrado
		{
			if(gettime() - GLOBAL_VEHICLES[vehicleid][gb_vehicle_LAST_CLOSED_TIME] > 5) // Si el tiempo que paso desde que cerro es mayor a 5
			{
				if(ac_Info[CHEAT_PLAYER_VEHICLE_DOORS][ac_Enabled])
				{
					if(gettime() > PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_DOORS][p_ac_info_IMMUNITY])
					{
						if(!ac_Info[CHEAT_PLAYER_VEHICLE_DOORS][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_PLAYER_VEHICLE_DOORS);
						else
						{
							if(gettime() - PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_DOORS][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_PLAYER_VEHICLE_DOORS][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_DOORS][p_ac_info_DETECTIONS] = 0;
							else PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_DOORS][p_ac_info_DETECTIONS] ++;
							
							PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_DOORS][p_ac_info_LAST_DETECTION] = gettime();
							if(PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_DOORS][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_PLAYER_VEHICLE_DOORS][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_PLAYER_VEHICLE_DOORS);
						}
					}
				}
			}
		}
		new Float:sx, Float:sy, Float:sz;
		GetPlayerPos(playerid, sx, sy, sz);

		if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_TRANSPORTISTA]==true)
		{
			if(PLAYER_VEHICLES[vehicleid][player_vehicle_OWNER_ID] == ACCOUNT_INFO[playerid][ac_ID])
			{
				if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 578)
				{
					SetPlayerCarrierCheckpoint(playerid, vehicleid);
				}
			}
		}
		switch(GLOBAL_VEHICLES[vehicleid][gb_vehicle_TYPE])
		{
			case VEHICLE_TYPE_RENT:
			{

				if(GLOBAL_VEHICLES[vehicleid][RENT_OWNER] != ACCOUNT_INFO[playerid][ac_ID] && GLOBAL_VEHICLES[vehicleid][IN_RENT]== true)
				{
					PlayerTextDrawSetString(playerid,PlayerTextdraws[playerid][textdraw_encendido], "~r~~h~Este vehiculo no te pertenece");
					PlayerTextDrawShow(playerid,PlayerTextdraws[playerid][textdraw_encendido]); 
					SetTimerEx("HideEncendido",3000,false,"d",playerid);
					
					RemovePlayerFromVehicle(playerid);
					SetPlayerPos(playerid, sx, sy, sz);
					return 1;
				}

				if((GLOBAL_VEHICLES[vehicleid][IN_RENT]==false) && (RENTOVEHICULO[playerid]==false))
				{
					format(string2,sizeof(string2),"{E12500}Alquilar: %s",VEHICLE_INFO[GLOBAL_VEHICLES[vehicleid][gb_vehicle_MODELID] - 400][vehicle_info_NAME]);
					ShowPlayerDialog(playerid,DIALOG_VEHICLE_RENT, DIALOG_STYLE_MSGBOX,string2,"Coste del alquiler del vehiculo: {1DA904}($300) +$20 {ffffff}por minuto", "Alquilar", "Cancelar");
					return 1;
				}
				else if((GLOBAL_VEHICLES[vehicleid][IN_RENT]==false) && (RENTOVEHICULO[playerid]==true))
				{
					SendClientMessage(playerid,-1, "Solo puedes rentar 1 vehiculo a la vez");
					RemovePlayerFromVehicle(playerid);
					SetPlayerPos(playerid, sx, sy, sz);
					return 1;
				}
			}

			case VEHICLE_TYPE_NONE:
			{
				if(!VEHICLE_INFO[ GLOBAL_VEHICLES[vehicleid][gb_vehicle_MODELID] - 400][vehicle_info_ENGINE])
				{
					GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE] = 1;
					UpdateVehicleParams(vehicleid);
				}
			}
			case VEHICLE_TYPE_SELL:
			{
				/*PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] = vehicleid;
				
				new DBResult:Result, DB_Query[120], player_vehicles;
				format(DB_Query, sizeof(DB_Query), "SELECT COUNT(`ID_USER`) AS `VEHICLES` FROM `PLAYER_VEHICLES` WHERE `ID_USER` = '%d';", ACCOUNT_INFO[playerid][ac_ID]);
				Result = db_query(Database, DB_Query);
				if(db_num_rows(Result)) player_vehicles = db_get_field_assoc_int(Result, "VEHICLES");
				db_free_result(Result);
				
				
				if(player_vehicles >= MAX_SU_VEHICLES) return SendClientMessageEx(playerid, -1, "{00FF80}No puedes comprar más vehículos, el límite es %d.", MAX_SU_VEHICLES);
				if(!ACCOUNT_INFO[playerid][ac_SU])
				{
					if(player_vehicles >= MAX_NU_VEHICLES)
					{
						SendClientMessageEx(playerid, -1, "{E6F8E0}¡Los jugadores {b1fc6f}VIP {E6F8E0}pueden tener hasta %d vehículos! Usa {fffb49}/ayuda {E6F8E0}si quieres ser {b1fc6f}VIP.", MAX_SU_VEHICLES);
						return 1;
					}
				}
				
				ShowDialog(playerid, DIALOG_BUY_VEHICLE);*/
				MensajesAyuda(playerid,"Este vehiculo esta a la venta entra al concesonario para comprarlo");
				return 1;
			}
			case VEHICLE_TYPE_WORK:
			{
				if(!PLAYER_WORKS[playerid][ WORK_VEHICLES[vehicleid][work_vehicle_WORK] ])
				{
					if(ac_Info[CHEAT_PLAYER_VEHICLE_WORK][ac_Enabled])
					{
						if(gettime() > PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_IMMUNITY])
						{
							if(!ac_Info[CHEAT_PLAYER_VEHICLE_WORK][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_PLAYER_VEHICLE_WORK);
							else
							{
								if(gettime() - PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_PLAYER_VEHICLE_WORK][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_DETECTIONS] = 0;
								else PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_DETECTIONS] ++;
								
								PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_LAST_DETECTION] = gettime();
								if(PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_PLAYER_VEHICLE_WORK][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_PLAYER_VEHICLE_WORK);
							}
						}
					}
					return 1;
				}
				
				if(PLAYER_TEMP[playerid][pt_WORKING_IN] && PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_VEHICLES[vehicleid][work_vehicle_WORK])
				{
					if(ac_Info[CHEAT_PLAYER_VEHICLE_WORK][ac_Enabled])
					{
						if(gettime() > PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_IMMUNITY])
						{
							if(!ac_Info[CHEAT_PLAYER_VEHICLE_WORK][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_PLAYER_VEHICLE_WORK);
							else
							{
								if(gettime() - PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_PLAYER_VEHICLE_WORK][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_DETECTIONS] = 0;
								else PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_DETECTIONS] ++;
								
								PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_LAST_DETECTION] = gettime();
								if(PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_PLAYER_VEHICLE_WORK][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_PLAYER_VEHICLE_WORK);
							}
						}
					}
					return 1;
				}
				
				if(WORK_VEHICLES[vehicleid][work_vehicle_NEED_DUTY])
				{
					if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_VEHICLES[vehicleid][work_vehicle_WORK])
					{
						if(ac_Info[CHEAT_PLAYER_VEHICLE_WORK][ac_Enabled])
						{
							if(gettime() > PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_IMMUNITY])
							{
								if(!ac_Info[CHEAT_PLAYER_VEHICLE_WORK][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_PLAYER_VEHICLE_WORK);
								else
								{
									if(gettime() - PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_PLAYER_VEHICLE_WORK][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_DETECTIONS] = 0;
									else PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_DETECTIONS] ++;
									
									PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_LAST_DETECTION] = gettime();
									if(PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_PLAYER_VEHICLE_WORK][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_PLAYER_VEHICLE_WORK);
								}
							}
						}
						return 1;
					}
				}
				
				if(WORK_VEHICLES[vehicleid][work_vehicle_EXP] > PLAYER_SKILLS[playerid][ WORK_VEHICLES[vehicleid][work_vehicle_WORK] ])
				{
					if(ac_Info[CHEAT_PLAYER_VEHICLE_WORK][ac_Enabled])
					{
						if(gettime() > PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_IMMUNITY])
						{
							if(!ac_Info[CHEAT_PLAYER_VEHICLE_WORK][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_PLAYER_VEHICLE_WORK);
							else
							{
								if(gettime() - PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_PLAYER_VEHICLE_WORK][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_DETECTIONS] = 0;
								else PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_DETECTIONS] ++;
								
								PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_LAST_DETECTION] = gettime();
								if(PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_PLAYER_VEHICLE_WORK][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_PLAYER_VEHICLE_WORK);
							}
						}
					}
					return 1;
				}
				
				switch(WORK_VEHICLES[vehicleid][work_vehicle_WORK])
				{
					case WORK_TAXI, WORK_HARVESTER: StartPlayerJob(playerid, WORK_VEHICLES[vehicleid][work_vehicle_WORK], vehicleid);
					case WORK_TRUCK:
					{
						if(TRUCK_VEHICLE[vehicleid][truck_vehicle_LOADED])
						{
							if(TRUCK_VEHICLE[vehicleid][truck_vehicle_DRIVER_USER_ID] != ACCOUNT_INFO[playerid][ac_ID])
							{
								SendClientMessage(playerid, -1, "{00FF80}No eres el conductor de este camión.");
								RemovePlayerFromVehicle(playerid);
								return 1;
							}
							else StartPlayerJob(playerid, WORK_VEHICLES[vehicleid][work_vehicle_WORK], vehicleid);
						}
						else StartPlayerJob(playerid, WORK_VEHICLES[vehicleid][work_vehicle_WORK], vehicleid);
					}
					case WORK_TRASH:
					{
						if(TRASH_VEHICLES[vehicleid][trash_vehicle_JOB_STARTED])
						{
							if(TRASH_VEHICLES[vehicleid][trash_vehicle_DRIVER_ID] != playerid)
							{
								SendClientMessage(playerid, -1, "{00FF80}No eres el conductor de este camión.");
								RemovePlayerFromVehicle(playerid);
								return 1;
							}
							
							SetPlayerTrashCheckpoint(playerid, vehicleid);
						}
						else
						{
							if(PLAYER_TEMP[playerid][pt_TRASH_DRIVER] || PLAYER_TEMP[playerid][pt_TRASH_PASSENGER])
							{
								SendClientMessage(playerid, -1, "{00FF80}Ya estás trabajando con otro compañero.");
								RemovePlayerFromVehicle(playerid);
								return 1;
							}
							
							PLAYER_TEMP[playerid][pt_TRASH_DRIVER] = true;
							PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] = vehicleid;
							TRASH_VEHICLES[vehicleid][trash_vehicle_DRIVER_ID] = playerid;
							
							if(TRASH_VEHICLES[vehicleid][trash_vehicle_PASSENGER_ID] == INVALID_PLAYER_ID) SendClientMessage(playerid, -1, "{E6F8E0}Necesitas un compañero para empezar con el trabajo.");
							else
							{
								new route = random(MAX_ROUTES);
								while(!TRASH_OBJECTS[route][trash_route_VALID])
								{
									route = random(MAX_ROUTES);
								}
								
								TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_JOB_STARTED] = true;
								TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_ROUTE] = route;
								TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_CP] = 0;
								
								SetPlayerTrashCheckpoint(TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_DRIVER_ID], PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID]);
								SetPlayerTrashCheckpoint(TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_PASSENGER_ID], PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID]);
								
								CreatePlayerTrashRouteObjects(TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_DRIVER_ID], route);
								CreatePlayerTrashRouteObjects(TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_PASSENGER_ID], route);
								
								SendClientMessageEx(TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_DRIVER_ID], -1, "Ruta {42aaf4}#%d {FFFFFF}establecida, pueden comenzar.", TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_ROUTE] + 1);
								SendClientMessageEx(TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_PASSENGER_ID], -1, "Ruta {42aaf4}#%d {FFFFFF}establecida, pueden comenzar.", TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_ROUTE] + 1);

							}
						}
					}
					case WORK_PIZZA:
					{
						if(PIZZA_VEHICLE[vehicleid][pizza_vehicle_STARTED])
						{
							if(PIZZA_VEHICLE[vehicleid][pizza_vehicle_DRIVER_AID] != ACCOUNT_INFO[playerid][ac_ID])
							{
								if(GetVehicleDistanceFromPoint(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWN_X], GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWN_Y], GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWN_Z]) < 20.0)
								{
									SetVehicleToRespawnEx(vehicleid);
								}
								
								SendClientMessage(playerid, -1, "{00FF80}No eres el conductor de esta moto.");
								RemovePlayerFromVehicle(playerid);
								return 1;
							}
							
							if(!PLAYER_TEMP[playerid][pt_PIZZA_PROCCESS])
							{
								SendClientMessage(playerid, -1, "{E6F8E0}Ya has repartido todas las pizzas, vuelve a la pizzería para cobrar.");
								SetPlayer_Pizza_Checkpoint(playerid, -1);
							}
							else
							{
								SendClientMessageEx(playerid, -1, "{E6F8E0}Te quedan %d pizzas por repartir.", PLAYER_TEMP[playerid][pt_PIZZA_PROCCESS]);
								if(PIZZA_VEHICLE[vehicleid][pizza_vehicle_PIZZA_POINT_DELI])
								{
									PIZZA_VEHICLE[vehicleid][pizza_vehicle_PIZZA_POINT] = randomEx(sizeof(PIZZA_DELIVERY_POINT), PIZZA_VEHICLE[vehicleid][pizza_vehicle_PIZZA_POINT]);
									PIZZA_VEHICLE[vehicleid][pizza_vehicle_PIZZA_POINT_DELI] = false;
								}
								SetPlayer_Pizza_Checkpoint(playerid, PIZZA_VEHICLE[vehicleid][pizza_vehicle_PIZZA_POINT]);
							}
						}
						else
						{
							PIZZA_VEHICLE[vehicleid][pizza_vehicle_STARTED] = true;
							PIZZA_VEHICLE[vehicleid][pizza_vehicle_DRIVER_AID] = ACCOUNT_INFO[playerid][ac_ID];
							PIZZA_VEHICLE[vehicleid][pizza_vehicle_PIZZAS] = minrand(3, 6);
							PIZZA_VEHICLE[vehicleid][pizza_vehicle_PIZZA_POINT] = random( sizeof(PIZZA_DELIVERY_POINT) );
							PIZZA_VEHICLE[vehicleid][pizza_vehicle_PIZZA_POINT_DELI] = false;
							PLAYER_TEMP[playerid][pt_PIZZA_PROCCESS] = PIZZA_VEHICLE[vehicleid][pizza_vehicle_PIZZAS];
							PLAYER_TEMP[playerid][pt_DELIVERED_PIZZAS] = 0;
							
							SendClientMessageEx(playerid, -1, "{E6F8E0}Esta moto tiene %d pizzas, repartelas todas y vuelve a la pizzería para cobrar.", PIZZA_VEHICLE[vehicleid][pizza_vehicle_PIZZAS]);
							SetPlayer_Pizza_Checkpoint(playerid, PIZZA_VEHICLE[vehicleid][pizza_vehicle_PIZZA_POINT]);
						}
					}
				}
			}
		}
		if(VEHICLE_INFO[GetVehicleModel(vehicleid) - 400][vehicle_info_VALID] && !PLAYER_TEMP[playerid][pt_IN_TUNING_GARAGE]) ShowPlayerSpeedoMeter(playerid);
		
		if(PLAYER_TEMP[playerid][pt_WANT_TAXI])
		{
			if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_STATE] == VEHICLE_STATE_NORMAL)
			{
				PLAYER_TEMP[playerid][pt_WANT_TAXI] = false;
				DisablePlayerTaxiMark(playerid);
				
				SendClientMessage(playerid, -1, "{00FF80}Tu taxi se ha cancelado porque te has subido a un vehículo.");
			}
		}
		if(PLAYER_TEMP[playerid][pt_WANT_MECHANIC])
		{
			if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_STATE] == VEHICLE_STATE_NORMAL)
			{
				PLAYER_TEMP[playerid][pt_WANT_MECHANIC] = false;
				DisablePlayerMechanicMark(playerid);
				
				SendClientMessage(playerid, -1, "{00FF80}Tu mecánico se ha cancelado porque te has subido a un vehículo.");
			}
		}
    }
	else if(newstate == PLAYER_STATE_PASSENGER)
	{
		SetPlayerArmedWeapon(playerid, 0);
		PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_IMMUNITY] = gettime() + 3;
		
		new vehicleid = GetPlayerVehicleID(playerid);
		PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] = vehicleid;
		
		if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_DOORS] && VEHICLE_INFO[ GLOBAL_VEHICLES[vehicleid][gb_vehicle_MODELID] - 400][vehicle_info_PASSENGER_DOOR]) //cerrado
		{
			if(gettime() - GLOBAL_VEHICLES[vehicleid][gb_vehicle_LAST_CLOSED_TIME] > 5) // Si el tiempo que paso desde que cerro es mayor a 5
			{
				if(ac_Info[CHEAT_PLAYER_VEHICLE_DOORS][ac_Enabled])
				{
					if(gettime() > PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_DOORS][p_ac_info_IMMUNITY])
					{
						if(!ac_Info[CHEAT_PLAYER_VEHICLE_DOORS][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_PLAYER_VEHICLE_DOORS);
						else
						{
							if(gettime() - PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_DOORS][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_PLAYER_VEHICLE_DOORS][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_DOORS][p_ac_info_DETECTIONS] = 0;
							else PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_DOORS][p_ac_info_DETECTIONS] ++;
							
							PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_DOORS][p_ac_info_LAST_DETECTION] = gettime();
							if(PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_DOORS][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_PLAYER_VEHICLE_DOORS][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_PLAYER_VEHICLE_DOORS);
						}
					}
				}
			}
		}
		
		if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_TYPE] == VEHICLE_TYPE_WORK)
		{
			switch(WORK_VEHICLES[vehicleid][work_vehicle_WORK])
			{
				case WORK_TAXI:
				{
					if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER] == INVALID_PLAYER_ID) return 1;
					if(TAXI_METER_VEHICLE[vehicleid][veh_taxi_meter_ENABLED])
					{
						if(PLAYER_TEMP[playerid][pt_WANT_TAXI])
						{
							PLAYER_TEMP[playerid][pt_WANT_TAXI] = false;
							DisablePlayerTaxiMark(playerid);
						}
						return 1;
					}
					
					ShowPlayerTaxiMeter(playerid);
					if(PLAYER_TEMP[playerid][pt_WANT_TAXI])
					{
						PLAYER_TEMP[playerid][pt_WANT_TAXI] = false;
						DisablePlayerTaxiMark(playerid);
					}
					
					TAXI_METER_VEHICLE[vehicleid][veh_taxi_meter_ENABLED] = true;
					GetVehiclePos(vehicleid, TAXI_METER_VEHICLE[vehicleid][veh_taxi_meter_OLD_X], TAXI_METER_VEHICLE[vehicleid][veh_taxi_meter_OLD_Y], TAXI_METER_VEHICLE[vehicleid][veh_taxi_meter_OLD_Z]);
					KillTimer(TAXI_METER_VEHICLE[vehicleid][veh_taxi_meter_TIMER]);
					TAXI_METER_VEHICLE[vehicleid][veh_taxi_meter_TIMER] = SetTimerEx("UpdateVehicleTaximeter", 4000, true, "iii", vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER], playerid);
				}
				case WORK_TRASH:
				{
					if(!PLAYER_WORKS[playerid][WORK_TRASH])
					{
						SendClientMessageEx(playerid, -1, "{00FF80}Necesitas ser %s para poder conducir este vehículo.", work_info[ WORK_VEHICLES[vehicleid][work_vehicle_WORK] ][work_info_NAME]);
						RemovePlayerFromVehicle(playerid);
						return 1;
					}
					
					if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_TRASH)
					{
						SendClientMessage(playerid, -1, "{00FF80}No estás de servicio como basurero, ve a vestirte en el puesto de la entrada del vertedero.");
						RemovePlayerFromVehicle(playerid);
						return 1;
					}
					
					if(TRASH_VEHICLES[vehicleid][trash_vehicle_JOB_STARTED])
					{
						if(TRASH_VEHICLES[vehicleid][trash_vehicle_PASSENGER_ID] != playerid)
						{
							SendClientMessage(playerid, -1, "{00FF80}No eres el acompañante de este camión.");
							RemovePlayerFromVehicle(playerid);
							return 1;
						}
						
						SetPlayerTrashCheckpoint(playerid, vehicleid);
					}
					else
					{
						if(PLAYER_TEMP[playerid][pt_TRASH_DRIVER] || PLAYER_TEMP[playerid][pt_TRASH_PASSENGER])
						{
							SendClientMessage(playerid, -1, "{00FF80}Ya estás trabajando con otro compañero.");
							RemovePlayerFromVehicle(playerid);
							return 1;
						}
						
						PLAYER_TEMP[playerid][pt_TRASH_PASSENGER] = true;
						PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] = vehicleid;
						TRASH_VEHICLES[vehicleid][trash_vehicle_PASSENGER_ID] = playerid;
						
						if(TRASH_VEHICLES[vehicleid][trash_vehicle_DRIVER_ID] == INVALID_PLAYER_ID) SendClientMessage(playerid, -1, "{E6F8E0}Necesitas un compañero para empezar con el trabajo.");
						else
						{
							new route = random(MAX_ROUTES);
							while(!TRASH_OBJECTS[route][trash_route_VALID])
							{
								route = random(MAX_ROUTES);
							}
							
							TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_JOB_STARTED] = true;
							TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_ROUTE] = route;
							TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_CP] = 0;
							
							SetPlayerTrashCheckpoint(TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_DRIVER_ID], PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID]);
							SetPlayerTrashCheckpoint(TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_PASSENGER_ID], PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID]);
							
							CreatePlayerTrashRouteObjects(TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_DRIVER_ID], route);
							CreatePlayerTrashRouteObjects(TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_PASSENGER_ID], route);
							
							SendClientMessageEx(TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_DRIVER_ID], -1, "Ruta {42aaf4}#%d {FFFFFF}establecida, pueden comenzar.", TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_ROUTE] + 1);
							SendClientMessageEx(TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_PASSENGER_ID], -1, "Ruta {42aaf4}#%d {FFFFFF}establecida, pueden comenzar.", TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_ROUTE] + 1);

						}
					}
				}
			}
		}
		
		if(PLAYER_TEMP[playerid][pt_WANT_TAXI])
		{
			if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_STATE] == VEHICLE_STATE_NORMAL)
			{
				PLAYER_TEMP[playerid][pt_WANT_TAXI] = false;
				DisablePlayerTaxiMark(playerid);
				
				SendClientMessage(playerid, -1, "{00FF80}Tu taxi se ha cancelado porque te has subido a un vehículo.");
			}
		}
		if(PLAYER_TEMP[playerid][pt_WANT_MECHANIC])
		{
			if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_STATE] == VEHICLE_STATE_NORMAL)
			{
				PLAYER_TEMP[playerid][pt_WANT_MECHANIC] = false;
				DisablePlayerMechanicMark(playerid);
				
				SendClientMessage(playerid, -1, "{00FF80}Tu mecánico se ha cancelado porque te has subido a un vehículo.");
			}
		}
	}
	else if(newstate == PLAYER_STATE_SPECTATING)
	{
		if(!PLAYER_TEMP[playerid][pt_PLAYER_SPECTATE])
		{
			if(ac_Info[CHEAT_SPECTATE][ac_Enabled])
			{
				if(gettime() > PLAYER_AC_INFO[playerid][CHEAT_SPECTATE][p_ac_info_IMMUNITY])
				{
					if(!ac_Info[CHEAT_SPECTATE][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_SPECTATE);
					else
					{
						if(gettime() - PLAYER_AC_INFO[playerid][CHEAT_SPECTATE][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_SPECTATE][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_SPECTATE][p_ac_info_DETECTIONS] = 0;
						else PLAYER_AC_INFO[playerid][CHEAT_SPECTATE][p_ac_info_DETECTIONS] ++;
						
						PLAYER_AC_INFO[playerid][CHEAT_SPECTATE][p_ac_info_LAST_DETECTION] = gettime();
						if(PLAYER_AC_INFO[playerid][CHEAT_SPECTATE][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_SPECTATE][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_SPECTATE);
					}
				}
			}
		}
	}
	
	if(oldstate == PLAYER_STATE_DRIVER)
	{
		PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_IMMUNITY] = gettime() + 3;
		if(PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] != INVALID_VEHICLE_ID)
		{
			KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][7]);
			
			
			if(GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][gb_vehicle_ATTACHED_TO] != INVALID_VEHICLE_ID)
			{
				GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][gb_vehicle_ATTACHED_TO] = INVALID_VEHICLE_ID;
				DetachTrailerFromVehicle(PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID]);
			}
			
			GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][gb_vehicle_TP_IMMUNITY] = gettime() + 5;
			GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][gb_vehicle_DRIVER] = INVALID_PLAYER_ID;
			GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][gb_vehicle_LAST_DRIVER] = playerid;
			GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][gb_vehicle_OCCUPIED] = false;
			
			StopAudioStreamForPlayer(playerid);
			HidePlayerSpeedoMeter(playerid);
			
			if(GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][gb_vehicle_TYPE] == VEHICLE_TYPE_WORK)
			{
				switch(WORK_VEHICLES[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][work_vehicle_WORK])
				{
					case WORK_TAXI, WORK_HARVESTER, WORK_TRUCK: EndPlayerJob(playerid);
					case WORK_PIZZA:
					{
						if(PIZZA_VEHICLE[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][pizza_vehicle_STARTED])
						{
							if(PLAYER_TEMP[playerid][pt_PIZZA_PROCCESS])
							{
								new Float:distance =	GetPlayerDistanceFromPoint
																(
																	playerid,
																	PIZZA_DELIVERY_POINT[ PIZZA_VEHICLE[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][pizza_vehicle_PIZZA_POINT] ][0],
																	PIZZA_DELIVERY_POINT[ PIZZA_VEHICLE[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][pizza_vehicle_PIZZA_POINT] ][1],
																	PIZZA_DELIVERY_POINT[ PIZZA_VEHICLE[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][pizza_vehicle_PIZZA_POINT] ][2]
																);
										
								if(distance > 20.0)
								{
									SendClientMessage(playerid, -1, "{E6F8E0}Vuelve a subir a la moto, aún estás muy lejos del cliente.");
									if(IsValidDynamicActor(PLAYER_TEMP[playerid][pt_PIZZA_ACTOR]))
									{
										DestroyDynamicActor(PLAYER_TEMP[playerid][pt_PIZZA_ACTOR]);
										PLAYER_TEMP[playerid][pt_PIZZA_ACTOR] = INVALID_STREAMER_ID;
									}
									if(IsValidDynamicCP(PLAYER_TEMP[playerid][pt_PIZZA_CHECKPOINT]))
									{
										DestroyDynamicCP(PLAYER_TEMP[playerid][pt_PIZZA_CHECKPOINT]);
										PLAYER_TEMP[playerid][pt_PIZZA_CHECKPOINT] = INVALID_STREAMER_ID;
									}
								}
								else
								{
									if(IsPlayerInDynamicCP(playerid, PLAYER_TEMP[playerid][pt_PIZZA_CHECKPOINT]))
									{
										PLAYER_TEMP[playerid][pt_PIZZA_PROCCESS] --;
										PLAYER_TEMP[playerid][pt_DELIVERED_PIZZAS] ++;
										RemovePlayerAttachedObject(playerid, 9);
										SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
										ApplyDynamicActorAnimation(PLAYER_TEMP[playerid][pt_PIZZA_ACTOR], "FOOD", "EAT_Pizza", 4.1, false, true, true, false, 0);
										ApplyDynamicActorAnimation(PLAYER_TEMP[playerid][pt_PIZZA_ACTOR], "FOOD", "EAT_Pizza", 4.1, false, true, true, false, 0);
										DestroyDynamicCP(PLAYER_TEMP[playerid][pt_PIZZA_CHECKPOINT]);
										PLAYER_TEMP[playerid][pt_PIZZA_CHECKPOINT] = INVALID_STREAMER_ID;
										PIZZA_VEHICLE[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][pizza_vehicle_PIZZA_POINT_DELI] = true;
										SendClientMessage(playerid, -1, "Genial, vuelve a subir a la moto para continuar.");
									}
									else
									{
										SetPlayerArmedWeapon(playerid, 0);
										SetPlayerAttachedObject(playerid, 9, 1582, 6, 0.094, 0.077999, -0.165999, 72.0, 8.799999, 9.899992, 0.73, 0.774999, 1.0);
										SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
									}
								}
							}
							else
							{
								if(IsValidDynamicActor(PLAYER_TEMP[playerid][pt_PIZZA_ACTOR]))
								{
									DestroyDynamicActor(PLAYER_TEMP[playerid][pt_PIZZA_ACTOR]);
									PLAYER_TEMP[playerid][pt_PIZZA_ACTOR] = INVALID_STREAMER_ID;
								}
								if(IsValidDynamicCP(PLAYER_TEMP[playerid][pt_PIZZA_CHECKPOINT]))
								{
									DestroyDynamicCP(PLAYER_TEMP[playerid][pt_PIZZA_CHECKPOINT]);
									PLAYER_TEMP[playerid][pt_PIZZA_CHECKPOINT] = INVALID_STREAMER_ID;
								}
								SendClientMessage(playerid, -1, "Vuelve a subir a la moto y ve a la pizzería para cobrar.");
							}
						}
					}
				}
			}
			if(PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] == PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID])
			{
				if(PLAYER_TEMP[playerid][pt_TRASH_DRIVER])
				{
					if(TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_JOB_STARTED])
					{
						if(TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_DRIVER_ID] == playerid) SendClientMessage(playerid, -1, "{E6F8E0}Si quieres dejar de trabajar ve al vertedero y ponte tu ropa.");
					}
					else
					{
						TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_DRIVER_ID] = INVALID_PLAYER_ID;
						PLAYER_TEMP[playerid][pt_TRASH_DRIVER] = false;
						PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] = INVALID_VEHICLE_ID;
					}
				}
			}
		}
	}
	else if(oldstate == PLAYER_STATE_PASSENGER)
	{
		if(PLAYER_TEMP[playerid][pt_TAXI_METER_ENABLED])
		{
			new driver = GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][gb_vehicle_DRIVER];
			
			new work_extra_payment;
			if(work_info[WORK_TAXI][work_info_EXTRA_PAY] > 0 && work_info[WORK_TAXI][work_info_EXTRA_PAY_EXP] > 0)
			{
				work_extra_payment = (work_info[WORK_TAXI][work_info_EXTRA_PAY] * floatround(floatdiv(PLAYER_SKILLS[ driver ][WORK_TAXI], work_info[WORK_TAXI][work_info_EXTRA_PAY_EXP])));
				if(work_info[WORK_TAXI][work_info_EXTRA_PAY_LIMIT] != 0) if(work_extra_payment > work_info[WORK_TAXI][work_info_EXTRA_PAY_LIMIT]) work_extra_payment = work_info[WORK_TAXI][work_info_EXTRA_PAY_LIMIT];
			
				if(ACCOUNT_INFO[playerid][ac_SU]==1) work_extra_payment += 300;
				if(ACCOUNT_INFO[playerid][ac_SU]>=2) work_extra_payment += 600;
			}
			PLAYER_SKILLS[driver][WORK_TAXI] ++;
			
			SendClientMessageEx(driver, -1, "{E6F8E0}Has ganado %s$ con este viaje.", number_format_thousand(TAXI_METER_VEHICLE[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][veh_taxi_meter_PAYMENT] + work_extra_payment));
			GivePlayerCash(driver, TAXI_METER_VEHICLE[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][veh_taxi_meter_PAYMENT] + work_extra_payment);
			GivePlayerCash(playerid, -TAXI_METER_VEHICLE[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][veh_taxi_meter_PAYMENT]);
			
			SendClientMessageEx(playerid, -1, "{E6F8E0}El taxi te costó %s$.", number_format_thousand(TAXI_METER_VEHICLE[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][veh_taxi_meter_PAYMENT]));
			ResetVehicleTaxiMeter(PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID]);
			HidePlayerTaxiMeter(playerid);
			UpdatePlayerTaxiMeterTextdraws(driver);
			
			
			new passenger = GetVehicleFirstPassenger( PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] );
			if(passenger != INVALID_PLAYER_ID)
			{
				ShowPlayerTaxiMeter(passenger);
				if(PLAYER_TEMP[passenger][pt_WANT_TAXI])
				{
					PLAYER_TEMP[passenger][pt_WANT_TAXI] = false;
					DisablePlayerTaxiMark(passenger);
				}
				
				TAXI_METER_VEHICLE[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][veh_taxi_meter_ENABLED] = true;
				GetVehiclePos(PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID], TAXI_METER_VEHICLE[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][veh_taxi_meter_OLD_X], TAXI_METER_VEHICLE[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][veh_taxi_meter_OLD_Y], TAXI_METER_VEHICLE[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][veh_taxi_meter_OLD_Z]);
				KillTimer(TAXI_METER_VEHICLE[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][veh_taxi_meter_TIMER]);
				TAXI_METER_VEHICLE[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][veh_taxi_meter_TIMER] = SetTimerEx("UpdateVehicleTaximeter", 4000, true, "iii", PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID], GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][gb_vehicle_DRIVER], passenger);
			}
		}
		if(PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] == PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID])
		{
			if(PLAYER_TEMP[playerid][pt_TRASH_PASSENGER])
			{
				if(TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_JOB_STARTED])
				{
					if(TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_PASSENGER_ID] == playerid)
					{
						if(TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_CP] >= TRASH_OBJECTS[ TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_ROUTE] ][trash_route_OBJECTS]) SendClientMessage(playerid, -1, "{E6F8E0}Sube al camión para volver al vertedero y recibir la paga.");
						else
						{
							new cp = TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_CP];
							new route = TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_ROUTE];
							new Float:distance =	GetPlayerDistanceFromPoint
													(
														playerid,
														TRASH_OBJECTS[ route ][trash_object_X][ cp ],
														TRASH_OBJECTS[ route ][trash_object_Y][ cp ],
														TRASH_OBJECTS[ route ][trash_object_Z][ cp ]
													);
							
							if(distance > 10.0) SendClientMessage(playerid, -1, "{E6F8E0}Vuelve a subir al camión, aún estás demasiado lejos del punto de recogida.");
							else
							{
								if(IsPlayerInDynamicCP(playerid, PLAYER_TEMP[playerid][pt_TRASH_CHECKPOINT]))
								{
									if(!PLAYER_WORKS[playerid][WORK_TRASH]) return DestroyPlayerTrashCheckpoint(playerid);
									if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_TRASH) return DestroyPlayerTrashCheckpoint(playerid);
									if(!PLAYER_TEMP[playerid][pt_TRASH_PASSENGER]) return 1;
									
									new driver = TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_DRIVER_ID];
									SendClientMessage(driver, -1, "{E6F8E0}Espera mientras tu compañero recoge la basura.");
									
									new Float:offset = floatdiv(PLAYER_SKILLS[playerid][WORK_TRASH], 10);
									if(offset > 30.0) offset = 30.0;
									
									PLAYER_TEMP[playerid][pt_RECYCLE_BIN_VALUE] = 10.0 + offset;
									UpdatePlayerTrashRecycleSize(playerid);
									PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][0]);
									PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][1]);
									PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][2]);
									
									TogglePlayerControllableEx(playerid, false);
									SetCameraBehindPlayer(playerid);
									ApplyAnimation(playerid, "ROB_BANK", "CAT_Safe_Rob", 4.1, true, false, false, false, 0);
									
									KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][10]);
									PLAYER_TEMP[playerid][pt_TIMERS][10] = SetTimerEx("RecycleUp", 1000, false, "i", playerid);
									return 1;
								}
								SendClientMessage(playerid, -1, "{E6F8E0}Recoge la basura y vuelve al camión para continuar.");
							}
						}
					}
				}
				else
				{
					TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_PASSENGER_ID] = INVALID_PLAYER_ID;
					PLAYER_TEMP[playerid][pt_TRASH_PASSENGER] = false;
					PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] = INVALID_VEHICLE_ID;
				}
			}
		}
	}


	if(newstate == PLAYER_STATE_DRIVER || newstate == PLAYER_STATE_PASSENGER)
    {
		new vehiculo_karen = GetPlayerVehicleID(playerid);
		if(GLOBAL_VEHICLES[vehiculo_karen][gb_vehicle_RADIO] == MAX_RADIO) return PlayAudioStreamForPlayer(playerid, GLOBAL_VEHICLES[ vehiculo_karen ][gb_vehicle_RADIO_LINK]);
		if(GLOBAL_VEHICLES[ vehiculo_karen ][gb_vehicle_RADIO] != 0)
		{
			SendClientMessageEx(playerid, -1, "Escuchando la radio: "R"%s",Radios[ GLOBAL_VEHICLES[ vehiculo_karen ][gb_vehicle_RADIO] ][Nombre]);
			PlayAudioStreamForPlayer(playerid, Radios[ GLOBAL_VEHICLES[ vehiculo_karen ][gb_vehicle_RADIO] ][Link]);
		}
	}
    return 1;
}

public OnPlayerExitVehicle(playerid, vehicleid)
{
 	StopAudioStreamForPlayer(playerid);
	PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_IMMUNITY] = gettime() + 3;
	PLAYER_AC_INFO[playerid][CHEAT_STATE_SPAMMER][p_ac_info_IMMUNITY] = gettime() + 3;
	return 1;
}
/*GetVehicleFaccion(vehicleid)
{
	new name[40];
	switch(GLOBAL_VEHICLES[vehicleid][gb_vehicle_TYPE])
	{
		case WORK_FACCION_GROVE: name="Grove Street";
	}
	return name;
}*/
public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{
	 
	PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_IMMUNITY] = gettime() + 3;
	PLAYER_AC_INFO[playerid][CHEAT_STATE_SPAMMER][p_ac_info_IMMUNITY] = gettime() + 3;
	
	if(PLAYER_TEMP[playerid][pt_EVENTO] == false)
	{
		if(PLAYER_TEMP[playerid][pt_GAME_STATE] == GAME_STATE_NORMAL)
		{
			if(ac_Info[CHEAT_VEHICLE_ENTER_SPAMMER][ac_Enabled])
			{
				if(gettime() > PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_ENTER_SPAMMER][p_ac_info_IMMUNITY])
				{
					new interval = GetTickDiff(GetTickCount(), PLAYER_TEMP[playerid][pt_ANTIFLOOD_ENTER_VEHICLE]);
					
					if(interval < 50)
					{
						if(!ac_Info[CHEAT_VEHICLE_ENTER_SPAMMER][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_VEHICLE_ENTER_SPAMMER, float(interval));
						else
						{
							if(gettime() - PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_ENTER_SPAMMER][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_VEHICLE_ENTER_SPAMMER][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_ENTER_SPAMMER][p_ac_info_DETECTIONS] = 0;
							else PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_ENTER_SPAMMER][p_ac_info_DETECTIONS] ++;
							
							PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_ENTER_SPAMMER][p_ac_info_LAST_DETECTION] = gettime();
							if(PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_ENTER_SPAMMER][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_VEHICLE_ENTER_SPAMMER][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_VEHICLE_ENTER_SPAMMER, float(interval));
						}
					}
					PLAYER_TEMP[playerid][pt_ANTIFLOOD_ENTER_VEHICLE] = GetTickCount();
				}
			}
		}
	}
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK)
	{
		SetPlayerPosEx(playerid, PLAYER_TEMP[playerid][pt_INJURED_POS][0], PLAYER_TEMP[playerid][pt_INJURED_POS][1], PLAYER_TEMP[playerid][pt_INJURED_POS][2], PLAYER_TEMP[playerid][pt_INJURED_POS][3], 0, 0);
		ApplyAnimation(playerid, "SWAT", "gnstwall_injurd", 4.1, true, 0, 0, 1, 0, 1);
		return 1;
	}
	
	new Float:sx, Float:sy, Float:sz;
	GetPlayerPos(playerid, sx, sy, sz);
	
	if(Capturing[playerid])
	{
	    SendClientMessage(playerid,amarillo, "* No puedes subir a vehiculos mientras estes capturando zonas!");
	    RemovePlayerFromVehicle(playerid);
	    SetPlayerPos(playerid, sx, sy, sz);
    }

	if(PLAYER_TEMP[playerid][pt_WORKING_IN] == WORK_MEDIC)
	{
		if(WORK_VEHICLES[vehicleid][work_vehicle_WORK] != WORK_MEDIC)
		{
			SendClientMessage(playerid, 0xFFA97FFF, "Estando de servicio como médico solo puedes llevar ambulancias.");
			RemovePlayerFromVehicle(playerid);
			SetPlayerPos(playerid, sx, sy, sz);
			return 1;
		}
	}
 
	if(PLAYER_TEMP[playerid][pt_PESCAR] == true)
	{
		MensajesAyuda(playerid,"~r~Fallaste al pescar");
		HideCapturarPes(playerid);
	}
 	
 	if(GLOBAL_VEHICLES[ vehicleid ][gb_vehicle_OCCUPIED] == false)
 	{
	 	if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_DOORS] == 0)
	 	{
		 	if(PLAYER_VEHICLES[vehicleid][player_vehicle_OWNER_ID] != ACCOUNT_INFO[playerid][ac_ID])
		 	{
			 	if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_TYPE] == VEHICLE_TYPE_PERSONAL)
			 	{
			 		if(GetKeysFromThisVehicle(playerid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_ID]) == 0)
			 		{
			 			new string[100];
			 			format(string,sizeof(string),"~r~~h~No tienes las llaves de este vehiculo pideselas a %s",GetNameKeyOfThisVehicle(GLOBAL_VEHICLES[vehicleid][gb_vehicle_ID]));
			 			MensajeAyuda_4(playerid,string);
			 			RemovePlayerFromVehicle(playerid);
						SetPlayerPos(playerid, sx, sy, sz);
			 		}
			 	}
		 	}
	 	}
 	}
	if(!ispassenger)
	{
		if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_OCCUPIED])
		{
			if(PLAYER_TEMP[playerid][pt_CJ_WARNINGS] >= 5)
			{
				KickEx(playerid);
				return 1;
			}
			PLAYER_TEMP[playerid][pt_CJ_WARNINGS] ++;
			SendClientMessageEx(playerid, 0xFFA97FFF, "No puedes robar vehículos así, congelado 5 segundos, aviso %d/5.", PLAYER_TEMP[playerid][pt_CJ_WARNINGS]);
			RemovePlayerFromVehicle(playerid);
			SetPlayerPos(playerid, sx, sy, sz);
			SetPlayerVirtualWorld(playerid, playerid);
			TogglePlayerControllableEx(playerid, false);
			KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][19]);
			PLAYER_TEMP[playerid][pt_TIMERS][19] = SetTimerEx("CarJackingFinish", 5000, false, "i", playerid);
			return 1;
		}
		if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_TYPE] == VEHICLE_TYPE_FACCION)
		{
			if(FACCION_PLAYER[playerid][FACCION_ID] != GLOBAL_VEHICLES[vehicleid][FACCION_ID])
			{
				SendClientMessageEx(playerid, -1, "{00FF80}Nesecitas ser de la faccion (%d)%s para conducir este vehiculo",GLOBAL_VEHICLES[vehicleid][FACCION_ID],GLOBAL_VEHICLES[vehicleid][FACCION_NAME]);
				RemovePlayerFromVehicle(playerid);
				SetPlayerPos(playerid, sx, sy, sz);
				return 1;
			}
		}
		
		if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_TYPE] == VEHICLE_TYPE_WORK)
		{
			if(!PLAYER_WORKS[playerid][ WORK_VEHICLES[vehicleid][work_vehicle_WORK] ])
			{
				SendClientMessageEx(playerid, 0xFFA97FFF, "Necesitas ser %s para poder conducir éste vehículo.", work_info[ WORK_VEHICLES[vehicleid][work_vehicle_WORK] ][work_info_NAME]);
				RemovePlayerFromVehicle(playerid);
				SetPlayerPos(playerid, sx, sy, sz);
				return 1;
			}
			if(GLOBAL_VEHICLES[vehicleid][gp_vehicle_vip] && !ACCOUNT_INFO[playerid][ac_SU])
			{
				SendClientMessage(playerid, 0xC8C8C8CD, "* Información: Necesitas adquirir membresía VIP para usar éste vehículo.(/Ayuda > Membresía)");
				RemovePlayerFromVehicle(playerid);
				SetPlayerPos(playerid, sx, sy, sz);
				return 1;
			}
			
			if(PLAYER_TEMP[playerid][pt_WORKING_IN] && PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_VEHICLES[vehicleid][work_vehicle_WORK])
			{
				SendClientMessageEx(playerid, 0xFFA97FFF, "Tienes que dejar de estar de servicio de %s.", work_info[ PLAYER_TEMP[playerid][pt_WORKING_IN] ][work_info_NAME]);
				RemovePlayerFromVehicle(playerid);
				SetPlayerPos(playerid, sx, sy, sz);
				return 1;
			}
			
			if(WORK_VEHICLES[vehicleid][work_vehicle_NEED_DUTY])
			{
				if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_VEHICLES[vehicleid][work_vehicle_WORK])
				{
					SendClientMessageEx(playerid, 0xFFA97FFF, "Necesitas estar de servicio de %s para poder conducir éste vehículo.", work_info[ WORK_VEHICLES[vehicleid][work_vehicle_WORK] ][work_info_NAME]);
					RemovePlayerFromVehicle(playerid);
					SetPlayerPos(playerid, sx, sy, sz);
					return 1;
				}
			}
			
			if(WORK_VEHICLES[vehicleid][work_vehicle_EXP] > PLAYER_SKILLS[playerid][ WORK_VEHICLES[vehicleid][work_vehicle_WORK] ])
			{
				SendClientMessageEx(playerid, 0xFFA97FFF, "Necesitas más experiencia en este trabajo para llevar éste vehículo. (%d/%d)", PLAYER_SKILLS[playerid][ WORK_VEHICLES[vehicleid][work_vehicle_WORK] ], WORK_VEHICLES[vehicleid][work_vehicle_EXP]);
				RemovePlayerFromVehicle(playerid);
				SetPlayerPos(playerid, sx, sy, sz);
				return 1;
			}
		}
	}
	else
	{
		if(WORK_VEHICLES[vehicleid][work_vehicle_VALID] && WORK_VEHICLES[vehicleid][work_vehicle_WORK] == WORK_TRASH)
		{
			if(!PLAYER_WORKS[playerid][WORK_TRASH])
			{
				SendClientMessageEx(playerid, -1, "{00FF80}Necesitas ser %s para poder entrar a este vehículo.", work_info[ WORK_VEHICLES[vehicleid][work_vehicle_WORK] ][work_info_NAME]);
				RemovePlayerFromVehicle(playerid);
				SetPlayerPos(playerid, sx, sy, sz);
				return 1;
			}
			
			if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_VEHICLES[vehicleid][work_vehicle_WORK])
			{
				SendClientMessageEx(playerid, -1, "{00FF80}Necesitas estar de servicio como %s para poder conducir este vehículo.", work_info[ WORK_VEHICLES[vehicleid][work_vehicle_WORK] ][work_info_NAME]);
				RemovePlayerFromVehicle(playerid);
				SetPlayerPos(playerid, sx, sy, sz);
				return 1;
			}
		}
	}
	return 1;
}

AddTestVehicle(bool:static_veh, modelid, Float:X, Float:Y, Float:Z, Float:Angle, Color1, Color2)
{
	new vehicle_id = INVALID_VEHICLE_ID;
	if(static_veh) vehicle_id = AddStaticVehicleEx(modelid, X, Y, Z, Angle, Color1, Color2, -1, false);
	else vehicle_id = CreateVehicle(modelid, X, Y, Z, Angle, Color1, Color2, -1, false);
	
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_VALID] = true;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_TYPE] = VEHICLE_TYPE_TEST;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MODELID] = modelid;
	format(GLOBAL_VEHICLES[vehicle_id][gb_vehicle_NUMBER_PLATE], 32, "Test Vehicle");
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_X] = X;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_Y] = Y;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_Z] = Z;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_ANGLE] = Angle;
	
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_POS][0] = GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_X];
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_POS][1] = GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_Y];
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_POS][2] = GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_Z];
	
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_HEALTH] = 1000.0;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DAMAGE_PANELS] = 0;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DAMAGE_DOORS] = 0;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DAMAGE_LIGHTS] = 0;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DAMAGE_TIRES] = 0;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_COLOR_1] = Color1;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_COLOR_2] = Color2;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_PAINTJOB] = 3; // No paintjob

	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MAX_GAS] = VEHICLE_INFO[modelid - 400][vehicle_info_MAX_GAS];
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_GAS] = GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MAX_GAS];

	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MAX_ACEITE] = VEHICLE_INFO[modelid - 400][vehicle_info_MAX_ACEITE];
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_ACEITE] = GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MAX_ACEITE];


	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_STATE] = VEHICLE_STATE_NORMAL;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_INTERIOR] = 0;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_WORLD] = 0;
	
	SetVehicleToRespawnEx(vehicle_id);
	return vehicle_id;
}

AddPersonalVehicle(playerid, modelid, Float:X, Float:Y, Float:Z, Float:Angle, Color1, Color2, Float:max_gas, Float:max_aceite)
{
	new vehicle_id = INVALID_VEHICLE_ID;
	vehicle_id = CreateVehicle(modelid, X, Y, Z, Angle, Color1, Color2, -1);
	
	if(vehicle_id == INVALID_VEHICLE_ID) return false;
	
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_VALID] = true;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_TYPE] = VEHICLE_TYPE_PERSONAL;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MODELID] = modelid;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_X] = X;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_Y] = Y;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_Z] = Z;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_ANGLE] = Angle;
	
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_POS][0] = GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_X];
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_POS][1] = GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_Y];
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_POS][2] = GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_Z];
	
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_HEALTH] = 1000.0;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DAMAGE_PANELS] = 0;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DAMAGE_DOORS] = 0;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DAMAGE_LIGHTS] = 0;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DAMAGE_TIRES] = 0;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_COLOR_1] = Color1;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_COLOR_2] = Color2;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_PAINTJOB] = 3; // No paintjob
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MAX_GAS] = max_gas;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_GAS] = max_gas;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MAX_ACEITE] = max_aceite;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_ACEITE] = max_aceite;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_STATE] = VEHICLE_STATE_NORMAL;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_INTERIOR] = 0;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_WORLD] = 0;
	
	PLAYER_VEHICLES[vehicle_id][player_vehicle_VALID] = true;
	PLAYER_VEHICLES[vehicle_id][player_vehicle_OWNER_ID] = ACCOUNT_INFO[playerid][ac_ID];
	RegisterNewPlayerVehicle(playerid, vehicle_id);
	
	SetVehicleToRespawnEx(vehicle_id);
	return vehicle_id;
}

RegisterNewPlayerVehicle(playerid, vehicleid)
{
	new DBResult:Result, DB_Query[400];
	format
	(
		DB_Query, sizeof DB_Query,
		"\
			INSERT INTO `PLAYER_VEHICLES`\
			(\
				`ID_USER`, `MODELID`, `SPAWN_X`, `SPAWN_Y`, `SPAWN_Z`, `SPAWN_ANGLE`, `COLOR_1`, `COLOR_2`, `GAS`, `MAX_GAS`,`ACEITE`, `MAX_ACEITE`\
			)\
			VALUES\
			(\
				'%d', '%d', '%f', '%f', '%f', '%f', '%d', '%d', '%f', '%f','%f', '%f'\
			);\
			SELECT MAX(`ID`) FROM `PLAYER_VEHICLES`;\
		", 
		ACCOUNT_INFO[playerid][ac_ID],
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_MODELID],
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWN_X],
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWN_Y],
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWN_Z],
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWN_ANGLE],
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_COLOR_1],
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_COLOR_2],
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_GAS],
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_MAX_GAS],
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_ACEITE],
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_MAX_ACEITE]
	);
	Result = db_query(Database, DB_Query);

	if(db_num_rows(Result))
	{
		PLAYER_VEHICLES[vehicleid][player_vehicle_ID] = db_get_field_int(Result, 0);
		format(GLOBAL_VEHICLES[vehicleid][gb_vehicle_NUMBER_PLATE], 32, "%04d %c%c%c", PLAYER_VEHICLES[vehicleid][player_vehicle_ID], getRandomLetter(), getRandomLetter(), getRandomLetter());
		
		DB_Query[0] = EOS;
		format
		(
			DB_Query, sizeof DB_Query, 
			"\
				INSERT INTO `PLAYER_VEHICLE_COMPONENTS` (`ID_VEHICLE`) VALUES ('%d');\
				UPDATE `PLAYER_VEHICLES` SET `PLATE` = '%q' WHERE `ID` = '%d';\
			",
				PLAYER_VEHICLES[vehicleid][player_vehicle_ID],
				GLOBAL_VEHICLES[vehicleid][gb_vehicle_NUMBER_PLATE], PLAYER_VEHICLES[vehicleid][player_vehicle_ID]
		);
		db_query(Database, DB_Query);

		format(DB_Query, sizeof(DB_Query), "INSERT INTO `VEHICLE_VARS` (`VEHICLE_ID`) VALUES('%d')",PLAYER_VEHICLES[vehicleid][player_vehicle_ID]);
		db_query(Database, DB_Query);
	}
	db_free_result(Result);
	
	return 1;
}

LoadPlayerVehicles(playerid)
{
	if(ACCOUNT_INFO[playerid][ac_ID] == 0) return 0;
	
	new DBResult:Result, DB_Query[460];
	format(DB_Query, sizeof(DB_Query),"SELECT PV.*, PVC.* FROM PLAYER_VEHICLES PV LEFT JOIN PLAYER_VEHICLE_COMPONENTS PVC ON PV.ID = PVC.ID_VEHICLE WHERE PV.ID_USER = %d LIMIT %d;",ACCOUNT_INFO[playerid][ac_ID], MAX_SU_VEHICLES);
	//"SELECT `PLAYER_VEHICLES`.*, `PLAYER_VEHICLE_COMPONENTS`.* FROM `PLAYER_VEHICLES`, `PLAYER_VEHICLE_COMPONENTS` WHERE `PLAYER_VEHICLES`.`ID_USER` = '%d' AND `PLAYER_VEHICLE_COMPONENTS`.`ID_VEHICLE` = `PLAYER_VEHICLES`.`ID` ORDER BY `PLAYER_VEHICLES`.`ID` DESC LIMIT %d;", ACCOUNT_INFO[playerid][ac_ID], MAX_SU_VEHICLES);
	Result = db_query(Database, DB_Query);
	
	new total_vehicles;
	for(new i; i < db_num_rows(Result); i++ )
	{
		if(total_vehicles >= MAX_SU_VEHICLES)
		{
			printf("---> MAX_SU_VEHICLES superado al cargar de base de datos.");
			break;
		}
		
		new modelid, Float:pos[4], color[2];
		modelid = db_get_field_assoc_int(Result, "MODELID");
		pos[0] = db_get_field_assoc_float(Result, "SPAWN_X");
		pos[1] = db_get_field_assoc_float(Result, "SPAWN_Y");
		pos[2] = db_get_field_assoc_float(Result, "SPAWN_Z");
		pos[3] = db_get_field_assoc_float(Result, "SPAWN_ANGLE");
		color[0] = db_get_field_assoc_int(Result, "COLOR_1");
		color[1] = db_get_field_assoc_int(Result, "COLOR_2");
		
		new vehicle_id = INVALID_VEHICLE_ID;
		vehicle_id = CreateVehicle
		(
			modelid,
			pos[0],
			pos[1],
			pos[2],
			pos[3],
			color[0],
			color[1],
			-1
		);
		
		 
		if(vehicle_id == INVALID_VEHICLE_ID)
		{
			db_free_result(Result);
			return false;
		}
		
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_VALID] = true;
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_TYPE] = VEHICLE_TYPE_PERSONAL;
		
		PLAYER_VEHICLES[vehicle_id][player_vehicle_VALID] = true;
		PLAYER_VEHICLES[vehicle_id][player_vehicle_OWNER_ID] = ACCOUNT_INFO[playerid][ac_ID];
		PLAYER_VEHICLES[vehicle_id][player_vehicle_ID] = db_get_field_assoc_int(Result, "ID");

		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_ID] = db_get_field_assoc_int(Result, "ID");

		PLAYER_VEHICLES[vehicle_id][player_vehicle_ACCESSIBLE] = true;
		
		db_get_field_assoc(Result, "PLATE", GLOBAL_VEHICLES[vehicle_id][gb_vehicle_NUMBER_PLATE], 32);
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MODELID] = modelid;
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_X] = pos[0];
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_Y] = pos[1];
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_Z] = pos[2];
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_ANGLE] = pos[3];
		
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_POS][0] = GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_X];
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_POS][1] = GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_Y];
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_POS][2] = GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_Z];
		
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_HEALTH] = db_get_field_assoc_float(Result, "HEALTH");
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DAMAGE_PANELS] = db_get_field_assoc_int(Result, "DAMAGE_PANELS");
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DAMAGE_DOORS] = db_get_field_assoc_int(Result, "DAMAGE_DOORS");
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DAMAGE_LIGHTS] = db_get_field_assoc_int(Result, "DAMAGE_LIGHTS");
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DAMAGE_TIRES] = db_get_field_assoc_int(Result, "DAMAGE_TIRES");
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_COLOR_1] = color[0];
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_COLOR_2] = color[1];
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_PAINTJOB] = db_get_field_assoc_int(Result, "PAINTJOB");
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MAX_GAS] = db_get_field_assoc_float(Result, "MAX_GAS");
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_GAS] = db_get_field_assoc_float(Result, "GAS");
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_PARAMS_DOORS] = db_get_field_assoc_int(Result, "CLOSED");
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_STATE] = db_get_field_assoc_int(Result, "STATE");
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_INTERIOR] = db_get_field_assoc_int(Result, "INTERIOR");
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_WORLD] = db_get_field_assoc_int(Result, "WORLD");
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MAX_ACEITE] = db_get_field_assoc_float(Result, "MAX_ACEITE");
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_ACEITE] = db_get_field_assoc_float(Result, "ACEITE");
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_ACELERACION] = db_get_field_assoc_int(Result, "ACELERACION");
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_ACELERACION_ACTIVE] = db_get_field_assoc_int(Result, "ACTIVE");
		

		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_COMPONENTS][0] = db_get_field_assoc_int(Result, "SLOT_0");
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_COMPONENTS][1] = db_get_field_assoc_int(Result, "SLOT_1");
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_COMPONENTS][2] = db_get_field_assoc_int(Result, "SLOT_2");
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_COMPONENTS][3] = db_get_field_assoc_int(Result, "SLOT_3");
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_COMPONENTS][4] = db_get_field_assoc_int(Result, "SLOT_4");
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_COMPONENTS][5] = db_get_field_assoc_int(Result, "SLOT_5");
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_COMPONENTS][6] = db_get_field_assoc_int(Result, "SLOT_6");
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_COMPONENTS][7] = db_get_field_assoc_int(Result, "SLOT_7");
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_COMPONENTS][8] = db_get_field_assoc_int(Result, "SLOT_8");
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_COMPONENTS][9] = db_get_field_assoc_int(Result, "SLOT_9");
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_COMPONENTS][10] = db_get_field_assoc_int(Result, "SLOT_10");
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_COMPONENTS][11] = db_get_field_assoc_int(Result, "SLOT_11");
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_COMPONENTS][12] = db_get_field_assoc_int(Result, "SLOT_12");
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_COMPONENTS][13] = db_get_field_assoc_int(Result, "SLOT_13");
		
		if(!ACCOUNT_INFO[playerid][ac_SU]) 
		{
			if(total_vehicles >= MAX_NU_VEHICLES)
			{
				GLOBAL_VEHICLES[vehicle_id][gb_vehicle_PARAMS_DOORS] = 1;
				PLAYER_VEHICLES[vehicle_id][player_vehicle_ACCESSIBLE] = false;
			}
		}
		
		new DBResult:Resultas;
		format(DB_Query, sizeof(DB_Query), "SELECT * FROM `VEHICLE_VARS` WHERE `VEHICLE_ID` = '%d';",PLAYER_VEHICLES[vehicle_id][player_vehicle_ID]);
		Resultas = db_query(Database, DB_Query);
		if(!db_num_rows(Resultas))
		{
			format(DB_Query, sizeof(DB_Query), "INSERT INTO `VEHICLE_VARS` (`VEHICLE_ID`) VALUES('%d')",PLAYER_VEHICLES[vehicle_id][player_vehicle_ID]);
			db_query(Database, DB_Query);
		}
		db_free_result(Resultas);


		format(DB_Query, sizeof(DB_Query), "SELECT * FROM `VEHICLE_VARS` WHERE `VEHICLE_ID` = '%d';",PLAYER_VEHICLES[vehicle_id][player_vehicle_ID]);
		Resultas = db_query(Database, DB_Query);
		if(db_num_rows(Resultas))
		{
			GLOBAL_VEHICLES[vehicle_id][gb_vehicle_RADIO] = db_get_field_assoc_int(Resultas, "RADIO_ID");
			GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SALTO_V] = db_get_field_assoc_int(Resultas, "SALTO_V");
			GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SALTO_V_1] = db_get_field_assoc_int(Resultas, "SALTO_V_1");
			GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SALTO_V_2] = db_get_field_assoc_int(Resultas, "SALTO_V_2");
			GLOBAL_VEHICLES[vehicle_id][gb_vehicle_BAUL] = db_get_field_assoc_int(Resultas, "BAUL");
			db_get_field_assoc(Resultas, "RADIO_LINK", GLOBAL_VEHICLES[vehicle_id][gb_vehicle_RADIO_LINK], 100);
		}
		db_free_result(Resultas);


		new DBResult:Result_vobjects, vobjects;
		format(DB_Query, sizeof(DB_Query), "SELECT * FROM `VEHICLE_OBJECTS` WHERE `ID_VEHICLE` = '%d' LIMIT %d;", PLAYER_VEHICLES[vehicle_id][player_vehicle_ID], MAX_SU_VOBJECTS);
		Result_vobjects = db_query(Database, DB_Query);

		for(new z; z < db_num_rows(Result_vobjects); z++ )
		{
			VEHICLE_OBJECTS[vehicle_id][vobjects][vobject_VALID] = true;
			VEHICLE_OBJECTS[vehicle_id][vobjects][vobject_ID] = db_get_field_assoc_int(Result_vobjects, "ID");
			VEHICLE_OBJECTS[vehicle_id][vobjects][vobject_TYPE] = db_get_field_assoc_int(Result_vobjects, "TYPE");
			db_get_field_assoc(Result_vobjects, "NAME", VEHICLE_OBJECTS[vehicle_id][vobjects][vobject_NAME], 32);
			VEHICLE_OBJECTS[vehicle_id][vobjects][vobject_MODELID] = db_get_field_assoc_int(Result_vobjects, "MODELID");
			VEHICLE_OBJECTS[vehicle_id][vobjects][vobject_OFFSET][0] = db_get_field_assoc_float(Result_vobjects, "OFF_X");
			VEHICLE_OBJECTS[vehicle_id][vobjects][vobject_OFFSET][1] = db_get_field_assoc_float(Result_vobjects, "OFF_Y");
			VEHICLE_OBJECTS[vehicle_id][vobjects][vobject_OFFSET][2] = db_get_field_assoc_float(Result_vobjects, "OFF_Z");
			VEHICLE_OBJECTS[vehicle_id][vobjects][vobject_ROT][0] = db_get_field_assoc_float(Result_vobjects, "ROT_X");
			VEHICLE_OBJECTS[vehicle_id][vobjects][vobject_ROT][1] = db_get_field_assoc_float(Result_vobjects, "ROT_Y");
			VEHICLE_OBJECTS[vehicle_id][vobjects][vobject_ROT][2] = db_get_field_assoc_float(Result_vobjects, "ROT_Z");
			VEHICLE_OBJECTS[vehicle_id][vobjects][vobject_ATTACHED] = db_get_field_assoc_int(Result_vobjects, "ATTACHED");
			VEHICLE_OBJECTS[vehicle_id][vobjects][vobject_COLORS][0] = db_get_field_assoc_int(Result_vobjects, "COLOR_0");
			VEHICLE_OBJECTS[vehicle_id][vobjects][vobject_COLORS][1] = db_get_field_assoc_int(Result_vobjects, "COLOR_1");
			VEHICLE_OBJECTS[vehicle_id][vobjects][vobject_COLORS][2] = db_get_field_assoc_int(Result_vobjects, "COLOR_2");
			VEHICLE_OBJECTS[vehicle_id][vobjects][vobject_COLORS][3] = db_get_field_assoc_int(Result_vobjects, "COLOR_3");
			VEHICLE_OBJECTS[vehicle_id][vobjects][vobject_COLORS][4] = db_get_field_assoc_int(Result_vobjects, "COLOR_4");
			db_get_field_assoc(Result_vobjects, "TEXT", VEHICLE_OBJECTS[vehicle_id][vobjects][vobject_text_TEXT], 32);
			db_get_field_assoc(Result_vobjects, "FONT", VEHICLE_OBJECTS[vehicle_id][vobjects][vobject_text_FONT], 24);
			VEHICLE_OBJECTS[vehicle_id][vobjects][vobject_text_FONT_SIZE] = db_get_field_assoc_int(Result_vobjects, "FONT_SIZE");
			VEHICLE_OBJECTS[vehicle_id][vobjects][vobject_text_BOLD] = db_get_field_assoc_int(Result_vobjects, "FONT_BOLD");
			VEHICLE_OBJECTS[vehicle_id][vobjects][vobject_text_FONT_COLOR] = db_get_field_assoc_int(Result_vobjects, "FONT_COLOR");
			UpdateVehicleAttachedObject(vehicle_id, vobjects, true);
			
			vobjects ++;
			db_next_row(Result_vobjects);
		}
		db_free_result(Result_vobjects);
		
		SetVehicleToRespawnEx(vehicle_id);

		
		
		new max_slots = VEHICLE_INFO[GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MODELID] - 400][vehicle_info_BOOT_SLOTS];
		if(max_slots > 0)
		{
			new DBResult:boot_Result, boot_DB_Query[90], boot_slot;
			format(boot_DB_Query, sizeof(boot_DB_Query), "SELECT * FROM `VEHICLE_BOOT` WHERE `ID_VEHICLE` = '%d' LIMIT %d;", PLAYER_VEHICLES[vehicle_id][player_vehicle_ID], max_slots);
			boot_Result = db_query(Database, boot_DB_Query);
			for(new x; x < db_num_rows(boot_Result); x++ )
			{
				VEHICLE_BOOT[vehicle_id][boot_slot][vehicle_boot_VALID] = true;
				VEHICLE_BOOT[vehicle_id][boot_slot][vehicle_boot_OBJECT_ID] = db_get_field_assoc_int(boot_Result, "ID_OBJECT");
				VEHICLE_BOOT[vehicle_id][boot_slot][vehicle_boot_TYPE] = db_get_field_assoc_int(boot_Result, "TYPE");
				VEHICLE_BOOT[vehicle_id][boot_slot][vehicle_boot_INT] = db_get_field_assoc_int(boot_Result, "INT");
				VEHICLE_BOOT[vehicle_id][boot_slot][vehicle_boot_INT_EXTRA] = db_get_field_assoc_int(boot_Result, "INT_EXTRA");
				
				boot_slot ++;
				db_next_row(boot_Result);
			}
			db_free_result(boot_Result);
		}
		
		total_vehicles ++;
		db_next_row(Result);
	}
	db_free_result(Result);
	return 1;
}

SavePlayerVehicles(playerid, destroy = false)
{
	if(ACCOUNT_INFO[playerid][ac_ID] == 0) return 0;
	
	for(new i = 0; i != MAX_VEHICLES; i ++)
	{
		if(!PLAYER_VEHICLES[i][player_vehicle_VALID]) continue;
		if(PLAYER_VEHICLES[i][player_vehicle_OWNER_ID] != ACCOUNT_INFO[playerid][ac_ID]) continue;
		
		GetVehiclePos(i, GLOBAL_VEHICLES[i][gb_vehicle_SPAWN_X], GLOBAL_VEHICLES[i][gb_vehicle_SPAWN_Y], GLOBAL_VEHICLES[i][gb_vehicle_SPAWN_Z]);
		GetVehicleZAngle(i, GLOBAL_VEHICLES[i][gb_vehicle_SPAWN_ANGLE]);
		GetVehicleHealth(i, GLOBAL_VEHICLES[i][gb_vehicle_HEALTH]);
		if(GLOBAL_VEHICLES[i][gb_vehicle_HEALTH] > 1000.0) GLOBAL_VEHICLES[i][gb_vehicle_HEALTH] = 1000.0;
		if(GLOBAL_VEHICLES[i][gb_vehicle_HEALTH] < MIN_VEHICLE_HEALTH) GLOBAL_VEHICLES[i][gb_vehicle_HEALTH] = MIN_VEHICLE_HEALTH;
		GetVehicleDamageStatus(i, GLOBAL_VEHICLES[i][gb_vehicle_DAMAGE_PANELS], GLOBAL_VEHICLES[i][gb_vehicle_DAMAGE_DOORS], GLOBAL_VEHICLES[i][gb_vehicle_DAMAGE_LIGHTS], GLOBAL_VEHICLES[i][gb_vehicle_DAMAGE_TIRES]);
		//GLOBAL_VEHICLES[i][gb_vehicle_WORLD] = 0; /*GetVehicleVirtualWorld(i);*/
		GLOBAL_VEHICLES[i][gb_vehicle_WORLD] = GetVehicleVirtualWorld(i);
		
		if(GLOBAL_VEHICLES[i][gb_vehicle_TRANSPORTISTA]==true)
		{
			GLOBAL_VEHICLES[i][carrier_vehicle_LOADED] = false;
			GLOBAL_VEHICLES[i][carrier_vehicle_LOADING] = false;
			GLOBAL_VEHICLES[i][gb_vehicle_TRANSPORTISTA] = false;
			GLOBAL_VEHICLES[i][gp_vehicle_TRANS_CONTIENE] = 0;
			DestroyDynamicObject(GLOBAL_VEHICLES[i][gp_vehicle_TRANS_OBJETO]);
		}
		


		new DB_Query[1800];
		format(DB_Query, sizeof DB_Query,
		"\
			UPDATE `PLAYER_VEHICLES` SET \
				`PLATE` = '%q',\
				`MODELID` = '%d',\
				`SPAWN_X` = '%f',\
				`SPAWN_Y` = '%f',\
				`SPAWN_Z` = '%f',\
				`SPAWN_ANGLE` = '%f',\
				`HEALTH` = '%f',\
				`DAMAGE_PANELS` = '%d',\
				`DAMAGE_DOORS` = '%d',\
				`DAMAGE_LIGHTS` = '%d',\
				`DAMAGE_TIRES` = '%d',\
				`COLOR_1` = '%d',\
				`COLOR_2` = '%d',\
				`PAINTJOB` = '%d',\
				`GAS` = '%f',\
				`MAX_GAS` = '%f',\
				`CLOSED` = '%d',\
				`INTERIOR` = '%d',\
				`WORLD` = '%d',\
				`STATE` = '%d', \
				`ACEITE` = '%f', \
				`MAX_ACEITE` = '%f', \
				`ACELERACION` = '%d', \
				`ACTIVE` = '%d' \
			WHERE `ID` = '%d';\
		",
			GLOBAL_VEHICLES[i][gb_vehicle_NUMBER_PLATE],
			GLOBAL_VEHICLES[i][gb_vehicle_MODELID],
			GLOBAL_VEHICLES[i][gb_vehicle_SPAWN_X],
			GLOBAL_VEHICLES[i][gb_vehicle_SPAWN_Y],
			GLOBAL_VEHICLES[i][gb_vehicle_SPAWN_Z],
			GLOBAL_VEHICLES[i][gb_vehicle_SPAWN_ANGLE],
			GLOBAL_VEHICLES[i][gb_vehicle_HEALTH],
			GLOBAL_VEHICLES[i][gb_vehicle_DAMAGE_PANELS],
			GLOBAL_VEHICLES[i][gb_vehicle_DAMAGE_DOORS],
			GLOBAL_VEHICLES[i][gb_vehicle_DAMAGE_LIGHTS],
			GLOBAL_VEHICLES[i][gb_vehicle_DAMAGE_TIRES],
			GLOBAL_VEHICLES[i][gb_vehicle_COLOR_1],
			GLOBAL_VEHICLES[i][gb_vehicle_COLOR_2],
			GLOBAL_VEHICLES[i][gb_vehicle_PAINTJOB],
			GLOBAL_VEHICLES[i][gb_vehicle_GAS],
			GLOBAL_VEHICLES[i][gb_vehicle_MAX_GAS],
			GLOBAL_VEHICLES[i][gb_vehicle_PARAMS_DOORS],
			GLOBAL_VEHICLES[i][gb_vehicle_INTERIOR],
			GLOBAL_VEHICLES[i][gb_vehicle_WORLD],
			GLOBAL_VEHICLES[i][gb_vehicle_STATE],
			GLOBAL_VEHICLES[i][gb_vehicle_ACEITE],
			GLOBAL_VEHICLES[i][gb_vehicle_MAX_ACEITE],
			GLOBAL_VEHICLES[i][gb_vehicle_ACELERACION],
			GLOBAL_VEHICLES[i][gb_vehicle_ACELERACION_ACTIVE],


			PLAYER_VEHICLES[i][player_vehicle_ID]
		);
		db_query(Database, DB_Query);
		
		for(new x = 0; x != MAX_VEHICLE_COMPONENTS; x ++)
		{
			DB_Query[0] = EOS;
			
			format(DB_Query, sizeof DB_Query,
			"\
				UPDATE `PLAYER_VEHICLE_COMPONENTS` SET \
					`SLOT_0` = '%d',\
					`SLOT_1` = '%d',\
					`SLOT_2` = '%d',\
					`SLOT_3` = '%d',\
					`SLOT_4` = '%d',\
					`SLOT_5` = '%d',\
					`SLOT_6` = '%d',\
					`SLOT_7` = '%d',\
					`SLOT_8` = '%d',\
					`SLOT_9` = '%d',\
					`SLOT_10` = '%d',\
					`SLOT_11` = '%d',\
					`SLOT_12` = '%d',\
					`SLOT_13` = '%d' \
				WHERE `ID_VEHICLE` = '%d';\
			",
				GLOBAL_VEHICLES[i][gb_vehicle_COMPONENTS][0],
				GLOBAL_VEHICLES[i][gb_vehicle_COMPONENTS][1],
				GLOBAL_VEHICLES[i][gb_vehicle_COMPONENTS][2],
				GLOBAL_VEHICLES[i][gb_vehicle_COMPONENTS][3],
				GLOBAL_VEHICLES[i][gb_vehicle_COMPONENTS][4],
				GLOBAL_VEHICLES[i][gb_vehicle_COMPONENTS][5],
				GLOBAL_VEHICLES[i][gb_vehicle_COMPONENTS][6],
				GLOBAL_VEHICLES[i][gb_vehicle_COMPONENTS][7],
				GLOBAL_VEHICLES[i][gb_vehicle_COMPONENTS][8],
				GLOBAL_VEHICLES[i][gb_vehicle_COMPONENTS][9],
				GLOBAL_VEHICLES[i][gb_vehicle_COMPONENTS][10],
				GLOBAL_VEHICLES[i][gb_vehicle_COMPONENTS][11],
				GLOBAL_VEHICLES[i][gb_vehicle_COMPONENTS][12],
				GLOBAL_VEHICLES[i][gb_vehicle_COMPONENTS][13],
				
				PLAYER_VEHICLES[i][player_vehicle_ID]
			);
			db_query(Database, DB_Query);
		}
		
		if(destroy) DestroyVehicleEx(i);
	}
	return 1;
}

public OnVehicleSpawn(vehicleid)
{
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_TP_IMMUNITY] = gettime() + 5;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWNED] = true;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_ATTACHED_TO] = INVALID_VEHICLE_ID;
	
	if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_HEALTH] < MIN_VEHICLE_HEALTH) GLOBAL_VEHICLES[vehicleid][gb_vehicle_HEALTH] = MIN_VEHICLE_HEALTH;
	
	if(IsValidDynamic3DTextLabel(GLOBAL_VEHICLES[vehicleid][gb_vehicle_LABEL]))
	{
		DestroyDynamic3DTextLabel(GLOBAL_VEHICLES[vehicleid][gb_vehicle_LABEL]);
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_LABEL] = Text3D:INVALID_STREAMER_ID;
	}
	
	if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_TYPE] == VEHICLE_TYPE_WORK)
	{
		if(WORK_VEHICLES[vehicleid][work_vehicle_WORK] == WORK_TRASH)
		{
			if(TRASH_VEHICLES[vehicleid][trash_vehicle_JOB_STARTED])
			{
				CancelTrashWork(TRASH_VEHICLES[vehicleid][trash_vehicle_DRIVER_ID], TRASH_VEHICLES[vehicleid][trash_vehicle_PASSENGER_ID], vehicleid);
			}
		}
		
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_STATE] = VEHICLE_STATE_NORMAL;
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_GAS] = frandom(GLOBAL_VEHICLES[vehicleid][gb_vehicle_MAX_GAS], GLOBAL_VEHICLES[vehicleid][gb_vehicle_MAX_GAS] / 3, 2);
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_ACEITE] = frandom(GLOBAL_VEHICLES[vehicleid][gb_vehicle_MAX_ACEITE], GLOBAL_VEHICLES[vehicleid][gb_vehicle_MAX_ACEITE] / 3, 2);
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_HEALTH] = 1000.0;
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_DAMAGE_PANELS] = 0;
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_DAMAGE_DOORS] = 0;
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_DAMAGE_LIGHTS] = 0;
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_DAMAGE_TIRES] = 0;
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER] = INVALID_PLAYER_ID;
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_LAST_DRIVER] = INVALID_PLAYER_ID;
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_OCCUPIED] = false;
		
		switch(WORK_VEHICLES[vehicleid][work_vehicle_WORK])
		{
			case WORK_TAXI: ResetVehicleTaxiMeter(vehicleid);
			case WORK_TRUCK: ResetTruckInfo(vehicleid);
			case WORK_TRASH: ResetTrashInfo(vehicleid);
			case WORK_PIZZA: ResetPizzaInfo(vehicleid);
		}
	}
	SetVehicleNumberPlate(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_NUMBER_PLATE]);
	SetVehicleHealthEx(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_HEALTH]);
	UpdateVehicleDamageStatus(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_DAMAGE_PANELS], GLOBAL_VEHICLES[vehicleid][gb_vehicle_DAMAGE_DOORS], GLOBAL_VEHICLES[vehicleid][gb_vehicle_DAMAGE_LIGHTS], GLOBAL_VEHICLES[vehicleid][gb_vehicle_DAMAGE_TIRES]);
    ChangeVehicleColor(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_COLOR_1], GLOBAL_VEHICLES[vehicleid][gb_vehicle_COLOR_2]);
	ChangeVehiclePaintjob(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_PAINTJOB]);
	SetVehiclePosEx(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWN_X], GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWN_Y], GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWN_Z]);
	SetVehicleZAngle(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWN_ANGLE]);
	LinkVehicleToInteriorEx(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_INTERIOR]);
	SetVehicleVirtualWorldEx(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_WORLD]);
	AddVehicleComponents(vehicleid);
	
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE] = 0;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_LIGHTS] = 0;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ALARM] = 0;
	if(!PLAYER_VEHICLES[vehicleid][player_vehicle_VALID]) GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_DOORS] = 0;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_BONNET] = 0;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_BOOT] = 0;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_OBJECTIVE] = 0;
	UpdateVehicleParams(vehicleid);
	return 1;
}

UpdateVehicleParams(vehicleid)
{
	return SetVehicleParamsEx(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE], GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_LIGHTS], GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ALARM], GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_DOORS], GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_BONNET], GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_BOOT], GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_OBJECTIVE]);
}

SetVehicleHealthEx(vehicleid, Float:health, forplayerid = INVALID_PLAYER_ID)
{
	if(forplayerid != INVALID_PLAYER_ID) PLAYER_AC_INFO[forplayerid][CHEAT_VEHICLE_HEALTH][p_ac_info_IMMUNITY] = gettime() + 3;
	
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_HEALTH] = health;
	SetVehicleHealth(vehicleid, health);
	return 1;
}

RepairVehicleTruel(vehicleid, forplayerid = INVALID_PLAYER_ID)
{
	if(forplayerid != INVALID_PLAYER_ID) PLAYER_AC_INFO[forplayerid][CHEAT_VEHICLE_HEALTH][p_ac_info_IMMUNITY] = gettime() + 3;
	
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_LAST_REPAIR_TIME] = gettime();
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_STATE] = VEHICLE_STATE_NORMAL;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_HEALTH] = 1000.0;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_DAMAGE_PANELS] = 0;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_DAMAGE_DOORS] = 0;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_DAMAGE_LIGHTS] = 0;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_DAMAGE_TIRES] = 0;
	SetVehicleHealthEx(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_HEALTH]);

	return 1;
}

RepairVehicleEx(vehicleid, forplayerid = INVALID_PLAYER_ID)
{
	if(forplayerid != INVALID_PLAYER_ID) PLAYER_AC_INFO[forplayerid][CHEAT_VEHICLE_HEALTH][p_ac_info_IMMUNITY] = gettime() + 3;
	
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_LAST_REPAIR_TIME] = gettime();
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_STATE] = VEHICLE_STATE_NORMAL;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_HEALTH] = 1000.0;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_DAMAGE_PANELS] = 0;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_DAMAGE_DOORS] = 0;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_DAMAGE_LIGHTS] = 0;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_DAMAGE_TIRES] = 0;
	SetVehicleHealthEx(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_HEALTH]);
	RepairVehicle(vehicleid);
	return 1;
}

SetVehiclePosEx(vehicleid, Float:x, Float:y, Float:z)
{
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_TP_IMMUNITY] = gettime() + 5;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_POS][0] = x;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_POS][1] = y;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_POS][2] = z;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_ATTACHED_TO] = INVALID_VEHICLE_ID;
	return SetVehiclePos(vehicleid, x, y, z);
}

LinkVehicleToInteriorEx(vehicleid, interior)
{
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_TP_IMMUNITY] = gettime() + 5;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_INTERIOR] = interior;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_ATTACHED_TO] = INVALID_VEHICLE_ID;
	return LinkVehicleToInterior(vehicleid, interior);
}

stock SetVehicleToRespawnEx(vehicleid)
{

	if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_TYPE] == VEHICLE_TYPE_RENT)
	{
		if(GLOBAL_VEHICLES[vehicleid][IN_RENT] == true)
		{
			new label_str[150];
			DestroyDynamic3DTextLabel(RENT_VEHICLE_INFO[vehicleid][rent_vehicle_LABEL_ID]);
			format(label_str, sizeof label_str,"{E33213}%s en alquiler\n{FFFFFF}Sube para alquilarlo\n",VEHICLE_INFO[GLOBAL_VEHICLES[vehicleid][gb_vehicle_MODELID] - 400][vehicle_info_NAME]);
			RENT_VEHICLE_INFO[vehicleid][rent_vehicle_LABEL_ID] = CreateDynamic3DTextLabel(label_str, 0xFFFFFFFF, 0.0, 0.0, 1.5, 10.0, .attachedvehicle = vehicleid, .testlos = true, .worldid = 0, .interiorid = 0);
			GLOBAL_VEHICLES[vehicleid][IN_RENT] = false;
			GLOBAL_VEHICLES[vehicleid][RENT_OWNER] = -1;
			foreach(new i : Player)
			{
				if(VEHICLERENT[i] == vehicleid)
				{
					VEHICLERENT[i] = -1;
					MensajesAyuda(i,"El vehiculo se a desrentado porque se destruyo o se restablecio.");
				}
			}
		}
	}
	 
	

	GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWNED] = false;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_ATTACHED_TO] = INVALID_VEHICLE_ID;
	return SetVehicleToRespawn(vehicleid);
}

public OnVehicleDeath(vehicleid, killerid)
{
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWNED] = false;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER] = INVALID_PLAYER_ID;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_LAST_DRIVER] = INVALID_PLAYER_ID;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_OCCUPIED] = false;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_ATTACHED_TO] = INVALID_VEHICLE_ID;
	
	if(IsValidDynamic3DTextLabel(GLOBAL_VEHICLES[vehicleid][gb_vehicle_LABEL]))
	{
		DestroyDynamic3DTextLabel(GLOBAL_VEHICLES[vehicleid][gb_vehicle_LABEL]);
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_LABEL] = Text3D:INVALID_STREAMER_ID;
	}
	

	switch(GLOBAL_VEHICLES[vehicleid][gb_vehicle_TYPE])
	{
		case VEHICLE_TYPE_RENT:
		{
			new label_str[150];
			DestroyDynamic3DTextLabel(RENT_VEHICLE_INFO[vehicleid][rent_vehicle_LABEL_ID]);
			format(label_str, sizeof label_str,"{E33213}%s en alquiler\n{FFFFFF}Sube para alquilarlo\n",VEHICLE_INFO[GLOBAL_VEHICLES[vehicleid][gb_vehicle_MODELID] - 400][vehicle_info_NAME]);
			RENT_VEHICLE_INFO[vehicleid][rent_vehicle_LABEL_ID] = CreateDynamic3DTextLabel(label_str, 0xFFFFFFFF, 0.0, 0.0, 1.5, 10.0, .attachedvehicle = vehicleid, .testlos = true, .worldid = 0, .interiorid = 0);
			GLOBAL_VEHICLES[vehicleid][IN_RENT] = false;
			GLOBAL_VEHICLES[vehicleid][RENT_OWNER] = -1;
			foreach(new i : Player)
			{
				if(VEHICLERENT[i] == vehicleid)
				{
					HideRentVehicle(i);
					MensajesAyuda(i,"El vehiculo se a desrentado porque se destruyo o se restablecio.");
				}
			}
		}
		case VEHICLE_TYPE_TEST: DestroyVehicleEx(vehicleid);
		case VEHICLE_TYPE_PERSONAL:
		{
			if(VEHICLE_INFO[GLOBAL_VEHICLES[vehicleid][gb_vehicle_MODELID] - 400][vehicle_info_VALID])
			{
				GLOBAL_VEHICLES[vehicleid][gb_vehicle_STATE] = VEHICLE_STATE_DAMAGED;
				GLOBAL_VEHICLES[vehicleid][gb_vehicle_HEALTH] = MIN_VEHICLE_HEALTH;
			}
			else
			{
				GLOBAL_VEHICLES[vehicleid][gb_vehicle_STATE] = VEHICLE_STATE_NORMAL;
				GLOBAL_VEHICLES[vehicleid][gb_vehicle_HEALTH] = 1000.0;
			}
			
			new playerid = GetPlayerIdFromAccountId(PLAYER_VEHICLES[vehicleid][player_vehicle_OWNER_ID]);
			if(playerid != INVALID_PLAYER_ID)
			{
				if(PLAYER_PHONE[playerid][player_phone_VALID])
				{
					if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_TRANSPORTISTA] == true)
					{
						MensajesAyuda(playerid,"Perdiste la carga que transportabas en el DFT");
						DestroyDynamicCP(PLAYER_TEMP[playerid][pt_CARRIER_CHECKPOINT]);
						PLAYER_TEMP[playerid][pt_CARRIER_CHECKPOINT] = INVALID_STREAMER_ID;
					}
					new message[64]; format(message, sizeof message, "Vehículo de sustitución entregado en últ. estacionamiento.");
					RegisterPhoneMessage(38350, PLAYER_PHONE[playerid][player_phone_NUMBER], message);
					if(PLAYER_PHONE[playerid][player_phone_STATE] == PHONE_STATE_ON)
					{
						if((PLAYER_TEMP[playerid][pt_GAME_STATE] == GAME_STATE_NORMAL || PLAYER_TEMP[playerid][pt_GAME_STATE] == GAME_STATE_DEAD))
						{
							SendClientMessageEx(playerid, -1, "{b7dd80}[NUEVO MENSAJE]: {e5f442}De: {FFFFFF}%s {b7dd80}Mensaje: {FFFFFF}%s", convertPhoneNumber(playerid, 38350), message);
						}
					}
				}
			}
		}
		default:
		{
			GLOBAL_VEHICLES[vehicleid][gb_vehicle_STATE] = VEHICLE_STATE_NORMAL;
			GLOBAL_VEHICLES[vehicleid][gb_vehicle_GAS] = frandom(GLOBAL_VEHICLES[vehicleid][gb_vehicle_MAX_GAS], GLOBAL_VEHICLES[vehicleid][gb_vehicle_MAX_GAS] / 3, 2);
			GLOBAL_VEHICLES[vehicleid][gb_vehicle_ACEITE] = frandom(GLOBAL_VEHICLES[vehicleid][gb_vehicle_MAX_ACEITE], GLOBAL_VEHICLES[vehicleid][gb_vehicle_MAX_ACEITE] / 3, 2);
			GLOBAL_VEHICLES[vehicleid][gb_vehicle_HEALTH] = 1000.0;
			GLOBAL_VEHICLES[vehicleid][gb_vehicle_DAMAGE_PANELS] = 0;
			GLOBAL_VEHICLES[vehicleid][gb_vehicle_DAMAGE_DOORS] = 0;
			GLOBAL_VEHICLES[vehicleid][gb_vehicle_DAMAGE_LIGHTS] = 0;
			GLOBAL_VEHICLES[vehicleid][gb_vehicle_DAMAGE_TIRES] = 0;
		}
	}

	if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_TRANSPORTISTA] == true)
	{
		GLOBAL_VEHICLES[vehicleid][gp_vehicle_TRANS_CONTIENE] = 0;
		GLOBAL_VEHICLES[vehicleid][carrier_vehicle_LOADED] = false;
		GLOBAL_VEHICLES[vehicleid][carrier_vehicle_LOADING] = false;
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_TRANSPORTISTA] = false;
		DestroyDynamicObject(GLOBAL_VEHICLES[vehicleid][gp_vehicle_TRANS_OBJETO]);
	}
    return 1;
}

public OnUnoccupiedVehicleUpdate(vehicleid, playerid, passenger_seat, Float:new_x, Float:new_y, Float:new_z, Float:vel_x, Float:vel_y, Float:vel_z)
{
	if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_VALID])
	{
		if(ac_Info[CHEAT_UNOCCUPIED_VEHICLE_TP][ac_Enabled])
		{
			if(PLAYER_TEMP[playerid][pt_KICKED]) return 0;
			
			new Float:veh_x, Float:veh_y, Float:veh_z, Float:veh_dis;
			GetVehiclePos(vehicleid, veh_x, veh_y, veh_z);
			veh_dis = GetVehicleDistanceFromPoint(vehicleid, new_x, new_y, new_z);
			
			if(gettime() > GLOBAL_VEHICLES[vehicleid][gb_vehicle_TP_IMMUNITY] && GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWNED])
			{
				if(veh_dis > 20.0 && veh_z > -70.0)
				{
					if(gettime() > PLAYER_AC_INFO[playerid][CHEAT_UNOCCUPIED_VEHICLE_TP][p_ac_info_IMMUNITY])
					{
						if(!ac_Info[CHEAT_UNOCCUPIED_VEHICLE_TP][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_UNOCCUPIED_VEHICLE_TP, veh_dis);
						else
						{
							if(gettime() - PLAYER_AC_INFO[playerid][CHEAT_UNOCCUPIED_VEHICLE_TP][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_UNOCCUPIED_VEHICLE_TP][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_UNOCCUPIED_VEHICLE_TP][p_ac_info_DETECTIONS] = 0;
							else PLAYER_AC_INFO[playerid][CHEAT_UNOCCUPIED_VEHICLE_TP][p_ac_info_DETECTIONS] ++;
							
							PLAYER_AC_INFO[playerid][CHEAT_UNOCCUPIED_VEHICLE_TP][p_ac_info_LAST_DETECTION] = gettime();
							if(PLAYER_AC_INFO[playerid][CHEAT_UNOCCUPIED_VEHICLE_TP][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_UNOCCUPIED_VEHICLE_TP][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_UNOCCUPIED_VEHICLE_TP, veh_dis);
						}
					}
					
					SetVehicleVelocity(vehicleid, 0.0, 0.0, 0.0);
					return 0;
				}
			} 
		}
		
		new Float:spawn_distance = GetVehicleDistanceFromPoint(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWN_X], GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWN_Y], GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWN_Z]);
		switch(GLOBAL_VEHICLES[vehicleid][gb_vehicle_TYPE])
		{
			case VEHICLE_TYPE_SELL:
			{
				if(spawn_distance > 10.0) SetVehicleToRespawnEx(vehicleid);
			}
			case VEHICLE_TYPE_WORK:
			{
				if(TRASH_VEHICLES[vehicleid][trash_vehicle_JOB_STARTED]) return 1;
				if(spawn_distance < 25.0)
				{
					if(spawn_distance > 10.0) SetVehicleToRespawnEx(vehicleid);
				}
			}
		}
	}
    return 1;
}

GetPlayerIdFromAccountId(accountid)
{
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(ACCOUNT_INFO[i][ac_ID] == accountid)
			{
				return i;
			}
		}
	}
	return INVALID_PLAYER_ID;
}
CMD:voltear(playerid,params[])
{
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
    {
		if(IsPlayerInAnyVehicle(playerid))
		{
			new VehicleID = GetPlayerVehicleID(playerid);
			new Float:Ango;
			GetVehicleZAngle(VehicleID, Ango);
			SetVehicleZAngle(VehicleID, Ango);
		}
	}
	return 1;
}

CMD:expulsar(playerid,params[])
{
    if (!IsPlayerInAnyVehicle(playerid))
    return SendClientMessage(playerid, -1, "* Debes estar en un vehiculo");
    if (!IsPlayerDriver(playerid))
    return SendClientMessage(playerid, -1, "* Debes estar en un vehiculo");
	new giveplayerid;
	if(sscanf(params, "d",giveplayerid)) return SendClientMessage(playerid, -1,"Syntax: /Expulsar [playerid/nombre] ");
    if (giveplayerid == playerid) return SendClientMessage(playerid, -1, "* No puedes sacarte a ti mismo");

    if (IsPlayerConnected(giveplayerid) && giveplayerid != INVALID_PLAYER_ID)
    {
        new strings[256];
        if (GetPlayerVehicleID(playerid) == GetPlayerVehicleID(giveplayerid))
        {
            format(strings, sizeof(strings), "* Sacaste al jugador %s (ID: %d) de tu vehiculo", PLAYER_TEMP[giveplayerid][pt_NAME], giveplayerid);
            SendClientMessage(playerid, 0xC5CB00FF, strings);
            format(strings, sizeof(strings), "* %s (ID: %d) te ha sacado del vehiculo", PLAYER_TEMP[playerid][pt_NAME], playerid);
            SendClientMessage(giveplayerid, 0xC5CB00FF, strings);
            RemovePlayerFromVehicle(giveplayerid);
        } 
        else 
        {
            format(strings, sizeof(strings), "%s (ID: %d) No está en tu vehiculo!", PLAYER_TEMP[giveplayerid][pt_NAME], giveplayerid);
            SendClientMessage(playerid, -1, strings);
        }
    } else SendClientMessage(playerid, -1, "* El jugador no está conectado.");
    return 1;
}

#define NECESSARY_TIME_BETWEEN_WORKS	600 //segundos
CMD:trabajar(playerid, params[])
{	
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return ShowPlayerMessage(playerid, "No estás en el lugar adecuado.", 3);
	
	if(gettime() < PLAYER_TEMP[playerid][pt_LAST_GOT_WORK_TIME] + NECESSARY_TIME_BETWEEN_WORKS)
	{
		new time = NECESSARY_TIME_BETWEEN_WORKS - (gettime() - PLAYER_TEMP[playerid][pt_LAST_GOT_WORK_TIME]);
		SendClientMessageEx(playerid, -1, "{00FF80}Debes de esperar %s minutos para conseguir otro trabajo.", TimeConvert(time));
		return 1;
	}

	new player_jobs = CountPlayerJobs(playerid);
	if(ACCOUNT_INFO[playerid][ac_SU]>=2)
	{
		if(player_jobs >= 4)
		{
			SendClientMessageEx(playerid, -1, "{E6F8E0}Actualmente tienes %d trabajos, usa /renunciar para dejar un trabajo.", player_jobs);
			return 1;
		}
	}
	if(ACCOUNT_INFO[playerid][ac_SU]==1)
	{
		if(player_jobs >= 2)
		{
			SendClientMessageEx(playerid, -1, "{E6F8E0}Actualmente tienes %d trabajos, usa /renunciar para dejar un trabajo.", player_jobs);
			return 1;
		}
	}
	if(ACCOUNT_INFO[playerid][ac_SU]==0)
	{
		if(player_jobs >= 1)
		{
			SendClientMessageEx(playerid, -1, "{E6F8E0}Actualmente tienes %d trabajos, usa /renunciar para dejar un trabajo.", player_jobs);
			SendClientMessageEx(playerid, -1, "{E6F8E0}¡Los jugadores {b1fc6f}VIP1 {E6F8E0}pueden tener hasta 2 trabajos VIP2 pueden tener hasta 4! Usa {fffb49}/ayuda {E6F8E0}si quieres ser {b1fc6f}VIP.", MAX_SU_WORKS);
			return 1;
		}
	}
	
	for(new i = 0; i != sizeof obtain_work_coords; i ++)
	{
		if(work_info[i][work_info_TYPE] == WORK_TYPE_FAMILY) continue;
		
		if(GetPlayerInterior(playerid) == obtain_work_coords[i][obtain_work_INTERIOR])
		{
			if(IsPlayerInRangeOfPoint(playerid, 1.0, obtain_work_coords[i][obtain_work_X], obtain_work_coords[i][obtain_work_Y], obtain_work_coords[i][obtain_work_Z]))
			{
				if(work_info[i][work_info_LEVEL] > ACCOUNT_INFO[playerid][ac_LEVEL])
				{
					SendClientMessageEx(playerid, -1, "Necesitas ser al menos nivel %d para obtener este trabajo.", work_info[i][work_info_LEVEL]);
					return 1;
				}
				
				if(PLAYER_WORKS[playerid][i])
				{
					SendClientMessageEx(playerid, -1, "{00FF80}Ya eres %s.", work_info[i][work_info_NAME]);
					return 1;
				}
				
				if(i == 13)
				{
					if(Get_Work_Level(playerid,WORK_TRUCK) != 5)
					{
						SendClientMessage(playerid,-1,"Nesecitas nivel 5 de camionero para trabajar de "R"\"Transportista\"");
						return 1;
					}
				}
				new DB_Query[256];
				format(DB_Query, sizeof DB_Query, "UPDATE `PLAYER_WORKS` SET `SET` = '1' WHERE `ID_USER` = '%d' AND `ID_WORK` = '%d';", ACCOUNT_INFO[playerid][ac_ID], i);
				db_query(Database, DB_Query);
				
				PLAYER_WORKS[playerid][i] = true;
				PLAYER_TEMP[playerid][pt_LAST_GOT_WORK_TIME] = gettime();
				//SendClientMessageEx(playerid, -1, "{b6f442}¡Felicidades! {FFFFFF}Has conseguido tu trabajo de %s.", work_info[i][work_info_NAME]);
				format(string2,sizeof(string2),"~y~¡Felicidades! ~w~Has conseguido el trabajo de ~y~~h~~h~%s.", work_info[i][work_info_NAME]);
				MensajesAyuda(playerid,string2);
				MensajesAyuda(playerid,"Puedes utilizar ~y~/ayuda trabajos ~w~para ver como trabajar aquí.");
				return 1;
			}
		}
	}
	
	ShowPlayerMessage(playerid, "No estás en el lugar adecuado.", 3);
	return 1;
}

CMD:dimitir(playerid, params[])
{
	new player_jobs = CountPlayerJobs(playerid);
	if(!player_jobs) return SendClientMessage(playerid, -1, "{00FF80}No tienes ningún trabajo.");
	
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendClientMessage(playerid, -1, "{00FF80}No estás depie.");
	
	new work;
	if(sscanf(params, "d", work))
	{
		new works[32 * sizeof(work_info)], line_str[32], count;
		for(new i = 1; i != sizeof(work_info); i ++)
		{
			if(PLAYER_WORKS[playerid][i])
			{
				if(count > 0) strcat(works, ", ");
				
				format(line_str, sizeof line_str, "%s (%d)", work_info[i][work_info_NAME], i);
				strcat(works, line_str);
				
				count ++;
			}
		}
		SendClientMessageEx(playerid, -1, "{E6F8E0}Tus trabajos: %s", works);
		SendClientMessage(playerid, -1, "{E6F8E0}Utiliza /renunciar <id del trabajo>");
		return 1;
	}
	
	if(work < 1 || work >= sizeof work_info) return SendClientMessage(playerid, -1, "El trabajo no es válido.");
	
	if(!PLAYER_WORKS[playerid][work]) return SendClientMessageEx(playerid, -1, "{00FF80}No eres %s.", work_info[work][work_info_NAME]);
	if(PLAYER_TEMP[playerid][pt_WORKING_IN] == work) return SendClientMessage(playerid, -1, "{00FF80}Ahora mismo estás de servicio en ese trabajo, deja de trabajar para abandonar el trabajo.");
	
	new DB_Query[256];
	format(DB_Query, sizeof DB_Query, "UPDATE `PLAYER_WORKS` SET `SET` = '0' WHERE `ID_USER` = '%d' AND `ID_WORK` = '%d';", ACCOUNT_INFO[playerid][ac_ID], work);
	db_query(Database, DB_Query);
					
	if(work == WORK_POLICE)
	{
		format(DB_Query, sizeof DB_Query, "UPDATE `PLAYER_SKILLS` SET `TOTAL` = '0' WHERE `ID_USER` = '%d' AND `ID_WORK` = '%d';", ACCOUNT_INFO[playerid][ac_ID], work);
		db_query(Database, DB_Query);
				
		PLAYER_SKILLS[playerid][work] = 0;
	}
	
	SendClientMessageEx(playerid, -1, "{E6F8E0}Has abandonado tu trabajo de %s.", work_info[work][work_info_NAME]);
	PLAYER_WORKS[playerid][work] = false;
	return 1;
}
alias:dimitir("renunciar");

CMD:abrir(playerid, params[])
{
	new vehicleid = INVALID_VEHICLE_ID;
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER || GetPlayerState(playerid) == PLAYER_STATE_PASSENGER) vehicleid = GetPlayerVehicleID(playerid);
	else if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) vehicleid = GetPlayerCameraTargetVehicle(playerid);
		
	if(vehicleid == INVALID_VEHICLE_ID) return SendClientMessage(playerid, -1, "{00FF80}No estás en tu vehículo o cerca de él para abrirlo.");
	if(!PLAYER_VEHICLES[vehicleid][player_vehicle_VALID]) return SendClientMessage(playerid, -1, "{00FF80}Este no es tú vehículo.");
	if((PLAYER_VEHICLES[vehicleid][player_vehicle_OWNER_ID] == ACCOUNT_INFO[playerid][ac_ID]) || (GetKeysFromThisVehicle(playerid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_ID]) == 1)) //return SendClientMessage(playerid, -1, "{00FF80}Este no es tú vehículo.");
	{
		//if(!ACCOUNT_INFO[playerid][ac_SU] && !PLAYER_VEHICLES[vehicleid][player_vehicle_ACCESSIBLE])
		switch(ACCOUNT_INFO[playerid][ac_SU])
		{
			case 0:
			{
				if(GetPlayerVehicles(playerid) > 2)
				{
					SendClientMessage(playerid, -1, "{00FF80}Este vehículo está bloqueado debido a que tienes mas de 2 vehiculos, desbloquealo con VIP.");
					SendClientMessageEx(playerid, -1, "{E6F8E0}¡Los jugadores {b1fc6f}VIP 1{E6F8E0}pueden tener hasta 4 vehículos! Usa {fffb49}/ayuda {E6F8E0}si quieres ser {b1fc6f}VIP 1.", MAX_SU_VEHICLES);
					return 1;
				}
			}
			case 1:
			{
				if(GetPlayerVehicles(playerid) > 4)
				{
					SendClientMessage(playerid, -1, "{00FF80}Este vehículo está bloqueado debido a que tienes mas de 4 vehiculos, desbloquealo con VIP.");
					SendClientMessageEx(playerid, -1, "{E6F8E0}¡Los jugadores {b1fc6f}VIP 2{E6F8E0}pueden tener hasta 6 vehículos! Usa {fffb49}/ayuda {E6F8E0}si quieres ser {b1fc6f}VIP 2.", MAX_SU_VEHICLES);
					return 1;
				}
			}
			case 2:
			{
				if(GetPlayerVehicles(playerid) > 6)
				{
					SendClientMessageEx(playerid, -1, "{E6F8E0} Ya tienes más de 6 vehiculos, no puedes desbloquear más vehiculos", MAX_SU_VEHICLES);
					return 1;
				}
			}
		}
		
		
		if(!GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_DOORS]) return SendClientMessage(playerid, -1, "{E6F8E0}Las puertas de tu vehículo ya están abiertas.");
		
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_DOORS] = 0;
		UpdateVehicleParams(vehicleid);
		//Auto_SendPlayerAction(playerid, "ha abierto las puertas de su vehículo.");
		SendAccion(playerid,"ha abierto las puertas del vehiculo",7000);

		new string[100];
		format(string,sizeof(string),"~y~~h~%s ~w~Destrabado",VEHICLE_INFO[GLOBAL_VEHICLES[vehicleid][gb_vehicle_MODELID] - 400][vehicle_info_NAME]);
		MensajeAyuda_4(playerid,string);
	}
	else MensajesAyuda(playerid,"No eres el propietario de este vehiculo, tampoco posees llaves");
	return 1;
}
CMD:creditos(playerid,params[])
{
    new string[585];
    strcat(string, "{FFFFFF}Credito\tDescripción");
    strcat(string, "\n{00C600}Fundador:\t{FFFFFF}Michael_Angelus");
    strcat(string, "\n{00C600}Dueño:\t{FFFFFF}Michael_Angelus");
    strcat(string, "\n{00C600}Scripter/Programador\t{FFFFFF}Michael_Angelus");
    strcat(string, "\n{00C600}Game Base\t{FFFFFF}Superrp");
    strcat(string, "\n{00C600}Host/(P)Hosted\t{FFFFFF}Michael_Angelus");
    strcat(string, "\n{00C600}Mapper\t{FFFFFF}Michael_Angelus");
    strcat(string, "\n{00C600}Discord\t{FFFFFF}discord.gg/tw7GRtK");
    strcat(string, "\n{00C600}Foro\t{FFFFFF}En creacion/");
    strcat(string, "\n{00C600}Pagina de facebook\t{FFFFFF}Vacio");
    ShowPlayerDialog(playerid, DIALOG_NULL, DIALOG_STYLE_TABLIST_HEADERS, ""SERVER_NAME" Creditos", string, "Aceptar", "");
    PlayerPlaySound(playerid,1139,0.0,0.0,0.0);
    return 1;
}
CMD:cerrar(playerid, params[])
{
	new vehicleid = INVALID_VEHICLE_ID;
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER || GetPlayerState(playerid) == PLAYER_STATE_PASSENGER) vehicleid = GetPlayerVehicleID(playerid);
	else if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) vehicleid = GetPlayerCameraTargetVehicle(playerid);
		
	if(vehicleid == INVALID_VEHICLE_ID) return SendClientMessage(playerid, -1, "{00FF80}No estás en tu vehículo o cerca de él para abrirlo.");
	if(!PLAYER_VEHICLES[vehicleid][player_vehicle_VALID]) return SendClientMessage(playerid, -1, "{00FF80}Este no es tú vehículo.");
	//if(PLAYER_VEHICLES[vehicleid][player_vehicle_OWNER_ID] != ACCOUNT_INFO[playerid][ac_ID]) return SendClientMessage(playerid, -1, "{00FF80}Este no es tú vehículo.");
	if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_DOORS]) return SendClientMessage(playerid, -1, "{E6F8E0}Las puertas de tu vehículo ya están cerradas.");
	
	if((PLAYER_VEHICLES[vehicleid][player_vehicle_OWNER_ID] == ACCOUNT_INFO[playerid][ac_ID]) || (GetKeysFromThisVehicle(playerid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_ID]) == 1)) //return SendClientMessage(playerid, -1, "{00FF80}Este no es tú vehículo.");
	{
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_LAST_CLOSED_TIME] = gettime();
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_DOORS] = 1;
		UpdateVehicleParams(vehicleid);
		//Auto_SendPlayerAction(playerid, "ha cerrado las puertas de su vehículo.");
		SendAccion(playerid,"ha cerrado las puertas del vehiculo",7000);
		new string[100];
		format(string,sizeof(string),"~r~~h~%s ~w~Trabado",VEHICLE_INFO[GLOBAL_VEHICLES[vehicleid][gb_vehicle_MODELID] - 400][vehicle_info_NAME]);
		MensajeAyuda_4(playerid,string);
	}
	else MensajesAyuda(playerid,"No eres el propietario de este vehiculo, tampoco posees llaves");
	return 1;
}

CMD:aparcar(playerid, params[])
{
	new vehicleid = INVALID_VEHICLE_ID;
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER || GetPlayerState(playerid) == PLAYER_STATE_PASSENGER) vehicleid = GetPlayerVehicleID(playerid);
		
	if(vehicleid == INVALID_VEHICLE_ID) return SendClientMessage(playerid, -1, "{00FF80}No estás en tu vehículo para aparcarlo.");
	if(!PLAYER_VEHICLES[vehicleid][player_vehicle_VALID]) return SendClientMessage(playerid, -1, "{00FF80}Este no es tú vehículo.");
	if(PLAYER_VEHICLES[vehicleid][player_vehicle_OWNER_ID] != ACCOUNT_INFO[playerid][ac_ID]) return SendClientMessage(playerid, -1, "{00FF80}Este no es tú vehículo.");
	
	new Float:pos[3], Float:angle;
	GetVehiclePos(vehicleid, pos[0], pos[1], pos[2]);
	GetVehicleZAngle(vehicleid, angle);
	
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWN_X] = pos[0];
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWN_Y] = pos[1];
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWN_Z] = pos[2];
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWN_ANGLE] = angle;
	
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_LAST_CLOSED_TIME] = gettime();
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE] = 0;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_LIGHTS] = 0;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_DOORS] = 1;
	UpdateVehicleParams(vehicleid);
	SendClientMessage(playerid, -1, "{E6F8E0}Has estacionado tu vehículo, cuando sea destruido volverá a aparecer aquí.");
	return 1;
}
alias:aparcar("estacionar");

CMD:luces(playerid, params[])
{
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		new vehicleid = GetPlayerVehicleID(playerid);
		if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_LIGHTS])
		{
			GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_LIGHTS] = 0;
			UpdateVehicleParams(vehicleid);
			
			if(PLAYER_VEHICLES[vehicleid][player_vehicle_OWNER_ID] == ACCOUNT_INFO[playerid][ac_ID]) Auto_SendPlayerAction(playerid, "ha apagado las luces de su vehículo.");
			else Auto_SendPlayerAction(playerid, "ha apagado las luces de el vehículo.");
		}
		else
		{
			GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_LIGHTS] = 1;
			UpdateVehicleParams(vehicleid);
			
			if(PLAYER_VEHICLES[vehicleid][player_vehicle_OWNER_ID] == ACCOUNT_INFO[playerid][ac_ID]) Auto_SendPlayerAction(playerid, "ha encendido las luces de su vehículo.");
			else Auto_SendPlayerAction(playerid, "ha encendido las luces de el vehículo.");
		}
	}
	else SendClientMessage(playerid, -1, "{00FF80}No estás conduciendo ningún vehículo.");
	return 1;
}

CMD:motor(playerid, params[])
{
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		new vehicleid = GetPlayerVehicleID(playerid);
		if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_TYPE] == VEHICLE_TYPE_WORK)
		{
			if(TRUCK_VEHICLE[vehicleid][truck_vehicle_LOADING]) return SendClientMessage(playerid, -1, "{00FF80}Debes esperar a que se cargue el camión para arrancar.");
			if(TRUCK_VEHICLE[vehicleid][truck_vehicle_UNLOADING]) return SendClientMessage(playerid, -1, "{00FF80}Debes esperar a que se descargue el camión para arrancar.");
		}
		
		if(PLAYER_TEMP[playerid][pt_IN_TUNING_GARAGE]) return SendClientMessage(playerid, -1, "{00FF80}Termina primero.");
		
		KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][7]);
		if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE])
		{
			PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_NOFUEL][p_ac_info_IMMUNITY] = gettime() + 15;
			GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE] = 0;
			UpdateVehicleParams(vehicleid);
			
			if(PLAYER_VEHICLES[vehicleid][player_vehicle_OWNER_ID] == ACCOUNT_INFO[playerid][ac_ID]) Auto_SendPlayerAction(playerid, "ha detenido su vehículo.");
			else Auto_SendPlayerAction(playerid, "ha detenido el vehículo.");
		}
		else
		{
			SendClientMessage(playerid, 0xCCCCCCCC, "Encendiendo...");
			PLAYER_TEMP[playerid][pt_TIMERS][7] = SetTimerEx("StartVehicleEngine", 1000, false, "ii", playerid, vehicleid);
		}
	}
	else SendClientMessage(playerid, -1, "{00FF80}No estás conduciendo ningún vehículo.");
	return 1;
}
alias:motor("arrancar");

forward StartVehicleEngine(playerid, vehicleid);
public StartVehicleEngine(playerid, vehicleid)
{
 
	if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_TYPE] == VEHICLE_TYPE_RENT)
	{
		if(GLOBAL_VEHICLES[vehicleid][RENT_OWNER] != ACCOUNT_INFO[playerid][ac_ID] && GLOBAL_VEHICLES[vehicleid][IN_RENT]== true)
		{
			PlayerTextDrawSetString(playerid,PlayerTextdraws[playerid][textdraw_encendido], "~r~~h~Este vehiculo no te pertenece");
			PlayerTextDrawShow(playerid,PlayerTextdraws[playerid][textdraw_encendido]); 
			SetTimerEx("HideEncendido",3000,false,"d",playerid);
			PlayerPlaySound(playerid, 6402, 0.0, 0.0,0.0);
			return 1;
		}
		if(GLOBAL_VEHICLES[vehicleid][IN_RENT]== false)
		{
			PlayerTextDrawSetString(playerid,PlayerTextdraws[playerid][textdraw_encendido], "~r~~h~Debes alquilar primero el vehiculo");
			PlayerTextDrawShow(playerid,PlayerTextdraws[playerid][textdraw_encendido]); 
			SetTimerEx("HideEncendido",3000,false,"d",playerid);
			PlayerPlaySound(playerid, 6402, 0.0, 0.0,0.0);
			return 1;
		}
	}
	if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_STATE] == VEHICLE_STATE_DAMAGED)
	{
		PlayerTextDrawSetString(playerid,PlayerTextdraws[playerid][textdraw_encendido], "~r~~h~Motor averiado");
		PlayerTextDrawShow(playerid,PlayerTextdraws[playerid][textdraw_encendido]); 
		PlayerPlaySound(playerid, 6402, 0.0, 0.0,0.0);
		SetTimerEx("HideEncendido",3000,false,"d",playerid);
		return 1;//Auto_SendPlayerAction(playerid, "intentó arrancar el vehículo pero el motor está averiado.");
	}
	if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_GAS] <= 0.1) 
	{
		PlayerTextDrawSetString(playerid,PlayerTextdraws[playerid][textdraw_encendido], "~y~~h~El vehiculo no tiene gasolina");
		PlayerTextDrawShow(playerid,PlayerTextdraws[playerid][textdraw_encendido]); 
		SetTimerEx("HideEncendido",3000,false,"d",playerid);
		return 1;//Auto_SendPlayerAction(playerid, "intentó arrancar el vehículo pero no tiene gasolina.");
	}
	if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_ACEITE] <= 0.1) 
	{
		PlayerTextDrawSetString(playerid,PlayerTextdraws[playerid][textdraw_encendido], "~y~~h~El vehiculo no tiene aceite");
		PlayerTextDrawShow(playerid,PlayerTextdraws[playerid][textdraw_encendido]); 
		SetTimerEx("HideEncendido",3000,false,"d",playerid);
		return 1;//Auto_SendPlayerAction(playerid, "intentó arrancar el vehículo pero no tiene gasolina.");
	}
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE] = 1;
	UpdateVehicleParams(vehicleid);
	
	if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_ATTACHED_TO] != INVALID_VEHICLE_ID)
	{
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_ATTACHED_TO] = INVALID_VEHICLE_ID;
		DetachTrailerFromVehicle(vehicleid);
	}
	
	/*if(PLAYER_VEHICLES[vehicleid][player_vehicle_OWNER_ID] == ACCOUNT_INFO[playerid][ac_ID]) Auto_SendPlayerAction(playerid, "ha arrancado su vehículo.");
	else Auto_SendPlayerAction(playerid, "ha arrancado el vehículo.");*/
	PlayerTextDrawSetString(playerid,PlayerTextdraws[playerid][textdraw_encendido], "~g~~h~Encendido");
	PlayerTextDrawShow(playerid,PlayerTextdraws[playerid][textdraw_encendido]); 
	SetTimerEx("HideEncendido",5000,false,"d",playerid);
	return 1;
}

AddVehicleComponents(vehicleid)
{
	for(new i = 0; i != MAX_VEHICLE_COMPONENTS; i ++)
	{
		RemoveVehicleComponent(vehicleid, i);
		
		if(!GLOBAL_VEHICLES[vehicleid][gb_vehicle_COMPONENTS][i]) continue;
		AddVehicleComponent(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_COMPONENTS][i]);
	}
	return 1;
}

public OnEnterExitModShop(playerid, enterexit, interiorid)
{
    if(enterexit) // Entra
    {
		SendClientMessage(playerid, -1, " ");
		SendClientMessage(playerid, -1, "{E6F8E0}Solo puedes tunear vehículos en el mecánico, búscalo con el /GPS.");
		SendClientMessage(playerid, -1, "{ffff35}[ATENCION] {E6F8E0}Si realizas alguna modificación al vehículo en este garaje serás expulsado.");
    }
	else
	{
		new vehicleid = GetPlayerVehicleID(playerid);
		if(vehicleid != INVALID_VEHICLE_ID)
		{
			ChangeVehicleColor(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_COLOR_1], GLOBAL_VEHICLES[vehicleid][gb_vehicle_COLOR_2]);
			ChangeVehiclePaintjob(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_PAINTJOB]);
			AddVehicleComponents(vehicleid);
		}
	}
    return 1;
}

public OnVehicleMod(playerid, vehicleid, componentid)
{
	if(ac_Info[CHEAT_CAR_MOD][ac_Enabled])
	{
		if(gettime() > PLAYER_AC_INFO[playerid][CHEAT_CAR_MOD][p_ac_info_IMMUNITY])
		{
			if(!ac_Info[CHEAT_CAR_MOD][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_CAR_MOD);
			else
			{
				if(gettime() - PLAYER_AC_INFO[playerid][CHEAT_CAR_MOD][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_CAR_MOD][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_CAR_MOD][p_ac_info_DETECTIONS] = 0;
				else PLAYER_AC_INFO[playerid][CHEAT_CAR_MOD][p_ac_info_DETECTIONS] ++;
				
				PLAYER_AC_INFO[playerid][CHEAT_CAR_MOD][p_ac_info_LAST_DETECTION] = gettime();
				if(PLAYER_AC_INFO[playerid][CHEAT_CAR_MOD][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_CAR_MOD][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_CAR_MOD);
			}
		}
	}
    return 0;
}

public OnVehiclePaintjob(playerid, vehicleid, paintjobid)
{
	if(ac_Info[CHEAT_CAR_MOD][ac_Enabled])
	{
		if(gettime() > PLAYER_AC_INFO[playerid][CHEAT_CAR_MOD][p_ac_info_IMMUNITY])
		{
			if(!(-1 < paintjobid < 3) && paintjobid != 255)
			{
				if(!ac_Info[CHEAT_CAR_MOD][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_CAR_MOD);
				else
				{
					if(gettime() - PLAYER_AC_INFO[playerid][CHEAT_CAR_MOD][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_CAR_MOD][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_CAR_MOD][p_ac_info_DETECTIONS] = 0;
					else PLAYER_AC_INFO[playerid][CHEAT_CAR_MOD][p_ac_info_DETECTIONS] ++;
					
					PLAYER_AC_INFO[playerid][CHEAT_CAR_MOD][p_ac_info_LAST_DETECTION] = gettime();
					if(PLAYER_AC_INFO[playerid][CHEAT_CAR_MOD][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_CAR_MOD][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_CAR_MOD);
				}
			}
		}
	}
	return 1;
}

DestroyVehicleEx(vehicleid)
{
	if(!GLOBAL_VEHICLES[vehicleid][gb_vehicle_VALID]) return false;
	
	if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER] != INVALID_PLAYER_ID)
	{
		PLAYER_AC_INFO[ GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER] ][CHEAT_VEHICLE_HEALTH][p_ac_info_IMMUNITY] = gettime() + 3;
		PLAYER_AC_INFO[ GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER] ][CHEAT_STATE_SPAMMER][p_ac_info_IMMUNITY] = gettime() + 3;
	}
	
	if(DestroyVehicle(vehicleid))
	{
		if(IsValidDynamic3DTextLabel(GLOBAL_VEHICLES[vehicleid][gb_vehicle_LABEL]))
		{
			DestroyDynamic3DTextLabel(GLOBAL_VEHICLES[vehicleid][gb_vehicle_LABEL]);
			GLOBAL_VEHICLES[vehicleid][gb_vehicle_LABEL] = Text3D:INVALID_STREAMER_ID;
		}

		new temp_GLOBAL_VEHICLES[Global_Vehicles_Info]; GLOBAL_VEHICLES[vehicleid] = temp_GLOBAL_VEHICLES;
		new temp_PLAYER_VEHICLES[Player_Vehicles_Info]; PLAYER_VEHICLES[vehicleid] = temp_PLAYER_VEHICLES;
		new temp_SELL_VEHICLES[SELL_VEHICLES_Enum]; SELL_VEHICLES[vehicleid] = temp_SELL_VEHICLES;
		
		new temp_VEHICLE_BOOT[enum_VEHICLE_BOOT];
		for(new i = 0; i != MAX_BOOT_SLOTS; i ++) VEHICLE_BOOT[vehicleid][i] = temp_VEHICLE_BOOT;

		new temp_VEHICLE_OBJECTS[e_VEHICLE_OBJECTS];
		for(new i = 0; i != MAX_SU_VOBJECTS; i ++)
		{
			if(VEHICLE_OBJECTS[vehicleid][i][vobject_OBJECT_ID] != INVALID_STREAMER_ID) DestroyDynamicObject(VEHICLE_OBJECTS[vehicleid][i][vobject_OBJECT_ID]);
			VEHICLE_OBJECTS[vehicleid][i] = temp_VEHICLE_OBJECTS;
		}
		
		return true;
	}
	return false;
}

stock getRandomLetter() 
{
    return 65 + random(25);
}

ShowPlayerSpeedoMeter(playerid)
{
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return 0;
	new vehicleid = GetPlayerVehicleID(playerid), modelid = GetVehicleModel(vehicleid);
	if(!VEHICLE_INFO[modelid - 400][vehicle_info_VALID]) return 0;
	KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][8]);
	
	PlayerTextDrawSetPreviewModel(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][17], GetVehicleModel(vehicleid)); 
	new td_str[256];
	format(td_str, sizeof td_str, "%s",VehicleName[GetVehicleModel(GetPlayerVehicleID(playerid)) - 400]);
 	PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][18], td_str);
	
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][0]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][1]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][2]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][3]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][4]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][5]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][6]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][7]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][8]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][9]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][10]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][11]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][12]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][13]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][14]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][15]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][16]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][17]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][18]);

	PLAYER_TEMP[playerid][pt_FUEL_DOWN_TIME] = gettime();
	PLAYER_TEMP[playerid][pt_ACEITE_DOWN_TIME] = gettime();
	PLAYER_TEMP[playerid][pt_TIMERS][8] = SetTimerEx("UpdatePlayerSpeedo", 250, true, "iif", playerid, vehicleid, VEHICLE_INFO[modelid - 400][vehicle_info_MAX_VEL]);
	return 1;
}

HidePlayerSpeedoMeter(playerid)
{
	KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][8]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][0]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][1]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][2]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][3]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][4]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][5]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][6]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][7]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][8]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][9]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][10]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][11]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][12]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][13]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][14]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][15]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][16]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][17]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][18]);
	return 1;
}

stock Float:GetFloatVeh(vehicleid)
{
	new Float:floatico;
	switch(VEHICLE_INFO[GLOBAL_VEHICLES[vehicleid][gb_vehicle_MODELID] - 400 ][vehicle_info_MAX_GAS])
	{
		case 10.0 : floatico=0.1639;
		case 15.0 : floatico=0.2459016;
		case 20.0 : floatico=0.327869;
		case 25.0 : floatico=0.409;
		case 30.0 : floatico=0.491;
		case 35.0 : floatico=0.57376;
		case 40.0 : floatico=0.655;
		case 45.0 : floatico=0.7377;
		case 50.0 : floatico=0.819669;
		case 55.0 : floatico=0.901639;
		case 60.0 : floatico=0.98349;
		case 62.0 : floatico=1.016393;
		case 65.0 : floatico=1.065574;
		case 70.0 : floatico=1.1473;
		case 80.0 : floatico=1.311475;
		case 90.0 : floatico=1.147541;
		case 120.0: floatico=1.967213;
		case 130.0: floatico=2.131147;
		case 150.0: floatico=2.459016;
		case 180.0: floatico=2.95082;
		case 200.0: floatico=3.27869;
	}
	return floatico;
}
stock Float:GetSizeAceite(vehicleid)
{
	new Float:floatico;
	switch(VEHICLE_INFO[GLOBAL_VEHICLES[vehicleid][gb_vehicle_MODELID] - 400 ][vehicle_info_MAX_ACEITE])
	{
		case 30.0 : floatico=0.4918031;
		case 50.0 : floatico=0.819669;
		case 60.0 : floatico=0.9836061;
		case 80.0 : floatico=1.311475;
		case 85.0 : floatico=1.393442;
		case 90.0 : floatico=1.47541;
		case 95.0 : floatico=1.557377;
		case 100.0: floatico=1.639344;
		case 110.0: floatico=1.803279;
		case 120.0: floatico=1.967213;
		case 130.0: floatico=2.131147;
		case 150.0: floatico=2.459016;
		case 200.0: floatico=3.27869;
	}
	return floatico;
}
forward UpdatePlayerSpeedo(playerid, vehicleid, Float:maxvel);
public UpdatePlayerSpeedo(playerid, vehicleid, Float:maxvel)
{
	if(vehicleid != GetPlayerVehicleID(playerid))
	{
		HidePlayerSpeedoMeter(playerid);
		ShowPlayerSpeedoMeter(playerid);
		
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_TP_IMMUNITY] = gettime() + 5;
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER] = INVALID_PLAYER_ID;
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_LAST_DRIVER] = playerid;
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_OCCUPIED] = false;
		PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] = GetPlayerVehicleID(playerid);
		GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][gb_vehicle_OCCUPIED] = true;
		return 0;
	}
	
	new Float:vel = GetVehicleSpeed(vehicleid);
	
	if(ac_Info[CHEAT_VEHICLE_SPEED_HACK][ac_Enabled])
	{
		if(gettime() > PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_SPEED_HACK][p_ac_info_IMMUNITY])
		{
			if(vel > maxvel + 100.0)
			{
				if(!ac_Info[CHEAT_VEHICLE_SPEED_HACK][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_VEHICLE_SPEED_HACK);
				else
				{
					if(gettime() - PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_SPEED_HACK][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_VEHICLE_SPEED_HACK][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_SPEED_HACK][p_ac_info_DETECTIONS] = 0;
					else PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_SPEED_HACK][p_ac_info_DETECTIONS] ++;
					
					PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_SPEED_HACK][p_ac_info_LAST_DETECTION] = gettime();
					if(PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_SPEED_HACK][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_VEHICLE_SPEED_HACK][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_VEHICLE_SPEED_HACK);
				}
			}
		}
	}
	
	if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_STATE] == VEHICLE_STATE_NORMAL)
	{
		GetVehicleHealth(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_HEALTH]);
		if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_HEALTH] < MIN_VEHICLE_HEALTH)
		{	
			GLOBAL_VEHICLES[vehicleid][gb_vehicle_STATE] = VEHICLE_STATE_DAMAGED;
			GLOBAL_VEHICLES[vehicleid][gb_vehicle_HEALTH] = MIN_VEHICLE_HEALTH;
			SetVehicleHealthEx(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_HEALTH], playerid);
				
			GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE] = 0;
			UpdateVehicleParams(vehicleid);
			PlayerPlaySound(playerid, 6402, 0.0, 0.0,0.0);
			SendClientMessage(playerid, -1, "{E6F8E0}El motor del vehículo está demasiado averiado, llama un mecánico.");
		}
	}
	
	if(gettime() > PLAYER_TEMP[playerid][pt_FUEL_DOWN_TIME] + 5)
	{
		if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE])
		{
			GLOBAL_VEHICLES[vehicleid][gb_vehicle_GAS] -= floatmul(floatdiv(vel, maxvel), 0.1);
			
			if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_GAS] <= 0.1)
			{
				PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_NOFUEL][p_ac_info_IMMUNITY] = gettime() + 15;
				GLOBAL_VEHICLES[vehicleid][gb_vehicle_GAS] = 0.0;
				GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE] = 0;
				UpdateVehicleParams(vehicleid);
				
				SendClientMessage(playerid, -1, "{00FF80}El vehículo se quedo sin gasolina...");
			}
		}
		PLAYER_TEMP[playerid][pt_FUEL_DOWN_TIME] = gettime();
	}
	//===================================================================
	if(gettime() > PLAYER_TEMP[playerid][pt_ACEITE_DOWN_TIME] + 15)
	{
		if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE])
		{
			GLOBAL_VEHICLES[vehicleid][gb_vehicle_ACEITE] -= floatmul(floatdiv(vel, maxvel), 0.1);
			
			if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_ACEITE] <= 0.1)
			{
				PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_NOFUEL][p_ac_info_IMMUNITY] = gettime() + 15;
				GLOBAL_VEHICLES[vehicleid][gb_vehicle_ACEITE] = 0.0;
				GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE] = 0;
				UpdateVehicleParams(vehicleid);
				
				SendClientMessage(playerid, -1, "{00FF80}El vehículo se quedo sin aceite, llama un mecanico");
			}
		}
		PLAYER_TEMP[playerid][pt_ACEITE_DOWN_TIME] = gettime();
	}
 
	new td_str[60];
	format(td_str, sizeof td_str, "%d",floatround(vel));
	PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][11], td_str);

	new Float:EstadoVeh;
	GetVehicleHealth(GetPlayerVehicleID(playerid), EstadoVeh);
	//Barra de vida del vehiculo


	
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][3], VehicleColoursTableRGBA[ GLOBAL_VEHICLES[vehicleid][gb_vehicle_COLOR_1] ]);

	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][3], floatadd(549.0, floatdiv(EstadoVeh, 12.5)), 0.000000);
	if(EstadoVeh <= 380)
	{
		PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][3], 549, 0.000000);
	}
	PlayerTextDrawShow(playerid,PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][3]);
	//===== Barra gasolina
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][6], floatadd(571.0, floatdiv(GLOBAL_VEHICLES[vehicleid][gb_vehicle_GAS], GetFloatVeh(vehicleid))), 0.000000);
	PlayerTextDrawShow(playerid,PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][6]);
	//====================
	//Barra Aceite
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][9], floatadd(571.0, floatdiv(GLOBAL_VEHICLES[vehicleid][gb_vehicle_ACEITE], GetSizeAceite(vehicleid))), 0.000000);
	PlayerTextDrawShow(playerid,PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][9]);
	//=====================
	GetVehiclePos(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_POS][0], GLOBAL_VEHICLES[vehicleid][gb_vehicle_POS][1], GLOBAL_VEHICLES[vehicleid][gb_vehicle_POS][2]);
	return 1;
}


stock Float:GetVehicleSpeed(vehicleid)
{
    new Float:vx, Float:vy, Float:vz;
    GetVehicleVelocity(vehicleid, vx, vy, vz);
	new Float:vel = floatmul(floatsqroot(floatadd(floatadd(floatpower(vx, 2), floatpower(vy, 2)),  floatpower(vz, 2))), 181.5);
	return vel;
}

UpdatePlayerPropertyContructor(playerid)
{
	SetPlayerPosEx
	(
		playerid, 
		PROPERTY_INTERIORS[ PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_INTERIO] ][property_INT_X],
		PROPERTY_INTERIORS[ PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_INTERIO] ][property_INT_Y],
		PROPERTY_INTERIORS[ PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_INTERIO] ][property_INT_Z],
		PROPERTY_INTERIORS[ PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_INTERIO] ][property_INT_ANGLE],
		PROPERTY_INTERIORS[ PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_INTERIO] ][property_INT_INTERIOR],
		0, false, true
	);
	
	new td_str[45]; format(td_str, sizeof td_str, "Interior:_%d/%d", PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_INTERIO], sizeof PROPERTY_INTERIORS - 1);
	PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][1], td_str);
	SelectTextDrawEx(playerid, 0xe8d08fFF);
	return 1;
}

ExitPlayerPropertyConstructor(playerid)
{
	CancelSelectTextDrawEx(playerid);
	PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_ENABLED] = false;
	
	SetPlayerPosEx
	(
		playerid, 
		PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_EXT_X],
		PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_EXT_Y],
		PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_EXT_Z],
		PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_EXT_ANG],
		PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_EXT_INT],
		0, false, true
	);
	
	for(new i = 0; i != 6; i ++) PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][i]);
	return 1;
}

Create_PlayerPropertyConstructo(playerid)
{
	new slot = GetEmptyPropertySlot();
	if(slot == -1)
	{
		SendClientMessage(playerid, -1, "No hay mas slots.");
		ExitPlayerPropertyConstructor(playerid);
		return 1;
	}
	
	PROPERTY_INFO[slot][property_VALID] = true;
	PROPERTY_INFO[slot][property_EXT_X] = PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_EXT_X];
	PROPERTY_INFO[slot][property_EXT_Y] = PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_EXT_Y];
	PROPERTY_INFO[slot][property_EXT_Z] = PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_EXT_Z];
	PROPERTY_INFO[slot][property_EXT_ANGLE] = PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_EXT_ANG];
	PROPERTY_INFO[slot][property_EXT_INTERIOR] = PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_EXT_INT];
	PROPERTY_INFO[slot][property_EXT_FREEZE] = false;
	PROPERTY_INFO[slot][property_ID_INTERIOR] = PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_INTERIO];
	
	PROPERTY_INFO[slot][property_SOLD] = false;
	PROPERTY_INFO[slot][property_OWNER_ID] = 0;
	PROPERTY_INFO[slot][property_PRICE] = PLAYER_TEMP[playerid][pt_PROPERTY_CINFO][1];
	PROPERTY_INFO[slot][property_LEVEL] = PLAYER_TEMP[playerid][pt_PROPERTY_CINFO][0];
	PROPERTY_INFO[slot][property_EXTRA] = PLAYER_TEMP[playerid][pt_PROPERTY_CINFO][3];
	PROPERTY_INFO[slot][property_VIP_LEVEL] = PLAYER_TEMP[playerid][pt_PROPERTY_CINFO][2];
	PROPERTY_INFO[slot][property_PRICE_BASE] = floatround(floatdiv(PROPERTY_INFO[slot][property_PRICE], MULTIPLIER_PROPERITES));
	
	if(PROPERTY_INFO[slot][property_EXTRA]) PROPERTY_INFO[slot][property_PRICE] = 0;
	if(PROPERTY_INFO[slot][property_VIP_LEVEL]) PROPERTY_INFO[slot][property_LEVEL] = 1;
	
	new DBResult:Result, DB_Query[600];
	format
	(
		DB_Query, sizeof DB_Query,
		"\
			INSERT INTO `PROPERTY`\
			(\
				`EXT_X`, `EXT_Y`, `EXT_Z`, `EXT_ANGLE`, `EXT_INTERIOR`, `EXT_FREEZE`, `ID_INTERIOR`\
			)\
			VALUES\
			(\
				'%f', '%f', '%f', '%f', '%d', '%d', '%d'\
			);\
			SELECT MAX(`ID`) FROM `PROPERTY`;\
		", 
		PROPERTY_INFO[slot][property_EXT_X], PROPERTY_INFO[slot][property_EXT_Y], PROPERTY_INFO[slot][property_EXT_Z], PROPERTY_INFO[slot][property_EXT_ANGLE], PROPERTY_INFO[slot][property_EXT_INTERIOR], PROPERTY_INFO[slot][property_EXT_FREEZE],
		PROPERTY_INFO[slot][property_ID_INTERIOR]
	);
	Result = db_query(Database, DB_Query);

	if(db_num_rows(Result)) PROPERTY_INFO[slot][property_ID] = db_get_field_int(Result, 0);
	db_free_result(Result);
	
	DB_Query[0] = EOS;
	format
	(
		DB_Query, sizeof DB_Query,
		"\
			INSERT INTO `PROPERTY_INFO`\
			(\
				`ID_PROPERTY`, `PRICE`, `LEVEL`, `EXTRA`, `VIP_LEVEL`\
			)\
			VALUES\
			(\
				'%d', '%d', '%d', '%d', '%d'\
			);\
		", 
		PROPERTY_INFO[slot][property_ID], PROPERTY_INFO[slot][property_PRICE_BASE], PROPERTY_INFO[slot][property_LEVEL], PROPERTY_INFO[slot][property_EXTRA], PROPERTY_INFO[slot][property_VIP_LEVEL]
	);
	db_query(Database, DB_Query);
	
	new label_str[256];
	format(PROPERTY_INFO[slot][property_NAME], 24, "PROPIEDAD %d", PROPERTY_INFO[slot][property_ID]);
	
	if(PROPERTY_INFO[slot][property_VIP_LEVEL])
	{
		if(PROPERTY_INFO[slot][property_EXTRA])
		{
			format
			(
				label_str, 
				sizeof label_str, 
				"\
					{F4DC42}Membresía VIP%d requerida\n\
					\n\
					{FFFFFF}Propiedad {58ACFA}#%d {FFFFFF}está en venta\n\n\
					Interior: {58ACFA}%d\n\
					{FFFFFF}Coste: {58ACFA}%d "SERVER_COIN"\n\
					{FFFFFF}Nivel necesario: {58ACFA}%d\n\
					{FFFFFF}Usa {58ACFA}/ayuda {FFFFFF}para ver como adquirirla.\
				", PROPERTY_INFO[slot][property_VIP_LEVEL], PROPERTY_INFO[slot][property_ID], PROPERTY_INFO[slot][property_ID_INTERIOR], PROPERTY_INFO[slot][property_EXTRA], PROPERTY_INFO[slot][property_LEVEL]
			);
		}
		else
		{
			format
			(
				label_str, 
				sizeof label_str, 
				"\
					{F4DC42}Membresía VIP%d requerida\n\
					\n\
					{FFFFFF}Propiedad {58ACFA}#%d {FFFFFF}está en venta\n\n\
					Interior: {58ACFA}%d\n\
					{FFFFFF}Precio: {58ACFA}%s$\n\
					{FFFFFF}Nivel: {58ACFA}%d\n\
					{FFFFFF}Usa {58ACFA}/ayuda {FFFFFF}para ver como adquirirla.\
				", PROPERTY_INFO[slot][property_VIP_LEVEL], PROPERTY_INFO[slot][property_ID], PROPERTY_INFO[slot][property_ID_INTERIOR], number_format_thousand(PROPERTY_INFO[slot][property_PRICE]), PROPERTY_INFO[slot][property_LEVEL]
			);
		}
	}
	else
	{
		if(PROPERTY_INFO[slot][property_EXTRA])
		{
			format
			(
				label_str, 
				sizeof label_str, 
				"\
					{FFFFFF}Propiedad {58ACFA}#%d {FFFFFF}está en venta\n\n\
					Interior: {58ACFA}%d\n\
					{FFFFFF}Coste: {58ACFA}%d "SERVER_COIN"\n\
					{FFFFFF}Nivel necesario: {58ACFA}%d\n\
					{FFFFFF}Usa {58ACFA}/ayuda {FFFFFF}para ver como adquirirla.\
				", PROPERTY_INFO[slot][property_ID], PROPERTY_INFO[slot][property_ID_INTERIOR], PROPERTY_INFO[slot][property_EXTRA], PROPERTY_INFO[slot][property_LEVEL]
			);
		}
		else
		{
			format
			(
				label_str, 
				sizeof label_str, 
				"\
					{FFFFFF}Propiedad {58ACFA}#%d {FFFFFF}está en venta\n\n\
					Interior: {58ACFA}%d\n\
					{FFFFFF}Precio: {58ACFA}%s$\n\
					{FFFFFF}Nivel necesario: {58ACFA}%d\n\
					{FFFFFF}Usa {58ACFA}/ayuda {FFFFFF}para ver como adquirirla.\
				", PROPERTY_INFO[slot][property_ID], PROPERTY_INFO[slot][property_ID_INTERIOR], number_format_thousand(PROPERTY_INFO[slot][property_PRICE]), PROPERTY_INFO[slot][property_LEVEL]
			);
		}
	}

	PROPERTY_INFO[slot][property_EXT_LABEL_ID] = CreateDynamic3DTextLabel(label_str, 0xFFFFFFFF, PROPERTY_INFO[slot][property_EXT_X], PROPERTY_INFO[slot][property_EXT_Y], PROPERTY_INFO[slot][property_EXT_Z] + 0.25, 5.0, .testlos = true, .worldid = 0, .interiorid = PROPERTY_INFO[slot][property_EXT_INTERIOR]);
	PROPERTY_INFO[slot][property_INT_LABEL_ID] = CreateDynamic3DTextLabel("Usa {58ACFA}/salir {FFFFFF}para salir.", 0xFFFFFFFF, PROPERTY_INTERIORS[ PROPERTY_INFO[slot][property_ID_INTERIOR] ][property_INT_X], PROPERTY_INTERIORS[ PROPERTY_INFO[slot][property_ID_INTERIOR] ][property_INT_Y], PROPERTY_INTERIORS[ PROPERTY_INFO[slot][property_ID_INTERIOR] ][property_INT_Z] + 0.25, 3.0, .testlos = true, .worldid = PROPERTY_INFO[slot][property_ID], .interiorid = PROPERTY_INTERIORS[ PROPERTY_INFO[slot][property_ID_INTERIOR] ][property_INT_INTERIOR]);

	PROPERTY_INFO[slot][property_EXT_PICKUP_ID] = CreateDynamicPickup(1273, 1, PROPERTY_INFO[slot][property_EXT_X], PROPERTY_INFO[slot][property_EXT_Y], PROPERTY_INFO[slot][property_EXT_Z], 0, PROPERTY_INFO[slot][property_EXT_INTERIOR]);
	PROPERTY_INFO[slot][property_INT_PICKUP_ID] = CreateDynamicPickup(0, 1, PROPERTY_INTERIORS[ PROPERTY_INFO[slot][property_ID_INTERIOR] ][property_INT_X], PROPERTY_INTERIORS[ PROPERTY_INFO[slot][property_ID_INTERIOR] ][property_INT_Y], PROPERTY_INTERIORS[ PROPERTY_INFO[slot][property_ID_INTERIOR] ][property_INT_Z], PROPERTY_INFO[slot][property_ID], PROPERTY_INTERIORS[ PROPERTY_INFO[slot][property_ID_INTERIOR] ][property_INT_INTERIOR]);

	new info[3];
	info[0] = PICKUP_TYPE_PROPERTY;
	info[1] = slot; // Index
	info[2] = 1; // Pickup Interior
	Streamer_SetArrayData(STREAMER_TYPE_PICKUP, PROPERTY_INFO[slot][property_INT_PICKUP_ID], E_STREAMER_EXTRA_ID, info);

	info[0] = PICKUP_TYPE_PROPERTY;
	info[1] = slot; // Index
	info[2] = 2; // Pickup Exterior
	Streamer_SetArrayData(STREAMER_TYPE_PICKUP, PROPERTY_INFO[slot][property_EXT_PICKUP_ID], E_STREAMER_EXTRA_ID, info);

	TOTAL_PROPERTIES_LOADED ++;

	SendClientMessageEx(playerid, -1, "PROPIEDAD %d AÑADIDA.", PROPERTY_INFO[slot][property_ID]);
	SendClientMessageEx(playerid, -1, "PROPIEDADES: %d/%d", TOTAL_PROPERTIES_LOADED, MAX_PROPERTIES);
	ExitPlayerPropertyConstructor(playerid);
	return 1;
}

GetEmptyPropertySlot()
{
	for(new i = 0; i != MAX_PROPERTIES; i ++)
	{
		if(!PROPERTY_INFO[i][property_VALID]) return i;
	}
	return -1;
}

SpaceFix(text[])
{
	new str[100 + 1]; format(str, sizeof str, "%s", text);
    for(new i = 0; i < strlen(str); i++) 
	{
		if(str[i] == ' ') str[i] = '+';
	}
	return str;
}

GivePlayerDrunkLevel(playerid, ammount)
{
	return SetPlayerDrunkLevel(playerid, GetPlayerDrunkLevel(playerid) + ammount);
}

/*RotateDynamicObject(objectid, Float:rotX, Float:rotY, Float:rotZ, Float:Speed)
{
	
		Rotation Speeds:
		0.01 - Very very slow speed
		1.00 - Normal speed
		5.00 - Fast speed
	
	new Float:X, Float:Y, Float:Z;
	new Float:SpeedConverted = floatdiv(floatmul(Speed, 0.01), 2);
	
	if(IsDynamicObjectMoving(objectid)) StopDynamicObject(objectid);
	GetDynamicObjectPos(objectid, X, Y, Z);
	SetDynamicObjectPos(objectid, X, Y, Z + 0.01);
	MoveDynamicObject(objectid, X, Y, Z, SpeedConverted, rotX, rotY, rotZ);
	return 1;
}*/

stock Float:frandom(Float:max, Float:min, dp)
{
	new
		Float:mul = floatpower(10.0, dp),
		imin = floatround(min * mul),
		imax = floatround(max * mul);
	return float(random(imax - imin) + imin) / mul;
}


ResetVehicleTaxiMeter(vehicleid)
{
	KillTimer(TAXI_METER_VEHICLE[vehicleid][veh_taxi_meter_TIMER]);
	TAXI_METER_VEHICLE[vehicleid][veh_taxi_meter_ENABLED] = false;
	TAXI_METER_VEHICLE[vehicleid][veh_taxi_meter_PAYMENT] = 0;
	TAXI_METER_VEHICLE[vehicleid][veh_taxi_meter_OLD_X] = 0.0;
	TAXI_METER_VEHICLE[vehicleid][veh_taxi_meter_OLD_Y] = 0.0;
	TAXI_METER_VEHICLE[vehicleid][veh_taxi_meter_OLD_Z] = 0.0;
	TAXI_METER_VEHICLE[vehicleid][veh_taxi_meter_DISTANCE] = 0.0;
	return 1;
}

ShowPlayerTaxiMeter(playerid)
{
	UpdatePlayerTaxiMeterTextdraws(playerid);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TAXI_METER][0]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TAXI_METER][1]);
	PLAYER_TEMP[playerid][pt_TAXI_METER_ENABLED] = true;
	return 1;
}

UpdatePlayerTaxiMeterTextdraws(playerid)
{
	new td_str[64], vehicleid = GetPlayerVehicleID(playerid);
	if(!vehicleid) return 0;

	format(td_str, sizeof td_str, "Tarifa:_%d$/Km~n~~n~Recorrido:_%.1f_Km~n~A_pagar:_%s$~n~", TAXI_METER_VEHICLE[vehicleid][veh_taxi_meter_PRICE], TAXI_METER_VEHICLE[vehicleid][veh_taxi_meter_DISTANCE], number_format_thousand(TAXI_METER_VEHICLE[vehicleid][veh_taxi_meter_PAYMENT]));
	PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_TAXI_METER][1], td_str);
	return 1;
}

forward UpdateVehicleTaximeter(taxi, driver, passenger);
public UpdateVehicleTaximeter(taxi, driver, passenger)
{
	new driver_vehicle = GetPlayerVehicleID(driver), passenger_vehicle = GetPlayerVehicleID(passenger);
	
	if(!IsPlayerConnected(driver))
	{
		SendClientMessageEx(passenger, -1, "{E6F8E0}El taxi te costó %s$.", number_format_thousand(TAXI_METER_VEHICLE[taxi][veh_taxi_meter_PAYMENT]));		
		GivePlayerCash(passenger, -TAXI_METER_VEHICLE[taxi][veh_taxi_meter_PAYMENT]);
		
		ResetVehicleTaxiMeter(taxi);
		HidePlayerTaxiMeter(passenger);
		return 1;
	}
	if(!IsPlayerConnected(passenger))
	{		
		new work_extra_payment;
		if(work_info[WORK_TAXI][work_info_EXTRA_PAY] > 0 && work_info[WORK_TAXI][work_info_EXTRA_PAY_EXP] > 0)
		{
			work_extra_payment = (work_info[WORK_TAXI][work_info_EXTRA_PAY] * floatround(floatdiv(PLAYER_SKILLS[ driver ][WORK_TAXI], work_info[WORK_TAXI][work_info_EXTRA_PAY_EXP])));
			if(work_info[WORK_TAXI][work_info_EXTRA_PAY_LIMIT] != 0) if(work_extra_payment > work_info[WORK_TAXI][work_info_EXTRA_PAY_LIMIT]) work_extra_payment = work_info[WORK_TAXI][work_info_EXTRA_PAY_LIMIT];
		
			if(ACCOUNT_INFO[driver][ac_SU]) work_extra_payment += SU_WORK_EXTRA_PAY;
		}
		PLAYER_SKILLS[driver][WORK_TAXI] ++;
		
		SendClientMessageEx(driver, -1, "{E6F8E0}Has ganado %s$ con este viaje.", number_format_thousand(TAXI_METER_VEHICLE[taxi][veh_taxi_meter_PAYMENT] + work_extra_payment));
		GivePlayerCash(driver, TAXI_METER_VEHICLE[taxi][veh_taxi_meter_PAYMENT] + work_extra_payment);
		
		ResetVehicleTaxiMeter(taxi);
		UpdatePlayerTaxiMeterTextdraws(driver);
		
		new new_passenger = GetVehicleFirstPassenger(taxi);
		if(new_passenger != INVALID_PLAYER_ID)
		{
			ShowPlayerTaxiMeter(new_passenger);
			if(PLAYER_TEMP[new_passenger][pt_WANT_TAXI])
			{
				PLAYER_TEMP[new_passenger][pt_WANT_TAXI] = false;
				DisablePlayerTaxiMark(new_passenger);
			}
			
			TAXI_METER_VEHICLE[taxi][veh_taxi_meter_ENABLED] = true;
			GetVehiclePos(taxi, TAXI_METER_VEHICLE[taxi][veh_taxi_meter_OLD_X], TAXI_METER_VEHICLE[taxi][veh_taxi_meter_OLD_Y], TAXI_METER_VEHICLE[taxi][veh_taxi_meter_OLD_Z]);
			KillTimer(TAXI_METER_VEHICLE[taxi][veh_taxi_meter_TIMER]);
			TAXI_METER_VEHICLE[taxi][veh_taxi_meter_TIMER] = SetTimerEx("UpdateVehicleTaximeter", 4000, true, "iii", taxi, GLOBAL_VEHICLES[taxi][gb_vehicle_DRIVER], new_passenger);
		}
		return 1;
	}
	
	if(driver_vehicle != taxi)
	{
		new work_extra_payment;
		if(work_info[WORK_TAXI][work_info_EXTRA_PAY] > 0 && work_info[WORK_TAXI][work_info_EXTRA_PAY_EXP] > 0)
		{
			work_extra_payment = (work_info[WORK_TAXI][work_info_EXTRA_PAY] * floatround(floatdiv(PLAYER_SKILLS[ driver ][WORK_TAXI], work_info[WORK_TAXI][work_info_EXTRA_PAY_EXP])));
			if(work_info[WORK_TAXI][work_info_EXTRA_PAY_LIMIT] != 0) if(work_extra_payment > work_info[WORK_TAXI][work_info_EXTRA_PAY_LIMIT]) work_extra_payment = work_info[WORK_TAXI][work_info_EXTRA_PAY_LIMIT];
		
			if(ACCOUNT_INFO[driver][ac_SU]) work_extra_payment += SU_WORK_EXTRA_PAY;
		}
		PLAYER_SKILLS[driver][WORK_TAXI] ++;
		
		SendClientMessageEx(driver, -1, "{E6F8E0}Has ganado %s$ con este viaje.", number_format_thousand(TAXI_METER_VEHICLE[taxi][veh_taxi_meter_PAYMENT] + work_extra_payment));
		SendClientMessageEx(passenger, -1, "{E6F8E0}El taxi te costó %s$.", number_format_thousand(TAXI_METER_VEHICLE[taxi][veh_taxi_meter_PAYMENT]));
		
		GivePlayerCash(driver, TAXI_METER_VEHICLE[taxi][veh_taxi_meter_PAYMENT] + work_extra_payment);
		GivePlayerCash(passenger, -TAXI_METER_VEHICLE[taxi][veh_taxi_meter_PAYMENT]);
		
		ResetVehicleTaxiMeter(taxi);
		HidePlayerTaxiMeter(driver);
		HidePlayerTaxiMeter(passenger);
		return 1;
	}
	if(passenger_vehicle != taxi)
	{
		new work_extra_payment;
		if(work_info[WORK_TAXI][work_info_EXTRA_PAY] > 0 && work_info[WORK_TAXI][work_info_EXTRA_PAY_EXP] > 0)
		{
			work_extra_payment = (work_info[WORK_TAXI][work_info_EXTRA_PAY] * floatround(floatdiv(PLAYER_SKILLS[ driver ][WORK_TAXI], work_info[WORK_TAXI][work_info_EXTRA_PAY_EXP])));
			if(work_info[WORK_TAXI][work_info_EXTRA_PAY_LIMIT] != 0) if(work_extra_payment > work_info[WORK_TAXI][work_info_EXTRA_PAY_LIMIT]) work_extra_payment = work_info[WORK_TAXI][work_info_EXTRA_PAY_LIMIT];
			
			if(ACCOUNT_INFO[driver][ac_SU]) work_extra_payment += SU_WORK_EXTRA_PAY;
		}
		PLAYER_SKILLS[driver][WORK_TAXI] ++;
		
		SendClientMessageEx(driver, -1, "{E6F8E0}Has ganado %s$ con este viaje.", number_format_thousand(TAXI_METER_VEHICLE[taxi][veh_taxi_meter_PAYMENT] + work_extra_payment));
		SendClientMessageEx(passenger, -1, "{E6F8E0}El taxi te costó %s$.", number_format_thousand(TAXI_METER_VEHICLE[taxi][veh_taxi_meter_PAYMENT]));
		
		GivePlayerCash(driver, TAXI_METER_VEHICLE[taxi][veh_taxi_meter_PAYMENT] + work_extra_payment);
		GivePlayerCash(passenger, -TAXI_METER_VEHICLE[taxi][veh_taxi_meter_PAYMENT]);
		
		ResetVehicleTaxiMeter(taxi);
		HidePlayerTaxiMeter(passenger);
		UpdatePlayerTaxiMeterTextdraws(driver);
		
		new new_passenger = GetVehicleFirstPassenger(taxi);
		if(new_passenger != INVALID_PLAYER_ID)
		{
			ShowPlayerTaxiMeter(new_passenger);
			if(PLAYER_TEMP[new_passenger][pt_WANT_TAXI])
			{
				PLAYER_TEMP[new_passenger][pt_WANT_TAXI] = false;
				DisablePlayerTaxiMark(new_passenger);
			}
			
			TAXI_METER_VEHICLE[taxi][veh_taxi_meter_ENABLED] = true;
			GetVehiclePos(taxi, TAXI_METER_VEHICLE[taxi][veh_taxi_meter_OLD_X], TAXI_METER_VEHICLE[taxi][veh_taxi_meter_OLD_Y], TAXI_METER_VEHICLE[taxi][veh_taxi_meter_OLD_Z]);
			KillTimer(TAXI_METER_VEHICLE[taxi][veh_taxi_meter_TIMER]);
			TAXI_METER_VEHICLE[taxi][veh_taxi_meter_TIMER] = SetTimerEx("UpdateVehicleTaximeter", 4000, true, "iii", taxi, GLOBAL_VEHICLES[taxi][gb_vehicle_DRIVER], new_passenger);
		}
		return 1;
	}
	
	if(GetPlayerState(driver) != PLAYER_STATE_DRIVER)
	{
		new work_extra_payment;
		if(work_info[WORK_TAXI][work_info_EXTRA_PAY] > 0 && work_info[WORK_TAXI][work_info_EXTRA_PAY_EXP] > 0)
		{
			work_extra_payment = (work_info[WORK_TAXI][work_info_EXTRA_PAY] * floatround(floatdiv(PLAYER_SKILLS[ driver ][WORK_TAXI], work_info[WORK_TAXI][work_info_EXTRA_PAY_EXP])));
			if(work_info[WORK_TAXI][work_info_EXTRA_PAY_LIMIT] != 0) if(work_extra_payment > work_info[WORK_TAXI][work_info_EXTRA_PAY_LIMIT]) work_extra_payment = work_info[WORK_TAXI][work_info_EXTRA_PAY_LIMIT];
			
			if(ACCOUNT_INFO[driver][ac_SU]) work_extra_payment += SU_WORK_EXTRA_PAY;
		}
		PLAYER_SKILLS[driver][WORK_TAXI] ++;
		
		SendClientMessageEx(driver, -1, "{E6F8E0}Has ganado %s$ con este viaje.", number_format_thousand(TAXI_METER_VEHICLE[taxi][veh_taxi_meter_PAYMENT] + work_extra_payment));
		SendClientMessageEx(passenger, -1, "{E6F8E0}El taxi te costó %s$.", number_format_thousand(TAXI_METER_VEHICLE[taxi][veh_taxi_meter_PAYMENT]));
		
		GivePlayerCash(driver, TAXI_METER_VEHICLE[taxi][veh_taxi_meter_PAYMENT] + work_extra_payment);
		GivePlayerCash(passenger, -TAXI_METER_VEHICLE[taxi][veh_taxi_meter_PAYMENT]);
		
		ResetVehicleTaxiMeter(taxi);
		HidePlayerTaxiMeter(driver);
		HidePlayerTaxiMeter(passenger);
		return 1;
	}
	if(GetPlayerState(passenger) != PLAYER_STATE_PASSENGER)
	{
		new work_extra_payment;
		if(work_info[WORK_TAXI][work_info_EXTRA_PAY] > 0 && work_info[WORK_TAXI][work_info_EXTRA_PAY_EXP] > 0)
		{
			work_extra_payment = (work_info[WORK_TAXI][work_info_EXTRA_PAY] * floatround(floatdiv(PLAYER_SKILLS[ driver ][WORK_TAXI], work_info[WORK_TAXI][work_info_EXTRA_PAY_EXP])));
			if(work_info[WORK_TAXI][work_info_EXTRA_PAY_LIMIT] != 0) if(work_extra_payment > work_info[WORK_TAXI][work_info_EXTRA_PAY_LIMIT]) work_extra_payment = work_info[WORK_TAXI][work_info_EXTRA_PAY_LIMIT];
		
			if(ACCOUNT_INFO[driver][ac_SU]) work_extra_payment += SU_WORK_EXTRA_PAY;
		}
		PLAYER_SKILLS[driver][WORK_TAXI] ++;
		
		SendClientMessageEx(driver, -1, "{E6F8E0}Has ganado %s$ con este viaje.", number_format_thousand(TAXI_METER_VEHICLE[taxi][veh_taxi_meter_PAYMENT] + work_extra_payment));
		SendClientMessageEx(passenger, -1, "{E6F8E0}El taxi te costó %s$.", number_format_thousand(TAXI_METER_VEHICLE[taxi][veh_taxi_meter_PAYMENT]));
		
		GivePlayerCash(driver, TAXI_METER_VEHICLE[taxi][veh_taxi_meter_PAYMENT] + work_extra_payment);
		GivePlayerCash(passenger, -TAXI_METER_VEHICLE[taxi][veh_taxi_meter_PAYMENT]);
		
		ResetVehicleTaxiMeter(taxi);
		HidePlayerTaxiMeter(passenger);
		UpdatePlayerTaxiMeterTextdraws(driver);
		
		new new_passenger = GetVehicleFirstPassenger(taxi);
		if(new_passenger != INVALID_PLAYER_ID)
		{
			ShowPlayerTaxiMeter(new_passenger);
			if(PLAYER_TEMP[new_passenger][pt_WANT_TAXI])
			{
				PLAYER_TEMP[new_passenger][pt_WANT_TAXI] = false;
				DisablePlayerTaxiMark(new_passenger);
			}
			
			TAXI_METER_VEHICLE[taxi][veh_taxi_meter_ENABLED] = true;
			GetVehiclePos(taxi, TAXI_METER_VEHICLE[taxi][veh_taxi_meter_OLD_X], TAXI_METER_VEHICLE[taxi][veh_taxi_meter_OLD_Y], TAXI_METER_VEHICLE[taxi][veh_taxi_meter_OLD_Z]);
			KillTimer(TAXI_METER_VEHICLE[taxi][veh_taxi_meter_TIMER]);
			TAXI_METER_VEHICLE[taxi][veh_taxi_meter_TIMER] = SetTimerEx("UpdateVehicleTaximeter", 4000, true, "iii", taxi, GLOBAL_VEHICLES[taxi][gb_vehicle_DRIVER], new_passenger);
		}
		return 1;
	}
	
	new Float:distance = GetVehicleDistanceFromPoint(taxi, TAXI_METER_VEHICLE[taxi][veh_taxi_meter_OLD_X], TAXI_METER_VEHICLE[taxi][veh_taxi_meter_OLD_Y], TAXI_METER_VEHICLE[taxi][veh_taxi_meter_OLD_Z]) * 0.01;

	if(CHARACTER_INFO[passenger][ch_CASH] < TAXI_METER_VEHICLE[taxi][veh_taxi_meter_PAYMENT])
	{
		new work_extra_payment;
		if(work_info[WORK_TAXI][work_info_EXTRA_PAY] > 0 && work_info[WORK_TAXI][work_info_EXTRA_PAY_EXP] > 0)
		{
			work_extra_payment = (work_info[WORK_TAXI][work_info_EXTRA_PAY] * floatround(floatdiv(PLAYER_SKILLS[ driver ][WORK_TAXI], work_info[WORK_TAXI][work_info_EXTRA_PAY_EXP])));
			if(work_info[WORK_TAXI][work_info_EXTRA_PAY_LIMIT] != 0) if(work_extra_payment > work_info[WORK_TAXI][work_info_EXTRA_PAY_LIMIT]) work_extra_payment = work_info[WORK_TAXI][work_info_EXTRA_PAY_LIMIT];
		
			if(ACCOUNT_INFO[driver][ac_SU]) work_extra_payment += SU_WORK_EXTRA_PAY;
		}
		PLAYER_SKILLS[driver][WORK_TAXI] ++;
		
		SendClientMessageEx(driver, -1, "{E6F8E0}Has ganado %s$ con este viaje.", number_format_thousand(TAXI_METER_VEHICLE[taxi][veh_taxi_meter_PAYMENT] + work_extra_payment));
		SendClientMessage(driver, -1, "{00FF80}El pasajero no tiene suficiente dinero para seguir pagando el viaje.");
		GivePlayerCash(driver, TAXI_METER_VEHICLE[taxi][veh_taxi_meter_PAYMENT] + work_extra_payment);
		
		SendClientMessageEx(passenger, -1, "{E6F8E0}El taxi te costó %s$.", number_format_thousand(TAXI_METER_VEHICLE[taxi][veh_taxi_meter_PAYMENT]));
		SendClientMessage(passenger, -1, "{00FF80}No tienes suficiente dinero para seguir pagando el viaje.");
		GivePlayerCash(passenger, -TAXI_METER_VEHICLE[taxi][veh_taxi_meter_PAYMENT]);
		if(CHARACTER_INFO[passenger][ch_CASH] < 0) SetPlayerCash(passenger, 0);
		
		ResetVehicleTaxiMeter(taxi);
		HidePlayerTaxiMeter(passenger);
		UpdatePlayerTaxiMeterTextdraws(driver);
		
		RemovePlayerFromVehicle(passenger);
		
		new new_passenger = GetVehicleFirstPassenger(taxi);
		if(new_passenger != INVALID_PLAYER_ID)
		{
			ShowPlayerTaxiMeter(new_passenger);
			if(PLAYER_TEMP[new_passenger][pt_WANT_TAXI])
			{
				PLAYER_TEMP[new_passenger][pt_WANT_TAXI] = false;
				DisablePlayerTaxiMark(new_passenger);
			}
			
			TAXI_METER_VEHICLE[taxi][veh_taxi_meter_ENABLED] = true;
			GetVehiclePos(taxi, TAXI_METER_VEHICLE[taxi][veh_taxi_meter_OLD_X], TAXI_METER_VEHICLE[taxi][veh_taxi_meter_OLD_Y], TAXI_METER_VEHICLE[taxi][veh_taxi_meter_OLD_Z]);
			KillTimer(TAXI_METER_VEHICLE[taxi][veh_taxi_meter_TIMER]);
			TAXI_METER_VEHICLE[taxi][veh_taxi_meter_TIMER] = SetTimerEx("UpdateVehicleTaximeter", 4000, true, "iii", taxi, GLOBAL_VEHICLES[taxi][gb_vehicle_DRIVER], new_passenger);
		}
		return 1;
	}
	
	TAXI_METER_VEHICLE[taxi][veh_taxi_meter_DISTANCE] += distance;
	TAXI_METER_VEHICLE[taxi][veh_taxi_meter_PAYMENT] = TAXI_METER_VEHICLE[taxi][veh_taxi_meter_PRICE] * floatround(TAXI_METER_VEHICLE[taxi][veh_taxi_meter_DISTANCE], floatround_round);
	
	GetVehiclePos(taxi, TAXI_METER_VEHICLE[taxi][veh_taxi_meter_OLD_X], TAXI_METER_VEHICLE[taxi][veh_taxi_meter_OLD_Y], TAXI_METER_VEHICLE[taxi][veh_taxi_meter_OLD_Z]);
	
	UpdatePlayerTaxiMeterTextdraws(driver);
	UpdatePlayerTaxiMeterTextdraws(passenger);
	return 1;
}

HidePlayerTaxiMeter(playerid)
{
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TAXI_METER][0]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TAXI_METER][1]);
	PLAYER_TEMP[playerid][pt_TAXI_METER_ENABLED] = false;
	return 1;
}

SendAlertToTaxiDrivers(playerid)
{
	PLAYER_TEMP[playerid][pt_LLAMADO_TAXI] = true;
	new Float:pos[3];
	GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
	
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(PLAYER_TEMP[i][pt_GAME_STATE] == GAME_STATE_NORMAL)
			{
				if(i == playerid) continue;
				if(GetPlayerState(i) != PLAYER_STATE_DRIVER) continue;
				if(!PLAYER_WORKS[i][WORK_TAXI]) continue;
				if(PLAYER_TEMP[i][pt_WORKING_IN] != WORK_TAXI) continue;
				
				SetPlayerMarkerForPlayer(i, playerid, 0xf2f224FF);

				SendClientMessageEx(i, -1, "Hay un nuevo cliente solicitando un taxi, distancia: {b9f442}%.2f Km.", (GetPlayerDistanceFromPoint(i, pos[0], pos[1], pos[2]) * 0.01));
				SendClientMessageEx(i,-1,"@Usa "R"/re taxi %d"W" para responder a su llamado",playerid);
			}
		}
	}
	return 1;
}

DisablePlayerTaxiMark(playerid)
{
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(PLAYER_TEMP[i][pt_GAME_STATE] == GAME_STATE_NORMAL)
			{
				if(i == playerid) continue;
				if(GetPlayerState(i) != PLAYER_STATE_DRIVER) continue;
				if(!PLAYER_WORKS[i][WORK_TAXI]) continue;
				if(PLAYER_TEMP[i][pt_WORKING_IN] != WORK_TAXI) continue;
				
				SetPlayerMarkerForPlayer(i, playerid, PLAYER_COLOR);
			}
		}
	}
	return 1;
}

SetTaxiPlayerMarkers(playerid)
{
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(PLAYER_TEMP[i][pt_GAME_STATE] == GAME_STATE_NORMAL)
			{
				if(PLAYER_TEMP[i][pt_WANT_TAXI])
				{
					SetPlayerMarkerForPlayer(playerid, i, 0xf2f224FF);
				}
			}
		}
	}
	return 1;
}

SetMechanicPlayerMarkers(playerid)
{
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(PLAYER_TEMP[i][pt_GAME_STATE] == GAME_STATE_NORMAL)
			{
				if(PLAYER_TEMP[i][pt_WANT_MECHANIC])
				{
					SetPlayerMarkerForPlayer(playerid, i, 0xf4c242FF);
				}
			}
		}
	}
	return 1;
}

SendAlertToMechanic(playerid)
{
	new Float:pos[3];
	GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
	
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(PLAYER_TEMP[i][pt_GAME_STATE] == GAME_STATE_NORMAL)
			{
				if(i == playerid) continue;
				if(!PLAYER_WORKS[i][WORK_MECHANIC]) continue;
				if(PLAYER_TEMP[i][pt_WORKING_IN] != WORK_MECHANIC) continue;
				
				SetPlayerMarkerForPlayer(i, playerid, 0xf4c242FF);
				SendClientMessageEx(i, -1, "Hay un nuevo cliente solicitando un mecánico, distancia: {b9f442}%.2f Km.", (GetPlayerDistanceFromPoint(i, pos[0], pos[1], pos[2]) * 0.01));
			}
		}
	}
	return 1;
}

DisablePlayerMechanicMark(playerid)
{
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(PLAYER_TEMP[i][pt_GAME_STATE] == GAME_STATE_NORMAL)
			{
				if(i == playerid) continue;
				if(!PLAYER_WORKS[i][WORK_MECHANIC]) continue;
				if(PLAYER_TEMP[i][pt_WORKING_IN] != WORK_MECHANIC) continue;
				
				SetPlayerMarkerForPlayer(i, playerid, PLAYER_COLOR);
			}
		}
	}
	return 1;
}

SetNormalPlayerMarkers(playerid)
{
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if(IsPlayerConnected(i))
		{
			SetPlayerMarkerForPlayer(playerid, i, PLAYER_TEMP[i][pt_PLAYER_COLOR]);
		}
	}
	return 1;
}

SavePlayerWorks(playerid)
{
	if(ACCOUNT_INFO[playerid][ac_ID] == 0) return 0;
	
	new DB_Query[150];
	format(DB_Query, sizeof DB_Query, "DELETE FROM `PLAYER_WORKS` WHERE `ID_USER` = '%d';", ACCOUNT_INFO[playerid][ac_ID]);
	db_query(Database, DB_Query);
	
	for(new i = 1; i != sizeof(PLAYER_WORKS[]); i ++)
	{
		DB_Query[0] = EOS;
		format(DB_Query, sizeof DB_Query, "INSERT INTO `PLAYER_WORKS` (`ID_USER`, `ID_WORK`, `SET`) VALUES ('%d', '%d', '%d');", ACCOUNT_INFO[playerid][ac_ID], i, PLAYER_WORKS[playerid][i]);
		db_query(Database, DB_Query);
	}
	return 1;
}

LoadPlayerCrewInfo(playerid)
{
	if(ACCOUNT_INFO[playerid][ac_ID] == 0) return 0;
	
	new DBResult:Result, DB_Query[90], bool:found;
	format(DB_Query, sizeof(DB_Query), "SELECT * FROM `PLAYER_CREW` WHERE `ID_USER` = '%d' LIMIT 1;", ACCOUNT_INFO[playerid][ac_ID]);
	Result = db_query(Database, DB_Query);
	
	if(db_num_rows(Result))
	{
		PLAYER_CREW[playerid][player_crew_VALID] = true;
		PLAYER_CREW[playerid][player_crew_ID] = db_get_field_assoc_int(Result, "ID_CREW");
		PLAYER_CREW[playerid][player_crew_RANK] = db_get_field_assoc_int(Result, "RANK");
		
		for(new i = 0; i != MAX_CREWS; i ++)
		{
			if(!CREW_INFO[i][crew_VALID]) continue;
			
			if(CREW_INFO[i][crew_ID] == PLAYER_CREW[playerid][player_crew_ID])
			{
				PLAYER_CREW[playerid][player_crew_INDEX] = i;
				CREW_INFO[i][crew_ONLINE_MEMBERS] ++;
				found = true;
				break;
			}
		}
		
		if(!found)
		{
			PLAYER_CREW[playerid][player_crew_VALID] = false;
			PLAYER_CREW[playerid][player_crew_ID] = 0;
			PLAYER_CREW[playerid][player_crew_RANK] = 0;
			PLAYER_CREW[playerid][player_crew_INDEX] = 0;
			SendClientMessage(playerid, -1, "{00FF80}La banda a la que pertenecías ya no existe.");
			
			format(DB_Query, sizeof DB_Query, "DELETE FROM `PLAYER_CREW` WHERE `ID_USER` = '%d';", ACCOUNT_INFO[playerid][ac_ID]);
			db_query(Database, DB_Query);
		}
	}
	else PLAYER_CREW[playerid][player_crew_VALID] = false;
	db_free_result(Result);
	return 1;
}
/**/
LoadPlayerSkinsWeapons(playerid)
{
	if(ACCOUNT_INFO[playerid][ac_ID] == 0) return 0;

	new DBResult:Result, DB_Query[90];
	format(DB_Query, sizeof(DB_Query), "SELECT * FROM `WEAPON_SKINS` WHERE `USER_ID` = '%d' AND ACTIVE='1';", ACCOUNT_INFO[playerid][ac_ID]);
	Result = db_query(Database, DB_Query);
	for(new i; i < db_num_rows(Result); i++ )
	{
		new weapon_dia = db_get_field_assoc_int(Result, "WEAPON_ID");
		new skin_idr = db_get_field_assoc_int(Result, "SKIN_ID");
		WEAPON_SKIN_ACTIVE[playerid][weapon_dia] = true;
		WEAPON_SKIN[playerid][weapon_dia] = skin_idr;
		db_next_row(Result);
	}
	db_free_result(Result);
	return 1;
}
LoadPlayerPescados(playerid)
{
	if(ACCOUNT_INFO[playerid][ac_ID] == 0) return 0;
	
	new DBResult:Result, DB_Query[190];
	format(DB_Query, sizeof(DB_Query), "SELECT Bacalao,Sardina,Anchoa,Atun,Salmon,Carnadas FROM `INTOPOS` WHERE `ID_USER` = '%d';", ACCOUNT_INFO[playerid][ac_ID]);
	Result = db_query(Database, DB_Query);
	if(db_num_rows(Result))
	{
		PESCADOS_PLAYER[playerid][Bacalao] = db_get_field_assoc_int(Result, "Bacalao");
		PESCADOS_PLAYER[playerid][Sardina] = db_get_field_assoc_int(Result, "Sardina");
		PESCADOS_PLAYER[playerid][Anchoa] = db_get_field_assoc_int(Result, "Anchoa");
		PESCADOS_PLAYER[playerid][Atun] = db_get_field_assoc_int(Result, "Atun");
		PESCADOS_PLAYER[playerid][Salmon] = db_get_field_assoc_int(Result, "Salmon");
		PESCADOS_PLAYER[playerid][Carnadas] = db_get_field_assoc_int(Result, "Carnadas");
	}
	db_free_result(Result);
	return 1;
}
LoadPlayerWorks_Nivel(playerid)
{
	if(ACCOUNT_INFO[playerid][ac_ID] == 0) return 0;

	new DBResult:Result, DB_Query[90];
	format(DB_Query, sizeof(DB_Query), "SELECT * FROM `WORK_NIVEL` WHERE `USER_ID` = '%d';", ACCOUNT_INFO[playerid][ac_ID]);
	Result = db_query(Database, DB_Query);
	for(new i; i < db_num_rows(Result); i++ )
	{
		new work = db_get_field_assoc_int(Result, "WORK_ID");
		new work_expa = db_get_field_assoc_int(Result, "WORK_EXP");
		switch(work)
		{
			case WORK_TRUCK: PLAYER_WORK_NIVEL[playerid][CAMIONERO] = work_expa;
			case WORK_MINER: PLAYER_WORK_NIVEL[playerid][MINERO] = work_expa;
			case WORK_LUMBERJACK: PLAYER_WORK_NIVEL[playerid][LENADOR] = work_expa;
			case WORK_CARRIER: PLAYER_WORK_NIVEL[playerid][TRANSPORTISTA] = work_expa;
		}
		db_next_row(Result);
	}
	db_free_result(Result);
	return 1;
}
LoadPlayerWorks(playerid)
{
	if(ACCOUNT_INFO[playerid][ac_ID] == 0) return 0;
	
	new DBResult:Result, DB_Query[90], player_works, bool:affected;
	format(DB_Query, sizeof(DB_Query), "SELECT * FROM `PLAYER_WORKS` WHERE `ID_USER` = '%d' LIMIT %d;", ACCOUNT_INFO[playerid][ac_ID], sizeof(PLAYER_WORKS[]));
	Result = db_query(Database, DB_Query);
	
	for(new i; i < db_num_rows(Result); i++ )
	{
		new work = db_get_field_assoc_int(Result, "ID_WORK");
		PLAYER_WORKS[playerid][work] = db_get_field_assoc_int(Result, "SET");
		if(PLAYER_WORKS[playerid][work])
		{
			if(!ACCOUNT_INFO[playerid][ac_SU])
			{
				if(player_works >= MAX_NU_WORKS)
				{
					affected = true;
					PLAYER_WORKS[playerid][work] = false;
					break;
				}
			}
			player_works ++;
		}
		
		db_next_row(Result);
	}
	db_free_result(Result);
	
	if(affected) SavePlayerWorks(playerid);
	return 1;
}

SavePlayerSkills(playerid)
{
	if(ACCOUNT_INFO[playerid][ac_ID] == 0) return 0;
	
	new DB_Query[150];

	/*for(new i = 1; i != sizeof(PLAYER_SKILLS[]); i ++)
	{
		DB_Query[0] = EOS;
		format(DB_Query, sizeof DB_Query, "UPDATE `PLAYER_SKILLS` SET `ID_WORK`='%d', `TOTAL`='%d' WHERE `ID_USER`='%d';", i, PLAYER_SKILLS[playerid][i], ACCOUNT_INFO[playerid][ac_ID]);
		db_query(Database, DB_Query);
	}*/

	for(new i = 1; i != sizeof(PLAYER_SKILLS[]); i ++)
	{
		switch(i)
		{
			case WORK_TAXI:
			{
				format(DB_Query, sizeof DB_Query, "UPDATE `PLAYER_SKILLS` SET `TOTAL`='%d' WHERE `ID_USER`='%d' AND `ID_WORK` ='1';", PLAYER_SKILLS[playerid][WORK_TAXI], ACCOUNT_INFO[playerid][ac_ID]);
				db_query(Database, DB_Query);
			}
			case WORK_TRUCK:
			{
				format(DB_Query, sizeof DB_Query, "UPDATE `PLAYER_SKILLS` SET `TOTAL`='%d' WHERE `ID_USER`='%d' AND `ID_WORK` ='2';", PLAYER_SKILLS[playerid][WORK_TRUCK], ACCOUNT_INFO[playerid][ac_ID]);
				db_query(Database, DB_Query);
			}
			case WORK_MECHANIC:
			{
				format(DB_Query, sizeof DB_Query, "UPDATE `PLAYER_SKILLS` SET `TOTAL`='%d' WHERE `ID_USER`='%d' AND `ID_WORK` ='3';", PLAYER_SKILLS[playerid][WORK_MECHANIC], ACCOUNT_INFO[playerid][ac_ID]);
				db_query(Database, DB_Query);
			}
			case WORK_HARVESTER:
			{
				format(DB_Query, sizeof DB_Query, "UPDATE `PLAYER_SKILLS` SET `TOTAL`='%d' WHERE `ID_USER`='%d' AND `ID_WORK` ='4';", PLAYER_SKILLS[playerid][WORK_HARVESTER], ACCOUNT_INFO[playerid][ac_ID]);
				db_query(Database, DB_Query);
			}
			case WORK_TRASH:
			{
				format(DB_Query, sizeof DB_Query, "UPDATE `PLAYER_SKILLS` SET `TOTAL`='%d' WHERE `ID_USER`='%d' AND `ID_WORK` ='5';", PLAYER_SKILLS[playerid][WORK_TRASH], ACCOUNT_INFO[playerid][ac_ID]);
				db_query(Database, DB_Query);
			}
			case WORK_LUMBERJACK:
			{
				format(DB_Query, sizeof DB_Query, "UPDATE `PLAYER_SKILLS` SET `TOTAL`='%d' WHERE `ID_USER`='%d' AND `ID_WORK` ='6';", PLAYER_SKILLS[playerid][WORK_LUMBERJACK], ACCOUNT_INFO[playerid][ac_ID]);
				db_query(Database, DB_Query);
			}
			case WORK_FARMER:
			{
				format(DB_Query, sizeof DB_Query, "UPDATE `PLAYER_SKILLS` SET `TOTAL`='%d' WHERE `ID_USER`='%d' AND `ID_WORK` ='7';", PLAYER_SKILLS[playerid][WORK_FARMER], ACCOUNT_INFO[playerid][ac_ID]);
				db_query(Database, DB_Query);
			}
			case WORK_POLICE:
			{
				format(DB_Query, sizeof DB_Query, "UPDATE `PLAYER_SKILLS` SET `TOTAL`='%d' WHERE `ID_USER`='%d' AND `ID_WORK` ='8';", PLAYER_SKILLS[playerid][WORK_POLICE], ACCOUNT_INFO[playerid][ac_ID]);
				db_query(Database, DB_Query);
			}
			case WORK_PIZZA:
			{
				format(DB_Query, sizeof DB_Query, "UPDATE `PLAYER_SKILLS` SET `TOTAL`='%d' WHERE `ID_USER`='%d' AND `ID_WORK` ='9';", PLAYER_SKILLS[playerid][WORK_PIZZA], ACCOUNT_INFO[playerid][ac_ID]);
				db_query(Database, DB_Query);
			}
			case WORK_MEDIC:
			{
				format(DB_Query, sizeof DB_Query, "UPDATE `PLAYER_SKILLS` SET `TOTAL`='%d' WHERE `ID_USER`='%d' AND `ID_WORK` ='10';", PLAYER_SKILLS[playerid][WORK_MEDIC], ACCOUNT_INFO[playerid][ac_ID]);
				db_query(Database, DB_Query);
			}
			case WORK_MINER:
			{
				format(DB_Query, sizeof DB_Query, "UPDATE `PLAYER_SKILLS` SET `TOTAL`='%d' WHERE `ID_USER`='%d' AND `ID_WORK` ='11';", PLAYER_SKILLS[playerid][WORK_MINER], ACCOUNT_INFO[playerid][ac_ID]);
				db_query(Database, DB_Query);
			}
			case WORK_PROTECTOR:
			{
				format(DB_Query, sizeof DB_Query, "UPDATE `PLAYER_SKILLS` SET `TOTAL`='%d' WHERE `ID_USER`='%d' AND `ID_WORK` ='12';", PLAYER_SKILLS[playerid][WORK_PROTECTOR], ACCOUNT_INFO[playerid][ac_ID]);
				db_query(Database, DB_Query);
			}
			case WORK_CARRIER:
			{
				format(DB_Query, sizeof DB_Query, "UPDATE `PLAYER_SKILLS` SET `TOTAL`='%d' WHERE `ID_USER`='%d' AND `ID_WORK` ='13';", PLAYER_SKILLS[playerid][WORK_CARRIER], ACCOUNT_INFO[playerid][ac_ID]);
				db_query(Database, DB_Query);
			}
			case WORK_PESCADOR:
			{
				format(DB_Query, sizeof DB_Query, "UPDATE `PLAYER_SKILLS` SET `TOTAL`='%d' WHERE `ID_USER`='%d' AND `ID_WORK` ='14';", PLAYER_SKILLS[playerid][WORK_PESCADOR], ACCOUNT_INFO[playerid][ac_ID]);
				db_query(Database, DB_Query);
			}
		}
	}
	/*format(DB_Query, sizeof DB_Query, "DELETE FROM `PLAYER_SKILLS` WHERE `ID_USER` = '%d';", ACCOUNT_INFO[playerid][ac_ID]);
	db_query(Database, DB_Query);
	
	for(new i = 1; i != sizeof(PLAYER_SKILLS[]); i ++)
	{
		DB_Query[0] = EOS;
		format(DB_Query, sizeof DB_Query, "INSERT INTO `PLAYER_SKILLS` (`ID_USER`, `ID_WORK`, `TOTAL`) VALUES ('%d', '%d', '%d');", ACCOUNT_INFO[playerid][ac_ID], i, PLAYER_SKILLS[playerid][i]);
		db_query(Database, DB_Query);
	}*/
	
	return 1;
}

LoadPlayerSkills(playerid)
{
	if(ACCOUNT_INFO[playerid][ac_ID] == 0) return 0;
	
	new DBResult:Result, DB_Query[190];
	format(DB_Query, sizeof(DB_Query), "SELECT * FROM `PLAYER_SKILLS` WHERE `ID_USER` = '%d' LIMIT %d;", ACCOUNT_INFO[playerid][ac_ID], sizeof(PLAYER_SKILLS[]));
	Result = db_query(Database, DB_Query);
	
	if(!db_num_rows(Result))
	{
		for(new i = 1; i != sizeof(PLAYER_SKILLS[]); i ++)
		{
			DB_Query[0] = EOS;
			format(DB_Query, sizeof DB_Query, "INSERT INTO `PLAYER_SKILLS` (`ID_USER`, `ID_WORK`, `TOTAL`) VALUES ('%d', '%d', '%d');", ACCOUNT_INFO[playerid][ac_ID], i, PLAYER_SKILLS[playerid][i]);
			db_query(Database, DB_Query);
		}
	}
	for(new i; i < db_num_rows(Result); i++ )
	{
		new work = db_get_field_assoc_int(Result, "ID_WORK");
		PLAYER_SKILLS[playerid][work] = db_get_field_assoc_int(Result, "TOTAL");
		db_next_row(Result);
	}
	db_free_result(Result);
	return 1;
}

SavePlayerMisc(playerid)
{
	if(ACCOUNT_INFO[playerid][ac_ID] == 0) return 0;
	
	new DB_Query[150];
	format(DB_Query, sizeof DB_Query, "DELETE FROM `PLAYER_MISC` WHERE `ID_USER` = '%d';", ACCOUNT_INFO[playerid][ac_ID]);
	db_query(Database, DB_Query);
	
	for(new i = 0; i != sizeof(PLAYER_MISC[]); i ++)
	{
		DB_Query[0] = EOS;
		format(DB_Query, sizeof DB_Query, "INSERT INTO `PLAYER_MISC` (`ID_USER`, `ID`, `EXTRA`) VALUES ('%d', '%d', '%d');", ACCOUNT_INFO[playerid][ac_ID], i, PLAYER_MISC[playerid][i]);
		db_query(Database, DB_Query);
	}
	return 1;
}

LoadPlayerMisc(playerid)
{
	if(ACCOUNT_INFO[playerid][ac_ID] == 0) return 0;
	
	new DBResult:Result, DB_Query[90];
	format(DB_Query, sizeof(DB_Query), "SELECT * FROM `PLAYER_MISC` WHERE `ID_USER` = '%d' LIMIT %d;", ACCOUNT_INFO[playerid][ac_ID], sizeof(PLAYER_MISC[]));
	Result = db_query(Database, DB_Query);
	
	for(new i; i < db_num_rows(Result); i++ )
	{
		new index = db_get_field_assoc_int(Result, "ID");
		PLAYER_MISC[playerid][index] = db_get_field_assoc_int(Result, "EXTRA");
		db_next_row(Result);
	}
	db_free_result(Result);
	return 1;
}

ResetTruckInfo(vehicleid)
{
	new tmp_TRUCK_VEHICLE[TRUCK_VEHICLE_Info]; TRUCK_VEHICLE[vehicleid] = tmp_TRUCK_VEHICLE;
	return 1;
}

ResetPizzaInfo(vehicleid)
{
	new tmp_PIZZA_VEHICLE[PIZZA_VEHICLE_Info]; PIZZA_VEHICLE[vehicleid] = tmp_PIZZA_VEHICLE;
	return 1;
}

ResetTrashInfo(vehicleid)
{
	new tmp_TRASH_VEHICLES[TRASH_VEHICLES_INFO]; TRASH_VEHICLES[vehicleid] = tmp_TRASH_VEHICLES;
	
	TRASH_VEHICLES[vehicleid][trash_vehicle_DRIVER_ID] = INVALID_PLAYER_ID;
	TRASH_VEHICLES[vehicleid][trash_vehicle_PASSENGER_ID] = INVALID_PLAYER_ID;
	return 1;
}

forward TruckLoadUp(playerid, vehicleid);
public TruckLoadUp(playerid, vehicleid)
{
	if(PLAYER_TEMP[playerid][pt_TRUCK_LOADING_VALUE] < 100.0)
	{
		PLAYER_TEMP[playerid][pt_TRUCK_LOADING_VALUE] += 10.0;
		if(PLAYER_TEMP[playerid][pt_TRUCK_LOADING_VALUE] > 100.0) PLAYER_TEMP[playerid][pt_TRUCK_LOADING_VALUE] = 100.0;
		
		UpdatePlayerLoadingTruckSize(playerid);
		KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][9]);
		PLAYER_TEMP[playerid][pt_TIMERS][9] = SetTimerEx("TruckLoadUp", 1000, false, "ii", playerid, vehicleid);
		return 1;
	}
	
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][0]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][1]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][2]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][3]);
	
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE] = 1;
	UpdateVehicleParams(vehicleid);
	
	TRUCK_VEHICLE[vehicleid][truck_vehicle_LOADED] = true;
	TRUCK_VEHICLE[vehicleid][truck_vehicle_LOADING] = false;
	TRUCK_VEHICLE[vehicleid][truck_vehicle_DELIVERED] = false;
	
	SendClientMessage(playerid,0xCCCCCCCC,"Info: El camión ha sido cargado, dirígite al checkpoint para entregar la mercancía.");
	SetPlayerTruckCheckpoint(playerid, vehicleid);
	return 1;
}

forward TruckUnLoadUp(playerid, vehicleid);
public TruckUnLoadUp(playerid, vehicleid)
{
	if(PLAYER_TEMP[playerid][pt_TRUCK_LOADING_VALUE] < 100.0)
	{
		PLAYER_TEMP[playerid][pt_TRUCK_LOADING_VALUE] += 10.0;
		if(PLAYER_TEMP[playerid][pt_TRUCK_LOADING_VALUE] > 100.0) PLAYER_TEMP[playerid][pt_TRUCK_LOADING_VALUE] = 100.0;
		
		UpdatePlayerLoadingTruckSize(playerid);
		KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][9]);
		PLAYER_TEMP[playerid][pt_TIMERS][9] = SetTimerEx("TruckUnLoadUp", 1000, false, "ii", playerid, vehicleid);
		return 1;
	}
	
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][0]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][1]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][2]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][3]);
	
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE] = 1;
	UpdateVehicleParams(vehicleid);
	
	TRUCK_VEHICLE[vehicleid][truck_vehicle_UNLOADING] = false;
	TRUCK_VEHICLE[vehicleid][truck_vehicle_DELIVERED] = true;
	
	ClearDynamicActorAnimations(PLAYER_TEMP[playerid][pt_ACTOR_TRUCK]);
	ClearDynamicActorAnimations(PLAYER_TEMP[playerid][pt_ACTOR_TRUCK]);
	ClearDynamicActorAnimations(PLAYER_TEMP[playerid][pt_ACTOR_TRUCK]);

	SendClientMessage(playerid, 0xCCCCCCCC, "Info: La mercancía ha sido entregada, regresa al punto de partida para cobrar.");
	SetPlayerTruckCheckpoint(playerid, vehicleid);
	return 1;
}

SetPlayerTruckCheckpoint(playerid, vehicleid)
{
	if(IsValidDynamicCP(PLAYER_TEMP[playerid][pt_TRUCK_CHECKPOINT]))
	{
		DestroyDynamicCP(PLAYER_TEMP[playerid][pt_TRUCK_CHECKPOINT]);
		PLAYER_TEMP[playerid][pt_TRUCK_CHECKPOINT] = INVALID_STREAMER_ID;
	}
	
	if(TRUCK_VEHICLE[vehicleid][truck_vehicle_DELIVERED])
	{
		PLAYER_TEMP[playerid][pt_TRUCK_CHECKPOINT] = CreateDynamicCP(72.1579, -248.2242, 0.5612, 5.0, 0, 0, playerid, 9999999999.0);
		
		new info[1];
		info[0] = CHECKPOINT_TYPE_FINISH_TRUCK;
		Streamer_SetArrayData(STREAMER_TYPE_CP, PLAYER_TEMP[playerid][pt_TRUCK_CHECKPOINT], E_STREAMER_EXTRA_ID, info);
	}
	else
	{
		PLAYER_TEMP[playerid][pt_TRUCK_CHECKPOINT] = CreateDynamicCP(Truck_Contents[ TRUCK_VEHICLE[vehicleid][truck_vehicle_POINT] ][truck_content_X], Truck_Contents[ TRUCK_VEHICLE[vehicleid][truck_vehicle_POINT] ][truck_content_Y], Truck_Contents[ TRUCK_VEHICLE[vehicleid][truck_vehicle_POINT] ][truck_content_Z], 5.0, 0, 0, playerid, 9999999999.0);
		
		new info[1];
		info[0] = CHECKPOINT_TYPE_UNLOAD_TRUCK;
		Streamer_SetArrayData(STREAMER_TYPE_CP, PLAYER_TEMP[playerid][pt_TRUCK_CHECKPOINT], E_STREAMER_EXTRA_ID, info);
	}
	return 1;
}


SetPlayerCarrierCheckpoint(playerid, vehicleid)
{
	if(IsValidDynamicCP(PLAYER_TEMP[playerid][pt_CARRIER_CHECKPOINT]))
	{
		DestroyDynamicCP(PLAYER_TEMP[playerid][pt_CARRIER_CHECKPOINT]);
		PLAYER_TEMP[playerid][pt_CARRIER_CHECKPOINT] = INVALID_STREAMER_ID;
	}
	
	if(GLOBAL_VEHICLES[vehicleid][carrier_vehicle_DELIVERED])
	{
		PLAYER_TEMP[playerid][pt_CARRIER_CHECKPOINT] = CreateDynamicCP(2762.8965,-2501.4404,13.6484, 5.0, 0, 0, playerid, 9999999999.0);
		
		new info[1];
		info[0] = CHECKPOINT_TYPE_FINISH_CARRIER;
		Streamer_SetArrayData(STREAMER_TYPE_CP, PLAYER_TEMP[playerid][pt_CARRIER_CHECKPOINT], E_STREAMER_EXTRA_ID, info);
	}
	else
	{
		PLAYER_TEMP[playerid][pt_CARRIER_CHECKPOINT] = CreateDynamicCP(Carrier_Contents[ GLOBAL_VEHICLES[vehicleid][carrier_vehicle_POINT] ][truck_content_X], Carrier_Contents[ GLOBAL_VEHICLES[vehicleid][carrier_vehicle_POINT] ][truck_content_Y], Carrier_Contents[ GLOBAL_VEHICLES[vehicleid][carrier_vehicle_POINT] ][truck_content_Z], 5.0, 0, 0, playerid, 9999999999.0);
		
		new info[1];
		info[0] = CHECKPOINT_TYPE_UNLOAD_CARRIER;
		Streamer_SetArrayData(STREAMER_TYPE_CP, PLAYER_TEMP[playerid][pt_CARRIER_CHECKPOINT], E_STREAMER_EXTRA_ID, info);
	}
	return 1;
}

UpdatePlayerLoadingTruckSize(playerid)
{
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][3], 253.0 + ( PLAYER_TEMP[playerid][pt_TRUCK_LOADING_VALUE] * 1.34), 0.000000);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][3]);
	return 1;
}

CMD:basurero(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_TRASH]) return SendClientMessage(playerid, -1, "{00FF80}No eres basurero.");
	if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_NONE && PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_TRASH)
	{
		SendClientMessageEx(playerid, -1, "{00FF80}Tienes que dejar de estar de servicio como %s primero.", work_info[ PLAYER_TEMP[playerid][pt_WORKING_IN] ][work_info_NAME]);
		return 1;
	}
	
	if(GetPlayerVirtualWorld(playerid) != 0) return ShowPlayerMessage(playerid, "No estás en el lugar adecuado.", 3);
	if(GetPlayerInterior(playerid) != 0) return ShowPlayerMessage(playerid, "No estás en el lugar adecuado.", 3);
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendClientMessage(playerid, -1, "{00FF80}No estás depie.");
	if(!IsPlayerInRangeOfPoint(playerid, 1.0, -1906.577514, -1756.457519, 22.079319)) return ShowPlayerMessage(playerid, "No estás en el lugar adecuado.", 3);
	
	if(!PLAYER_TEMP[playerid][pt_WORKING_IN]) StartPlayerJob(playerid, WORK_TRASH);
	else EndPlayerJob(playerid);
	return 1;
}
CMD:reloguearme(playerid, params[])
{
	new pIP[25],iStr[70];
	SendClientMessage(playerid, -1,"Relogueando...");
	GetPlayerIp(playerid, pIP, sizeof(pIP));
	SetPVarInt(playerid, "Reconnecting", 1);
	SetPVarString(playerid, "RecIP", pIP);
	format(iStr, sizeof(iStr), "banip %s", pIP);
	SendRconCommand(iStr);
	return 1;
}
CMD:remolcar(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_MECHANIC]) return SendClientMessage(playerid, -1, "{00FF80}No eres mecánico.");
	if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_MECHANIC) return SendClientMessage(playerid, -1, "{00FF80}No estás de servicio como mecánico.");
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, -1, "{00FF80}No estás conduciendo una grúa.");
	
	new vehicleid = GetPlayerVehicleID(playerid);
	if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_TYPE] != VEHICLE_TYPE_WORK) return SendClientMessage(playerid, -1, "{00FF80}No estás conduciendo una grúa.");
	if(WORK_VEHICLES[vehicleid][work_vehicle_WORK] != WORK_MECHANIC) return SendClientMessage(playerid, -1, "{00FF80}No estás conduciendo una grúa.");
	
	new to_player;
	if(sscanf(params, "d", to_player)) return SendClientMessage(playerid, -1, "Error: {58ACFA}/remolcar {FFFFFF}[playerid o nombre]");
	if(!IsPlayerConnected(to_player)) return SendClientMessage(playerid, -1, "{00FF80}El jugador está desconectado.");
	
	new Float:pos[3]; GetPlayerPos(to_player, pos[0], pos[1], pos[2]);
	if(!IsPlayerInRangeOfPoint(playerid, 10.0, pos[0], pos[1], pos[2])) return SendClientMessage(playerid, 0xA9F5A9AA, "Este jugador no está cerca tuya.");
	if(PLAYER_TEMP[to_player][pt_GAME_STATE] != GAME_STATE_NORMAL) return SendClientMessage(playerid, -1, "{00FF80}No puedes remolcar a este jugador ahora.");
	if(!PLAYER_TEMP[to_player][pt_WANT_MECHANIC]) return SendClientMessage(playerid, -1, "{00FF80}Este jugador no ha solicitado ningún mecánico.");
	
	
	
	new player_vehicleid = GetPlayerVehicleID(to_player);
	if(!player_vehicleid)
	{
		SendClientMessage(to_player, -1, "{00FF80}Para que el mecánico pueda remolcar tu vehículo, sube al asiento de pasajero de tu vehículo.");
		SendClientMessage(playerid, -1, "{00FF80}Este jugador no tiene ningún vehículo para remolcar.");
		return 1;
	}

	
	if(!VEHICLE_INFO[GLOBAL_VEHICLES[player_vehicleid][gb_vehicle_MODELID] - 400][vehicle_info_MECHANIC_TRAILER]) return SendClientMessage(playerid, -1, "{00FF80}Este tipo de vehículo no se puede remolcar, para repararlo bájate de la grúa y usa /vmenu sobre el vehículo.");
	if(VEHICLE_INFO[GLOBAL_VEHICLES[player_vehicleid][gb_vehicle_MODELID] - 400][vehicle_info_SEATS] < 2) return SendClientMessage(playerid, -1, "{00FF80}Este tipo de vehículo no se puede remolcar, para repararlo bájate de la grúa y usa /vmenu sobre el vehículo.");
	
	if(GetPlayerState(to_player) != PLAYER_STATE_PASSENGER)
	{
		SendClientMessage(playerid, -1, "Súbete en el asiento de pasajero de tu vehículo para que el mecánico pueda remolcar tu vehículo.");
		SendClientMessage(playerid, -1, "{00FF80}El jugador debe estar en el asiento del pasajero de su vehículo.");
		return 1;
	}
	
	if(GLOBAL_VEHICLES[player_vehicleid][gb_vehicle_OCCUPIED])
	{
		SendClientMessage(playerid, -1, "Súbete en el asiento de pasajero de tu vehículo para que el mecánico pueda remolcar tu vehículo.");
		SendClientMessage(playerid, -1, "{00FF80}Para remolcar el vehículo, el vehículo debe estar vacío.");
		return 1;
	}
	
	if(GLOBAL_VEHICLES[player_vehicleid][gb_vehicle_ATTACHED_TO] != INVALID_VEHICLE_ID)
	{
		new trailerid = GetVehicleTrailer(GLOBAL_VEHICLES[player_vehicleid][gb_vehicle_ATTACHED_TO]);
		if(trailerid == player_vehicleid) return SendClientMessage(playerid, -1, "{00FF80}Este vehículo ya está remolcado.");
	}
		
	if(GLOBAL_VEHICLES[player_vehicleid][gb_vehicle_PARAMS_ENGINE])
	{
		GLOBAL_VEHICLES[player_vehicleid][gb_vehicle_PARAMS_ENGINE] = 0;
		UpdateVehicleParams(player_vehicleid);
	}
	
	GLOBAL_VEHICLES[player_vehicleid][gb_vehicle_ATTACHED_TO] = vehicleid;
	AttachTrailerToVehicle(player_vehicleid, vehicleid);
	
	SendClientMessage(playerid, -1, "{E6F8E0}Has remolcado el vehículo, llévalo al taller para repararlo.");
	SendClientMessage(to_player, -1, "{E6F8E0}El mecánico a remolcado el vehículo.");
	
	PLAYER_TEMP[to_player][pt_WANT_MECHANIC] = false;
	DisablePlayerMechanicMark(to_player);
	return 1;
}
CMD:aceite(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_MECHANIC]) return SendClientMessage(playerid, -1, "{00FF80}No eres mecánico.");
	if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_MECHANIC) return SendClientMessage(playerid, -1, "{00FF80}No estás de servicio como mecánico.");
	
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendClientMessage(playerid, -1, "{00FF80}No estás depie.");
	
	new vehicleid = GetPlayerCameraTargetVehicle(playerid);
	if(vehicleid == INVALID_VEHICLE_ID) return SendClientMessage(playerid, -1, "{00FF80}No estás cerca de ningún vehículo.");
	
	if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE]) return SendClientMessage(playerid, -1, "{00FF80}Para trabajar en el vehículo el motor debe estar apagado.");
	
	PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] = vehicleid;
	ShowDialog(playerid, DIALOG_MECHANIC_MENU_ACEITE);
	return 1;
}
CMD:vmenu(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_MECHANIC]) return SendClientMessage(playerid, -1, "{00FF80}No eres mecánico.");
	if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_MECHANIC) return SendClientMessage(playerid, -1, "{00FF80}No estás de servicio como mecánico.");
	
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendClientMessage(playerid, -1, "{00FF80}No estás depie.");
	
	new vehicleid = GetPlayerCameraTargetVehicle(playerid);
	if(vehicleid == INVALID_VEHICLE_ID) return SendClientMessage(playerid, -1, "{00FF80}No estás cerca de ningún vehículo.");
	
	if(!IsPlayerInDynamicArea(playerid, Mechanic_Area))
	{
		if(VEHICLE_INFO[GLOBAL_VEHICLES[vehicleid][gb_vehicle_MODELID] - 400][vehicle_info_MECHANIC_TRAILER] && VEHICLE_INFO[GLOBAL_VEHICLES[vehicleid][gb_vehicle_MODELID] - 400][vehicle_info_SEATS] < 2)
		{
			SendClientMessage(playerid, -1, "{E6F8E0}Para reparar este vehículo tienes que subir a una grúa y remolcarlo hasta el mecánico. (/remolcar)");
			return 1;
		}
	}

	if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE]) return SendClientMessage(playerid, -1, "{00FF80}Para trabajar en el vehículo el motor debe estar apagado.");
	
	PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] = vehicleid;
	ShowDialog(playerid, DIALOG_MECHANIC_MENU);
	return 1;
}

CMD:policia(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_POLICE]) return SendClientMessage(playerid, -1, "{00FF80}No eres policía.");
	if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_NONE && PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_POLICE)
	{
		SendClientMessageEx(playerid, -1, "{00FF80}Tienes que dejar de estar de servicio como %s primero.", work_info[ PLAYER_TEMP[playerid][pt_WORKING_IN] ][work_info_NAME]);
		return 1;
	}
	
	if(GetPlayerVirtualWorld(playerid) != 0) return ShowPlayerMessage(playerid, "No estás en el lugar adecuado.", 3);
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendClientMessage(playerid, -1, "{00FF80}No estás depie.");
	
	if(IsPlayerInRangeOfPoint(playerid, 1.0, 253.280288, 76.219017, 1003.640625) || IsPlayerInRangeOfPoint(playerid, 1.0, 266.547180, 119.652816, 1004.617187) || IsPlayerInRangeOfPoint(playerid, 1.0, 217.816406, 187.667922, 1003.031250))
	{
		if(!PLAYER_TEMP[playerid][pt_WORKING_IN]) ShowDialog(playerid, DIALOG_SELECT_POLICE_SKIN);
		else EndPlayerJob(playerid); 
		return 1;
	}
	
	ShowPlayerMessage(playerid, "No estás en el lugar adecuado.", 3);
	return 1;
}

CMD:talar(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_LUMBERJACK]) return SendClientMessage(playerid, -1, "{00FF80}No eres leñador.");
	if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_NONE && PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_LUMBERJACK)
	{
		SendClientMessageEx(playerid, -1, "{00FF80}Tienes que dejar de estar de servicio como %s primero.", work_info[ PLAYER_TEMP[playerid][pt_WORKING_IN] ][work_info_NAME]);
		return 1;
	}
	
	if(GetPlayerVirtualWorld(playerid) != 0) return ShowPlayerMessage(playerid, "No estás en el lugar adecuado.", 3);
	if(GetPlayerInterior(playerid) != 0) return ShowPlayerMessage(playerid, "No estás en el lugar adecuado.", 3);
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendClientMessage(playerid, -1, "{00FF80}No estás depie.");
	if(!IsPlayerInRangeOfPoint(playerid, 1.0, -527.670349, -97.338562, 63.176174)) return 1;
	
	if(!PLAYER_TEMP[playerid][pt_WORKING_IN]) StartPlayerJob(playerid, WORK_LUMBERJACK);
	else EndPlayerJob(playerid);
	return 1;
}
CMD:mejoras(playerid, params[])
{
	for(new i = 0; i < sizeof POSTALLERES; i++)
	{
		if(!IsPlayerInRangeOfPoint(playerid, 2, POSTALLERES[i][xXx],POSTALLERES[i][yYy],POSTALLERES[i][zZz]))
		{
			PassengerCheck(playerid);
			if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
			{
				ShowPlayerDialog(playerid,DIALOG_MEJORAS_VEH,DIALOG_STYLE_LIST,"Mejoras para el vehiculo","Mejorar motor\nMejorar suspencion (salto v)","Aceptar", "Cerrar");
			}
		}
	}
    return 1;
}
CMD:mecanico(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_MECHANIC]) return SendClientMessage(playerid, -1, "{00FF80}No eres mecánico.");
	if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_NONE && PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_MECHANIC)
	{
		SendClientMessageEx(playerid, -1, "{00FF80}Tienes que dejar de estar de servicio como %s primero.", work_info[ PLAYER_TEMP[playerid][pt_WORKING_IN] ][work_info_NAME]);
		return 1;
	}
	
	if(GetPlayerVirtualWorld(playerid) != 0) return ShowPlayerMessage(playerid, "No estás en el lugar adecuado.", 3);
	if(GetPlayerInterior(playerid) != 0) return ShowPlayerMessage(playerid, "No estás en el lugar adecuado.", 3);
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendClientMessage(playerid, -1, "{00FF80}No estás depie.");
	if(!IsPlayerInRangeOfPoint(playerid, 1.0, -89.087181, -1184.843627, 2.940625)) return 1;
	
	if(!PLAYER_TEMP[playerid][pt_WORKING_IN]) StartPlayerJob(playerid, WORK_MECHANIC);
	else EndPlayerJob(playerid);
	return 1;
}

CMD:medico(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_MEDIC]) return SendClientMessage(playerid, -1, "{00FF80}No eres médico.");
	if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_NONE && PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_MEDIC)
	{
		SendClientMessageEx(playerid, -1, "{00FF80}Tienes que dejar de estar de servicio como %s primero.", work_info[ PLAYER_TEMP[playerid][pt_WORKING_IN] ][work_info_NAME]);
		return 1;
	}
	
	if(ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_INTERIOR_TYPE] != INTERIOR_HOSPITAL) return ShowPlayerMessage(playerid, "No estás en el lugar adecuado.", 3);
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendClientMessage(playerid, -1, "{00FF80}No estás depie.");
	if(!IsPlayerInRangeOfPoint(playerid, 1.0, -2029.751342, -114.503044, 1035.171875)) return 1;
	
	if(!PLAYER_TEMP[playerid][pt_WORKING_IN]) StartPlayerJob(playerid, WORK_MEDIC);
	else EndPlayerJob(playerid);
	return 1;
}
CMD:transportista(playerid,params[])
{
	if(!PLAYER_WORKS[playerid][WORK_CARRIER]) return SendClientMessage(playerid, -1, "{00FF80}No eres transportista.");
	if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_NONE && PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_CARRIER)
	{
		SendClientMessageEx(playerid, -1, "{00FF80}Tienes que dejar de estar de servicio como %s primero.", work_info[ PLAYER_TEMP[playerid][pt_WORKING_IN] ][work_info_NAME]);
		return 1;
	}
	
	if(GetPlayerVirtualWorld(playerid) != 0) return ShowPlayerMessage(playerid, "No estás en el lugar adecuado.", 3);
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendClientMessage(playerid, -1, "{00FF80}No estás depie.");
	if(!IsPlayerInRangeOfPoint(playerid, 2.0,2745.1729,-2453.7588,13.8623)) return 1;
	
	if(!PLAYER_TEMP[playerid][pt_WORKING_IN]) StartPlayerJob(playerid, WORK_CARRIER);
	else EndPlayerJob(playerid);
	return 1;
}

CMD:pescador(playerid,params[])
{
	if(!PLAYER_WORKS[playerid][WORK_PESCADOR]) return SendClientMessage(playerid, -1, "{00FF80}No eres pescador.");
	if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_NONE && PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_PESCADOR)
	{
		SendClientMessageEx(playerid, -1, "{00FF80}Tienes que dejar de estar de servicio como %s primero.", work_info[ PLAYER_TEMP[playerid][pt_WORKING_IN] ][work_info_NAME]);
		return 1;
	}
	
	if(GetPlayerVirtualWorld(playerid) != 0) return ShowPlayerMessage(playerid, "No estás en el lugar adecuado.", 3);
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendClientMessage(playerid, -1, "{00FF80}No estás depie.");
	if(!IsPlayerInRangeOfPoint(playerid, 2.0, 2897.5376,-1993.8373,3.7561)) return 1;
	
	if(!PLAYER_TEMP[playerid][pt_WORKING_IN]) StartPlayerJob(playerid, WORK_PESCADOR);
	else EndPlayerJob(playerid);
	return 1;
}

CMD:minero(playerid,params[])
{
	if(!PLAYER_WORKS[playerid][WORK_MINER]) return SendClientMessage(playerid, -1, "{00FF80}No eres minero, el trabajo se consigue dentro de la mineria.");
	if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_NONE && PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_MINER)
	{
		SendClientMessageEx(playerid, -1, "{00FF80}Tienes que dejar de estar de servicio como %s primero.", work_info[ PLAYER_TEMP[playerid][pt_WORKING_IN] ][work_info_NAME]);
		return 1;
	}
	
	if(GetPlayerVirtualWorld(playerid) != 25) return ShowPlayerMessage(playerid, "No estás en el lugar adecuado.", 3);
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendClientMessage(playerid, -1, "{00FF80}No estás depie.");
	if(!IsPlayerInRangeOfPoint(playerid, 2.0, 2407.4590, -1513.2579, 1398.5747)) return 1;
	
	if(!PLAYER_TEMP[playerid][pt_WORKING_IN]) StartPlayerJob(playerid, WORK_MINER);
	else EndPlayerJob(playerid);
	return 1;
}
CMD:pizzero(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_PIZZA]) return SendClientMessage(playerid, -1, "{00FF80}No eres pizzero, el trabajo se consigue dentro de la pizzería.");
	if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_NONE && PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_PIZZA)
	{
		SendClientMessageEx(playerid, -1, "{00FF80}Tienes que dejar de estar de servicio como %s primero.", work_info[ PLAYER_TEMP[playerid][pt_WORKING_IN] ][work_info_NAME]);
		return 1;
	}
	
	if(GetPlayerVirtualWorld(playerid) != 0) return ShowPlayerMessage(playerid, "No estás en el lugar adecuado.", 3);
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendClientMessage(playerid, -1, "{00FF80}No estás depie.");
	if(!IsPlayerInRangeOfPoint(playerid, 1.0, 2097.355712, -1818.040771, 13.382812)) return 1;
	
	if(!PLAYER_TEMP[playerid][pt_WORKING_IN]) StartPlayerJob(playerid, WORK_PIZZA);
	else EndPlayerJob(playerid);
	return 1;
}

CMD:semillas(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_FARMER]) return SendClientMessage(playerid, -1, "{00FF80}No eres agricultor.");
	if(GetPlayerVirtualWorld(playerid) != 0) return ShowPlayerMessage(playerid, "No estás en el lugar adecuado.", 3);
	if(GetPlayerInterior(playerid) != 0) return ShowPlayerMessage(playerid, "No estás en el lugar adecuado.", 3);
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendClientMessage(playerid, -1, "{00FF80}No estás depie.");
	if(!IsPlayerInRangeOfPoint(playerid, 1.0, 1566.521606, 31.370532, 24.16406)) return 1;
	
	ShowDialog(playerid, DIALOG_SEED_LIST);
	return 1;
}

CMD:plantar(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_FARMER]) return SendClientMessage(playerid, -1, "{00FF80}No eres agricultor.");
	if(PLAYER_TEMP[playerid][pt_WORKING_IN] && PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_FARMER)
	{
		SendClientMessageEx(playerid, -1, "{00FF80}Tienes que dejar de estar de servicio como %s primero.", work_info[ PLAYER_TEMP[playerid][pt_WORKING_IN] ][work_info_NAME]);
		return 1;
	}
	
	if(GetPlayerVirtualWorld(playerid) != 0) return ShowPlayerMessage(playerid, "No estás en el lugar adecuado.", 3);
	if(GetPlayerInterior(playerid) != 0) return ShowPlayerMessage(playerid, "No estás en el lugar adecuado.", 3);
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendClientMessage(playerid, -1, "{00FF80}No estás depie.");
	if(!IsPlayerInDynamicArea(playerid, Farmer_Area)) return SendClientMessage(playerid, 0xA9F5A9AA, "No estás en la zona para plantar, está marcada en el mapa con una bandera.");
	if(PLAYER_TEMP[playerid][pt_PLANTING]) return SendClientMessage(playerid, 0xA9F5A9AA, "Ahora mismo ya estás plantando algo.");
	
	if(gettime() < PLAYER_TEMP[playerid][pt_LAST_PLANT_TIME] + 60)
	{
		new time = (60-(gettime()-PLAYER_TEMP[playerid][pt_LAST_PLANT_TIME]));
		SendClientMessageEx(playerid, 0xA9F5A9AA, "Tienes que esperar %s minutos para volver a plantar.", TimeConvert(time));
		return 1;
	}
	
	if(GetPlayerPlantedPlants(playerid) > 10) return SendClientMessage(playerid, 0xA9F5A9AA, "Por favor, recoge tus otras plantas para poder plantar más.");
	
	for(new i = 0; i != MAX_PLANTS; i ++)
	{
		if(!PLANTS[i][plant_VALID]) continue;
		
		new Float:pos[3];
		GetDynamicObjectPos(PLANTS[i][plant_OBJECT_ID], pos[0], pos[1], pos[2]);
		if(IsPlayerInRangeOfPoint(playerid, 3.0, pos[0], pos[1], pos[2]))
		{
			SendClientMessage(playerid, -1, "{00FF80}Aquí ya hay una planta, aléjate un poco para plantar.");
			return 1;
		}
	}
	
	ShowDialog(playerid, DIALOG_PLANT_PLANTS);
	return 1;
}

CMD:piezas(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_MECHANIC]) return SendClientMessage(playerid, -1, "{00FF80}No eres mecánico.");
	if(GetPlayerVirtualWorld(playerid) != 0) return ShowPlayerMessage(playerid, "No estás en el lugar adecuado.", 3);
	if(GetPlayerInterior(playerid) != 0) return ShowPlayerMessage(playerid, "No estás en el lugar adecuado.", 3);
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendClientMessage(playerid, -1, "{00FF80}No estás depie.");
	if(!IsPlayerInRangeOfPoint(playerid, 1.0, -80.710136, -1193.329956, 2.947619)) return ShowPlayerMessage(playerid, "No estás en el lugar adecuado.", 3);
	
	if(sscanf(params, "d", params[0])) return SendClientMessage(playerid, -1, "Error: {58ACFA}/piezas {FFFFFF}[cantidad]");
	if(params[0] <= 0 || params[0] >= 10000) return SendClientMessage(playerid, -1, "Error: {58ACFA}/piezas {FFFFFF}[cantidad > 0]");
	
	new price = params[0] * 50;
	if(price > CHARACTER_INFO[playerid][ch_CASH])
	{
		SendClientMessageEx(playerid, -1, "{00FF80}Necesitas %s$ para poder comprar %d piezas.", number_format_thousand(price), params[0]);
		return 1;
	}
	
	GivePlayerCash(playerid, -price);
	PLAYER_MISC[playerid][MISC_MECHANIC_PIECES] += params[0];
	
	SendClientMessageEx(playerid, -1, "{E6F8E0}Has comprado %s piezas por %s$, ahora tienes %s piezas.", number_format_thousand(params[0]), number_format_thousand(price), number_format_thousand(PLAYER_MISC[playerid][MISC_MECHANIC_PIECES]));
	return 1;
}

VehiclePaintjob(modelid)
{
	switch(modelid)
	{
		case 483: return 1;
		case 534..536: return 3;
		case 558..562: return 3;
		case 565, 567: return 3;
		case 575: return 2;
		case 576: return 3;
	}
	return false;
}

Set_HARVEST_Checkpoint(playerid)
{
	if(IsValidDynamicRaceCP(PLAYER_TEMP[playerid][pt_HARVERT_CHECKPOINT]))
	{
		DestroyDynamicRaceCP(PLAYER_TEMP[playerid][pt_HARVERT_CHECKPOINT]);
		PLAYER_TEMP[playerid][pt_HARVERT_CHECKPOINT] = INVALID_STREAMER_ID;
	}
	
	if(PLAYER_TEMP[playerid][pt_HARVERT_PROCCESS] == sizeof(HARVEST_CHECKPOINTS) - 1)
	{
		PLAYER_TEMP[playerid][pt_HARVERT_CHECKPOINT] =	CreateDynamicRaceCP
														(
															1,
															HARVEST_CHECKPOINTS[ PLAYER_TEMP[playerid][pt_HARVERT_PROCCESS] ][0],
															HARVEST_CHECKPOINTS[ PLAYER_TEMP[playerid][pt_HARVERT_PROCCESS] ][1],
															HARVEST_CHECKPOINTS[ PLAYER_TEMP[playerid][pt_HARVERT_PROCCESS] ][2],
															0.0,
															0.0,
															0.0,
															5.0, 
															0,
															0,
															playerid
														);
	}
	else
	{
		PLAYER_TEMP[playerid][pt_HARVERT_CHECKPOINT] =	CreateDynamicRaceCP
														(
															0,
															HARVEST_CHECKPOINTS[ PLAYER_TEMP[playerid][pt_HARVERT_PROCCESS] ][0],
															HARVEST_CHECKPOINTS[ PLAYER_TEMP[playerid][pt_HARVERT_PROCCESS] ][1],
															HARVEST_CHECKPOINTS[ PLAYER_TEMP[playerid][pt_HARVERT_PROCCESS] ][2],
															HARVEST_CHECKPOINTS[ PLAYER_TEMP[playerid][pt_HARVERT_PROCCESS] + 1 ][0],
															HARVEST_CHECKPOINTS[ PLAYER_TEMP[playerid][pt_HARVERT_PROCCESS] + 1 ][1],
															HARVEST_CHECKPOINTS[ PLAYER_TEMP[playerid][pt_HARVERT_PROCCESS] + 1 ][2],
															5.0, 
															0,
															0,
															playerid
														);
	}
	
	new info[1];
	info[0] = CHECKPOINT_TYPE_HARVEST;
	Streamer_SetArrayData(STREAMER_TYPE_RACE_CP, PLAYER_TEMP[playerid][pt_HARVERT_CHECKPOINT], E_STREAMER_EXTRA_ID, info);
	
	return 1;
}

public OnPlayerEnterDynamicRaceCP(playerid, checkpointid)
{
	new info[1];
	Streamer_GetArrayData(STREAMER_TYPE_RACE_CP, checkpointid, E_STREAMER_EXTRA_ID, info);
	
	switch(info[0])
	{
		case CHECKPOINT_TYPE_HARVEST:
		{
			if(PLAYER_TEMP[playerid][pt_HARVERT_PROCCESS] == sizeof(HARVEST_CHECKPOINTS) - 1)
			{
				new vehicleid = GetPlayerVehicleID(playerid);
				if(vehicleid == INVALID_VEHICLE_ID) return 1;
				
				new work_extra_payment;
				if(work_info[WORK_HARVESTER][work_info_EXTRA_PAY] > 0 && work_info[WORK_HARVESTER][work_info_EXTRA_PAY_EXP] > 0)
				{
					work_extra_payment = (work_info[WORK_HARVESTER][work_info_EXTRA_PAY] * floatround(floatdiv(PLAYER_SKILLS[playerid][WORK_HARVESTER], work_info[WORK_HARVESTER][work_info_EXTRA_PAY_EXP])));
					if(work_info[WORK_HARVESTER][work_info_EXTRA_PAY_LIMIT] != 0) if(work_extra_payment > work_info[WORK_HARVESTER][work_info_EXTRA_PAY_LIMIT]) work_extra_payment = work_info[WORK_HARVESTER][work_info_EXTRA_PAY_LIMIT];
					
					if(ACCOUNT_INFO[playerid][ac_SU]==1) work_extra_payment += 300;
					if(ACCOUNT_INFO[playerid][ac_SU]>=2) work_extra_payment += 600;
				}
				
				new money = minrand(350, 410) + WORK_HARVESTER;
				GivePlayerCash(playerid, money);
				
				PLAYER_SKILLS[playerid][WORK_HARVESTER] ++;
				SendClientMessageEx(playerid, -1, "{E6F8E0}Has ganado %s$ con esta cosecha.", number_format_thousand(money));
				
				EndPlayerJob(playerid);
				return 1;
			}
			
			new str[50];
			format(str, sizeof str, "~n~~n~~n~~n~~n~~n~~n~~w~~h~checkpoint_~y~%d/%d", PLAYER_TEMP[playerid][pt_HARVERT_PROCCESS] + 1, sizeof(HARVEST_CHECKPOINTS));
			GameTextForPlayer(playerid, str, 2000, 3);
			
			PLAYER_TEMP[playerid][pt_HARVERT_PROCCESS] ++;
			Set_HARVEST_Checkpoint(playerid);
		}
	}
	return 1;
}

SetPlayerTrashCheckpoint(playerid, vehicleid)
{
	DestroyPlayerTrashCheckpoint(playerid);
	
	new cp = TRASH_VEHICLES[ vehicleid ][trash_vehicle_CP];
	new route = TRASH_VEHICLES[ vehicleid ][trash_vehicle_ROUTE];
	
	if(cp >= TRASH_OBJECTS[route][trash_route_OBJECTS])
	{
		PLAYER_TEMP[playerid][pt_TRASH_CHECKPOINT] = CreateDynamicCP(-1872.575073, -1720.129394, 22.30542, 5.0, 0, 0, playerid, 9999999999.0);
		new info[1];
		info[0] = CHECKPOINT_TYPE_FINISH_TRASH;
		Streamer_SetArrayData(STREAMER_TYPE_CP, PLAYER_TEMP[playerid][pt_TRASH_CHECKPOINT], E_STREAMER_EXTRA_ID, info);
	}
	else
	{
		PLAYER_TEMP[playerid][pt_TRASH_CHECKPOINT] = CreateDynamicCP(TRASH_OBJECTS[ route ][trash_object_X][ cp ], TRASH_OBJECTS[ route ][trash_object_Y][ cp ], TRASH_OBJECTS[ route ][trash_object_Z][ cp ], 1.5, 0, 0, playerid, 9999999999.0);
		
		new info[1];
		info[0] = CHECKPOINT_TYPE_TRASH;
		Streamer_SetArrayData(STREAMER_TYPE_CP, PLAYER_TEMP[playerid][pt_TRASH_CHECKPOINT], E_STREAMER_EXTRA_ID, info);
	}
	return 1;
}

DestroyPlayerTrashCheckpoint(playerid)
{
	if(IsValidDynamicCP(PLAYER_TEMP[playerid][pt_TRASH_CHECKPOINT]))
	{
		DestroyDynamicCP(PLAYER_TEMP[playerid][pt_TRASH_CHECKPOINT]);
		PLAYER_TEMP[playerid][pt_TRASH_CHECKPOINT] = INVALID_STREAMER_ID;
	}
	return 1;
}

CancelTrashWork(driver, mate, vehicleid)
{
	DestroyPlayerTrashCheckpoint(driver);
	DestroyPlayerTrashCheckpoint(mate);
	
	DestroyPlayerTrashRouteObjects(driver);
	DestroyPlayerTrashRouteObjects(mate);
	
	PLAYER_TEMP[driver][pt_TRASH_DRIVER] = false;
	PLAYER_TEMP[driver][pt_TRASH_PASSENGER] = false;
	PLAYER_TEMP[driver][pt_TRASH_VEHICLE_ID] = INVALID_VEHICLE_ID;
	
	PLAYER_TEMP[mate][pt_TRASH_DRIVER] = false;
	PLAYER_TEMP[mate][pt_TRASH_PASSENGER] = false;
	PLAYER_TEMP[mate][pt_TRASH_VEHICLE_ID] = INVALID_VEHICLE_ID;
	
	KillTimer(PLAYER_TEMP[mate][pt_TIMERS][10]);
	PlayerTextDrawHide(mate, PlayerTextdraws[mate][ptextdraw_RECYCLE_TRASH][0]);
	PlayerTextDrawHide(mate, PlayerTextdraws[mate][ptextdraw_RECYCLE_TRASH][1]);
	PlayerTextDrawHide(mate, PlayerTextdraws[mate][ptextdraw_RECYCLE_TRASH][2]);
	ClearAnimations(mate);
	TogglePlayerControllableEx(mate, true);
	
	ResetTrashInfo(vehicleid);
	SetVehicleToRespawnEx(vehicleid);
	return 1;
}

UpdatePlayerTrashRecycleSize(playerid)
{
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][2], 0.0, PLAYER_TEMP[playerid][pt_RECYCLE_BIN_VALUE] * 1.3);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][2]);
	return 1;
}

forward RecycleUp(playerid);
public RecycleUp(playerid)
{
	if(PLAYER_TEMP[playerid][pt_RECYCLE_BIN_VALUE] < 100.0)
	{
		PLAYER_TEMP[playerid][pt_RECYCLE_BIN_VALUE] += 15.0;
		if(PLAYER_TEMP[playerid][pt_RECYCLE_BIN_VALUE] > 100.0) PLAYER_TEMP[playerid][pt_RECYCLE_BIN_VALUE] = 100.0;
		
		ApplyAnimation(playerid, "ROB_BANK", "CAT_Safe_Rob", 4.1, true, false, false, false, 0);
		UpdatePlayerTrashRecycleSize(playerid);
		KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][10]);
		PLAYER_TEMP[playerid][pt_TIMERS][10] = SetTimerEx("RecycleUp", 1000, false, "i", playerid);
		return 1;
	}
	
	TogglePlayerControllableEx(playerid, true);
	ClearAnimations(playerid);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][0]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][1]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][2]);
	
	new driver = TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_DRIVER_ID];
	new cp = TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_CP];
	new route = TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_ROUTE];
	
	DestroyDynamicObject(TRASH_PLAYER_OBJECTS[playerid][cp]);
	TRASH_PLAYER_OBJECTS[playerid][cp] = INVALID_STREAMER_ID;
	
	DestroyDynamicObject(TRASH_PLAYER_OBJECTS[driver][cp]);
	TRASH_PLAYER_OBJECTS[driver][cp] = INVALID_STREAMER_ID;
	
	CreatePlayerFlashObject(
								playerid, 
								TRASH_OBJECTS[ route ][trash_object_X][ cp ],
								TRASH_OBJECTS[ route ][trash_object_Y][ cp ],
								TRASH_OBJECTS[ route ][trash_object_Z][ cp ] - 1.5
							);
	
	CreatePlayerFlashObject(
								driver, 
								TRASH_OBJECTS[ route ][trash_object_X][ cp ],
								TRASH_OBJECTS[ route ][trash_object_Y][ cp ],
								TRASH_OBJECTS[ route ][trash_object_Z][ cp ] - 1.5
							);
							
	PlayerPlaySoundEx(playerid, 1190, 0.0, 0.0, 0.0);
	
	TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_CP] ++;
	if(TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_CP] >= TRASH_OBJECTS[ TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_ROUTE] ][trash_route_OBJECTS])
	{
		SendClientMessage(playerid, -1, "{E6F8E0}Sube al camión para volver al vertedero y recibir la paga.");
		SendClientMessage(driver, -1, "{E6F8E0}Espera a que se suba tu compañero y vuelve al vertedero para recibir la paga.");
	}
	else SendClientMessage(playerid, -1, "{E6F8E0}Sube al camión y sigue con la ruta.");

	SetPlayerTrashCheckpoint(driver, PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID]);
	SetPlayerTrashCheckpoint(playerid, PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID]);
	
	Streamer_Update(driver);
	Streamer_Update(playerid);
	return 1;
}

CancelLumberjackWork(playerid)
{
	if(PLAYER_TEMP[playerid][pt_PLAYER_LUMBERJACK_TREE] != -1)
	{
		DestroyDynamicObject(LUMBER_TREES[ PLAYER_TEMP[playerid][pt_PLAYER_LUMBERJACK_TREE] ][lumber_tree_OBJECT_ID]);
		LUMBER_TREES[ PLAYER_TEMP[playerid][pt_PLAYER_LUMBERJACK_TREE] ][lumber_tree_OBJECT_ID] = CreateDynamicObject(LUMBER_TREES[ PLAYER_TEMP[playerid][pt_PLAYER_LUMBERJACK_TREE] ][lumber_tree_MODELID], LUMBER_TREES[ PLAYER_TEMP[playerid][pt_PLAYER_LUMBERJACK_TREE] ][lumber_tree_X], LUMBER_TREES[ PLAYER_TEMP[playerid][pt_PLAYER_LUMBERJACK_TREE] ][lumber_tree_Y], LUMBER_TREES[ PLAYER_TEMP[playerid][pt_PLAYER_LUMBERJACK_TREE] ][lumber_tree_Z], LUMBER_TREES[ PLAYER_TEMP[playerid][pt_PLAYER_LUMBERJACK_TREE] ][lumber_tree_RX], LUMBER_TREES[ PLAYER_TEMP[playerid][pt_PLAYER_LUMBERJACK_TREE] ][lumber_tree_RY], LUMBER_TREES[ PLAYER_TEMP[playerid][pt_PLAYER_LUMBERJACK_TREE] ][lumber_tree_RZ], 0, 0);
		LUMBER_TREES[ PLAYER_TEMP[playerid][pt_PLAYER_LUMBERJACK_TREE] ][lumber_tree_STATE] = LUMBER_TREE_STATE_NORMAL;
		
		new label_str[256];
		format(label_str, sizeof label_str, "{f46530}Árbol (%d)\n\n{FFFFFF}Pulsa {f9d834}~k~~Alt Izq~ {FFFFFF}para talar el árbol.", PLAYER_TEMP[playerid][pt_PLAYER_LUMBERJACK_TREE]);
		UpdateDynamic3DTextLabelText(LUMBER_TREES[ PLAYER_TEMP[playerid][pt_PLAYER_LUMBERJACK_TREE] ][lumber_tree_LABEL], -1, label_str);
	}
	
	if(IsValidDynamicCP(PLAYER_TEMP[playerid][pt_LUMBERJACK_CHECKPOINT]))
	{
		DestroyDynamicCP(PLAYER_TEMP[playerid][pt_LUMBERJACK_CHECKPOINT]);
		PLAYER_TEMP[playerid][pt_LUMBERJACK_CHECKPOINT] = INVALID_STREAMER_ID;
	}
	
	RemovePlayerAttachedObject(playerid, 8);
	RemovePlayerAttachedObject(playerid, 9);
	KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][11]);
	//ClearAnimations(playerid);
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	TogglePlayerControllableEx(playerid, true);
	PLAYER_TEMP[playerid][pt_PLAYER_CARRYING_TREE] = false;
	PLAYER_TEMP[playerid][pt_PLAYER_LUMBERJACK_TREE] = -1;
	SetPlayerToys(playerid);
	return 1;
}

forward LumberjackUp(playerid, tree);
public LumberjackUp(playerid, tree)
{
	if(PLAYER_TEMP[playerid][pt_PLAYER_LUMBERJACK_TREE_PROG] < 100.0)
	{
		PLAYER_TEMP[playerid][pt_PLAYER_LUMBERJACK_TREE_PROG] += frandom(12.0, 8.0, 2);
		if(PLAYER_TEMP[playerid][pt_PLAYER_LUMBERJACK_TREE_PROG] > 100.0) PLAYER_TEMP[playerid][pt_PLAYER_LUMBERJACK_TREE_PROG] = 100.0;
		
		SetPlayerArmedWeapon(playerid, 9);
		ApplyAnimation(playerid, "CHAINSAW", "WEAPON_csaw", 4.1, true, false, false, false, 0);
		
		new label_str[256];
		format(label_str, sizeof label_str, "{f46530}Árbol (%d)\n\n{FFFFFF}Talando... {E6F8E0}(%.1f%%)", tree, PLAYER_TEMP[playerid][pt_PLAYER_LUMBERJACK_TREE_PROG]);
		UpdateDynamic3DTextLabelText(LUMBER_TREES[ tree ][lumber_tree_LABEL], -1, label_str);
		
		KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][11]);
		PLAYER_TEMP[playerid][pt_TIMERS][11] = SetTimerEx("LumberjackUp", 2000, false, "ii", playerid, tree);
		return 1;
	}
	
	GetPlayerFacingAngle(playerid, CHARACTER_INFO[playerid][ch_ANGLE]);
	SetDynamicObjectRot(LUMBER_TREES[ tree ][lumber_tree_OBJECT_ID], LUMBER_TREES[ tree ][lumber_tree_RX], LUMBER_TREES[ tree ][lumber_tree_RY], CHARACTER_INFO[playerid][ch_ANGLE]);	
	MoveDynamicObject(LUMBER_TREES[ tree ][lumber_tree_OBJECT_ID], LUMBER_TREES[ tree ][lumber_tree_X], LUMBER_TREES[ tree ][lumber_tree_Y], LUMBER_TREES[ tree ][lumber_tree_Z] + 0.01, 0.0065, -85.0, 0.0, CHARACTER_INFO[playerid][ch_ANGLE]);
	RemovePlayerAttachedObject(playerid, 9);
	SetPlayerAttachedObject(playerid, 9, 341, 1, -0.172999, -0.165, -0.053999, 0.0, -7.599999, -9.6);
	
	KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][11]);
	PLAYER_TEMP[playerid][pt_TIMERS][11] = SetTimerEx("ContinueTreeAnimation", 1400, false, "iif", playerid, tree, CHARACTER_INFO[playerid][ch_ANGLE]);
	
	ClearAnimations(playerid);
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	TogglePlayerControllableEx(playerid, true);	
	return 1;
}

forward ContinueTreeAnimation(playerid, tree, Float:rotation);
public ContinueTreeAnimation(playerid, tree, Float:rotation)
{
	new Float:pos[3];
	pos[0] = LUMBER_TREES[ tree ][lumber_tree_X];
	pos[1] = LUMBER_TREES[ tree ][lumber_tree_Y];
	pos[2] = LUMBER_TREES[ tree ][lumber_tree_Z];
	
	pos[0] += (1.5 * floatsin(-rotation, degrees));
	pos[1] += (1.5 * floatcos(-rotation, degrees));
	
	CreateFlashObject(pos[0], pos[1], pos[2] - 0.4);
	DestroyDynamicObject(LUMBER_TREES[ tree ][lumber_tree_OBJECT_ID]);
	PlayerPlaySoundEx(playerid, 1190, 0.0, 0.0, 0.0);
	
	LUMBER_TREES[ tree ][lumber_tree_OBJECT_ID] = CreateDynamicObject(841, pos[0], pos[1], pos[2] + 0.2, 0.0, 0.0, rotation, 0, 0);
	
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
	PLAYER_TEMP[playerid][pt_PLAYER_CARRYING_TREE] = true;
	PLAYER_TEMP[playerid][pt_PLAYER_LUMBERJACK_TREE] = -1;
	
	RemovePlayerAttachedObject(playerid, 8);
	SetPlayerAttachedObject(playerid, 8, 19793, 6, 0.077999, 0.043999, -0.170999, -13.799953, 79.70, 0.0);
	
	if(IsValidDynamicCP(PLAYER_TEMP[playerid][pt_LUMBERJACK_CHECKPOINT]))
	{
		DestroyDynamicCP(PLAYER_TEMP[playerid][pt_LUMBERJACK_CHECKPOINT]);
		PLAYER_TEMP[playerid][pt_LUMBERJACK_CHECKPOINT] = INVALID_STREAMER_ID;
	}
	PLAYER_TEMP[playerid][pt_LUMBERJACK_CHECKPOINT] = CreateDynamicCP(-504.353912, -88.591995, 62.086818, 5.0, 0, 0, playerid, 9999999999.0);
	
	new info[1];
	info[0] = CHECKPOINT_TYPE_LUMBERJACK;
	Streamer_SetArrayData(STREAMER_TYPE_CP, PLAYER_TEMP[playerid][pt_LUMBERJACK_CHECKPOINT], E_STREAMER_EXTRA_ID, info);
	
	SendClientMessage(playerid, -1, "{E6F8E0}Ve a llevar la leña al punto marcado para recibir la paga.");
	
	
	LUMBER_TREES[ tree ][lumber_tree_GROW_COUNTER] = 90;
	new label_str[256];
	format(label_str, sizeof label_str, "{f46530}Árbol (%d)\n\n{00FF80}(%s)", tree, TimeConvert(LUMBER_TREES[ tree ][lumber_tree_GROW_COUNTER]));
	UpdateDynamic3DTextLabelText(LUMBER_TREES[ tree ][lumber_tree_LABEL], -1, label_str);
	
	LUMBER_TREES[ tree ][lumber_tree_STATE] = LUMBER_TREE_STATE_CUTTED;
	KillTimer(LUMBER_TREES[ tree ][lumber_tree_GROW_TIMER]);
	LUMBER_TREES[ tree ][lumber_tree_GROW_TIMER] = SetTimerEx("GrowTreeUp", 1000, false, "i", tree);
	
	Streamer_Update(playerid);
	return 1;
}

forward GrowTreeUp(tree);
public GrowTreeUp(tree)
{
	if(LUMBER_TREES[ tree ][lumber_tree_STATE] != LUMBER_TREE_STATE_CUTTED) return 0;
	
	if(LUMBER_TREES[ tree ][lumber_tree_GROW_COUNTER] > 0)
	{
		LUMBER_TREES[ tree ][lumber_tree_GROW_COUNTER] --;
		new label_str[256];
		format(label_str, sizeof label_str, "{f46530}Árbol (%d)\n\n{00FF80}(%s)", tree, TimeConvert(LUMBER_TREES[ tree ][lumber_tree_GROW_COUNTER]));
		UpdateDynamic3DTextLabelText(LUMBER_TREES[ tree ][lumber_tree_LABEL], -1, label_str);
		
		KillTimer(LUMBER_TREES[ tree ][lumber_tree_GROW_TIMER]);
		LUMBER_TREES[ tree ][lumber_tree_GROW_TIMER] = SetTimerEx("GrowTreeUp", 1000, false, "i", tree);
		return 1;
	}
	
	DestroyDynamicObject(LUMBER_TREES[ tree ][lumber_tree_OBJECT_ID]);
	LUMBER_TREES[ tree ][lumber_tree_OBJECT_ID] = CreateDynamicObject(LUMBER_TREES[ tree ][lumber_tree_MODELID], LUMBER_TREES[ tree ][lumber_tree_X], LUMBER_TREES[ tree ][lumber_tree_Y], LUMBER_TREES[ tree ][lumber_tree_Z], LUMBER_TREES[ tree ][lumber_tree_RX], LUMBER_TREES[ tree ][lumber_tree_RY], LUMBER_TREES[ tree ][lumber_tree_RZ], 0, 0);
	LUMBER_TREES[ tree ][lumber_tree_STATE] = LUMBER_TREE_STATE_NORMAL;

	new label_str[256];
	format(label_str, sizeof label_str, "{f46530}Árbol (%d)\n\n{FFFFFF}Pulsa {f9d834}~k~~Alt Izq~ {FFFFFF}para talar el árbol.", tree);
	UpdateDynamic3DTextLabelText(LUMBER_TREES[ tree ][lumber_tree_LABEL], -1, label_str);
	return 1;
}

CreateFlashObject(Float:x, Float:y, Float:z)
{
	new oid = CreateObject(18680, x, y, z, 0.0, 0.0, 0.0);
	SetTimerEx("DestroyFlashObject", 1000, false, "i", oid);
	return 1;
}

forward DestroyFlashObject(objectid);
public DestroyFlashObject(objectid)
{
	return DestroyObject(objectid);
}

ShowPlayerInventory(playerid, pid)
{
	if(!IsPlayerConnected(pid)) return 0;
	if(ACCOUNT_INFO[pid][ac_ID] == 0) return 0;
	
	new caption[48];
	format(caption, sizeof caption, "Inventario de %s", PLAYER_TEMP[pid][pt_RP_NAME]);
	
	new dialog[1800], line_str[128];
	
	format(line_str, sizeof line_str, "{E6F8E0}Dinero {E6F8E0}(%s$)\n", number_format_thousand(CHARACTER_INFO[pid][ch_CASH]));
	strcat(dialog, line_str);
	
	if(PLAYER_PHONE[pid][player_phone_VALID])
	{
		format(line_str, sizeof line_str, "Teléfono {E6F8E0}(%d)\n", PLAYER_PHONE[pid][player_phone_NUMBER]);
		strcat(dialog, line_str);
	}
	
	new toys = CountPlayerToys(pid);
	if(toys > 0)
	{
		format(line_str, sizeof line_str, "Accesorios {E6F8E0}(%d)\n", toys);
		strcat(dialog, line_str);
	}
	
	new pocket_objects = CountPlayerPocketObjects(pid);
	if(pocket_objects > 0)
	{
		format(line_str, sizeof line_str, "Alimentos {E6F8E0}(%d)\n", pocket_objects);
		strcat(dialog, line_str);
	}
	
	if(PLAYER_OBJECT[pid][po_GPS]) strcat(dialog, "GPS\n");
	if(PLAYER_OBJECT[pid][po_MP3]) strcat(dialog, "Reproductor MP3\n");
	if(PLAYER_OBJECT[pid][po_PHONE_RESOLVER]) strcat(dialog, "Guía telefónica\n");
	
	new player_weapons = CountPlayerWeapons(pid);
	if(player_weapons > 0)
	{
		if(PLAYER_WORKS[pid][WORK_POLICE]) format(line_str, sizeof line_str, "{4286f4}Armas {E6F8E0}(%d)\n", player_weapons);
		else format(line_str, sizeof line_str, "{FF3300}Armas {E6F8E0}(%d)\n", player_weapons);
		strcat(dialog, line_str);
	}
	
	if(PLAYER_MISC[pid][MISC_MECHANIC_PIECES] > 0)
	{
		format(line_str, sizeof line_str, "Piezas de mecánico {E6F8E0}(%s)\n", number_format_thousand(PLAYER_MISC[pid][MISC_MECHANIC_PIECES]));
		strcat(dialog, line_str);
	}
	
	if(PLAYER_MISC[pid][MISC_FUEL_DRUM] > 0)
	{
		format(line_str, sizeof line_str, "Bidón de gasolina {E6F8E0}(%d Litros)\n", PLAYER_MISC[pid][MISC_FUEL_DRUM]);
		strcat(dialog, line_str);
	}
	
	if(PLAYER_MISC[pid][MISC_SEED_MEDICINE] > 0)
	{
		format(line_str, sizeof line_str, "{009900}Semillas Poliskap {E6F8E0}(%d)\n", PLAYER_MISC[pid][MISC_SEED_MEDICINE]);
		strcat(dialog, line_str);
	}
	
	if(PLAYER_MISC[pid][MISC_SEED_CANNABIS] > 0)
	{
		format(line_str, sizeof line_str, "{FF3300}Semillas Marihuana {E6F8E0}(%d)\n", PLAYER_MISC[pid][MISC_SEED_CANNABIS]);
		strcat(dialog, line_str);
	}
	
	if(PLAYER_MISC[pid][MISC_SEED_CRACK] > 0)
	{
		format(line_str, sizeof line_str, "{FF3300}Semillas Coca {E6F8E0}(%d)\n", PLAYER_MISC[pid][MISC_SEED_CRACK]);
		strcat(dialog, line_str);
	}
	
	if(PLAYER_MISC[pid][MISC_MEDICINE] > 0)
	{
		format(line_str, sizeof line_str, "{009900}Medicamentos {E6F8E0}(%dg)\n", PLAYER_MISC[pid][MISC_MEDICINE]);
		strcat(dialog, line_str);
	}
	
	if(PLAYER_MISC[pid][MISC_CANNABIS] > 0)
	{
		format(line_str, sizeof line_str, "{FF3300}Marihuana {E6F8E0}(%dg)\n", PLAYER_MISC[pid][MISC_CANNABIS]);
		strcat(dialog, line_str);
	}
	
	if(PLAYER_MISC[pid][MISC_CRACK] > 0)
	{
		format(line_str, sizeof line_str, "{FF3300}Crack {E6F8E0}(%dg)\n", PLAYER_MISC[pid][MISC_CRACK]);
		strcat(dialog, line_str);
	}
	
	ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, caption, dialog, "Cerrar", "");	
	return 1;
}

CountPlayerToys(playerid)
{
	new toys;
	
	for(new i = 0; i != MAX_PLAYER_ATTACHED_OBJECTS; i ++)
	{
		if(PLAYER_TOYS[playerid][i][player_toy_VALID])
		{
			toys ++;
		}
	}
	return toys;
}

CountPlayerPocketObjects(playerid)
{
	new objects;
	
	for(new i = 0; i != MAX_PLAYER_POCKET_OBJECTS; i ++)
	{
		if(PLAYER_POCKET[playerid][i][player_pocket_VALID])
		{
			objects ++;
		}
	}
	return objects;
}

CountPlayerWeapons(playerid)
{
	new weapons;
	
	for(new i = 0; i != 13; i ++)
	{
		if(PLAYER_WEAPONS[playerid][i][player_weapon_VALID])
		{
			weapons ++;
		}
	}
	return weapons;
}

ShowPlayerSkills(playerid, pid)
{
	if(!IsPlayerConnected(pid)) return 0;
	if(ACCOUNT_INFO[pid][ac_ID] == 0) return 0;
	
	new caption[48], line_str[80], dialog[sizeof line_str * (sizeof(work_info) + 5)];
	format(caption, sizeof caption, "Experiencia de %s", PLAYER_TEMP[pid][pt_RP_NAME]);
	
	strcat(dialog, "{90C3D4}CUENTA\n");
	format(line_str, sizeof line_str, "{E6F8E0}Nivel: {d5ed93}%d\n", ACCOUNT_INFO[pid][ac_LEVEL]);
	strcat(dialog, line_str);
	
	new neccessary_rep = ACCOUNT_INFO[pid][ac_LEVEL] * REP_MULTIPLIER;
	format(line_str, sizeof line_str, "{E6F8E0}Reputación: {d5ed93}%d/%d\n", ACCOUNT_INFO[pid][ac_REP], neccessary_rep);
	strcat(dialog, line_str);
	
	
	ACCOUNT_INFO[pid][ac_TIME_PLAYING] += gettime() - PLAYER_TEMP[pid][pt_TIME_PLAYING];
	PLAYER_TEMP[pid][pt_TIME_PLAYING] = gettime();
	
	new Float:hours;
	ConvertTime_SecondsToHoursFloat(ACCOUNT_INFO[pid][ac_TIME_PLAYING], hours);
	format(line_str, sizeof line_str, "{E6F8E0}Horas de juego: {d5ed93}%.1f horas\n", hours);
	strcat(dialog, line_str);
	
	strcat(dialog, "\n{90C3D4}TRABAJOS\n");
	
	for(new i = 1; i != sizeof work_info; i ++)
	{
		if(i == WORK_POLICE)
		{
			if(PLAYER_WORKS[playerid][WORK_POLICE])
			{
				format(line_str, sizeof line_str, "{E6F8E0}%c%s: {d5ed93}%s\n", toupper(work_info[i][work_info_NAME][0]), work_info[i][work_info_NAME][1], POLICE_RANKS[PLAYER_SKILLS[pid][i]]);
				strcat(dialog, line_str);
			}
		}
		else
		{
			format(line_str, sizeof line_str, "{E6F8E0}%c%s: {d5ed93}%s\n", toupper(work_info[i][work_info_NAME][0]), work_info[i][work_info_NAME][1], number_format_thousand(PLAYER_SKILLS[pid][i]));
			strcat(dialog, line_str);
		}
	}
	
	ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, caption, dialog, "Cerrar", "");	
	return 1;
}

stock ConvertTime_SecondsToHoursFloat(sec, &Float:hours)
{
	hours = floatdiv(float(sec), 3600);
   	return 1;
}

CreatePlayerTrashRouteObjects(playerid, route)
{
	for(new i = 0; i != MAX_OBJECTS_PER_ROUTE; i ++)
	{
		TRASH_PLAYER_OBJECTS[playerid][i] = INVALID_STREAMER_ID;
		
		if(TRASH_OBJECTS[route][trash_object_MODELID][i] != 0)
		{
			TRASH_PLAYER_OBJECTS[playerid][i] = CreateDynamicObject(TRASH_OBJECTS[route][trash_object_MODELID][i], TRASH_OBJECTS[route][trash_object_X][i], TRASH_OBJECTS[route][trash_object_Y][i], TRASH_OBJECTS[route][trash_object_Z][i], TRASH_OBJECTS[route][trash_object_RX][i], TRASH_OBJECTS[route][trash_object_RY][i], TRASH_OBJECTS[route][trash_object_RZ][i], 0, 0, playerid);
		}
	}
	return 1;
}

DestroyPlayerTrashRouteObjects(playerid)
{
	for(new i = 0; i != MAX_OBJECTS_PER_ROUTE; i ++)
	{
		if(TRASH_PLAYER_OBJECTS[playerid][i] != INVALID_STREAMER_ID) DestroyDynamicObject(TRASH_PLAYER_OBJECTS[playerid][i]);
		TRASH_PLAYER_OBJECTS[playerid][i] = INVALID_STREAMER_ID;
	}
	return 1;
}

CreatePlayerFlashObject(playerid, Float:x, Float:y, Float:z)
{
	new oid = CreatePlayerObject(playerid, 18680, x, y, z, 0.0, 0.0, 0.0);
	SetTimerEx("DestroyPlayerFlashObject", 1000, false, "ii", playerid, oid);
	return 1;
}

forward DestroyPlayerFlashObject(playerid, objectid);
public DestroyPlayerFlashObject(playerid, objectid)
{
	return DestroyPlayerObject(playerid, objectid);
}

GetVehicleFirstPassenger(vehicleid)
{
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(GetPlayerState(i) == PLAYER_STATE_PASSENGER)
			{
				if(PLAYER_TEMP[i][pt_GAME_STATE] == GAME_STATE_NORMAL)
				{
					if(GetPlayerVehicleID(i) == vehicleid)
					{
						return i;
					}
				}
			}
		}
	}
	return INVALID_PLAYER_ID;
}

UpdatePlantSizeTextdrawPlant(playerid)
{	
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_PLANT_PLANT][2], 260.0 + ( PLAYER_TEMP[playerid][pt_PLANTING_PROGRESS] * 1.2), 0.000000);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_PLANT_PLANT][2]);
	return 1;
}

CancelPlayerPlanting(playerid)
{
	KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][12]);
	PLAYER_TEMP[playerid][pt_PLANTING] = false;
	PLAYER_TEMP[playerid][pt_PLANTING_PROGRESS] = 0.0;
	
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_PLANT_PLANT][0]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_PLANT_PLANT][1]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_PLANT_PLANT][2]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_PLANT_PLANT][3]);
	
	TogglePlayerControllableEx(playerid, true);
	ClearAnimations(playerid);
	return 1;
}

forward PlantingUp(playerid, seeds);
public PlantingUp(playerid, seeds)
{
	if(PLAYER_TEMP[playerid][pt_PLANTING_PROGRESS] < 100.0)
	{
		PLAYER_TEMP[playerid][pt_PLANTING_PROGRESS] += floatdiv(50, seeds);
		if(PLAYER_TEMP[playerid][pt_PLANTING_PROGRESS] > 100.0) PLAYER_TEMP[playerid][pt_PLANTING_PROGRESS] = 100.0;
		
		ApplyAnimation(playerid, "BOMBER", "BOM_Plant_Loop", 4.1, true, false, false, false, 0);
		UpdatePlantSizeTextdrawPlant(playerid);
		KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][12]);
		PLAYER_TEMP[playerid][pt_TIMERS][12] = SetTimerEx("PlantingUp", 1000, false, "id", playerid, seeds);
		return 1;
	}
	
	PLAYER_TEMP[playerid][pt_WORKING_IN] = WORK_NONE;
	PLAYER_TEMP[playerid][pt_PLANTING] = false;
	PLAYER_TEMP[playerid][pt_PLANTING_PROGRESS] = 0.0;
	
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_PLANT_PLANT][0]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_PLANT_PLANT][1]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_PLANT_PLANT][2]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_PLANT_PLANT][3]);
	
	TogglePlayerControllableEx(playerid, true);
	ClearAnimations(playerid);
	
	//objeto planta: 2244
	
	new index = GetAvaiblePlantIndex();
	if(index == -1)
	{
			
		switch(seed_info[ PLAYER_TEMP[playerid][pt_PLANTING_PLANT_SELECTED] ][seed_info_PLANT_TYPE])
		{
			case PLANT_TYPE_MEDICINE: PLAYER_MISC[playerid][MISC_SEED_MEDICINE] += plant_info[ PLAYER_TEMP[playerid][pt_PLANTING_PLANT_SELECTED] ][plant_info_SEEDS];
			case PLANT_TYPE_CANNABIS: PLAYER_MISC[playerid][MISC_SEED_CANNABIS] += plant_info[ PLAYER_TEMP[playerid][pt_PLANTING_PLANT_SELECTED] ][plant_info_SEEDS];
			case PLANT_TYPE_CRACK: PLAYER_MISC[playerid][MISC_SEED_CRACK] += plant_info[ PLAYER_TEMP[playerid][pt_PLANTING_PLANT_SELECTED] ][plant_info_SEEDS];
		}
				
		SendClientMessage(playerid, -1, "{00FF80}No queda espacio para más plantas, te hemos devuelto las semillas. Prueba más tarde.");
		return 1;
	}
	
	GetPlayerPos(playerid, CHARACTER_INFO[playerid][ch_POS][0], CHARACTER_INFO[playerid][ch_POS][1], CHARACTER_INFO[playerid][ch_POS][2]);
	GetPlayerFacingAngle(playerid, CHARACTER_INFO[playerid][ch_ANGLE]);
	CHARACTER_INFO[playerid][ch_POS][0] += (1.0 * floatsin(-CHARACTER_INFO[playerid][ch_ANGLE], degrees));
	CHARACTER_INFO[playerid][ch_POS][1] += (1.0 * floatcos(-CHARACTER_INFO[playerid][ch_ANGLE], degrees));
	CHARACTER_INFO[playerid][ch_POS][2] -= 0.75;
	
	PLANTS[index][plant_VALID] = true;
	PLANTS[index][plant_GROWING] = true;
	PLANTS[index][plant_INVISIBLE] = true;
	PLANTS[index][plant_GROWING_PROGRESS] = frandom(10.0, 8.0, 2);
	PLANTS[index][plant_TYPE] = PLAYER_TEMP[playerid][pt_PLANTING_PLANT_SELECTED];
	PLANTS[index][plant_PLANTED_BY_ACCOUNT_ID] = ACCOUNT_INFO[playerid][ac_ID];
	format(PLANTS[index][plant_PLANTED_BY_NAME], 24, "%s", PLAYER_TEMP[playerid][pt_RP_NAME]);
	PLANTS[index][plant_OBJECT_ID] = CreateDynamicObject(2244, CHARACTER_INFO[playerid][ch_POS][0], CHARACTER_INFO[playerid][ch_POS][1], CHARACTER_INFO[playerid][ch_POS][2], 0.0, 0.0, CHARACTER_INFO[playerid][ch_ANGLE], 0, 0);
	SetDynamicObjectMaterial(PLANTS[index][plant_OBJECT_ID], 2, 2244, "plants_tabletop", "CJ_PLANT", 0x00FFFFFF);
	
	new info[2];
	info[0] = OBJECT_TYPE_PLANT;
	info[1] = index;
	Streamer_SetArrayData(STREAMER_TYPE_OBJECT, PLANTS[index][plant_OBJECT_ID], E_STREAMER_EXTRA_ID, info);
	
	new label_str[256];
	if(seed_info[ PLANTS[index][plant_TYPE] ][seed_info_TYPE] == TYPE_LEGAL) format(label_str, sizeof label_str, "{009900}%s\n\n{E6F8E0}Agricultor: %s\n{E6F8E0}Creciendo (%.1f%%)", plant_info[ PLANTS[index][plant_TYPE] ][plant_info_NAME], PLANTS[index][plant_PLANTED_BY_NAME], PLANTS[index][plant_GROWING_PROGRESS]);
	else format(label_str, sizeof label_str, "{FF3300}%s\n\n{E6F8E0}Agricultor: %s\n{E6F8E0}Creciendo (%.1f%%)", plant_info[ PLANTS[index][plant_TYPE] ][plant_info_NAME], PLANTS[index][plant_PLANTED_BY_NAME], PLANTS[index][plant_GROWING_PROGRESS]);
	PLANTS[index][plant_LABEL_ID] = CreateDynamic3DTextLabel(label_str, 0xFFFFFFFF, CHARACTER_INFO[playerid][ch_POS][0], CHARACTER_INFO[playerid][ch_POS][1], CHARACTER_INFO[playerid][ch_POS][2] + 0.25, 10.0, .testlos = false, .interiorid = 0, .worldid = 0);
	
	KillTimer(PLANTS[index][plant_TIMER]);
	PLANTS[index][plant_TIMER] = SetTimerEx("GrowPlantUp", 5000, false, "d", index);
	
	PLAYER_SKILLS[playerid][WORK_FARMER] ++;
	SendClientMessage(playerid, -1, "{E6F8E0}Ahora espera a que la planta crezca, si pasan más de 5 minutos después de que la planta haya crecido se destruirá.");
	Streamer_Update(playerid);
	return 1;
}

GetAvaiblePlantIndex()
{
	for(new i = 0; i != sizeof PLANTS; i ++)
	{
		if(!PLANTS[i][plant_VALID]) return i;
	}
	return -1;
}

forward GrowPlantUp(plant);
public GrowPlantUp(plant)
{
	if(!PLANTS[plant][plant_VALID] || !PLANTS[plant][plant_GROWING]) return 0;
	
	if(PLANTS[plant][plant_GROWING_PROGRESS] < 100.0)
	{
		PLANTS[plant][plant_GROWING_PROGRESS] += floatdiv(25, plant_info[ PLANTS[plant][plant_TYPE] ][plant_info_SEEDS]);
		if(PLANTS[plant][plant_GROWING_PROGRESS] > 100.0) PLANTS[plant][plant_GROWING_PROGRESS] = 100.0;
		
		if(PLANTS[plant][plant_INVISIBLE] && PLANTS[plant][plant_GROWING_PROGRESS] > 50.0)
		{
			PLANTS[plant][plant_INVISIBLE] = false;
			SetDynamicObjectMaterial(PLANTS[plant][plant_OBJECT_ID], 2, 2244, "plants_tabletop", "CJ_PLANT", 0xFFFFFFFF);
		}
		
		new label_str[256];
		if(seed_info[ PLANTS[plant][plant_TYPE] ][seed_info_TYPE] == TYPE_LEGAL) format(label_str, sizeof label_str, "{009900}%s\n\n{E6F8E0}Agricultor: %s\n{E6F8E0}Creciendo (%.1f%%)", plant_info[ PLANTS[plant][plant_TYPE] ][plant_info_NAME], PLANTS[plant][plant_PLANTED_BY_NAME], PLANTS[plant][plant_GROWING_PROGRESS]);
		else format(label_str, sizeof label_str, "{FF3300}%s\n\n{E6F8E0}Agricultor: %s\n{E6F8E0}Creciendo (%.1f%%)", plant_info[ PLANTS[plant][plant_TYPE] ][plant_info_NAME], PLANTS[plant][plant_PLANTED_BY_NAME], PLANTS[plant][plant_GROWING_PROGRESS]);
		UpdateDynamic3DTextLabelText(PLANTS[plant][plant_LABEL_ID], -1, label_str);
		
		KillTimer(PLANTS[plant][plant_TIMER]);
		PLANTS[plant][plant_TIMER] = SetTimerEx("GrowPlantUp", 5000, false, "d", plant);
		return 1;
	}
	
	SetDynamicObjectMaterial(PLANTS[plant][plant_OBJECT_ID], 2, 2244, "plants_tabletop", "CJ_PLANT", 0xFFff0000);
	
	PLANTS[plant][plant_GROWING] = false;
	PLANTS[plant][plant_EXPIRE_TIME] = 300;
		
	new label_str[256];
	if(seed_info[ PLANTS[plant][plant_TYPE] ][seed_info_TYPE] == TYPE_LEGAL) format(label_str, sizeof label_str, "{009900}%s\n\n{E6F8E0}Agricultor: %s\n{E6F8E0}Usa {daef1c}/recoger {E6F8E0}para recogerla\n\n{E6F8E0}Expira en %sm", plant_info[ PLANTS[plant][plant_TYPE] ][plant_info_NAME], PLANTS[plant][plant_PLANTED_BY_NAME], TimeConvert(PLANTS[plant][plant_EXPIRE_TIME]));
	else format(label_str, sizeof label_str, "{FF3300}%s\n\n{E6F8E0}Agricultor: %s\n{E6F8E0}Usa {daef1c}/recoger {E6F8E0}para recogerla\n\n{E6F8E0}Expira en %sm", plant_info[ PLANTS[plant][plant_TYPE] ][plant_info_NAME], PLANTS[plant][plant_PLANTED_BY_NAME], TimeConvert(PLANTS[plant][plant_EXPIRE_TIME]));
	UpdateDynamic3DTextLabelText(PLANTS[plant][plant_LABEL_ID], -1, label_str);
	
	KillTimer(PLANTS[plant][plant_TIMER]);
	PLANTS[plant][plant_TIMER] = SetTimerEx("ExpirePlantTime", 1000, false, "d", plant);
	return 1;
}

forward ExpirePlantTime(plant);
public ExpirePlantTime(plant)
{
	if(!PLANTS[plant][plant_VALID]) return 0;
	
	if(PLANTS[plant][plant_EXPIRE_TIME] > 0)
	{
		PLANTS[plant][plant_EXPIRE_TIME] --;
		
		new label_str[256];
		if(seed_info[ PLANTS[plant][plant_TYPE] ][seed_info_TYPE] == TYPE_LEGAL) format(label_str, sizeof label_str, "{009900}%s\n\n{E6F8E0}Agricultor: %s\n{E6F8E0}Usa {daef1c}/recoger {E6F8E0}para recogerla\n\n{E6F8E0}Expira en %sm", plant_info[ PLANTS[plant][plant_TYPE] ][plant_info_NAME], PLANTS[plant][plant_PLANTED_BY_NAME], TimeConvert(PLANTS[plant][plant_EXPIRE_TIME]));
		else format(label_str, sizeof label_str, "{FF3300}%s\n\n{E6F8E0}Agricultor: %s\n{E6F8E0}Usa {daef1c}/recoger {E6F8E0}para recogerla\n\n{E6F8E0}Expira en %sm", plant_info[ PLANTS[plant][plant_TYPE] ][plant_info_NAME], PLANTS[plant][plant_PLANTED_BY_NAME], TimeConvert(PLANTS[plant][plant_EXPIRE_TIME]));
		UpdateDynamic3DTextLabelText(PLANTS[plant][plant_LABEL_ID], -1, label_str);
		
		KillTimer(PLANTS[plant][plant_TIMER]);
		PLANTS[plant][plant_TIMER] = SetTimerEx("ExpirePlantTime", 1000, false, "d", plant);
		return 1;
	}
	
	new Float:pos[3];
	GetDynamicObjectPos(PLANTS[plant][plant_OBJECT_ID], pos[0], pos[1], pos[2]);
	CreateFlashObject(pos[0], pos[1], pos[2] - 1.3);
	
	DestroyDynamicObject(PLANTS[plant][plant_OBJECT_ID]);
	DestroyDynamic3DTextLabel(PLANTS[plant][plant_LABEL_ID]);
	
	new tmp_PLANTS[PLANTS_ENUM]; PLANTS[plant] = tmp_PLANTS;
	return 1;
}

CMD:recoger(playerid, params[])
{
	if(!IsPlayerInDynamicArea(playerid, Farmer_Area)) return ShowPlayerMessage(playerid, "No estás en el lugar adecuado.", 3);
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendClientMessage(playerid, -1, "{00FF80}No estás depie.");
	
	for(new i = 0; i != MAX_PLANTS; i ++)
	{
		if(!PLANTS[i][plant_VALID] || PLANTS[i][plant_GROWING]) continue;
		
		new Float:pos[3];
		GetDynamicObjectPos(PLANTS[i][plant_OBJECT_ID], pos[0], pos[1], pos[2]);
		if(IsPlayerInRangeOfPoint(playerid, 1.5, pos[0], pos[1], pos[2]))
		{
			if(PLANTS[i][plant_PLANTED_BY_ACCOUNT_ID] != ACCOUNT_INFO[playerid][ac_ID]) return SendClientMessage(playerid, 0xA9F5A9AA, "Esta planta no es tuya.");
			
			KillTimer(PLANTS[i][plant_TIMER]);
			switch(seed_info[ PLANTS[i][plant_TYPE] ][seed_info_PLANT_TYPE])
			{
				case PLANT_TYPE_MEDICINE:
				{
					PLAYER_MISC[playerid][MISC_MEDICINE] += 2;
					SendClientMessage(playerid, -1, "{E6F8E0}Has recogido la planta y has obtenido 2 gramos de medicamento.");
				}
				case PLANT_TYPE_CANNABIS:
				{
					PLAYER_MISC[playerid][MISC_CANNABIS] += 6;
					SendClientMessage(playerid, -1, "{E6F8E0}Has recogido la planta y has obtenido 6 gramos de marihuana.");
				}
				case PLANT_TYPE_CRACK:
				{
					PLAYER_MISC[playerid][MISC_CRACK] += 4;
					SendClientMessage(playerid, -1, "{E6F8E0}Has recogido la planta y has obtenido 4 gramos de crack.");
				}
			}
			
			DestroyDynamicObject(PLANTS[i][plant_OBJECT_ID]);
			DestroyDynamic3DTextLabel(PLANTS[i][plant_LABEL_ID]);
			ApplyAnimation(playerid, "CARRY", "putdwn05", 4.1, 0, 1, 1, 0, 0, 1);
			
			new tmp_PLANTS[PLANTS_ENUM]; PLANTS[i] = tmp_PLANTS;
			return 1;
		}
	}
	
	ShowPlayerMessage(playerid, "No estás en el lugar adecuado.", 3);
	return 1;
}
	
public OnPlayerShootDynamicObject(playerid, weaponid, objectid, Float:x, Float:y, Float:z)
{
	if(IsPlayerInDynamicArea(playerid, Farmer_Area))
	{
		new info[2];
		Streamer_GetArrayData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, info);
		
		if(info[0] == OBJECT_TYPE_PLANT)
		{
			KillTimer(PLANTS[info[1]][plant_TIMER]);
			
			new Float:pos[3];
			GetDynamicObjectPos(PLANTS[info[1]][plant_OBJECT_ID], pos[0], pos[1], pos[2]);
			CreateFlashObject(pos[0], pos[1], pos[2] - 1.3);
			
			DestroyDynamicObject(PLANTS[info[1]][plant_OBJECT_ID]);
			DestroyDynamic3DTextLabel(PLANTS[info[1]][plant_LABEL_ID]);
			
			new tmp_PLANTS[PLANTS_ENUM]; PLANTS[info[1]] = tmp_PLANTS;
		}
	}
	return 1;
}

ShowPlayerGpsMap(playerid)
{
	PLAYER_TEMP[playerid][pt_GPS_MAP] = true;
	TextDrawShowForPlayer(playerid, Textdraws[textdraw_GPS_MAP][0]);
	TextDrawShowForPlayer(playerid, Textdraws[textdraw_GPS_MAP][1]);
	TextDrawShowForPlayer(playerid, Textdraws[textdraw_GPS_MAP][2]);
	
	UpdatePlayer_GPS_Map(playerid);
	
	KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][13]);
	PLAYER_TEMP[playerid][pt_TIMERS][13] = SetTimerEx("UpdatePlayer_GPS_Map", 1000, true, "i", playerid);
	return 1;
}

HidePlayerGpsMap(playerid)
{
	KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][13]);
	PLAYER_TEMP[playerid][pt_GPS_MAP] = false;
	TextDrawHideForPlayer(playerid, Textdraws[textdraw_GPS_MAP][0]);
	TextDrawHideForPlayer(playerid, Textdraws[textdraw_GPS_MAP][1]);
	TextDrawHideForPlayer(playerid, Textdraws[textdraw_GPS_MAP][2]);
	
	for(new i = 0; i != MAX_PLAYER_MAP_GPS_POINTS; i ++)
	{
		if(PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][i] != PlayerText:INVALID_TEXT_DRAW)
		{
			PlayerTextDrawDestroy(playerid, PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][i]); 
			PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][i] = PlayerText:INVALID_TEXT_DRAW;
		}
	}
	return 1;
}

forward UpdatePlayer_GPS_Map(playerid);
public UpdatePlayer_GPS_Map(playerid)
{
	/*
		0 - playerpos
		1 - cp gps
		2 - cp works
		3 > cp works
		
	*/
	if(!PLAYER_TEMP[playerid][pt_GPS_MAP]) return KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][13]);
	
	new Float:pos[3];
	
	switch(CHARACTER_INFO[playerid][ch_STATE])
	{
		case ROLEPLAY_STATE_INTERIOR:
		{
			pos[0] = ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_EXT_X];
			pos[1] = ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_EXT_Y];
		}
		case ROLEPLAY_STATE_OWN_PROPERTY, ROLEPLAY_STATE_GUEST_PROPERTY:
		{
			pos[0] = PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PROPERTY_INDEX] ][property_EXT_X];
			pos[1] = PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PROPERTY_INDEX] ][property_EXT_Y];
		}
		default: GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
	}
	SetPlayerPoint_GPS_Map(0, playerid, "hud:radar_waypoint", -1, 5.0, 5.0, pos[0], pos[1]);
	
	if(IsValidDynamicCP(PLAYER_TEMP[playerid][pt_GPS_CHECKPOINT]))
	{
		new Float:gps_cp_pos[2]; 
		Streamer_GetFloatData(STREAMER_TYPE_CP, PLAYER_TEMP[playerid][pt_GPS_CHECKPOINT], E_STREAMER_X, gps_cp_pos[0]);
		Streamer_GetFloatData(STREAMER_TYPE_CP, PLAYER_TEMP[playerid][pt_GPS_CHECKPOINT], E_STREAMER_Y, gps_cp_pos[1]);
		SetPlayerPoint_GPS_Map(1, playerid, "LD_SPAC:white", 0xaa0000ff, 3.0, 3.0, gps_cp_pos[0], gps_cp_pos[1]);
	}
	else 
	{
		if(PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][1] != PlayerText:INVALID_TEXT_DRAW)
		{
			PlayerTextDrawDestroy(playerid, PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][1]); 
			PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][1] = PlayerText:INVALID_TEXT_DRAW;
		}
	}
	
	switch(PLAYER_TEMP[playerid][pt_WORKING_IN])
	{
		case WORK_NONE:
		{
			if(PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][2] != PlayerText:INVALID_TEXT_DRAW)
			{
				PlayerTextDrawDestroy(playerid, PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][2]); 
				PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][2] = PlayerText:INVALID_TEXT_DRAW;
			}
		}
		case WORK_TRUCK:
		{
			if(IsValidDynamicCP(PLAYER_TEMP[playerid][pt_TRUCK_CHECKPOINT]))
			{
				new Float:gps_cp_pos[2]; 
				Streamer_GetFloatData(STREAMER_TYPE_CP, PLAYER_TEMP[playerid][pt_TRUCK_CHECKPOINT], E_STREAMER_X, gps_cp_pos[0]);
				Streamer_GetFloatData(STREAMER_TYPE_CP, PLAYER_TEMP[playerid][pt_TRUCK_CHECKPOINT], E_STREAMER_Y, gps_cp_pos[1]);
				SetPlayerPoint_GPS_Map(2, playerid, "LD_SPAC:white", 0xaa0000ff, 3.0, 3.0, gps_cp_pos[0], gps_cp_pos[1]);
			}
			else 
			{
				if(PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][2] != PlayerText:INVALID_TEXT_DRAW)
				{
					PlayerTextDrawDestroy(playerid, PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][2]); 
					PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][2] = PlayerText:INVALID_TEXT_DRAW;
				}
			}
		}
		case WORK_HARVESTER:
		{
			if(IsValidDynamicRaceCP(PLAYER_TEMP[playerid][pt_HARVERT_CHECKPOINT]))
			{
				new Float:gps_cp_pos[2]; 
				Streamer_GetFloatData(STREAMER_TYPE_RACE_CP, PLAYER_TEMP[playerid][pt_HARVERT_CHECKPOINT], E_STREAMER_X, gps_cp_pos[0]);
				Streamer_GetFloatData(STREAMER_TYPE_RACE_CP, PLAYER_TEMP[playerid][pt_HARVERT_CHECKPOINT], E_STREAMER_Y, gps_cp_pos[1]);
				SetPlayerPoint_GPS_Map(2, playerid, "LD_SPAC:white", 0xaa0000ff, 3.0, 3.0, gps_cp_pos[0], gps_cp_pos[1]);
			}
			else 
			{
				if(PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][2] != PlayerText:INVALID_TEXT_DRAW)
				{
					PlayerTextDrawDestroy(playerid, PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][2]); 
					PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][2] = PlayerText:INVALID_TEXT_DRAW;
				}
			}
		}
		case WORK_TRASH:
		{
			if(IsValidDynamicCP(PLAYER_TEMP[playerid][pt_TRASH_CHECKPOINT]))
			{
				new Float:gps_cp_pos[2]; 
				Streamer_GetFloatData(STREAMER_TYPE_CP, PLAYER_TEMP[playerid][pt_TRASH_CHECKPOINT], E_STREAMER_X, gps_cp_pos[0]);
				Streamer_GetFloatData(STREAMER_TYPE_CP, PLAYER_TEMP[playerid][pt_TRASH_CHECKPOINT], E_STREAMER_Y, gps_cp_pos[1]);
				SetPlayerPoint_GPS_Map(2, playerid, "LD_SPAC:white", 0xaa0000ff, 3.0, 3.0, gps_cp_pos[0], gps_cp_pos[1]);
			}
			else 
			{
				if(PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][2] != PlayerText:INVALID_TEXT_DRAW)
				{
					PlayerTextDrawDestroy(playerid, PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][2]); 
					PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][2] = PlayerText:INVALID_TEXT_DRAW;
				}
			}
		}
		case WORK_LUMBERJACK:
		{
			if(IsValidDynamicCP(PLAYER_TEMP[playerid][pt_LUMBERJACK_CHECKPOINT]))
			{
				new Float:gps_cp_pos[2]; 
				Streamer_GetFloatData(STREAMER_TYPE_CP, PLAYER_TEMP[playerid][pt_LUMBERJACK_CHECKPOINT], E_STREAMER_X, gps_cp_pos[0]);
				Streamer_GetFloatData(STREAMER_TYPE_CP, PLAYER_TEMP[playerid][pt_LUMBERJACK_CHECKPOINT], E_STREAMER_Y, gps_cp_pos[1]);
				SetPlayerPoint_GPS_Map(2, playerid, "LD_SPAC:white", 0xaa0000ff, 3.0, 3.0, gps_cp_pos[0], gps_cp_pos[1]);
			}
			else 
			{
				if(PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][2] != PlayerText:INVALID_TEXT_DRAW)
				{
					PlayerTextDrawDestroy(playerid, PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][2]); 
					PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][2] = PlayerText:INVALID_TEXT_DRAW;
				}
			}
		}
		case WORK_PIZZA:
		{
			if(IsValidDynamicCP(PLAYER_TEMP[playerid][pt_PIZZA_CHECKPOINT]))
			{
				new Float:gps_cp_pos[2]; 
				Streamer_GetFloatData(STREAMER_TYPE_CP, PLAYER_TEMP[playerid][pt_PIZZA_CHECKPOINT], E_STREAMER_X, gps_cp_pos[0]);
				Streamer_GetFloatData(STREAMER_TYPE_CP, PLAYER_TEMP[playerid][pt_PIZZA_CHECKPOINT], E_STREAMER_Y, gps_cp_pos[1]);
				SetPlayerPoint_GPS_Map(2, playerid, "LD_SPAC:white", 0xaa0000ff, 3.0, 3.0, gps_cp_pos[0], gps_cp_pos[1]);
			}
			else 
			{
				if(PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][2] != PlayerText:INVALID_TEXT_DRAW)
				{
					PlayerTextDrawDestroy(playerid, PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][2]); 
					PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][2] = PlayerText:INVALID_TEXT_DRAW;
				}
			}
		}
	}
	
	new cp_counts = 3;
	for(new d = cp_counts; d != MAX_PLAYER_MAP_GPS_POINTS; d ++)
	{
		if(PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][d] != PlayerText:INVALID_TEXT_DRAW)
		{
			PlayerTextDrawDestroy(playerid, PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][d]); 
			PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][d] = PlayerText:INVALID_TEXT_DRAW;
		}
	}
	
	if(cp_counts >= MAX_PLAYER_MAP_GPS_POINTS) return 1;
	switch(PLAYER_TEMP[playerid][pt_WORKING_IN])
	{
		case WORK_TAXI:
		{
			for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
			{
				if(IsPlayerConnected(i))
				{
					if(PLAYER_TEMP[i][pt_GAME_STATE] == GAME_STATE_NORMAL)
					{
						if(PLAYER_TEMP[i][pt_WANT_TAXI])
						{
							if(cp_counts >= MAX_PLAYER_MAP_GPS_POINTS) break;
							
							new Float:player_pos[3];
							switch(CHARACTER_INFO[i][ch_STATE])
							{
								case ROLEPLAY_STATE_INTERIOR:
								{
									player_pos[0] = ENTER_EXIT[ PLAYER_TEMP[i][pt_INTERIOR_INDEX] ][ee_EXT_X];
									player_pos[1] = ENTER_EXIT[ PLAYER_TEMP[i][pt_INTERIOR_INDEX] ][ee_EXT_Y];
								}
								case ROLEPLAY_STATE_OWN_PROPERTY, ROLEPLAY_STATE_GUEST_PROPERTY:
								{
									player_pos[0] = PROPERTY_INFO[ PLAYER_TEMP[i][pt_PROPERTY_INDEX] ][property_EXT_X];
									player_pos[1] = PROPERTY_INFO[ PLAYER_TEMP[i][pt_PROPERTY_INDEX] ][property_EXT_Y];
								}
								default: GetPlayerPos(i, player_pos[0], player_pos[1], player_pos[2]);
							}
							SetPlayerPoint_GPS_Map(cp_counts, playerid, "LD_SPAC:white", 0xf2f224FF, 3.0, 3.0, player_pos[0], player_pos[1]);
							cp_counts ++;
						}
					}
				}
			}
		}
		case WORK_MECHANIC:
		{
			for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
			{
				if(IsPlayerConnected(i))
				{
					if(PLAYER_TEMP[i][pt_GAME_STATE] == GAME_STATE_NORMAL)
					{
						if(PLAYER_TEMP[i][pt_WANT_MECHANIC])
						{
							if(cp_counts >= MAX_PLAYER_MAP_GPS_POINTS) break;
								
							new Float:player_pos[3];
							switch(CHARACTER_INFO[i][ch_STATE])
							{
								case ROLEPLAY_STATE_INTERIOR:
								{
									player_pos[0] = ENTER_EXIT[ PLAYER_TEMP[i][pt_INTERIOR_INDEX] ][ee_EXT_X];
									player_pos[1] = ENTER_EXIT[ PLAYER_TEMP[i][pt_INTERIOR_INDEX] ][ee_EXT_Y];
								}
								case ROLEPLAY_STATE_OWN_PROPERTY, ROLEPLAY_STATE_GUEST_PROPERTY:
								{
									player_pos[0] = PROPERTY_INFO[ PLAYER_TEMP[i][pt_PROPERTY_INDEX] ][property_EXT_X];
									player_pos[1] = PROPERTY_INFO[ PLAYER_TEMP[i][pt_PROPERTY_INDEX] ][property_EXT_Y];
								}
								default: GetPlayerPos(i, player_pos[0], player_pos[1], player_pos[2]);
							}
							SetPlayerPoint_GPS_Map(cp_counts, playerid, "LD_SPAC:white", 0xf4c242FF, 3.0, 3.0, player_pos[0], player_pos[1]);
							cp_counts ++;
						}
					}
				}
			}
		}
		case WORK_MEDIC:
		{
			for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
			{
				if(IsPlayerConnected(i))
				{
					if(PLAYER_TEMP[i][pt_GAME_STATE] == GAME_STATE_NORMAL)
					{
						if(CHARACTER_INFO[i][ch_STATE] == ROLEPLAY_STATE_CRACK)
						{
							if(cp_counts >= MAX_PLAYER_MAP_GPS_POINTS) break;
								
							new Float:player_pos[3];
							GetPlayerPos(i, player_pos[0], player_pos[1], player_pos[2]);
							SetPlayerPoint_GPS_Map(cp_counts, playerid, "LD_SPAC:white", 0x4aba00FF, 3.0, 3.0, player_pos[0], player_pos[1]);
							cp_counts ++;
						}
					}
				}
			}
		}
	}
	return 1;
}

SetPlayerPoint_GPS_Map(index, playerid, icon[], color, Float:icon_size_X, Float:icon_size_Y, Float:x, Float:y)
{
	new Float:td_X, Float:td_Y;
	
	if(x > 3000.0) x = 3000.0;
	else if(x < -3000.0) x = -3000.0;
	
	if(y > 3000.0) y = 3000.0;
	else if(y < -3000.0) y = -3000.0;
	
	new 
		Float:converted_MAP_SIZE_X = floatdiv(map_td_SIZE_X, 2),
		Float:converted_MAP_SIZE_Y = floatdiv(map_td_SIZE_Y, 2),
		Float:converted_ICON_SIZE_X = floatdiv(icon_size_X, 2),
		Float:converted_ICON_SIZE_Y = floatdiv(icon_size_Y, 2);
		
	td_X = map_td_X + floatmul(floatdiv(converted_MAP_SIZE_X, 3000), x) + converted_MAP_SIZE_X - converted_ICON_SIZE_X;
	td_Y = map_td_Y + floatmul(floatdiv(-converted_MAP_SIZE_Y, 3000), y) + converted_MAP_SIZE_Y- converted_ICON_SIZE_Y;
	
	if(PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][index] != PlayerText:INVALID_TEXT_DRAW)
	{
		PlayerTextDrawDestroy(playerid, PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][index]);
		PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][index] = PlayerText:INVALID_TEXT_DRAW;
	}

	PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][index] = CreatePlayerTextDraw(playerid, td_X, td_Y, icon);
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][index], 0.160333, 1.280592);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][index], icon_size_X, icon_size_Y);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][index], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][index], color);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][index], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][index], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][index], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][index], 4);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][index], 0);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][index], 0);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][index]);
	return 1;
}


stock GetIconTextdraw(iconid)
{
	new td_icon[24];
	
	switch(iconid)
	{
		case 2: td_icon = "hud:radar_centre";
		case 3: td_icon = "hud:arrow";
		case 4: td_icon = "hud:radar_north";
		case 5: td_icon = "hud:radar_airyard";
		case 6: td_icon = "hud:radar_ammugun";
		case 7: td_icon = "hud:radar_barbers";
		case 8: td_icon = "hud:radar_bigsmoke";
		case 9: td_icon = "hud:radar_boatyard";
		case 10: td_icon = "hud:radar_burgershot";
		case 11: td_icon = "hud:radar_bulldozer";
		case 12: td_icon = "hud:radar_catalinapink";
		case 13: td_icon = "hud:radar_cesarviapando";
		case 14: td_icon = "hud:radar_chicken";
		case 15: td_icon = "hud:radar_cj";
		case 16: td_icon = "hud:radar_crash1";
		case 17: td_icon = "hud:radar_diner";
		case 18: td_icon = "hud:radar_emmetgun";
		case 19: td_icon = "hud:radar_enemyattack";
		case 20: td_icon = "hud:radar_fire";
		case 21: td_icon = "hud:radar_girlfriend";
		case 22: td_icon = "hud:radar_hostpital";
		case 23: td_icon = "hud:radar_locosyndicate";
		case 24: td_icon = "hud:radar_maddog";
		case 25: td_icon = "hud:radar_mafiacasino";
		case 26: td_icon = "hud:radar_mcstrap";
		case 27: td_icon = "hud:radar_modgarage";
		case 28: td_icon = "hud:radar_ogloc";
		case 29: td_icon = "hud:radar_pizza";
		case 30: td_icon = "hud:radar_police";
		case 31: td_icon = "hud:radar_propertyg";
		case 32: td_icon = "hud:radar_propertyr";
		case 33: td_icon = "hud:radar_race";
		case 34: td_icon = "hud:radar_ryder";
		case 35: td_icon = "hud:radar_savegame";
		case 36: td_icon = "hud:radar_school";
		case 37: td_icon = "hud:radar_qmark";
		case 38: td_icon = "hud:radar_sweet";
		case 39: td_icon = "hud:radar_tattoo";
		case 40: td_icon = "hud:radar_thetruth";
		case 41: td_icon = "hud:radar_waypoint";
		case 42: td_icon = "hud:radar_toreno";
		case 43: td_icon = "hud:radar_triads";
		case 44: td_icon = "hud:radar_triadscasino";
		case 45: td_icon = "hud:radar_tshirt";
		case 46: td_icon = "hud:radar_woozie";
		case 47: td_icon = "hud:radar_zero";
		case 48: td_icon = "hud:radar_datedisco";
		case 49: td_icon = "hud:radar_datedrink";
		case 50: td_icon = "hud:radar_datefood";
		case 51: td_icon = "hud:radar_truck";
		case 52: td_icon = "hud:radar_cash";
		case 53: td_icon = "hud:radar_flag";
		case 54: td_icon = "hud:radar_gym";
		case 55: td_icon = "hud:radar_impound";
		case 56: td_icon = "hud:radar_light";
		case 57: td_icon = "hud:radar_runway";
		case 58: td_icon = "hud:radar_gangb";
		case 59: td_icon = "hud:radar_gangp";
		case 60: td_icon = "hud:radar_gangy";
		case 61: td_icon = "hud:radar_gangn";
		case 62: td_icon = "hud:radar_gangg";
		case 63: td_icon = "hud:radar_spray";
	}
	
	return td_icon;
}

RegisterNewPlayerWeapon(playerid, weapon_slot)
{
	new DBResult:Result, DB_Query[380];
	format(DB_Query, sizeof DB_Query,
	"\
		INSERT INTO `PLAYER_WEAPONS` (`ID_USER`, `WEAPON_ID`, `AMMO`) VALUES ('%d', '%d', '%d');\
		SELECT MAX(`ID_WEAPON`) FROM `PLAYER_WEAPONS`;\
	",
		ACCOUNT_INFO[playerid][ac_ID], PLAYER_WEAPONS[playerid][weapon_slot][player_weapon_ID], PLAYER_WEAPONS[playerid][weapon_slot][player_weapon_AMMO]
	);
	Result = db_query(Database, DB_Query);

	if(db_num_rows(Result)) PLAYER_WEAPONS[playerid][weapon_slot][player_weapon_DB_ID] = db_get_field_int(Result, 0);
	db_free_result(Result);
	return 1;
}

GivePlayerWeaponEx(playerid, weapon_id, ammo)
{
	if(PLAYER_WEAPONS[playerid][ WEAPON_INFO[weapon_id][weapon_info_SLOT] ][player_weapon_ID] == weapon_id) PLAYER_WEAPONS[playerid][ WEAPON_INFO[weapon_id][weapon_info_SLOT] ][player_weapon_AMMO] += ammo;
	else PLAYER_WEAPONS[playerid][ WEAPON_INFO[weapon_id][weapon_info_SLOT] ][player_weapon_AMMO] = ammo;

	PLAYER_WEAPONS[playerid][ WEAPON_INFO[weapon_id][weapon_info_SLOT] ][player_weapon_VALID] = true;
	PLAYER_WEAPONS[playerid][ WEAPON_INFO[weapon_id][weapon_info_SLOT] ][player_weapon_ID] = weapon_id;
	
	GivePlayerWeapon(playerid, weapon_id, ammo);
	return 1;
}

ResetPlayerWeaponsEx(playerid)
{
	new tmp_PLAYER_WEAPONS[enum_PLAYER_WEAPONS];
	for(new i = 0; i != 13; i ++) PLAYER_WEAPONS[playerid][i] = tmp_PLAYER_WEAPONS;
	
	ResetPlayerWeapons(playerid);
	return 1;
}

SetWeaponsForPlayer(playerid)
{
	ResetPlayerWeapons(playerid);
	for(new i = 0; i != 13; i ++)
	{
		if(PLAYER_WEAPONS[playerid][i][player_weapon_ID] != 0)
		{
			if(PLAYER_WEAPONS[playerid][i][player_weapon_AMMO] > 0) GivePlayerWeapon(playerid, PLAYER_WEAPONS[playerid][i][player_weapon_ID], PLAYER_WEAPONS[playerid][i][player_weapon_AMMO]);
		}
	}
	return 1;
}

public OnPlayerWeaponShot(playerid, weaponid, hittype, hitid, Float:fX, Float:fY, Float:fZ)
{	
	if(WEAPON_INFO[weaponid][weapon_info_AMMO]) PLAYER_WEAPONS[playerid][ WEAPON_INFO[weaponid][weapon_info_SLOT] ][player_weapon_AMMO] --;
	if(PLAYER_WEAPONS[playerid][ WEAPON_INFO[weaponid][weapon_info_SLOT] ][player_weapon_AMMO] <= 0)
	{
		PLAYER_WEAPONS[playerid][ WEAPON_INFO[weaponid][weapon_info_SLOT] ][player_weapon_AMMO] = 0;
		new DB_Query[150];
		format(DB_Query,sizeof(DB_Query),"UPDATE `ITEM_EQUIPED` SET `ESTADO`='0' WHERE ID='%d';",PLAYER_WEAPONS[playerid][ WEAPON_INFO[weaponid][weapon_info_SLOT] ][player_weapon_DB_ID] );
		db_query(_DB_,DB_Query);
	}
	if(ac_Info[CHEAT_UNDETECTED_WEAPON][ac_Enabled])
	{
		if(GetPlayerWeapon(playerid) != weaponid)
		{
			if(gettime() > PLAYER_AC_INFO[playerid][CHEAT_UNDETECTED_WEAPON][p_ac_info_IMMUNITY])
			{
				if(!ac_Info[CHEAT_UNDETECTED_WEAPON][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_UNDETECTED_WEAPON);
				else
				{
					if(gettime() - PLAYER_AC_INFO[playerid][CHEAT_UNDETECTED_WEAPON][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_UNDETECTED_WEAPON][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_UNDETECTED_WEAPON][p_ac_info_DETECTIONS] = 0;
					else PLAYER_AC_INFO[playerid][CHEAT_UNDETECTED_WEAPON][p_ac_info_DETECTIONS] ++;
					
					PLAYER_AC_INFO[playerid][CHEAT_UNDETECTED_WEAPON][p_ac_info_LAST_DETECTION] = gettime();
					if(PLAYER_AC_INFO[playerid][CHEAT_UNDETECTED_WEAPON][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_UNDETECTED_WEAPON][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_UNDETECTED_WEAPON);
				}
			}
		}
	}
	if(ac_Info[CHEAT_DRIVE_BY][ac_Enabled])
	{
		new player_state = GetPlayerState(playerid);
		if(player_state == PLAYER_STATE_DRIVER || player_state == PLAYER_STATE_PASSENGER)
		{
			if(gettime() > PLAYER_AC_INFO[playerid][CHEAT_DRIVE_BY][p_ac_info_IMMUNITY])
			{
				if(!ac_Info[CHEAT_DRIVE_BY][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_DRIVE_BY);
				else
				{
					if(gettime() - PLAYER_AC_INFO[playerid][CHEAT_DRIVE_BY][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_DRIVE_BY][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_DRIVE_BY][p_ac_info_DETECTIONS] = 0;
					else PLAYER_AC_INFO[playerid][CHEAT_DRIVE_BY][p_ac_info_DETECTIONS] ++;
					
					PLAYER_AC_INFO[playerid][CHEAT_DRIVE_BY][p_ac_info_LAST_DETECTION] = gettime();
					if(PLAYER_AC_INFO[playerid][CHEAT_DRIVE_BY][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_DRIVE_BY][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_DRIVE_BY);
				}
			}
		}
	}
	/**/

	/**/
	/*if(PLAYER_CREW[playerid][player_crew_VALID])
	{
		if(gettime() > CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_LAST_ATTACK] + 300)
		{
			if(PLAYER_TEMP[playerid][pt_LAST_TERRITORY] != INVALID_STREAMER_ID)
			{
				if(IsPlayerInDynamicArea(playerid, TERRITORIES[ PLAYER_TEMP[playerid][pt_LAST_TERRITORY] ][territory_AREA]))
				{
					if(TERRITORIES[ PLAYER_TEMP[playerid][pt_LAST_TERRITORY] ][territory_CREW_ID] != PLAYER_CREW[playerid][player_crew_ID])
					{
						if(!TERRITORIES[ PLAYER_TEMP[playerid][pt_LAST_TERRITORY] ][territory_WAR] && !CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_FIGHTING])
						{
							if(gettime() > TERRITORIES[ PLAYER_TEMP[playerid][pt_LAST_TERRITORY] ][territory_LAST_ATTACK] + 300)
							{
								if(!TERRITORIES[ PLAYER_TEMP[playerid][pt_LAST_TERRITORY] ][territory_OCCUPIED])
								{
									new attackers_in_area = CountCrewPlayersInTerritory(PLAYER_CREW[playerid][player_crew_INDEX], PLAYER_TEMP[playerid][pt_LAST_TERRITORY]);
									if(attackers_in_area >= 2) StartTerritoryAttack(PLAYER_CREW[playerid][player_crew_INDEX], PLAYER_TEMP[playerid][pt_LAST_TERRITORY], 300);
								}
								else
								{
									if(CREW_INFO[ TERRITORIES[ PLAYER_TEMP[playerid][pt_LAST_TERRITORY] ][territory_CREW_INDEX] ][crew_VALID])
									{
										if(!CREW_INFO[ TERRITORIES[ PLAYER_TEMP[playerid][pt_LAST_TERRITORY] ][territory_CREW_INDEX] ][crew_FIGHTING])
										{	
											new attackers_in_area = CountCrewPlayersInTerritory(PLAYER_CREW[playerid][player_crew_INDEX], PLAYER_TEMP[playerid][pt_LAST_TERRITORY]);
											if(attackers_in_area >= 5) StartTerritoryAttack(PLAYER_CREW[playerid][player_crew_INDEX], PLAYER_TEMP[playerid][pt_LAST_TERRITORY], 300);
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}*/
	PLAYER_TEMP[playerid][pt_LAST_SHOT_TIME] = GetTickCount();


    return 1;
}

public OnPlayerGiveDamage(playerid, damagedid, Float: amount, weaponid, bodypart)
{
	if(!PLAYER_WORKS[playerid][WORK_POLICE])
	{
		if(gettime() > PLAYER_TEMP[playerid][pt_LAST_SAFE_ZONE_WARNING] + 60)
		{
			if(IsPlayerInSafeZone(playerid))
			{
				SendClientMessage(playerid, -1, "Estás en una zona segura, la policía ha sido avisada de la agresión.");
				
				new city[45], zone[45];
				GetPlayerZones(playerid, city, zone);

				new message[145];
				format(message, sizeof message, "{4286f4}[Central policía] {FFFFFF}%s está causando disturbios en {4286f4}%s, %s.", PLAYER_TEMP[playerid][pt_RP_NAME], city, zone);
				SendPoliceRadioMessage(-1, -1, message);
				
				PLAYER_TEMP[playerid][pt_LAST_SAFE_ZONE_WARNING] = gettime();
			}
		}
	}
    return 1;
}



public OnPlayerTakeDamage(playerid, issuerid, Float: amount, weaponid, bodypart)
{
	if(issuerid != INVALID_PLAYER_ID)
	{
		if(ACCOUNT_INFO[issuerid][ac_LEVEL] < 3 && GetPlayerState(issuerid) == PLAYER_STATE_ONFOOT && GetPlayerSpecialAction(issuerid) == SPECIAL_ACTION_NONE)
		{
			if(PLAYER_TEMP[issuerid][pt_ASR_WARNINGS] >= 5)
			{
				KickEx(issuerid);
				return 1;
			}
			ApplyAnimation(issuerid, "PED", "IDLE_tired", 4.1, false, false, false, false, 0);
			PLAYER_TEMP[issuerid][pt_ASR_WARNINGS] ++;
			SendClientMessageEx(issuerid, 0xFFA97FFF, "No puedes atacar personas así, congelado 5 segundos, aviso %d/5.", PLAYER_TEMP[issuerid][pt_ASR_WARNINGS]);
			TogglePlayerControllableEx(issuerid, false);
			KillTimer(PLAYER_TEMP[issuerid][pt_TIMERS][19]);
			PLAYER_TEMP[issuerid][pt_TIMERS][19] = SetTimerEx("AntiAttackFinish", 5000, false, "i", issuerid);
		}
		//

		if(weaponid == 49 )
		{
			static Float:X;
			static Float:Y;
			static Float:Z;
			GetPlayerPos(playerid,X, Y,Z);
			SetPlayerPos(playerid,X,Y,Z+3);
			SendClientMessage(playerid,-1, "* El Anti Car Kill te ha salvado de CK (Anti Car Kill) | Si haces atacas al vehiculo seras baneado, reporta esto.");

			if(ACCOUNT_INFO[issuerid][ac_LEVEL] < 3 && GetPlayerState(issuerid) == PLAYER_STATE_DRIVER)
			{
				if(PLAYER_TEMP[issuerid][pt_ASR_WARNINGS] >= 5)
				{
					KickEx(issuerid);
					return 1;
				}
				PLAYER_TEMP[issuerid][pt_ASR_WARNINGS] ++;
				SendClientMessageEx(issuerid, 0xFFA97FFF, "No puedes atacar personas así, congelado 5 segundos, aviso %d/5.", PLAYER_TEMP[issuerid][pt_ASR_WARNINGS]);
				TogglePlayerControllableEx(issuerid, false);
				KillTimer(PLAYER_TEMP[issuerid][pt_TIMERS][19]);
				PLAYER_TEMP[issuerid][pt_TIMERS][19] = SetTimerEx("AntiAttackFinish", 5000, false, "i", issuerid);
			}	
	   }
	}
    return 1;
}

CheckWeaponAndAmmo(playerid, weaponid)
{
	if(WEAPON_INFO[weaponid][weapon_info_ANTI_CHEAT])
	{
		new weapon_id, weapon_ammo;
		GetPlayerWeaponData(playerid, WEAPON_INFO[weaponid][weapon_info_SLOT], weapon_id, weapon_ammo);
		
		if(ac_Info[CHEAT_WEAPON][ac_Enabled])
		{
			if(gettime() > PLAYER_AC_INFO[playerid][CHEAT_WEAPON][p_ac_info_IMMUNITY])
			{
				if(weapon_id != PLAYER_WEAPONS[playerid][ WEAPON_INFO[weapon_id][weapon_info_SLOT] ][player_weapon_ID])
				{
					if(!ac_Info[CHEAT_WEAPON][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_WEAPON);
					else
					{
						if(gettime() - PLAYER_AC_INFO[playerid][CHEAT_WEAPON][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_WEAPON][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_WEAPON][p_ac_info_DETECTIONS] = 0;
						else PLAYER_AC_INFO[playerid][CHEAT_WEAPON][p_ac_info_DETECTIONS] ++;
						
						PLAYER_AC_INFO[playerid][CHEAT_WEAPON][p_ac_info_LAST_DETECTION] = gettime();
						if(PLAYER_AC_INFO[playerid][CHEAT_WEAPON][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_WEAPON][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_WEAPON);
					}
				}
			}
		}
		
		if(WEAPON_INFO[weapon_id][weapon_info_AMMO])
		{
			if(weapon_ammo > PLAYER_WEAPONS[playerid][ WEAPON_INFO[weapon_id][weapon_info_SLOT] ][player_weapon_AMMO] + 10)
			{
				if(ac_Info[CHEAT_AMMO][ac_Enabled])
				{
					if(gettime() > PLAYER_AC_INFO[playerid][CHEAT_AMMO][p_ac_info_IMMUNITY])
					{
						if(!ac_Info[CHEAT_AMMO][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_AMMO);
						else
						{
							if(gettime() - PLAYER_AC_INFO[playerid][CHEAT_AMMO][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_AMMO][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_AMMO][p_ac_info_DETECTIONS] = 0;
							else PLAYER_AC_INFO[playerid][CHEAT_AMMO][p_ac_info_DETECTIONS] ++;
							
							PLAYER_AC_INFO[playerid][CHEAT_AMMO][p_ac_info_LAST_DETECTION] = gettime();
							if(PLAYER_AC_INFO[playerid][CHEAT_AMMO][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_AMMO][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_AMMO);
						}
					}
				}
			}
			else PLAYER_WEAPONS[playerid][ WEAPON_INFO[weapon_id][weapon_info_SLOT] ][player_weapon_AMMO] = weapon_ammo;
		}
	}
	return 1;
}


new ADMIN_LEVEL_AC_IMMUNITY = 3; //nivel 3 en adelante
OnPlayerCheatDetected(playerid, cheat, Float:extra = 0.0)
{
	if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] >= ADMIN_LEVEL_AC_IMMUNITY) return 1;
	if(PLAYER_TEMP[playerid][pt_KICKED]) return 1;
	

	if(gettime() < PLAYER_TEMP[playerid][pt_LAST_CHEAT_DETECTED_TIME] + 5) return 1;

	new ac_message[145], player_state = GetPlayerState(playerid);
	
	if(ac_Info[cheat][ac_Kick])
	{	
		new bad_history[24];
		format(bad_history, sizeof bad_history, "ac, cheat (%02d)", cheat);
		AddPlayerBadHistory(ACCOUNT_INFO[playerid][ac_ID], -1, TYPE_KICK, bad_history);
		
		if(extra != 0.0) format(ac_message, sizeof ac_message, "{ff782b}[AC-KICK] {FFFFFF}%s (%d): %s (cd: %02d, ps: %02d, ping: %d, dec: %d:%d, extra: %.1f)", ACCOUNT_INFO[playerid][ac_NAME], playerid, ac_Info[cheat][ac_Name], cheat, player_state, GetPlayerPing(playerid), PLAYER_AC_INFO[playerid][cheat][p_ac_info_DETECTIONS], ac_Info[cheat][ac_Interval], extra);
		else format(ac_message, sizeof ac_message, "{ff782b}[AC-KICK] {FFFFFF}%s (%d): %s (cd: %02d, ps: %02d, ping: %d, dec: %d:%d)", ACCOUNT_INFO[playerid][ac_NAME], playerid, ac_Info[cheat][ac_Name], cheat, player_state, GetPlayerPing(playerid), PLAYER_AC_INFO[playerid][cheat][p_ac_info_DETECTIONS], ac_Info[cheat][ac_Interval]);
		
		KickEx(playerid);
		
		if(cheat == CHEAT_PLAYER_HEALTH) CHARACTER_INFO[playerid][ch_HEALTH] = 20.0;
		if(cheat == CHEAT_PLAYER_ARMOUR) CHARACTER_INFO[playerid][ch_ARMOUR] = 0.0;
	}
	else
	{
		if(extra != 0.0) format(ac_message, sizeof ac_message, "{ff782b}[AC-AVISO] {FFFFFF}%s (%d): %s (cd: %02d, ps: %02d, ping: %d, dec: %d:%d, extra: %.1f)", ACCOUNT_INFO[playerid][ac_NAME], playerid, ac_Info[cheat][ac_Name], cheat, player_state, GetPlayerPing(playerid), PLAYER_AC_INFO[playerid][cheat][p_ac_info_DETECTIONS], ac_Info[cheat][ac_Interval], extra);
		else format(ac_message, sizeof ac_message, "{ff782b}[AC-AVISO] {FFFFFF}%s (%d): %s (cd: %02d, ps: %02d, ping: %d, dec: %d:%d)", ACCOUNT_INFO[playerid][ac_NAME], playerid, ac_Info[cheat][ac_Name], cheat, player_state, GetPlayerPing(playerid), PLAYER_AC_INFO[playerid][cheat][p_ac_info_DETECTIONS], ac_Info[cheat][ac_Interval]);
	}
	
	SendMessageToAdminsAC(-1, ac_message);
	PLAYER_TEMP[playerid][pt_LAST_CHEAT_DETECTED_TIME] = gettime();

	return 1;
}

SavePlayerWeaponsData(playerid)
{
	if(!PLAYER_TEMP[playerid][pt_USER_EXIT] || !PLAYER_TEMP[playerid][pt_USER_LOGGED]) return 0;
	
	for(new i = 0; i != 13; i ++)
	{
		if(!PLAYER_WEAPONS[playerid][i][player_weapon_DB_ID]) continue;
		
		//new id_slot_inventario = GetIdItemInventario(i);
		new DB_Query[128];
		format(DB_Query, sizeof(DB_Query), "UPDATE `ITEM_EQUIPED` SET `ESTADO` = '%d' WHERE `ID` = '%d';", PLAYER_WEAPONS[playerid][i][player_weapon_AMMO], PLAYER_WEAPONS[playerid][i][player_weapon_DB_ID]);
		db_query(Database, DB_Query);
	}
	return 1;
}

LoadPlayerWeaponsData(playerid)
{
	if(ACCOUNT_INFO[playerid][ac_ID] == 0) return 0;
	new query[256],DBResult:Resulta,id;
    format(query,sizeof(query),"SELECT * FROM ITEM_EQUIPED WHERE PLAYER = '%d';",ACCOUNT_INFO[playerid][ac_ID]);
    Resulta = db_query(Database,query);
    for(new i; i < db_num_rows(Resulta); i++)
    {
		id = db_get_field_assoc_int(Resulta, "ITEM");
    	if(INVENTARIOPLAYER[id][TIPODECONSUMO] == TYPE_WEAPON)
    	{
    		new weapon_id = db_get_field_assoc_int(Resulta, "ITEM");
    		weapon_id = INVENTARIOPLAYER[ id ][MAXCONSUME];
			PLAYER_WEAPONS[playerid][ WEAPON_INFO[weapon_id][weapon_info_SLOT] ][player_weapon_VALID] = true;
			PLAYER_WEAPONS[playerid][ WEAPON_INFO[weapon_id][weapon_info_SLOT] ][player_weapon_DB_ID] = db_get_field_assoc_int(Resulta, "ID");
			PLAYER_WEAPONS[playerid][ WEAPON_INFO[weapon_id][weapon_info_SLOT] ][player_weapon_ID] = weapon_id;
			PLAYER_WEAPONS[playerid][ WEAPON_INFO[weapon_id][weapon_info_SLOT] ][player_weapon_AMMO] = db_get_field_assoc_int(Resulta, "ESTADO");	
    	}
		db_next_row(Resulta);
	}
	db_free_result(Resulta);
	/*new DBResult:Result, DB_Query[90];
	format(DB_Query, sizeof(DB_Query), "SELECT * FROM `PLAYER_WEAPONS` WHERE `ID_USER` = '%d' LIMIT %d;", ACCOUNT_INFO[playerid][ac_ID], 13);
	Result = db_query(Database, DB_Query);
	
	new total;
	for(new i; i < db_num_rows(Result); i++ )
	{
		if(total >= 13)
		{
			printf("---> Límite superado en array 'PLAYER_WEAPONS' al intentar cargar de la base de datos.");
			break;
		}
		
		new weapon_id = db_get_field_assoc_int(Result, "WEAPON_ID");
		
		PLAYER_WEAPONS[playerid][ WEAPON_INFO[weapon_id][weapon_info_SLOT] ][player_weapon_VALID] = true;
		PLAYER_WEAPONS[playerid][ WEAPON_INFO[weapon_id][weapon_info_SLOT] ][player_weapon_DB_ID] = db_get_field_assoc_int(Result, "ID_WEAPON");
		PLAYER_WEAPONS[playerid][ WEAPON_INFO[weapon_id][weapon_info_SLOT] ][player_weapon_ID] = weapon_id;
		PLAYER_WEAPONS[playerid][ WEAPON_INFO[weapon_id][weapon_info_SLOT] ][player_weapon_AMMO] = db_get_field_assoc_int(Result, "AMMO");

		total ++;
		db_next_row(Result);
	}
	db_free_result(Result);*/
	return 1;
}

RemovePlayerSlotWeapon(playerid, slot, bool:db_delete = false)
{
	if(db_delete)
	{
		new DB_Query[140];
		/*format(DB_Query, sizeof DB_Query, "DELETE FROM `PLAYER_WEAPONS` WHERE `ID_USER` = '%d' AND `ID_WEAPON` = '%d';", ACCOUNT_INFO[playerid][ac_ID], PLAYER_WEAPONS[playerid][slot][player_weapon_DB_ID]);
		db_query(Database, DB_Query);*/
		format(DB_Query, sizeof DB_Query, "DELETE FROM `ITEM_EQUIPED` WHERE `ID` = '%d';",PLAYER_WEAPONS[playerid][ slot ][player_weapon_DB_ID]);
		db_query(Database, DB_Query);
	}
	
	new current_weapon = GetPlayerWeapon(playerid);
	if(current_weapon == PLAYER_WEAPONS[playerid][slot][player_weapon_ID]) current_weapon = 0;
	
	PLAYER_WEAPONS[playerid][slot][player_weapon_VALID] = false;
	PLAYER_WEAPONS[playerid][slot][player_weapon_DB_ID] = 0;
	PLAYER_WEAPONS[playerid][slot][player_weapon_ID] = 0;
	PLAYER_WEAPONS[playerid][slot][player_weapon_AMMO] = 0;
	
	SetWeaponsForPlayer(playerid);
	SetPlayerArmedWeapon(playerid, current_weapon);
	return 1;
}

SetPlayerHealthEx(playerid, Float:health)
{
	PLAYER_AC_INFO[playerid][CHEAT_PLAYER_HEALTH][p_ac_info_IMMUNITY] = gettime() + 3;
	
	CHARACTER_INFO[playerid][ch_HEALTH] = health;
	SetPlayerHealth(playerid, CHARACTER_INFO[playerid][ch_HEALTH]);
	return 1;
}

SetPlayerArmourEx(playerid, Float:armour)
{
	PLAYER_AC_INFO[playerid][CHEAT_PLAYER_ARMOUR][p_ac_info_IMMUNITY] = gettime() + 3;
	
	CHARACTER_INFO[playerid][ch_ARMOUR] = armour;
	SetPlayerArmour(playerid, CHARACTER_INFO[playerid][ch_ARMOUR]);
	return 1;
}

GivePlayerHealthEx(playerid, Float:health)
{
	PLAYER_AC_INFO[playerid][CHEAT_PLAYER_HEALTH][p_ac_info_IMMUNITY] = gettime() + 3;
	
	CHARACTER_INFO[playerid][ch_HEALTH] += health;
	if(CHARACTER_INFO[playerid][ch_HEALTH] > 100.0) CHARACTER_INFO[playerid][ch_HEALTH] = 100.0;
	SetPlayerHealth(playerid, CHARACTER_INFO[playerid][ch_HEALTH]);
	return 1;
}

GivePlayerArmourEx(playerid, Float:armour)
{
	PLAYER_AC_INFO[playerid][CHEAT_PLAYER_ARMOUR][p_ac_info_IMMUNITY] = gettime() + 3;
	
	CHARACTER_INFO[playerid][ch_ARMOUR] += armour;
	if(CHARACTER_INFO[playerid][ch_ARMOUR] > 100.0) CHARACTER_INFO[playerid][ch_ARMOUR] = 100.0;
	SetPlayerArmour(playerid, CHARACTER_INFO[playerid][ch_ARMOUR]);
	return 1;
}

TransferPlayerWeapon(from_playerid, slot, to_playerid)
{
	new DB_Query[130];
 
	new DBResult:Result;
	format(DB_Query,sizeof DB_Query,"SELECT * FROM ITEM_EQUIPED WHERE PLAYER='%d' AND ID='%d';",ACCOUNT_INFO[from_playerid][ac_ID], PLAYER_WEAPONS[from_playerid][slot][player_weapon_DB_ID]);
	Result = db_query(Database, DB_Query);
	if(db_num_rows(Result))
	{
		new itemda= db_get_field_assoc_int(Result, "ITEM");	

		format(DB_Query, sizeof(DB_Query), "INSERT INTO `INVENTARIO` (`PLAYER`,`ID`,`ESTADO`,`TIPO`) VALUES ('%d','%d','%d','%d')", 
			ACCOUNT_INFO[to_playerid][ac_ID], PLAYER_WEAPONS[from_playerid][slot][player_weapon_DB_ID],PLAYER_WEAPONS[from_playerid][slot][player_weapon_AMMO],itemda);
		db_query(Database, DB_Query);
	}
	
	
	/*format(DB_Query,sizeof(DB_Query),"DELETE FROM `ITEM_EQUIPED` WHERE ID='%d' AND `PLAYER`='%d';",PLAYER_WEAPONS[from_playerid][ slot ][player_weapon_DB_ID],ACCOUNT_INFO[from_playerid][ac_ID]);
	db_query(_DB_,DB_Query);*/

	/*PLAYER_WEAPONS[to_playerid][slot][player_weapon_VALID] = true;
	PLAYER_WEAPONS[to_playerid][slot][player_weapon_DB_ID] = PLAYER_WEAPONS[from_playerid][slot][player_weapon_DB_ID];
	PLAYER_WEAPONS[to_playerid][slot][player_weapon_ID] = PLAYER_WEAPONS[from_playerid][slot][player_weapon_ID];
	PLAYER_WEAPONS[to_playerid][slot][player_weapon_AMMO] = PLAYER_WEAPONS[from_playerid][slot][player_weapon_AMMO];
	SetWeaponsForPlayer(to_playerid);*/
	
	RemovePlayerSlotWeapon(from_playerid, slot, true);
	HiveIntaruil(from_playerid);
	HiveIntaruil(to_playerid);
	return 1;
}

PlayerPayday(playerid)
{
	new money = 300 * ACCOUNT_INFO[playerid][ac_LEVEL];
	if(money > 4500) money = 4500;
	money += minrand(100, 200);
	
	SendClientMessage(playerid, -1, " ");
	SendClientMessage(playerid, -1, "{81F7F3}====================================================");
	SendClientMessageEx(playerid, -1, "{E6F8E0}Paga de juego: {98d16c}%s$", number_format_thousand(money));
	
	//new ostring[200];
	if(!ACCOUNT_INFO[playerid][ac_SU])
	{
		for(new i = 0; i != MAX_VEHICLES; i ++)
		{
			if(!PLAYER_VEHICLES[i][player_vehicle_VALID]) continue;
			if(PLAYER_VEHICLES[i][player_vehicle_OWNER_ID] != ACCOUNT_INFO[playerid][ac_ID]) continue;
			
			new veh_money = VEHICLE_INFO[GLOBAL_VEHICLES[i][gb_vehicle_MODELID] - 400][vehicle_info_PRICE] / 5000;
			money -= veh_money;
			//format(ostring,sizeof(ostring),"~n~~w~%s Seguro del vehiculo: %s = ~r~-%s",ostring,VEHICLE_INFO[GLOBAL_VEHICLES[i][gb_vehicle_MODELID] - 400][vehicle_info_NAME], number_format_thousand(veh_money));
			SendClientMessageEx(playerid, -1, "{E6F8E0}Seguro del vehículo %s: {FF6633}-%s$", VEHICLE_INFO[GLOBAL_VEHICLES[i][gb_vehicle_MODELID] - 400][vehicle_info_NAME], number_format_thousand(veh_money));
		}
		
		for(new i = 0; i != MAX_PROPERTIES; i ++)
		{
			if(!PROPERTY_INFO[i][property_VALID]) continue;
			if(PROPERTY_INFO[i][property_OWNER_ID] != ACCOUNT_INFO[playerid][ac_ID]) continue;
		
			if(PROPERTY_INFO[i][property_VIP_LEVEL]) SendClientMessageEx(playerid, -1, "{E6F8E0}Seguro de la propiedad %s: {F4DC42}PROPIEDAD VIP, NO SEGURO.", PROPERTY_INFO[i][property_NAME]);
			else
			{
				new property_money = PROPERTY_INFO[i][property_PRICE_BASE] / 200;
				money -= property_money;
				
				SendClientMessageEx(playerid, -1, "{E6F8E0}Seguro de la propiedad %s: {FF6633}-%s$", PROPERTY_INFO[i][property_NAME], number_format_thousand(property_money));
			}
		}
	}
	//new distring[50];
	if(PLAYER_WORKS[playerid][WORK_POLICE])
	{
		new work_payment;
		if(work_info[WORK_POLICE][work_info_EXTRA_PAY] > 0 && work_info[WORK_POLICE][work_info_EXTRA_PAY_EXP] > 0)
		{
			work_payment = (work_info[WORK_POLICE][work_info_EXTRA_PAY] * floatround(floatdiv(PLAYER_SKILLS[playerid][WORK_POLICE], work_info[WORK_POLICE][work_info_EXTRA_PAY_EXP])));
			if(work_info[WORK_POLICE][work_info_EXTRA_PAY_LIMIT] != 0) if(work_payment > work_info[WORK_POLICE][work_info_EXTRA_PAY_LIMIT]) work_payment = work_info[WORK_POLICE][work_info_EXTRA_PAY_LIMIT];
		}
		work_payment=work_payment+10000;
		money += work_payment;
		
		SendClientMessageEx(playerid, -1, "{E6F8E0}Paga SAPD: {98d16c}%s$", number_format_thousand(work_payment));
		//format(distring,sizeof(distring),"~w~~h~~h~Paga SAPD: ~g~~h~%s",number_format_thousand(work_payment));
	}

	if(money + CHARACTER_INFO[playerid][ch_CASH] <= 0)
	{
		money = 0;
		CHARACTER_INFO[playerid][ch_CASH] = 0;
	}
	/*new DBResult:Result,DB_Query[100],lineas=0,graf;
	format(DB_Query,sizeof(DB_Query),"SELECT * FROM GRAFITIS WHERE CREWID = '%d'",PLAYER_CREW[playerid][player_crew_ID]);
    Result = db_query(Database,DB_Query);
    for(new i; i < db_num_rows(Result); i++)
    {
    	graf++;
        lineas=lineas+200;
        db_next_row(Result);
    }
    db_free_result(Result);*/

   	new lineas=GetPlayerGrafitis(playerid);
   	new zonascap=GetPlayerZonas(playerid);
    if(PLAYER_CREW[playerid][player_crew_VALID] == true)
    {
    	
	    new paga=0;
	    paga=(lineas*200);
	    if(lineas != 0)
	    {
	    	money=money+paga;
	    	SendClientMessageEx(playerid, -1, "{E6F8E0}Paga de los %d Grafitis capturados por tu banda: {98d16c}%s$",lineas, number_format_thousand(paga));
	    }
	    //
	    
	    paga=0;
	    paga=(zonascap*200);
	    if(zonascap != 0)
	    {
	    	money=money+paga;
	    	SendClientMessageEx(playerid, -1, "{E6F8E0}Paga de las %d ZONAS capturadas por tu banda: {98d16c}%s$",zonascap, number_format_thousand(paga));
	    }
	}
	if(money > 0) SendClientMessageEx(playerid, -1, "{81F7F3}RESUMEN: {98d16c}%s$", number_format_thousand(money));
	else SendClientMessageEx(playerid, -1, "{81F7F3}RESUMEN: {FF6633}%s$", number_format_thousand(money));
	switch(ACCOUNT_INFO[playerid][ac_SU])
	{
		case 1:
		{
			money=money+5000;
			SendClientMessageEx(playerid, -1, "{E6F8E0}Paga pd por vip1: {98d16c}%s$", number_format_thousand(5000));
		}
		case 2:
		{
			money=money+10000;
			SendClientMessageEx(playerid, -1, "{E6F8E0}Paga pd por vip2: {98d16c}%s$", number_format_thousand(10000));
		}
	}
	SendClientMessage(playerid, -1, "{81F7F3}====================================================");
	SendClientMessage(playerid, -1, " ");

    /*new latrin[100];
    format(latrin,sizeof(latrin),"~w~~h~~h~Grafitis capturados: ~g~~h~%d",lineas);
	new string[500];
	format(string,sizeof(string),"~w~~h~~h~Paga de juego: ~g~~h~%s~n~",number_format_thousand(money),latrin,distring,ostring,asdaadsad);
	MensajesAyuda(playerid,string);*/
	GivePlayerCash(playerid, money+lineas+zonascap);
	return 1;
}
/*
public OnPlayerClosestNodeIDChange(playerid,old_NodeID,new_NodeID) 
{ //cuando el jugador llega a su destino
	if(new_NodeID != -1) 
	{
		if(PlayerRoute[playerid][Destination] == new_NodeID) 
		{
			SendClientMessage(playerid,-1,"Estas en el destino.");
			DisableGPS(playerid);
		}
	}
	return 1;
}
public GPS_WhenRouteIsCalculated(routeid,node_id_array[],amount_of_nodes,Float:distance,Float:Polygon[],Polygon_Size,Float:NodePosX[],Float:NodePosY[],Float:NodePosZ[])//Kada se ruta kreira
{
	PlayerRoute[routeid][calculating] = false; //stavlja kreiranje rute na false
	if(amount_of_nodes > 1) { //ako je broj tacaka na putu vece od 1
	    for(new i = 0; i < amount_of_nodes; ++i) {
			PlayerRoute[routeid][CreatedObjects][i] = CreatePlayerObject(routeid,1318,NodePosX[i],NodePosY[i],NodePosZ[i]+1.0,0.0,0.0,0.0,150.0); //kreiranje objekata po putu...
	    }
	    PlayerRoute[routeid][Lenght] = amount_of_nodes; //postavlja broj tacaka na putu
		PlayerRoute[routeid][Destination] = node_id_array[amount_of_nodes-1]; //postavlja destinaciju
	    gps_AddPlayer(routeid); //dodaje igraca na tu rutu
	    SendClientMessage(routeid,-1,"Una ruta creada, un viaje feliz.!");
	}
	else {
		SendClientMessage(routeid,-1,"Los satélites no pueden encontrarlo en este lugar, salga de la mejor carretera.");
	}

	return 1;
}

forward DisableGPS(playerid); 
public DisableGPS(playerid)//iskljucivanje GPS
{
	for(new i = 0; i < PlayerRoute[playerid][Lenght]; ++i)
	{
		DestroyPlayerObject(playerid,PlayerRoute[playerid][CreatedObjects][i]); //brisanje objekata
	}
	PlayerRoute[playerid][Lenght] = 0;
	PlayerRoute[playerid][Destination] = -1;
	gps_RemovePlayer(playerid);
	return 1;
}
*/


//CMD: cmd 
CMD:createzone(playerid,params[])
{
	LevelAdmin(playerid,6);
	if(creatingzone[playerid]) return SendClientMessage(playerid,-1,"Ya estas creando una zona termina de crear la actual primero!!");
	if(!creatingzone[playerid])
	{
		new Float:tempz;
		GetPlayerPos(playerid, minX[playerid], minY[playerid], tempz);
		GetPlayerPos(playerid, maxX[playerid], maxY[playerid], tempz);
        SendClientMessage(playerid,-1,"* USA Los Keys 'Arriba,abajo,izq,derecha' para crear la magnitud de la zona");
		SendClientMessage(playerid,-1,"* USA KEY 'LALT' para detener la creacion");

		creatingzone[playerid] = true;
		tempzone[playerid] = -1;

		TogglePlayerControllable(playerid,false);

		return 1;
	}
	return 1;
}

CMD:tag(playerid,params[])
{
    LevelAdmin(playerid,4);

    if(TagOn[playerid]==0)
    {
        GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~g~Name tag~n~~w~on", 5000, 3);
        TagOn[playerid]=1;
        KillTimer(TimerTag[playerid]);
        TimerTag[playerid] = SetTimerEx("HideTagForAllPlayers",999,true,"d",playerid);
    }
    else
    {
        GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~r~Name tag~n~~w~off", 5000, 3);
        KillTimer(TimerTag[playerid]);
        TagOn[playerid]=0;
        ShowTagForAllPlayers(playerid);

    }
    return 1;
}
/*
enum info_prendas
{
	NAME[30],
	ID_PRENDA,
	OBJETO,
	TIPO_MONEDA,
	PRECIO
}
new Prendas_Info[][] =
{
	{"Casco obrero",32,18638,1,380},
	{"Sarten",33,11718,1,380},
	{"Sombrero Hallowen",34,19528,2,5},
	{"Sombrero Raindow",35,19113,2,20},
	{"Parche Ojo",36,19085,1,2380},
	{"Sombrero blow",37,19136,2,15},
	{"Chaleco antibalas",38,19142,1,1380},
	{"Cachos",39,19314,2,10}
};
*/
/*CMD:toyss(playerid,params[])
{
	
	for(new i=0; i < 12; i++) TextDrawShowForPlayer(playerid,Jugador_Textdraws[playerid][ textdraw_comprar_accesorio ][i]);
	new nerak[30];

	format(nerak,sizeof(nerak),"%s",Prendas_Info[ PLAYER_TEMP[playerid][INDEX_SHOP_PRENDA] ][ NAME ]);
	TextDrawSetString(Jugador_Textdraws[playerid][ textdraw_comprar_accesorio ][11], nerak);

	TextDrawSetPreviewModel(Jugador_Textdraws[playerid][textdraw_comprar_accesorio][6], Prendas_Info[ PLAYER_TEMP[playerid][INDEX_SHOP_PRENDA] ][ OBJETO ]);
	TextDrawShowForPlayer(playerid,Jugador_Textdraws[playerid][ textdraw_comprar_accesorio ][6]);
	switch(Prendas_Info[ PLAYER_TEMP[playerid][INDEX_SHOP_PRENDA]][TIPO_MONEDA])
	{
		case 1:
		{
			format(nerak,sizeof(nerak),"%s",number_format_thousand(Prendas_Info[ PLAYER_TEMP[playerid][INDEX_SHOP_PRENDA] ][PRECIO]));
			TextDrawSetString(Jugador_Textdraws[playerid][textdraw_comprar_accesorio][ 5 ], nerak);
		}
		case 2:
		{
			format(nerak,sizeof(nerak),"~y~ %d RP",Prendas_Info[ PLAYER_TEMP[playerid][INDEX_SHOP_PRENDA] ][PRECIO]);
			TextDrawSetString(Jugador_Textdraws[playerid][textdraw_comprar_accesorio][ 5 ], nerak);
		}
	}

	TextDrawShowForPlayer(playerid,Jugador_Textdraws[playerid][ textdraw_comprar_accesorio ][11]);
	TextDrawShowForPlayer(playerid,Jugador_Textdraws[playerid][ textdraw_comprar_accesorio ][5]);
	PLAYER_TEMP[playerid][COMPRANDO_ACCESORIOS] = true;
	SelectTextDraw(playerid, SELEC_TEXTDRAW);
	return 1;
}*/
CMD:tiendarp(playerid,params[])
{
	gsBigString[0] =EOS, gsString[0] =EOS;
	strcat(gsBigString, "Item:\tCosto RP:\n");
	format(gsString,sizeof(gsString),"{FFE400}Cambiarte el nombre\t10\n");
	strcat(gsBigString, gsString);
	format(gsString,sizeof(gsString),"{CCCCCC}Dinero IC, 1 RP = $ 50.000\tCantidad que compres\n");
	strcat(gsBigString, gsString);
	format(gsString,sizeof(gsString),"{D3984E}Vip nivel "R"1"W" 30 Dias\t"W"20\n");
	strcat(gsBigString, gsString);
	format(gsString,sizeof(gsString),"{D3984E}Vip nivel "R"2"W" 30 Dias\t"W"30\n");
	strcat(gsBigString, gsString);
	format(gsString,sizeof(gsString),"{D3984E}Uniq name\t"W"50\n");
	strcat(gsBigString, gsString);
	format(gsString,sizeof(gsString),"{D3984E}Nivel\t"W"30\n");
	strcat(gsBigString, gsString);
	format(gsString,sizeof(gsString),"{D3984E}Que son los "SERVER_COIN"?\t 0\n");
	strcat(gsBigString, gsString);
	ShowPlayerDialog(playerid,DIALOG_TIENDA_RP, DIALOG_STYLE_TABLIST_HEADERS,"Tienda RP",gsBigString,"Comprar","");
	return 1;
}
alias:tiendarp("vip");
CMD:fakechat(playerid, params[])
{
	new id, msg[128];
	LevelAdmin(playerid, 6);
    if(sscanf(params, "us[128]", id, msg)) return SendClientMessage(playerid, -1, "USO: /fakechat [playerid] [text]") &&
	SendClientMessage(playerid, -1, "[Funcion]: Hacer hablar por el Chat a Especificado Jugador!");
	if(id == INVALID_PLAYER_ID) return SendClientMessage(playerid, -1, "* Jugador no conectado.");
	OnPlayerText(id, msg);
	SendClientMessage(playerid, -1, "Fake chat - Enviador");
	return 1;
}

CMD:fakecmd(playerid, params[])
{
	new id, cmdtext[128];
	LevelAdmin(playerid, 6);
    if(sscanf(params, "us[128]", id, cmdtext)) return SendClientMessage(playerid, -1, "USO: /fakecmd [playerid] [/comando]") &&
	SendClientMessage(playerid, -1, "[Funcion]: Haces usar un comando a espesificado jugador!");
	if(id == INVALID_PLAYER_ID) return SendClientMessage(playerid, -1, "* Jugador no conectado.");
	if(strfind(params, "/", false) != -1)
	{
        CallRemoteFunction("OnPlayerCommandReceived", "is", id, cmdtext);
		SendClientMessage(playerid, -1, "Fake Cmd - Enviado -");
	}
	else
	{
	    SendClientMessage(playerid, -1, "USO: /fakecmd [playerid] [/comando]") &&
		SendClientMessage(playerid, -1, "[Funcion]: Haces usar un comando a espesificado jugador!");
	}
	return 1;
}

CMD:setworkexpnivel(playerid,params[])
{
	LevelAdmin(playerid, 6);
	new d,karen,arboleda;
	if(sscanf(params, "ddd",d,karen,arboleda)) return SendClientMessage(playerid, -1,"Syntax: /setworkexpnivel [playerid/nombre] [trabajo] [exp]"), 
		SendClientMessage(playerid,-1,"Trabajos exp ids: |Camionero : 1| Transportista : 2| Minero : 3|Leñador : 4|");

	switch(karen)
	{
		case 1: PLAYER_WORK_NIVEL[d][CAMIONERO] = arboleda;
		case 2: PLAYER_WORK_NIVEL[d][TRANSPORTISTA] = arboleda;
		case 3: PLAYER_WORK_NIVEL[d][MINERO] = arboleda;
		case 4: PLAYER_WORK_NIVEL[d][LENADOR] = arboleda;
		default: SendClientMessage(playerid,-1, "Id invalida");
	}
	SendClientMessage(playerid,-1,"Enviado");
	
	return 1;
}

CMD:makegrafiti(playerid,params[])
{
	LevelAdmin(playerid, 6);

	new DBResult:Result2,grafitiid,DB_Query[200];


	new Float: x, Float: y, Float: z;
	GetPlayerPos(playerid, x, y, z);
    GetXYInFrontOfPlayer(playerid, x, y, 1.0);

	format(DB_Query, sizeof(DB_Query),"INSERT INTO `GRAFITIS` (`X`,`Y`,`Z`,`CREWID`) VALUES ('%f','%f','%f','0')",x, y, z);
    db_query(Database, DB_Query);

	format(DB_Query, sizeof(DB_Query), "SELECT ID, MAX(`ID`) FROM `GRAFITIS` WHERE ID");
	Result2 = db_query(Database, DB_Query);
 	if(db_num_rows(Result2))
  	{
   		db_get_field_assoc(Result2, "ID", DB_Query, 45); grafitiid = strval(DB_Query);
	}
	db_free_result(Result2);

 	PLAYER_TEMP[playerid][pt_EDITANDO_GRAFITI]=true;
 	PLAYER_TEMP[playerid][pt_EDITANDO_GRAFITI_ID] = grafitiid;

	GRAFITI[grafitiid][PosX]=x;
	GRAFITI[grafitiid][PosY]=y;
	GRAFITI[grafitiid][PosZ]=z;

	grafitiid = Iter_Free(DisputaGrafitis);
	GRAFITI[grafitiid][STATUS]=0;
	GRAFITI[grafitiid][CAPTURADO_POR]=0;
	GRAFITI[grafitiid][CAPTURANDO]=false;
	GRAFITI[grafitiid][CAPTURADO_POR_PLAYER] = -1;
	Iter_Add(DisputaGrafitis, grafitiid);

	GRAFITI[grafitiid][OBJETO] = CreateDynamicObject(19482,GRAFITI[grafitiid][PosX],GRAFITI[grafitiid][PosY],GRAFITI[grafitiid][PosZ],GRAFITI[grafitiid][PosRx],GRAFITI[grafitiid][PosRy],GRAFITI[grafitiid][PosRz]);
	SetDynamicObjectMaterialText(GRAFITI[grafitiid][OBJETO], 0, "Grafiti", OBJECT_MATERIAL_SIZE_512x512, "Arial", 80, 1, -1, 0, 1);

	EditDynamicObject(playerid, GRAFITI[grafitiid][OBJETO]);
	return 1;
}
CMD:getanim(playerid,params[])
{
	SendClientMessageEx(playerid,-1,"anim id: %d",GetPlayerAnimationIndex(playerid));
	return 1;
}
CMD:larma(playerid,params[])
{
	LevelAdmin(playerid, 6);
	new d;
	if(sscanf(params, "d",d)) return SendClientMessage(playerid, -1,"Syntax: /larma arma id ");

	GivePlayerWeaponEx(playerid,d,9999);
	
	return 1;
}

CMD:dinfo(playerid,params[])
{
	LevelAdmin(playerid, 6);
	new d;
	if(sscanf(params, "d",d)) return SendClientMessage(playerid, -1,"Syntax: /dinfo playerid ");

	SendClientMessageEx(playerid,-1,"Apartamento id: %d | casa id: %d | Negocio id: %d",ENAPARTAMENTO[playerid],ENCASAVIP[playerid],InNegocio[playerid]);
	return 1;
}
CMD:disputas(playerid)
{
	ShowDisputasa(playerid);
	return 1;
}
ShowDisputasa(playerid)
{
	return ShowPlayerDialog(playerid, DIALOG_LIST_DISPUTAS, DIALOG_STYLE_LIST,"| Disputas |","Grafitis",">>", "Cerrar");
}
CMD:getpos(playerid,params[])
{
	new Float:XA,Float:YA,Float:ZA;
	GetPlayerPos(playerid, XA, YA, ZA);
	SendClientMessageEx(playerid,-1,"pos: %f,%f,%f",XA,YA,ZA);
	return 1;
}
/*CMD:gpsl(playerid, params[]) 
{
	new Float:X,Float:Y,Float:Z;
	if(sscanf(params, "fff",X,Y,Z)) return SendClientMessage(playerid, -1,"Syntax: /Gps [x],[y],[z] ");
	if(PlayerRoute[playerid][calculating]) 
	{ //ovo ce provjeravti dali je ruta kreirana
		SendClientMessage(playerid,-1,"Primero borra la ruta elegida. /gpsoff");
		return 1;
	}
	if(PlayerRoute[playerid][Destination] != -1) 
	{ 
		// este será un control de seguridad que no crea primero las rutas del jugador 2 para apagar la anterior
		DisableGPS(playerid);
	}
	new PlayerClosest = NearestPlayerNode(playerid); // Esto tomará el punto más cercano donde se encuentra el jugador
	new TempDestination = NearestNodeFromPoint(X,Y,Z); //esto es tomar el punto más cercano en ciertas coordenadas X, Y, Z
	
	if(PlayerClosest == TempDestination) 
	{ 	// si el jugador ya está en la tabla de posiciones
		    SendClientMessage(playerid,-1,"Ya estas en esta posicion.");
		    return 1;
	}
	if(PlayerClosest == -1) 
	{ 
		// Si el jugador está lejos del punto más cercano en el camino
		SendClientMessage(playerid,-1,"Los satélites no pueden encontrarlo en este lugar, salga de la mejor carretera.");
		return 1;
	}
	if(TempDestination == -1) 
	{ 
		// si el destino X, Y, Z está lejos del punto más cercano en la ruta
		SendClientMessage(playerid,-1,"Los satélites no pueden encontrar el destino, inténtalo de nuevo.");
		return 1;
	}
	if(CalculatePath(PlayerClosest,TempDestination,playerid, .GrabNodePositions = true)) 
	{ //si se crea la ruta
		PlayerRoute[playerid][calculating] = true;
		SendClientMessage(playerid,-1,"Creando la ruta, por favor espera.");
	}
	else 
	{ //si ocurre algún error ...
		SendClientMessage(playerid,-1,"Error desconocido, por favor intente de nuevo.");
	}
	return 1;
}
CcccccccccccccccccccccccccccccccxxcccccccccccccccccccccccccccccccccccccccccccMD:gpsoff(playerid, params[]) 
{
	if(PlayerRoute[playerid][Destination] == -1) return SendClientMessage(playerid,-1,"Vas GPS nije ukljucen.");
	SendClientMessage(playerid,-1,"Vas GSP je iskljucen!");
	DisableGPS(playerid);
	return 1;
}*/
RemoveFaccionLider(playerid,id)
{
	new DB_Query[74],owner_anterior;

	new DBResult:Resulta;
	format(DB_Query, sizeof DB_Query, "SELECT  `ID_LIDER` FROM `FACCIONES` WHERE `ID` = '%d';",id);
	Resulta = db_query(_DB_, DB_Query);
	if(db_num_rows(Resulta))
	{
		owner_anterior = db_get_field_assoc_int(Resulta, "ID_LIDER");
	}
	else SendClientMessageEx(playerid,-1,"Ocurrio un error al borrar al lider anterior de la faccion id: %d'%s'.",id,GetNameFaccionID(id));
	/**/
	db_free_result(Resulta);

	/*format(DB_Query, sizeof DB_Query, "UPDATE FROM `CUENTA` SET `FACCION` ='0' WHERE `ID` = '%d';",owner_anterior);
	db_query(Database, DB_Query);*/
	//===============================================================================
	new DBResult:Resulta_karen;
	format(DB_Query, sizeof DB_Query, "SELECT  `CONNECTED`,`PLAYERID` FROM `CUENTA` WHERE `ID` = '%d';", owner_anterior);
	Resulta_karen = db_query(Database, DB_Query);
	if(db_num_rows(Resulta_karen))
	{
		new connected, player_id;

		connected = db_get_field_assoc_int(Resulta_karen, "CONNECTED");
		player_id = db_get_field_assoc_int(Resulta_karen, "PLAYERID");

		if(connected == 1)
		{
			SendClientMessage(playerid,-1,"El jugador esta conectado y se le otorgo elimino lider automaticamente");
			if(IsPlayerConnected(player_id))
			{
				format(string2,sizeof(string2),"Te han eliminado el lider de la faccion: '%s'",GetNameFaccionID(ManageObjeto[playerid]));
				MensajesAyuda(player_id,string2);
			}	
		}
		else
		{
			SendClientMessage(playerid,-1,"El jugador no esta conectado pero cuando se conecte aparecera sin lider");
		}
	}
	else SendClientMessage(playerid, -1, "Error 420.");
	/**/
	db_free_result(Resulta);

	return 1;
}
LoadInfoFacciones()
{
	new id2,DBResult:qresult,loaded,count;
	qresult = db_query(_DB_,  "SELECT * FROM `FACCIONES`");
    count = db_num_rows(qresult);
    if(count == 0) return print("* No se cargo ninguna informacion de facciones.");
    for(new a=0;a<count;a++)
    {
    	id2 = db_get_field_assoc_int(qresult, "ID");
    	FACCIONES_INFO[id2][FACCION_ID] = id2;
		FACCIONES_INFO[id2][FACCION_LIDER] = db_get_field_assoc_int(qresult, "ID_LIDER");
		FACCIONES_INFO[id2][FACCION_SUB_LIDER] = db_get_field_assoc_int(qresult, "SUB_LIDER");
		 
		db_get_field_assoc(qresult, "NOMBRE",FACCIONES_INFO[id2][FACCION_NOMBRE], 25);
   		loaded++;
    	db_next_row(qresult);
    }
    db_free_result(qresult);
    printf("Se cargaron: %d faciones.", loaded);

	return 1;
}

CMD:casafaccion(playerid,params[])
{
	new id=FACCION_PLAYER[playerid][FACCION_ID];
	if(FACCION_PLAYER[playerid][ FACION_MIEMBRO ] != true ) return MensajesAyuda(playerid,"Tu no estas en una faccion");
	if(ENCASAFACCION[playerid] == -1) return SendClientMessage(playerid, -1,"No estas en ninguna casa de faccion");
	if(ENCASAFACCION[playerid] != id) return SendClientMessage(playerid, -1,"No estas en la casa de tu faccion");
	if(FACCIONES_INFO[ id ][FACCION_LIDER] == ACCOUNT_INFO[playerid][ac_ID] || FACCIONES_INFO[ id ][FACCION_SUB_LIDER] == ACCOUNT_INFO[playerid][ac_ID])
	{
		ShowPlayerDialog(playerid,DIALOG_CASAMENUFACCION,DIALOG_STYLE_LIST,"CASA FACCION","Mapear la casa\nCandado",">>","Cerrar");
	}
	else
	{
		return MensajesAyuda(playerid,"Tu no eres el lider/sublider de la faccion");
	}
	return 1;
}
CMD:managefaccion(playerid,params[])
{
	if(FACCION_PLAYER[playerid][ FACION_MIEMBRO ] != true ) return MensajesAyuda(playerid,"Tu no estas en una faccion");
	new id=FACCION_PLAYER[playerid][FACCION_ID];
	if(FACCIONES_INFO[ id ][FACCION_LIDER] == ACCOUNT_INFO[playerid][ac_ID] || FACCIONES_INFO[ id ][FACCION_SUB_LIDER] == ACCOUNT_INFO[playerid][ac_ID])
	{
		format(string2,sizeof(string2),"Faccion: '%s'",GetNameFaccionID(id));
		gsBigString[0] =EOS, gsString[0] =EOS;
		format(gsString,sizeof(gsString),"Invitar un miembro\n");
		strcat(gsBigString, gsString);
		format(gsString,sizeof(gsString),"Expulsar a un miembro\n");
		strcat(gsBigString, gsString);
		format(gsString,sizeof(gsString),"Informacion de la faccion\n");
		strcat(gsBigString, gsString);

		ShowPlayerDialog(playerid,DIALOG_MANAGE_PLAYER_FACC,DIALOG_STYLE_LIST,string2,gsBigString,">>","X");
	}
	else
	{
		return MensajesAyuda(playerid,"Tu no eres el lider/sublider de la faccion");
	}
	return 1;
}
CMD:expulsarfaccion(playerid,params[])
{
	new id=FACCION_PLAYER[playerid][FACCION_ID];
	if(FACCION_PLAYER[playerid][ FACION_MIEMBRO ] != true ) return MensajesAyuda(playerid,"Tu no estas en una faccion");
	if(FACCIONES_INFO[ id ][FACCION_LIDER] == ACCOUNT_INFO[playerid][ac_ID] || FACCIONES_INFO[ id ][FACCION_SUB_LIDER] == ACCOUNT_INFO[playerid][ac_ID])
	{
		new player;
		if(sscanf(params, "d",player)) return SendClientMessage(playerid, -1,"Syntax: /Expulsarfaccion [playerid] ");
		if(IsPlayerConnected(player))
		{
			if(FACCION_PLAYER[player][ FACION_MIEMBRO ] == false ) return MensajesAyuda(playerid,"El jugador no esta en una faccion");
			if(FACCION_PLAYER[playerid][FACCION_ID] != FACCION_PLAYER[player][FACCION_ID]) return SendClientMessage(playerid,-1,"Este jugador no esta en tu faccion");
			if(player == playerid) return SendClientMessage(playerid,-1,"No puedes usar esto contigo mismo");
			/**/
			new DB_Query[70];
			format(DB_Query, sizeof DB_Query, "UPDATE FROM `CUENTA` SET `FACCION` ='0' WHERE `ID` = '%d';",ACCOUNT_INFO[player][ac_ID]);
			db_query(Database, DB_Query);
			FACCION_PLAYER[player][ FACCION_ID ]=-1;
			FACCION_PLAYER[player][ FACION_MIEMBRO ] = false;
			/**/
			format(string2,sizeof(string2),"Te han expulsado de la faccion: %s",GetNameFaccionID(FACCION_PLAYER[playerid][ FACCION_ID ]));
			MensajeNotificacion(player,string2);
			SendClientMessageEx(player,-1,"Te han expulsado de la faccion: %s.",GetNameFaccionID(FACCION_PLAYER[playerid][ FACCION_ID ]));
			SendClientMessageEx(playerid,-1,"Expulsaste a: %s de la faccion: %s",PLAYER_TEMP[player][pt_NAME],GetNameFaccionID(FACCION_PLAYER[playerid][ FACCION_ID ]));
		}
		else SendClientMessage(playerid,-1,"El jugador no esta conectado");
	}
	else
	{
		return MensajesAyuda(playerid,"Tu no eres el lider/sublider de la faccion");
	}
	return 1;
}
CMD:invitarfaccion(playerid,params[])
{
	new id=FACCION_PLAYER[playerid][FACCION_ID];
	if(FACCION_PLAYER[playerid][ FACION_MIEMBRO ] != true ) return MensajesAyuda(playerid,"Tu no estas en una faccion");
	if(FACCIONES_INFO[ id ][FACCION_LIDER] == ACCOUNT_INFO[playerid][ac_ID] || FACCIONES_INFO[ id ][FACCION_SUB_LIDER] == ACCOUNT_INFO[playerid][ac_ID])
	{
		new player,Float:x,Float:y,Float:z;
		if(sscanf(params, "d",player)) return SendClientMessage(playerid, -1,"Syntax: /invitarfaccion [playerid] ");
		if(player == playerid) return SendClientMessage(playerid,-1,"No puedes usar esto contigo mismo");
		if(IsPlayerConnected(player))
		{
			if(InvitadoFaccion[player]==true) return SendClientMessage(playerid,-1,"El jugador ya fue invitado por alguien mas a una faccion");
			if(FACCION_PLAYER[player][ FACION_MIEMBRO ] == true ) return MensajesAyuda(playerid,"El jugador ya esta en una faccion");
			if(FACCION_PLAYER[playerid][FACCION_ID] == FACCION_PLAYER[player][FACCION_ID]) return SendClientMessage(playerid,-1,"Este jugador YA esta en tu faccion");
			GetPlayerPos(player, x,y,z);
			if(IsPlayerInRangeOfPoint(playerid, 5.0, x,y,z)) 
			{
				InvitadoFaccion[player]=true;
				InvitoAFaccion[playerid] = player;
				InvitadoPORFaccion[player] = playerid;
				SendClientMessageEx(player,-1,"{03C5DF}%s{FFFFFF} te invitar a unirte a la faccion {2BFF00}%s{FFFFFF}, para aceptar la invitacion usa {DBED15}/aceptar faccion",PLAYER_TEMP[playerid][pt_NAME],GetNameFaccionID(FACCION_PLAYER[playerid][ FACCION_ID ]));
				SendClientMessage(player,-1,"La oferta expira en 1 min");
				SendClientMessageEx(playerid,-1,"Invitaste a unirte a {03C5DF}%s{FFFFFF} a la faccion {2BFF00}%s{FFFFFF}.", PLAYER_TEMP[player][pt_NAME],GetNameFaccionID(FACCION_PLAYER[playerid][ FACCION_ID ]));
				SetTimerEx("InvitacionFaccionperdida",60000,false,"i",player);
			}
			else SendClientMessage(playerid,-1,"El jugador no esta serca de ti");
			
		}
		else SendClientMessage(playerid,-1,"El jugador no esta conectado");

	}
	else
	{
		return MensajesAyuda(playerid,"Tu no eres el lider/sublider de la faccion");
	}
	return 1;
}
CMD:facciones(playerid,params[])
{
	new string[138], DBResult:qresult, rows;
    format(string, sizeof(string), "SELECT `NOMBRE`,`ID_LIDER`,`SUB_LIDER` FROM `FACCIONES`");
    qresult = db_query(_DB_, string);
    rows = db_num_rows(qresult);
    if(rows)
    {
        new final_string[4096],id_lider,sub_id_lider;
        new text_lider[23],text_sub_lider[23],Name_Facc[25];
        new DBResult:Result;
        strcat(final_string, "#\tFaccion nombre:\tLider\tSub-Lider\n");
        for(new i = 0; i < rows; i ++)
        {
            db_get_field_assoc(qresult, "NOMBRE", Name_Facc, sizeof(Name_Facc));

            id_lider   = db_get_field_assoc_int(qresult, "ID_LIDER");
            sub_id_lider   = db_get_field_assoc_int(qresult, "SUB_LIDER");

            if(id_lider != -1)
            {
            	format(text_lider,sizeof(text_lider),"%s",GetNameCuentaID(id_lider));
            }
            else
            {
            	text_lider="Nadie";
            }
            /**/
            if(sub_id_lider != -1)
            {
            	format(text_sub_lider,sizeof(text_sub_lider),"%s",GetNameCuentaID(sub_id_lider));
            }
            else
            {
            	text_sub_lider="Nadie";
            }

            db_free_result(Result);
            format(string, sizeof(string), "%d\t%s\t%s\t%s\n",i+1, Name_Facc,text_lider,text_sub_lider);
            strcat(final_string, string);
            db_next_row(qresult);
        }
        ShowPlayerDialog(playerid,DIALOG_NULL, DIALOG_STYLE_TABLIST_HEADERS, "~ FACCIONES ~", final_string, "Cerrar", "");
        PlayerPlaySound(playerid, 1139, 0.0, 0.0, 0.0);
    }
    db_free_result(qresult);

	return 1;
}
CMD:managefacciones(playerid,params[])
{
	LevelAdmin( playerid, 6 );
    new string[800],query[256],DBResult:Result,did;
    new id_lider,sub_id_lider,text_lider[23],text_sub_lider[23];
    format(query,sizeof(query),"SELECT `NOMBRE`,`ID_LIDER`,`SUB_LIDER`,`ID` FROM `FACCIONES`");
    Result = db_query(_DB_,query);
    new name_fc[25];
    for(new i; i < db_num_rows(Result); i++)
    {
	    new text[1203];
        db_get_field_assoc(Result, "NOMBRE", name_fc, sizeof(name_fc));
        format(text,sizeof(text),"%s",name_fc);
        did   = db_get_field_assoc_int(Result, "ID");

        id_lider   = db_get_field_assoc_int(Result, "ID_LIDER");
        sub_id_lider   = db_get_field_assoc_int(Result, "SUB_LIDER");

        if(id_lider != -1)
        {
        	format(text_lider,sizeof(text_lider),"%s",GetNameCuentaID(id_lider));
        }
        else
        {
        	text_lider="Nadie";
        }
        /**/
        if(sub_id_lider != -1)
        {
        	format(text_sub_lider,sizeof(text_sub_lider),"%s",GetNameCuentaID(sub_id_lider));
        }
        else
        {
        	text_sub_lider="Nadie";
        } 

	    for(new l = 0; l < strlen(text); ++l)
	        if(text[l] == '{')
	            if(text[l+7] == '}')
	                strdel(text, l, l+8);

	    if(strlen(text) > 37)
	    {
	        strdel(text, 34, strlen(text));
	        strcat(text, "...", sizeof(text));
	    }
 
	    if(!i)
	        format(string, sizeof(string), "ID %d Faccion nombre: %s  | Lider: %s | SubLider: %s", did,text,text_lider,text_sub_lider);
	    else

	        format(string, sizeof(string), "%s\nID %d Faccion nombre: %s  | Lider: %s | SubLider: %s", string, did,text,text_lider,text_sub_lider);
        db_next_row(Result);
    }
    ShowPlayerDialog(playerid, DIALOG_MANAGEFACCIONES, DIALOG_STYLE_LIST, "| ADMINISTRAR FACCIONES |", string, ">>", "X");
    db_free_result(Result);
	return 1;
}

CoutMembersFromThisFacc(id)
{
	new Query1[60], DBResult: qresult;
	new count = 0;
	format(Query1, sizeof(Query1), "SELECT ID FROM `CUENTA` WHERE `FACCION` = '%d';",id);
	qresult = db_query(Database, Query1);
	count = db_num_rows(qresult);
	db_free_result(qresult);
	return count;
}

CoutMembersFromThisFaccOn(id)
{
	new Query1[80], DBResult: qresult;
	new count = 0;
	format(Query1, sizeof(Query1), "SELECT ID FROM `CUENTA` WHERE `FACCION` = '%d' AND `CONNECTED` ='1';",id);
	qresult = db_query(Database, Query1);
	count = db_num_rows(qresult);
	db_free_result(qresult);
	return count;
}

CoutMembersFromThisFaccOff(id)
{
	new Query1[80], DBResult: qresult;
	new count = 0;
	format(Query1, sizeof(Query1), "SELECT ID FROM `CUENTA` WHERE `FACCION` = '%d' AND `CONNECTED` ='0';",id);
	qresult = db_query(Database, Query1);
	count = db_num_rows(qresult);
	db_free_result(qresult);
	return count;
}
ShowInfoFaccion(playerid)
{
	gsBigString[0] =EOS, gsString[0] =EOS;
	
	format(gsString,sizeof(gsString),"{FFFFFF}Total Miembros:  \t%d\n",CoutMembersFromThisFacc(FACCION_PLAYER[playerid][FACCION_ID]));
	strcat(gsBigString, gsString);
	format(gsString,sizeof(gsString),"{FFFFFF}Miembros {56FF20}ONLINE{FFFFFF}:  \t%d\n",CoutMembersFromThisFaccOn(FACCION_PLAYER[playerid][FACCION_ID]));
	strcat(gsBigString, gsString);
	format(gsString,sizeof(gsString),"{FFFFFF}Miembros {F74226}OFFLINE{FFFFFF}: \t%d\n",CoutMembersFromThisFaccOff(FACCION_PLAYER[playerid][FACCION_ID]));
	strcat(gsBigString, gsString);
	format(gsString,sizeof(gsString),"{36F3C8}Ver miembros\n");
	strcat(gsBigString, gsString);

	ShowPlayerDialog(playerid,SHOW_MIEMBROS_FACC,DIALOG_STYLE_LIST,"INFO FACCION",gsBigString,">>","X");
	return 1;
}
ManageMemersFacc(playerid)
{
	new string[1820],query[256],DBResult:Result;
    format(query,sizeof(query),"SELECT  ID,NAME,CONNECTED FROM CUENTA WHERE FACCION='%d' ORDER BY ID * 1 DESC LIMIT 20 OFFSET %d",FACCION_PLAYER[playerid][FACCION_ID],PAGE[playerid]);
    Result = db_query(Database,query);
    new lineas;
    for(new i; i < db_num_rows(Result); i++)
    {
    lineas++;
    new text[256], labelid,contectado,status[21];
    db_get_field_assoc(Result, "NAME",text, 256);

    db_get_field_assoc(Result, "ID",query, 20); labelid = strval(query);
    db_get_field_assoc(Result, "CONNECTED",query, 20); contectado = strval(query);
    switch(contectado)
    {
    	case 0: status="{F74226}Desconectado";
    	case 1: status="{56FF20}Conectado";
    }
    for(new l = 0; l < strlen(text); ++l)
        if(text[l] == '{')
            if(text[l+7] == '}')
                strdel(text, l, l+8);

    if(strlen(text) > 37)
    {
        strdel(text, 34, strlen(text));
        strcat(text, "...", sizeof(text));
    }

    if(!i)
    format(string, sizeof(string), "{ffffff}ID %d {ffffff}Nombre: %s%s {ffffff}| Conectado: %s{ffffff}\n", labelid,GetRandomHexa(),text,status);
    else
    format(string, sizeof(string), "%s\n{ffffff}ID %d {ffffff}Nombre: %s%s {ffffff}| Conectado: %s{ffffff}\n", string, labelid,GetRandomHexa(),text,status);
    db_next_row(Result);
    }
    strcat(string, "{00FFFF}Cerrar el dialogo (X)");
    PAGINA[playerid] = lineas;
    ShowPlayerDialog(playerid, MANAGEMEMERFACC, DIALOG_STYLE_LIST, "| Miembros de tu faccion |", string, ">>", "+ Miembros");
    db_free_result(Result);
	return 1;
}
CMD:aceptar(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_JAIL || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1,"No puedes usar eso en este momento");

	new item[32],Float:X,Float:Y,Float:Z;
	if(IsPlayerConnected(playerid))
	if(sscanf(params, "s[50]", item)) return 1;
	{
		if(strcmp(item,"proteccion", true) == 0)
		{
			if(ACCOUNT_INFO[playerid][ac_LEVEL] < 2) return SendClientMessage(playerid, -1, "Necesitas ser nivel 2 para aceptar una proteccion");
			if(GuardaEspalda[playerid] == INVALID_PLAYER_ID) return SendClientMessage(playerid,-1,"No te han ofrecido ninguna protección");
			GetPlayerPos(GuardaEspalda[playerid], X,Y,Z);
			if(CHARACTER_INFO[playerid][ch_CASH] < dineropedido[playerid]) return SendClientMessage(playerid,-1,"No tienes suficiente dinero");
			if(!IsPlayerInRangeOfPoint(playerid, 4.0, X,Y,Z)) return SendClientMessage(playerid,-1,"No estas cerca del vendedor");
			{
				new pName[32],pName2[32];
				GetPlayerName(GuardaEspalda[playerid], pName, 32);
				GetPlayerName(playerid, pName2, 32);
				 
				GivePlayerCash(playerid,-dineropedido[playerid]);
				GivePlayerCash(GuardaEspalda[playerid],dineropedido[playerid]);

				new Float:armadura;
			    GetPlayerArmour(playerid,armadura);
			    if(armadura <= 50)
			    {
			        SetPlayerArmourEx(playerid,armadura+50);
			    }
			    else if(armadura >= 50 && armadura <= 100)
			    {
			        SetPlayerArmourEx(playerid,100);
			    }

			    GameTextForPlayer(playerid,"~n~~n~~n~~g~+ 50 de armadura", 4000,3);

			    format(string2,sizeof(string2),"~n~~n~~n~~y~~h~Armadura vendida~n~~g~+ $ %d",dineropedido[playerid]);
			    GameTextForPlayer(GuardaEspalda[playerid],string2,5000,3);

				new str_text[190];
				format(str_text, 190,  " %s acepta la protección de %s",pName2,pName);
				ProxDetector(playerid, 15.0, str_text, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5, 85);

				GuardaEspalda[playerid] = INVALID_PLAYER_ID;

				PLAYER_SKILLS[ GuardaEspalda[playerid] ][WORK_PROTECTOR] ++;
			}
		}
		/**/
		if(strcmp(item,"faccion", true) == 0)
		{
			if(InvitadoFaccion[playerid]==true)
			{
				new id=InvitadoPORFaccion[playerid];
				new DB_Query[80];
				format(DB_Query, sizeof DB_Query, "UPDATE `CUENTA` SET `FACCION` ='%d' WHERE `ID` = '%d';",FACCION_PLAYER[ id ][ FACCION_ID ],ACCOUNT_INFO[playerid][ac_ID]);
				db_query(Database, DB_Query);
				FACCION_PLAYER[playerid][ FACCION_ID ]= FACCION_PLAYER[ id ][ FACCION_ID ];
				FACCION_PLAYER[playerid][ FACION_MIEMBRO ] = true;
				InvitadoFaccion[playerid]=false;
				InvitoAFaccion[id] = -1;
				InvitadoPORFaccion[playerid] = -1;
				format(string2,sizeof(string2),"Te has unido a la faccion: %s",GetNameFaccionID(FACCION_PLAYER[playerid][ FACCION_ID ]));
				MensajeNotificacion(playerid,string2);
				SendClientMessageEx(playerid,-1,"Has entrado a la faccion: %s.",GetNameFaccionID(FACCION_PLAYER[playerid][ FACCION_ID ]));

				SendClientMessageEx(id,-1,"%s acepto tu invitacion para unirte a la faccion: %s",PLAYER_TEMP[playerid][pt_NAME],GetNameFaccionID(FACCION_PLAYER[playerid][ FACCION_ID ]));

			}	
			else
			{
				SendClientMessage(playerid,-1,"No has sido invitado por nadie a una faccion");
			}
		}
	}
	return 1;
}


CMD:mimundo(playerid,params[])
{
	return SendClientMessageEx(playerid,-1,"Tu mundo virtual es: %d",GetPlayerVirtualWorld(playerid));
}
CMD:desrentar(playerid,params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);
	if(IsPlayerInVehicle(playerid, vehicleid) == 0) return SendClientMessage(playerid,-1,"Debes estar en el vehiculo");

	if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_TYPE] != VEHICLE_TYPE_RENT) return SendClientMessage(playerid,-1,"????");
	if(GLOBAL_VEHICLES[vehicleid][RENT_OWNER] != ACCOUNT_INFO[playerid][ac_ID]) return SendClientMessage(playerid,-1,"Tu no has rentado este vehiculo");
	

	RestablecerVehiculoRenta(VEHICLERENT[playerid]);
	HideRentVehicle(playerid);

	return 1;
}

CMD:crearactor(playerid,params[])
{
	LevelAdmin(playerid,5);
	new Skin_,Nombrea_[25],Animacion_;
	if(sscanf(params, "ds[25]d",Skin_,Nombrea_,Animacion_)) return SendClientMessage(playerid, -1,"/crearactor [Skin] [Nombre] [Animacion 1-2-3-4-5-6-7-8-9].");
	//new id = Iter_Free(Personajes);
	 /**/
 	new DBResult:Result2,id,DB_Query[200];
	format(DB_Query, sizeof(DB_Query), "SELECT ID, MAX(`ID`) FROM `PERSONAjES` WHERE ID");
	Result2 = db_query(_DB_, DB_Query);
 	if(db_num_rows(Result2))
  	{
   		db_get_field_assoc(Result2, "ID", DB_Query, 45); id = strval(DB_Query);
	}
	db_free_result(Result2);
    /**/

	new Float:Posicion[3], Float:Angleas;
    GetPlayerPos(playerid, Posicion[0], Posicion[1], Posicion[2]);
    SetPlayerPos(playerid, Posicion[0], Posicion[1], Posicion[2]);
    GetPlayerFacingAngle(playerid, Angleas);

    format(PERSONAJES[id][NOMBRE],24,"%s",Nombrea_);
    PERSONAJES[id][SKIN]=Skin_;
    PERSONAJES[id][PosX]=Posicion[0];
    PERSONAJES[id][PosY]=Posicion[1];
    PERSONAJES[id][PosZ]=Posicion[2];
    PERSONAJES[id][ANGLE]=Angleas;
    PERSONAJES[id][MUNDO]=GetPlayerVirtualWorld(playerid);
    PERSONAJES[id][INTERIOR]=GetPlayerInterior(playerid);
    PERSONAJES[id][ID] = CreateDynamicActor(PERSONAJES[id][SKIN], PERSONAJES[id][PosX],PERSONAJES[id][PosY],PERSONAJES[id][PosZ],PERSONAJES[id][ANGLE],PERSONAJES[id][MUNDO],PERSONAJES[id][INTERIOR]);
    SetDynamicActorInvulnerable(PERSONAJES[id][ID],true);
    SetDynamicActorHealth(PERSONAJES[id][ID],100);
    switch(Animacion_)
    {
    	case 1:ApplyDynamicActorAnimation(PERSONAJES[id][ID], "RAPPING", "Laugh_01", 4.1, 1, 0, 0, 0, 0); // reir
    	case 2:ApplyDynamicActorAnimation(PERSONAJES[id][ID], "PED", "IDLE_chat", 4.1, 1, 0, 0, 0, 0); // hablar
    	case 3:ApplyDynamicActorAnimation(PERSONAJES[id][ID], "RAPPING", "RAP_B_Loop", 4.1, 1, 0, 0, 0, 0); // rapear
    	case 4:ApplyDynamicActorAnimation(PERSONAJES[id][ID], "ON_LOOKERS", "shout_02", 4.1, 1, 0, 0, 0, 0); // alentar
    }

    new label[256];
	format(label, sizeof(label), "{A4A4A4}ID (%d)\n%s%s",id,GetRandomHexa(),Nombrea_);
	PERSONAJES[id][LABEL] = CreateDynamic3DTextLabel(label, 0xFFFFFFFF, PERSONAJES[id][PosX],PERSONAJES[id][PosY],PERSONAJES[id][PosZ]+0.9, 20.0);

	//Iter_Add(Personajes, id);
	new Query[350];
	format(Query, sizeof(Query), "INSERT INTO `PERSONAJES` (`X`,`Y`,`Z`,`A`,`NOMBRE`,`ANIM`,`INTERIOR`,`MUNDO`,`SKIN`) VALUES ('%f','%f','%f','%f','%s','%d','%d','%d','%d')",
	Posicion[0],Posicion[1],Posicion[2],Angleas,Nombrea_,Animacion_,PERSONAJES[id][INTERIOR],PERSONAJES[id][MUNDO],Skin_);
	db_query(_DB_, Query);
	return 1;
}
CMD:manageradares(playerid,params[])
{
	LevelAdmin(playerid,5);
	new string[1000],query[256],DBResult:Result,radarid,karennn;
    format(query,sizeof(query),"SELECT * FROM `RADAR`");
    Result = db_query(_DB_,query);

    for(new i; i < db_num_rows(Result); i++)
    {
	    new text[256];
	    db_get_field_assoc(Result, "SPEED",query, 20);
	    karennn = strval(query);
	    db_get_field_assoc(Result, "ID",query, 20);
	    radarid = strval(query);
	    new Float:pos[3];
	    pos[0] = db_get_field_assoc_float(Result, "X");
        pos[1] = db_get_field_assoc_float(Result, "Y");
        pos[2] = db_get_field_assoc_float(Result, "Z");

	    format(text,sizeof(text),"%.2f",(GetPlayerDistanceFromPoint(playerid, pos[0], pos[1], pos[2]) * 0.01));

	    for(new l = 0; l < strlen(text); ++l)
	        if(text[l] == '{')
	            if(text[l+7] == '}')
	                strdel(text, l, l+8);

	    if(strlen(text) > 37)
	    {
	        strdel(text, 34, strlen(text));
	        strcat(text, "...", sizeof(text));
	    }

	    if(!i)
	        format(string, sizeof(string), "ID %d Distancia de ti: %s | Velocidad de chequeo: %d", radarid,text,karennn);
	    else

	        format(string, sizeof(string), "%s\nID %d Distancia de ti: %s | Velocidad de chequeo: %d",string,radarid,text,karennn);
        db_next_row(Result);
    }

    ShowPlayerDialog(playerid, MANAGE_RADARES, DIALOG_STYLE_LIST, "| RADARES |", string, ">>", "Cerrar");
    db_free_result(Result);
	return 1;
}
CMD:crearadar(playerid,params[])
{
	LevelAdmin(playerid,5);
	new Float: x, Float: y, Float: z;
	GetPlayerPos(playerid, x, y, z);
	GetXYInFrontOfPlayer(playerid, x, y, 1.0);
	new Query[245],DB_Query[200];
	format(Query, sizeof(Query),
    "INSERT INTO `RADAR` (`X`,`Y`,`Z`,`RX`,`RY`,`RZ`) VALUES ('%f','%f','%f','0','0','0')",x, y, z);
    db_query(_DB_, Query);


 	new DBResult:Result2,radarid;
	format(DB_Query, sizeof(DB_Query), "SELECT ID, MAX(`ID`) FROM `RADAR` WHERE ID");
	Result2 = db_query(_DB_, DB_Query);
 	if(db_num_rows(Result2))
  	{
   		db_get_field_assoc(Result2, "ID", DB_Query, 45); radarid = strval(DB_Query);
	}
	db_free_result(Result2);

	RADARESDEVELOCIDAD[radarid][PosX]=x;
	RADARESDEVELOCIDAD[radarid][PosY]=y;
	RADARESDEVELOCIDAD[radarid][PosZ]=z;
	SaveIDRADAR[playerid]=radarid;
	RADARESDEVELOCIDAD[radarid][OBJETOID] = CreateDynamicObject(18880,RADARESDEVELOCIDAD[radarid][PosX],RADARESDEVELOCIDAD[radarid][PosY],RADARESDEVELOCIDAD[radarid][PosZ],0,0,0);
	EditDynamicObject(playerid,RADARESDEVELOCIDAD[radarid][OBJETOID]);
	EditandoRadarMake[playerid]=true;
	return 1;
}
 
CMD:crearcasa(playerid, params[])
{
	LevelAdmin(playerid, 6);
	PLAYER_TEMP[playerid][MAKECASA]=1;
	SendClientMessage(playerid,-1,"Ve a la posicion de la casa y precionsa CLICK");
	return 1;
}

CMD:crearapartamento(playerid, params[])
{
	LevelAdmin(playerid, 6);
	PLAYER_TEMP[playerid][MAKEAPARTAMENTO]=1;
	SendClientMessage(playerid,-1,"Ve a la posicion del apartamento y precionsa CLICK");
	return 1;
}

 
//CAsas

CMD:mapcasa(playerid,params[])
{
    new Float: pos[4],Float:pos_[4];
	GetPlayerPos(playerid, pos[0], pos[1], pos[2]);

	new string[820],query[256],DBResult:Result,player_duenoid; 
    format(query,sizeof(query),"SELECT X,Y,Z,PLAYER,ID FROM CASASVIP WHERE PLAYER = '%d';",ACCOUNT_INFO[playerid][ac_ID]);
    Result = db_query(_DB_,query);
    for(new i; i < db_num_rows(Result); i++)
    {
    new text[256], labelid;
    db_get_field_assoc(Result, "PLAYER",query, 20); player_duenoid = strval(query);

    format(text,sizeof(text),"%s",GetNameCuentaID(player_duenoid));
    db_get_field_assoc(Result, "ID",query, 20); labelid = strval(query);

	pos_[0] = db_get_field_assoc_float(Result, "X");
	pos_[1] = db_get_field_assoc_float(Result, "Y");
	pos_[2] = db_get_field_assoc_float(Result, "Z");


    for(new l = 0; l < strlen(text); ++l)
        if(text[l] == '{')
            if(text[l+7] == '}')
                strdel(text, l, l+8);

    if(strlen(text) > 37)
    {
        strdel(text, 34, strlen(text));
        strcat(text, "...", sizeof(text));
    }

    if(!i)
    format(string, sizeof(string), "ID %d | Distancia: %.1f m", labelid,GetPlayerDistanceFromPoint(playerid, pos_[0], pos_[1],pos_[2] * 0.01));
    else
    format(string, sizeof(string), "%s\nID %d | Distancia: %.1f m", string, labelid,GetPlayerDistanceFromPoint(playerid, pos_[0], pos_[1],pos_[2] * 0.01));
    db_next_row(Result);
    }
    ShowPlayerDialog(playerid, DIALOG_MAPEARCASA, DIALOG_STYLE_LIST, "| TUS CASAS |", string, ">>", "X");
    db_free_result(Result);
    SendClientMessage(playerid,-1,"* Selecciona la casa a la que vas a mapear");
	return 1;
}

CMD:casa(playerid,params[])
{
	if(ENCASAVIP[playerid]==-1) return 1;
	ShowHouseMenu(playerid);
	return 1;
}
CMD:addmueble(playerid,params[])
{
    LevelAdmin( playerid, 6 );
    ShowPlayerDialog(playerid,DIALOG_ADDMUEBLE,DIALOG_STYLE_INPUT,"| AGREGAR MUEBLE |","Ingresa la id del objeto que deseas agregar a la lista, la id debe ser exacta o podria crashear a jugadores",">>","Cerrar");
	return 1;
}

CMD:addobjetocasa(playerid,params[])
{
    LevelAdmin( playerid, 6 );
    ShowPlayerDialog(playerid,DIALOG_ADDMAPA,DIALOG_STYLE_INPUT,"| AGREGAR OBJETO |","Ingresa la id del objeto que deseas agregar a la lista, la id debe ser exacta o podria crashear a jugadores",">>","Cerrar");
	return 1;
}
CMD:managemuebles(playerid,params[])
{
	LevelAdmin(playerid,5);
	new string[1820],query[256],DBResult:Result;
    format(query,sizeof(query),"SELECT * FROM MAPEOSCASAVIP DESC limit 20 OFFSET %d", PAGE[playerid]);
    Result = db_query(_DB_,query);
    new lineas;
    for(new i; i < db_num_rows(Result); i++)
    {
    lineas++;
    new text[256], labelid;
    db_get_field_assoc(Result, "NOMBRE",text, 256);
    db_get_field_assoc(Result, "ID",query, 20);
    labelid = strval(query);
    for(new l = 0; l < strlen(text); ++l)
        if(text[l] == '{')
            if(text[l+7] == '}')
                strdel(text, l, l+8);

    if(strlen(text) > 37)
    {
        strdel(text, 34, strlen(text));
        strcat(text, "...", sizeof(text));
    }

    if(!i)
    format(string, sizeof(string), "ID %d (Objeto mueble: %s)\n", labelid,text);
    else
    format(string, sizeof(string), "%s\nID %d (Objeto mueble: %s)\n", string, labelid,text);
    db_next_row(Result);
    }
    strcat(string, "{00FFFF}Cerrar el dialogo (X)");
    PAGINA[playerid] = lineas;
    ShowPlayerDialog(playerid, DIALOG_MANAGEOBJETOSMUEBLESAD, DIALOG_STYLE_LIST, "| OBJETOS MUEBLES |", string, ">>", "+ Muebles");
    db_free_result(Result);
	return 1;
}
//
CMD:darinventario(playerid,params[])
{
	if(ACCOUNT_INFO[playerid][ac_ID]== 0) return 1;
	if(Equiped_Inventary[playerid][VALID_EQUIPED] == true) return MensajesAyuda(playerid,"Guarda lo que tienes equipado para dar algo de tu inventario");
	new string[2000],query[256],DBResult:Result,tipos_,estado_,equipado_[256],status_;
    format(query,sizeof(query),"SELECT * FROM INVENTARIO WHERE PLAYER = '%d' ",ACCOUNT_INFO[playerid][ac_ID]);
    Result = db_query(Database,query);
    for(new i; i < db_num_rows(Result); i++)
    {
    new text[256], labelid;
    db_get_field_assoc(Result, "TIPO",query, 20); 		tipos_ = strval(query);
    db_get_field_assoc(Result, "ID",query, 20);			labelid = strval(query);
    db_get_field_assoc(Result, "ESTADO",query, 20);		estado_ = strval(query);
    db_get_field_assoc(Result, "EQUIPADO",query, 20);	status_ = strval(query);
    switch(status_)
    {
    	case 0: equipado_="No";
    	case 1: equipado_="Si";
    }
    format(text,sizeof(text),"%s",INVENTARIOPLAYER[ tipos_ ][NOMBRE]);
    for(new l = 0; l < strlen(text); ++l)
        if(text[l] == '{')
            if(text[l+7] == '}')
                strdel(text, l, l+8);

    if(strlen(text) > 37)
    {
        strdel(text, 34, strlen(text));
        strcat(text, "...", sizeof(text));
    }

   	if(INVENTARIOPLAYER[ tipos_ ][LIMITED]==true)
   	{
	    if(!i)
	    format(string, sizeof(string), "{000000}ID %d {58FAF4}(%s) {FFFFFF}| Estado: {58FAF4}USO ILIMITADO {FFFFFF}| Equipado: {58FAF4}%s\n", labelid,text,equipado_);
	    else
	    format(string, sizeof(string), "%s\n{000000}ID %d {58FAF4}(%s) {FFFFFF}| Estado: {58FAF4}USO ILIMITADO {FFFFFF}| Equipado {58FAF4}%s\n", string, labelid,text,equipado_);
   	}
   	else
   	{
   		if(!i)
	    format(string, sizeof(string), "{000000}ID %d {58FAF4}(%s) {FFFFFF}| Estado: {58FAF4}%d {FFFFFF}usos restantes | Equipado: {58FAF4}%s\n", labelid,text,estado_,equipado_);
	    else
	    format(string, sizeof(string), "%s\n{000000}ID %d {58FAF4}(%s) {FFFFFF}| Estado: {58FAF4}%d {FFFFFF}usos restantes | Equipado {58FAF4}%s\n", string, labelid,text,estado_,equipado_);
   	}

    db_next_row(Result);
    }
   	format(string2,sizeof(string2),"{ffffff}| DAR INVENTARIO: ");
    ShowPlayerDialog(playerid, DIALOG_DAR_INVENTARIO, DIALOG_STYLE_LIST,string2, string, "Seguir", "Cerrar");
    db_free_result(Result);
	return 1;
}
CMD:editp(playerid, params[])
{
	SendClientMessage(playerid,-1,"Debes tener la prenda en el inventario para que puedas editarla");
	ShowInvetaryPlayer(playerid);
	return 1;
}

ShowInvetaryPlayer(playerid)
{
	if(ACCOUNT_INFO[playerid][ac_ID]== 0) return 1;

	new string[2000],query[256],DBResult:Result,tipos_;
    format(query,sizeof(query),"SELECT * FROM INVENTARIO WHERE PLAYER = '%d' ",ACCOUNT_INFO[playerid][ac_ID]);
    Result = db_query(Database,query);

    for(new i; i < db_num_rows(Result); i++)
    {

    new text[256], labelid;
    //db_get_field_assoc(Result, "Nombre",text, 256);
    db_get_field_assoc(Result, "TIPO",query, 20); 		tipos_ = strval(query);
    db_get_field_assoc(Result, "ID",query, 20);			labelid = strval(query);

    format(text,sizeof(text),"%s",INVENTARIOPLAYER[ tipos_ ][NOMBRE]);
    for(new l = 0; l < strlen(text); ++l)
        if(text[l] == '{')
            if(text[l+7] == '}')
                strdel(text, l, l+8);

    if(strlen(text) > 37)
    {
        strdel(text, 34, strlen(text));
        strcat(text, "...", sizeof(text));
    }

    if(INVENTARIOPLAYER[ tipos_ ][TIPODECONSUMO] == TYPE_ACCESORIO)
    {
	    format(string, sizeof(string), "%s\n{000000}ID %d {58FAF4}(%s)\n", string, labelid,text);
	}
    db_next_row(Result);
    }

   	format(string2,sizeof(string2),"{ffffff}| Editar prendas |");
    ShowPlayerDialog(playerid, DIALOG_MANAGEINVETARY, DIALOG_STYLE_LIST,string2, string, "Seguir", "Cerrar");
    db_free_result(Result);

	return 1;
}
CMD:changeiva(playerid,params[])
{
	if(GetPlayerNegocios(playerid)== 0) return MensajesAyuda(playerid,"No eres propietario de ningun negocio");
 	if(InNegocio[playerid]==-1) return MensajesAyuda(playerid,"No estas en dentro de ningun negocio");
	new Float:iva_;
	new id=InNegocio[playerid];

	if(NEGOCIO[id][EmpresaDueno] != ACCOUNT_INFO[playerid][ac_ID]) return MensajesAyuda(playerid,"No eres propietario de este negocio");
	if(sscanf(params, "f",iva_))
	{
		SendClientMessage(playerid, -1, "* Iva invalido, ejemplo 0.15 | 0.10 | 0.5");
		ManageNogicio247Player(playerid, id);
		return 1;
	}
	if(iva_ < 0) return SendClientMessage(playerid,-1,"El iva no puede ser menor a 0");
	if(iva_ > 50) return SendClientMessage(playerid,-1,"El iva no puede ser mayor a 50");
	NEGOCIO[id][Iva]=iva_;
	MensajesAyuda(playerid,"Iva cambiado al negocio");
	ManageNogicio247Player(playerid, id);
	new DB_Query[100];
	format(DB_Query,sizeof(DB_Query), "UPDATE `NEGOCIOS` SET `IVA` = '%f' WHERE ID = '%d';",iva_,InNegocio[playerid]);
	db_query(_DB_, DB_Query);
	return 1;
}
CMD:negocio(playerid,params[])
{
 	if(GetPlayerNegocios(playerid)== 0) return MensajesAyuda(playerid,"No eres propietario de ningun negocio");
 	if(InNegocio[playerid]==-1) return MensajesAyuda(playerid,"No estas dentro de ningun negocio");
 	new id=InNegocio[playerid];
 	if(NEGOCIO[id][EmpresaDueno] != ACCOUNT_INFO[playerid][ac_ID]) return MensajesAyuda(playerid,"No eres propietario de este negocio");
 	ManageNogicio247Player(playerid, id);
 
 	return 1;
}
ManageNogicio247Player(playerid, id)
{
	if(NEGOCIO[id][SeVende]== 0) return MensajesAyuda(playerid,"Este negocio esta a la venta");
	if(NEGOCIO[id][EmpresaDueno] == ACCOUNT_INFO[playerid][ac_ID])
	{
		gsBigString[0] =EOS, gsString[0] =EOS;
		strcat(gsBigString, "ITEM:\tESTADO:\n");
		format(gsString,sizeof(gsString),"Cambiar IVA:\t%f\n",NEGOCIO[id][Iva]);
		strcat(gsBigString, gsString);
		format(gsString,sizeof(gsString),"Vender negocio\t-\n",NEGOCIO[id][Iva]);
		strcat(gsBigString, gsString);
		format(gsString,sizeof(gsString),"Retirar dinero de la caja fuerte\t%d\n",NEGOCIO[id][Ganancia]);
		strcat(gsBigString, gsString);
		ShowPlayerDialog(playerid,DIALOG_NEGOCIO247MANAGE, DIALOG_STYLE_TABLIST_HEADERS, "| NEGOCIO |", gsBigString, "Seguir", "Cerrar");
	}
	else
	{
		MensajesAyuda(playerid,"No eres el propietario de este negocio");
	}
 	return 1;
}
//Sistema apartamentos
EnviaraApartamento(playerid, id)
{
	if(!Iter_Contains(Apartamentos, id)) return 0;
    ENAPARTAMENTO[playerid] = id;

    switch(APARTAMENTO[id][INTERIOR])
    {
    	case 1:SetPlayerPosEx(playerid,-240.7768, 2319.3252, 350.2729,92.4585, 0, id,true);
    	case 2:SetPlayerPosEx(playerid,1810.0408, -1308.2994, 931.7675,355.6939, 0, id,true);
    }

    if(APARTAMENTO[id][CasaDuenoID] == ACCOUNT_INFO[playerid][ac_ID])
    {
    	MensajesAyuda(playerid,"Bienvenido a tu apartamento presiona ~y~H~w~ para ver el menu");
    	return 1;
    }
    if(GetKeysFromThisApartament(playerid,id) == 1)
    {
    	format(string2,sizeof(string2),"Bienvenido al apartamento de %s presiona ~y~H~w~ para ver el menu",GetNameCuentaID(APARTAMENTO[id][CasaDuenoID]));
    	MensajesAyuda(playerid,string2);
    	return 1;
    }
    else
    {
    	format(string2,sizeof(string2),"Bienvenido al apartamento de %s",GetNameCuentaID(APARTAMENTO[id][CasaDuenoID]));
    	MensajesAyuda(playerid,string2);
    }

    new Query[100];
    format(Query,sizeof(Query),"UPDATE `INTOPOS` SET ENAPARTAMENTO = '%d' WHERE `PLAYER` = '%d';",ENAPARTAMENTO[playerid], ACCOUNT_INFO[playerid][ac_ID]);
    db_query(Database, Query);
	return 1;
}
//Sistema de casas VIP
EnviaraLaCasa(playerid, id)
{
	if(!Iter_Contains(Casasvip, id)) return 0;
    ENCASAVIP[playerid] = id;

    switch(CASAVIP[id][INTERIOR])
    {
    	case 1:SetPlayerPosEx(playerid,1258.2179,240.7018,598.4999,92.4585, 0, id,true);
    	case 2:SetPlayerPosEx(playerid,1896.0762,-36.2557,639.1824,355.6939, 0, id,true);
    }

    if(CASAVIP[id][CasaDuenoID] == ACCOUNT_INFO[playerid][ac_ID])
    {
    	MensajesAyuda(playerid,"Bienvenido a tu casa Presiona ~y~H~w~ para ver el menu");
    	return 1;
    }
    if(GetKeysFromThisHouseVip(playerid,id) == 1)
    {
    	format(string2,sizeof(string2),"Bienvenido a la casa de %s Presiona ~y~H~w~ para ver el menu",GetNameCuentaID(CASAVIP[id][CasaDuenoID]));
    	MensajesAyuda(playerid,string2);
    	return 1;
    }
    else
    {
    	format(string2,sizeof(string2),"Bienvenido a la casa de %s",GetNameCuentaID(CASAVIP[id][CasaDuenoID]));
    	MensajesAyuda(playerid,string2);
    }

    new Query[100];
    format(Query,sizeof(Query),"UPDATE `INTOPOS` SET ENCASAVIP = '%d' WHERE `PLAYER` = '%d';",ENCASAVIP[playerid], ACCOUNT_INFO[playerid][ac_ID]);
    db_query(Database, Query);
	return 1;
}

GetKeysFromThisApartament(playerid, id)
{
	new isv,DBResult:Result,Query[256];
	format(Query, sizeof(Query), "SELECT * FROM `KEYSAPARTAMENTOS` WHERE `PLAYER` = '%d' AND `APARTAMENTOID` = '%d'",ACCOUNT_INFO[playerid][ac_ID],id);
    Result = db_query(_DB_, Query);
	if(db_num_rows(Result))
    {
		isv =1;
    }
    else
    {
        isv = 0;
    }
    db_free_result(Result);
	return isv;	
}
GetKeysFromThisHouseVip(playerid, id)
{
	new isv,DBResult:Result,Query[256];
	format(Query, sizeof(Query), "SELECT * FROM `KEYSCASAVIP` WHERE `PLAYER` = '%d' AND `CASAIDKEY` = '%d'",ACCOUNT_INFO[playerid][ac_ID],id);
    Result = db_query(_DB_, Query);
	if(db_num_rows(Result))
    {
		isv =1;
    }
    else
    {
        isv = 0;
    }
    db_free_result(Result);
	return isv;
}
forward IsPlayerNearGaraje(playerid);
public IsPlayerNearGaraje(playerid)
{
	new Float:Distance;
	for(new prop; prop<MAX_CASAS_VIP; prop++ )
	{
	    Distance = GetPosGaraje(playerid,prop);
	    if(Distance < 2.0 )
	    {
	        return prop;
		}
	}
	return -1;
}

public Float:GetPosGaraje(playerid,Garajeid)
{
	new Float:x1,Float:y1,Float:z1;
	new Float:x2, Float:y2, Float:z2;
	GetPlayerPos(playerid,x1,y1,z1);
	x2 = CASAVIP[Garajeid][GARAJEX];
	y2 = CASAVIP[Garajeid][GARAJEY];
	z2 = CASAVIP[Garajeid][GARAJEZ];
	return floatsqroot(floatpower(floatabs(floatsub(x2,x1)),2)+floatpower(floatabs(floatsub(y2,y1)),2)+floatpower(floatabs(floatsub(z2,z1)),2));
}




forward IsPlayerInApartamento(playerid);
public IsPlayerInApartamento(playerid)
{
	new Float:Distance;
	for(new prop; prop<MAX_APARTAMENTOS; prop++ )
	{
	    Distance = GetPosApartamento(playerid,prop);
	    if(Distance < 1.0 )
	    {
	        return prop;
		}
	}
	return -1;
}


public Float:GetPosApartamento(playerid,Property)
{
	new Float:x1,Float:y1,Float:z1;
	new Float:x2, Float:y2, Float:z2;
	GetPlayerPos(playerid,x1,y1,z1);
	x2 = APARTAMENTO[Property][CasaX];
	y2 = APARTAMENTO[Property][CasaY];
	z2 = APARTAMENTO[Property][CasaZ];
	return floatsqroot(floatpower(floatabs(floatsub(x2,x1)),2)+floatpower(floatabs(floatsub(y2,y1)),2)+floatpower(floatabs(floatsub(z2,z1)),2));
}


forward IsPlayerInCasaFaccion(playerid);
public IsPlayerInCasaFaccion(playerid)
{
	new Float:Distance;
	for(new prop; prop<MAX_FACCIONES; prop++ )
	{
	    Distance = GetPosCasaFaccion(playerid,prop);
	    if(Distance < 1.0 )
	    {
	        return prop;
		}
	}
	return -1;
}


public Float:GetPosCasaFaccion(playerid,casacf)
{
	new Float:x1,Float:y1,Float:z1;
	new Float:x2, Float:y2, Float:z2;
	GetPlayerPos(playerid,x1,y1,z1);
	x2 = CASAFACCION[casacf][PosX];
	y2 = CASAFACCION[casacf][PosY];
	z2 = CASAFACCION[casacf][PosZ];
	return floatsqroot(floatpower(floatabs(floatsub(x2,x1)),2)+floatpower(floatabs(floatsub(y2,y1)),2)+floatpower(floatabs(floatsub(z2,z1)),2));
}


forward IsPlayerInCasaVip(playerid);
public IsPlayerInCasaVip(playerid)
{
	new Float:Distance;
	for(new prop; prop<MAX_CASAS_VIP; prop++ )
	{
	    Distance = GetPosCasaVip(playerid,prop);
	    if(Distance < 1.0 )
	    {
	        return prop;
		}
	}
	return -1;
}


public Float:GetPosCasaVip(playerid,Property)
{
	new Float:x1,Float:y1,Float:z1;
	new Float:x2, Float:y2, Float:z2;
	GetPlayerPos(playerid,x1,y1,z1);
	x2 = CASAVIP[Property][CasaX];
	y2 = CASAVIP[Property][CasaY];
	z2 = CASAVIP[Property][CasaZ];
	return floatsqroot(floatpower(floatabs(floatsub(x2,x1)),2)+floatpower(floatabs(floatsub(y2,y1)),2)+floatpower(floatabs(floatsub(z2,z1)),2));
}

	 
forward IsPlayerinNearBoya(playerid);
public IsPlayerinNearBoya(playerid)
{
	new Float:Distance;
	for(new i = 1; i != sizeof BOYAS_PESCADOR; i ++)
	{
	    Distance = GeTPosBBoya(playerid,i);
	    if(Distance < 50.0 )
	    {
	        return i;
		}
	}
	return -1;
}


public Float:GeTPosBBoya(playerid,boyaid)
{
	new Float:x1,Float:y1,Float:z1;
	new Float:x2, Float:y2, Float:z2;
	GetPlayerPos(playerid,x1,y1,z1);
	x2 = BOYAS_PESCADOR[boyaid][xXx];
	y2 = BOYAS_PESCADOR[boyaid][yYy];
	z2 = BOYAS_PESCADOR[boyaid][zZz];
	return floatsqroot(floatpower(floatabs(floatsub(x2,x1)),2)+floatpower(floatabs(floatsub(y2,y1)),2)+floatpower(floatabs(floatsub(z2,z1)),2));
}

//cmd cmd
CMD:drunk(playerid,params[])
{
	new iva_;
	if(sscanf(params, "d",iva_)) return SendClientMessage(playerid, -1, "* drunk nivel");
	SetPlayerDrunkLevel(playerid, iva_);
	return 1;
}
CMD:iva(playerid,params[])
{
	new Float:iva_;
	if(sscanf(params, "f",iva_)) return SendClientMessage(playerid, -1, "* iva");
	IVA[ALIMENTOS]=iva_;	
	return 1;
}
CMD:divi(playerid,params[])
{
	new Float:EstadoVeh,Float:varfloat[3];

	if(sscanf(params, "fff",varfloat[2],EstadoVeh,varfloat[1])) return SendClientMessage(playerid, -1, "* size estado divi");
		
	SendClientMessageEx(playerid,-1,"Calculacion: %f",floatadd(varfloat[2], floatdiv(EstadoVeh, varfloat[1])));
	return 1;
}
CMD:calcular(playerid,params[])
{
	new money,Float:varfloat[2];
	if(sscanf(params, "df",money,varfloat[1])) return SendClientMessage(playerid, -1, "* cantidad - porcentaje [1 positivo 2 negativo]");
		
	new Float: porcentanje  =  varfloat[1];
    new Float: percentMoney = (money * porcentanje);
	new numero=floatround(percentMoney);

	SendClientMessageEx(playerid,-1,"Calculacion: %d",money+numero);

	return 1;
}

CMD:getganancia(playerid,params[])
{
	new precio_,Float:iva_;
	if(sscanf(params, "fd",iva_,precio_)) return SendClientMessage(playerid, -1, "* iva - precio");
		
	SendClientMessageEx(playerid,-1,"Calculacion: %d",GetGanancia(precio_,iva_));

	return 1;
}
 
GetGanancia(ganancia,Float:porcentaje)
{
    new Float: percentMoney = (ganancia * porcentaje);
	new numeroresult=floatround(percentMoney);
	return numeroresult;
}
GetPorcentaje(numero,Float:porcentaje)
{
    new Float: percentMoney = (numero * porcentaje);
	new numeroresult=floatround(percentMoney);
	numero = numero + numeroresult;
	return numero;
}
//Animaciones
//ANIMACIONES
CMD:animaciones(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1, "{00FF80}Ahora no puedes usar este comando.");
	ShowDialog(playerid, DIALOG_ANIMS);
	return 1;
}
alias:animaciones("anims", "acciones");
CMD:parar(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1, "{00FF80}Ahora no puedes usar este comando.");
	ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.1, 0, 0, 0, 0, 0, true);
	ClearAnimations(playerid);
	return 1;
}
CMD:rendirse(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1, "{00FF80}Ahora no puedes usar este comando.");
    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_HANDSUP); //rendirse
    SendClientMessage(playerid, -1, "{E6F8E0}Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:blowjob(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1, "{00FF80}Ahora no puedes usar este comando.");
	ApplyAnimation(playerid, "BLOWJOBZ", "BJ_COUCH_LOOP_W", 4.0, 1, 1, 1, 0, 0);//blowjob
	SendClientMessage(playerid, -1, "{E6F8E0}Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:rodar(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1, "{00FF80}Ahora no puedes usar este comando.");
	ApplyAnimation(playerid,"PED","BIKE_fallR",4.0,0,1,1,1,0);
	SendClientMessage(playerid, -1, "{E6F8E0}Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:borracho(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1, "{00FF80}Ahora no puedes usar este comando.");
    ApplyAnimation(playerid,"PED", "WALK_DRUNK",4.0,1,1,1,1,500);//borracho
    SendClientMessage(playerid, -1, "{E6F8E0}Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:bomba(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1, "{00FF80}Ahora no puedes usar este comando.");
    ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 1, 1, 0,0);//bomba
    SendClientMessage(playerid, -1, "{E6F8E0}Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:apuntar(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1, "{00FF80}Ahora no puedes usar este comando.");
	if(sscanf(params, "i", params[0]))   return SendClientMessage(playerid, -1, "Utilize: /apuntar [1-4]");
	if(params[0] < 1 || params[0] > 4)   return SendClientMessage(playerid, -1, "Utilize: /apuntar [1-4]");
	switch(params[0])
	{
		case 1: ApplyAnimation(playerid,"SHOP","ROB_Loop_Threat",4.1,1,0,0,1,1);
		case 2: ApplyAnimation(playerid,"ped", "ARRESTgun", 4.0,0,1,1,1,1);
		case 3: ApplyAnimation(playerid,"SHOP","SHP_Gun_Aim",4.1,1,0,0,1,1);
		case 4: ApplyAnimation(playerid,"PED","GUN_STAND",4.1,1,1, 1,1,1,1);
	}
	SendClientMessage(playerid, -1, "{E6F8E0}Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:reir(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1, "{00FF80}Ahora no puedes usar este comando.");
    ApplyAnimation(playerid, "RAPPING", "Laugh_01", 4.0, 0, 0, 0, 0,0);//reir
    SendClientMessage(playerid, -1, "{E6F8E0}Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:amenazar(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1, "{00FF80}Ahora no puedes usar este comando.");
    ApplyAnimation(playerid, "SHOP", "ROB_Loop_Threat", 4.0, 0, 0, 0, 1,500);//amenazar
    SendClientMessage(playerid, -1, "{E6F8E0}Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:paja(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1, "{00FF80}Ahora no puedes usar este comando.");
	ApplyAnimation(playerid, "PAULNMAC", "wank_loop", 4.0, 1, 0, 0, 1, 0);
	SendClientMessage(playerid, -1, "{E6F8E0}Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:herido(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1, "{00FF80}Ahora no puedes usar este comando.");
	ApplyAnimation(playerid, "SWEET", "LaFin_Sweet", 4.0, 0, 1, 1, 1, 0);
	SendClientMessage(playerid, -1, "{E6F8E0}Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:cruzarbrazos(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1, "{00FF80}Ahora no puedes usar este comando.");
	ApplyAnimation(playerid, "COP_AMBIENT", "Coplook_loop", 4.0, 1, 1, 1, 0, 4000);
	SendClientMessage(playerid, -1, "{E6F8E0}Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:recostarse(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1, "{00FF80}Ahora no puedes usar este comando.");
	ApplyAnimation(playerid,"SUNBATHE", "Lay_Bac_in", 4.0, 0, 0, 0, 1, 0);//recostarse
	SendClientMessage(playerid, -1, "{E6F8E0}Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:cubrirse(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1, "{00FF80}Ahora no puedes usar este comando.");
    ApplyAnimation(playerid, "ped", "cower", 4.0, 1, 0, 0, 0, 0);//crubrirse
    SendClientMessage(playerid, -1, "{E6F8E0}Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:vomitar(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1, "{00FF80}Ahora no puedes usar este comando.");
    ApplyAnimation(playerid, "FOOD", "EAT_Vomit_P", 3.0, 0, 0, 0, 0, 0);//vomitar
    SendClientMessage(playerid, -1, "{E6F8E0}Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:comer(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1, "{00FF80}Ahora no puedes usar este comando.");
	ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.00, 0, 0, 0, 0, 0);
	SendClientMessage(playerid, -1, "{E6F8E0}Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:despedir(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1, "{00FF80}Ahora no puedes usar este comando.");
	ApplyAnimation(playerid, "KISSING", "BD_GF_Wave", 3.0, 0, 0, 0, 0, 0);//despedir
	SendClientMessage(playerid, -1, "{E6F8E0}Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:nalgada(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1, "{00FF80}Ahora no puedes usar este comando.");
	ApplyAnimation(playerid, "SWEET", "sweet_ass_slap", 4.0, 0, 0, 0, 0, 0);//nalgada
	SendClientMessage(playerid, -1, "{E6F8E0}Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:agonizar(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1, "{00FF80}Ahora no puedes usar este comando.");
	ApplyAnimation(playerid, "WUZI", "CS_Dead_Guy", 4.0, 0, 0, 0, 1, 0);//agonizar
	SendClientMessage(playerid, -1, "{E6F8E0}Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:besar(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1, "{00FF80}Ahora no puedes usar este comando.");
	ApplyAnimation(playerid, "KISSING", "Playa_Kiss_02", 4.0, 0, 0, 0, 0, 0);//besar
	SendClientMessage(playerid, -1, "{E6F8E0}Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:crack(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1, "{00FF80}Ahora no puedes usar este comando.");
    ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.0, 0, 0, 0, 1, 0);//crack
    SendClientMessage(playerid, -1, "{E6F8E0}Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:mear(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1, "{00FF80}Ahora no puedes usar este comando.");
    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_PISSING);//mear
    SendClientMessage(playerid, -1, "{E6F8E0}Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:sentarse(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1, "{00FF80}Ahora no puedes usar este comando.");
    ApplyAnimation(playerid, "SUNBATHE", "ParkSit_M_in", 4.000000, 0, 1, 1, 1, 0);//sentarse
    SendClientMessage(playerid, -1, "{E6F8E0}Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:asiento(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1, "{00FF80}Ahora no puedes usar este comando.");
    ApplyAnimation(playerid, "ped", "SEAT_down", 4.000000, 0, 1, 1, 1, 0);
    SendClientMessage(playerid, -1, "{E6F8E0}Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:fucku(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1, "{00FF80}Ahora no puedes usar este comando.");
    ApplyAnimation( playerid,"ped", "fucku", 4.0, 0, 1, 1, 1, 1 );//fucku
    SendClientMessage(playerid, -1, "{E6F8E0}Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:taichi(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1, "{00FF80}Ahora no puedes usar este comando.");
	ApplyAnimation(playerid, "PARK", "Tai_Chi_Loop",  4.1,7,5,1,1,1);//taichi
	SendClientMessage(playerid, -1, "{E6F8E0}Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:beber(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1, "{00FF80}Ahora no puedes usar este comando.");
	ApplyAnimation(playerid, "BAR", "dnk_stndM_loop", 4.0, 0, 1, 1, 0, 4000);//beber
	SendClientMessage(playerid, -1, "{E6F8E0}Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:boxear(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1, "{00FF80}Ahora no puedes usar este comando.");
	ApplyAnimation(playerid, "GYMNASIUM", "gym_shadowbox",  4.1,7,5,1,1,1);//boxear
	SendClientMessage(playerid, -1, "{E6F8E0}Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:saludar(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1, "{00FF80}Ahora no puedes usar este comando.");
	ApplyAnimation(playerid,"GANGS","hndshkfa_swt",4.1,0,0,0,0,0);//saludar
	SendClientMessage(playerid, -1, "{E6F8E0}Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:llorar(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1, "{00FF80}Ahora no puedes usar este comando.");
	ApplyAnimation(playerid,"GRAVEYARD","mrnF_loop",4.1,0,0,0,0,0);//llorar
	SendClientMessage(playerid, -1, "{E6F8E0}Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:dormir(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1, "{00FF80}Ahora no puedes usar este comando.");
	ApplyAnimation(playerid,"INT_HOUSE","BED_In_R",4.1,0,0,0,1,0);//dormir
	SendClientMessage(playerid, -1, "{E6F8E0}Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:rapear(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1, "{00FF80}Ahora no puedes usar este comando.");
	ApplyAnimation(playerid,"RAPPING","RAP_B_Loop",4.0,1,0,0,0,8000);//rapear
	SendClientMessage(playerid, -1, "{E6F8E0}Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:astrip(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1, "{00FF80}Ahora no puedes usar este comando.");
	ApplyAnimation(playerid,"STRIP","strip_A",4.1,7,5,1,1,1);//strip
	SendClientMessage(playerid, -1, "{E6F8E0}Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:bailar(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1, "{00FF80}Ahora no puedes usar este comando.");
    if(sscanf(params, "d", params[0])) return SendClientMessage(playerid, 0xFF4500FF, "ERROR: /bailar [1-4]");

	switch(params[0])
	{
	    case 1: SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE1);
		case 2: SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE2);
		case 3: SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE3);
		case 4: SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE4);
		default: SendClientMessage(playerid, 0xFF4500FF, "ERROR: /bailar [1-4]");
	}
	return 1;
}
CMD:alentar(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1, "{00FF80}Ahora no puedes usar este comando.");
	ApplyAnimation(playerid,"ON_LOOKERS","shout_02",4.1,7,5,1,1,1);//alentar
	SendClientMessage(playerid, -1, "{E6F8E0}Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:hablar(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1, "{00FF80}Ahora no puedes usar este comando.");
    ApplyAnimation(playerid,"PED","IDLE_chat",4.1,7,5,1,1,1);//hablar
    SendClientMessage(playerid, -1, "{E6F8E0}Para cancelar la animacion utiliza /parar.");
	return 1;
}

GetPlayerVehicleAvaibleBootSlot(vehicleid)
{
	new max_slots = VEHICLE_INFO[GLOBAL_VEHICLES[vehicleid][gb_vehicle_MODELID] - 400][vehicle_info_BOOT_SLOTS];
	if(max_slots > MAX_BOOT_SLOTS) max_slots = MAX_BOOT_SLOTS;
	
	for(new i = 0; i != max_slots; i ++)
	{
		if(!VEHICLE_BOOT[vehicleid][i][vehicle_boot_VALID]) return i;
	}
	return -1;
}

/*SavePlayerWeaponInVehicleBoot(playerid, weapon_slot, vehicleid, boot_slot)
{
	if(!PLAYER_VEHICLES[vehicleid][player_vehicle_ID]) return 0;

	VEHICLE_BOOT[vehicleid][boot_slot][vehicle_boot_VALID] = true;
	VEHICLE_BOOT[vehicleid][boot_slot][vehicle_boot_TYPE] = BOOT_TYPE_WEAPON;
	VEHICLE_BOOT[vehicleid][boot_slot][vehicle_boot_INT] = PLAYER_WEAPONS[playerid][weapon_slot][player_weapon_ID];
	VEHICLE_BOOT[vehicleid][boot_slot][vehicle_boot_INT_EXTRA] = PLAYER_WEAPONS[playerid][weapon_slot][player_weapon_AMMO];
		
	new DBResult:Result, DB_Query[256];
	format(DB_Query, sizeof DB_Query,
	"\
		INSERT INTO `VEHICLE_BOOT`\
		(\
			`ID_VEHICLE`, `TYPE`, `INT`, `INT_EXTRA`\
		)\
		VALUES\
		(\
			'%d', '%d', '%d', '%d'\
		);\
		SELECT MAX(`ID_OBJECT`) FROM `VEHICLE_BOOT`;\
	", 
		PLAYER_VEHICLES[vehicleid][player_vehicle_ID], VEHICLE_BOOT[vehicleid][boot_slot][vehicle_boot_TYPE], VEHICLE_BOOT[vehicleid][boot_slot][vehicle_boot_INT], VEHICLE_BOOT[vehicleid][boot_slot][vehicle_boot_INT_EXTRA]);
	Result = db_query(Database, DB_Query);

	if(db_num_rows(Result)) VEHICLE_BOOT[vehicleid][boot_slot][vehicle_boot_OBJECT_ID] = db_get_field_int(Result, 0);
	db_free_result(Result);
		
	RemovePlayerSlotWeapon(playerid, weapon_slot, true);
	return 1;
}*/
/*
CMD:guardar(playerid, params[])
{
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendClientMessage(playerid, -1, "{00FF80}No estás depie.");
	
	new option[24], extra;
	if(sscanf(params, "s[24]d", option, extra)) return SendClientMessage(playerid, -1, "Error: {58ACFA}/guardar arma {FFFFFF}[slot /armas]");

	if(!strcmp(option, "arma", true))
	{
		if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_NORMAL || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK)
		{
			if(extra < 0 || extra > 12) return SendClientMessage(playerid, -1, "Error: {58ACFA}/guardar arma {FFFFFF}[slot /armas]");
			if(!PLAYER_WEAPONS[playerid][extra][player_weapon_VALID])
			{
				PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
				SendClientMessage(playerid, -1, "{00FF80}No tienes ninguna arma en ese slot (/armas).");
				return 1;
			}
			
			new vehicleid = GetPlayerCameraTargetVehicle(playerid);
			if(vehicleid == INVALID_VEHICLE_ID) return SendClientMessage(playerid, -1, "{00FF80}No estás cerca del vehículo o del maletero.");
			
			if(!PLAYER_VEHICLES[vehicleid][player_vehicle_VALID]) return SendClientMessage(playerid, -1, "{00FF80}Este no es tú vehículo.");
			if(PLAYER_VEHICLES[vehicleid][player_vehicle_OWNER_ID] != ACCOUNT_INFO[playerid][ac_ID]) return SendClientMessage(playerid, -1, "{00FF80}Este no es tú vehículo.");
					
			new boot_slot = GetPlayerVehicleAvaibleBootSlot(vehicleid);
			if(boot_slot == -1) return SendClientMessage(playerid, -1, "{00FF80}No tienes suficiente espacio en tu /maletero.");
			
			SendClientMessageEx(playerid, -1, "{E6F8E0}Arma {98d16c}'%s' {E6F8E0}guardada en el maletero de tu %s.", WEAPON_INFO[ PLAYER_WEAPONS[playerid][extra][player_weapon_ID] ][weapon_info_NAME], VEHICLE_INFO[GLOBAL_VEHICLES[vehicleid][gb_vehicle_MODELID] - 400][vehicle_info_NAME]);
			SavePlayerWeaponInVehicleBoot(playerid, extra, vehicleid, boot_slot);
		}
		else SendClientMessage(playerid, -1, "{00FF80}Ahora no puedes usar este comando.");
	}
	else SendClientMessage(playerid, -1, "Error: {58ACFA}/guardar arma {FFFFFF}[slot /armas]"); 
	return 1;
}

CMD:sacar(playerid, params[])
{
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendClientMessage(playerid, -1, "{00FF80}No estás depie.");
	
	new option[24], extra;
	if(sscanf(params, "s[24]d", option, extra)) return SendClientMessage(playerid, -1, "Error: {58ACFA}/sacar arma {FFFFFF}[slot /maletero]");
	
	if(!strcmp(option, "arma", true))
	{
		if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_NORMAL)
		{
			new vehicleid = GetPlayerCameraTargetVehicle(playerid);
			if(vehicleid == INVALID_VEHICLE_ID) return SendClientMessage(playerid, -1, "{00FF80}No estás cerca de tu vehículo.");
			
			if(!PLAYER_VEHICLES[vehicleid][player_vehicle_VALID]) return SendClientMessage(playerid, -1, "{00FF80}Este no es tú vehículo.");
			if(PLAYER_VEHICLES[vehicleid][player_vehicle_OWNER_ID] != ACCOUNT_INFO[playerid][ac_ID]) return SendClientMessage(playerid, -1, "{00FF80}Este no es tú vehículo.");
			
			
			if(extra < 0 || extra > MAX_BOOT_SLOTS) return SendClientMessage(playerid, -1, "Error: {58ACFA}/sacar arma {FFFFFF}[slot /maletero]");
		
			if(!VEHICLE_BOOT[vehicleid][extra][vehicle_boot_VALID]) return SendClientMessage(playerid, -1, "{00FF80}No hay nada en ese slot.");
			if(VEHICLE_BOOT[vehicleid][extra][vehicle_boot_TYPE] != BOOT_TYPE_WEAPON) return SendClientMessage(playerid, -1, "{00FF80}En ese slot no hay armas.");
			
			new to_slot = WEAPON_INFO[ VEHICLE_BOOT[vehicleid][extra][vehicle_boot_INT] ][weapon_info_SLOT];
			if(PLAYER_WEAPONS[playerid][to_slot][player_weapon_VALID])
			{
				PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
				SendClientMessageEx(playerid, -1, "{00FF80}Para sacar esta arma tienes que deshacerte de tu '%s' (%d) para tener espacio.", WEAPON_INFO[ PLAYER_WEAPONS[playerid][ to_slot ][player_weapon_ID] ][weapon_info_NAME], to_slot);
				return 1;
			}
			
			new DB_Query[64];
			format(DB_Query, sizeof DB_Query, "DELETE FROM `VEHICLE_BOOT` WHERE `ID_OBJECT` = '%d';", VEHICLE_BOOT[vehicleid][extra][vehicle_boot_OBJECT_ID]);
			db_query(Database, DB_Query);
			
			GivePlayerWeaponEx(playerid, VEHICLE_BOOT[vehicleid][extra][vehicle_boot_INT], VEHICLE_BOOT[vehicleid][extra][vehicle_boot_INT_EXTRA]);
			RegisterNewPlayerWeapon(playerid, to_slot);
			
			new temp_VEHICLE_BOOT[enum_VEHICLE_BOOT]; VEHICLE_BOOT[vehicleid][extra] = temp_VEHICLE_BOOT;
			
			Auto_SendPlayerAction(playerid, "saca un arma del maletero de su vehículo.");
		}
		else SendClientMessage(playerid, -1, "{00FF80}Ahora no puedes usar este comando.");
	}
	else SendClientMessage(playerid, -1, "Error: {58ACFA}/sacar arma {FFFFFF}[slot /maletero]"); 
	return 1;
}*/
CMD:debug(playerid)
{
	SendClientMessageEx(playerid,-1,"C: %d | N: %d",ENCASAVIP[playerid],InNegocio[playerid]);
	return 1;
}
CMD:notificaciones(playerid,params[])
{
	ManagePlayerNotificaciones(playerid);
	return 1;
}
ManagePlayerNotificaciones(playerid)
{
 	new string[2820],lineas,query[256],DBResult:Result,notifid;
    format(query,sizeof(query),"SELECT * FROM `PLAYERNOTIFICACIONES` WHERE PLAYER = '%d' limit 20 OFFSET %d",ACCOUNT_INFO[playerid][ac_ID],PAGE[playerid]);
    Result = db_query(_DB_,query);
    for(new i; i < db_num_rows(Result); i++)
    {
    	lineas++;
	    new text[256];
	    db_get_field_assoc(Result, "NOTIFICACION",text, 256);
	    db_get_field_assoc(Result, "ID",query, 20);
	    notifid = strval(query);
	    for(new l = 0; l < strlen(text); ++l)
	        if(text[l] == '{')
	            if(text[l+7] == '}')
	                strdel(text, l, l+8);
	    if(strlen(text) > 37)
	    {
	        strdel(text, 34, strlen(text));
	        strcat(text, "...", sizeof(text));
	    }
	    if(!i)
	        format(string, sizeof(string), "{000000}ID %d {FFFFFF} %s\n", notifid,text);
	    else
	        format(string, sizeof(string), "%s\n{000000}ID %d {FFFFFF} %s\n", string, notifid,text);
        db_next_row(Result);
    }
    strcat(string, "{FF0000}Cerrar (X)");
    PAGINA[playerid] = lineas;
    MensajesAyuda(playerid,"Selecciona alguna notificacion para ver mas info de ella");
    ShowPlayerDialog(playerid, DIALOG_NOTIFICACIONES, DIALOG_STYLE_LIST, "| NOTIFICACIONES |", string, "Seguir", "+ Notificaciones");
    db_free_result(Result);
	return 1;
}
/*CMD:maletero(playerid, params[])
{
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendClientMessage(playerid, -1, "{00FF80}No estás depie.");
	
	new vehicleid = GetPlayerCameraTargetVehicle(playerid);
	if(vehicleid == INVALID_VEHICLE_ID) return SendClientMessage(playerid, -1, "{00FF80}No estás cerca de tu vehículo.");
	
	if(!PLAYER_VEHICLES[vehicleid][player_vehicle_VALID]) return SendClientMessage(playerid, -1, "{00FF80}Este no es tú vehículo.");
	if(PLAYER_VEHICLES[vehicleid][player_vehicle_OWNER_ID] != ACCOUNT_INFO[playerid][ac_ID]) return SendClientMessage(playerid, -1, "{00FF80}Este no es tú vehículo.");
		
	PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE] = vehicleid;
	ShowDialog(playerid, DIALOG_VEHICLE_BOOT);
	return 1;
}*/

CMD:esposar(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_POLICE]) return SendClientMessage(playerid, -1, "{00FF80}No eres policía.");
	if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_POLICE) return SendClientMessage(playerid, -1, "{00FF80}No estás de servicio como policía.");
	if(sscanf(params, "u", params[0])) return SendClientMessage(playerid, -1, "{00FF80}Error: /esposar [PlayerID/Nombre]");
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendClientMessage(playerid, -1, "{00FF80}No estás depie.");
	
	if(!IsPlayerConnected(params[0])) return SendClientMessage(playerid, -1, "{00FF80}El jugador no está conectado.");
	new Float:pos[3]; GetPlayerPos(params[0], pos[0], pos[1], pos[2]);
	if(!IsPlayerInRangeOfPoint(playerid, 2.0, pos[0], pos[1], pos[2])) return SendClientMessage(playerid, 0xA9F5A9AA, "Este jugador no está cerca tuya.");
	if(PLAYER_TEMP[params[0]][pt_GAME_STATE] != GAME_STATE_NORMAL) return SendClientMessage(playerid, -1, "{00FF80}No puedes esposar a este jugador ahora.");
	if(GetPlayerState(params[0]) != PLAYER_STATE_ONFOOT) return SendClientMessage(playerid, -1, "{00FF80}Para esposar a esta persona tiene que estar depie.");
	
	if(PLAYER_TEMP[params[0]][pt_CUFFED])
	{
		TogglePlayerControllableEx(params[0], true);
		PLAYER_TEMP[params[0]][pt_CUFFED] = false;
		PLAYER_TEMP[params[0]][pt_CUFFING] = false;
		SetPlayerSpecialAction(params[0], SPECIAL_ACTION_NONE);
		
		new action[64];
		format(action, sizeof action, "le quita las esposas a %s.", PLAYER_TEMP[params[0]][pt_RP_NAME]);
		Auto_SendPlayerAction(playerid, action);
		return 1;
	}
	
	if(!PLAYER_TEMP[params[0]][pt_CUFFING])
	{
		SendClientMessage(params[0], -1, "{E6F8E0}Estás siendo esposado, puedes /resistirse.");
		SendClientMessage(playerid, -1, "{E6F8E0}Estás esposando a esta persona, aún puede resistirse.");
		
		PLAYER_TEMP[params[0]][pt_CUFFED] = false;
		PLAYER_TEMP[params[0]][pt_CUFFING] = true;
		KillTimer(PLAYER_TEMP[params[0]][pt_TIMERS][14]);
		TogglePlayerControllableEx(params[0], false);
		SetPlayerSpecialAction(params[0], SPECIAL_ACTION_HANDSUP);
		PLAYER_TEMP[params[0]][pt_TIMERS][14] = SetTimerEx("CuffPlayer", 6000, false, "i", params[0]);
	}
	return 1;
}

CMD:placa(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_POLICE]) return SendClientMessage(playerid, -1, "{00FF80}No eres policía.");
	if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_POLICE) return SendClientMessage(playerid, -1, "{00FF80}No estás de servicio como policía.");
	if(sscanf(params, "u", params[0])) return SendClientMessage(playerid, -1, "{00FF80}Error: /placa [PlayerID/Nombre]");
	
	if(!IsPlayerConnected(params[0])) return SendClientMessage(playerid, -1, "{00FF80}El jugador no está conectado.");
	new Float:pos[3]; GetPlayerPos(params[0], pos[0], pos[1], pos[2]);
	if(!IsPlayerInRangeOfPoint(playerid, 2.0, pos[0], pos[1], pos[2])) return SendClientMessage(playerid, 0xA9F5A9AA, "Este jugador no está cerca tuya.");
	if(PLAYER_TEMP[params[0]][pt_GAME_STATE] != GAME_STATE_NORMAL) return SendClientMessage(playerid, -1, "{00FF80}No puedes enseñarle tu placa a este jugador ahora.");
	
	new action[64];
	format(action, sizeof action, "le enseña su placa a %s.", PLAYER_TEMP[params[0]][pt_RP_NAME]);
	Auto_SendPlayerAction(playerid, action);
	
	SendClientMessageEx(params[0], -1, "{E6F8E0}%s %c. %s {A9C4E4}[Placa: %d]", POLICE_RANKS[ PLAYER_SKILLS[playerid][WORK_POLICE] ], PLAYER_TEMP[playerid][pt_FIRST_NAME][0], PLAYER_TEMP[playerid][pt_SUB_NAME], PLAYER_MISC[playerid][MISC_PLACA_PD]);
	return 1;
}

CMD:revisar(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_POLICE]) return SendClientMessage(playerid, -1, "{00FF80}No eres policía.");
	if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_POLICE) return SendClientMessage(playerid, -1, "{00FF80}No estás de servicio como policía.");
	if(sscanf(params, "u", params[0])) return SendClientMessage(playerid, -1, "{00FF80}Error: /revisar [PlayerID/Nombre]");
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendClientMessage(playerid, -1, "{00FF80}No estás depie.");
	
	if(!IsPlayerConnected(params[0])) return SendClientMessage(playerid, -1, "{00FF80}El jugador no está conectado.");
	new Float:pos[3]; GetPlayerPos(params[0], pos[0], pos[1], pos[2]);
	if(!IsPlayerInRangeOfPoint(playerid, 2.0, pos[0], pos[1], pos[2])) return SendClientMessage(playerid, 0xA9F5A9AA, "Este jugador no está cerca tuya.");
	if(PLAYER_TEMP[params[0]][pt_GAME_STATE] != GAME_STATE_NORMAL) return SendClientMessage(playerid, -1, "{00FF80}No puedes revisar a este jugador ahora.");
	if(GetPlayerState(params[0]) != PLAYER_STATE_ONFOOT) return SendClientMessage(playerid, -1, "{00FF80}Para revisar a esta persona tiene que estar depie.");
	if(!PLAYER_TEMP[params[0]][pt_CUFFED]) return SendClientMessage(playerid, -1, "{00FF80}Para revisar a esta persona tiene que estar esposada.");
	
	ShowPlayerInventory(playerid, params[0]);
	
	new action[64];
	format(action, sizeof action, "revisa a %s.", PLAYER_TEMP[params[0]][pt_RP_NAME]);
	Auto_SendPlayerAction(playerid, action);
	return 1;
}
alias:revisar("cachear");

CMD:requisar(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_POLICE]) return SendClientMessage(playerid, -1, "{00FF80}No eres policía.");
	if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_POLICE) return SendClientMessage(playerid, -1, "{00FF80}No estás de servicio como policía.");
	if(sscanf(params, "u", params[0])) return SendClientMessage(playerid, -1, "{00FF80}Error: /requisar [PlayerID/Nombre]");
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendClientMessage(playerid, -1, "{00FF80}No estás depie.");
	
	if(!IsPlayerConnected(params[0])) return SendClientMessage(playerid, -1, "{00FF80}El jugador no está conectado.");
	new Float:pos[3]; GetPlayerPos(params[0], pos[0], pos[1], pos[2]);
	if(!IsPlayerInRangeOfPoint(playerid, 2.0, pos[0], pos[1], pos[2])) return SendClientMessage(playerid, 0xA9F5A9AA, "Este jugador no está cerca tuya.");
	if(PLAYER_TEMP[params[0]][pt_GAME_STATE] != GAME_STATE_NORMAL) return SendClientMessage(playerid, -1, "{00FF80}No puedes revisar a este jugador ahora.");
	if(GetPlayerState(params[0]) != PLAYER_STATE_ONFOOT) return SendClientMessage(playerid, -1, "{00FF80}Para revisar a esta persona tiene que estar depie.");
	if(!PLAYER_TEMP[params[0]][pt_CUFFED]) return SendClientMessage(playerid, -1, "{00FF80}Para revisar a esta persona tiene que estar esposada.");
	
	DeleteIlegalInv(params[0]);
	
	new action[64];
	format(action, sizeof action, "requisa las pertenencias ilegales de %s.", PLAYER_TEMP[params[0]][pt_RP_NAME]);
	Auto_SendPlayerAction(playerid, action);
	return 1;
}

CMD:ref(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_POLICE]) return SendClientMessage(playerid, -1, "{00FF80}No eres policía.");
	if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_POLICE) return SendClientMessage(playerid, -1, "{00FF80}No estás de servicio como policía.");
	
	new city[45], zone[45];
	GetPlayerZones(playerid, city, zone);
		
	new message[145];
	format(message, sizeof message, "{4286f4}[Central policía] {FFFFFF}%s %s necesita refuerzos en {4286f4}%s, %s.", POLICE_RANKS[ PLAYER_SKILLS[playerid][WORK_POLICE] ], PLAYER_TEMP[playerid][pt_RP_NAME], city, zone);
	SendPoliceRadioMessage(-1, -1, message);
	return 1;
}
alias:ref("refuerzos");

CMD:control(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_POLICE]) return SendClientMessage(playerid, -1, "{00FF80}No eres policía.");
	if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_POLICE) return SendClientMessage(playerid, -1, "{00FF80}No estás de servicio como policía.");
	if(PLAYER_SKILLS[playerid][WORK_POLICE] < 8) return SendClientMessageEx(playerid, 0xFFA97FFF, "Debes ser al menos rango %s para colocar objetos policiales.", POLICE_RANKS[8]);
	
	if(GetPlayerVirtualWorld(playerid) != 0 || GetPlayerInterior(playerid) != 0) return SendClientMessage(playerid, -1, "{00FF80}No puedes colocar objetos policiales aquí.");
	
	new type;
	if(sscanf(params, "d", type)) return SendClientMessage(playerid, -1, "Error: {58ACFA}/control {FFFFFF}[Tipo 1-5]");
	
	new modelid;
	switch(type)
	{
		case 1: modelid = 1459;
		case 2: modelid = 1238;
		case 3: modelid = 1425;
		case 4: modelid = 3265;
		case 5: modelid = 3091;
		default: return SendClientMessage(playerid, -1, "Tipo de objeto no válido.");
	}
	
	new index = GetFreePoliceObjectSlot();
	if(index == -1) return SendClientMessage(playerid, -1, "No se pueden crear más objetos policiales.");
	
	POLICE_OBJECTS[index][police_object_VALID] = true;
	format(POLICE_OBJECTS[index][police_object_USER], 24, "%s", ACCOUNT_INFO[playerid][ac_NAME]);
	
	new Float:pos[3], Float:angle;
	GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
	GetPlayerFacingAngle(playerid, angle);
	pos[0] += (1.5 * floatsin(-angle, degrees));
	pos[1] += (1.5 * floatcos(-angle, degrees));
	
	POLICE_OBJECTS[index][police_object_OBJECT_ID] = CreateDynamicObject(modelid, pos[0], pos[1], pos[2], 0.0, 0.0, angle, 0, 0);
	Streamer_Update(playerid);
	new info[2];
	info[0] = WORK_POLICE;
	info[1] = index; // Index
	Streamer_SetArrayData(STREAMER_TYPE_OBJECT, POLICE_OBJECTS[index][police_object_OBJECT_ID], E_STREAMER_EXTRA_ID, info);
	PLAYER_TEMP[playerid][pt_SELECTED_POLICE_OBJECT_INDEX] = index;
	EditDynamicObject(playerid, POLICE_OBJECTS[index][police_object_OBJECT_ID]);
	
	SendClientMessage(playerid, -1, "Coloca el objeto, posteriormente puedes usar /econtrol para moverlo o eliminarlo.");
	return 1;
}

CMD:econtrol(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_POLICE]) return SendClientMessage(playerid, -1, "{00FF80}No eres policía.");
	if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_POLICE) return SendClientMessage(playerid, -1, "{00FF80}No estás de servicio como policía.");
	if(PLAYER_SKILLS[playerid][WORK_POLICE] < 8) return SendClientMessageEx(playerid, 0xFFA97FFF, "Debes ser al menos rango %s para editar objetos policiales.", POLICE_RANKS[8]);
	
	if(GetPlayerVirtualWorld(playerid) != 0 || GetPlayerInterior(playerid) != 0) return SendClientMessage(playerid, -1, "{00FF80}No puedes editar objetos policiales aquí.");
	
	SelectObject(playerid);
	return 1;
}

public OnPlayerSelectDynamicObject(playerid, STREAMER_TAG_OBJECT objectid, modelid, Float:x, Float:y, Float:z)
{
	new info[2];
	Streamer_GetArrayData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, info);
	if(info[0] == WORK_POLICE)
	{
		if(!PLAYER_WORKS[playerid][WORK_POLICE])
		{
			CancelEdit(playerid);
			SendClientMessage(playerid, -1, "{00FF80}No eres policía.");
			return 1;
		}
		if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_POLICE)
		{
			CancelEdit(playerid);
			SendClientMessage(playerid, -1, "{00FF80}No estás de servicio como policía.");
			return 1;
		}
		if(PLAYER_SKILLS[playerid][WORK_POLICE] < 8)
		{
			CancelEdit(playerid);
			SendClientMessageEx(playerid, 0xFFA97FFF, "Debes ser al menos rango %s para colocar objetos policiales.", POLICE_RANKS[8]);
			return 1;
		}
		
		SendClientMessageEx(playerid, -1, "Este objeto fue colocado por %s. Usa 'ESC' para borrar el objeto.", POLICE_OBJECTS[ info[1] ][police_object_USER]);
		PLAYER_TEMP[playerid][pt_SELECTED_POLICE_OBJECT_INDEX] = info[1];
		EditDynamicObject(playerid, objectid);
		return 1;
	}
	return 1;
}

public OnPlayerEditDynamicObject(playerid, STREAMER_TAG_OBJECT objectid, response, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
 	if(ESTAEDITANDO_Objeto_Depa[playerid])
 	{
 		switch(response)
		{
			case EDIT_RESPONSE_CANCEL:
		    {
		   	 	GameTextForPlayer(playerid,"~n~~n~~n~~n~~r~~h~Edicion terminada",5000,3);
		   	 	new Query[350];
			 	format(Query,sizeof(Query),"UPDATE `MAPEOSAPARTAMENTOS` SET `X` = '%f', `Y` = '%f',`Z` = '%f',`rX` = '%f',`rY` = '%f',`rZ` = '%f' WHERE `ID` = '%d'",\
				x,y,z,rx,ry,rz,SAVEID_EDITANDO[playerid]);
			 	db_query(DBCASA, Query);
        		DestroyDynamicObject(OBJETO_DE_EDITAR_CASA[playerid]);
        		ReloadObjetosDepa(ENAPARTAMENTO[playerid]);
        		ESTAEDITANDO_Objeto_Depa[playerid]=false;
		    }
		    case EDIT_RESPONSE_FINAL:
		    {
				GameTextForPlayer(playerid,"~n~~n~~n~~n~~r~~h~Edicion terminada",5000,3);
				new Query[350];
			 	format(Query,sizeof(Query),"UPDATE `MAPEOSAPARTAMENTOS` SET `X` = '%f', `Y` = '%f',`Z` = '%f',`rX` = '%f',`rY` = '%f',`rZ` = '%f' WHERE `ID` = '%d'",\
				x,y,z,rx,ry,rz,SAVEID_EDITANDO[playerid]);
			 	db_query(DBCASA, Query);
			 	ESTAEDITANDO_Objeto_Depa[playerid]=false;
	 	        DestroyDynamicObject(OBJETO_DE_EDITAR_CASA[playerid]);
	 	        ReloadObjetosDepa(ENAPARTAMENTO[playerid]);
		    }
		}
		return 1;
 	}	
	if(ESTAEDITANDO_Objeto[playerid])
	{
		switch(response)
		{
			case EDIT_RESPONSE_CANCEL:
		    {
		   	 	GameTextForPlayer(playerid,"~n~~n~~n~~n~~r~~h~Edicion terminada",5000,3);
		   	 	new Query[350];
			 	format(Query,sizeof(Query),"UPDATE `MAPEOSCASA` SET `X` = '%f', `Y` = '%f',`Z` = '%f',`rX` = '%f',`rY` = '%f',`rZ` = '%f' WHERE `ID` = '%d'",\
				x,y,z,rx,ry,rz,SAVEID_EDITANDO[playerid]);
			 	db_query(DBCASA, Query);
        		DestroyDynamicObject(OBJETO_DE_EDITAR_CASA[playerid]);
        		ReloadObjetosCasa(ENCASAVIP[playerid]);
        		ESTAEDITANDO_Objeto[playerid]=false;
		    }
		    case EDIT_RESPONSE_FINAL:
		    {
				GameTextForPlayer(playerid,"~n~~n~~n~~n~~r~~h~Edicion terminada",5000,3);
				new Query[350];
			 	format(Query,sizeof(Query),"UPDATE `MAPEOSCASA` SET `X` = '%f', `Y` = '%f',`Z` = '%f',`rX` = '%f',`rY` = '%f',`rZ` = '%f' WHERE `ID` = '%d'",\
				x,y,z,rx,ry,rz,SAVEID_EDITANDO[playerid]);
			 	db_query(DBCASA, Query);
			 	ESTAEDITANDO_Objeto[playerid]=false;
	 	        DestroyDynamicObject(OBJETO_DE_EDITAR_CASA[playerid]);
	 	        ReloadObjetosCasa(ENCASAVIP[playerid]);
		    }
		}
		return 1;
	}
	//====================================================================
	if(PLAYER_TEMP[playerid][pt_EDITANDO_GRAFITI]==true)
	{
		switch(response)
		{
  			case EDIT_RESPONSE_CANCEL:
		    {
				GameTextForPlayer(playerid,"~n~~n~~n~~n~~r~~h~Edicion terminada",5000,3);
				new Query[450];
			 	format(Query,sizeof(Query),"UPDATE `GRAFITIS` SET `X` = '%f', `Y` = '%f',`Z` = '%f',`Rx` = '%f',`Ry` = '%f',`Rz` = '%f' WHERE `ID` = '%d'",\
				x,y,z,rx,ry,rz,PLAYER_TEMP[playerid][pt_EDITANDO_GRAFITI_ID]);
			 	db_query(Database, Query);
	 	        SetDynamicObjectPos(GRAFITI[ PLAYER_TEMP[playerid][pt_EDITANDO_GRAFITI_ID] ][OBJETO], x,y,z);
		        SetDynamicObjectRot(GRAFITI[ PLAYER_TEMP[playerid][pt_EDITANDO_GRAFITI_ID] ][OBJETO], rx,ry,rz);
		        PLAYER_TEMP[playerid][pt_EDITANDO_GRAFITI] = false;
		    }
		    case EDIT_RESPONSE_FINAL:
		    {
				GameTextForPlayer(playerid,"~n~~n~~n~~n~~r~~h~Edicion terminada",5000,3);
				new Query[450];
			 	format(Query,sizeof(Query),"UPDATE `GRAFITIS` SET `X` = '%f', `Y` = '%f',`Z` = '%f',`Rx` = '%f',`Ry` = '%f',`Rz` = '%f' WHERE `ID` = '%d'",\
				x,y,z,rx,ry,rz,PLAYER_TEMP[playerid][pt_EDITANDO_GRAFITI_ID]);
			 	db_query(Database, Query);
	 	        SetDynamicObjectPos(GRAFITI[ PLAYER_TEMP[playerid][pt_EDITANDO_GRAFITI_ID] ][OBJETO], x,y,z);
		        SetDynamicObjectRot(GRAFITI[ PLAYER_TEMP[playerid][pt_EDITANDO_GRAFITI_ID] ][OBJETO], rx,ry,rz);
		        PLAYER_TEMP[playerid][pt_EDITANDO_GRAFITI] = false;
		    }
		}
	}
 
	if(EditandoCasaFaccion[playerid]==true)
	{
		switch(response)
		{
  			case EDIT_RESPONSE_CANCEL:
		    {
		   	 	GameTextForPlayer(playerid,"~n~~n~~n~~n~~r~~h~Edicion cancelada",5000,3);
        		SetDynamicObjectPos(MUEBLEFACCION[EditandoMuebleCasaFaccion[playerid]][ID], DATAMUEBLE[playerid][qX],DATAMUEBLE[playerid][qY],DATAMUEBLE[playerid][qZ]);
        		SetDynamicObjectRot(MUEBLEFACCION[EditandoMuebleCasaFaccion[playerid]][ID], DATAMUEBLE[playerid][qrX],DATAMUEBLE[playerid][qrY],DATAMUEBLE[playerid][qrZ]);
        		EditandoCasaFaccion[playerid]=false;
		    }
		    case EDIT_RESPONSE_FINAL:
		    {
		        if(EditandoCasaFaccion[playerid]==true)
				{
				    
					GameTextForPlayer(playerid,"~n~~n~~n~~n~~r~~h~Edicion terminada",5000,3);

					new Query[350];
				 	format(Query,sizeof(Query),"UPDATE `MAPEOSCASAFACCION` SET `X` = '%f', `Y` = '%f',`Z` = '%f',`rX` = '%f',`rY` = '%f',`rZ` = '%f' WHERE `ID` = '%d'",\
					x,y,z,rx,ry,rz,EditandoMuebleCasaFaccion[playerid]);
				 	db_query(DBCASA, Query);
		 	   
		 	        SetDynamicObjectPos(MUEBLEFACCION[EditandoMuebleCasaFaccion[playerid]][ID], x,y,z);
			        SetDynamicObjectRot(MUEBLEFACCION[EditandoMuebleCasaFaccion[playerid]][ID], rx,ry,rz);

			        EditandoCasaFaccion[playerid] = false;
				}
		    }
		}
		return 1;
	}
	//==========================================================================
	if(EditandoCasaFuera[playerid]==true)
	{
	    switch(response)
		{
  			case EDIT_RESPONSE_CANCEL:
		    {
		    	EditandoCasaFuera[playerid]=false;
		   	 	GameTextForPlayer(playerid,"~n~~n~~n~~n~~r~~h~Edicion cancelada",5000,3);
        		SetDynamicObjectPos(MAPEOSFUERA[EditandoMuebleFuera[playerid]][ID], DATAMUEBLE[playerid][qX],DATAMUEBLE[playerid][qY],DATAMUEBLE[playerid][qZ]);
        		SetDynamicObjectRot(MAPEOSFUERA[EditandoMuebleFuera[playerid]][ID], DATAMUEBLE[playerid][qrX],DATAMUEBLE[playerid][qrY],DATAMUEBLE[playerid][qrZ]);
		    }
		    case EDIT_RESPONSE_FINAL:
		    {
		        if(EditandoCasaFuera[playerid]==true)
				{
				    new id=MapeandoCasa[playerid];
					if(GetDistanceBetweenPoints(x,y,z,CASAVIP[id][CasaX],CASAVIP[id][CasaY],CASAVIP[id][CasaZ]) > 20)
					{
				        MensajesAyuda(playerid,"La edicion del objeto se cancelo por haberlo situado muy lejos de la casa");
				    	SetDynamicObjectPos(MAPEOSFUERA[EditandoMuebleFuera[playerid]][ID], DATAMUEBLE[playerid][qX],DATAMUEBLE[playerid][qY],DATAMUEBLE[playerid][qZ]);
        				SetDynamicObjectRot(MAPEOSFUERA[EditandoMuebleFuera[playerid]][ID], DATAMUEBLE[playerid][qrX],DATAMUEBLE[playerid][qrY],DATAMUEBLE[playerid][qrZ]);
				        return 1;
				    }
				    GameTextForPlayer(playerid,"~n~~n~~n~~n~~r~~h~Edicion terminada",5000,3);
					new Query[350];
				 	format(Query,sizeof(Query),"UPDATE `MAPCASA` SET `X` = '%f', `Y` = '%f',`Z` = '%f',`rX` = '%f',`rY` = '%f',`rZ` = '%f' WHERE `ID` = '%d'",\
					x,y,z,rx,ry,rz,EditandoMuebleFuera[playerid]);
				 	db_query(DBCASA, Query);
		 	        

		 	        SetDynamicObjectPos(MAPEOSFUERA[EditandoMuebleFuera[playerid]][ID], x,y,z);
			        SetDynamicObjectRot(MAPEOSFUERA[EditandoMuebleFuera[playerid]][ID], rx,ry,rz);

			        EditandoCasaFuera[playerid] = false;
				}
		    }
		}
	    return 1;
	}
	//====================================================================
	if(EditandoRadar[playerid]==true)
	{
		switch(response)
		{
			case EDIT_RESPONSE_CANCEL:
			{
				EditandoRadar[playerid]=false;
				SetDynamicObjectPos(RADARESDEVELOCIDAD[SaveIDRADAR[playerid]][OBJETOID], x,y,z);
				SetDynamicObjectRot(RADARESDEVELOCIDAD[SaveIDRADAR[playerid]][OBJETOID], rx,ry,rz);
				DestroyDynamic3DTextLabel(RADARESDEVELOCIDAD[SaveIDRADAR[playerid]][LABEL]);
				MensajesAyuda(playerid,"Posicion del radar actualizada");
				new Query[350];
			 	format(Query,sizeof(Query),"UPDATE `RADAR` SET `X` = '%f', `Y` = '%f',`Z` = '%f',`RX` = '%f',`RY` = '%f',`RZ` = '%f' WHERE `ID` = '%d'",\
				x,y,z,rx,ry,rz,SaveIDRADAR[playerid]);
			 	db_query(_DB_, Query);
			 	new label[256];
				format(label, sizeof(label), "{2EFE2E}ID {CED8F6}(%d)\n{2EFE2E}RADAR DE VELOCIDAD\n\nVELOCIDAD MAXIMA: {CED8F6}%d{2EFE2E} Km/H",SaveIDRADAR[playerid],RADARESDEVELOCIDAD[SaveIDRADAR[playerid]][SPEEDCHECK]);
		        RADARESDEVELOCIDAD[SaveIDRADAR[playerid]][LABEL] = CreateDynamic3DTextLabel(label, 0xFFFFFFFF, x,y,z+3.0, 80.0);

			}
			case EDIT_RESPONSE_FINAL:
			{
				EditandoRadar[playerid]=false;
				EditandoRadar[playerid]=false;
				SetDynamicObjectPos(RADARESDEVELOCIDAD[SaveIDRADAR[playerid]][OBJETOID], x,y,z);
				SetDynamicObjectRot(RADARESDEVELOCIDAD[SaveIDRADAR[playerid]][OBJETOID], rx,ry,rz);
				DestroyDynamic3DTextLabel(RADARESDEVELOCIDAD[SaveIDRADAR[playerid]][LABEL]);
				MensajesAyuda(playerid,"Posicion del radar actualizada");
				new Query[350];
			 	format(Query,sizeof(Query),"UPDATE `RADAR` SET `X` = '%f', `Y` = '%f',`Z` = '%f',`RX` = '%f',`RY` = '%f',`RZ` = '%f' WHERE `ID` = '%d'",\
				x,y,z,rx,ry,rz,SaveIDRADAR[playerid]);
			 	db_query(_DB_, Query);
			 	new label[256];
				format(label, sizeof(label), "{2EFE2E}ID {CED8F6}(%d)\n{2EFE2E}RADAR DE VELOCIDAD\n\nVELOCIDAD MAXIMA: {CED8F6}%d{2EFE2E} Km/H",SaveIDRADAR[playerid],RADARESDEVELOCIDAD[SaveIDRADAR[playerid]][SPEEDCHECK]);
		        RADARESDEVELOCIDAD[SaveIDRADAR[playerid]][LABEL] = CreateDynamic3DTextLabel(label, 0xFFFFFFFF, x,y,z+3.0, 80.0);
			}
		}
		return 1;
	}
	/**/
	if(EditandoRadarMake[playerid]==true)
	{
		switch(response)
		{
			case EDIT_RESPONSE_CANCEL:
			{
				EditandoRadarMake[playerid]=false;

				new Query[350];
			 	format(Query,sizeof(Query),"UPDATE `RADAR` SET `X` = '%f', `Y` = '%f',`Z` = '%f',`RX` = '%f',`RY` = '%f',`RZ` = '%f' WHERE `ID` = '%d'",\
				x,y,z,rx,ry,rz,SaveIDRADAR[playerid]);
			 	db_query(_DB_, Query);

				SetDynamicObjectPos(RADARESDEVELOCIDAD[SaveIDRADAR[playerid]][OBJETOID], x,y,z);
				SetDynamicObjectRot(RADARESDEVELOCIDAD[SaveIDRADAR[playerid]][OBJETOID], rx,ry,rz);
				ShowPlayerDialog(playerid,DIALOG_RADAREDIT,DIALOG_STYLE_INPUT," RADAR DE VELOCIDAD ","Ingresa la velocidad que se detectara en este radar\nVelocidad maxima: 240 KM/H\nPor defecto se puso en 130 KM/H","Siguiente", "Cancelar");
				new label[256];
				format(label, sizeof(label), "{2EFE2E}ID {CED8F6}(%d)\n{2EFE2E}RADAR DE VELOCIDAD\n\nVELOCIDAD MAXIMA: {CED8F6}%d{2EFE2E} Km/H",SaveIDRADAR[playerid],RADARESDEVELOCIDAD[SaveIDRADAR[playerid]][SPEEDCHECK]);
		        RADARESDEVELOCIDAD[SaveIDRADAR[playerid]][LABEL] = CreateDynamic3DTextLabel(label, 0xFFFFFFFF, x,y,z+3.0, 80.0);
				return 1;
			}
			case EDIT_RESPONSE_FINAL:
			{
				EditandoRadarMake[playerid]=false;

				new Query[350];
			 	format(Query,sizeof(Query),"UPDATE `RADAR` SET `X` = '%f', `Y` = '%f',`Z` = '%f',`RX` = '%f',`RY` = '%f',`RZ` = '%f' WHERE `ID` = '%d'",\
				x,y,z,rx,ry,rz,SaveIDRADAR[playerid]);
			 	db_query(_DB_, Query);

				SetDynamicObjectPos(RADARESDEVELOCIDAD[SaveIDRADAR[playerid]][OBJETOID], x,y,z);
				SetDynamicObjectRot(RADARESDEVELOCIDAD[SaveIDRADAR[playerid]][OBJETOID], rx,ry,rz);
				ShowPlayerDialog(playerid,DIALOG_RADAREDIT,DIALOG_STYLE_INPUT," RADAR DE VELOCIDAD ","Ingresa la velocidad que se detectara en este radar\nVelocidad maxima: 240 KM/H\nPor defecto se puso en 130 KM/H","Siguiente", "Cancelar");
				new label[256];
				format(label, sizeof(label), "{2EFE2E}ID {CED8F6}(%d)\n{2EFE2E}RADAR DE VELOCIDAD\n\nVELOCIDAD MAXIMA: {CED8F6}%d{2EFE2E} Km/H",SaveIDRADAR[playerid],RADARESDEVELOCIDAD[SaveIDRADAR[playerid]][SPEEDCHECK]);
		        RADARESDEVELOCIDAD[SaveIDRADAR[playerid]][LABEL] = CreateDynamic3DTextLabel(label, 0xFFFFFFFF, x,y,z+3.0, 80.0);
				return 1;
			}
		}
		return 1;
	}
	//===================================
	if(EditandoApartamento[playerid]==true)
	{
		switch(response)
		{
  			case EDIT_RESPONSE_CANCEL:
		    {
		   	 	GameTextForPlayer(playerid,"~n~~n~~n~~n~~r~~h~Edicion cancelada",5000,3);
        		SetDynamicObjectPos(MAPAPARTAMENTO[EditandoMueble[playerid]][ID], DATAMUEBLE[playerid][qX],DATAMUEBLE[playerid][qY],DATAMUEBLE[playerid][qZ]);
        		SetDynamicObjectRot(MAPAPARTAMENTO[EditandoMueble[playerid]][ID], DATAMUEBLE[playerid][qrX],DATAMUEBLE[playerid][qrY],DATAMUEBLE[playerid][qrZ]);
        		EditandoApartamento[playerid]=false;
		    }
		    case EDIT_RESPONSE_FINAL:
		    {
		        if(EditandoApartamento[playerid]==true)
				{
				    
					GameTextForPlayer(playerid,"~n~~n~~n~~n~~r~~h~Edicion terminada",5000,3);

					new Query[350];
				 	format(Query,sizeof(Query),"UPDATE `MAPEOSAPARTAMENTOS` SET `X` = '%f', `Y` = '%f',`Z` = '%f',`rX` = '%f',`rY` = '%f',`rZ` = '%f' WHERE `ID` = '%d'",\
					x,y,z,rx,ry,rz,EditandoMueble[playerid]);
				 	db_query(DBCASA, Query);
		 	        printf("mapapartamento c: %f,%f,%f, | %f,%f,%f | ID: %d",x,y,z,rx,ry,rz,EditandoMueble[playerid]);

		 	        SetDynamicObjectPos(MAPAPARTAMENTO[EditandoMueble[playerid]][ID], x,y,z);
			        SetDynamicObjectRot(MAPAPARTAMENTO[EditandoMueble[playerid]][ID], rx,ry,rz);

			        EditandoApartamento[playerid] = false;
				}
		    }
		}
	    return 1;
	}
	//==========================================================================
	if(EditandoCasa[playerid]==true)
	{
	    switch(response)
		{
  			case EDIT_RESPONSE_CANCEL:
		    {
		   	 	GameTextForPlayer(playerid,"~n~~n~~n~~n~~r~~h~Edicion cancelada",5000,3);
        		SetDynamicObjectPos(MAPCASA[EditandoMueble[playerid]][ID], DATAMUEBLE[playerid][qX],DATAMUEBLE[playerid][qY],DATAMUEBLE[playerid][qZ]);
        		SetDynamicObjectRot(MAPCASA[EditandoMueble[playerid]][ID], DATAMUEBLE[playerid][qrX],DATAMUEBLE[playerid][qrY],DATAMUEBLE[playerid][qrZ]);
        		EditandoCasa[playerid]=false;
		    }
		    case EDIT_RESPONSE_FINAL:
		    {
		        if(EditandoCasa[playerid]==true)
				{
				    
					GameTextForPlayer(playerid,"~n~~n~~n~~n~~r~~h~Edicion terminada",5000,3);

					new Query[350];
				 	format(Query,sizeof(Query),"UPDATE `MAPEOSCASA` SET `X` = '%f', `Y` = '%f',`Z` = '%f',`rX` = '%f',`rY` = '%f',`rZ` = '%f' WHERE `ID` = '%d'",\
					x,y,z,rx,ry,rz,EditandoMueble[playerid]);
				 	db_query(DBCASA, Query);
		 	        printf("Mapcasa c: %f,%f,%f, | %f,%f,%f | ID: %d",x,y,z,rx,ry,rz,EditandoMueble[playerid]);

		 	        SetDynamicObjectPos(MAPCASA[EditandoMueble[playerid]][ID], x,y,z);
			        SetDynamicObjectRot(MAPCASA[EditandoMueble[playerid]][ID], rx,ry,rz);

			        EditandoCasa[playerid] = false;
				}
		    }
		}
	    return 1;
	}

	if(response == EDIT_RESPONSE_CANCEL)
	{
		new info[2];
		Streamer_GetArrayData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, info);
		if(info[0] == WORK_POLICE)
		{
			if(!PLAYER_WORKS[playerid][WORK_POLICE])
			{
				CancelEdit(playerid);
				SendClientMessage(playerid, -1, "{00FF80}No eres policía.");
				return 1;
			}
			if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_POLICE)
			{
				CancelEdit(playerid);
				SendClientMessage(playerid, -1, "{00FF80}No estás de servicio como policía.");
				return 1;
			}
			if(PLAYER_SKILLS[playerid][WORK_POLICE] < 8)
			{
				CancelEdit(playerid);
				SendClientMessageEx(playerid, 0xFFA97FFF, "Debes ser al menos rango %s para colocar objetos policiales.", POLICE_RANKS[8]);
				return 1;
			}
			
			DestroyDynamicObject(POLICE_OBJECTS[ info[1] ][police_object_OBJECT_ID]);
			POLICE_OBJECTS[ info[1] ][police_object_VALID] = false;
			POLICE_OBJECTS[ info[1] ][police_object_USER][0] = EOS;
			POLICE_OBJECTS[ info[1] ][police_object_OBJECT_ID] = INVALID_STREAMER_ID;
			SendClientMessage(playerid, -1, "Objeto policial eliminado.");
		}
	}
	return 1;
}

CMD:multar(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_POLICE]) return SendClientMessage(playerid, -1, "{00FF80}No eres policía.");
	if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_POLICE) return SendClientMessage(playerid, -1, "{00FF80}No estás de servicio como policía.");
	if(sscanf(params, "ud", params[0], params[1])) return SendClientMessage(playerid, -1, "Error: {58ACFA}/multar {FFFFFF}[PlayerID/Nombre] [precio$]");
	if(params[1] < 0) return SendClientMessage(playerid, -1, "{00FF80}El precio no puede ser menor a 0$.");
	else if(params[1] > 100000) return SendClientMessage(playerid, -1, "{00FF80}El precio no puede ser mayor a 100.000$.");
	
	if(!IsPlayerConnected(params[0])) return SendClientMessage(playerid, -1, "{00FF80}El jugador no está conectado.");
	new Float:pos[3]; GetPlayerPos(params[0], pos[0], pos[1], pos[2]);
	if(!IsPlayerInRangeOfPoint(playerid, 5.0, pos[0], pos[1], pos[2])) return SendClientMessage(playerid, 0xA9F5A9AA, "Este jugador no está cerca tuya.");
	if(PLAYER_TEMP[params[0]][pt_GAME_STATE] != GAME_STATE_NORMAL) return SendClientMessage(playerid, -1, "{00FF80}No puedes multar a este jugador ahora.");
	if(CHARACTER_INFO[params[0]][ch_STATE] == ROLEPLAY_STATE_ARRESTED || CHARACTER_INFO[params[0]][ch_STATE] == ROLEPLAY_STATE_JAIL) return SendClientMessage(playerid, -1, "{00FF80}No puedes multar a este jugador ahora.");
	
	PLAYER_TEMP[params[0]][pt_POLICE_PEN_PID] = playerid;
	PLAYER_TEMP[params[0]][pt_POLICE_PEN_AID] = ACCOUNT_INFO[playerid][ac_ID];
	PLAYER_TEMP[params[0]][pt_POLICE_PEN_IM] = params[1];
	PLAYER_TEMP[params[0]][pt_POLICE_PEN_TIME] = gettime();
	ShowDialog(params[0], DIALOG_POLICE_PENALTY);
	
	SendClientMessage(playerid, -1, "{E6F8E0}La multa ha sido enviada, espera para ver si el jugador la acepta.");
	return 1;
}

CMD:arrestar(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_POLICE]) return SendClientMessage(playerid, -1, "{00FF80}No eres policía.");
	if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_POLICE) return SendClientMessage(playerid, -1, "{00FF80}No estás de servicio como policía.");
	
	if(sscanf(params, "ud", params[0], params[1])) return SendClientMessage(playerid, -1, "{00FF80}Error: /arrestar [PlayerID/Nombre] [Asiento 1 ó 2]");
	if(params[1] < 1 || params[1] > 2) return SendClientMessage(playerid, -1, "{00FF80}Error: /arrestar [PlayerID/Nombre] [Asiento 1 ó 2]");
	params[1] ++;
	
	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, -1, "{00FF80}Para arrestar tienes que estar dentro de un vehículo policial.");
	
	new vehicleid = GetPlayerVehicleID(playerid);
	if(!WORK_VEHICLES[vehicleid][work_vehicle_VALID]) return SendClientMessage(playerid, -1, "{00FF80}Para arrestar tienes que estar dentro de un vehículo policial.");
	if(WORK_VEHICLES[vehicleid][work_vehicle_WORK] != WORK_POLICE) return SendClientMessage(playerid, -1, "{00FF80}Para arrestar tienes que estar dentro de un vehículo policial.");
	if( (params[1] + 1) > VEHICLE_INFO[ GLOBAL_VEHICLES[vehicleid][gb_vehicle_MODELID] - 400 ][vehicle_info_SEATS]) return SendClientMessageEx(playerid, -1, "{00FF80}Este vehículo policial es de %d pasajeros, así que no puedes llevar arrestados en él.", VEHICLE_INFO[ GLOBAL_VEHICLES[vehicleid][gb_vehicle_MODELID] - 400 ][vehicle_info_SEATS]);
	
	if(!IsPlayerConnected(params[0])) return SendClientMessage(playerid, -1, "{00FF80}El jugador no está conectado.");
	new Float:pos[3]; GetPlayerPos(params[0], pos[0], pos[1], pos[2]);
	if(!IsPlayerInRangeOfPoint(playerid, 5.0, pos[0], pos[1], pos[2])) return SendClientMessage(playerid, 0xA9F5A9AA, "Este jugador no está cerca tuya.");
	if(PLAYER_TEMP[params[0]][pt_GAME_STATE] != GAME_STATE_NORMAL) return SendClientMessage(playerid, -1, "{00FF80}No puedes arrestar a este jugador ahora.");
	
	if(!PLAYER_TEMP[params[0]][pt_CUFFED]) return SendClientMessage(playerid, -1, "{00FF80}Para arrestar a esta persona tiene que estar esposada.");
	
	if(CHARACTER_INFO[params[0]][ch_STATE] == ROLEPLAY_STATE_ARRESTED)
	{
		TogglePlayerControllableEx(params[0], true);
		PLAYER_TEMP[params[0]][pt_CUFFED] = false;
		PLAYER_TEMP[params[0]][pt_CUFFING] = false;
		SetPlayerSpecialAction(params[0], SPECIAL_ACTION_NONE);
		CHARACTER_INFO[params[0]][ch_STATE] = ROLEPLAY_STATE_NORMAL;
		
		SendClientMessageEx(playerid, -1, "Has soltado a %s.", PLAYER_TEMP[params[0]][pt_RP_NAME]);
		return 1;
	}
	else
	{
		CHARACTER_INFO[params[0]][ch_STATE] = ROLEPLAY_STATE_ARRESTED;
		PutPlayerInVehicleEx(params[0], vehicleid, params[1]);
	}
	return 1;
}


CMD:callsing(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_POLICE]) return SendClientMessage(playerid, -1, "{00FF80}No eres policía.");
	if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_POLICE) return SendClientMessage(playerid, -1, "{00FF80}No estás de servicio como policía.");
	if(PLAYER_SKILLS[playerid][WORK_POLICE] < 11) return SendClientMessageEx(playerid, 0xFFA97FFF, "Debes ser al menos rango %s para asignar callsing.", POLICE_RANKS[11]);
	
	if(isnull(params)) return SendClientMessage(playerid, -1, "{00FF80}Error: /callsing [Texto]");
	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, -1, "{00FF80}Para asignar callsing tienes que estar dentro de un vehículo policial.");
	
	new vehicleid = GetPlayerVehicleID(playerid);
	if(!WORK_VEHICLES[vehicleid][work_vehicle_VALID]) return SendClientMessage(playerid, -1, "{00FF80}Para asignar callsing tienes que estar dentro de un vehículo policial.");
	if(WORK_VEHICLES[vehicleid][work_vehicle_WORK] != WORK_POLICE) return SendClientMessage(playerid, -1, "{00FF80}Para asignar callsing tienes que estar dentro de un vehículo policial.");
	
	if(IsValidDynamic3DTextLabel(GLOBAL_VEHICLES[vehicleid][gb_vehicle_LABEL]))
	{
		DestroyDynamic3DTextLabel(GLOBAL_VEHICLES[vehicleid][gb_vehicle_LABEL]);
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_LABEL] = Text3D:INVALID_STREAMER_ID;
	}
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_LABEL] = CreateDynamic3DTextLabel(params, 0xCCCCCCCC, -0.7, -1.9, -0.3, 20.0, .attachedvehicle = vehicleid);
	return 1;
}

CMD:m(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_POLICE]) return SendClientMessage(playerid, -1, "{00FF80}No eres policía.");
	if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_POLICE) return SendClientMessage(playerid, -1, "{00FF80}No estás de servicio como policía.");
	
	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, -1, "{00FF80}Para usar el megáfono tienes que estar dentro de un vehículo policial.");
	
	new vehicleid = GetPlayerVehicleID(playerid);
	if(!WORK_VEHICLES[vehicleid][work_vehicle_VALID]) return SendClientMessage(playerid, -1, "{00FF80}Para usar el megáfono tienes que estar dentro de un vehículo policial.");
	if(WORK_VEHICLES[vehicleid][work_vehicle_WORK] != WORK_POLICE) return SendClientMessage(playerid, -1, "{00FF80}Para usar el megáfono tienes que estar dentro de un vehículo policial.");

	if(isnull(params)) return SendClientMessage(playerid, -1, "{00FF80}Error: /m [Mensaje]");

	new str_text[190];
	format(str_text, 190, "(Megáfono) %s: %s", PLAYER_TEMP[playerid][pt_RP_NAME], params);
	ProxDetector(playerid, 40.0, str_text, 0xFF9B6AFF, 0xFF9B6AFF, 0xFF9B6AFF, 0xFF9B6AFF, 0xFF9B6AFF, 85);
	return 1;
}

PutPlayerInVehicleEx(playerid, vehicleid, seat)
{
	PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_IMMUNITY] = gettime() + 3;
	PLAYER_AC_INFO[playerid][CHEAT_STATE_SPAMMER][p_ac_info_IMMUNITY] = gettime() + 3;
	PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_DOORS][p_ac_info_IMMUNITY] = gettime() + 5;
	PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_NOFUEL][p_ac_info_IMMUNITY] = gettime() + 15;
	return PutPlayerInVehicle(playerid, vehicleid, seat);
}

CMD:equiparse(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_POLICE]) return SendClientMessage(playerid, -1, "{00FF80}No eres policía.");
	
	if(IsPlayerInRangeOfPoint(playerid, 2.0, 219.244018, 69.982215, 1005.039062) || IsPlayerInRangeOfPoint(playerid, 2.0, 262.945587, 109.785270, 1004.617187) || IsPlayerInRangeOfPoint(playerid, 2.0, 222.683914, 186.956054, 1003.031250))
	{
		ShowDialog(playerid, DIALOG_POLICE_SHOP);
		SendClientMessage(playerid,-1,"Si vendes armas a otros jugadores seras baneado del servidor");
	}
	else ShowPlayerMessage(playerid, "No estás en el lugar adecuado.", 3);
	return 1;
}

CMD:entregar(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_POLICE]) return SendClientMessage(playerid, -1, "{00FF80}No eres policía.");
	if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_POLICE) return SendClientMessage(playerid, -1, "{00FF80}No estás de servicio como policía.");
	
	if(sscanf(params, "ud", params[0], params[1])) return SendClientMessage(playerid, -1, "{00FF80}Error: /entregar [PlayerID/Nombre] [Minutos]");
	if(params[1] < 1 || params[1] > 1440) return SendClientMessage(playerid, -1, "{00FF80}Error: cantidad de minutos no válida.");
	
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, -1, "{00FF80}Para entregar tienes que estar dentro de un vehículo policial.");
	
	new vehicleid = GetPlayerVehicleID(playerid);
	if(!WORK_VEHICLES[vehicleid][work_vehicle_VALID]) return SendClientMessage(playerid, -1, "{00FF80}Para entregar tienes que estar dentro de un vehículo policial.");
	if(WORK_VEHICLES[vehicleid][work_vehicle_WORK] != WORK_POLICE) return SendClientMessage(playerid, -1, "{00FF80}Para entregar tienes que estar dentro de un vehículo policial.");
	
	if(!IsPlayerConnected(params[0])) return SendClientMessage(playerid, -1, "{00FF80}El jugador no está conectado.");
	new Float:pos[3]; GetPlayerPos(params[0], pos[0], pos[1], pos[2]);
	if(!IsPlayerInRangeOfPoint(playerid, 5.0, pos[0], pos[1], pos[2])) return SendClientMessage(playerid, 0xA9F5A9AA, "Este jugador no está cerca tuya.");
	if(PLAYER_TEMP[params[0]][pt_GAME_STATE] != GAME_STATE_NORMAL) return SendClientMessage(playerid, -1, "{00FF80}No puedes arrestar a este jugador ahora.");
	if(GetPlayerState(params[0]) != PLAYER_STATE_PASSENGER) return SendClientMessage(playerid, -1, "{00FF80}Para entregar a esta persona tiene que estar dentro del vehículo policial.");
	if(GetPlayerVehicleID(params[0]) != vehicleid) return SendClientMessage(playerid, -1, "{00FF80}Para entregar a esta persona tiene que estar dentro del vehículo policial.");
	
	if(IsPlayerInRangeOfPoint(playerid, 20.0, 1564.971923, -1694.916381, 5.617697))
	{
		SetPlayerWantedLevel(params[0],0);
		SendClientMessage(playerid, -1, "La persona ahora está en la cárcel.");
		CHARACTER_INFO[params[0]][ch_POLICE_JAIL_ID] = 0;
		JailPlayer(params[0], params[1] * 60);
		AddPlayerPoliceHistory(params[0], "Central", "Encarcelamiento");
	}
	else if(IsPlayerInRangeOfPoint(playerid, 20.0, -1589.333496, 716.759521, -5.515106))
	{
		SetPlayerWantedLevel(params[0],0);
		SendClientMessage(playerid, -1, "La persona ahora está en la cárcel.");
		CHARACTER_INFO[params[0]][ch_POLICE_JAIL_ID] = 1;
		JailPlayer(params[0], params[1] * 60);
		AddPlayerPoliceHistory(params[0], "Central", "Encarcelamiento");
	}
	else if(IsPlayerInRangeOfPoint(playerid, 20.0, 2282.200439, 2431.598632, 3.000518))
	{
		SetPlayerWantedLevel(params[0],0);
		SendClientMessage(playerid, -1, "La persona ahora está en la cárcel.");
		CHARACTER_INFO[params[0]][ch_POLICE_JAIL_ID] = 2;
		JailPlayer(params[0], params[1] * 60);
		AddPlayerPoliceHistory(params[0], "Central", "Encarcelamiento");
	}
	else ShowPlayerMessage(playerid, "No estás en el lugar adecuado.", 3);
	return 1;
}

CMD:policias(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_POLICE]) return SendClientMessage(playerid, -1, "{00FF80}No eres policía.");
	
	PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT] = 10;
	PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] = 0;
	ShowDialog(playerid, DIALOG_POLICE_LIST);
	return 1;
}

CMD:resistirse(playerid, params[])
{
	if(PLAYER_TEMP[playerid][pt_CUFFING])
	{
		KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][14]);
		PLAYER_TEMP[playerid][pt_CUFFING] = false;
		TogglePlayerControllableEx(playerid, true);
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
		Auto_SendPlayerAction(playerid, "se resiste.");
	}
	return 1;
}

forward CuffPlayer(playerid);
public CuffPlayer(playerid)
{
	StopAudioStreamForPlayer(playerid);
	SetPlayerDrunkLevel(playerid, 0);
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	CancelEdit(playerid);
	HidePlayerDialog(playerid);
	EndPlayerJob(playerid);
	PLAYER_TEMP[playerid][pt_HUNGRY_MESSAGE] = false;
	PLAYER_TEMP[playerid][pt_THIRST_MESSAGE] = false;
	PLAYER_TEMP[playerid][pt_PLAYER_IN_ATM] = false;
	PLAYER_TEMP[playerid][pt_CUFFED] = false;
	PLAYER_TEMP[playerid][pt_CUFFING] = false;
	PLAYER_TEMP[playerid][pt_PLAYER_WAITING_MP3_HTTP] = false;
	if(PLAYER_TEMP[playerid][pt_WANT_TAXI])
	{
		PLAYER_TEMP[playerid][pt_WANT_TAXI] = false;
		DisablePlayerTaxiMark(playerid);
	}
	if(PLAYER_TEMP[playerid][pt_WANT_MECHANIC])
	{
		PLAYER_TEMP[playerid][pt_WANT_MECHANIC] = false;
		DisablePlayerMechanicMark(playerid);
	}
	if(PLAYER_TEMP[playerid][pt_PLAYER_IN_CALL]) EndPhoneCall(playerid);
	if(PLAYER_TEMP[playerid][pt_GPS_MAP]) HidePlayerGpsMap(playerid);
	
	PLAYER_TEMP[playerid][pt_CUFFED] = true;
	PLAYER_TEMP[playerid][pt_CUFFING] = false;
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CUFFED);
	return 1;
}

CMD:frecuencias(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_POLICE]) return SendClientMessage(playerid, -1, "{00FF80}No eres policía.");
	if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_POLICE) return SendClientMessage(playerid, -1, "{00FF80}No estás de servicio como policía.");
	
	ShowDialog(playerid, DIALOG_POLICE_RADIOS);
	return 1;
}

SendPoliceRadioMessage(radio, color, message[])
{
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(PLAYER_TEMP[i][pt_GAME_STATE] == GAME_STATE_NORMAL)
			{
				if(PLAYER_WORKS[i][WORK_POLICE])
				{
					if(PLAYER_TEMP[i][pt_WORKING_IN] == WORK_POLICE)
					{
						if(radio == -1) SendClientMessage(i, color, message);
						else
						{
							if(PLAYER_TEMP[i][pt_POLICE_RADIO] == radio)
							{
								SendClientMessage(i, color, message);
							}
						}
					}
				}
			}
		}
	}
	return 1;
}

CountPoliceRadioPlayers(radio)
{
	new total;
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(PLAYER_TEMP[i][pt_GAME_STATE] == GAME_STATE_NORMAL)
			{
				if(PLAYER_WORKS[i][WORK_POLICE])
				{
					if(PLAYER_TEMP[i][pt_WORKING_IN] == WORK_POLICE)
					{
						if(PLAYER_TEMP[i][pt_POLICE_RADIO] == radio)
						{
							total ++;
						}
					}
				}
			}
		}
	}
	return total;
}

GetPlayerZones(playerid, city[], zone[])
{
	new Float:f_Pos[3];
	
	switch(CHARACTER_INFO[playerid][ch_STATE])
	{
		case ROLEPLAY_STATE_INTERIOR:
		{
			f_Pos[0] = ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_EXT_X];
			f_Pos[1] = ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_EXT_Y];
			f_Pos[2] = ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_EXT_Z];
		}
		case ROLEPLAY_STATE_OWN_PROPERTY, ROLEPLAY_STATE_GUEST_PROPERTY:
		{
			f_Pos[0] = PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PROPERTY_INDEX] ][property_EXT_X];
			f_Pos[1] = PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PROPERTY_INDEX] ][property_EXT_Y];
			f_Pos[2] = PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PROPERTY_INDEX] ][property_EXT_Z];
		}
		default: GetPlayerPos(playerid, f_Pos[0], f_Pos[1], f_Pos[2]);
	}

    format(city, 45, "San Andreas");
    format(zone, 45, "Desconocida");

	for(new i = 0; i < sizeof(g_Cities); i++)
	{
	    if(	(f_Pos[0] >= g_Cities[i][z_MinX] && f_Pos[0] < g_Cities[i][z_MaxX]) && (f_Pos[1] >= g_Cities[i][z_MinY] && f_Pos[1] < g_Cities[i][z_MaxY]) )
		{
			format(city, 45, g_Cities[i][z_Name]);
		    break;
		}
	}

	for(new i = 0; i < sizeof(g_Zones); i++)
	{
	    if(	(f_Pos[0] >= g_Zones[i][z_MinX] && f_Pos[0] < g_Zones[i][z_MaxX]) && (f_Pos[1] >= g_Zones[i][z_MinY] && f_Pos[1] < g_Zones[i][z_MaxY]) )
		{
			format(zone, 45, g_Zones[i][z_Name]);
		    break;
		}
	}
	
	return 1;
}

GetPointZone(Float:f_Pos_X, Float:f_Pos_Y, city[], zone[])
{
	format(city, 45, "San Andreas");
    format(zone, 45, "Desconocida");

	for(new i = 0; i < sizeof(g_Cities); i++)
	{
	    if(	(f_Pos_X >= g_Cities[i][z_MinX] && f_Pos_X < g_Cities[i][z_MaxX]) && (f_Pos_Y >= g_Cities[i][z_MinY] && f_Pos_Y < g_Cities[i][z_MaxY]) )
		{
			format(city, 45, g_Cities[i][z_Name]);
		    break;
		}
	}
	
	for(new i = 0; i < sizeof(g_Zones); i++)
	{
	    if(	(f_Pos_X >= g_Zones[i][z_MinX] && f_Pos_X < g_Zones[i][z_MaxX]) && (f_Pos_Y >= g_Zones[i][z_MinY] && f_Pos_Y < g_Zones[i][z_MaxY]) )
		{
			format(zone, 45, g_Zones[i][z_Name]);
		    break;
		}
	}

	return 1;
}

JailPlayer(playerid, seconds = 300)
{
    CHARACTER_INFO[playerid][ch_STATE] = ROLEPLAY_STATE_JAIL;
    CHARACTER_INFO[playerid][ch_POLICE_JAIL_TIME] = seconds;

    PLAYER_TEMP[playerid][pt_ENTER_JAIL_TIME] = gettime();
    SetPlayerPosEx(playerid, JAIL_POSITIONS[ CHARACTER_INFO[playerid][ch_POLICE_JAIL_ID] ][jail_X], JAIL_POSITIONS[ CHARACTER_INFO[playerid][ch_POLICE_JAIL_ID]  ][jail_Y], JAIL_POSITIONS[ CHARACTER_INFO[playerid][ch_POLICE_JAIL_ID]  ][jail_Z], JAIL_POSITIONS[ CHARACTER_INFO[playerid][ch_POLICE_JAIL_ID]  ][jail_ANGLE], JAIL_POSITIONS[ CHARACTER_INFO[playerid][ch_POLICE_JAIL_ID]  ][jail_INTERIOR], 0, true);

    KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][15]);
    PLAYER_TEMP[playerid][pt_TIMERS][15] = SetTimerEx("UnjailPlayer", CHARACTER_INFO[playerid][ch_POLICE_JAIL_TIME] * 1000, false, "i", playerid);

    new time = CHARACTER_INFO[playerid][ch_POLICE_JAIL_TIME] - (gettime() - PLAYER_TEMP[playerid][pt_ENTER_JAIL_TIME]);
    SendClientMessageEx(playerid, -1, "{E6F8E0}Te quedan %s minutos de condena.", TimeConvert(time));
    ResetPlayerWeapons(playerid);
    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
    DisablePlayerPoliceMark(playerid);
    DeleteIlegalInv(playerid);

    ACCOUNT_INFO[playerid][ac_CARGOS]=0;
    Update_Cargos(playerid);
    return 1;
}

forward UnjailPlayer(playerid);
public UnjailPlayer(playerid)
{
	KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][15]);
	CHARACTER_INFO[playerid][ch_POLICE_JAIL_TIME] = 0;
	SetWeaponsForPlayer(playerid);
	SetPlayerArmedWeapon(playerid, 0);
	
	CHARACTER_INFO[playerid][ch_STATE] = ROLEPLAY_STATE_NORMAL;
	CHARACTER_INFO[playerid][ch_INTERIOR_EXTRA] = 0;
	PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] = 0;
	CHARACTER_INFO[playerid][ch_INTERIOR] = 0;
	CHARACTER_INFO[playerid][ch_POLICE_JAIL_TIME] = 0;

	SetPlayerPosEx(playerid, 1555.400390, -1675.611694, 16.195312, 0.0, 0, 0, true);
	/*
	for(new i = 0; i != sizeof ENTER_EXIT; i ++)
	{
		if(ENTER_EXIT[i][ee_INTERIOR_TYPE] == JAIL_POSITIONS[ CHARACTER_INFO[playerid][ch_POLICE_JAIL_ID] ][jail_INT])
		{
			CHARACTER_INFO[playerid][ch_INTERIOR_EXTRA] = ENTER_EXIT[i][ee_ID];
			PLAYER_TEMP[playerid][pt_PROPERTY_INDEX] = -1;
			SetPlayerPosEx(playerid, ENTER_EXIT[i][ee_INT_X], ENTER_EXIT[i][ee_INT_Y], ENTER_EXIT[i][ee_INT_Z], ENTER_EXIT[i][ee_INT_ANGLE] + 180.0, ENTER_EXIT[i][ee_INT_INTERIOR], 0, true);
			StopAudioStreamForPlayer(playerid);
			break;
		}
	}
	*/
	SendClientMessageEx(playerid, -1, "{E6F8E0}Has cumplido tu condena.");

	ACCOUNT_INFO[playerid][ac_CARGOS]=0;
	Update_Cargos(playerid);
	return 1;
}

DisablePlayerPoliceMark(playerid)
{
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(PLAYER_TEMP[i][pt_GAME_STATE] == GAME_STATE_NORMAL)
			{
				if(i == playerid) continue;
				if(!PLAYER_WORKS[i][WORK_POLICE]) continue;
				if(PLAYER_TEMP[i][pt_WORKING_IN] != WORK_POLICE) continue;
				
				SetPlayerMarkerForPlayer(i, playerid, PLAYER_COLOR);
			}
		}
	}
	return 1;
}

ShowPlayerStats(playerid, pid)
{
	if(!IsPlayerConnected(pid)) return 0;
	if(ACCOUNT_INFO[pid][ac_ID] == 0) return 0;
	
	
	ACCOUNT_INFO[pid][ac_TIME_PLAYING] += gettime() - PLAYER_TEMP[pid][pt_TIME_PLAYING];
	PLAYER_TEMP[pid][pt_TIME_PLAYING] = gettime();
	
	new Float:hours;
	ConvertTime_SecondsToHoursFloat(ACCOUNT_INFO[pid][ac_TIME_PLAYING], hours);

	new next_rep[24], neccessary_rep = ACCOUNT_INFO[pid][ac_LEVEL] * REP_MULTIPLIER;
	if(ACCOUNT_INFO[pid][ac_REP] < neccessary_rep)
	{
		new time = (ACCOUNT_INFO[pid][ac_TIME_FOR_REP] - (gettime() * 1000 - PLAYER_TEMP[pid][pt_TIME_PASSED_LAST_REP])) / 1000;
		if(time < 3) time = 3;
		
		format(next_rep, sizeof next_rep, "%sm", TimeConvert(time));
	}
	else format(next_rep, sizeof next_rep, "/comprarnivel");
	
	new caption[48], dialog[445 + (27 * sizeof(work_info))];
	format(caption, sizeof caption, "Estadísticas de %s", PLAYER_TEMP[pid][pt_RP_NAME]);
	
	format(dialog, sizeof dialog,
		
		"\
			ID: %d\n\
			Nombre: %s\n\
			Fecha registro: %s\n\
			Últ. conexión: %s\n\
			Tiempo jugando: %.1f horas\n\
			Nivel: %d\n\
			Reputación: %d/%d\n\
			Siguiente reputación: %s\n\
			Trabajo(s): %s\n\
			Banda: %s\n\
			Moneda "SERVER_COIN": %d\n\
			VIP: %s\n\
			\n\
			Para estadísticas de tus trabajos utiliza /exp.\n\
			Para ver tus pertenencias usa /inv.\n\
			\n\
		",
			
			ACCOUNT_INFO[pid][ac_ID],
			ACCOUNT_INFO[pid][ac_NAME],
			ACCOUNT_INFO[pid][reg_DATE],
			ACCOUNT_INFO[pid][ac_LAST_CONNECTION],
			hours,
			ACCOUNT_INFO[pid][ac_LEVEL],
			ACCOUNT_INFO[pid][ac_REP], neccessary_rep,
			next_rep,
			getPlayerWorks(pid),
			getPlayerCrew(pid),
			ACCOUNT_INFO[pid][ac_SD],
			getPlayerVip(pid)
			
	);
	
	ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, caption, dialog, "Cerrar", "");	
	return 1;
}

getPlayerCrew(playerid)
{
	new crew[32];
	if(!PLAYER_CREW[playerid][player_crew_VALID]) crew = "ninguna";
	else format(crew, sizeof crew, "%s", CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_NAME]);
	return crew;
}

getPlayerVip(playerid)
{
	new vip[16];
	if(!ACCOUNT_INFO[playerid][ac_SU]) vip = "No";
	else format(vip, sizeof vip, "Sí, VIP%d", ACCOUNT_INFO[playerid][ac_SU]);
	return vip;
}

AddPlayerBadHistory(account_id, by_account_id, type, text[])
{
	new DB_Query[266];
	format(DB_Query, sizeof DB_Query, "INSERT INTO `BAD_HISTORY` (`ID_USER`, `TYPE`, `BY`, `TEXT`) VALUES('%d', '%d', '%d', '%q');", account_id, type, by_account_id, text);
	db_query(Database, DB_Query);
	return 1;
}

AddPlayerBan(account_id, account_name[], account_ip[], by_account_id, type, text[], days = 0, mod[] = "day")
{
	new DBResult:Result, DB_Query[485];
	
	if(!days)
	{
		format(DB_Query, sizeof DB_Query, 
			
			"\
			INSERT INTO `BAD_HISTORY` (`ID_USER`, `TYPE`, `BY`, `TEXT`) VALUES('%d', '%d', '%d', '%q');\
			INSERT INTO `BANS` (`NAME`, `IP`, `ID_HISTORY`, `EXPIRE_DATE`) SELECT '%q', '%q', MAX(`ID`), '0' FROM `BAD_HISTORY`;\
			",
			
				account_id, type, by_account_id, text,
				account_name, account_ip
				
		);
	}
	else
	{
		format(DB_Query, sizeof DB_Query, 
			
			"\
			INSERT INTO `BAD_HISTORY` (`ID_USER`, `TYPE`, `BY`, `TEXT`) VALUES('%d', '%d', '%d', '%q');\
			INSERT INTO `BANS` (`NAME`, `IP`, `ID_HISTORY`, `EXPIRE_DATE`) SELECT '%q', '%q', MAX(`ID`), DATETIME('NOW', '+%d %s') FROM `BAD_HISTORY`;\
			",
			
				account_id, type, by_account_id, text,
				account_name, account_ip, days, mod
				
		);
	}
	
	Result = db_query(Database, DB_Query);
	db_free_result(Result);
	return 1;
}

// Comandos admins
CMD:reportar(playerid, params[])
{
	if(gettime() < PLAYER_TEMP[playerid][pt_ANTIFLOOD_REPORT] + 5) return SendClientMessage(playerid, -1, "{00FF80}Cálmate.");
	PLAYER_TEMP[playerid][pt_ANTIFLOOD_REPORT] = gettime();
	
	new razon[128];
	if(sscanf(params, "us[128]", params[0], razon)) return SendClientMessage(playerid, -1, "Error: {58ACFA}/reportar {FFFFFF}[PlayerID/Nombre] [Razón]");
    if(!IsPlayerConnected(params[0])) return SendClientMessage(playerid, -1, "{00FF80}Jugador desconectado.");
	
	SendClientMessage(playerid, -1, "{E6F8E0}Tu reporte ha sido enviado a los administradores en línea.");
	
	new str[145]; format(str, 145, "{ff782b}[REPORTE] {FFFFFF}%s (%d) > %s (%d): %s", ACCOUNT_INFO[playerid][ac_NAME], playerid, ACCOUNT_INFO[params[0]][ac_NAME], params[0], razon);
	SendMessageToAdmins(-1, str);
	return 1;
}
CMD:at(playerid, params[])
{
	LevelAdmin(playerid, 1);
	if(sscanf(params, "u", params[0])) return SendClientMessage(playerid, -1, "Error: {58ACFA}/at {FFFFFF}[PlayerID/Nombre]");
    if(!IsPlayerConnected(params[0])) return SendClientMessage(playerid, -1, "{00FF80}Jugador desconectado.");
    SendClientMessageEx(playerid, -1, "@Se le aviso a \"%s\" que le estas atendiendo su reporte",PLAYER_TEMP[params[0]][pt_NAME]);
    SendClientMessageEx(params[0],-1,"@Info: Admin \"%s\" está atendiendo tu reporte",PLAYER_TEMP[playerid][pt_NAME]);
	return 1;
}
CMD:r(playerid, params[])
{
	new message[128];
	if(sscanf(params, "s[128]", message)) return SendClientMessage(playerid, -1, "Error: {58ACFA}/r {FFFFFF}[MENSAJE]");
	
	if(PLAYER_TEMP[playerid][pt_ADMIN_PM_PID] == INVALID_PLAYER_ID || !PLAYER_TEMP[playerid][pt_ADMIN_PM_AID]) return SendClientMessage(playerid, -1, "{00FF80}Nada para responder.");
	if(ACCOUNT_INFO[ PLAYER_TEMP[playerid][pt_ADMIN_PM_PID] ][ac_ID] != PLAYER_TEMP[playerid][pt_ADMIN_PM_AID])
	{
		PLAYER_TEMP[playerid][pt_ADMIN_PM_PID] = INVALID_PLAYER_ID;
		PLAYER_TEMP[playerid][pt_ADMIN_PM_AID] = 0;
		PLAYER_TEMP[playerid][pt_ADMIN_PM_TIME] = 0;
		SendClientMessage(playerid, -1, "{00FF80}El administrador que te envió el mensaje está desconectado.");
		return 1;
	}
	if(gettime() > PLAYER_TEMP[playerid][pt_ADMIN_PM_TIME] + 60)
	{
		PLAYER_TEMP[playerid][pt_ADMIN_PM_PID] = INVALID_PLAYER_ID;
		PLAYER_TEMP[playerid][pt_ADMIN_PM_AID] = 0;
		PLAYER_TEMP[playerid][pt_ADMIN_PM_TIME] = 0;
		SendClientMessage(playerid, -1, "{00FF80}Has tardado demasiado en responser.");
		return 1;
	}
	
	SendClientMessageEx(PLAYER_TEMP[playerid][pt_ADMIN_PM_PID], -1, "Respuesta de %s (%d): %s", ACCOUNT_INFO[playerid][ac_NAME], playerid, message);
	SendClientMessage(playerid, -1, "{E6F8E0}Tu mensaje ha sido enviado al administrador.");
	PLAYER_TEMP[playerid][pt_ADMIN_PM_PID] = INVALID_PLAYER_ID;
	PLAYER_TEMP[playerid][pt_ADMIN_PM_AID] = 0;
	PLAYER_TEMP[playerid][pt_ADMIN_PM_TIME] = 0;
	return 1;
}

CMD:id(playerid, params[])
{
	new to_player;
	if(sscanf(params, "u", to_player)) return SendClientMessage(playerid, -1, "Error: {58ACFA}/id {FFFFFF}[PlayerID/Nombre]");
	if(!IsPlayerConnected(to_player)) return SendClientMessage(playerid, -1, "{00FF80}Jugador desconectado.");
	
	SendClientMessageEx(playerid, -1, "Nombre: '%s' DB-ID: '%d' Playerid: '%d' Nivel: %d", ACCOUNT_INFO[to_player][ac_NAME], ACCOUNT_INFO[to_player][ac_ID], to_player, ACCOUNT_INFO[to_player][ac_LEVEL]);
	return 1;
}

CMD:admins(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 2) return SendClientMessage(playerid, -1, "SERVER: Unknown command.");
	PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT] = 10;
	PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] = 0;
	ShowDialog(playerid, DIALOG_ADMIN_LIST);
	return 1;
}

CMD:trabajos(playerid)
{
	ShowDialog(playerid, DIALOG_TRABAJOS_TELEPORTS);
	return 1;
}

CMD:getid(playerid, params[])
{
	new name[24];
	if(sscanf(params, "s[24]", name)) return SendClientMessage(playerid, -1, "Syntax: /getid <nombre o parte del nombre>");

	new DBResult:Result, DB_Query[128];
	format(DB_Query, sizeof DB_Query, "SELECT `ID`, `NAME`, `CONNECTED`, `PLAYERID` FROM `CUENTA` WHERE `NAME` LIKE '%%%q%%' LIMIT 20;", name);
	Result = db_query(Database, DB_Query);

	new count;
	for(new i = 0; i < db_num_rows(Result); i ++)
	{
		new id, get_name[24], connected, player_id;

		id = db_get_field_assoc_int(Result, "ID");
		db_get_field_assoc(Result, "NAME", get_name, 24);
		connected = db_get_field_assoc_int(Result, "CONNECTED");
		player_id = db_get_field_assoc_int(Result, "PLAYERID");

		SendClientMessageEx(playerid, -1, "Nombre: '%s' DB-ID: '%d' Conectado: '%d' Playerid: '%d'", get_name, id, connected, player_id);

		count ++;
		db_next_row(Result);
	}
	db_free_result(Result);

	SendClientMessageEx(playerid, -1, "Se encontraron %d coincidencias, el límite es 20.", count);
	return 1;
}

CMD:getname(playerid, params[])
{
	new db_id;
	if(sscanf(params, "d", db_id)) return SendClientMessage(playerid, -1, "Syntax: /getname <DB-ID>");
	
	new DBResult:Result, DB_Query[128];
	format(DB_Query, sizeof DB_Query, "SELECT `ID`, `NAME`, `CONNECTED`, `PLAYERID` FROM `CUENTA` WHERE `ID` = '%d';", db_id);
	Result = db_query(Database, DB_Query);
	
	if(db_num_rows(Result))
	{
		new id, get_name[24], connected, player_id;
		
		id = db_get_field_assoc_int(Result, "ID");
		db_get_field_assoc(Result, "NAME", get_name, 24);
		connected = db_get_field_assoc_int(Result, "CONNECTED");
		player_id = db_get_field_assoc_int(Result, "PLAYERID");
		
		SendClientMessageEx(playerid, -1, "Nombre: '%s' DB-ID: '%d' Conectado: '%d' Playerid: '%d'", get_name, id, connected, player_id);
	}
	else SendClientMessage(playerid, -1, "Sin resultados.");
	db_free_result(Result);
	return 1;
}

CMD:aka(playerid, params[])
{
	new to_player;
	if(sscanf(params, "u", to_player)) return SendClientMessage(playerid, -1, "Syntax: /aka <player_id>");
	if(!IsPlayerConnected(to_player)) return SendClientMessage(playerid, -1, "Jugador desconectado.");
	if(isnull(ACCOUNT_INFO[to_player][ac_IP])) return SendClientMessage(playerid, -1, "IP no válida.");
	
	SendClientMessageEx(playerid, -1, "AKA de %s (%d):", ACCOUNT_INFO[to_player][ac_NAME], to_player);
	
	new DBResult:Result, DB_Query[128];
	format(DB_Query, sizeof DB_Query, "SELECT `ID`, `NAME` FROM `CUENTA` WHERE `IP` = '%q' LIMIT 20;", ACCOUNT_INFO[to_player][ac_IP]);
	Result = db_query(Database, DB_Query);
	
	new count;
	for(new i = 0; i < db_num_rows(Result); i ++)
	{
		new id, get_name[24];
		
		id = db_get_field_assoc_int(Result, "ID");
		db_get_field_assoc(Result, "NAME", get_name, 24);
		
		SendClientMessageEx(playerid, -1, "Nombre: {f4f442}'%s' {FFFFFF}DB-ID: '%d'", get_name, id);

		count ++;
		db_next_row(Result);
	}
	db_free_result(Result);
	
	SendClientMessageEx(playerid, -1, "Se encontraron %d coincidencias, el límite es 20.", count);
	return 1;
}
alias:aka("cuentas");

CMD:adv(playerid, params[])
{
	new to_player, razon[128];
	if(sscanf(params, "us[128]", to_player, razon)) return SendClientMessage(playerid, -1, "Syntax: /adv <player_id> <razon>");
	if(!IsPlayerConnected(to_player)) return SendClientMessageEx(playerid, -1, "Jugador (%d) desconectado", to_player);
	if(ACCOUNT_INFO[to_player][ac_ADMIN_LEVEL] > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]) return SendClientMessage(playerid, -1, "El rango administrativo de este jugador es superior al tuyo.");
	
	
	AddPlayerBadHistory(ACCOUNT_INFO[to_player][ac_ID], ACCOUNT_INFO[playerid][ac_ID], TYPE_WARNING, razon);
	
	new dialog[170];
	format(dialog, sizeof dialog, "Has recibido una advertencia, razón:\n%s\n", razon);
	ShowPlayerDialog(to_player, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Aviso", dialog, "Entiendo", "");
	
	SendClientMessageEx(playerid, -1, "Jugador (nick: '%s' dbid: '%d', pid: '%d') advertido.", ACCOUNT_INFO[to_player][ac_NAME], ACCOUNT_INFO[to_player][ac_ID], to_player);
	

	new str[145]; format(str, 145, "{FF0000}@%s (%d) Fue advertido por un administrador razon: \"%s\"",ACCOUNT_INFO[to_player][ac_NAME], to_player, razon);
	SendAdminAd(-1, str);
	return 1;
}
alias:adv("advertencia", "san");

CMD:kick(playerid, params[])
{
	new to_player, razon[128];
	if(sscanf(params, "us[128]", to_player, razon)) return SendClientMessage(playerid, -1, "Syntax: /kick <player_id> <razon>");
	if(!IsPlayerConnected(to_player)) return SendClientMessageEx(playerid, -1, "Jugador (%d) desconectado", to_player);
	if(ACCOUNT_INFO[to_player][ac_ADMIN_LEVEL] > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]) return SendClientMessage(playerid, -1, "El rango administrativo de este jugador es superior al tuyo.");
	
	if(PLAYER_TEMP[to_player][pt_KICKED]) return SendClientMessage(playerid, -1, "El jugador ya está expulsado.");
	if(!ACCOUNT_INFO[to_player][ac_ID]) return Kick(to_player);
	
	
	AddPlayerBadHistory(ACCOUNT_INFO[to_player][ac_ID], ACCOUNT_INFO[playerid][ac_ID], TYPE_KICK, razon);
	
	new dialog[170];
	format(dialog, sizeof dialog, "Has sido expulsado, razón:\n%s\n", razon);
	ShowPlayerDialog(to_player, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Aviso", dialog, "Entiendo", "");
	KickEx(to_player, 500);
	
	SendClientMessageEx(playerid, -1, "Jugador (nick: '%s' dbid: '%d', pid: '%d') expulsado.", ACCOUNT_INFO[to_player][ac_NAME], ACCOUNT_INFO[to_player][ac_ID], to_player);
	
	
	new str[145]; format(str, 145, "{FF0000}* %s (%d) Fue expulsado por: \"%s\"", ACCOUNT_INFO[to_player][ac_NAME], to_player, razon);
	SendAdminAd(-1, str);
	return 1;
}

CMD:spec(playerid, params[])
{
	new to_player;
	if(sscanf(params, "u", to_player)) return SendClientMessage(playerid, -1, "Syntax: /spec <player_id>");
	if(!IsPlayerConnected(to_player)) return SendClientMessageEx(playerid, -1, "Jugador (%d) desconectado", to_player);
	if(ACCOUNT_INFO[to_player][ac_ADMIN_LEVEL] > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]) return SendClientMessage(playerid, -1, "El rango administrativo de este jugador es superior al tuyo.");
	
	if(GetPlayerState(playerid) != PLAYER_STATE_SPECTATING)
    {
		new Float:p[4];
		GetPlayerPos(playerid, p[0], p[1], p[2]);
		GetPlayerFacingAngle(playerid, p[3]);
		SetSpawnInfo(playerid, NO_TEAM, GetPlayerSkin(playerid), p[0], p[1], p[2], p[3], 0, 0, 0, 0, 0, 0);
		CHARACTER_INFO[playerid][ch_INTERIOR] = GetPlayerInterior(playerid);
		PLAYER_TEMP[playerid][pt_VIRTUAL_WORLD] = GetPlayerVirtualWorld(playerid);
	}
	
	TogglePlayerSpectatingEx(playerid, true);
	SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(to_player));
	SetPlayerInterior(playerid, GetPlayerInterior(to_player));
	if(IsPlayerInAnyVehicle(to_player)) PlayerSpectateVehicle(playerid, GetPlayerVehicleID(to_player));
	else PlayerSpectatePlayer(playerid, to_player);
	SendClientMessage(playerid, -1, "Utiliza /specoff para terminar este modo.");
	
	
	SendCmdLogToAdmins(playerid, "spec", params);
	return 1;
}

CMD:specoff(playerid, params[])
{
	SetPlayerInterior(playerid, CHARACTER_INFO[playerid][ch_INTERIOR]);
	SetPlayerVirtualWorld(playerid, PLAYER_TEMP[playerid][pt_VIRTUAL_WORLD]);
	TogglePlayerSpectatingEx(playerid, false);
	KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][3]);
	PLAYER_TEMP[playerid][pt_TIMERS][3] = SetTimerEx("TogglePlayerControl", 2000, false, "ib", playerid, true);
	return 1;
}

CMD:freeze(playerid, params[])
{
	new to_player;
	if(sscanf(params, "u", to_player)) return SendClientMessage(playerid, -1, "Syntax: /freeze <player_id>");
	if(!IsPlayerConnected(to_player)) return SendClientMessageEx(playerid, -1, "Jugador (%d) desconectado", to_player);
	
	SendClientMessageEx(playerid, -1, "Jugador '%s' (%d) congelado.", ACCOUNT_INFO[to_player][ac_NAME], to_player);
	TogglePlayerControllableEx(to_player, false);
	return 1;
}
alias:freeze("congelar");

CMD:unfreeze(playerid, params[])
{
	new to_player;
	if(sscanf(params, "u", to_player)) return SendClientMessage(playerid, -1, "Syntax: /unfreeze <player_id>");
	if(!IsPlayerConnected(to_player)) return SendClientMessageEx(playerid, -1, "Jugador (%d) desconectado", to_player);
	
	SendClientMessageEx(playerid, -1, "Jugador '%s' (%d) descongelado.", ACCOUNT_INFO[to_player][ac_NAME], to_player);
	TogglePlayerControllableEx(to_player, true);
	return 1;
}
alias:unfreeze("descongelar");

CMD:pest(playerid, params[])
{
	new to_player;
	if(sscanf(params, "u", to_player)) return SendClientMessage(playerid, -1, "Syntax: /pest <player_id>");
	if(!IsPlayerConnected(to_player)) return SendClientMessageEx(playerid, -1, "Jugador (%d) desconectado", to_player);
	if(ACCOUNT_INFO[to_player][ac_ADMIN_LEVEL] > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]) return SendClientMessage(playerid, -1, "El rango administrativo de este jugador es superior al tuyo.");
	
	ShowPlayerStats(playerid, to_player);
	return 1;
}

CMD:pinv(playerid, params[])
{
	new to_player;
	if(sscanf(params, "u", to_player)) return SendClientMessage(playerid, -1, "Syntax: /pinv <player_id>");
	if(!IsPlayerConnected(to_player)) return SendClientMessageEx(playerid, -1, "Jugador (%d) desconectado", to_player);
	if(ACCOUNT_INFO[to_player][ac_ADMIN_LEVEL] > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]) return SendClientMessage(playerid, -1, "El rango administrativo de este jugador es superior al tuyo.");
	
	ShowPlayerInventory(playerid, to_player);
	return 1;
}

CMD:pexp(playerid, params[])
{
	new to_player;
	if(sscanf(params, "u", to_player)) return SendClientMessage(playerid, -1, "Syntax: /pexp <player_id>");
	if(!IsPlayerConnected(to_player)) return SendClientMessageEx(playerid, -1, "Jugador (%d) desconectado", to_player);
	if(ACCOUNT_INFO[to_player][ac_ADMIN_LEVEL] > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]) return SendClientMessage(playerid, -1, "El rango administrativo de este jugador es superior al tuyo.");
	
	ShowPlayerSkills(playerid, to_player);
	return 1;
}

CMD:pbank(playerid, params[])
{
	new to_player;
	if(sscanf(params, "u", to_player)) return SendClientMessage(playerid, -1, "Syntax: /pbank <player_id>");
	if(!IsPlayerConnected(to_player)) return SendClientMessageEx(playerid, -1, "Jugador (%d) desconectado", to_player);
	if(ACCOUNT_INFO[to_player][ac_ADMIN_LEVEL] > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]) return SendClientMessage(playerid, -1, "El rango administrativo de este jugador es superior al tuyo.");
	
	if(!BANK_ACCOUNT[to_player][bank_account_ID]) SendClientMessage(playerid, -1, "El jugador no tiene cuenta bancaria.");
	else SendClientMessageEx(playerid, -1, "Cuenta bancaria ID: '%d' Balance: '%s'", BANK_ACCOUNT[to_player][bank_account_ID], number_format_thousand(BANK_ACCOUNT[to_player][bank_account_BALANCE]));
	return 1;
}

CMD:unjail(playerid, params[])
{
	new to_player;
	if(sscanf(params, "u", to_player)) return SendClientMessage(playerid, -1, "Syntax: /unjail <player_id>");
	if(!IsPlayerConnected(to_player)) return SendClientMessageEx(playerid, -1, "Jugador (%d) desconectado", to_player);
	if(ACCOUNT_INFO[to_player][ac_ADMIN_LEVEL] > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]) return SendClientMessage(playerid, -1, "El rango administrativo de este jugador es superior al tuyo.");
	
	if(CHARACTER_INFO[to_player][ch_STATE] != ROLEPLAY_STATE_JAIL) return SendClientMessage(playerid, -1, "El jugador no está en el cárcel.");
	
	UnjailPlayer(to_player);
	SendClientMessageEx(playerid, -1, "El jugador %s (%d) ahora está en libertad.", ACCOUNT_INFO[to_player][ac_NAME], to_player);
	
	
	SendCmdLogToAdmins(playerid, "unjail", params);
	return 1;
}

CMD:ip(playerid, params[])
{
	new to_player;
	if(sscanf(params, "u", to_player)) return SendClientMessage(playerid, -1, "Syntax: /ip <player_id>");
	if(!IsPlayerConnected(to_player)) return SendClientMessageEx(playerid, -1, "Jugador (%d) desconectado", to_player);
	if(ACCOUNT_INFO[to_player][ac_ADMIN_LEVEL] > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]) return SendClientMessage(playerid, -1, "El rango administrativo de este jugador es superior al tuyo.");

	SendClientMessageEx(playerid, -1, "IP %s (%d): %s", ACCOUNT_INFO[to_player][ac_NAME], to_player, ACCOUNT_INFO[to_player][ac_IP]);
	return 1;
}

CMD:traerveh(playerid, params[])
{
	new to_car;
	if(sscanf(params, "i", to_car)) return SendClientMessage(playerid, -1, "Syntax: /traerveh <car_id>");
	if(to_car >= MAX_VEHICLES) return 1;

	if(!GLOBAL_VEHICLES[to_car][gb_vehicle_VALID]) return SendClientMessage(playerid, -1, "Vehículo no válido.");
	if(GLOBAL_VEHICLES[to_car][gb_vehicle_OCCUPIED]) return SendClientMessage(playerid, -1, "Vehículo está ocupado.");
		
    new Float:gPos[3];
    GetPlayerPos(playerid, gPos[0], gPos[1], gPos[2]);
    SetVehicleVirtualWorld(to_car, GetPlayerVirtualWorld(playerid));
    SetVehiclePosEx(to_car, gPos[0] + 2.0, gPos[1], gPos[2]);
    return 1;
}

CMD:duty(playerid)
{
	if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 1) return SendClientMessage(playerid, -1, "SERVER: Unknown command.");
	if(PLAYER_TEMP[playerid][pt_ADMIN_SERVICE])
	{
		PLAYER_TEMP[playerid][pt_ADMIN_SERVICE] = false;
		
		SetPlayerHealthEx(playerid, PLAYER_TEMP[playerid][pt_OLD_HEALTH]);
		SetPlayerArmourEx(playerid, PLAYER_TEMP[playerid][pt_OLD_ARMOUR]);
		SetPlayerNormalColor(playerid);
		
		if(IsValidDynamic3DTextLabel(PLAYER_TEMP[playerid][pt_ADMIN_LABEL]))
		{
			DestroyDynamic3DTextLabel(PLAYER_TEMP[playerid][pt_ADMIN_LABEL]);
			PLAYER_TEMP[playerid][pt_ADMIN_LABEL] = Text3D:INVALID_STREAMER_ID;
		}
		
		SendClientMessageEx(playerid, 0xCCCCCCCC, "Ahora no estás de servicio como %s.", ADMIN_LEVELS[ ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] ]);
	}	
	else
	{
		PLAYER_TEMP[playerid][pt_ADMIN_SERVICE] = true;
		
		GetPlayerHealth(playerid, PLAYER_TEMP[playerid][pt_OLD_HEALTH]);
		GetPlayerArmour(playerid, PLAYER_TEMP[playerid][pt_OLD_ARMOUR]);
		
		SetPlayerHealthEx(playerid, 10000.0);
		SetPlayerArmourEx(playerid, 10000.0);
		SetPlayerNormalColor(playerid);
		
		if(IsValidDynamic3DTextLabel(PLAYER_TEMP[playerid][pt_ADMIN_LABEL]))
		{
			DestroyDynamic3DTextLabel(PLAYER_TEMP[playerid][pt_ADMIN_LABEL]);
			PLAYER_TEMP[playerid][pt_ADMIN_LABEL] = Text3D:INVALID_STREAMER_ID;
		}
		
		new label_str[64];
		switch(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL])
		{
			case 1: format(label_str, sizeof label_str, "{FFFF00}%s en servicio", ADMIN_LEVELS[ ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] ]);
			case 2: format(label_str, sizeof label_str, "{66CC00}%s en servicio", ADMIN_LEVELS[ ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] ]);
			case 3: format(label_str, sizeof label_str, "{99CCFF}%s en servicio", ADMIN_LEVELS[ ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] ]);
			case 4: format(label_str, sizeof label_str, "{FF9900}%s en servicio", ADMIN_LEVELS[ ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] ]);
			case 5: format(label_str, sizeof label_str, "{FF0000}%s en servicio", ADMIN_LEVELS[ ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] ]);
		}
		PLAYER_TEMP[playerid][pt_ADMIN_LABEL] = CreateDynamic3DTextLabel(label_str, -1, 0.0, 0.0, 0.3, 20.0, playerid, .testlos = true);

		if(PLAYER_TEMP[playerid][pt_WORKING_IN]) SendClientMessageEx(playerid, -1, "Deberías dejar de estar de servicio como %s para administrar mejor...", work_info[ PLAYER_TEMP[playerid][pt_WORKING_IN] ][work_info_NAME]);
		SendClientMessageEx(playerid, 0xCCCCCCCC, "Ahora estás de servicio como %s.", ADMIN_LEVELS[ ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] ]);
	}
	return 1;
}	

CMD:goto(playerid, params[])
{
	new to_player;
	if(sscanf(params, "u", to_player)) return SendClientMessage(playerid, -1, "Syntax: /goto <player_id>");
	if(!IsPlayerConnected(to_player)) return SendClientMessageEx(playerid, -1, "Jugador (%d) desconectado", to_player);
	if(ACCOUNT_INFO[to_player][ac_ADMIN_LEVEL] > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]) return SendClientMessage(playerid, -1, "El rango administrativo de este jugador es superior al tuyo.");
	
	new Float:p[4];
	GetPlayerPos(to_player, p[0], p[1], p[2]);
	GetPlayerFacingAngle(to_player, p[3]);
	
	SetPlayerPosEx(playerid, p[0], p[1], p[2], p[3], GetPlayerInterior(to_player), GetPlayerVirtualWorld(to_player), false, true);
	SetPlayerFacingAngle(playerid, p[3] + 180.0);
	
	SendCmdLogToAdmins(playerid, "goto", params);
	return 1;
}
alias:goto("ir");

CMD:get(playerid, params[])
{
	new to_player;
	if(sscanf(params, "u", to_player)) return SendClientMessage(playerid, -1, "Syntax: /get <player_id>");
	if(!IsPlayerConnected(to_player)) return SendClientMessageEx(playerid, -1, "Jugador (%d) desconectado", to_player);
	if(ACCOUNT_INFO[to_player][ac_ADMIN_LEVEL] > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]) return SendClientMessage(playerid, -1, "El rango administrativo de este jugador es superior al tuyo.");
	
	new Float:p[4];
	GetPlayerPos(playerid, p[0], p[1], p[2]);
	GetPlayerFacingAngle(playerid, p[3]);
	
	SetPlayerPosEx(to_player, p[0], p[1], p[2], GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid), false, true);
	SetPlayerFacingAngle(to_player, p[3] + 180.0);
	
	
	SendCmdLogToAdmins(playerid, "get", params);
	return 1;
}
alias:get("traer");

CMD:unban(playerid, params[])
{
	new name[24];
	if(sscanf(params, "s[24]", name)) return SendClientMessage(playerid, -1, "Syntax: /unban <nombre completo>");
	
	new DBResult:Result, DB_Query[128];
	format(DB_Query, sizeof DB_Query, "SELECT * FROM `BANS` WHERE `NAME` = '%q';", name);
	Result = db_query(Database, DB_Query);
	
	if(db_num_rows(Result))
	{
		format(DB_Query, sizeof DB_Query, "DELETE FROM `BANS` WHERE `NAME` = '%q';", name);
		db_query(Database, DB_Query);
		
		SendClientMessageEx(playerid, -1, "El usuario '%s' ha sido desbaneado.", name);
		
		new str[145]; format(str, 145, "{ff782b}[ADMIN] {FFFFFF}%s (%d) ha desbaneado a '%s'.", ACCOUNT_INFO[playerid][ac_NAME], playerid, name);
		SendMessageToAdmins(-1, str);
	}
	else SendClientMessageEx(playerid, -1, "El nombre '%s' no está en la lista de baneados.", name);
	db_free_result(Result);
	return 1;
}

CMD:jail(playerid, params[])
{
    new to_player, razon[128], time;
    if(sscanf(params, "uds[128]", to_player, time, razon)) return SendClientMessage(playerid, -1, "Syntax: /jail <player_id> <minutos> <razón>");
	if(time < 0 || time > 1440) return SendClientMessage(playerid, -1, "Intervalo de minutos incorrecto.");
    if(!IsPlayerConnected(to_player)) return SendClientMessageEx(playerid, -1, "Jugador (%d) desconectado", to_player);
    if(ACCOUNT_INFO[to_player][ac_ADMIN_LEVEL] > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]) return SendClientMessage(playerid, -1, "El rango administrativo de este jugador es superior al tuyo.");

    StopAudioStreamForPlayer(to_player);
    CancelEdit(to_player);
    HidePlayerDialog(to_player);
    EndPlayerJob(to_player);
    PLAYER_TEMP[to_player][pt_HUNGRY_MESSAGE] = false;
    PLAYER_TEMP[to_player][pt_THIRST_MESSAGE] = false;
    PLAYER_TEMP[to_player][pt_PLAYER_IN_ATM] = false;
    PLAYER_TEMP[to_player][pt_CUFFED] = false;
    PLAYER_TEMP[to_player][pt_CUFFING] = false;
    PLAYER_TEMP[to_player][pt_PLAYER_WAITING_MP3_HTTP] = false;
    if(PLAYER_TEMP[to_player][pt_WANT_TAXI])
    {
        PLAYER_TEMP[to_player][pt_WANT_TAXI] = false;
        DisablePlayerTaxiMark(to_player);
    }
    if(PLAYER_TEMP[to_player][pt_WANT_MECHANIC])
    {
        PLAYER_TEMP[to_player][pt_WANT_MECHANIC] = false;
        DisablePlayerMechanicMark(to_player);
    }
    if(PLAYER_TEMP[to_player][pt_PLAYER_IN_CALL]) EndPhoneCall(to_player);
    if(PLAYER_TEMP[to_player][pt_GPS_MAP]) HidePlayerGpsMap(to_player);

    JailPlayer(to_player, time * 60);
    SendClientMessageEx(to_player, 0xCCCCCCCC, "Info: Te quedan %s minutos de sanción, razón: %s.", TimeConvert(time * 60), razon);
    SetPlayerSpecialAction(to_player, SPECIAL_ACTION_NONE);

    new str[145]; format(str, 145, "{FF0000}@%s (%d) Fue encarcelado por: \"%s\"",ACCOUNT_INFO[to_player][ac_NAME], to_player, razon);
    SendAdminAd(-1, str);
    return 1;
}

CMD:ban(playerid, params[])
{	
	new to_player, razon[128];
	if(sscanf(params, "us[128]", to_player, razon)) return SendClientMessage(playerid, -1, "Syntax: /ban <player_id> <razon>");
	if(!IsPlayerConnected(to_player)) return SendClientMessageEx(playerid, -1, "Jugador (%d) desconectado", to_player);
	if(ACCOUNT_INFO[to_player][ac_ADMIN_LEVEL] > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]) return SendClientMessage(playerid, -1, "El rango administrativo de este jugador es superior al tuyo.");
	
	if(PLAYER_TEMP[to_player][pt_KICKED]) return SendClientMessage(playerid, -1, "El jugador ya está expulsado.");
	if(!ACCOUNT_INFO[to_player][ac_ID]) return Kick(to_player);
	
	AddPlayerBan(ACCOUNT_INFO[to_player][ac_ID], ACCOUNT_INFO[to_player][ac_NAME], ACCOUNT_INFO[to_player][ac_IP], ACCOUNT_INFO[playerid][ac_ID], TYPE_BAN, razon);
	
	new dialog[250];
	format(dialog, sizeof dialog, "Has sido baneado, razón:\n%s\n", razon);
	ShowPlayerDialog(to_player, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Aviso", dialog, "Entiendo", "");
	KickEx(to_player, 500);
	
	SendClientMessageEx(playerid, -1, "Jugador (nick: '%s' dbid: '%d', id: '%d') baneado.", ACCOUNT_INFO[to_player][ac_NAME], ACCOUNT_INFO[to_player][ac_ID], to_player);
	
	new str[145]; format(str, 145, "{FF0000}@%s (%d) fue baneado por un administrador razon: \"%s\"",ACCOUNT_INFO[to_player][ac_NAME], to_player, razon);
	SendAdminAd(-1, str);
	return 1;
}

CMD:cls(playerid,params[])
{	
	for(new i = 0; i != 40; i ++) SendClientMessageToAll(-1, " ");
	
	SendCmdLogToAdmins(playerid, "cls", params);
	return 1;
}
alias:cls("log");

CMD:tban(playerid, params[])
{	
	new to_player, days, razon[128];
	if(sscanf(params, "uds[128]", to_player, days, razon)) return SendClientMessage(playerid, -1, "Syntax: /tban <player_id> <dias> <razon>");
	if(!IsPlayerConnected(to_player)) return SendClientMessageEx(playerid, -1, "Jugador (%d) desconectado", to_player);
	if(ACCOUNT_INFO[to_player][ac_ADMIN_LEVEL] > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]) return SendClientMessage(playerid, -1, "El rango administrativo de este jugador es superior al tuyo.");
	if(days <= 0 || days > 9999) return SendClientMessage(playerid, -1, "Syntax: /ban <player_id> <dias> <razon>");
	
	if(PLAYER_TEMP[to_player][pt_KICKED]) return SendClientMessage(playerid, -1, "El jugador ya está expulsado.");
	if(!ACCOUNT_INFO[to_player][ac_ID]) return Kick(to_player);
	
	AddPlayerBan(ACCOUNT_INFO[to_player][ac_ID], ACCOUNT_INFO[to_player][ac_NAME], ACCOUNT_INFO[to_player][ac_IP], ACCOUNT_INFO[playerid][ac_ID], TYPE_TEMP_BAN, razon, days);
	
	new dialog[250];
	format(dialog, sizeof dialog, "Has sido baneado por %d días, razón:\n%s\n", days, razon);
	ShowPlayerDialog(to_player, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Aviso", dialog, "Entiendo", "");
	KickEx(to_player, 500);
	
	SendClientMessageEx(playerid, -1, "Jugador (nick: '%s' dbid: '%d', pid: '%d') baneado por %d días.", ACCOUNT_INFO[to_player][ac_NAME], ACCOUNT_INFO[to_player][ac_ID], to_player, days);
	
	
	new str[145]; format(str, 145, "{FF0000}@%s (%d) fue baneado por %d días por un administrador razon: %s",ACCOUNT_INFO[to_player][ac_NAME], to_player, days, razon);
	SendAdminAd(-1, str);
	return 1;
}

CMD:dban(playerid, params[])
{
	new razon[128], to_account;
	if(sscanf(params, "ds[128]", to_account, razon)) return SendClientMessage(playerid, -1, "Syntax: /dban <DB-ID> <razon>");
	
	new DBResult:Result, DB_Query[160];
	format(DB_Query, sizeof DB_Query, "SELECT `ID`, `IP`, `NAME`, `CONNECTED`, `PLAYERID`, `ADMIN_LEVEL` FROM `CUENTA` WHERE `ID` = '%d';", to_account);
	Result = db_query(Database, DB_Query);
	
	if(db_num_rows(Result))
	{
		new id, ip[16], get_name[24], connected, player_id, admin_level;
		
		id = db_get_field_assoc_int(Result, "ID");
		db_get_field_assoc(Result, "IP", ip, 16);
		db_get_field_assoc(Result, "NAME", get_name, 24);
		connected = db_get_field_assoc_int(Result, "CONNECTED");
		player_id = db_get_field_assoc_int(Result, "PLAYERID");
		admin_level = db_get_field_assoc_int(Result, "ADMIN_LEVEL");
		
		if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] >= admin_level)
		{
			if(connected) SendClientMessageEx(playerid, -1, "JUGADOR '%s' DB-ID '%d' conectado utilice /ban, su player_id: %d.", get_name, id, player_id);
			else
			{
				new DBResult:is_banned;
				format(DB_Query, sizeof DB_Query, "SELECT * FROM `BANS` WHERE `NAME` = '%q' OR `IP` = '%q';", get_name, ip);
				is_banned = db_query(Database, DB_Query);
				
				if(db_num_rows(is_banned))
				{
					new expire_date[24];
					db_get_field_assoc(is_banned, "EXPIRE_DATE", expire_date, 24);
					
					if(!strcmp(expire_date, "0", false)) SendClientMessageEx(playerid, -1, "JUGADOR (Nombre: '%s' DB-ID: '%d') ya está baneado (permanentemente).", get_name, id);
					else SendClientMessageEx(playerid, -1, "JUGADOR (Nombre: '%s' DB-ID: '%d') ya está baneado (temporalmente, fecha de readmisión: %s).", get_name, id, expire_date);
				}
				else
				{
					AddPlayerBan(id, get_name, ip, ACCOUNT_INFO[playerid][ac_ID], TYPE_BAN, razon);
					SendClientMessageEx(playerid, -1, "Jugador (nick: '%s' db_id: '%d') baneado.", get_name, id);
					
					
					new str[145]; format(str, 145, "{ff782b}[ADMIN] {FFFFFF}%s (%d) baneó a %s (offline, db_id: %d): %s", ACCOUNT_INFO[playerid][ac_NAME], playerid, get_name, id, razon);
					SendMessageToAdmins(-1, str);
				}
				
				db_free_result(is_banned);
			}
		}
		else SendClientMessage(playerid, -1, "El rango administrativo de este jugador es superior al tuyo.");
	}
	else SendClientMessage(playerid, -1, "No se encontro la DB-ID.");
	db_free_result(Result);
	return 1;
}

CMD:dtban(playerid, params[])
{
	new razon[128], to_account, days;
	if(sscanf(params, "dds[128]", to_account, days, razon)) return SendClientMessage(playerid, -1, "Syntax: /dtban <DB-ID> <dias> <razon>");
	if(days <= 0 || days > 9999) return SendClientMessage(playerid, -1, "Syntax: /dtban <DB-ID> <dias> <razon>");
	
	new DBResult:Result, DB_Query[160];
	format(DB_Query, sizeof DB_Query, "SELECT `ID`, `IP`, `NAME`, `CONNECTED`, `PLAYERID`, `ADMIN_LEVEL` FROM `CUENTA` WHERE `ID` = '%d';", to_account);
	Result = db_query(Database, DB_Query);
	
	if(db_num_rows(Result))
	{
		new id, ip[16], get_name[24], connected, player_id, admin_level;
		
		id = db_get_field_assoc_int(Result, "ID");
		db_get_field_assoc(Result, "IP", ip, 16);
		db_get_field_assoc(Result, "NAME", get_name, 24);
		connected = db_get_field_assoc_int(Result, "CONNECTED");
		player_id = db_get_field_assoc_int(Result, "PLAYERID");
		admin_level = db_get_field_assoc_int(Result, "ADMIN_LEVEL");
		
		if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] >= admin_level)
		{
			if(connected) SendClientMessageEx(playerid, -1, "JUGADOR '%s' DB-ID '%d' conectado utilice /ban, su player_id: %d.", get_name, id, player_id);
			else
			{
				new DBResult:is_banned;
				format(DB_Query, sizeof DB_Query, "SELECT * FROM `BANS` WHERE `NAME` = '%q' OR `IP` = '%q';", get_name, ip);
				is_banned = db_query(Database, DB_Query);
				
				if(db_num_rows(is_banned))
				{
					new expire_date[24];
					db_get_field_assoc(is_banned, "EXPIRE_DATE", expire_date, 24);
					
					if(!strcmp(expire_date, "0", false)) SendClientMessageEx(playerid, -1, "JUGADOR (Nombre: '%s' DB-ID: '%d') ya está baneado (permanentemente).", get_name, id);
					else SendClientMessageEx(playerid, -1, "JUGADOR (Nombre: '%s' DB-ID: '%d') ya está baneado (temporalmente, fecha de readmisión: %s).", get_name, id, expire_date);
				}
				else
				{
					AddPlayerBan(id, get_name, ip, ACCOUNT_INFO[playerid][ac_ID], TYPE_TEMP_BAN, razon, days);
					SendClientMessageEx(playerid, -1, "Jugador (nick: '%s' dbid: '%d') baneado por %d días.", get_name, id, days);
					
					new str[145]; format(str, 145, "{ff782b}[ADMIN] {FFFFFF}%s (%d) baneó %d días a %s (offline, db_id: %d): %s", ACCOUNT_INFO[playerid][ac_NAME], playerid, days, get_name, id, razon);
					SendMessageToAdmins(-1, str);
				}
				
				db_free_result(is_banned);
			}
		}
		else SendClientMessage(playerid, -1, "El rango administrativo de este jugador es superior al tuyo.");
	}
	else SendClientMessage(playerid, -1, "No se encontro la DB-ID.");
	db_free_result(Result);
	return 1;
}

CMD:rac(playerid, params[])
{
	RespawnGlobalUnoccupiedVehicles();
	SendClientMessage(playerid, -1, "Todos los vehículos no personales y sin ocupar han sido re-spawneados.");
	
	SendCmdLogToAdmins(playerid, "rac", params);
	return 1;
}

CMD:rac2(playerid, params[])
{
	RespawnAllUnoccupiedVehicles();
	SendClientMessage(playerid, -1, "Todos los vehículos sin ocupar han sido re-spawneados.");
	
	SendCmdLogToAdmins(playerid, "rac2", params);
	return 1;
}

CMD:rv(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);
	if(!vehicleid) return SendClientMessage(playerid, -1, "No estás en un vehículo.");
	
	SetVehicleToRespawnEx(vehicleid);
	SendClientMessageEx(playerid, -1, "Vehículo (%d) re-spawneado.", vehicleid);
	return 1;
}

CMD:pm(playerid, params[])
{
	new to_player, message[128];
	if(sscanf(params, "us[128]", to_player, message)) return SendClientMessage(playerid, -1, "Syntax: /pm <player_id> <mensaje>");
	if(!IsPlayerConnected(to_player)) return SendClientMessageEx(playerid, -1, "Jugador (%d) desconectado", to_player);
	
	SendClientMessageEx(playerid, -1, "Mensaje enviado a %s (%d): %s", ACCOUNT_INFO[to_player][ac_NAME], to_player, message);
	
	PLAYER_TEMP[to_player][pt_ADMIN_PM_PID] = playerid;
	PLAYER_TEMP[to_player][pt_ADMIN_PM_AID] = ACCOUNT_INFO[playerid][ac_ID];
	PLAYER_TEMP[to_player][pt_ADMIN_PM_TIME] = gettime();
	SendClientMessageEx(to_player, -1, "{E6F8E0}Mensaje de un administrador (/r para responder): {FFFFFF}%s", message);
	
	SendCmdLogToAdmins(playerid, "pm", params);
	return 1;
}

CMD:deletead(playerid, params[])
{
	new ad_id;
	if(sscanf(params, "d", ad_id)) return SendClientMessage(playerid, -1, "Syntax: /deletead <ID>");
	
	new DBResult:Result, DB_Query[160];
	format(DB_Query, sizeof DB_Query, "SELECT `ID` FROM `SHOP` WHERE `ID` = '%d';", ad_id);
	Result = db_query(Database, DB_Query);
	
	if(db_num_rows(Result))
	{
		format(DB_Query, sizeof DB_Query, "DELETE FROM `SHOP` WHERE `ID` = '%d';", ad_id);
		db_query(Database, DB_Query);
		
		SendClientMessageEx(playerid, -1, "Anuncio '%d' eliminado.", ad_id);
		SendCmdLogToAdmins(playerid, "deletead", params);
	}
	else SendClientMessage(playerid, -1, "No se encontro la ID de ese anuncio.");
	db_free_result(Result);
	
	return 1;
}
alias:deletead("borrarad");

CMD:settime(playerid, params[])
{
	new hour, minute;
	if(sscanf(params, "dd", hour, minute)) return SendClientMessage(playerid, -1, "Syntax: /settime <hora> <minuto>");
	SERVER_TIME[0] = hour;
	SERVER_TIME[1] = minute;
	
	SendClientMessage(playerid, -1, "El tiempo se ajustará cuando el reloj avance.");
	
	SendCmdLogToAdmins(playerid, "settime", params);
	return 1;
}

CMD:dameadmin(playerid, params[])
{
	new DB_Query[70];
	format(DB_Query, sizeof DB_Query, "UPDATE `CUENTA` SET `ADMIN_LEVEL` = '6' WHERE `ID` = '%d';", ACCOUNT_INFO[playerid][ac_ID]);
	db_query(Database, DB_Query);
	
	ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] = CMD_OWNER;
	SendClientMessage(playerid, -1, "Ahora sos el FUNDADOR.");
	return 1;
}

CMD:givemod(playerid, params[])
{
	new to_player, level;
	if(sscanf(params, "ud", to_player, level)) return SendClientMessage(playerid, -1, "Syntax: /givemod <player_id> <rango>");
	if(!IsPlayerConnected(to_player)) return SendClientMessageEx(playerid, -1, "Jugador (%d) desconectado", to_player);
	if(ACCOUNT_INFO[to_player][ac_ADMIN_LEVEL] > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]) return SendClientMessage(playerid, -1, "El rango administrativo de este jugador es superior al tuyo.");
	if(level < 0 || level >= sizeof ADMIN_LEVELS) return SendClientMessage(playerid, -1, "El rango no es válido.");
	if(level > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]) return SendClientMessage(playerid, -1, "No puedes dar este rango por ser un rango superior al tuyo.");
	
	new DB_Query[70];
	format(DB_Query, sizeof DB_Query, "UPDATE `CUENTA` SET `ADMIN_LEVEL` = '%d' WHERE `ID` = '%d';", level, ACCOUNT_INFO[to_player][ac_ID]);
	db_query(Database, DB_Query);
	
	ACCOUNT_INFO[to_player][ac_ADMIN_LEVEL] = level;
	SendClientMessageEx(to_player, -1, "%s cambió tu rango administrativo a: %s.", ACCOUNT_INFO[playerid][ac_NAME], ADMIN_LEVELS[level]);
	SendClientMessageEx(playerid, -1, "El rango administrativo de %s (%d) ahora es %s.", ACCOUNT_INFO[to_player][ac_NAME], to_player, ADMIN_LEVELS[level]);
	
	SendCmdLogToAdmins(playerid, "givemod", params);
	return 1;
}
alias:givemod("staff");

CMD:ac(playerid, params[])
{
	LevelAdmin(playerid,6);
	ShowDialog(playerid, DIALOG_ANTI_CHEAT);
	return 1;
}

CMD:setcansancio(playerid, params[])
{
	new to_player, Float:ammount;
	if(sscanf(params, "uf", to_player, ammount)) return SendClientMessage(playerid, -1, "Syntax: /setcansancio <player_id> <valor>");
	if(!IsPlayerConnected(to_player)) return SendClientMessageEx(playerid, -1, "Jugador (%d) desconectado", to_player);
	if(ammount < 0.0 || ammount > 100.0) return SendClientMessage(playerid, -1, "Cantidad no válida.");
	if(ACCOUNT_INFO[to_player][ac_ADMIN_LEVEL] > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]) return SendClientMessage(playerid, -1, "El rango administrativo de este jugador es superior al tuyo.");
	
	CHARACTER_INFO[to_player][CANSANCIO] = ammount;
	SendClientMessageEx(playerid, -1, "El cansancio de %s (%d) ahora es %.1f.", ACCOUNT_INFO[to_player][ac_NAME], to_player, ammount);
	
	SendCmdLogToAdmins(playerid, "setcansancio", params);
	return 1;
}

CMD:setthirst(playerid, params[])
{
	new to_player, Float:ammount;
	if(sscanf(params, "uf", to_player, ammount)) return SendClientMessage(playerid, -1, "Syntax: /setthirst <player_id> <valor>");
	if(!IsPlayerConnected(to_player)) return SendClientMessageEx(playerid, -1, "Jugador (%d) desconectado", to_player);
	if(ammount < 0.0 || ammount > 100.0) return SendClientMessage(playerid, -1, "Cantidad no válida.");
	if(ACCOUNT_INFO[to_player][ac_ADMIN_LEVEL] > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]) return SendClientMessage(playerid, -1, "El rango administrativo de este jugador es superior al tuyo.");
	
	CHARACTER_INFO[to_player][ch_THIRST] = ammount;
	SendClientMessageEx(playerid, -1, "La hidratación de %s (%d) ahora es %.1f.", ACCOUNT_INFO[to_player][ac_NAME], to_player, ammount);
	
	SendCmdLogToAdmins(playerid, "setthirst", params);
	return 1;
}
alias:setthirst("setsed");

CMD:setasesinatos(playerid, params[])
{
	LevelAdmin(playerid,6);
	new to_player, ammount;
	if(sscanf(params, "ud", to_player, ammount)) return SendClientMessage(playerid, -1, "Syntax: /setasesinatos <player_id> <valor>");
	if(!IsPlayerConnected(to_player)) return SendClientMessageEx(playerid, -1, "Jugador (%d) desconectado", to_player);
	if(ACCOUNT_INFO[to_player][ac_ADMIN_LEVEL] > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]) return SendClientMessage(playerid, -1, "El rango administrativo de este jugador es superior al tuyo.");
	
	ACCOUNT_INFO[to_player][ac_ASESINATOS] = ammount;
	SendClientMessageEx(playerid, -1, "Los asesinatos de %s (%d) ahora son %d.", ACCOUNT_INFO[to_player][ac_NAME], to_player, ammount);
	
	return 1;
}


CMD:sethungry(playerid, params[])
{
	new to_player, Float:ammount;
	if(sscanf(params, "uf", to_player, ammount)) return SendClientMessage(playerid, -1, "Syntax: /sethungry <player_id> <valor>");
	if(!IsPlayerConnected(to_player)) return SendClientMessageEx(playerid, -1, "Jugador (%d) desconectado", to_player);
	if(ammount < 0.0 || ammount > 100.0) return SendClientMessage(playerid, -1, "Cantidad no válida.");
	if(ACCOUNT_INFO[to_player][ac_ADMIN_LEVEL] > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]) return SendClientMessage(playerid, -1, "El rango administrativo de este jugador es superior al tuyo.");
	
	CHARACTER_INFO[to_player][ch_HUNGRY] = ammount;
	SendClientMessageEx(playerid, -1, "La alimentación de %s (%d) ahora es %.1f.", ACCOUNT_INFO[to_player][ac_NAME], to_player, ammount);
	
	SendCmdLogToAdmins(playerid, "sethungry", params);
	return 1;
}
alias:sethungry("sethambre");

CMD:setgas(playerid, params[])
{
	new Float:val;
	if(sscanf(params, "f", val)) return SendClientMessage(playerid, -1, "Syntax: /setgas <valor>");
	if(val < 0.0) return SendClientMessage(playerid, -1, "Valor no válido.");
	
	new vehicleid = GetPlayerVehicleID(playerid);
	if(!vehicleid) return SendClientMessage(playerid, -1, "No estás en un vehículo.");
	
	if(val + GLOBAL_VEHICLES[vehicleid][gb_vehicle_GAS] > GLOBAL_VEHICLES[vehicleid][gb_vehicle_MAX_GAS]) val = GLOBAL_VEHICLES[vehicleid][gb_vehicle_MAX_GAS];
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_GAS] = val;
	
	SendClientMessageEx(playerid, -1, "La gasolina del vehículo (%d) ahora es %.1f.", vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_GAS]);
	
	SendCmdLogToAdmins(playerid, "setgas", params);
	return 1;
}

CMD:setaceite(playerid, params[])
{
	new Float:val;
	if(sscanf(params, "f", val)) return SendClientMessage(playerid, -1, "Syntax: /setaceite <valor>");
	if(val < 0.0) return SendClientMessage(playerid, -1, "Valor no válido.");
	
	new vehicleid = GetPlayerVehicleID(playerid);
	if(!vehicleid) return SendClientMessage(playerid, -1, "No estás en un vehículo.");
	
	if(val > GLOBAL_VEHICLES[vehicleid][gb_vehicle_MAX_ACEITE]) 
	{
		val = GLOBAL_VEHICLES[vehicleid][gb_vehicle_MAX_ACEITE];
	}
	else
	{
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_ACEITE] = val;
	}
	SendClientMessageEx(playerid, -1, "El aceite del vehículo (%d) ahora es %.1f.", vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_ACEITE]);
	
	SendCmdLogToAdmins(playerid, "setaceite", params);
	return 1;
}
CMD:comprarkitreparacion(playerid)
{
	if(!IsPlayerInRangeOfPoint(playerid,2,-85.1399,-1206.0212,2.9406)) return SendClientMessage(playerid, -1,"No estas en el lugar adecuado");
	ShowPlayerDialog(playerid,DIALOG_BUYKITTOOL,DIALOG_STYLE_MSGBOX," Kit de herramientas ","Comprar un kit de herramientas para reparar el vehiculo por: 500","Comprar","Cancelar");
	return 1;
}
CMD:repairveh(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);
	if(!vehicleid) return SendClientMessage(playerid, -1, "No estás en un vehículo.");
	
	RepairVehicleEx(vehicleid, playerid);
	SendClientMessageEx(playerid, -1, "Vehículo (%d) reparado.", vehicleid);
	
	SendCmdLogToAdmins(playerid, "repairveh", params);
	return 1;
}

CMD:setvehiclehealth(playerid, params[])
{
	new val;
	if(sscanf(params, "d", val)) return SendClientMessage(playerid, -1, "Syntax: /setvehiclehealth <valor>");

	new vehicleid = GetPlayerVehicleID(playerid);
	if(!vehicleid) return SendClientMessage(playerid, -1, "No estás en un vehículo.");
	
	SetVehicleHealthEx(vehicleid, val);
	SendClientMessageEx(playerid, -1, "Vehículo (%d), vida: %d", vehicleid,val);
	
	return 1;
}

alias:repairveh("repararveh");

CMD:sethealth(playerid, params[])
{
	new to_player, Float:ammount;
	if(sscanf(params, "uf", to_player, ammount)) return SendClientMessage(playerid, -1, "Syntax: /sethealth <player_id> <valor>");
	if(!IsPlayerConnected(to_player)) return SendClientMessageEx(playerid, -1, "Jugador (%d) desconectado", to_player);
	if(ammount < 0.0 || ammount > 100.0) return SendClientMessage(playerid, -1, "Valor no válido.");
	if(ACCOUNT_INFO[to_player][ac_ADMIN_LEVEL] > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]) return SendClientMessage(playerid, -1, "El rango administrativo de este jugador es superior al tuyo.");
	
	SetPlayerHealthEx(to_player, ammount);
	SendClientMessageEx(playerid, -1, "La vida de %s (%d) ahora es %.1f.", ACCOUNT_INFO[to_player][ac_NAME], to_player, ammount);
	
	SendCmdLogToAdmins(playerid, "sethealth", params);
	return 1;
}
alias:sethealth("setvida");

CMD:setarmour(playerid, params[])
{
	new to_player, Float:ammount;
	if(sscanf(params, "uf", to_player, ammount)) return SendClientMessage(playerid, -1, "Syntax: /setarmour <player_id> <valor>");
	if(!IsPlayerConnected(to_player)) return SendClientMessageEx(playerid, -1, "Jugador (%d) desconectado", to_player);
	if(ammount < 0.0 || ammount > 100.0) return SendClientMessage(playerid, -1, "Valor no válido.");
	if(ACCOUNT_INFO[to_player][ac_ADMIN_LEVEL] > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]) return SendClientMessage(playerid, -1, "El rango administrativo de este jugador es superior al tuyo.");
	
	SetPlayerArmourEx(to_player, ammount);
	SendClientMessageEx(playerid, -1, "El chaleco de %s (%d) ahora es %.1f.", ACCOUNT_INFO[to_player][ac_NAME], to_player, ammount);
	
	SendCmdLogToAdmins(playerid, "setarmour", params);
	return 1;
}
alias:setarmour("setchaleco");

CMD:setlevel(playerid, params[])
{
	new to_player, level;
	if(sscanf(params, "ud", to_player, level)) return SendClientMessage(playerid, -1, "Syntax: /level <player_id> <nivel>");
	if(!IsPlayerConnected(to_player)) return SendClientMessageEx(playerid, -1, "Jugador (%d) desconectado", to_player);
	if(ACCOUNT_INFO[to_player][ac_ADMIN_LEVEL] > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]) return SendClientMessage(playerid, -1, "El rango administrativo de este jugador es superior al tuyo.");
	
	KillTimer(PLAYER_TEMP[to_player][pt_TIMERS][2]);
	
	ACCOUNT_INFO[to_player][ac_REP] = 1;
	ACCOUNT_INFO[to_player][ac_LEVEL] = level;
	UpdateReputationTextDraws(to_player);
	SetPlayerSkillLevels(to_player);
	
	SendClientMessageEx(to_player, -1, "{58ACFA}¡Felicidades! {FFFFFF}Has subido al nivel %d.", ACCOUNT_INFO[to_player][ac_LEVEL]);
	SetPlayerScore(to_player, ACCOUNT_INFO[to_player][ac_LEVEL]);
	PlayerPlaySoundEx(to_player, 1058, 0.0, 0.0, 0.0);
	
	ACCOUNT_INFO[to_player][ac_TIME_FOR_REP] = TIME_FOR_REP;
	PLAYER_TEMP[to_player][pt_TIME_PASSED_LAST_REP] = gettime() * 1000;
	
	ACCOUNT_INFO[to_player][ac_TIME_PLAYING] += gettime() - PLAYER_TEMP[to_player][pt_TIME_PLAYING];
	PLAYER_TEMP[to_player][pt_TIME_PLAYING] = gettime();
	new DB_Query[256];
	format(DB_Query, sizeof DB_Query, 
	
		"\
			UPDATE `CUENTA` SET `TIME-PLAYING` = '%d', `LEVEL` = '%d', `REP` = '%d', `TIME_FOR_REP` = '%d', `PAYDAY_REP` = '%d' WHERE `ID` = '%d';\
		",
			ACCOUNT_INFO[to_player][ac_TIME_PLAYING], ACCOUNT_INFO[to_player][ac_LEVEL], ACCOUNT_INFO[to_player][ac_REP], TIME_FOR_REP, ACCOUNT_INFO[to_player][ac_PAYDAY_REP], ACCOUNT_INFO[to_player][ac_ID]
	);
	db_query(Database, DB_Query);
	
	KillTimer(PLAYER_TEMP[to_player][pt_TIMERS][2]);
	PLAYER_TEMP[to_player][pt_TIMERS][2] = SetTimerEx("AddPlayerReputation", ACCOUNT_INFO[to_player][ac_TIME_FOR_REP], false, "i", to_player);
	
	SendClientMessageEx(playerid, -1, "El nivel de %s (%d) ahora es %d.", ACCOUNT_INFO[to_player][ac_NAME], to_player, ACCOUNT_INFO[to_player][ac_LEVEL]);
	
	SendCmdLogToAdmins(playerid, "setlevel", params);
	return 1;
}

CMD:setwork(playerid, params[])
{
	new to_player, work, set;
	if(sscanf(params, "udd", to_player, work, set)) return SendClientMessage(playerid, -1, "Syntax: /setwork <player_id> <work> <set>");
	if(!IsPlayerConnected(to_player)) return SendClientMessageEx(playerid, -1, "Jugador (%d) desconectado", to_player);
	if(ACCOUNT_INFO[to_player][ac_ADMIN_LEVEL] > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]) return SendClientMessage(playerid, -1, "El rango administrativo de este jugador es superior al tuyo.");
	
	if(work < 0 || work >= sizeof work_info) return SendClientMessage(playerid, -1, "El trabajo no es válido, para verlos usa /works.");
	
	if(PLAYER_TEMP[to_player][pt_WORKING_IN]) return SendClientMessage(playerid, -1, "No se puede cambiar el trabajo del jugador porque está de servicio en su trabajo.");
	
	
	new player_jobs = CountPlayerJobs(to_player);
	if(ACCOUNT_INFO[to_player][ac_SU])
	{
		if(player_jobs >= MAX_SU_WORKS)
		{
			SendClientMessageEx(playerid, -1, "El limite de trabajos para este jugador es %d.", player_jobs);
			return 1;
		}
	}
	else
	{
		if(player_jobs >= MAX_NU_WORKS)
		{
			SendClientMessageEx(playerid, -1, "El limite de trabajos para este jugador es %d.", player_jobs);
			return 1;
		}
	}
	
	new DB_Query[256];
	format(DB_Query, sizeof DB_Query, "UPDATE `PLAYER_WORKS` SET `SET` = '%d' WHERE `ID_USER` = '%d' AND `ID_WORK` = '%d';", set, ACCOUNT_INFO[to_player][ac_ID], work);
	db_query(Database, DB_Query);
		
	PLAYER_WORKS[to_player][work] = set;
	if(!set) SendClientMessageEx(to_player, -1, "{E6F8E0}Has abandonado tu trabajo de %s.", work_info[work][work_info_NAME]);
	else
	{
		SendClientMessageEx(to_player, -1, "{b6f442}¡Felicidades! {FFFFFF}Has conseguido tu trabajo de %s.", work_info[work][work_info_NAME]);
		SendClientMessage(to_player, -1, "Puedes utilizar {eaf259}/ayuda trabajos {FFFFFF}para ver como trabajar aquí.");
		
		if(work == WORK_POLICE)
		{
			new DBResult:Result_pnumber, phone_number;
			Result_pnumber = db_query(Database, "SELECT ABS(RANDOM() % 10000000) AS `NUM` WHERE `NUM` NOT IN (SELECT `EXTRA` FROM `PLAYER_MISC` WHERE `ID` = '14') LIMIT 1;");
			if(db_num_rows(Result_pnumber)) phone_number = db_get_field_int(Result_pnumber, 0);
			db_free_result(Result_pnumber);
			PLAYER_MISC[to_player][MISC_PLACA_PD] = phone_number;
			SavePlayerMisc(to_player);
			
			PLAYER_SKILLS[to_player][WORK_POLICE] = 1;
			SavePlayerSkills(to_player);
		}
	}
	SendClientMessageEx(playerid, -1, "El trabajo %s de %s (%d) es: '%d'.", work_info[ work ][work_info_NAME], ACCOUNT_INFO[to_player][ac_NAME], to_player, set);
	
	SavePlayerWorks(to_player);
	SendCmdLogToAdmins(playerid, "setwork", params);
	return 1;
}

CMD:setworkexp(playerid, params[])
{
	new to_player, work, exp;
	if(sscanf(params, "udd", to_player, work, exp)) return SendClientMessage(playerid, -1, "Syntax: /setworkexp <player_id> <work, para verlos /works> <exp>");
	if(!IsPlayerConnected(to_player)) return SendClientMessageEx(playerid, -1, "Jugador (%d) desconectado", to_player);
	if(ACCOUNT_INFO[to_player][ac_ADMIN_LEVEL] > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]) return SendClientMessage(playerid, -1, "El rango administrativo de este jugador es superior al tuyo.");
	
	if(work < 0 || work >= sizeof work_info) return SendClientMessage(playerid, -1, "El trabajo no es válido, para verlos usa /works.");
	
	new DB_Query[256];
	format(DB_Query, sizeof DB_Query, "UPDATE `PLAYER_SKILLS` SET `TOTAL` = '%d' WHERE `ID_USER` = '%d' AND `ID_WORK` = '%d';", exp, ACCOUNT_INFO[to_player][ac_ID], work);
	db_query(Database, DB_Query);
	
	PLAYER_SKILLS[to_player][ work ] = exp;
	SavePlayerSkills(to_player);
	
	SendClientMessageEx(playerid, -1, "La experiencia de %s (%d) en el trabajo '%s' ahora es %d.", ACCOUNT_INFO[to_player][ac_NAME], to_player, work_info[ work ][work_info_NAME], exp);
	
	SendCmdLogToAdmins(playerid, "setworkexp", params);
	return 1;
}

CMD:setcash(playerid, params[])
{
	new to_player, value;
	if(sscanf(params, "ud", to_player, value)) return SendClientMessage(playerid, -1, "Syntax: /setcash <player_id> <ammount>");
	if(!IsPlayerConnected(to_player)) return SendClientMessageEx(playerid, -1, "Jugador (%d) desconectado", to_player);
	if(ACCOUNT_INFO[to_player][ac_ADMIN_LEVEL] > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]) return SendClientMessage(playerid, -1, "El rango administrativo de este jugador es superior al tuyo.");
	
	SetPlayerCash(to_player, value);
	SendClientMessageEx(playerid, -1, "El dinero de %s (%d) ahora es %d.", ACCOUNT_INFO[to_player][ac_NAME], to_player, value);
	
	SendCmdLogToAdmins(playerid, "setcash", params);
	return 1;
}

CMD:givecash(playerid, params[])
{
	new to_player, value;
	if(sscanf(params, "ud", to_player, value)) return SendClientMessage(playerid, -1, "Syntax: /givecash <player_id> <ammount>");
	if(!IsPlayerConnected(to_player)) return SendClientMessageEx(playerid, -1, "Jugador (%d) desconectado", to_player);
	if(ACCOUNT_INFO[to_player][ac_ADMIN_LEVEL] > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]) return SendClientMessage(playerid, -1, "El rango administrativo de este jugador es superior al tuyo.");
	
	GivePlayerCash(to_player, value);
	SendClientMessageEx(playerid, -1, "El jugador %s (%d) ha recibido %d.", ACCOUNT_INFO[to_player][ac_NAME], to_player, value);
	
	SendCmdLogToAdmins(playerid, "givecash", params);
	return 1;
}

CMD:setbmlevel(playerid, params[])
{
	new to_player, value;
	if(sscanf(params, "ud", to_player, value)) return SendClientMessage(playerid, -1, "Syntax: /setbmlevel <player_id> <level>");
	if(!IsPlayerConnected(to_player)) return SendClientMessageEx(playerid, -1, "Jugador (%d) desconectado", to_player);
	if(ACCOUNT_INFO[to_player][ac_ADMIN_LEVEL] > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]) return SendClientMessage(playerid, -1, "El rango administrativo de este jugador es superior al tuyo.");
	
	CHARACTER_INFO[to_player][ch_BLACK_MARKET_LEVEL] = value;
	SendClientMessageEx(playerid, -1, "El nivel 'black_market' de %s (%d) ahora es %d.", ACCOUNT_INFO[to_player][ac_NAME], to_player, value);
	
	SendCmdLogToAdmins(playerid, "setbmlevel", params);
	return 1;
}

CMD:asay(playerid, params[])
{
	if(isnull(params)) return SendClientMessage(playerid, -1, "Syntax: /asay <message>");
	new str[145]; format(str, 145, "{2587ce}* Admin: %s", params);
	SendClientMessageToAll(-1, str);
	
	SendCmdLogToAdmins(playerid, "asay", params);
	return 1;
}
alias:asay("global");

CMD:spos(playerid, params[])
{
	new Float:p[4], interior, vw;
	if(sscanf(params, "p<,>ffffdd", p[0], p[1], p[2], p[3], interior, vw)) return SendClientMessage(playerid, -1, "Syntax: /spos [X], [Y], [Z], [ANGLE], [INTERIOR], [VIRTUAL WORLD]");

	SetPlayerPosEx(playerid, p[0], p[1], p[2], p[3], interior, vw);
	return 1;
}

CMD:v(playerid, params[])
{
	new modelid, color1, color2;
	if(sscanf(params, "ddd", modelid, color1, color2)) return SendClientMessage(playerid, -1, "Syntax: /v <modelid> <color 1> <color 2>");
	if(modelid < 400 || modelid > 611) return SendClientMessage(playerid, -1, "Modelo de vehículo no válido.");
	
	if(color1 > 255 || color2 > 255)  return SendClientMessage(playerid, -1, "El color no debe ser mayor a 255.");
	new Float:p[4];
	GetPlayerPos(playerid, p[0], p[1], p[2]);
	GetPlayerFacingAngle(playerid, p[3]);
	
	new vid = AddTestVehicle(false, modelid, p[0], p[1], p[2], p[3], color1, color2);
	PutPlayerInVehicleEx(playerid, vid, 0);
	
	SendCmdLogToAdmins(playerid, "v", params);
	return 1;
}

CMD:dv(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);
	if(!vehicleid) return SendClientMessage(playerid, -1, "Error: no estás en ningún vehículo de prueba.");
	if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_TYPE] != VEHICLE_TYPE_TEST) return SendClientMessage(playerid, -1, "Error: no estás en ningún vehículo de prueba.");
	
	DestroyVehicleEx(vehicleid);
	SendClientMessage(playerid, -1, "Vehículo de prueba destruido.");
	return 1;
}

CMD:restart(playerid, params[])
{
	db_query(Database, "UPDATE `CUENTA` SET `CONNECTED` = '0', PLAYERID = '-1';");
	
	SendRconCommand("gmx");
	return 1;
}

CMD:setname(playerid, params[])
{
	new to_player, new_name[24];
	if(sscanf(params, "us[24]", to_player, new_name)) return SendClientMessage(playerid, -1, "Syntax: /setname <player_id> <nuevo nombre>");
	if(!IsPlayerConnected(to_player)) return SendClientMessageEx(playerid, -1, "Jugador (%d) desconectado", to_player);
	if(!IsValidRPName(new_name)) return SendClientMessageEx(playerid, -1, "El nombre '%s' no cumple con el formato Nombre_Apellido.", new_name);
	
	new DBResult:Result, DB_Query[256], bool:used;
	format(DB_Query, sizeof DB_Query, "SELECT `ID` FROM `CUENTA` WHERE `NAME` = '%q';", new_name);
	Result = db_query(Database, DB_Query);
	if(db_num_rows(Result)) used = true;
	db_free_result(Result);
	if(used) return SendClientMessageEx(playerid, -1, "El nombre '%s' está en uso.", new_name);

	format(PLAYER_TEMP[to_player][pt_NAME], 24, "%s", new_name);
	format(ACCOUNT_INFO[to_player][ac_NAME], 24, "%s", new_name);
	SetRolePlayNames(to_player);
	SetPlayerName(to_player, new_name);
	
	format(DB_Query, sizeof DB_Query, "UPDATE `CUENTA` SET `NAME` = '%q' WHERE `ID` = '%d';", new_name, ACCOUNT_INFO[to_player][ac_ID]);
	db_query(Database, DB_Query);
	
	/*for(new i = 0; i != MAX_PROPERTIES; i ++)
	{
		if(!PROPERTY_INFO[i][property_VALID]) continue;
		if(PROPERTY_INFO[i][property_OWNER_ID] != ACCOUNT_INFO[to_player][ac_ID]) continue;
		
		new label_str[256];
		format
		(
			label_str, 
			sizeof label_str, 
			"\
				Propiedad {58ACFA}#%d\n\n\
				{FFFFFF}Propietario: {58ACFA}%s\n\
				{FFFFFF}Presiona la tecla{58ACFA}'Y' {FFFFFF}para entrar.\
			", PROPERTY_INFO[i][property_ID], ACCOUNT_INFO[to_player][ac_NAME]
		);
		UpdateDynamic3DTextLabelText(PROPERTY_INFO[i][property_EXT_LABEL_ID], 0xFFFFFFFF, label_str);
	}*/
	
	SendClientMessageEx(to_player, -1, "{E6F8E0}Tu nombre ha sido cambiado a '%s'", new_name);
	SendClientMessageEx(playerid, -1, "El nombre del jugador ha sido cambiado a '%s'", new_name);
	
	SendCmdLogToAdmins(playerid, "setname", params);
	return 1;
}

CMD:exproperty(playerid, params[])
{
	new id_property;
	if(sscanf(params, "d", id_property)) return SendClientMessage(playerid, -1, "Syntax: /exproperty <id>");
	if(id_property <= 0) return SendClientMessage(playerid, -1, "Syntax: /exproperty < id > 0 >");
	
	new index = GetPropertyIndexByID(id_property);
	if(index == -1) return SendClientMessage(playerid, -1, "PROPIEDAD ID no encontrada.");
	
	if(!PROPERTY_INFO[index][property_SOLD]) return SendClientMessage(playerid, -1, "Esta propiedad ya está en venta.");
	
	
	PROPERTY_INFO[ index ][property_SOLD] = false;
	PROPERTY_INFO[ index ][property_CREW] = false;
	PROPERTY_INFO[ index ][property_OWNER_ID] = 0;
	PROPERTY_INFO[ index ][property_CREW_ID] = 0;
	format(PROPERTY_INFO[ index ][property_NAME], 24, "PROPIEDAD %d", PROPERTY_INFO[ index ][property_ID]);
	
	new info[3];
	UpdateUnnocupiedPropertyLabel(index);
	
	DestroyDynamicPickup(PROPERTY_INFO[ index ][property_EXT_PICKUP_ID]);
	PROPERTY_INFO[ index ][property_EXT_PICKUP_ID] = INVALID_STREAMER_ID;
	
	PROPERTY_INFO[ index ][property_EXT_PICKUP_ID] = CreateDynamicPickup(1273, 1, PROPERTY_INFO[ index ][property_EXT_X], PROPERTY_INFO[ index ][property_EXT_Y], PROPERTY_INFO[ index ][property_EXT_Z], 0, PROPERTY_INFO[ index ][property_EXT_INTERIOR]);
	info[0] = PICKUP_TYPE_PROPERTY;
	info[1] = index; // Index
	info[2] = 2; // Pickup Exterior
	Streamer_SetArrayData(STREAMER_TYPE_PICKUP, PROPERTY_INFO[ index ][property_EXT_PICKUP_ID], E_STREAMER_EXTRA_ID, info);
				

	new DB_Query[350];
	format(DB_Query, sizeof(DB_Query), "DELETE FROM `PROPERTY_OWNER` WHERE `ID_PROPERTY` = '%d';", PROPERTY_INFO[ index ][property_ID]);
	db_query(Database, DB_Query);
	
	format(DB_Query, sizeof(DB_Query), "DELETE FROM `PROPERTY_TERRITORY` WHERE `ID_PROPERTY` = '%d';", PROPERTY_INFO[ index ][property_ID]);
	db_query(Database, DB_Query);
	
	SendClientMessageEx(playerid, -1, "Propiedad (%d) expropiada.", PROPERTY_INFO[ index ][property_ID]);
	
	SendCmdLogToAdmins(playerid, "exproperty", params);
	return 1;
}

CMD:gotoproperty(playerid, params[])
{
	new int_type;
	if(sscanf(params, "d", int_type)) return SendClientMessage(playerid, -1, "Syntax: /gotoproperty <interior>");
	if(int_type < 0 || int_type >= sizeof PROPERTY_INTERIORS) return SendClientMessageEx(playerid, -1, "Error, rango de interior: 0-%d", sizeof(PROPERTY_INTERIORS) - 1);

	SetPlayerPosEx(playerid, PROPERTY_INTERIORS[int_type][property_INT_X], PROPERTY_INTERIORS[int_type][property_INT_Y], PROPERTY_INTERIORS[int_type][property_INT_Z], PROPERTY_INTERIORS[int_type][property_INT_ANGLE], PROPERTY_INTERIORS[int_type][property_INT_INTERIOR], 0, false, true);
	return 1;
}
alias:gotoproperty("ircasa");

CMD:setpass(playerid, params[])
{
	new to_account, new_pass[MAX_PASS_LENGTH + 1];
	if(sscanf(params, "ds[19]", to_account, new_pass)) return SendClientMessage(playerid, -1, "Syntax: /setpass <DB-ID> <pass>");
	
	new DBResult:Result, DB_Query[160];
	format(DB_Query, sizeof DB_Query, "SELECT `ID`, `NAME`, `CONNECTED`, `PLAYERID`, `ADMIN_LEVEL` FROM `CUENTA` WHERE `ID` = '%d';", to_account);
	Result = db_query(Database, DB_Query);
	
	if(db_num_rows(Result))
	{
		new id, get_name[24], connected, player_id, admin_level;
		
		id = db_get_field_assoc_int(Result, "ID");
		db_get_field_assoc(Result, "NAME", get_name, 24);
		connected = db_get_field_assoc_int(Result, "CONNECTED");
		player_id = db_get_field_assoc_int(Result, "PLAYERID");
		admin_level = db_get_field_assoc_int(Result, "ADMIN_LEVEL");
		
		if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] >= admin_level)
		{
			if(connected) SendClientMessageEx(playerid, -1, "JUGADOR '%s' DB-ID '%d' conectado, player_id: %d, no es necario cambiar la contraseña.", get_name, id, player_id);
			else
			{
				new salt[16], salt_ex[16], pass_ex[64 + 1];
				getRandomSalt(salt);
				format(salt_ex, 16, "%s", salt);
				
				SHA256_PassHash(new_pass, salt_ex, pass_ex, 64 + 1);
				
				format(DB_Query, sizeof DB_Query, "UPDATE `CUENTA` SET `SALT` = '%q', `PASS` = '%q' WHERE `ID` = '%d';", salt_ex, pass_ex, id);
				db_query(Database, DB_Query);
				
				SendClientMessageEx(playerid, -1, "La contraseña de '%s' ahora es: %s", get_name, new_pass);
			}
		}
		else SendClientMessage(playerid, -1, "El rango administrativo de este jugador es superior al tuyo.");
	}
	else SendClientMessage(playerid, -1, "No se encontro la DB-ID.");
	db_free_result(Result);
	return 1;
}

CMD:delete(playerid, params[])
{
	LevelAdmin(playerid,6);
	new to_account;
	if(sscanf(params, "d", to_account)) return SendClientMessage(playerid, -1, "Syntax: /delete <DB-ID>");
	
	new DBResult:Result, DB_Query[160];
	format(DB_Query, sizeof DB_Query, "SELECT `ID`, `NAME`, `CONNECTED`, `PLAYERID`, `ADMIN_LEVEL` FROM `CUENTA` WHERE `ID` = '%d';", to_account);
	Result = db_query(Database, DB_Query);
	
	if(db_num_rows(Result))
	{
		new id, get_name[24], connected, player_id, admin_level;
		
		id = db_get_field_assoc_int(Result, "ID");
		db_get_field_assoc(Result, "NAME", get_name, 24);
		connected = db_get_field_assoc_int(Result, "CONNECTED");
		player_id = db_get_field_assoc_int(Result, "PLAYERID");
		admin_level = db_get_field_assoc_int(Result, "ADMIN_LEVEL");
		
		if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] >= admin_level)
		{
			if(connected) SendClientMessageEx(playerid, -1, "JUGADOR '%s' DB-ID '%d' conectado para eliminarlo debe estar desconectado, utilice kick ,su player_id: %d.", get_name, id, player_id);
			else
			{
				format(DB_Query, sizeof DB_Query, "DELETE FROM `CUENTA` WHERE `ID` = '%d';", id);
				db_query(Database, DB_Query);
				
				new ex_properties;
				for(new index = 0; index != MAX_PROPERTIES; index ++)
				{
					if(!PROPERTY_INFO[index][property_VALID]) continue;
					if(!PROPERTY_INFO[index][property_SOLD]) continue;
					if(PROPERTY_INFO[index][property_OWNER_ID] != id) continue;
				
					PROPERTY_INFO[ index ][property_SOLD] = false;
					PROPERTY_INFO[ index ][property_OWNER_ID] = 0;
					format(PROPERTY_INFO[ index ][property_NAME], 24, "PROPIEDAD %d", PROPERTY_INFO[ index ][property_ID]);
					
					new info[3];
					UpdateUnnocupiedPropertyLabel(index);
					
					DestroyDynamicPickup(PROPERTY_INFO[ index ][property_EXT_PICKUP_ID]);
					PROPERTY_INFO[ index ][property_EXT_PICKUP_ID] = INVALID_STREAMER_ID;
					
					PROPERTY_INFO[ index ][property_EXT_PICKUP_ID] = CreateDynamicPickup(1273, 1, PROPERTY_INFO[ index ][property_EXT_X], PROPERTY_INFO[ index ][property_EXT_Y], PROPERTY_INFO[ index ][property_EXT_Z], 0, PROPERTY_INFO[ index ][property_EXT_INTERIOR]);
					info[0] = PICKUP_TYPE_PROPERTY;
					info[1] = index; // Index
					info[2] = 2; // Pickup Exterior
					Streamer_SetArrayData(STREAMER_TYPE_PICKUP, PROPERTY_INFO[ index ][property_EXT_PICKUP_ID], E_STREAMER_EXTRA_ID, info);
					
					ex_properties ++;
				}
				
				
				SendClientMessageEx(playerid, -1, "CUENTA (Nombre '%s' DB-ID: '%d') ha sido eliminada.", get_name, id);
				if(ex_properties > 0) SendClientMessageEx(playerid, -1, "Se han expropiado '%d' propiedades del jugador eliminado.", ex_properties);
				
				new str[145]; format(str, 145, "{ff782b}[ADMIN] {FFFFFF}%s (%d) ha eliminado el usuario '%s'", ACCOUNT_INFO[playerid][ac_NAME], playerid, get_name);
				SendMessageToAdmins(-1, str);
			}
		}
		else SendClientMessage(playerid, -1, "El rango administrativo de este jugador es superior al tuyo.");
	}
	else SendClientMessage(playerid, -1, "No se encontro la DB-ID.");
	db_free_result(Result);
	
	return 1;
}

/* PROPERTY CONSTRUCTOR */

CMD:rproperty(playerid, params[])
{
	new id_property;
	if(sscanf(params, "d", id_property)) return SendClientMessage(playerid, -1, "Syntax: /rproperty <id>");
	if(id_property <= 0) return SendClientMessage(playerid, -1, "Syntax: /rproperty < id > 0 >");
	
	new index = GetPropertyIndexByID(id_property);
	if(index == -1) return SendClientMessage(playerid, -1, "PROPIEDAD ID no encontrada.");
	
	new DB_Query[70];
	format(DB_Query, sizeof DB_Query, "DELETE FROM `PROPERTY` WHERE `ID` = '%d';", PROPERTY_INFO[index][property_ID]);
	db_query(Database, DB_Query);
	
	if(IsValidDynamic3DTextLabel(PROPERTY_INFO[index][property_EXT_LABEL_ID])) DestroyDynamic3DTextLabel(PROPERTY_INFO[index][property_EXT_LABEL_ID]);
	if(IsValidDynamic3DTextLabel(PROPERTY_INFO[index][property_INT_LABEL_ID])) DestroyDynamic3DTextLabel(PROPERTY_INFO[index][property_INT_LABEL_ID]);
	if(IsValidDynamicPickup(PROPERTY_INFO[index][property_EXT_PICKUP_ID])) DestroyDynamicPickup(PROPERTY_INFO[index][property_EXT_PICKUP_ID]);
	if(IsValidDynamicPickup(PROPERTY_INFO[index][property_INT_PICKUP_ID])) DestroyDynamicPickup(PROPERTY_INFO[index][property_INT_PICKUP_ID]);
	new reset[Property_Info_Enum]; PROPERTY_INFO[index] = reset;
	
	TOTAL_PROPERTIES_LOADED --;
	
	SendClientMessageEx(playerid, -1, "PROPIEDAD %d ELIMINADA.", id_property);
	SendClientMessageEx(playerid, -1, "PROPIEDADES: %d/%d", TOTAL_PROPERTIES_LOADED, MAX_PROPERTIES);
	
	SendCmdLogToAdmins(playerid, "rproperty", params);
	return 1;
}

CMD:eproperty(playerid, params[])
{
	new id_property, new_int;
	if(sscanf(params, "dddddd", id_property, new_int, PLAYER_TEMP[playerid][pt_PROPERTY_CINFO][0], PLAYER_TEMP[playerid][pt_PROPERTY_CINFO][1], PLAYER_TEMP[playerid][pt_PROPERTY_CINFO][2], PLAYER_TEMP[playerid][pt_PROPERTY_CINFO][3])) return SendClientMessage(playerid, -1, "Syntax: /eproperty <id> <interior> <nivel> <precio> <vip level> <coins>");
	if(id_property <= 0) return SendClientMessage(playerid, -1, "ID no válida.");
	
	new index = GetPropertyIndexByID(id_property);
	if(index == -1) return SendClientMessage(playerid, -1, "PROPIEDAD ID no encontrada.");
	
	if(PROPERTY_INFO[index][property_SOLD]) return SendClientMessage(playerid, -1, "Solo se pueden modificar propiedades que estén libres.");
	
	if(new_int < 0 || new_int >= sizeof(PROPERTY_INTERIORS)) return SendClientMessage(playerid, -1, "El interior elegido no es válido.");
	
	PROPERTY_INFO[index][property_ID_INTERIOR] = new_int;
	PROPERTY_INFO[index][property_PRICE] = PLAYER_TEMP[playerid][pt_PROPERTY_CINFO][1];
	PROPERTY_INFO[index][property_LEVEL] = PLAYER_TEMP[playerid][pt_PROPERTY_CINFO][0];
	PROPERTY_INFO[index][property_EXTRA] = PLAYER_TEMP[playerid][pt_PROPERTY_CINFO][3];
	PROPERTY_INFO[index][property_VIP_LEVEL] = PLAYER_TEMP[playerid][pt_PROPERTY_CINFO][2];
	PROPERTY_INFO[index][property_PRICE_BASE] = floatround(floatdiv(PROPERTY_INFO[index][property_PRICE], MULTIPLIER_PROPERITES));
	
	if(PROPERTY_INFO[index][property_EXTRA]) PROPERTY_INFO[index][property_PRICE] = 0;
	if(PROPERTY_INFO[index][property_VIP_LEVEL]) PROPERTY_INFO[index][property_LEVEL] = 1;
	
	UpdateUnnocupiedPropertyLabel(index);
	
	new DB_Query[512];
	format(DB_Query, sizeof DB_Query,
		
		"\
		UPDATE `PROPERTY` SET `ID_INTERIOR` = '%d' WHERE `ID` = '%d';\
		UPDATE `PROPERTY_INFO` SET \
			`PRICE` = '%d',\
			`LEVEL` = '%d',\
			`EXTRA` = '%d',\
			`VIP_LEVEL` = '%d' \
		WHERE `ID_PROPERTY` = '%d';",
			PROPERTY_INFO[index][property_ID_INTERIOR],
			PROPERTY_INFO[index][property_ID],
			
			PROPERTY_INFO[index][property_PRICE_BASE],
			PROPERTY_INFO[index][property_LEVEL],
			PROPERTY_INFO[index][property_EXTRA],
			PROPERTY_INFO[index][property_VIP_LEVEL],
			PROPERTY_INFO[index][property_ID]
	);
	db_query(Database, DB_Query);
	
	SendCmdLogToAdmins(playerid, "eproperty", params);
	return 1;
}

CMD:cproperty(playerid, params[])
{
	if(TOTAL_PROPERTIES_LOADED >= MAX_PROPERTIES) return SendClientMessage(playerid, -1, "Límite alcanzado.");
	
	if(sscanf(params, "dddd", PLAYER_TEMP[playerid][pt_PROPERTY_CINFO][0], PLAYER_TEMP[playerid][pt_PROPERTY_CINFO][1], PLAYER_TEMP[playerid][pt_PROPERTY_CINFO][2], PLAYER_TEMP[playerid][pt_PROPERTY_CINFO][3])) return SendClientMessage(playerid, -1, "Syntax: /cproperty <nivel> <precio> <vip level> <coins>");
	
	GetPlayerPos(playerid, PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_EXT_X], PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_EXT_Y], PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_EXT_Z]);
	GetPlayerFacingAngle(playerid, PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_EXT_ANG]);
	PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_EXT_INT] = GetPlayerInterior(playerid);
	
	PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_ENABLED] = true;
	for(new i = 0; i != 6; i ++) PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][i]);
	
	UpdatePlayerPropertyContructor(playerid);
	return 1;
}

SendMessageToAdmins(color, message[], level = 1)
{
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++) 
	{
	    if(IsPlayerConnected(i))
	    {
	    	if(PLAYER_TEMP[i][LOGUEADO])
	    	{
		        if(ACCOUNT_INFO[i][ac_ADMIN_LEVEL] > level)// && PLAYER_TEMP[i][pt_ADMIN_SERVICE])
		        {
		            SendClientMessage(i, color, message);
		        }
	    	}
	    }
	}
	return 1;
}

SendCmdLogToAdmins(playerid, cmdtext[], params[])
{
	new message[145];
	if(isnull(params)) format(message, sizeof message, "El administrador %s (%d) ha utilizado el comando /%s", ACCOUNT_INFO[playerid][ac_NAME], playerid, cmdtext);
	else format(message, sizeof message, "El administrador %s (%d) ha utilizado el comando /%s %s", ACCOUNT_INFO[playerid][ac_NAME], playerid, cmdtext, params);
	
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++) 
	{
	    if(IsPlayerConnected(i))
	    {
	        if(ACCOUNT_INFO[i][ac_ADMIN_LEVEL] >= ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] && PLAYER_TEMP[i][pt_ADMIN_SERVICE])
	        {
	            if(PLAYER_TEMP[i][pt_SEE_ACMD_LOG]) SendClientMessage(i, 0xA9C4E4FF, message);
	        }
	    }
	}
	return 1;
}

SendMessageToAdminsAC(color, message[])
{
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++) 
	{
	    if(IsPlayerConnected(i))
	    {
	    	if(PLAYER_TEMP[i][LOGUEADO])
	    	{
		        if(ACCOUNT_INFO[i][ac_ADMIN_LEVEL] > 1 && PLAYER_TEMP[i][pt_ADMIN_SERVICE])
		        {
		            if(PLAYER_TEMP[i][pt_SEE_AC_LOG]) SendClientMessage(i, color, message);
		        }
	    	}
	    }
	}
	return 1;
}

RespawnAllUnoccupiedVehicles()
{
	for(new i = 0; i != MAX_VEHICLES; i ++)
	{
		if(!GLOBAL_VEHICLES[i][gb_vehicle_VALID]) continue;
		if(GLOBAL_VEHICLES[i][gb_vehicle_OCCUPIED]) continue;
		if(GLOBAL_VEHICLES[i][gb_vehicle_TYPE] == VEHICLE_TYPE_TEST)
		{
			DestroyVehicleEx(i);
			continue;
		}
		
		SetVehicleToRespawnEx(i);
	}
	return 1;
}

RespawnGlobalUnoccupiedVehicles()
{
	for(new i = 0; i != MAX_VEHICLES; i ++)
	{
		if(!GLOBAL_VEHICLES[i][gb_vehicle_VALID]) continue;
		if(GLOBAL_VEHICLES[i][gb_vehicle_TYPE] == VEHICLE_TYPE_PERSONAL) continue;
		if(GLOBAL_VEHICLES[i][gb_vehicle_OCCUPIED]) continue;
	
		SetVehicleToRespawnEx(i);
	}
	return 1;
}



CMD:kill(playerid, params[])
{
	SetPlayerHealthEx(playerid, 0.0);
	return 1;
}

GetNumberOfPlayersOnThisIP(test_ip[])
{
	new against_ip[16], ip_count = 0;
	for(new x = 0, j = GetPlayerPoolSize(); x <= j; x++) 
	{
		if(IsPlayerConnected(x)) 
		{
		    GetPlayerIp(x, against_ip, 16);
		    if(!strcmp(against_ip, test_ip)) ip_count++;
		}
	}
	return ip_count;
}

getRandomSalt(salt[], length = sizeof salt)
{
    for(new i = 0; i != length; i ++)
	{
		salt[i] = random(2) ? (random(26) + (random(2) ? 'a' : 'A')) : (random(10) + '0');
	}
	return true;
}

GetTickDiff(newtick, oldtick)
{
	if (oldtick < 0 && newtick >= 0) {
		return newtick - oldtick;
	} else if (oldtick >= 0 && newtick < 0 || oldtick > newtick) {
		return (cellmax - oldtick + 1) - (cellmin - newtick);
	}
	return newtick - oldtick;
}

GetPlayerSpeed(vehicleid)
{
	new Float:xPos[3];
	GetPlayerVelocity(vehicleid, xPos[0], xPos[1], xPos[2]);
	return floatround(floatsqroot(xPos[0] * xPos[0] + xPos[1] * xPos[1] + xPos[2] * xPos[2]) * 170.00);
}

ShowPlayerShop(playerid)
{
	TextDrawShowForPlayer(playerid, Textdraws[textdraw_SHOP][0]);
	TextDrawShowForPlayer(playerid, Textdraws[textdraw_SHOP][1]);
	TextDrawShowForPlayer(playerid, Textdraws[textdraw_SHOP][2]);
	TextDrawShowForPlayer(playerid, Textdraws[textdraw_SHOP][3]);
	TextDrawShowForPlayer(playerid, Textdraws[textdraw_SHOP][4]);
	
	PLAYER_TEMP[playerid][pt_SHOP_COME_FROM_MY_ADS] = false;
	PLAYER_TEMP[playerid][pt_SHOP] = true;
	PLAYER_TEMP[playerid][pt_SHOP_STATE] = PLAYER_SHOP_STATE_ALL;
	
	PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT] = 6;
	PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] = 0;
	
	UpdatePlayerShop(playerid);
	SelectTextDrawEx(playerid, 0x00a39bFF);
	return 1;
}

UpdatePlayerShop(playerid)
{
	switch(PLAYER_TEMP[playerid][pt_SHOP_STATE])
	{
		case PLAYER_SHOP_STATE_ALL:
		{
			if(PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID] != PlayerText:INVALID_TEXT_DRAW)
			{
				PlayerTextDrawDestroy(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID]);
				PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID] = PlayerText:INVALID_TEXT_DRAW;
			}
			TextDrawHideForPlayer(playerid, Textdraws[textdraw_SHOP_ARTICLE_BOX]);
			PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_NUMBER]);
			PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_INFO]);
			
			for(new i = 0; i != 6; i ++)
			{
				PLAYER_TEMP[playerid][pt_SHOP_ARTICLE_ID][i] = 0;
				TextDrawHideForPlayer(playerid, Textdraws[textdraw_SHOP_ARTICLES_BOX][i]);
				if(i <= 4) PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][i]);
			}
			
			PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][0], "+_Publicar_anuncio");
			PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][1], "-_Mis_anuncios");
			PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][2], "Cerrar");
			PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][3], "Siguiente");
			PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][4], "Anterior");
			
			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][0]);
			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][1]);
			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][2]);
			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][3]);
			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][4]);
			
			
			DestroyArticleShopTextDraws(playerid);
			
			new DBResult:Result, DB_Query[256], articles, td_str[32];
			format(DB_Query, sizeof DB_Query, "SELECT `CUENTA`.`CONNECTED`, `SHOP`.* FROM `SHOP`, `CUENTA` WHERE `SHOP`.`ID_USER` = `CUENTA`.`ID` ORDER BY `CUENTA`.`CONNECTED` DESC, `SHOP`.`DATE` DESC LIMIT %d, %d;", PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] * PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT], PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT]);
			Result = db_query(Database, DB_Query);
			
			for(new i; i < db_num_rows(Result); i++ )
			{
				new connected, Price, Modelid, Float:rX, Float:rY, Float:rZ, Float:Zoom, vColor1, vColor2;
				
				connected = db_get_field_assoc_int(Result, "CONNECTED");
				PLAYER_TEMP[playerid][pt_SHOP_ARTICLE_ID][articles] = db_get_field_assoc_int(Result, "ID");
				Price = db_get_field_assoc_int(Result, "PRICE");
				Modelid = db_get_field_assoc_int(Result, "MODELID");
				rX = db_get_field_assoc_float(Result, "RX");
				rY = db_get_field_assoc_float(Result, "RY");
				rZ = db_get_field_assoc_float(Result, "RZ");
				Zoom = db_get_field_assoc_float(Result, "ZOOM");
				vColor1 = db_get_field_assoc_int(Result, "VCOL1");
				vColor2 = db_get_field_assoc_int(Result, "VCOL2");
				
				new Float:Td_Pos[2];
				
				switch(articles)
				{
					case 0: Td_Pos = Float:{212.000000, 152.000000};
					case 1: Td_Pos = Float:{289.000000, 152.000000};
					case 2: Td_Pos = Float:{366.000000, 152.000000};
					case 3: Td_Pos = Float:{212.000000, 229.000000};
					case 4: Td_Pos = Float:{289.000000, 229.000000};
					case 5: Td_Pos = Float:{366.000000, 229.000000};
				}
				
				PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][articles] = CreatePlayerTextDraw(playerid, Td_Pos[0], Td_Pos[1], "");
				PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][articles], 62.000000, 55.000000);
				PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][articles], 1);
				PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][articles], -1);
				if(connected) PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][articles], 0xCCCCCCFF);
				else PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][articles], 0x666666FF);
				PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][articles], 5);
				PlayerTextDrawSetPreviewModel(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][articles], Modelid);
				PlayerTextDrawSetPreviewRot(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][articles], rX, rY, rZ, Zoom);
				PlayerTextDrawSetPreviewVehCol(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][articles], vColor1, vColor2);
				PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][articles]);
				
				format(td_str, sizeof td_str, "%s$", number_format_thousand(Price));
				PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][articles] = CreatePlayerTextDraw(playerid, Td_Pos[0] + 31.0, Td_Pos[1] + 55.0, td_str);
				PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][articles], 0.229333, 0.957037);
				PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][articles], 2);
				PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][articles], -1);
				PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][articles], 0);
				PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][articles], 0);
				PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][articles], 255);
				PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][articles], 1);
				PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][articles], 1);
				PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][articles], 0);
				PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][articles]);

				TextDrawShowForPlayer(playerid, Textdraws[textdraw_SHOP_ARTICLES_BOX][articles]);
				
				articles ++;
				db_next_row(Result);
			}
			db_free_result(Result);
			
			new total_pages = GetDatabasePages("SELECT COUNT() FROM `SHOP`;", PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT]);
			format(td_str, sizeof td_str, "-_%d/%d_-", PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] + 1, total_pages);
			
			PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PAGE], td_str);
			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PAGE]);
			return 1;
		}
		case PLAYER_SHOP_STATE_MY_ADS:
		{
			if(PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID] != PlayerText:INVALID_TEXT_DRAW)
			{
				PlayerTextDrawDestroy(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID]);
				PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID] = PlayerText:INVALID_TEXT_DRAW;
			}
			TextDrawHideForPlayer(playerid, Textdraws[textdraw_SHOP_ARTICLE_BOX]);
			PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_NUMBER]);
			PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_INFO]);
			
			for(new i = 0; i != 6; i ++)
			{
				PLAYER_TEMP[playerid][pt_SHOP_ARTICLE_ID][i] = 0;
				TextDrawHideForPlayer(playerid, Textdraws[textdraw_SHOP_ARTICLES_BOX][i]);
				if(i <= 4) PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][i]);
			}
			
			PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][0], "_");
			PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][1], "_");
			PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][2], "Atrs");
			PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][3], "Siguiente");
			PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][4], "Anterior");

			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][2]);
			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][3]);
			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][4]);
			
			
			DestroyArticleShopTextDraws(playerid);
			
			new DBResult:Result, DB_Query[160], articles, td_str[32];
			format(DB_Query, sizeof DB_Query, "SELECT * FROM `SHOP` WHERE `ID_USER` = '%d' ORDER BY `DATE` DESC LIMIT %d, %d;", ACCOUNT_INFO[playerid][ac_ID], PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] * PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT], PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT]);
			Result = db_query(Database, DB_Query);
			
			for(new i; i < db_num_rows(Result); i++ )
			{
				new Price, Modelid, Float:rX, Float:rY, Float:rZ, Float:Zoom, vColor1, vColor2;
				
				PLAYER_TEMP[playerid][pt_SHOP_ARTICLE_ID][articles] = db_get_field_assoc_int(Result, "ID");
				Price = db_get_field_assoc_int(Result, "PRICE");
				Modelid = db_get_field_assoc_int(Result, "MODELID");
				rX = db_get_field_assoc_float(Result, "RX");
				rY = db_get_field_assoc_float(Result, "RY");
				rZ = db_get_field_assoc_float(Result, "RZ");
				Zoom = db_get_field_assoc_float(Result, "ZOOM");
				vColor1 = db_get_field_assoc_int(Result, "VCOL1");
				vColor2 = db_get_field_assoc_int(Result, "VCOL2");
				
				new Float:Td_Pos[2];
				
				switch(articles)
				{
					case 0: Td_Pos = Float:{212.000000, 152.000000};
					case 1: Td_Pos = Float:{289.000000, 152.000000};
					case 2: Td_Pos = Float:{366.000000, 152.000000};
					case 3: Td_Pos = Float:{212.000000, 229.000000};
					case 4: Td_Pos = Float:{289.000000, 229.000000};
					case 5: Td_Pos = Float:{366.000000, 229.000000};
				}
				
				PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][articles] = CreatePlayerTextDraw(playerid, Td_Pos[0], Td_Pos[1], "");
				PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][articles], 62.000000, 55.000000);
				PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][articles], 1);
				PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][articles], -1);
				PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][articles], 0xCCCCCCFF);
				PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][articles], 5);
				PlayerTextDrawSetPreviewModel(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][articles], Modelid);
				PlayerTextDrawSetPreviewRot(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][articles], rX, rY, rZ, Zoom);
				PlayerTextDrawSetPreviewVehCol(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][articles], vColor1, vColor2);
				PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][articles]);
				
				format(td_str, sizeof td_str, "%s$", number_format_thousand(Price));
				PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][articles] = CreatePlayerTextDraw(playerid, Td_Pos[0] + 31.0, Td_Pos[1] + 55.0, td_str);
				PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][articles], 0.229333, 0.957037);
				PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][articles], 2);
				PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][articles], -1);
				PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][articles], 0);
				PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][articles], 0);
				PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][articles], 255);
				PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][articles], 1);
				PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][articles], 1);
				PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][articles], 0);
				PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][articles]);

				TextDrawShowForPlayer(playerid, Textdraws[textdraw_SHOP_ARTICLES_BOX][articles]);
				
				articles ++;
				db_next_row(Result);
			}
			db_free_result(Result);
			
			new the_query[80];
			format(the_query, sizeof the_query, "SELECT COUNT() FROM `SHOP` WHERE `ID_USER` = '%d';", ACCOUNT_INFO[playerid][ac_ID]);
			
			new total_pages = GetDatabasePages(the_query, PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT]);
			format(td_str, sizeof td_str, "-_%d/%d_-", PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] + 1, total_pages);
			
			PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PAGE], td_str);
			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PAGE]);
			return 1;
		}
		case PLAYER_SHOP_STATE_AD:
		{
			new DBResult:Result, DB_Query[280], bool:found;
			format(DB_Query, sizeof DB_Query, "SELECT `SHOP`.*, `CUENTA`.`CONNECTED`, `CUENTA`.`NAME`, `PHONE`.`PHONE_NUMBER` FROM `SHOP`, `CUENTA`, `PHONE` WHERE `SHOP`.`ID` = '%d' AND `CUENTA`.`ID` = `SHOP`.`ID_USER` AND `PHONE`.`ID_USER` = `SHOP`.`ID_USER`;", PLAYER_TEMP[playerid][pt_SHOP_SELECTED_ARTICLE_ID]);
			Result = db_query(Database, DB_Query);
			
			if(db_num_rows(Result))
			{
				new td_str[190], connected, ad_id, ad_by_aid, ad_type, ad_price, ad_text[24], ad_modelid, Float:ad_rX, Float:ad_rY, Float:ad_rZ, Float:ad_Zoom, ad_vCol1, ad_vCol2, ad_add_date[24], ad_by[24], ad_by_phone_number;
				
				connected = db_get_field_assoc_int(Result, "CONNECTED");
				ad_id = db_get_field_assoc_int(Result, "ID");
				ad_by_aid = db_get_field_assoc_int(Result, "ID_USER");
				ad_type = db_get_field_assoc_int(Result, "TYPE");
				ad_price = db_get_field_assoc_int(Result, "PRICE");
				db_get_field_assoc(Result, "TEXT", ad_text, 24);
				ad_modelid = db_get_field_assoc_int(Result, "MODELID");
				ad_rX = db_get_field_assoc_float(Result, "RX");
				ad_rY = db_get_field_assoc_float(Result, "RY");
				ad_rZ = db_get_field_assoc_float(Result, "RZ");
				ad_Zoom = db_get_field_assoc_float(Result, "ZOOM");
				ad_vCol1 = db_get_field_assoc_int(Result, "VCOL1");
				ad_vCol2 = db_get_field_assoc_int(Result, "VCOL2");
				db_get_field_assoc(Result, "DATE", ad_add_date, 24);
				db_get_field_assoc(Result, "NAME", ad_by, 24);
				ad_by_phone_number = db_get_field_assoc_int(Result, "PHONE_NUMBER");
				
				if(PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID] != PlayerText:INVALID_TEXT_DRAW)
				{
					PlayerTextDrawDestroy(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID]);
					PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID] = PlayerText:INVALID_TEXT_DRAW;
				}
				PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID] = CreatePlayerTextDraw(playerid, 212.000000, 179.000000, "");
				PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID], 0.000000, 0.000000);
				PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID], 92.000000, 91.000000);
				PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID], 1);
				PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID], -1);
				PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID], 0);
				PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID], 0);
				PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID], 44284927);
				PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID], 5);
				PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID], 0);
				PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID], 0);
				PlayerTextDrawSetPreviewModel(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID], ad_modelid);
				PlayerTextDrawSetPreviewRot(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID], ad_rX, ad_rY,ad_rZ, ad_Zoom);
				PlayerTextDrawSetPreviewVehCol(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID], ad_vCol1, ad_vCol2);
				PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID]);
				TextDrawShowForPlayer(playerid, Textdraws[textdraw_SHOP_ARTICLE_BOX]);
				
				format(td_str, sizeof td_str, "Art¢culo_n|_%d (%s)", ad_id, ad_add_date);
				PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_NUMBER], td_str);
				PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_NUMBER]);
				
				switch(ad_type)
				{
					case SHOP_ARTICLE_TYPE_PROPERTY: format(td_str, sizeof td_str, "Producto:_Propiedad~n~Precio:_%s$~n~~n~Descripci¦n:~n~%s~n~~n~Tlf:_%d_(%s)~n~%s", number_format_thousand(ad_price), ad_text, ad_by_phone_number, connected ? "conectado" : "desconectado", ad_by);
					case SHOP_ARTICLE_TYPE_VEHICLE: format(td_str, sizeof td_str, "Producto:_Veh¢culo~n~Precio:_%s$~n~~n~Descripci¦n:~n~%s~n~~n~Tlf:_%d_(%s)~n~%s", number_format_thousand(ad_price), ad_text, ad_by_phone_number, connected ? "conectado" : "desconectado", ad_by);
					case SHOP_ARTICLE_TYPE_OTHER: format(td_str, sizeof td_str, "Producto:_Otros~n~Precio:_%s$~n~~n~Descripci¦n:~n~%s~n~~n~Tlf:_%d_(%s)~n~%s", number_format_thousand(ad_price), ad_text, ad_by_phone_number, connected ? "conectado" : "desconectado", ad_by);
				}
				PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_INFO], td_str);
				PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_INFO]);
				
				for(new i = 0; i != 4; i ++) PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][i]);
				PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][0], "_");
				PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][1], "_");
				PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][2], "_");
				PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][3], "_");
				PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][4], "Atrs");
				PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][4]);
				
				if(ACCOUNT_INFO[playerid][ac_ID] == ad_by_aid)
				{
					PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][2], "Modificar");
					PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][3], "Eliminar");
					PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][2]);
					PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][3]);
				}
				
				found = true;
			}
			else
			{
				found = false;
			}
			db_free_result(Result);
			
			if(!found)
			{
				SendClientMessage(playerid, -1, "{00FF80}Este anuncio ya no está disponible.");
				PLAYER_TEMP[playerid][pt_SHOP_STATE] = PLAYER_SHOP_STATE_ALL;
				return 1;
			}
			
			for(new i = 0; i != 6; i ++)
			{
				PLAYER_TEMP[playerid][pt_SHOP_ARTICLE_ID][i] = 0;
				TextDrawHideForPlayer(playerid, Textdraws[textdraw_SHOP_ARTICLES_BOX][i]);
			}
			
			PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PAGE]);
			DestroyArticleShopTextDraws(playerid);
		}
	}
	return 1;
}

HidePlayerShop(playerid)
{
	HidePlayerDialog(playerid);
	TextDrawHideForPlayer(playerid, Textdraws[textdraw_SHOP][0]);
	TextDrawHideForPlayer(playerid, Textdraws[textdraw_SHOP][1]);
	TextDrawHideForPlayer(playerid, Textdraws[textdraw_SHOP][2]);
	TextDrawHideForPlayer(playerid, Textdraws[textdraw_SHOP][3]);
	TextDrawHideForPlayer(playerid, Textdraws[textdraw_SHOP][4]);
	
	PLAYER_TEMP[playerid][pt_SHOP_COME_FROM_MY_ADS] = false;
	PLAYER_TEMP[playerid][pt_SHOP] = false;
	PLAYER_TEMP[playerid][pt_SHOP_STATE] = 0;
	
	PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT] = 0;
	PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] = 0;
	
	if(PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID] != PlayerText:INVALID_TEXT_DRAW)
	{
		PlayerTextDrawDestroy(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID]);
		PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID] = PlayerText:INVALID_TEXT_DRAW;
	}
	TextDrawHideForPlayer(playerid, Textdraws[textdraw_SHOP_ARTICLE_BOX]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_NUMBER]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_INFO]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PAGE]);
	
	for(new i = 0; i != 6; i ++)
	{
		PLAYER_TEMP[playerid][pt_SHOP_ARTICLE_ID][i] = 0;
		TextDrawHideForPlayer(playerid, Textdraws[textdraw_SHOP_ARTICLES_BOX][i]);
		if(i <= 4) PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][i]);
	}
	DestroyArticleShopTextDraws(playerid);
	
	CancelSelectTextDrawEx(playerid);
	return 1;
}

DestroyArticleShopTextDraws(playerid)
{
	for(new i; i < 6; i++)
	{
		if(PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][i] != PlayerText:INVALID_TEXT_DRAW)
		{
			PlayerTextDrawDestroy(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][i]);
			PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][i] = PlayerText:INVALID_TEXT_DRAW;
		}
		if(PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][i] != PlayerText:INVALID_TEXT_DRAW)
		{
			PlayerTextDrawDestroy(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][i]);
			PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][i] = PlayerText:INVALID_TEXT_DRAW;
		}
	}
	return 1;
}

td_str_legal(text[])
{
	for(new i = 0; i != strlen(text); i ++)
	{
		if((text[i] >= 91 && text[i] <= 96) || (text[i] >= 58 && text[i] <= 64) || (text[i] < 48 && text[i] != 32) || text[i] > 122)
		{
			return false;
		}
	}
	return true;
}

public OnPlayerStreamIn(playerid, forplayerid)
{
	if(PLAYER_TEMP[playerid][pt_WANT_TAXI])
	{
		if(GetPlayerState(forplayerid) == PLAYER_STATE_DRIVER)
		{			
			if(!PLAYER_WORKS[forplayerid][WORK_TAXI]) return 1;
			if(PLAYER_TEMP[forplayerid][pt_WORKING_IN] != WORK_TAXI) return 1;
			SetPlayerMarkerForPlayer(forplayerid, playerid, 0xf2f224FF);
		}
	}
	
	if(PLAYER_TEMP[playerid][pt_WANT_MECHANIC])
	{
		if(!PLAYER_WORKS[forplayerid][WORK_MECHANIC]) return 1;
		if(PLAYER_TEMP[forplayerid][pt_WORKING_IN] != WORK_MECHANIC) return 1;
		SetPlayerMarkerForPlayer(forplayerid, playerid, 0xf4c242FF);
	}
	
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK)
	{
		if(!PLAYER_WORKS[forplayerid][WORK_MEDIC]) return 1;
		if(PLAYER_TEMP[forplayerid][pt_WORKING_IN] != WORK_MEDIC) return 1;
		SetPlayerMarkerForPlayer(forplayerid, playerid, 0x4aba00FF);
	}
    return 1;
}

GetPlayerPlantedPlants(playerid)
{
	new plants;
	
	for(new i = 0; i != MAX_PLANTS; i ++)
	{
		if(!PLANTS[i][plant_VALID]) continue;
		if(PLANTS[i][plant_PLANTED_BY_ACCOUNT_ID] == ACCOUNT_INFO[playerid][ac_ID]) plants ++;
	}
	return plants;
}


StartPlayerJob(playerid, work, vehicleid = INVALID_VEHICLE_ID)
{
	switch(work)
	{

		case WORK_TAXI:
		{
			SetTaxiPlayerMarkers(playerid);
			ResetVehicleTaxiMeter(vehicleid);
			ShowPlayerTaxiMeter(playerid);
			
			new passenger = GetVehicleFirstPassenger(vehicleid);
			if(passenger != INVALID_PLAYER_ID)
			{
				ShowPlayerTaxiMeter(passenger);
				if(PLAYER_TEMP[passenger][pt_WANT_TAXI])
				{
					PLAYER_TEMP[passenger][pt_WANT_TAXI] = false;
					DisablePlayerTaxiMark(passenger);
				}
				
				TAXI_METER_VEHICLE[vehicleid][veh_taxi_meter_ENABLED] = true;
				GetVehiclePos(vehicleid, TAXI_METER_VEHICLE[vehicleid][veh_taxi_meter_OLD_X], TAXI_METER_VEHICLE[vehicleid][veh_taxi_meter_OLD_Y], TAXI_METER_VEHICLE[vehicleid][veh_taxi_meter_OLD_Z]);
				KillTimer(TAXI_METER_VEHICLE[vehicleid][veh_taxi_meter_TIMER]);
				TAXI_METER_VEHICLE[vehicleid][veh_taxi_meter_TIMER] = SetTimerEx("UpdateVehicleTaximeter", 4000, true, "iii", vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER], passenger);
			}
		}
		case WORK_TRUCK:
		{
			if(TRUCK_VEHICLE[vehicleid][truck_vehicle_LOADED])
			{
				if(TRUCK_VEHICLE[vehicleid][truck_vehicle_DELIVERED]) SendClientMessage(playerid, -1, "{E6F8E0}El camión ya ha entregado la mercancía, ve al punto de partida para cobrar.");
				else SendClientMessage(playerid, -1, "{E6F8E0}Ve a entregar la mercancía al punto marcado.");
				
				SetPlayerTruckCheckpoint(playerid, vehicleid);
			}
			else SendClientMessage(playerid, 0xCCCCCCCC, "Info: Para comenzar a trabajar carga el camión en la zona indicada con una flecha amarilla.");
		}
		case WORK_HARVESTER:
		{
			PLAYER_TEMP[playerid][pt_HARVERT_PROCCESS] = 0;
			SendClientMessage(playerid, -1, "{E6F8E0}Ve hasta los puntos de control para completar el trabajo.");
			SendClientMessage(playerid, -1, "{E6F8E0}Si te bajas de la cosechadora se cancelará el trabajo.");
			Set_HARVEST_Checkpoint(playerid);
		}
		case WORK_LUMBERJACK:
		{
			PLAYER_TEMP[playerid][pt_PLAYER_CARRYING_TREE] = false;
			PLAYER_TEMP[playerid][pt_PLAYER_LUMBERJACK_TREE] = -1;
			
			RemovePlayerAttachedObject(playerid, 9);
			SetPlayerAttachedObject(playerid, 9, 341, 1, -0.172999, -0.165, -0.053999, 0.0, -7.599999, -9.6);
			
			SendClientMessage(playerid,0xCCCCCCCC,"Info: Los árboles que puedes talar están repartidos por la zona, si te alejas demasiado el trabajo se cancelará.");
		}
		case WORK_TRASH:
		{
			if(CHARACTER_INFO[playerid][ch_SEX] == SEX_MALE)
			{
				SetPlayerSkin(playerid, 16);
				for(new i = 0; i != MAX_PLAYER_ATTACHED_OBJECTS; i ++) RemovePlayerAttachedObject(playerid, i);
			}
		}
		case WORK_MECHANIC:
		{
			if(CHARACTER_INFO[playerid][ch_SEX] == SEX_MALE)
			{
				SetPlayerSkin(playerid, 50);
				for(new i = 0; i != MAX_PLAYER_ATTACHED_OBJECTS; i ++) RemovePlayerAttachedObject(playerid, i);
			}
			SetMechanicPlayerMarkers(playerid);
		}
		case WORK_POLICE:
		{
			new label_str[128];
			format(label_str, sizeof label_str, "%s | Nº%d | %c. %s", POLICE_RANKS[ PLAYER_SKILLS[playerid][WORK_POLICE] ], PLAYER_MISC[playerid][MISC_PLACA_PD], PLAYER_TEMP[playerid][pt_FIRST_NAME][0], PLAYER_TEMP[playerid][pt_SUB_NAME]);
			
			if(IsValidDynamic3DTextLabel(PLAYER_TEMP[playerid][pt_POLICE_LABEL]))
			{
				DestroyDynamic3DTextLabel(PLAYER_TEMP[playerid][pt_POLICE_LABEL]);
				PLAYER_TEMP[playerid][pt_POLICE_LABEL] = Text3D:INVALID_STREAMER_ID;
			}
			PLAYER_TEMP[playerid][pt_POLICE_LABEL] = CreateDynamic3DTextLabel(label_str, 0xCCCCCCCC, 0.0, 0.0, 0.3, 20.0, playerid, .testlos = true);
			SetPlayerColor(playerid,0x00579E00);
			for(new i = 0; i != MAX_PLAYER_ATTACHED_OBJECTS; i ++) RemovePlayerAttachedObject(playerid, i);
		}
		case WORK_PIZZA:
		{
			if(CHARACTER_INFO[playerid][ch_SEX] == SEX_MALE)
			{
				SetPlayerSkin(playerid, 155);
				for(new i = 0; i != MAX_PLAYER_ATTACHED_OBJECTS; i ++) RemovePlayerAttachedObject(playerid, i);
			}
			PLAYER_TEMP[playerid][pt_PIZZA_PROCCESS] = 0;
			PLAYER_TEMP[playerid][pt_DELIVERED_PIZZAS] = 0;
			SendClientMessage(playerid, -1, "{E6F8E0}Para comenzar a repartir súbete a una moto de la pizzería.");
		}
		case WORK_MEDIC:
		{
			if(CHARACTER_INFO[playerid][ch_SEX] == SEX_MALE) SetPlayerSkin(playerid, male_medic_skins[ random(sizeof(male_medic_skins)) ]);
			else SetPlayerSkin(playerid, 308);
			for(new i = 0; i != MAX_PLAYER_ATTACHED_OBJECTS; i ++) RemovePlayerAttachedObject(playerid, i);
			SetInjuredPlayerMarkers(playerid);
		}
		case WORK_MINER:
		{
			MensajesAyuda(playerid,"Dirigete a la mina y comienza a extraer minerales");
		}
		case WORK_CARRIER:
		{
			SendClientMessage(playerid,0xECEC2DFF,"Ahora estas trabajando como \"TRANSPORTISTA\", dirigete a tu vehiculo DFT para comenzar a trabajar");
		}
		case WORK_PESCADOR:
		{
			SendClientMessage(playerid,0xECEC2DFF,"Ahora estas trabajando como \"PESCADOR\", consigue una caña de pescar, sube a un bote y dirigete a una zona de pesca");
		}
	}
	
	PLAYER_TEMP[playerid][pt_WORKING_IN] = work;
	return 1;
}

EndPlayerJob(playerid, changeskin = true)
{
	switch(PLAYER_TEMP[playerid][pt_WORKING_IN])
	{
		case WORK_TAXI:
		{
			if(PLAYER_TEMP[playerid][pt_TAXI_METER_ENABLED])
			{
				SetNormalPlayerMarkers(playerid);
				HidePlayerTaxiMeter(playerid);
			}
		}
		case WORK_TRUCK:
		{
			if(PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] != INVALID_VEHICLE_ID)
			{
				if(TRUCK_VEHICLE[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][truck_vehicle_DRIVER_USER_ID] == ACCOUNT_INFO[playerid][ac_ID])
				{
					if(TRUCK_VEHICLE[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][truck_vehicle_LOADING])
					{
						HidePlayerDialog(playerid);
						KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][9]);
						PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][0]);
						PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][1]);
						PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][2]);
						PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][3]);
						SetVehicleToRespawnEx(PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID]);
					}
					if(TRUCK_VEHICLE[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][truck_vehicle_UNLOADING])
					{
						TRUCK_VEHICLE[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][truck_vehicle_UNLOADING] = false;
						KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][9]);
						PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][0]);
						PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][1]);
						PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][2]);
						PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][3]);
					}
				}
			}
			if(IsValidDynamicCP(PLAYER_TEMP[playerid][pt_TRUCK_CHECKPOINT]))
			{
				DestroyDynamicCP(PLAYER_TEMP[playerid][pt_TRUCK_CHECKPOINT]);
				PLAYER_TEMP[playerid][pt_TRUCK_CHECKPOINT] = INVALID_STREAMER_ID;
			}
		}
		case WORK_HARVESTER:
		{
			if(IsValidDynamicRaceCP(PLAYER_TEMP[playerid][pt_HARVERT_CHECKPOINT]))
			{
				DestroyDynamicRaceCP(PLAYER_TEMP[playerid][pt_HARVERT_CHECKPOINT]);
				PLAYER_TEMP[playerid][pt_HARVERT_CHECKPOINT] = INVALID_STREAMER_ID;
			}
			if(PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] != INVALID_VEHICLE_ID)
			{
				if(WORK_VEHICLES[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][work_vehicle_WORK] == WORK_HARVESTER) SetVehicleToRespawnEx(PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID]);
			}
		}
		case WORK_LUMBERJACK: CancelLumberjackWork(playerid);
		case WORK_FARMER: CancelPlayerPlanting(playerid);
		case WORK_TRASH:
		{
			if(changeskin)
			{
				SetPlayerSkin(playerid, CHARACTER_INFO[playerid][ch_SKIN]);
				SetPlayerToys(playerid);
			}
			
			if(PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] != INVALID_VEHICLE_ID)
			{
				if(TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_JOB_STARTED])
				{
					if(PLAYER_TEMP[playerid][pt_TRASH_DRIVER])
					{
						SendClientMessage(TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_PASSENGER_ID], -1, "{E6F8E0}El trabajo se ha cancelado porque tu compañero ha dejado de trabajar.");
						CancelTrashWork(playerid, TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_PASSENGER_ID], PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID]);
					}
					if(PLAYER_TEMP[playerid][pt_TRASH_PASSENGER])
					{
						SendClientMessage(TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_DRIVER_ID], -1, "{E6F8E0}El trabajo se ha cancelado porque tu compañero ha dejado de trabajar.");
						CancelTrashWork(TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_DRIVER_ID], playerid, PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID]);
					}
				}
			}
		}
		case WORK_POLICE:
		{
			PLAYER_TEMP[playerid][pt_POLICE_RADIO] = 0;
			if(IsValidDynamic3DTextLabel(PLAYER_TEMP[playerid][pt_POLICE_LABEL]))
			{
				DestroyDynamic3DTextLabel(PLAYER_TEMP[playerid][pt_POLICE_LABEL]);
				PLAYER_TEMP[playerid][pt_POLICE_LABEL] = Text3D:INVALID_STREAMER_ID;
			}
			if(changeskin)
			{
				SetPlayerSkin(playerid, CHARACTER_INFO[playerid][ch_SKIN]);
				SetPlayerToys(playerid);
			}
			SetPlayerColorEx(playerid, PLAYER_COLOR);
			SetNormalPlayerMarkers(playerid);
		}
		case WORK_MECHANIC:
		{
			if(changeskin)
			{
				SetPlayerSkin(playerid, CHARACTER_INFO[playerid][ch_SKIN]);
				SetPlayerToys(playerid);
			}
			SetNormalPlayerMarkers(playerid);
		}
		case WORK_PIZZA:
		{
			if(PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] != INVALID_VEHICLE_ID)
			{
				if(PIZZA_VEHICLE[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][pizza_vehicle_DRIVER_AID] == ACCOUNT_INFO[playerid][ac_ID]) SetVehicleToRespawnEx(PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID]);
			}
			if(IsValidDynamicCP(PLAYER_TEMP[playerid][pt_PIZZA_CHECKPOINT]))
			{
				DestroyDynamicCP(PLAYER_TEMP[playerid][pt_PIZZA_CHECKPOINT]);
				PLAYER_TEMP[playerid][pt_PIZZA_CHECKPOINT] = INVALID_STREAMER_ID;
			}
			if(IsValidDynamicActor(PLAYER_TEMP[playerid][pt_PIZZA_ACTOR]))
			{
				DestroyDynamicActor(PLAYER_TEMP[playerid][pt_PIZZA_ACTOR]);
				PLAYER_TEMP[playerid][pt_PIZZA_ACTOR] = INVALID_STREAMER_ID;
			}
			if(changeskin)
			{
				SetPlayerSkin(playerid, CHARACTER_INFO[playerid][ch_SKIN]);
				SetPlayerToys(playerid);
			}
		}
		case WORK_MEDIC:
		{
			if(changeskin)
			{
				SetPlayerSkin(playerid, CHARACTER_INFO[playerid][ch_SKIN]);
				SetPlayerToys(playerid);
			}
			SetNormalPlayerMarkers(playerid);
		}
		case WORK_MINER:
		{
			SetPlayerSkin(playerid, CHARACTER_INFO[playerid][ch_SKIN]);
		}
		case WORK_CARRIER:
		{
			SendClientMessage(playerid,0xEC442DFF,"Dejaste de trabajar como \"TRANSPORTISTA\"");
		}
		case WORK_PESCADOR:
		{
			SendClientMessage(playerid,0xEC442DFF,"Dejaste de trabajar como \"PESCADOR\"");
		}
	}
	
	PLAYER_TEMP[playerid][pt_WORKING_IN] = WORK_NONE;
	
	SavePlayerSkills(playerid);
	return 1;
}

CountPlayerJobs(playerid)
{
	new count;
	for(new i = 1; i != sizeof(work_info); i ++)
	{
		if(PLAYER_WORKS[playerid][i]) count ++;
	}
	return count;
}

getPlayerWorks(playerid)
{
	new works[27 * sizeof(work_info)], count;
	for(new i = 1; i != sizeof(work_info); i ++)
	{
		if(PLAYER_WORKS[playerid][i])
		{
			if(count > 0) strcat(works, ", ");
			strcat(works, work_info[i][work_info_NAME]);
			
			count ++;
		}
	}
	
	if(!count) works = "ninguno";
	return works;
}

SetPlayer_Pizza_Checkpoint(playerid, point)
{
	if(IsValidDynamicCP(PLAYER_TEMP[playerid][pt_PIZZA_CHECKPOINT]))
	{
		DestroyDynamicCP(PLAYER_TEMP[playerid][pt_PIZZA_CHECKPOINT]);
		PLAYER_TEMP[playerid][pt_PIZZA_CHECKPOINT] = INVALID_STREAMER_ID;
	}
	if(IsValidDynamicActor(PLAYER_TEMP[playerid][pt_PIZZA_ACTOR]))
	{
		DestroyDynamicActor(PLAYER_TEMP[playerid][pt_PIZZA_ACTOR]);
		PLAYER_TEMP[playerid][pt_PIZZA_ACTOR] = INVALID_STREAMER_ID;
	}
	
	if(point == -1)
	{
		PLAYER_TEMP[playerid][pt_PIZZA_CHECKPOINT] = CreateDynamicCP(2096.279785, -1797.436279, 12.982056, 3.0, 0, 0, playerid, 9999999999.0);
		
		new info[1];
		info[0] = CHECKPOINT_TYPE_PIZZA_FINISH;
		Streamer_SetArrayData(STREAMER_TYPE_CP, PLAYER_TEMP[playerid][pt_PIZZA_CHECKPOINT], E_STREAMER_EXTRA_ID, info);
	}
	else
	{
		PLAYER_TEMP[playerid][pt_PIZZA_ACTOR] = CreateDynamicActor(minrand(0, 311), PIZZA_DELIVERY_POINT[point][0], PIZZA_DELIVERY_POINT[point][1], PIZZA_DELIVERY_POINT[point][2], PIZZA_DELIVERY_POINT[point][3], .playerid = playerid);
		
		new Float:pos[3];
		pos[0] = PIZZA_DELIVERY_POINT[point][0] + (1.5 * floatsin(-PIZZA_DELIVERY_POINT[point][3], degrees));
		pos[1] = PIZZA_DELIVERY_POINT[point][1] + (1.5 * floatcos(-PIZZA_DELIVERY_POINT[point][3], degrees));
		pos[2] = PIZZA_DELIVERY_POINT[point][2];
	
		PLAYER_TEMP[playerid][pt_PIZZA_CHECKPOINT] = CreateDynamicCP(pos[0], pos[1], pos[2], 1.0, 0, 0, playerid, 9999999999.0);
		
		new info[1];
		info[0] = CHECKPOINT_TYPE_PIZZA_DEL;
		Streamer_SetArrayData(STREAMER_TYPE_CP, PLAYER_TEMP[playerid][pt_PIZZA_CHECKPOINT], E_STREAMER_EXTRA_ID, info);
	}
	return 1;
}

randomEx(max, exception)
{
	new rand = random(max);
	while(rand == exception)
	{
		rand = random(max);
	}
	return rand;
}

SetPlayerSkillLevels(playerid)
{
	if(ACCOUNT_INFO[playerid][ac_LEVEL] < 10)
	{
		SetPlayerSkillLevel(playerid, WEAPONSKILL_SAWNOFF_SHOTGUN, 0);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL, 0);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL_SILENCED, 0);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_DESERT_EAGLE, 0);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_SHOTGUN, 0);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_SPAS12_SHOTGUN, 0);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_MICRO_UZI, 0);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_MP5, 0);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_AK47, 0);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_M4, 0);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_SNIPERRIFLE, 0);
	}
	else if(ACCOUNT_INFO[playerid][ac_LEVEL] >= 20)
	{
		SetPlayerSkillLevel(playerid, WEAPONSKILL_SAWNOFF_SHOTGUN,		999);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL, 				999);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL_SILENCED, 		999);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_DESERT_EAGLE, 		999);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_SHOTGUN, 				999);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_SPAS12_SHOTGUN, 		999);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_MICRO_UZI, 			999);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_MP5, 					999);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_AK47, 				999);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_M4, 					999);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_SNIPERRIFLE, 			999);
	}
	else
	{
		new convert_lvl = ACCOUNT_INFO[playerid][ac_LEVEL] - 10;
		new player_skill_level = floatround(convert_lvl * 99.8, floatround_floor);
		
		SetPlayerSkillLevel(playerid, WEAPONSKILL_SAWNOFF_SHOTGUN, player_skill_level);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL, player_skill_level);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL_SILENCED, player_skill_level);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_DESERT_EAGLE, player_skill_level);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_SHOTGUN, player_skill_level);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_SPAS12_SHOTGUN, player_skill_level);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_MICRO_UZI, player_skill_level);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_MP5, player_skill_level);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_AK47, player_skill_level);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_M4, player_skill_level);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_SNIPERRIFLE, player_skill_level);
	}
	return 1;
}

DeleteIlegalInv(playerid)
{
	if(!PLAYER_WORKS[playerid][WORK_POLICE])
	{
		/*new DB_Query[90];
		format(DB_Query, sizeof DB_Query, "DELETE FROM `PLAYER_WEAPONS` WHERE `ID_USER` = '%d';", ACCOUNT_INFO[playerid][ac_ID]);
		db_query(Database, DB_Query);*/
		for(new i = 0; i != 13; i ++)
		{
			if(!PLAYER_WEAPONS[playerid][i][player_weapon_DB_ID]) continue;
			new DB_Query[128];
			format(DB_Query, sizeof(DB_Query), "DELETE FROM `ITEM_EQUIPED` WHERE `ESTADO` = '%d' AND `ID` = '%d';", PLAYER_WEAPONS[playerid][i][player_weapon_AMMO], PLAYER_WEAPONS[playerid][i][player_weapon_DB_ID]);
			db_query(Database, DB_Query);
		}

		ResetPlayerWeaponsEx(playerid);
	}
	
	PLAYER_MISC[playerid][MISC_SEED_CANNABIS] = 0;
	PLAYER_MISC[playerid][MISC_SEED_CRACK] = 0;
	PLAYER_MISC[playerid][MISC_CANNABIS] = 0;
	PLAYER_MISC[playerid][MISC_CRACK] = 0;
	return 1;
}

forward HealthDown(playerid);
public HealthDown(playerid)
{
	if(CHARACTER_INFO[playerid][ch_STATE] != ROLEPLAY_STATE_CRACK) return 1;
	
	GivePlayerHealthEx(playerid, -1.0);
	
	if(GetPlayerDistanceFromPoint(playerid, PLAYER_TEMP[playerid][pt_INJURED_POS][0], PLAYER_TEMP[playerid][pt_INJURED_POS][1], PLAYER_TEMP[playerid][pt_INJURED_POS][2]) > 3.0) SetPlayerPosEx(playerid, PLAYER_TEMP[playerid][pt_INJURED_POS][0], PLAYER_TEMP[playerid][pt_INJURED_POS][1], PLAYER_TEMP[playerid][pt_INJURED_POS][2], PLAYER_TEMP[playerid][pt_INJURED_POS][3], 0, 0);
	ApplyAnimation(playerid, "SWAT", "gnstwall_injurd", 4.1, true, 0, 0, 1, 0, 1);
	
	KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][16]);
	PLAYER_TEMP[playerid][pt_TIMERS][16] = SetTimerEx("HealthDown", 8000, false, "i", playerid);
	return 1;
}

SetInjuredPlayerMarkers(playerid)
{
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(PLAYER_TEMP[i][pt_GAME_STATE] == GAME_STATE_NORMAL)
			{
				if(CHARACTER_INFO[i][ch_STATE] == ROLEPLAY_STATE_CRACK)
				{
					SetPlayerMarkerForPlayer(playerid, i, 0x4aba00FF);
				}
			}
		}
	}
	return 1;
}

SendAlertToMedics(playerid)
{
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(PLAYER_TEMP[i][pt_GAME_STATE] == GAME_STATE_NORMAL)
			{
				if(i == playerid) continue;
				if(!PLAYER_WORKS[i][WORK_MEDIC]) continue;
				if(PLAYER_TEMP[i][pt_WORKING_IN] != WORK_MEDIC) continue;
				
				SetPlayerMarkerForPlayer(i, playerid, 0x4aba00FF);
			}
		}
	}
	return 1;
}

DisablePlayerInjuredMark(playerid)
{
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(PLAYER_TEMP[i][pt_GAME_STATE] == GAME_STATE_NORMAL)
			{
				if(i == playerid) continue;
				if(!PLAYER_WORKS[i][WORK_MEDIC]) continue;
				if(PLAYER_TEMP[i][pt_WORKING_IN] != WORK_MEDIC) continue;
				
				SetPlayerMarkerForPlayer(i, playerid, PLAYER_COLOR);
			}
		}
	}
	return 1;
}

CMD:curar(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_MEDIC]) return SendClientMessage(playerid, -1, "{00FF80}No eres médico.");
	if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_MEDIC) return SendClientMessage(playerid, -1, "{00FF80}No estás de servicio como médico.");
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendClientMessage(playerid, -1, "{00FF80}No estás depie.");
	if(PLAYER_CREW[playerid][player_crew_VALID] && CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_FIGHTING]) return SendClientMessage(playerid, -1, "{00FF80}No puedes curar mientras tu banda está en combate.");
	
	new to_player;
	if(sscanf(params, "u", to_player)) return SendClientMessage(playerid, -1, "Error: {58ACFA}/curar {FFFFFF}[PlayerID/Nombre]");
	if(!IsPlayerConnected(to_player)) return SendClientMessage(playerid, -1, "{00FF80}El jugador no está conectado.");
	if(to_player == playerid) return SendClientMessage(playerid, -1, "Error: {58ACFA}/curar {FFFFFF}[PlayerID/Nombre]");
	
	new Float:pos[3];
	GetPlayerPos(to_player, pos[0], pos[1], pos[2]);
	if(!IsPlayerInRangeOfPoint(playerid, 5.0, pos[0], pos[1], pos[2])) return SendClientMessage(playerid, 0xA9F5A9AA, "Este jugador no está cerca tuya.");
	
	if(CHARACTER_INFO[to_player][ch_STATE] != ROLEPLAY_STATE_CRACK) return SendClientMessage(playerid, -1, "{00FF80}Esta persona no está herida.");
	
	KillTimer(PLAYER_TEMP[to_player][pt_TIMERS][16]);
	PLAYER_TEMP[to_player][pt_TIMERS][16] = SetTimerEx("StandUp", 5000, false, "ii", playerid, to_player);
	DisablePlayerInjuredMark(to_player);
	
	ApplyAnimation(playerid, "MEDIC", "CPR", 4.1, false, 0, 0, 0, 0, 1);
	return 1;
}

forward StandUp(medic, playerid);
public StandUp(medic, playerid)
{
	new work_extra_payment;
	if(work_info[WORK_MEDIC][work_info_EXTRA_PAY] > 0 && work_info[WORK_MEDIC][work_info_EXTRA_PAY_EXP] > 0)
	{
		work_extra_payment = (work_info[WORK_MEDIC][work_info_EXTRA_PAY] * floatround(floatdiv(PLAYER_SKILLS[medic][WORK_MEDIC], work_info[WORK_MEDIC][work_info_EXTRA_PAY_EXP])));
		if(work_info[WORK_MEDIC][work_info_EXTRA_PAY_LIMIT] != 0) if(work_extra_payment > work_info[WORK_MEDIC][work_info_EXTRA_PAY_LIMIT]) work_extra_payment = work_info[WORK_MEDIC][work_info_EXTRA_PAY_LIMIT];
	
		if(ACCOUNT_INFO[medic][ac_SU]==1) work_extra_payment += 300;
		if(ACCOUNT_INFO[medic][ac_SU]>=2) work_extra_payment += 600;
	}
	
	new money = minrand(2000, 2800) + work_extra_payment;
	GivePlayerCash(medic, money);
	PLAYER_SKILLS[medic][WORK_MEDIC] ++;
	SendClientMessageEx(medic, -1, "Has salvado la vida de esta persona, has ganado {c8f442}%s$.", number_format_thousand(money));
	
	CHARACTER_INFO[playerid][ch_STATE] = ROLEPLAY_STATE_NORMAL;
	SetWeaponsForPlayer(playerid);
	if(ACCOUNT_INFO[playerid][ac_SU]==1) 
	{
		SetPlayerHealthEx(playerid, 50.0);
	}
	else if(ACCOUNT_INFO[playerid][ac_SU]>=2) 
	{
		SetPlayerHealthEx(playerid, 100.0);
	}
	if(ACCOUNT_INFO[playerid][ac_SU]==0) 
	{
		SetPlayerHealthEx(playerid, 25.0);
	}
	ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.1, 0, 0, 0, 0, 0, true);
	ClearAnimations(playerid);
	return 1;
}
CMD:grafitisbanda(playerid,params[])
{
	if(!PLAYER_CREW[playerid][player_crew_VALID]) return SendClientMessage(playerid, -1, "{00FF80}No perteneces a ninguna banda.");
	new DBResult:Result,query[100];
    format(query,sizeof(query),"SELECT ID FROM GRAFITIS WHERE CREWID='%d' ",PLAYER_CREW[playerid][player_crew_ID]);
    Result = db_query(Database,query);
   	if(!db_num_rows(Result))
    {
        MensajesAyuda(playerid,"Tu banda no tiene grafitis capturados");
        return 1;
    }

	ShowGrafitisFromMyBanda(playerid);
	return 1;
}
CMD:banda(playerid, params[])
{
	if(!PLAYER_CREW[playerid][player_crew_VALID])
	{
		if(PLAYER_WORKS[playerid][WORK_POLICE]) return SendClientMessage(playerid, -1, "{00FF80}Los policías no pueden tener bandas.");
		
		new index = GetAvaibleCrewIndex();
		if(index == -1)
		{
			SendClientMessageEx(playerid, -1, "{00FF80}No perteneces a ninguna banda y no se puede crear una porque no hay espacio disponible, el límite de bandas es %d.", MAX_CREWS);
			return 1;
		}
		
		ShowDialog(playerid, DIALOG_CREATE_CREW);
		return 1;
	}
	
	ShowDialog(playerid, DIALOG_CREW_MENU);
	return 1;
}

CMD:abandonar(playerid, params[])
{
	if(!PLAYER_CREW[playerid][player_crew_VALID]) return SendClientMessage(playerid, -1, "{00FF80}No perteneces a ninguna banda.");
	if(!CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_PERMISSION][CREW_RANK_LEAVE_TERRITORY]) return SendClientMessage(playerid, -1, "{00FF80}No tienes permiso para abandonar territorios.");
	if(PLAYER_TEMP[playerid][pt_LAST_TERRITORY] == INVALID_STREAMER_ID) return SendClientMessage(playerid, -1, "{00FF80}No estás en un territorio de tu banda.");
	if(!IsPlayerInDynamicArea(playerid, TERRITORIES[ PLAYER_TEMP[playerid][pt_LAST_TERRITORY] ][territory_AREA])) return SendClientMessage(playerid, -1, "{00FF80}No estás en un territorio de tu banda.");
	if(TERRITORIES[ PLAYER_TEMP[playerid][pt_LAST_TERRITORY] ][territory_CREW_ID] != PLAYER_CREW[playerid][player_crew_ID]) return SendClientMessage(playerid, -1, "{00FF80}No estás en un territorio de tu banda.");			
	if(CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_FIGHTING]) return SendClientMessage(playerid, -1, "{00FF80}No puedes abandonar territorios mientras tu banda está en combate.");
	
	PLAYER_TEMP[playerid][pt_PLAYER_TERRITORY_PRO] = PLAYER_TEMP[playerid][pt_LAST_TERRITORY];
	ShowDialog(playerid, DIALOG_CREW_LEAVE_TERRITORY);
	return 1;
}

CMD:invitar(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_JAIL || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1, "{00FF80}Ahora no puedes usar este comando.");
	
	if(!PLAYER_CREW[playerid][player_crew_VALID]) return SendClientMessage(playerid, -1, "{00FF80}No eres miembro de ninguna banda.");
	if(!CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_PERMISSION][CREW_RANK_INVITE]) return SendClientMessage(playerid, -1, "{00FF80}No tienes permiso para invitar personas a la banda.");
	if(CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_FIGHTING]) return SendClientMessage(playerid, -1, "{00FF80}No puedes invitar a gente a la banda cuando la banda está en combate.");
	
	new to_player;
	if(sscanf(params, "u", to_player)) return SendClientMessage(playerid, -1, "Error: {58ACFA}/invitar {FFFFFF}[PlayerID/Nombre]");
	if(!IsPlayerConnected(to_player)) return SendClientMessage(playerid, -1, "{00FF80}El jugador está desconectado.");
	if(to_player == playerid) return SendClientMessage(playerid, -1, "{00FF80}Eres tu.");
	
	new Float:pos[3]; GetPlayerPos(to_player, pos[0], pos[1], pos[2]);
	if(!IsPlayerInRangeOfPoint(playerid, 2.0, pos[0], pos[1], pos[2])) return SendClientMessage(playerid, 0xA9F5A9AA, "Este jugador no está cerca tuya.");
	if(PLAYER_WORKS[to_player][WORK_POLICE]) return SendClientMessage(playerid, -1, "{00FF80}Esta persona es policía y no puede tener banda.");
	if(PLAYER_CREW[to_player][player_crew_VALID]) return SendClientMessage(playerid, -1, "{00FF80}Esta persona pertenece a otra banda.");
	if(PLAYER_TEMP[to_player][pt_GAME_STATE] != GAME_STATE_NORMAL) return SendClientMessage(playerid, -1, "{00FF80}No puedes invitar a este jugador ahora.");
	
	if(FACCION_PLAYER[to_player][FACION_MIEMBRO] == true) return SendClientMessage(playerid, -1, "{00FF80}No puedes invitar a este jugador porque esta en una faccion.");

	if(gettime() < PLAYER_TEMP[ to_player ][pt_LAST_GOT_CREW] + 600)
	{
		new time = 600 - (gettime() - PLAYER_TEMP[to_player][pt_LAST_GOT_CREW]);
		SendClientMessageEx(playerid, -1, "{00FF80}La otra persona debe esperar %s minutos para volver a ser invitada.", TimeConvert(time));
		return 1;
	}
	
	PLAYER_TEMP[playerid][pt_CREW_INVITE_PID] = to_player;
	PLAYER_TEMP[playerid][pt_CREW_INVITE_AID] = ACCOUNT_INFO[to_player][ac_ID];
	SendClientMessageEx(playerid, -1, "Quieres invitar a %s a la banda, elige el rango que le ofreces.", PLAYER_TEMP[to_player][pt_RP_NAME]);
	ShowDialog(playerid, DIALOG_CREW_INVITE_RANK);
	return 1;
}

// >>>>> Comandos de Policías.
CMD:darcargos(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_JAIL || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, 0xFFA97FFF, "Ahora no puedes usar este comando.");
	
	if(!PLAYER_WORKS[playerid][WORK_POLICE]) return SendClientMessage(playerid, 0xFFA97FFF, "Debes ser miembro de la policía para usar este comando.");
	if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_POLICE) SendClientMessage(playerid, 0xFFA97FFF, "Debes estar en servicio como policia.");
	new to_player, sd;
	if(sscanf(params, "ud", to_player, sd)) return SendClientMessage(playerid, -1, "Syntax: /darcargo <player_id> <cargos>");
	if(!IsPlayerConnected(to_player)) return SendClientMessageEx(playerid, -1, "Jugador (%d) desconectado", to_player);
	if(ACCOUNT_INFO[to_player][ac_CARGOS] >= 6) return SendClientMessage(playerid,-1,"No se pueden dar mas cargos ya tiene 6");
	ACCOUNT_INFO[to_player][ac_CARGOS] += sd;
	Update_Cargos(playerid);
 	SendClientMessageEx(playerid,-1,"Cargo's dado's a %s, cantidad: %d | Tiene : %d",PLAYER_TEMP[to_player][pt_NAME],sd, ACCOUNT_INFO[to_player][ac_CARGOS]);
	return 1;
}
CMD:quitarcargos(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_JAIL || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, 0xFFA97FFF, "Ahora no puedes usar este comando.");
	
	if(!PLAYER_WORKS[playerid][WORK_POLICE]) return SendClientMessage(playerid, 0xFFA97FFF, "Debes ser miembro de la policía para usar este comando.");
	if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_POLICE) SendClientMessage(playerid, 0xFFA97FFF, "Debes estar en servicio como policia.");
	new to_player, sd;
	if(sscanf(params, "ud", to_player, sd)) return SendClientMessage(playerid, -1, "Syntax: /quitarcargos <player_id> <cargos>");
	if(!IsPlayerConnected(to_player)) return SendClientMessageEx(playerid, -1, "Jugador (%d) desconectado", to_player);
	if(ACCOUNT_INFO[to_player][ac_CARGOS] == 0) return SendClientMessage(playerid,-1,"No se pueden quitar mas cargos, no tiene ninguno");
	ACCOUNT_INFO[to_player][ac_CARGOS] -= sd;
	if(ACCOUNT_INFO[to_player][ac_CARGOS] < 0) ACCOUNT_INFO[to_player][ac_CARGOS] =0;
	Update_Cargos(playerid);
 	SendClientMessageEx(playerid,-1,"Cargo's quitados's a %s, cantidad: %d | Tiene : %d",PLAYER_TEMP[to_player][pt_NAME],sd, ACCOUNT_INFO[to_player][ac_CARGOS]);
	return 1;
}

CMD:reclutar(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_JAIL || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, 0xFFA97FFF, "Ahora no puedes usar este comando.");
	
	if(!PLAYER_WORKS[playerid][WORK_POLICE]) return SendClientMessage(playerid, 0xFFA97FFF, "Debes ser miembro de la policía para usar este comando.");
	if(PLAYER_SKILLS[playerid][WORK_POLICE] < 11) return SendClientMessageEx(playerid, 0xFFA97FFF, "Debes ser al menos rango %s para reclutar gente.", POLICE_RANKS[11]);
	
	new to_player;
	if(sscanf(params, "u", to_player)) return SendClientMessage(playerid, -1, "Syntax: /reclutar [PlayerID/Nombre]");
	if(!IsPlayerConnected(to_player)) return SendClientMessage(playerid, 0xFFA97FFF, "El jugador está desconectado.");
	if(to_player == playerid) return 1;
	
	new Float:pos[3]; GetPlayerPos(to_player, pos[0], pos[1], pos[2]);
	if(!IsPlayerInRangeOfPoint(playerid, 2.0, pos[0], pos[1], pos[2])) return SendClientMessage(playerid, 0xFFA97FFF, "Este jugador no está cerca tuya.");
	if(PLAYER_CREW[to_player][player_crew_VALID]) return SendClientMessage(playerid,0xFFA97FFF, "Esta persona pertenece a una banda y no puede ser policía.");
	if(PLAYER_WORKS[to_player][WORK_POLICE]) return SendClientMessage(playerid, 0xFFA97FFF, "Éste usuario es miembro.");
	if(PLAYER_TEMP[to_player][pt_GAME_STATE] != GAME_STATE_NORMAL) return SendClientMessage(playerid, 0xFFA97FFF, "No puedes reclutar a este jugador ahora.");
	
	new player_jobs = CountPlayerJobs(to_player);
	if(ACCOUNT_INFO[to_player][ac_SU])
	{
		if(player_jobs >= MAX_SU_WORKS)
		{
			SendClientMessage(playerid, 0xFFA97FFF, "Esta persona ya tiene trabajo y no puede tener más.");
			return 1;
		}
	}
	else
	{
		if(player_jobs >= MAX_NU_WORKS)
		{
			SendClientMessage(playerid, 0xFFA97FFF, "Esta persona ya tiene trabajo y no puede tener más.");
			return 1;
		}
	}
	
	if(PLAYER_TEMP[to_player][pt_WORKING_IN]) return SendClientMessage(playerid, 0xFFA97FFF, "Esta persona no puede unirse porque esta de servicio en su trabajo.");
	
	PLAYER_WORKS[to_player][WORK_POLICE] = true;
	PLAYER_SKILLS[to_player][WORK_POLICE] = 1;
	SavePlayerWorks(to_player);
	SavePlayerSkills(to_player);
	
	new DBResult:Result_pnumber, phone_number;
	Result_pnumber = db_query(Database, "SELECT ABS(RANDOM() % 10000000) AS `NUM` WHERE `NUM` NOT IN (SELECT `EXTRA` FROM `PLAYER_MISC` WHERE `ID` = '14') LIMIT 1;");
	if(db_num_rows(Result_pnumber)) phone_number = db_get_field_int(Result_pnumber, 0);
	db_free_result(Result_pnumber);
	PLAYER_MISC[to_player][MISC_PLACA_PD] = phone_number;
	SavePlayerMisc(to_player);
	
	SendClientMessageEx(playerid, -1, "%s ahora es policía.", PLAYER_TEMP[to_player][pt_RP_NAME]);
	SendClientMessage(to_player, -1, "Ahora eres policía.");
	return 1;
}



GetAvaibleCrewIndex()
{
	for(new i = 0; i != MAX_CREWS; i ++)
	{
		if(!CREW_INFO[i][crew_VALID]) return i;
	}
	return -1;
}


NewCrewRegister(index)
{
	if(!CREW_INFO[index][crew_VALID]) return 0;
	
	new DBResult:Result, DB_Query[340];
	format(DB_Query, sizeof DB_Query,
	"\
		INSERT INTO `CREW`\
		(\
			`NAME`, `COLOR`\
		)\
		VALUES\
		(\
			'%q', '%d'\
		);\
		SELECT MAX(`ID`) FROM `CREW`;\
	",
		CREW_INFO[index][crew_NAME],
		CREW_INFO[index][crew_COLOR]
	);
	Result = db_query(Database, DB_Query);
	if(db_num_rows(Result)) CREW_INFO[index][crew_ID] = db_get_field_int(Result, 0);
	db_free_result(Result);
	
	
	
	for(new i = 0; i != MAX_CREW_RANKS; i ++)
	{
		if(!CREW_RANK_INFO[index][i][crew_rank_VALID]) continue;
		
		new DBResult:Result_ranks;
		format(DB_Query, sizeof DB_Query,
		"\
			INSERT INTO `CREW_RANKS`\
			(\
				`ID_CREW`, `RANK_POS`, `RANK_NAME`\
			)\
			VALUES\
			(\
				'%d', '%d', '%q'\
			);\
			SELECT MAX(`ID`) FROM `CREW_RANKS`;\
		",
			CREW_INFO[index][crew_ID],
			i,
			CREW_RANK_INFO[index][i][crew_rank_NAME]
		);
		Result_ranks = db_query(Database, DB_Query);

		if(db_num_rows(Result_ranks)) CREW_RANK_INFO[index][i][crew_rank_ID] = db_get_field_int(Result_ranks, 0);
		db_free_result(Result_ranks);
		
		for(new x = 0; x != CREW_RANK_SIZE; x ++)
		{
			format(DB_Query, sizeof DB_Query,
			"\
				INSERT INTO `RANK_PERMISSIONS`\
				(\
					`ID_RANK`, `PERMISSION`, `SET`\
				)\
				VALUES\
				(\
					'%d', '%d', '%d'\
				);\
			",
				CREW_RANK_INFO[index][i][crew_rank_ID],
				x,
				CREW_RANK_INFO[index][i][crew_rank_PERMISSION][x]
			);
			db_query(Database, DB_Query);
		}
		
	}
	return 1;
}

SendMessageToCrewMembers(crew_id, color, message[])
{
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(PLAYER_CREW[i][player_crew_VALID])
			{
				if(PLAYER_CREW[i][player_crew_ID] == crew_id)
				{
					SendClientMessage(i, color, message);
				}
			}
		}
	}
	return 1;
}

RegisterNewCrewRank(index, rank)
{
	new DBResult:Result_ranks, DB_Query[340];
	format(DB_Query, sizeof DB_Query,
	"\
		INSERT INTO `CREW_RANKS`\
		(\
			`ID_CREW`, `RANK_POS`, `RANK_NAME`\
		)\
		VALUES\
		(\
			'%d', '%d', '%q'\
		);\
		SELECT MAX(`ID`) FROM `CREW_RANKS`;\
	",
		CREW_INFO[index][crew_ID],
		rank,
		CREW_RANK_INFO[index][rank][crew_rank_NAME]
	);
	Result_ranks = db_query(Database, DB_Query);

	if(db_num_rows(Result_ranks)) CREW_RANK_INFO[index][rank][crew_rank_ID] = db_get_field_int(Result_ranks, 0);
	db_free_result(Result_ranks);
	
	for(new x = 0; x != CREW_RANK_SIZE; x ++)
	{
		format(DB_Query, sizeof DB_Query,
		"\
			INSERT INTO `RANK_PERMISSIONS`\
			(\
				`ID_RANK`, `PERMISSION`, `SET`\
			)\
			VALUES\
			(\
				'%d', '%d', '%d'\
			);\
		",
			CREW_RANK_INFO[index][rank][crew_rank_ID],
			x,
			CREW_RANK_INFO[index][rank][crew_rank_PERMISSION][x]
		);
		db_query(Database, DB_Query);
	}
	return 1;
}

SetPlayerGangZones(playerid)
{
	for(new i = 0; i != MAX_TERRITORIES; i ++)
	{
		if(!TERRITORIES[i][territory_VALID]) continue;
		
		if(TERRITORIES[i][territory_WAR])
		{
			new flash_color, r, g, b, a;
			HexToRGBA(CREW_INFO[ TERRITORIES[i][territory_ATTACKER_CREW_INDEX] ][crew_COLOR], r, g, b, a);
			flash_color = RGBAToHex(r, g, b, 135);
			
			GangZoneFlashForPlayer(playerid, TERRITORIES[i][territory_GANG_ZONE], flash_color);
		}
		else GangZoneShowForPlayer(playerid, TERRITORIES[i][territory_GANG_ZONE], TERRITORIES[i][territory_COLOR]);
	}
	return 1;
}

HidePlayerGangZones(playerid)
{
	for(new i = 0; i != MAX_TERRITORIES; i ++)
	{
		if(!TERRITORIES[i][territory_VALID]) continue;
		
		GangZoneHideForPlayer(playerid, TERRITORIES[i][territory_GANG_ZONE]);
	}
	return 1;
}

stock HexToRGBA(colour, &r, &g, &b, &a) //By Betamaster
{
    r = (colour >> 24) & 0xFF;
    g = (colour >> 16) & 0xFF;
    b = (colour >> 8) & 0xFF;
    a = colour & 0xFF;
}

stock RGBAToHex(r, g, b, a) //By Betamaster
{
    return (r<<24 | g<<16 | b<<8 | a);
}

stock RGBAToARGB(col)
{
	return ((((col) << 24) & 0xFF000000) | (((col) >>> 8) & 0xFFFFFF));
}

stock ARGBToRGBA(col)
{
	return ((((col) << 8) & 0xFFFFFF00) | (((col) >>> 24) & 0xFF));
}

UpdateGangZoneColor(index)
{
	if(TERRITORIES[index][territory_WAR])
	{
		new flash_color, r, g, b, a;
		HexToRGBA(CREW_INFO[ TERRITORIES[index][territory_ATTACKER_CREW_INDEX] ][crew_COLOR], r, g, b, a);
		flash_color = RGBAToHex(r, g, b, 135);
		
		for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
		{
			if(IsPlayerConnected(i))
			{
				if(PLAYER_CREW[i][player_crew_VALID])
				{
					GangZoneFlashForPlayer(i, TERRITORIES[index][territory_GANG_ZONE], flash_color);
				}
			}
		}
	}
	else
	{
		for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
		{
			if(IsPlayerConnected(i))
			{
				if(PLAYER_CREW[i][player_crew_VALID])
				{
					GangZoneShowForPlayer(i, TERRITORIES[index][territory_GANG_ZONE], TERRITORIES[index][territory_COLOR]);
				}
			}
		}
	}
	return 1;
}
forward UpdateTerritoryAttack(territory_index);
public UpdateTerritoryAttack(territory_index)
{
	if(!TERRITORIES[territory_index][territory_VALID]) return 1;
	if(!TERRITORIES[territory_index][territory_WAR]) return 1;
	
	if(TERRITORIES[territory_index][territory_WAR_TIME_LEFT] <= 0)
	{
		new old_crew = TERRITORIES[territory_index][territory_CREW_ID];
		
		CREW_INFO[ TERRITORIES[territory_index][territory_CREW_INDEX] ][crew_FIGHTING] = false;
		TERRITORIES[territory_index][territory_CREW_ID] = CREW_INFO[ TERRITORIES[territory_index][territory_ATTACKER_CREW_INDEX] ][crew_ID];
		TERRITORIES[territory_index][territory_CREW_INDEX] = TERRITORIES[territory_index][territory_ATTACKER_CREW_INDEX];
		
		new r, g, b, a;
		HexToRGBA(CREW_INFO[ TERRITORIES[territory_index][territory_ATTACKER_CREW_INDEX] ][crew_COLOR], r, g, b, a);
		TERRITORIES[territory_index][territory_COLOR] = RGBAToHex(r, g, b, 135);
		
		new message[145];
		format(message, sizeof message, "{f4e242}[BANDAS] {FFFFFF}La banda '%s' ha conquistado un nuevo territorio.", CREW_INFO[ TERRITORIES[territory_index][territory_ATTACKER_CREW_INDEX] ][crew_NAME]);
	
		new DB_Query[256], label_str[256];
		if(TERRITORIES[territory_index][territory_OCCUPIED])
		{
			for(new i = 0; i != MAX_PROPERTIES; i ++)
			{
				if(!PROPERTY_INFO[i][property_VALID]) continue;
				if(!PROPERTY_INFO[i][property_CREW]) continue;
				if(PROPERTY_INFO[i][property_CREW_ID] != old_crew) continue;
				
				if(IsPointInDynamicArea(TERRITORIES[territory_index][territory_AREA], PROPERTY_INFO[i][property_EXT_X], PROPERTY_INFO[i][property_EXT_Y], PROPERTY_INFO[i][property_EXT_Z]))
				{
					PROPERTY_INFO[i][property_CREW_ID] = TERRITORIES[territory_index][territory_CREW_ID];
					
					format
					(
						label_str, 
						sizeof label_str, 
						"\
							Propiedad {58ACFA}#%d\n\n\
							{FFFFFF}Banda: {58ACFA}%s\n\
							{FFFFFF}Presiona la tecla{58ACFA}'Y' {FFFFFF}para entrar.\
						", PROPERTY_INFO[i][property_ID], CREW_INFO[ TERRITORIES[territory_index][territory_CREW_INDEX] ][crew_NAME]
					);
					
					UpdateDynamic3DTextLabelText(PROPERTY_INFO[i][property_EXT_LABEL_ID], 0xFFFFFFFF, label_str);
				}
			}
			
			format(DB_Query, sizeof DB_Query, "UPDATE `CREW_TERRITORIES` SET `ID_CREW` = '%d' WHERE `ID_TERRITORY` = '%d';", CREW_INFO[ TERRITORIES[territory_index][territory_ATTACKER_CREW_INDEX] ][crew_ID], TERRITORIES[territory_index][territory_ID]);
		}
		else format(DB_Query, sizeof DB_Query, "INSERT INTO `CREW_TERRITORIES` (`ID_CREW`, `ID_TERRITORY`) VALUES ('%d', '%d');", CREW_INFO[ TERRITORIES[territory_index][territory_ATTACKER_CREW_INDEX] ][crew_ID], TERRITORIES[territory_index][territory_ID]);
		db_query(Database, DB_Query);
		
		CREW_INFO[ TERRITORIES[territory_index][territory_ATTACKER_CREW_INDEX] ][crew_LAST_ATTACK] = gettime();
		CREW_INFO[ TERRITORIES[territory_index][territory_ATTACKER_CREW_INDEX] ][crew_FIGHTING] = false;
		TERRITORIES[territory_index][territory_WAR] = false;
		TERRITORIES[territory_index][territory_ATTACKER_CREW_INDEX] = 0;
		TERRITORIES[territory_index][territory_WAR_TIME_LEFT] = 0;
		TERRITORIES[territory_index][territory_LAST_ATTACK] = gettime();
		KillTimer(TERRITORIES[territory_index][territory_TIMER]);
		UpdateGangZoneColor(territory_index);
		TERRITORIES[territory_index][territory_OCCUPIED] = true;
		
		new prize = minrand(300, 600);
		new prize_message[64];
		format(prize_message, sizeof prize_message, "{E6F8E0}Has ganado %d$ por conquistar este territorio.", prize);
		
		for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
		{
			if(IsPlayerConnected(i))
			{
				if(PLAYER_CREW[i][player_crew_VALID])
				{
					SendClientMessage(i, -1, message);
					if(IsPlayerInDynamicArea(i, TERRITORIES[territory_index][territory_AREA]))
					{
						if(PLAYER_CREW[i][player_crew_ID] == TERRITORIES[territory_index][territory_CREW_ID])
						{
							GivePlayerCash(i, prize);
							SendClientMessage(i, -1, prize_message);
						}
						SetPlayerNormalColor(i);
						
						TextDrawHideForPlayer(i, Textdraws[textdraw_TERRITORY_BOX]);
						TextDrawHideForPlayer(i, TERRITORIES[territory_index][territory_TEXTDRAW]);
					}
				}
			}
		}
		return 1;
	}
	
	
	TERRITORIES[territory_index][territory_WAR_TIME_LEFT] --;
	new message[145];
	format(message, sizeof message, "Conquista:_%s", TimeConvert(TERRITORIES[territory_index][territory_WAR_TIME_LEFT]));
	TextDrawSetString(TERRITORIES[territory_index][territory_TEXTDRAW], message);
	
	
	new attackers_in_area = CountCrewPlayersInTerritory(TERRITORIES[territory_index][territory_ATTACKER_CREW_INDEX], territory_index);
	if(attackers_in_area <= 0)
	{
		format(message, sizeof message, "{f4e242}[BANDAS] {FFFFFF}La banda '%s' no ha podido conquistar el territorio que estaba atacando.", CREW_INFO[ TERRITORIES[territory_index][territory_ATTACKER_CREW_INDEX] ][crew_NAME]);

		CREW_INFO[ TERRITORIES[territory_index][territory_ATTACKER_CREW_INDEX] ][crew_LAST_ATTACK] = gettime();
		CREW_INFO[ TERRITORIES[territory_index][territory_ATTACKER_CREW_INDEX] ][crew_FIGHTING] = false;
		CREW_INFO[ TERRITORIES[territory_index][territory_CREW_INDEX] ][crew_FIGHTING] = false;
		TERRITORIES[territory_index][territory_WAR] = false;
		TERRITORIES[territory_index][territory_ATTACKER_CREW_INDEX] = 0;
		TERRITORIES[territory_index][territory_WAR_TIME_LEFT] = 0;
		TERRITORIES[territory_index][territory_LAST_ATTACK] = gettime();
		KillTimer(TERRITORIES[territory_index][territory_TIMER]);
		UpdateGangZoneColor(territory_index);

		for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
		{
			if(IsPlayerConnected(i))
			{
				if(PLAYER_CREW[i][player_crew_VALID])
				{
					SendClientMessage(i, -1, message);
					if(IsPlayerInDynamicArea(i, TERRITORIES[territory_index][territory_AREA]))
					{
						SetPlayerNormalColor(i);
						
						TextDrawHideForPlayer(i, Textdraws[textdraw_TERRITORY_BOX]);
						TextDrawHideForPlayer(i, TERRITORIES[territory_index][territory_TEXTDRAW]);
					}
				}
			}
		}
		return 1;
	}
	
	KillTimer(TERRITORIES[territory_index][territory_TIMER]);
	TERRITORIES[territory_index][territory_TIMER] = SetTimerEx("UpdateTerritoryAttack", 1000, false, "i", territory_index);
	return 1;
}

CountCrewPlayersInTerritory(crew_index, territory_index)
{
	new count;
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(PLAYER_CREW[i][player_crew_VALID])
			{
				if(PLAYER_CREW[i][player_crew_INDEX] == crew_index)
				{
					if(CHARACTER_INFO[i][ch_STATE] == ROLEPLAY_STATE_NORMAL && PLAYER_TEMP[i][pt_GAME_STATE] == GAME_STATE_NORMAL)
					{
						if(IsPlayerInDynamicArea(i, TERRITORIES[territory_index][territory_AREA]))
						{
							count ++;
						}
					}
				}
			}
		}
	}
	return count;
}

SetPlayerColorEx(playerid, color)
{
	PLAYER_TEMP[playerid][pt_PLAYER_COLOR] = color;
	return SetPlayerColor(playerid, color);
}
	
LoadServerInfo()
{
	new File:ECO = fopen("SERVER/ECO.txt", io_read), eco_str[256];
	if(ECO)
	{
		fread(ECO, eco_str);
		sscanf(eco_str, "p<,>fffffd", MULTIPLIER_PROPERITES, MULTIPLIER_VEHICLES, MULTIPLIER_TOYS, MULTIPLIER_SKINS, MULTIPLIER_WEAPONS, SU_SD_PRICE);
		fclose(ECO);
	}
	
	
	new File:AC = fopen("SERVER/AC.txt", io_read), ac_str[128], ac_num;
	if(AC)
	{
		while(fread(AC, ac_str))
		{
			if(ac_num >= sizeof(ac_Info)) break;
			sscanf(ac_str, "p<,>bbdd", ac_Info[ac_num][ac_Enabled], ac_Info[ac_num][ac_Kick], ac_Info[ac_num][ac_Detections], ac_Info[ac_num][ac_Interval]);
			ac_num ++;
		}
		fclose(AC);
	}
	return 1;
}

WriteAnticheatRules()
{
	new File:AC = fopen("SERVER/AC.txt", io_write), ac_str[128];
	if(AC)
	{
		for(new i = 0; i != sizeof(ac_Info); i ++)
		{
			format(ac_str, sizeof ac_str, "%d,%d,%d,%d\r\n", ac_Info[i][ac_Enabled], ac_Info[i][ac_Kick], ac_Info[i][ac_Detections], ac_Info[i][ac_Interval]);
			fwrite(AC, ac_str);
		}
		fclose(AC);
	}
	return 1;
}

WriteEconomyMultipliers()
{
	new File:ECO = fopen("SERVER/ECO.txt", io_write), eco_str[256];
	if(ECO)
	{
		format(eco_str, sizeof eco_str, "%f,%f,%f,%f,%f,%d", MULTIPLIER_PROPERITES, MULTIPLIER_VEHICLES, MULTIPLIER_TOYS, MULTIPLIER_SKINS, MULTIPLIER_WEAPONS, SU_SD_PRICE);
		fwrite(ECO, eco_str);
		fclose(ECO);
	}
	return 1;
}

UpdateEconomy(type = -1)
{
	new label_str[356+1];
	
	if(type == -1)
	{
		for(new i = 0; i != MAX_PROPERTIES; i ++)
		{
			if(!PROPERTY_INFO[i][property_VALID]) continue;
			PROPERTY_INFO[i][property_PRICE] = floatround(PROPERTY_INFO[i][property_PRICE_BASE] * MULTIPLIER_PROPERITES, floatround_ceil);
			
			if(!PROPERTY_INFO[i][property_SOLD])
			{
				UpdateUnnocupiedPropertyLabel(i);
			}
		}
		
		for(new i = 0; i != MAX_VEHICLES; i ++)
		{
			if(!SELL_VEHICLES[i][sell_vehicle_VALID]) continue;
			//SELL_VEHICLES[i][sell_vehicle_PRICE] = floatround(VEHICLE_INFO[ GLOBAL_VEHICLES[i][gb_vehicle_MODELID] - 400 ][vehicle_info_PRICE] * MULTIPLIER_VEHICLES, floatround_ceil);		
		
			if(SELL_VEHICLES[i][sell_vehicle_VIP_LEVEL]) SELL_VEHICLES[i][sell_vehicle_LEVEL] = 1;
			if(SELL_VEHICLES[i][sell_vehicle_EXTRA]) SELL_VEHICLES[i][sell_vehicle_PRICE] = 0;
			
			if(SELL_VEHICLES[i][sell_vehicle_VIP_LEVEL])
			{
				if(SELL_VEHICLES[i][sell_vehicle_EXTRA])
				{
					format
					(
						label_str, 
							sizeof label_str, 
							"\
								{F4DC42}Membresía VIP%d\n\
								\n\
								{58ACFA}%s\n\n\
								{FFFFFF}Coste: {58ACFA}%d "SERVER_COIN"\n\
								{FFFFFF}Nivel: {58ACFA}%d\n\
								{FFFFFF}Velocidad máxima: {58ACFA}%d {FFFFFF}Km/H \n\
								{FFFFFF}Capacidad de gas: {58ACFA} %.1f {FFFFFF}Litros\n\
								{FFFFFF}Espacio maletero: {58ACFA}%d\n\
								{FFFFFF}Seguro: {58ACFA}%s\n\
							", SELL_VEHICLES[i][sell_vehicle_VIP_LEVEL], 
							VEHICLE_INFO[GLOBAL_VEHICLES[i][gb_vehicle_MODELID] - 400][vehicle_info_NAME],
						 	SELL_VEHICLES[i][sell_vehicle_EXTRA], 
						 	SELL_VEHICLES[i][sell_vehicle_LEVEL],
						 	floatround(VEHICLE_INFO[ GLOBAL_VEHICLES[ i ][gb_vehicle_MODELID] - 400 ][vehicle_info_MAX_VEL]),
							VEHICLE_INFO[ GLOBAL_VEHICLES[ i ][gb_vehicle_MODELID] - 400 ][vehicle_info_MAX_GAS],
							VEHICLE_INFO[ GLOBAL_VEHICLES[ i ][gb_vehicle_MODELID] - 400 ][vehicle_info_BOOT_SLOTS],
							number_format_thousand(VEHICLE_INFO[GLOBAL_VEHICLES[ i ][gb_vehicle_MODELID] - 400][vehicle_info_PRICE] / 5000)
					);
				}
				else
				{
					format
					(
						label_str, 
							sizeof label_str, 
							"\
								{F4DC42}Membresía VIP%d\n\
								\n\
								{58ACFA}%s\n\n\
								{FFFFFF}Precio: {58ACFA}%s$\n\
								{FFFFFF}Nivel: {58ACFA}%d\n\
								{FFFFFF}Velocidad máxima: {58ACFA}%d {FFFFFF}Km/H \n\
								{FFFFFF}Capacidad de gas: {58ACFA} %.1f {FFFFFF}Litros\n\
								{FFFFFF}Espacio maletero: {58ACFA}%d\n\
								{FFFFFF}Seguro: {58ACFA}%s\n\
							", SELL_VEHICLES[i][sell_vehicle_VIP_LEVEL], 
							VEHICLE_INFO[GLOBAL_VEHICLES[i][gb_vehicle_MODELID] - 400][vehicle_info_NAME], 
							number_format_thousand(SELL_VEHICLES[i][sell_vehicle_PRICE]), 
							SELL_VEHICLES[i][sell_vehicle_LEVEL],
							floatround(VEHICLE_INFO[ GLOBAL_VEHICLES[ i ][gb_vehicle_MODELID] - 400 ][vehicle_info_MAX_VEL]),
							VEHICLE_INFO[ GLOBAL_VEHICLES[ i ][gb_vehicle_MODELID] - 400 ][vehicle_info_MAX_GAS],
							VEHICLE_INFO[ GLOBAL_VEHICLES[ i ][gb_vehicle_MODELID] - 400 ][vehicle_info_BOOT_SLOTS],
							number_format_thousand(VEHICLE_INFO[GLOBAL_VEHICLES[ i ][gb_vehicle_MODELID] - 400][vehicle_info_PRICE] / 5000)

					);
				}
			}
			else
			{
				if(SELL_VEHICLES[i][sell_vehicle_EXTRA])
				{
					format
					(
						label_str, 
							sizeof label_str, 
							"\
								{58ACFA}%s\n\n\
								{FFFFFF}Coste: {58ACFA}%d "SERVER_COIN"\n\
								{FFFFFF}Nivel: {58ACFA}%d\n\
								{FFFFFF}Velocidad máxima: {58ACFA}%d {FFFFFF}Km/H \n\
								{FFFFFF}Capacidad de gas: {58ACFA} %.1f {FFFFFF}Litros\n\
								{FFFFFF}Espacio maletero: {58ACFA}%d\n\
								{FFFFFF}Seguro: {58ACFA}%s\n\
							", VEHICLE_INFO[GLOBAL_VEHICLES[i][gb_vehicle_MODELID] - 400][vehicle_info_NAME],
							SELL_VEHICLES[i][sell_vehicle_EXTRA],
							SELL_VEHICLES[i][sell_vehicle_LEVEL],
							floatround(VEHICLE_INFO[ GLOBAL_VEHICLES[ i ][gb_vehicle_MODELID] - 400 ][vehicle_info_MAX_VEL]),
							VEHICLE_INFO[ GLOBAL_VEHICLES[ i ][gb_vehicle_MODELID] - 400 ][vehicle_info_MAX_GAS],
							VEHICLE_INFO[ GLOBAL_VEHICLES[ i ][gb_vehicle_MODELID] - 400 ][vehicle_info_BOOT_SLOTS],
							number_format_thousand(VEHICLE_INFO[GLOBAL_VEHICLES[ i ][gb_vehicle_MODELID] - 400][vehicle_info_PRICE] / 5000)
					);
				}
				else
				{
					format
					(
						label_str, 
							sizeof label_str, 
							"\
								{58ACFA}%s\n\n\
								{FFFFFF}Precio: {58ACFA}%s$\n\
								{FFFFFF}Nivel: {58ACFA}%d\n\
								{FFFFFF}Velocidad máxima: {58ACFA}%d {FFFFFF}Km/H \n\
								{FFFFFF}Capacidad de gas: {58ACFA} %.1f {FFFFFF}Litros\n\
								{FFFFFF}Espacio maletero: {58ACFA}%d\n\
								{FFFFFF}Seguro: {58ACFA}%s\n\
							", VEHICLE_INFO[GLOBAL_VEHICLES[i][gb_vehicle_MODELID] - 400][vehicle_info_NAME],
							number_format_thousand(SELL_VEHICLES[i][sell_vehicle_PRICE]),
							SELL_VEHICLES[i][sell_vehicle_LEVEL],
							floatround(VEHICLE_INFO[ GLOBAL_VEHICLES[ i ][gb_vehicle_MODELID] - 400 ][vehicle_info_MAX_VEL]),
							VEHICLE_INFO[ GLOBAL_VEHICLES[ i ][gb_vehicle_MODELID] - 400 ][vehicle_info_MAX_GAS],
							VEHICLE_INFO[ GLOBAL_VEHICLES[ i ][gb_vehicle_MODELID] - 400 ][vehicle_info_BOOT_SLOTS],
							number_format_thousand(VEHICLE_INFO[GLOBAL_VEHICLES[ i ][gb_vehicle_MODELID] - 400][vehicle_info_PRICE] / 5000)
					);
				}
			}
			UpdateDynamic3DTextLabelText(SELL_VEHICLES[i][sell_vehicle_LABEL_ID], 0xFFFFFFFF, label_str);
		}
		
		for(new i = 0; i != sizeof(Toys_Shop); i ++) Toys_Shop[i][shop_toy_price] = floatround(Toys_Shop[i][shop_toy_price_base] * MULTIPLIER_TOYS, floatround_ceil);		
		for(new i = 0; i != sizeof(Binco_Shop_Male_Skins); i ++) Binco_Shop_Male_Skins[i][2] = floatround(Binco_Shop_Male_Skins[i][1] * MULTIPLIER_SKINS, floatround_ceil);
		for(new i = 0; i != sizeof(Binco_Shop_Female_Skins); i ++) Binco_Shop_Female_Skins[i][2] = floatround(Binco_Shop_Female_Skins[i][1] * MULTIPLIER_SKINS, floatround_ceil);
		for(new i = 0; i != sizeof(Suburban_Shop_Male_Skins); i ++) Suburban_Shop_Male_Skins[i][2] = floatround(Suburban_Shop_Male_Skins[i][1] * MULTIPLIER_SKINS, floatround_ceil);
		for(new i = 0; i != sizeof(Suburban_Shop_Female_Skins); i ++) Suburban_Shop_Female_Skins[i][2] = floatround(Suburban_Shop_Female_Skins[i][1] * MULTIPLIER_SKINS, floatround_ceil);
		for(new i = 0; i != sizeof(Prolaps_Shop_Male_Skins); i ++) Prolaps_Shop_Male_Skins[i][2] = floatround(Prolaps_Shop_Male_Skins[i][1] * MULTIPLIER_SKINS, floatround_ceil);
		for(new i = 0; i != sizeof(Prolaps_Shop_Female_Skins); i ++) Prolaps_Shop_Female_Skins[i][2] = floatround(Prolaps_Shop_Female_Skins[i][1] * MULTIPLIER_SKINS, floatround_ceil);
		for(new i = 0; i != sizeof(Didier_Shop_Male_Skins); i ++) Didier_Shop_Male_Skins[i][2] = floatround(Didier_Shop_Male_Skins[i][1] * MULTIPLIER_SKINS, floatround_ceil);
		for(new i = 0; i != sizeof(Didier_Shop_Female_Skins); i ++) Didier_Shop_Female_Skins[i][2] = floatround(Didier_Shop_Female_Skins[i][1] * MULTIPLIER_SKINS, floatround_ceil);
		for(new i = 0; i != sizeof(Victim_Shop_Male_Skins); i ++) Victim_Shop_Male_Skins[i][2] = floatround(Victim_Shop_Male_Skins[i][1] * MULTIPLIER_SKINS, floatround_ceil);
		for(new i = 0; i != sizeof(Victim_Shop_Female_Skins); i ++) Victim_Shop_Female_Skins[i][2] = floatround(Victim_Shop_Female_Skins[i][1] * MULTIPLIER_SKINS, floatround_ceil);
		for(new i = 0; i != sizeof(Zip_Shop_Male_Skins); i ++) Zip_Shop_Male_Skins[i][2] = floatround(Zip_Shop_Male_Skins[i][1] * MULTIPLIER_SKINS, floatround_ceil);
		for(new i = 0; i != sizeof(Zip_Shop_Female_Skins); i ++) Zip_Shop_Female_Skins[i][2] = floatround(Zip_Shop_Female_Skins[i][1] * MULTIPLIER_SKINS, floatround_ceil);
		
		for(new i = 0; i != sizeof(BLACK_MARKT_WEAPONS); i ++) BLACK_MARKT_WEAPONS[i][black_market_WEAPON_PRICE] = floatround(BLACK_MARKT_WEAPONS[i][black_market_WEAPON_PRICE_BASE] * MULTIPLIER_WEAPONS, floatround_ceil);
	}
	else
	{
		switch(type)
		{
			case 0:
			{
				for(new i = 0; i != MAX_PROPERTIES; i ++)
				{
					if(!PROPERTY_INFO[i][property_VALID]) continue;
					PROPERTY_INFO[i][property_PRICE] = floatround(PROPERTY_INFO[i][property_PRICE_BASE] * MULTIPLIER_PROPERITES, floatround_ceil);
					
					if(!PROPERTY_INFO[i][property_SOLD])
					{
						UpdateUnnocupiedPropertyLabel(i);
					}
				}
			}
			case 1:
			{
				for(new i = 0; i != MAX_VEHICLES; i ++)
				{
					if(!SELL_VEHICLES[i][sell_vehicle_VALID]) continue;
					SELL_VEHICLES[i][sell_vehicle_PRICE] = floatround(VEHICLE_INFO[ GLOBAL_VEHICLES[i][gb_vehicle_MODELID] - 400 ][vehicle_info_PRICE] * MULTIPLIER_VEHICLES, floatround_ceil);		
					
					if(SELL_VEHICLES[i][sell_vehicle_VIP_LEVEL]) SELL_VEHICLES[i][sell_vehicle_LEVEL] = 1;
					if(SELL_VEHICLES[i][sell_vehicle_EXTRA]) SELL_VEHICLES[i][sell_vehicle_PRICE] = 0;
					
					if(SELL_VEHICLES[i][sell_vehicle_VIP_LEVEL])
					{
						if(SELL_VEHICLES[i][sell_vehicle_EXTRA])
						{
							format
							(
								label_str, 
									sizeof label_str, 
									"\
										{F4DC42}Membresía VIP%d requerida\n\
										\n\
										{58ACFA}%s\n\n\
										{FFFFFF}Coste: {58ACFA}%d "SERVER_COIN"\n\
										{FFFFFF}Nivel: {58ACFA}%d\n\
										{FFFFFF}Velocidad máxima: {58ACFA}%d {FFFFFF}Km/H \n\
										{FFFFFF}Capacidad de gas: {58ACFA} %.1f {FFFFFF}Litros\n\
										{FFFFFF}Espacio maletero: {58ACFA}%d\n\
										{FFFFFF}Seguro: {58ACFA}%s\n\
									", SELL_VEHICLES[i][sell_vehicle_VIP_LEVEL], 
									VEHICLE_INFO[GLOBAL_VEHICLES[i][gb_vehicle_MODELID] - 400][vehicle_info_NAME], 
									SELL_VEHICLES[i][sell_vehicle_EXTRA], SELL_VEHICLES[i][sell_vehicle_LEVEL],
									floatround(VEHICLE_INFO[ GLOBAL_VEHICLES[ i ][gb_vehicle_MODELID] - 400 ][vehicle_info_MAX_VEL]),
									VEHICLE_INFO[ GLOBAL_VEHICLES[ i ][gb_vehicle_MODELID] - 400 ][vehicle_info_MAX_GAS],
									VEHICLE_INFO[ GLOBAL_VEHICLES[ i ][gb_vehicle_MODELID] - 400 ][vehicle_info_BOOT_SLOTS],
									number_format_thousand(VEHICLE_INFO[GLOBAL_VEHICLES[ i ][gb_vehicle_MODELID] - 400][vehicle_info_PRICE] / 5000)
							);
						}
						else
						{
							format
							(
								label_str, 
									sizeof label_str, 
									"\
										{F4DC42}Membresía VIP%d requerida\n\
										\n\
										{58ACFA}%s\n\n\
										{FFFFFF}Precio: {58ACFA}%s$\n\
										{FFFFFF}Nivel: {58ACFA}%d\n\
										{FFFFFF}Velocidad máxima: {58ACFA}%d {FFFFFF}Km/H \n\
										{FFFFFF}Capacidad de gas: {58ACFA} %.1f {FFFFFF}Litros\n\
										{FFFFFF}Espacio maletero: {58ACFA}%d\n\
										{FFFFFF}Seguro: {58ACFA}%s\n\
									", SELL_VEHICLES[i][sell_vehicle_VIP_LEVEL], 
									VEHICLE_INFO[GLOBAL_VEHICLES[i][gb_vehicle_MODELID] - 400][vehicle_info_NAME], 
									number_format_thousand(SELL_VEHICLES[i][sell_vehicle_PRICE]),
									SELL_VEHICLES[i][sell_vehicle_LEVEL],
									floatround(VEHICLE_INFO[ GLOBAL_VEHICLES[ i ][gb_vehicle_MODELID] - 400 ][vehicle_info_MAX_VEL]),
									VEHICLE_INFO[ GLOBAL_VEHICLES[ i ][gb_vehicle_MODELID] - 400 ][vehicle_info_MAX_GAS],
									VEHICLE_INFO[ GLOBAL_VEHICLES[ i ][gb_vehicle_MODELID] - 400 ][vehicle_info_BOOT_SLOTS],
									number_format_thousand(VEHICLE_INFO[GLOBAL_VEHICLES[ i ][gb_vehicle_MODELID] - 400][vehicle_info_PRICE] / 5000)
							);
						}
					}
					else
					{
						if(SELL_VEHICLES[i][sell_vehicle_EXTRA])
						{
							format
							(
								label_str, 
									sizeof label_str, 
									"\
										{58ACFA}%s\n\n\
										{FFFFFF}Coste: {58ACFA}%d "SERVER_COIN"\n\
										{FFFFFF}Nivel: {58ACFA}%d\n\
										{FFFFFF}Velocidad máxima: {58ACFA}%d {FFFFFF}Km/H \n\
										{FFFFFF}Capacidad de gas: {58ACFA} %.1f {FFFFFF}Litros\n\
										{FFFFFF}Espacio maletero: {58ACFA}%d\n\
										{FFFFFF}Seguro: {58ACFA}%s\n\
									", VEHICLE_INFO[GLOBAL_VEHICLES[i][gb_vehicle_MODELID] - 400][vehicle_info_NAME],
									SELL_VEHICLES[i][sell_vehicle_EXTRA], 
									SELL_VEHICLES[i][sell_vehicle_LEVEL],
									floatround(VEHICLE_INFO[ GLOBAL_VEHICLES[ i ][gb_vehicle_MODELID] - 400 ][vehicle_info_MAX_VEL]),
									VEHICLE_INFO[ GLOBAL_VEHICLES[ i ][gb_vehicle_MODELID] - 400 ][vehicle_info_MAX_GAS],
									VEHICLE_INFO[ GLOBAL_VEHICLES[ i ][gb_vehicle_MODELID] - 400 ][vehicle_info_BOOT_SLOTS],
									number_format_thousand(VEHICLE_INFO[GLOBAL_VEHICLES[ i ][gb_vehicle_MODELID] - 400][vehicle_info_PRICE] / 5000)
							);
						}
						else
						{
							format
							(
								label_str, 
									sizeof label_str, 
									"\
										{58ACFA}%s\n\n\
										{FFFFFF}Precio: {58ACFA}%s$\n\
										{FFFFFF}Nivel: {58ACFA}%d\n\
										{FFFFFF}Velocidad máxima: {58ACFA}%d {FFFFFF}Km/H \n\
										{FFFFFF}Capacidad de gas: {58ACFA} %.1f {FFFFFF}Litros\n\
										{FFFFFF}Espacio maletero: {58ACFA}%d\n\
										{FFFFFF}Seguro: {58ACFA}%s\n\
									", VEHICLE_INFO[GLOBAL_VEHICLES[i][gb_vehicle_MODELID] - 400][vehicle_info_NAME], 
									number_format_thousand(SELL_VEHICLES[i][sell_vehicle_PRICE]), 
									SELL_VEHICLES[i][sell_vehicle_LEVEL],
									floatround(VEHICLE_INFO[ GLOBAL_VEHICLES[ i ][gb_vehicle_MODELID] - 400 ][vehicle_info_MAX_VEL]),
									VEHICLE_INFO[ GLOBAL_VEHICLES[ i ][gb_vehicle_MODELID] - 400 ][vehicle_info_MAX_GAS],
									VEHICLE_INFO[ GLOBAL_VEHICLES[ i ][gb_vehicle_MODELID] - 400 ][vehicle_info_BOOT_SLOTS],
									number_format_thousand(VEHICLE_INFO[GLOBAL_VEHICLES[ i ][gb_vehicle_MODELID] - 400][vehicle_info_PRICE] / 5000)
							);
						}
					}
					UpdateDynamic3DTextLabelText(SELL_VEHICLES[i][sell_vehicle_LABEL_ID], 0xFFFFFFFF, label_str);
				}
			}
			case 2:
			{
				for(new i = 0; i != sizeof(Toys_Shop); i ++) Toys_Shop[i][shop_toy_price] = floatround(Toys_Shop[i][shop_toy_price_base] * MULTIPLIER_TOYS, floatround_ceil);		
			}
			case 3:
			{
				for(new i = 0; i != sizeof(Binco_Shop_Male_Skins); i ++) Binco_Shop_Male_Skins[i][2] = floatround(Binco_Shop_Male_Skins[i][1] * MULTIPLIER_SKINS, floatround_ceil);
				for(new i = 0; i != sizeof(Binco_Shop_Female_Skins); i ++) Binco_Shop_Female_Skins[i][2] = floatround(Binco_Shop_Female_Skins[i][1] * MULTIPLIER_SKINS, floatround_ceil);
				for(new i = 0; i != sizeof(Suburban_Shop_Male_Skins); i ++) Suburban_Shop_Male_Skins[i][2] = floatround(Suburban_Shop_Male_Skins[i][1] * MULTIPLIER_SKINS, floatround_ceil);
				for(new i = 0; i != sizeof(Suburban_Shop_Female_Skins); i ++) Suburban_Shop_Female_Skins[i][2] = floatround(Suburban_Shop_Female_Skins[i][1] * MULTIPLIER_SKINS, floatround_ceil);
				for(new i = 0; i != sizeof(Prolaps_Shop_Male_Skins); i ++) Prolaps_Shop_Male_Skins[i][2] = floatround(Prolaps_Shop_Male_Skins[i][1] * MULTIPLIER_SKINS, floatround_ceil);
				for(new i = 0; i != sizeof(Prolaps_Shop_Female_Skins); i ++) Prolaps_Shop_Female_Skins[i][2] = floatround(Prolaps_Shop_Female_Skins[i][1] * MULTIPLIER_SKINS, floatround_ceil);
				for(new i = 0; i != sizeof(Didier_Shop_Male_Skins); i ++) Didier_Shop_Male_Skins[i][2] = floatround(Didier_Shop_Male_Skins[i][1] * MULTIPLIER_SKINS, floatround_ceil);
				for(new i = 0; i != sizeof(Didier_Shop_Female_Skins); i ++) Didier_Shop_Female_Skins[i][2] = floatround(Didier_Shop_Female_Skins[i][1] * MULTIPLIER_SKINS, floatround_ceil);
				for(new i = 0; i != sizeof(Victim_Shop_Male_Skins); i ++) Victim_Shop_Male_Skins[i][2] = floatround(Victim_Shop_Male_Skins[i][1] * MULTIPLIER_SKINS, floatround_ceil);
				for(new i = 0; i != sizeof(Victim_Shop_Female_Skins); i ++) Victim_Shop_Female_Skins[i][2] = floatround(Victim_Shop_Female_Skins[i][1] * MULTIPLIER_SKINS, floatround_ceil);
				for(new i = 0; i != sizeof(Zip_Shop_Male_Skins); i ++) Zip_Shop_Male_Skins[i][2] = floatround(Zip_Shop_Male_Skins[i][1] * MULTIPLIER_SKINS, floatround_ceil);
				for(new i = 0; i != sizeof(Zip_Shop_Female_Skins); i ++) Zip_Shop_Female_Skins[i][2] = floatround(Zip_Shop_Female_Skins[i][1] * MULTIPLIER_SKINS, floatround_ceil);
			}
			case 4:
			{
				for(new i = 0; i != sizeof(BLACK_MARKT_WEAPONS); i ++) BLACK_MARKT_WEAPONS[i][black_market_WEAPON_PRICE] = floatround(BLACK_MARKT_WEAPONS[i][black_market_WEAPON_PRICE_BASE] * MULTIPLIER_WEAPONS, floatround_ceil);
			}
		}
	}
	return 1;
}

CMD:eco(playerid, params[])
{
	ShowDialog(playerid, DIALOG_SERVER_ECO);
	return 1;
}

ReLockPlayerVehicles(playerid, bool:remove = false)
{
	if(ACCOUNT_INFO[playerid][ac_ID] == 0) return 0;
	if(ACCOUNT_INFO[playerid][ac_SU]) return 0;
	
	new DBResult:Result, DB_Query[128];
	format(DB_Query, sizeof(DB_Query), "SELECT `ID` FROM `PLAYER_VEHICLES` WHERE `ID_USER` = '%d' ORDER BY `ID` DESC LIMIT %d;", ACCOUNT_INFO[playerid][ac_ID], MAX_SU_VEHICLES);
	Result = db_query(Database, DB_Query);
	
	new total_vehicles, veh_did;
	for(new i; i < db_num_rows(Result); i++ )
	{
		if(total_vehicles >= MAX_SU_VEHICLES)
		{
			printf("---> MAX_SU_VEHICLES superado al cargar de base de datos.");
			break;
		}
		
		veh_did = db_get_field_int(Result, 0);
		new vehicle_id = GetPlayerVehicleIdFromDbId(veh_did);
		if(vehicle_id != INVALID_VEHICLE_ID)
		{
			PLAYER_VEHICLES[vehicle_id][player_vehicle_ACCESSIBLE] = true;
			if(total_vehicles >= MAX_NU_VEHICLES)
			{
				if(remove)
				{
					if(GLOBAL_VEHICLES[vehicle_id][gb_vehicle_OCCUPIED])
					{
						SetVehicleVelocity(vehicle_id, 0.0, 0.0, 0.0);
						if(GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DRIVER] != INVALID_PLAYER_ID) RemovePlayerFromVehicle(playerid);
					}
				}
				GLOBAL_VEHICLES[vehicle_id][gb_vehicle_PARAMS_ENGINE] = 0;
				GLOBAL_VEHICLES[vehicle_id][gb_vehicle_PARAMS_LIGHTS] = 0;
				GLOBAL_VEHICLES[vehicle_id][gb_vehicle_PARAMS_DOORS] = 1;
				PLAYER_VEHICLES[vehicle_id][player_vehicle_ACCESSIBLE] = false;
				UpdateVehicleParams(vehicle_id);
			}
		}
		
		total_vehicles ++;
		db_next_row(Result);
	}
	db_free_result(Result);
	return 1;
}

UnlockPlayerVehicles(playerid)
{
	new total;
	for(new i = 0; i != MAX_VEHICLES; i ++)
	{
		if(!GLOBAL_VEHICLES[i][gb_vehicle_VALID]) continue;
		if(!PLAYER_VEHICLES[i][player_vehicle_VALID]) continue;
		
		if(PLAYER_VEHICLES[i][player_vehicle_ID] == ACCOUNT_INFO[playerid][ac_ID])
		{
			if(total >= MAX_SU_VEHICLES) break;
			
			PLAYER_VEHICLES[i][player_vehicle_ACCESSIBLE] = true;
		}
	}
	return total;
}

GetPlayerVehicleIdFromDbId(veh_did)
{
	for(new i = 0; i != MAX_VEHICLES; i ++)
	{
		if(!GLOBAL_VEHICLES[i][gb_vehicle_VALID]) continue;
		if(!PLAYER_VEHICLES[i][player_vehicle_VALID]) continue;
		
		if(PLAYER_VEHICLES[i][player_vehicle_ID] == veh_did) return i;
	}
	return INVALID_VEHICLE_ID;
}

/*CMD:vip(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_SU]) ShowDialog(playerid, DIALOG_SU);
	else ShowDialog(playerid, DIALOG_SU_BUY);
	return 1;
}*/


CMD:setrppuntos(playerid, params[])
{
	new to_player, sd;
	if(sscanf(params, "ud", to_player, sd)) return SendClientMessage(playerid, -1, "Syntax: /setrppuntos <player_id> <sd>");
	if(!IsPlayerConnected(to_player)) return SendClientMessageEx(playerid, -1, "Jugador (%d) desconectado", to_player);
	
	ACCOUNT_INFO[to_player][ac_SD] = sd;
	SendClientMessageEx(to_player, -1, "{E6F8E0}Ahora tienes %d "SERVER_COIN".", sd);
	PlayerPlaySoundEx(to_player, 1058, 0.0, 0.0, 0.0);
	
	new DB_Query[128];
	format(DB_Query, sizeof DB_Query, "UPDATE `CUENTA` SET `SD` = '%d' WHERE `ID` = '%d';", ACCOUNT_INFO[to_player][ac_SD], ACCOUNT_INFO[to_player][ac_ID]);
	db_query(Database, DB_Query);
	
	SendCmdLogToAdmins(playerid, "setsd", params);
	return 1;
}



CMD:darrppuntos(playerid, params[])
{
	new to_player, sd;
	if(sscanf(params, "ud", to_player, sd)) return SendClientMessage(playerid, -1, "Syntax: /darrppuntos <player_id> <sd>");
	if(!IsPlayerConnected(to_player)) return SendClientMessageEx(playerid, -1, "Jugador (%d) desconectado", to_player);
	
	ACCOUNT_INFO[to_player][ac_SD] += sd;
	SendClientMessageEx(to_player, -1, "{E6F8E0}Has comprado %d "SERVER_COIN".", sd);
	PlayerPlaySoundEx(to_player, 1058, 0.0, 0.0, 0.0);
	
	new DB_Query[128];
	format(DB_Query, sizeof DB_Query, "UPDATE `CUENTA` SET `SD` = '%d' WHERE `ID` = '%d';", ACCOUNT_INFO[to_player][ac_SD], ACCOUNT_INFO[to_player][ac_ID]);
	db_query(Database, DB_Query);
	
	SendCmdLogToAdmins(playerid, "setsd", params);
	return 1;
}

CMD:darvip(playerid, params[])
{
	new to_player, vip_level, days;
	if(sscanf(params, "udd", to_player, vip_level, days)) return SendClientMessage(playerid, -1, "Syntax: /setvip <player_id> <vip_level> <dias>");
	if(!IsPlayerConnected(to_player)) return SendClientMessageEx(playerid, -1, "Jugador (%d) desconectado", to_player);
	
	SetPlayerVip(to_player, vip_level, 0, days);
	
	SendCmdLogToAdmins(playerid, "setvip", params);
	return 1;
}

CheckPlayerSuperUser(playerid)
{
	new DBResult:Result, DB_Query[145], bool:expired;
	format(DB_Query, sizeof DB_Query, "SELECT `ID` FROM `CUENTA` WHERE `ID` = '%d' AND DATETIME('NOW') >= `SU_EXPIRE_DATE`;", ACCOUNT_INFO[playerid][ac_ID]);
	Result = db_query(Database, DB_Query);
	
	if(db_num_rows(Result))
	{
		expired = true;
		format(DB_Query, sizeof DB_Query, "UPDATE `CUENTA` SET `SU` = '0', `SU_EXPIRE_DATE` = '0' WHERE `ID` = '%d';", ACCOUNT_INFO[playerid][ac_ID]);
		db_query(Database, DB_Query);
	}
	db_free_result(Result);
	
	if(expired)
	{
		ACCOUNT_INFO[playerid][ac_SU] = false;
		ACCOUNT_INFO[playerid][ac_SU_EXPIRE_DATE][0] = EOS;
		SendClientMessage(playerid, -1, "{00FF80}¡Tu VIP ha expirado! Usa /vip para comprar de nuevo.");
		if(GetPlayerSkin(playerid) == CHARACTER_INFO[playerid][ch_SKIN]) SetPlayerToys(playerid);
		ReLockPlayerVehicles(playerid, true);
	}
	
	PLAYER_TEMP[playerid][pt_LAST_SU_CHECK] = gettime();
	return 1;
}

CMD:darskin(playerid, params[])
{
    new to_player, skin;
    if(sscanf(params, "ud", to_player, skin)) return SendClientMessage(playerid, -1, "Syntax: /setskin <player_id> <skin>");
    if(!IsPlayerConnected(to_player)) return SendClientMessage(playerid, -1, "Jugador desconectado");

	CHARACTER_INFO[to_player][ch_SKIN] = skin;
    SetPlayerSkin(to_player, CHARACTER_INFO[to_player][ch_SKIN]);
	
	SendClientMessageEx(playerid, -1, "Skin '%s (%d)' cambiado a '%d'.", ACCOUNT_INFO[to_player][ac_NAME], to_player, skin);
    return 1;
}

CMD:setfstyle(playerid, params[])
{
    new to_player, style;
    if(sscanf(params, "ud", to_player, style)) return SendClientMessage(playerid, -1, "Syntax: /setfstyle <player_id> <style>");
    if(!IsPlayerConnected(to_player)) return SendClientMessage(playerid, -1, "Jugador desconectado");

	CHARACTER_INFO[to_player][ch_FIGHT_STYLE] = style;
    SetPlayerFightingStyle(to_player, CHARACTER_INFO[to_player][ch_FIGHT_STYLE]);
	
	SendClientMessageEx(playerid, -1, "FStyle '%s (%d)' cambiado a '%d'.", ACCOUNT_INFO[to_player][ac_NAME], to_player, style);
    return 1;
}

CMD:ls(playerid, params[])
{
    new to_player;
    if(sscanf(params, "u", to_player)) return SendClientMessage(playerid, -1, "Syntax: /sendls <player_id>");
    if(!IsPlayerConnected(to_player)) return SendClientMessage(playerid, -1, "Jugador desconectado");

	CHARACTER_INFO[to_player][ch_STATE] = ROLEPLAY_STATE_NORMAL;
	CHARACTER_INFO[to_player][ch_INTERIOR_EXTRA] = 0;
	PLAYER_TEMP[to_player][pt_INTERIOR_INDEX] = 0;
	CHARACTER_INFO[to_player][ch_INTERIOR] = 0;
	CHARACTER_INFO[to_player][ch_POLICE_JAIL_TIME] = 0;
	InNegocio[to_player]=-1;
	ENCASAVIP[to_player]=-1;
	ENGARAJE[to_player]=-1;
	ENAPARTAMENTO[to_player]=-1;
    SetPlayerPosEx(to_player, 1555.400390, -1675.611694, 16.195312, 0.0, 0, 0, true);
	SendClientMessageEx(playerid, -1, "Jugador '%s (%d)' fue llevado a LS.", ACCOUNT_INFO[to_player][ac_NAME], to_player);
    return 1;
}

CMD:desbug(playerid,params[])
{
	if(ENAPARTAMENTO[playerid] == -1 ) return SendClientMessage(playerid,-1,"No estas bug, de ser asi contacta un admin");
	if(ENCASAVIP[playerid] == -1 ) return SendClientMessage(playerid,-1,"No estas bug, de ser asi contacta un admin");
	if(InNegocio[playerid] == -1 ) return SendClientMessage(playerid,-1,"No estas bug, de ser asi contacta un admin");
	if(GetPlayerVirtualWorld(playerid) != 0) return SendClientMessage(playerid,-1,"No estas bug, de ser asi contacta un admin");
	CHARACTER_INFO[playerid][ch_STATE] = ROLEPLAY_STATE_NORMAL;
	CHARACTER_INFO[playerid][ch_INTERIOR_EXTRA] = 0;
	PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] = 0;
	CHARACTER_INFO[playerid][ch_INTERIOR] = 0;
	CHARACTER_INFO[playerid][ch_POLICE_JAIL_TIME] = 0;
	InNegocio[playerid]=-1;
	ENCASAVIP[playerid]=-1;
	ENGARAJE[playerid]=-1;
	SetPlayerVirtualWorld(playerid,0);
	SetPlayerInterior(playerid, 0);
	ENAPARTAMENTO[playerid]=-1;

    return 1;
}
CMD:lsdb(playerid, params[])
{
	new to_account;
	if(sscanf(params, "d", to_account)) return SendClientMessage(playerid, -1, "Syntax: /osendls <DB-ID>");
	
	new DBResult:Result, DB_Query[360];
	format(DB_Query, sizeof DB_Query, "SELECT `ID`, `NAME`, `CONNECTED`, `PLAYERID` FROM `CUENTA` WHERE `ID` = '%d';", to_account);
	Result = db_query(Database, DB_Query);
	
	if(db_num_rows(Result))
	{
		new id, get_name[24], connected, player_id;
		
		id = db_get_field_assoc_int(Result, "ID");
		db_get_field_assoc(Result, "NAME", get_name, 24);
		connected = db_get_field_assoc_int(Result, "CONNECTED");
		player_id = db_get_field_assoc_int(Result, "PLAYERID");

		if(connected) SendClientMessageEx(playerid, -1, "JUGADOR '%s' DB-ID '%d' conectado utilice /sendls, su player_id: %d.", get_name, id, player_id);
		else
		{
			format(DB_Query, sizeof DB_Query, "UPDATE `PERSONAJE` SET `POS_X` = '1555.400390', `POS_Y` = '-1675.611694', `POS_Z` = 16.195312, `ANGLE` = '0.0', `STATE` = '%d', `INTERIOR` = '0', `LOCAL_INTERIOR` = '0', `POLICE_JAIL_TIME` = '0' WHERE `ID_USER` = '%d';", ROLEPLAY_STATE_NORMAL, to_account);
			db_query(Database, DB_Query);
			
			SendClientMessageEx(playerid, -1, "Jugador '%s' DB-ID '%d' ahora aparecerá en LS.", get_name, id);
		}
	}
	else SendClientMessage(playerid, -1, "No se encontro la DB-ID.");
	db_free_result(Result);
	return 1;
}

CMD:vpcar(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 5) return 0;
	
	new to_player, modelid;
	if(sscanf(params, "ud", to_player, modelid)) return SendClientMessage(playerid, -1, "Syntax: /vpcar <playerid> <modelid>");
	if(!IsPlayerConnected(to_player)) return SendClientMessage(playerid, -1, "Jugador desconectado.");
	if(modelid < 400 || modelid > 611) return SendClientMessage(playerid, -1, "Modelo de vehículo no válido.");
	
	new DBResult:Result, DB_Query[120], player_vehicles;
	format(DB_Query, sizeof(DB_Query), "SELECT COUNT(`ID_USER`) AS `VEHICLES` FROM `PLAYER_VEHICLES` WHERE `ID_USER` = '%d';", ACCOUNT_INFO[to_player][ac_ID]);
	Result = db_query(Database, DB_Query);
	if(db_num_rows(Result)) player_vehicles = db_get_field_assoc_int(Result, "VEHICLES");
	db_free_result(Result);
	
	
	if(player_vehicles >= MAX_SU_VEHICLES) return SendClientMessageEx(playerid, -1, "El jugador no puede tener más vehículos, su límite es %d.", MAX_SU_VEHICLES);
	if(!ACCOUNT_INFO[to_player][ac_SU])
	{
		if(player_vehicles >= MAX_NU_VEHICLES)
		{
			SendClientMessageEx(playerid, -1, "El jugador no puede tener más vehículos, su límite es %d.", MAX_NU_VEHICLES);
			return 1;
		}
	}
	
	new Float:pos[4];
	GetPlayerPos(to_player, pos[0], pos[1], pos[2]);
	GetPlayerFacingAngle(to_player, pos[3]);
	
	new vid = AddPersonalVehicle
	(
		to_player,
		modelid,
		pos[0],
		pos[1],
		pos[2],
		pos[3],
		1,
		1,
		VEHICLE_INFO[ modelid - 400 ][vehicle_info_MAX_GAS],
		VEHICLE_INFO[ modelid - 400 ][vehicle_info_MAX_ACEITE]
	);
	if(!vid) return SendClientMessage(playerid, -1, "{00FF80}No se pueden añadir más vehículos.");
	
	SendCmdLogToAdmins(playerid, "vpcar", params);
	return 1;
}
CMD:sanar(playerid,params[])
{
	if(Equiped_Inventary[playerid][TYPE]==-1 || Equiped_Inventary[playerid][VALID_EQUIPED]==false) return MensajesAyuda(playerid,"Debes tener equipado un botiquin");
	if(INVENTARIOPLAYER[ Equiped_Inventary[playerid][TYPE] ][TIPODECONSUMO] != TYPE_BOTIQUIN) return MensajesAyuda(playerid,"Debes tener equipado un botiquin");
	new to_player;
	if(sscanf(params, "u", to_player)) return SendClientMessage(playerid, -1, "Syntax: /sanar <playerid>");
	if(!IsPlayerConnected(to_player)) return SendClientMessageEx(playerid, -1, "Jugador (%d) desconectado", to_player);
	if (gettime() - 4 < ANTIFLOODINVENTARY[playerid]) return GameTextForPlayer(playerid,"~n~~n~~n~~n~~n~Espera un momento para volver a usar",3000,3);
	if(CHARACTER_INFO[to_player][ch_STATE] != ROLEPLAY_STATE_CRACK) return SendClientMessage(playerid, -1, "{00FF80}Esta persona no está herida.");
	new Float:pos[3]; GetPlayerPos(to_player, pos[0], pos[1], pos[2]);
	if(!IsPlayerInRangeOfPoint(playerid, 1.0, pos[0], pos[1], pos[2])) return SendClientMessage(playerid, 0xA9F5A9AA, "Este jugador no está cerca tuya.");

	if(to_player==playerid) return MensajesAyuda(playerid,"No puedes hacer esto contigo mismo");
	if(CHARACTER_INFO[to_player][ch_STATE] == ROLEPLAY_STATE_CRACK)
	{
		CHARACTER_INFO[to_player][ch_STATE] = ROLEPLAY_STATE_NORMAL;
		SetWeaponsForPlayer(to_player);
		DisablePlayerInjuredMark(to_player);
		ApplyAnimation(to_player, "CARRY", "crry_prtial", 4.1, 0, 0, 0, 0, 0, true);
		ClearAnimations(to_player);
	}
	ApplyAnimation(playerid, "MEDIC", "CPR", 4.1, false, false, false, false, 0, false);
	format(string2,sizeof(string2),"Sanando al jugador~y~ (%s)~w~..",PLAYER_TEMP[to_player][pt_NAME]);
	MensajesAyuda(playerid,string2);
	format(string2,sizeof(string2),"~y~(%s)~w~ Te esta sanando",PLAYER_TEMP[playerid][pt_NAME]);
	MensajesAyuda(to_player,string2);
	StartSanar(to_player);
	ANTIFLOODINVENTARY[playerid] = gettime();
	SendAndReduceInventary(playerid, Equiped_Inventary[playerid][TYPE] , INVENTARIOPLAYER[ Equiped_Inventary[playerid][TYPE] ][TIPODECONSUMO]);
	return 1;
}

CMD:proteger(playerid,params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_JAIL || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1,"No puedes usar eso en este momento");

	new id,precio,Float:x,Float:y,Float:z,string[256],pName[30],pName2[32];
	if(!PLAYER_WORKS[playerid][WORK_PROTECTOR]) return SendClientMessage(playerid, -1, "{00FF80}No eres protector, usa /Ayuda trabajos");
	if(!sscanf(params, "dd", id,precio))
	{
		if(IsPlayerConnected(id))
		{
			if(CHARACTER_INFO[id][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[id][ch_STATE] == ROLEPLAY_STATE_JAIL || CHARACTER_INFO[id][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1,"No puedes usar eso con el jugador en este momento");

			GetPlayerPos(id, x,y,z);
			GetPlayerName(id, pName, 30);
			GetPlayerName(playerid, pName2, 30);
			if(id == playerid) return SendClientMessage(playerid,-1,"No puedes hacer esto contigo mismo");
			if(!IsPlayerInRangeOfPoint(playerid, 5.0, x,y,z)) return SendClientMessage(playerid, -1, "No estas cerca de este jugador.");
			if(precio >=500 && precio <= 1000)
			{
				format(string, 256, "{03C5DF}%s{FFFFFF} te ofrece un chaleco de protección por {2BFF00}$%d{FFFFFF}, para aceptarlo utiliza {DBED15}/aceptar proteccion", pName2, precio);
				SendClientMessage(id,-1,string);
				SendClientMessage(id,-1,"La oferta expira en 1 min");
				format(string, 256, "Le ofrecistes un chaleco antibalas a {03C5DF}%s{FFFFFF} por {2BFF00}$%d{FFFFFF}.", pName, precio);
				SendClientMessage(playerid, -1, string);
				GuardaEspalda[id] = playerid;
				SetTimerEx("OfertaPerdida",60000,false,"d",id);
				dineropedido[id] = precio;
			}
			else SendClientMessage(playerid, -1, "El precio no puede ser menor a $500 ni mayor a $1000");
		}
		else
		{
			SendClientMessage(playerid,-1,"El jugador no esta conectado");
		}
	}
	else return SendClientMessage(playerid, -1, "Modo de uso: /proteger id precio");
	return 1;
}



CMD:revivir(playerid, params[])
{
	new to_player;
	if(sscanf(params, "u", to_player)) return SendClientMessage(playerid, -1, "Syntax: /revivir <playerid>");
	
	if(CHARACTER_INFO[to_player][ch_STATE] != ROLEPLAY_STATE_CRACK) return SendClientMessage(playerid, -1, "{00FF80}Esta persona no está herida.");
	
	DisablePlayerInjuredMark(to_player);
	CHARACTER_INFO[to_player][ch_STATE] = ROLEPLAY_STATE_NORMAL;
	SetWeaponsForPlayer(to_player);
	if(ACCOUNT_INFO[to_player][ac_SU]==0) SetPlayerHealthEx(playerid, 25.0);
	if(ACCOUNT_INFO[to_player][ac_SU]==1) SetPlayerHealthEx(playerid, 50.0);
	if(ACCOUNT_INFO[to_player][ac_SU]>=2) SetPlayerHealthEx(playerid, 100.0);
	//else SetPlayerHealthEx(to_player, 25.0);
	ApplyAnimation(to_player, "CARRY", "crry_prtial", 4.1, 0, 0, 0, 0, 0, true);
	ClearAnimations(to_player);
	
	SendCmdLogToAdmins(playerid, "revivir", params);
	return 1;
}


CMD:tuning(playerid, params[])
{	
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, 0xA9F5A9AA, "No estás en nigún vehículo.");
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_JAIL || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1, "{00FF80}Ahora no puedes usar este comando.");
	if(GetPlayerInterior(playerid) != 0 || GetPlayerVirtualWorld(playerid) != 0) return ShowPlayerMessage(playerid, "No estás en el lugar adecuado.", 3);
	if(!IsPlayerInRangeOfPoint(playerid, 5.0, 263.592102, 22.960014, 2.170951)) return ShowPlayerMessage(playerid, "No estás en el lugar adecuado.", 3);
	
	new vehicleid = GetPlayerVehicleID(playerid);
	if(!PLAYER_VEHICLES[vehicleid][player_vehicle_VALID]) return SendClientMessage(playerid, 0xA9F5A9AA, "Solo puedes tunear tus vehículos personales.");
	if(PLAYER_VEHICLES[vehicleid][player_vehicle_OWNER_ID] != ACCOUNT_INFO[playerid][ac_ID]) return SendClientMessage(playerid, 0xA9F5A9AA, "Solo puedes tunear tus vehículos personales.");
	if(!VEHICLE_INFO[GLOBAL_VEHICLES[vehicleid][gb_vehicle_MODELID] - 400][vehicle_info_VALID]) return SendClientMessage(playerid, 0xA9F5A9AA, "Este vehículo no se puede tunear.");
	if(ACCOUNT_INFO[playerid][ac_LEVEL] < 2) return SendClientMessage(playerid, -1, "{00FF80}Debes de ser al menos nivel 2 para tunear vehículos aquí.");
	
	PLAYER_TEMP[playerid][pt_IN_TUNING_GARAGE] = true;
	PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] = vehicleid;
	
	SetVehiclePosEx(vehicleid, 263.592102, 22.960014, 2.170951);
	SetVehicleZAngle(vehicleid, 0.0);
	SetVehicleVelocity(vehicleid, 0.0, 0.0, 0.0);
	SetVehicleVirtualWorldEx(vehicleid, playerid + MAX_PLAYERS);
	SetPlayerVirtualWorld(playerid, playerid + MAX_PLAYERS);
	
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE] = 0;
	UpdateVehicleParams(vehicleid);
	HidePlayerSpeedoMeter(playerid);
	SetCameraBehindPlayer(playerid);

	ShowDialog(playerid, DIALOG_VOBJECT_MENU);
	return 1;
}

stock GetPlayerCameraLookAt(playerid, &Float:X, &Float:Y, &Float:Z)
{
    new Float:pos[6];
    GetPlayerCameraPos(playerid, pos[0], pos[1], pos[2]);
    GetPlayerCameraFrontVector(playerid, pos[3], pos[4], pos[5]);
    X = floatadd(pos[0], pos[3]);
    Y = floatadd(pos[1], pos[4]);
    Z = floatadd(pos[2], pos[5]);
    return 1;
}

UpdateTuningShop(playerid)
{
	if(PLAYER_TEMP[playerid][pt_TUNING_PICKUP] != INVALID_STREAMER_ID)
	{
		DestroyDynamicPickup(PLAYER_TEMP[playerid][pt_TUNING_PICKUP]);
		PLAYER_TEMP[playerid][pt_TUNING_PICKUP] = INVALID_STREAMER_ID;
	}
	PLAYER_TEMP[playerid][pt_TUNING_PICKUP] = CreateDynamicPickup(Tuning_Shop_Objects[ PLAYER_TEMP[playerid][pt_SELECT_TUNING_OBJECT] ][tuning_object_MODELID], 1, 268.2404, 11.4559, 2.4222, playerid + MAX_PLAYERS, -1, playerid);
	
	new td_str[128];
	format(td_str, sizeof td_str, "Objeto:_%d/%d~n~Precio:_%s$", PLAYER_TEMP[playerid][pt_SELECT_TUNING_OBJECT] + 1, sizeof Tuning_Shop_Objects, number_format_thousand( Tuning_Shop_Objects[ PLAYER_TEMP[playerid][pt_SELECT_TUNING_OBJECT] ][tuning_object_PRICE] ) );
	PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_TUNING_SHOP], td_str);
	return 1;
}

CancelPlayerTuningShop(playerid)
{	
	SetCameraBehindPlayer(playerid);
	
	if(PLAYER_TEMP[playerid][pt_TUNING_PICKUP] != INVALID_STREAMER_ID)
	{
		DestroyDynamicPickup(PLAYER_TEMP[playerid][pt_TUNING_PICKUP]);
		PLAYER_TEMP[playerid][pt_TUNING_PICKUP] = INVALID_STREAMER_ID;
	}
	TextDrawHideForPlayer(playerid, Textdraws[textdraw_SHOP_TUNING][0]);
	TextDrawHideForPlayer(playerid, Textdraws[textdraw_SHOP_TUNING][1]);
	TextDrawHideForPlayer(playerid, Textdraws[textdraw_SHOP_TUNING][2]);
	TextDrawHideForPlayer(playerid, Textdraws[textdraw_SHOP_TUNING][3]);
	TextDrawHideForPlayer(playerid, Textdraws[textdraw_SHOP_TUNING][4]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TUNING_SHOP]);
	CancelSelectTextDrawEx(playerid);
	
	PLAYER_TEMP[playerid][pt_TUNING_GARAGE_SHOP] = false;
	return 1;
}

GetVehicleFreeObjectSlot(vehicleid)
{
	for(new i = 0; i != MAX_SU_VOBJECTS; i ++)
	{
		if(!VEHICLE_OBJECTS[vehicleid][i][vobject_VALID]) return i;
	}
	return -1;
}

UpdateVehicleAttachedObject(vehicleid, slot, material = false)
{
	if(VEHICLE_OBJECTS[vehicleid][slot][vobject_ATTACHED])
	{
		if(VEHICLE_OBJECTS[vehicleid][slot][vobject_OBJECT_ID] == INVALID_STREAMER_ID)
		{
			VEHICLE_OBJECTS[vehicleid][slot][vobject_OBJECT_ID] = 	CreateDynamicObject
																	(
																		VEHICLE_OBJECTS[vehicleid][slot][vobject_MODELID],
																		0.0,
																		0.0,
																		0.0,
																		0.0,
																		0.0,
																		0.0
																	);
		}
		
		if(material)
		{
			switch(VEHICLE_OBJECTS[vehicleid][slot][vobject_TYPE])
			{
				case VOBJECT_TYPE_OBJECT:
				{
					for(new i = 0; i != MAX_VEHICLE_OBJECTS_INDEXS; i ++)
					{
						SetDynamicObjectMaterial(VEHICLE_OBJECTS[vehicleid][slot][vobject_OBJECT_ID], i, -1, "none", "none", VEHICLE_OBJECTS[vehicleid][slot][vobject_COLORS][i]);
					}
				}
				case VOBJECT_TYPE_TEXT:
				{
					SetDynamicObjectMaterialText
					(
						VEHICLE_OBJECTS[vehicleid][slot][vobject_OBJECT_ID],
						0,
						VEHICLE_OBJECTS[vehicleid][slot][vobject_text_TEXT],
						130,
						VEHICLE_OBJECTS[vehicleid][slot][vobject_text_FONT],
						VEHICLE_OBJECTS[vehicleid][slot][vobject_text_FONT_SIZE],
						VEHICLE_OBJECTS[vehicleid][slot][vobject_text_BOLD],
						VEHICLE_OBJECTS[vehicleid][slot][vobject_text_FONT_COLOR],
						0,
						OBJECT_MATERIAL_TEXT_ALIGN_CENTER
					);
				}
				case VOBJECT_TYPE_COUNTRY_FLAG: TextureCountryFlag(VEHICLE_OBJECTS[vehicleid][slot][vobject_OBJECT_ID], 1, VEHICLE_OBJECTS[vehicleid][slot][vobject_COLORS][0]);
				case VOBJECT_TYPE_COUNTRY_PANEL: TextureCountryFlag(VEHICLE_OBJECTS[vehicleid][slot][vobject_OBJECT_ID], 0, VEHICLE_OBJECTS[vehicleid][slot][vobject_COLORS][0]);
			}
		}
		
		AttachDynamicObjectToVehicle
		(
			VEHICLE_OBJECTS[vehicleid][slot][vobject_OBJECT_ID],
			vehicleid,
			VEHICLE_OBJECTS[vehicleid][slot][vobject_OFFSET][0],
			VEHICLE_OBJECTS[vehicleid][slot][vobject_OFFSET][1],
			VEHICLE_OBJECTS[vehicleid][slot][vobject_OFFSET][2],
			VEHICLE_OBJECTS[vehicleid][slot][vobject_ROT][0],
			VEHICLE_OBJECTS[vehicleid][slot][vobject_ROT][1],
			VEHICLE_OBJECTS[vehicleid][slot][vobject_ROT][2]
		);
	}
	else
	{
		if(VEHICLE_OBJECTS[vehicleid][slot][vobject_OBJECT_ID] != INVALID_STREAMER_ID)
		{
			DestroyDynamicObject(VEHICLE_OBJECTS[vehicleid][slot][vobject_OBJECT_ID]);
			VEHICLE_OBJECTS[vehicleid][slot][vobject_OBJECT_ID] = INVALID_STREAMER_ID;
		}
	}
	return 1;
}

EditVehicleObject(playerid, vehicleid, slot)
{
	if(PLAYER_TEMP[playerid][pt_PIVOT_OBJECT] != INVALID_OBJECT_ID)
	{
		DestroyPlayerObject(playerid, PLAYER_TEMP[playerid][pt_PIVOT_OBJECT]);
		PLAYER_TEMP[playerid][pt_PIVOT_OBJECT] = INVALID_OBJECT_ID;
	}
	
	PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] = slot;
	GetVehiclePos(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_POS][0], GLOBAL_VEHICLES[vehicleid][gb_vehicle_POS][1], GLOBAL_VEHICLES[vehicleid][gb_vehicle_POS][2]);
	
	new Float:pos[3];
	pos[0] = GLOBAL_VEHICLES[vehicleid][gb_vehicle_POS][0] + VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_OFFSET][0];
	pos[1] = GLOBAL_VEHICLES[vehicleid][gb_vehicle_POS][1] + VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_OFFSET][1];
	pos[2] = GLOBAL_VEHICLES[vehicleid][gb_vehicle_POS][2] + VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_OFFSET][2];
	
	PLAYER_TEMP[playerid][pt_OLD_EDIT_VOBJECT_POS][0] = VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_OFFSET][0];
	PLAYER_TEMP[playerid][pt_OLD_EDIT_VOBJECT_POS][1] = VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_OFFSET][1];
	PLAYER_TEMP[playerid][pt_OLD_EDIT_VOBJECT_POS][2] = VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_OFFSET][2];
	PLAYER_TEMP[playerid][pt_OLD_EDIT_VOBJECT_POS][3] = VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_ROT][0];
	PLAYER_TEMP[playerid][pt_OLD_EDIT_VOBJECT_POS][4] = VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_ROT][1];
	PLAYER_TEMP[playerid][pt_OLD_EDIT_VOBJECT_POS][5] = VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_ROT][2];
	
	PLAYER_TEMP[playerid][pt_PIVOT_OBJECT] = CreatePlayerObject(playerid, 999, pos[0], pos[1], pos[2], VEHICLE_OBJECTS[vehicleid][slot][vobject_ROT][0], VEHICLE_OBJECTS[vehicleid][slot][vobject_ROT][1], VEHICLE_OBJECTS[vehicleid][slot][vobject_ROT][2]);
	SetPlayerObjectMaterial(playerid, PLAYER_TEMP[playerid][pt_PIVOT_OBJECT], 0, 0, "null", "null");
	SetPlayerObjectMaterial(playerid, PLAYER_TEMP[playerid][pt_PIVOT_OBJECT], 1, 0, "null", "null");
	
	Streamer_Update(playerid);
	EditPlayerObject(playerid, PLAYER_TEMP[playerid][pt_PIVOT_OBJECT]);
	return 1;
}

public OnPlayerEditObject(playerid, playerobject, objectid, response, Float:fX, Float:fY, Float:fZ, Float:fRotX, Float:fRotY, Float:fRotZ)
{
	 
	if(playerobject)
	{
		if(objectid == PLAYER_TEMP[playerid][pt_PIVOT_OBJECT])
		{
			switch(response)
			{
				case EDIT_RESPONSE_CANCEL:
				{
					if(PLAYER_TEMP[playerid][pt_PIVOT_OBJECT] != INVALID_OBJECT_ID)
					{
						DestroyPlayerObject(playerid, PLAYER_TEMP[playerid][pt_PIVOT_OBJECT]);
						PLAYER_TEMP[playerid][pt_PIVOT_OBJECT] = INVALID_OBJECT_ID;
					}
					VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_OFFSET][0] = PLAYER_TEMP[playerid][pt_OLD_EDIT_VOBJECT_POS][0];
					VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_OFFSET][1] = PLAYER_TEMP[playerid][pt_OLD_EDIT_VOBJECT_POS][1];
					VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_OFFSET][2] = PLAYER_TEMP[playerid][pt_OLD_EDIT_VOBJECT_POS][2];
					VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_ROT][0] = PLAYER_TEMP[playerid][pt_OLD_EDIT_VOBJECT_POS][3];
					VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_ROT][1] = PLAYER_TEMP[playerid][pt_OLD_EDIT_VOBJECT_POS][4];
					VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_ROT][2] = PLAYER_TEMP[playerid][pt_OLD_EDIT_VOBJECT_POS][5];
					UpdateVehicleAttachedObject(PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID], PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT]);
					Streamer_Update(playerid);
					
					SendClientMessage(playerid, -1, "{E6F8E0}Has cancelado la edición.");
					ShowDialog(playerid, DIALOG_VOBJECT_OBJECT);
				}
				case EDIT_RESPONSE_FINAL:
				{
					if(PLAYER_TEMP[playerid][pt_PIVOT_OBJECT] != INVALID_OBJECT_ID)
					{
						DestroyPlayerObject(playerid, PLAYER_TEMP[playerid][pt_PIVOT_OBJECT]);
						PLAYER_TEMP[playerid][pt_PIVOT_OBJECT] = INVALID_OBJECT_ID;
					}
					
					new Float:v_size[3];
					GetVehicleModelInfo(GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][gb_vehicle_MODELID], VEHICLE_MODEL_INFO_SIZE, v_size[0], v_size[1], v_size[2]);
					
					if	(
							(VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_OFFSET][0] >= v_size[0] || -v_size[0] >= VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_OFFSET][0]) || 
							(VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_OFFSET][1] >= v_size[1] || -v_size[1] >= VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_OFFSET][1]) ||
							(VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_OFFSET][2] >= v_size[2] || -v_size[2] >= VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_OFFSET][2])
						)
					{
						SendClientMessage(playerid, -1, "{00FF80}La posición del objeto está demasiado lejos del vehículo.");
						VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_OFFSET][0] = PLAYER_TEMP[playerid][pt_OLD_EDIT_VOBJECT_POS][0];
						VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_OFFSET][1] = PLAYER_TEMP[playerid][pt_OLD_EDIT_VOBJECT_POS][1];
						VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_OFFSET][2] = PLAYER_TEMP[playerid][pt_OLD_EDIT_VOBJECT_POS][2];
						VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_ROT][0] = PLAYER_TEMP[playerid][pt_OLD_EDIT_VOBJECT_POS][3];
						VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_ROT][1] = PLAYER_TEMP[playerid][pt_OLD_EDIT_VOBJECT_POS][4];
						VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_ROT][2] = PLAYER_TEMP[playerid][pt_OLD_EDIT_VOBJECT_POS][5];
						UpdateVehicleAttachedObject(PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID], PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT]);
						Streamer_Update(playerid);
					}
					
					VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_ATTACHED] = true;
					SendClientMessage(playerid, -1, "{E6F8E0}Objeto actualizado.");
					ShowDialog(playerid, DIALOG_VOBJECT_OBJECT);
				}
				case EDIT_RESPONSE_UPDATE:
				{
					VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_OFFSET][0] = fX - GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][gb_vehicle_POS][0];
					VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_OFFSET][1] = fY - GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][gb_vehicle_POS][1];
					VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_OFFSET][2] = fZ - GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][gb_vehicle_POS][2];
					VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_ROT][0] = fRotX;
					VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_ROT][1] = fRotY;
					VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_ROT][2] = fRotZ;
					UpdateVehicleAttachedObject(PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID], PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT]);
				}
			}
		}
	}
	return 1;
}

SetVehicleVirtualWorldEx(vehicleid, worldid)
{
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_TP_IMMUNITY] = gettime() + 5;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_WORLD] = worldid;
	
	for(new i = 0; i != MAX_SU_VOBJECTS; i ++)
	{
		if(!VEHICLE_OBJECTS[vehicleid][i][vobject_VALID]) continue;
		if(VEHICLE_OBJECTS[vehicleid][i][vobject_OBJECT_ID] == INVALID_STREAMER_ID) continue;
		
		Streamer_SetIntData(STREAMER_TYPE_OBJECT, VEHICLE_OBJECTS[vehicleid][i][vobject_OBJECT_ID], E_STREAMER_WORLD_ID, GLOBAL_VEHICLES[vehicleid][gb_vehicle_WORLD]);
	}
	
	SetVehicleVirtualWorld(vehicleid, worldid);
	return 1;
}

TextureCountryFlag(objectid, index, country)
{
	new text_flag[128], material_size, font[24], font_size, text_alignment;
	switch(country)
	{
		case 0: // Alemania
		{
			text_flag		= "{231f20}ggg\n{e01f26}ggg\n{e3bc22}ggg";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
		case 1: // Argentina
		{
			text_flag		= "{1FBEF2}ggg\n{ffffff}ggg\n{1FBEF2}ggg";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
		case 2: // Austria
		{
			text_flag		= "{d81e05}ggg\n{ffffff}ggg\n{d81e05}ggg";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
		case 3: // Belgica
		{
			text_flag		= "{000000}g{ffd600}g{e80000}g\n{000000}g{ffd600}g{e80000}g\n{000000}g{ffd600}g{e80000}g";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
		case 4: // Bolivia
		{
			text_flag		= "{d52b1e}ggg\n{f9e300}ggg\n{007934}ggg";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
		case 5: // Bulgaria
		{
			text_flag		= "{ffffff}ggg\n{00966e}ggg\n{d62612}ggg";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
		case 6: // Chile
		{
			text_flag		= "{04019a}g{ffffff}gg\n{fe0002}ggg";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
		case 7: // Colombia
		{
			text_flag		= "{fcd116}ggg\n{003893}ggg\n{ce1126}ggg";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 0;
		}
		case 8: // El Salvador
		{
			text_flag		= "{0f47af}ggg\n{ffffff}ggg\n{0f47af}ggg";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
		case 9: // España
		{
			text_flag		= "{c60b1e}ggg\n{ffc400}ggg\n{c60b1e}ggg";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
		case 10: // Estonia
		{
			text_flag		= "{3a75c4}ggg\n{000000}ggg\n{ffffff}ggg";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
		case 11: // Francia
		{
			text_flag		= "{00209f}g{ffffff}g{f42a41}g\n{00209f}g{ffffff}g{f42a41}g\n{00209f}g{ffffff}g{f42a41}g";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
		case 12: // Guatemala
		{
			text_flag		= "{4997d0}g{ffffff}g{4997d0}g\n{4997d0}g{ffffff}g{4997d0}g\n{4997d0}g{ffffff}g{4997d0}g";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
		case 13: // Holanda
		{
			text_flag		= "{ad1b28}ggg\n{fefefe}ggg\n{204589}ggg";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
		case 14: // Hungria
		{
			text_flag		= "{d2232c}ggg\n{ffffff}ggg\n{008d46}ggg";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
		case 15: // India
		{
			text_flag		= "{ff9933}ggg\n{ffffff}ggg\n{138808}ggg";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
		case 16: // Indonesia
		{
			text_flag		= "{ce1126}ggg\n{ffffff}ggg";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 60;
			text_alignment	= 1;
		}
		case 17: // Irlanda
		{
			text_flag		= "{009e60}g{ffffff}g{f77f00}g\n{009e60}g{ffffff}g{f77f00}g\n{009e60}g{ffffff}g{f77f00}g";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
		case 18: // Italia
		{
			text_flag		= "{009246}g{ffffff}g{ce2b37}g\n{009246}g{ffffff}g{ce2b37}g\n{009246}g{ffffff}g{ce2b37}g";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
		case 19: // Lituania
		{
			text_flag		= "{fdb913}ggg\n{006a44}ggg\n{c1272d}ggg";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
		case 20: // Luxemburgo
		{
			text_flag		= "{ef2b2d}ggg\n{ffffff}ggg\n{00a3dd}ggg";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
		case 21: // Madagascar
		{
			text_flag		= "{ffffff}g{d11f33}gg\n{ffffff}g{00a651}gg";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 60;
			text_alignment	= 1;
		}
		case 22: // Malta
		{
			text_flag		= "{ffffff}g{d11f33}g\n{ffffff}g{d11f33}g\n{ffffff}g{d11f33}g";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 60;
			text_alignment	= 1;
		}
		case 23: // Mali
		{
			text_flag		= "{14b53a}g{fcd116}g{ce1126}g\n{14b53a}g{fcd116}g{ce1126}g\n{14b53a}g{fcd116}g{ce1126}g";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
		case 24: // México
		{
			text_flag		= "{006847}g{ffffff}g{ce1126}g\n{006847}g{ffffff}g{ce1126}g\n{006847}g{ffffff}g{ce1126}g";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
		case 25: // Nigeria
		{
			text_flag		= "{008751}g{ffffff}g{008751}g\n{008751}g{ffffff}g{008751}g\n{008751}g{ffffff}g{008751}g";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
		case 26: // Panamá
		{
			text_flag		= "{ffffff}g{d21034}g\n{0067c6}g{ffffff}g";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 60;
			text_alignment	= 0;
		}
		case 27: // Paraguay
		{
			text_flag		= "{d52b1e}ggg\n{ffffff}ggg\n{0038a8}ggg";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
		case 28: // Perú
		{
			text_flag		= "{e30000}g{ffffff}g{e30000}g\n{e30000}g{ffffff}g{e30000}g\n{e30000}g{ffffff}g{e30000}g";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
		case 29: // Polonia
		{
			text_flag		= "{ffffff}ggg\n{dc143c}ggg";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 60;
			text_alignment	= 1;
		}
		case 30: // Rumania
		{
			text_flag		= "{002b7f}g{fcd116}g{ce1126}g\n{002b7f}g{fcd116}g{ce1126}g\n{002b7f}g{fcd116}g{ce1126}g";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
		case 31: // Rusia
		{
			text_flag		= "{ffffff}ggg\n{054da2}ggg\n{e01f26}ggg";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
		case 32: // Ucrania
		{
			text_flag		= "{3a75c4}ggg\n{f9dd16}ggg";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 60;
			text_alignment	= 1;
		}
		case 33: // Venezuela
		{
			text_flag		= "{f7d117}ggg\n{0033ab}ggg\n{cf142b}ggg";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
	}
	
	SetDynamicObjectMaterialText
	(
		objectid,
		index,
		text_flag,
		material_size,
		font,
		font_size,
		0, 
		0xFFFFFFFF,
		0,
		text_alignment
	);
	return 1;
}

RegisterNewVehicleObject(vehicleid, slot)
{
	new DBResult:Result, DB_Query[1800];
	format(DB_Query, sizeof DB_Query,
	"\
		INSERT INTO `VEHICLE_OBJECTS`\
		(\
			`ID_VEHICLE`, `TYPE`, `NAME`, `MODELID`,\
			`OFF_X`, `OFF_Y`, `OFF_Z`, `ROT_X`, `ROT_Y`, `ROT_Z`,\
			`ATTACHED`,\
			`COLOR_0`, `COLOR_1`, `COLOR_2`, `COLOR_3`, `COLOR_4`,\
			`TEXT`, `FONT`, `FONT_SIZE`, `FONT_BOLD`, `FONT_COLOR`\
		)\
		VALUES\
		(\
			'%d', '%d', '%q', '%d',\
			'%f', '%f', '%f', '%f', '%f', '%f',\
			'%d',\
			'%d', '%d', '%d', '%d', '%d',\
			'%q', '%q', '%d', '%d', '%d'\
		);\
		SELECT MAX(`ID`) FROM `VEHICLE_OBJECTS`;\
	",
		PLAYER_VEHICLES[vehicleid][player_vehicle_ID], VEHICLE_OBJECTS[vehicleid][slot][vobject_TYPE], VEHICLE_OBJECTS[vehicleid][slot][vobject_NAME], VEHICLE_OBJECTS[vehicleid][slot][vobject_MODELID],
		VEHICLE_OBJECTS[vehicleid][slot][vobject_OFFSET][0], VEHICLE_OBJECTS[vehicleid][slot][vobject_OFFSET][1], VEHICLE_OBJECTS[vehicleid][slot][vobject_OFFSET][2], VEHICLE_OBJECTS[vehicleid][slot][vobject_ROT][0], VEHICLE_OBJECTS[vehicleid][slot][vobject_ROT][1], VEHICLE_OBJECTS[vehicleid][slot][vobject_ROT][2],
		VEHICLE_OBJECTS[vehicleid][slot][vobject_ATTACHED],
		VEHICLE_OBJECTS[vehicleid][slot][vobject_COLORS][0], VEHICLE_OBJECTS[vehicleid][slot][vobject_COLORS][1], VEHICLE_OBJECTS[vehicleid][slot][vobject_COLORS][2], VEHICLE_OBJECTS[vehicleid][slot][vobject_COLORS][3], VEHICLE_OBJECTS[vehicleid][slot][vobject_COLORS][4],
		VEHICLE_OBJECTS[vehicleid][slot][vobject_text_TEXT], VEHICLE_OBJECTS[vehicleid][slot][vobject_text_FONT], VEHICLE_OBJECTS[vehicleid][slot][vobject_text_FONT_SIZE], VEHICLE_OBJECTS[vehicleid][slot][vobject_text_BOLD], VEHICLE_OBJECTS[vehicleid][slot][vobject_text_FONT_COLOR]
	);
	Result = db_query(Database, DB_Query);

	if(db_num_rows(Result)) VEHICLE_OBJECTS[vehicleid][slot][vobject_ID] = db_get_field_int(Result, 0);
	db_free_result(Result);
	return 1;
}

UpdateVehicleObject(vehicleid, slot)
{
	new DB_Query[1800];
	format(DB_Query, sizeof DB_Query, 
		
		"UPDATE `VEHICLE_OBJECTS` SET \
			`ID_VEHICLE` = '%d', `TYPE` = '%d', `NAME` = '%q', `MODELID` = '%d',\
			`OFF_X` = '%f', `OFF_Y` = '%f', `OFF_Z` = '%f', `ROT_X` = '%f', `ROT_Y` = '%f', `ROT_Z` = '%f',\
			`ATTACHED` = '%d',\
			`COLOR_0` = '%d', `COLOR_1` = '%d', `COLOR_2` = '%d', `COLOR_3` = '%d', `COLOR_4` = '%d',\
			`TEXT` = '%q', `FONT` = '%q', `FONT_SIZE` = '%d', `FONT_BOLD` = '%d', `FONT_COLOR` = '%d' \
		WHERE `ID` = '%d';\
		",
			PLAYER_VEHICLES[vehicleid][player_vehicle_ID], VEHICLE_OBJECTS[vehicleid][slot][vobject_TYPE], VEHICLE_OBJECTS[vehicleid][slot][vobject_NAME], VEHICLE_OBJECTS[vehicleid][slot][vobject_MODELID],
			VEHICLE_OBJECTS[vehicleid][slot][vobject_OFFSET][0], VEHICLE_OBJECTS[vehicleid][slot][vobject_OFFSET][1], VEHICLE_OBJECTS[vehicleid][slot][vobject_OFFSET][2], VEHICLE_OBJECTS[vehicleid][slot][vobject_ROT][0], VEHICLE_OBJECTS[vehicleid][slot][vobject_ROT][1], VEHICLE_OBJECTS[vehicleid][slot][vobject_ROT][2],
			VEHICLE_OBJECTS[vehicleid][slot][vobject_ATTACHED],
			VEHICLE_OBJECTS[vehicleid][slot][vobject_COLORS][0], VEHICLE_OBJECTS[vehicleid][slot][vobject_COLORS][1], VEHICLE_OBJECTS[vehicleid][slot][vobject_COLORS][2], VEHICLE_OBJECTS[vehicleid][slot][vobject_COLORS][3], VEHICLE_OBJECTS[vehicleid][slot][vobject_COLORS][4],
			VEHICLE_OBJECTS[vehicleid][slot][vobject_text_TEXT], VEHICLE_OBJECTS[vehicleid][slot][vobject_text_FONT], VEHICLE_OBJECTS[vehicleid][slot][vobject_text_FONT_SIZE], VEHICLE_OBJECTS[vehicleid][slot][vobject_text_BOLD], VEHICLE_OBJECTS[vehicleid][slot][vobject_text_FONT_COLOR],
			VEHICLE_OBJECTS[vehicleid][slot][vobject_ID]
	);
			
	db_query(Database, DB_Query);
	return 1;
}



GetRulePagePositions(lines, &Float:pos_descripcion, &Float:pos_pages, &Float:pos_title)
{
	new Float:val[3];
	val[0] = 215.0 - (7.0 * (lines - 1) );
	val[1] = val[0] + (13.0 * (lines -1) ) + 20.0;
	val[2] = val[0] - 25.0;
	
	pos_descripcion = val[0];
	pos_pages = val[1];
	pos_title = val[2];
	return 1;
}

SetPlayerRulesTextDraw(playerid, title[], info[], info_lines, page, total_pages)
{
	if(PlayerTextdraws[playerid][ptextdraw_GUIDE][0] != PlayerText:INVALID_TEXT_DRAW)
	{
		PlayerTextDrawDestroy(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][0]); PlayerTextdraws[playerid][ptextdraw_GUIDE][0] = PlayerText:INVALID_TEXT_DRAW;
		PlayerTextDrawDestroy(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][1]); PlayerTextdraws[playerid][ptextdraw_GUIDE][1] = PlayerText:INVALID_TEXT_DRAW;
		PlayerTextDrawDestroy(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][2]); PlayerTextdraws[playerid][ptextdraw_GUIDE][2] = PlayerText:INVALID_TEXT_DRAW;
		PlayerTextDrawDestroy(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][3]); PlayerTextdraws[playerid][ptextdraw_GUIDE][3] = PlayerText:INVALID_TEXT_DRAW;
		PlayerTextDrawDestroy(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][4]); PlayerTextdraws[playerid][ptextdraw_GUIDE][4] = PlayerText:INVALID_TEXT_DRAW;
	}

	for(new len = strlen(info), pos; pos < len; pos ++)
	{
		switch(info[pos])
		{
			case 'à': info[pos] = 151;
			case 'á': info[pos] = 152;
			case 'â': info[pos] = 153;
			case 'ä': info[pos] = 154;
			case 'À': info[pos] = 128;
			case 'Á': info[pos] = 129;
			case 'Â': info[pos] = 130;
			case 'Ä': info[pos] = 131;
			case 'è': info[pos] = 157;
			case 'é': info[pos] = 158;
			case 'ê': info[pos] = 159;
			case 'ë': info[pos] = 160;
			case 'È': info[pos] = 134;
			case 'É': info[pos] = 135;
			case 'Ê': info[pos] = 136;
			case 'Ë': info[pos] = 137;
			case 'ì': info[pos] = 161;
			case 'í': info[pos] = 162;
			case 'î': info[pos] = 163;
			case 'ï': info[pos] = 164;
			case 'Ì': info[pos] = 138;
			case 'Í': info[pos] = 139;
			case 'Î': info[pos] = 140;
			case 'Ï': info[pos] = 141;
			case 'ò': info[pos] = 165;
			case 'ó': info[pos] = 166;
			case 'ô': info[pos] = 167;
			case 'ö': info[pos] = 168;
			case 'Ò': info[pos] = 142;
			case 'Ó': info[pos] = 143;
			case 'Ô': info[pos] = 144;
			case 'Ö': info[pos] = 145;
			case 'ù': info[pos] = 169;
			case 'ú': info[pos] = 170;
			case 'û': info[pos] = 171;
			case 'ü': info[pos] = 172;
			case 'Ù': info[pos] = 146;
			case 'Ú': info[pos] = 147;
			case 'Û': info[pos] = 148;
			case 'Ü': info[pos] = 149;
			case 'ñ': info[pos] = 174;
			case 'Ñ': info[pos] = 173;
			case '¡': info[pos] = 64;
			case '¿': info[pos] = 175;
			case '`': info[pos] = 177;
			case '&': info[pos] = 38;
			default:  info[pos] = info[pos];
		}
	}
	
	new Float:pos[3];
	GetRulePagePositions(info_lines, pos[0], pos[1], pos[2]);
	PlayerTextdraws[playerid][ptextdraw_GUIDE][0] = CreatePlayerTextDraw(playerid, 320.000000, pos[2], title);
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][0], 0.386999, 1.861333);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][0], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][0], -76);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][0], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][0], 1);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][0], 5272575);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][0], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][0], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][0], 0);

	PlayerTextdraws[playerid][ptextdraw_GUIDE][1] = CreatePlayerTextDraw(playerid, 320.000000, pos[0], info);
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][1], 0.314666, 1.442370);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][1], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][1], -76);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][1], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][1], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][1], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][1], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][1], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][1], 0);

	PlayerTextdraws[playerid][ptextdraw_GUIDE][2] = CreatePlayerTextDraw(playerid, 437.000000, pos[1], "Siguiente");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][2], 0.386999, 1.861333);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][2], 3);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][2], -76);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][2], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][2], 1);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][2], 5272575);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][2], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][2], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][2], 0);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][2], 500.0, 20.0);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][2], true);

	PlayerTextdraws[playerid][ptextdraw_GUIDE][3] = CreatePlayerTextDraw(playerid, 203.000000, pos[1], "Anterior");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][3], 0.386999, 1.861333);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][3], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][3], -76);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][3], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][3], 1);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][3], 5272575);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][3], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][3], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][3], 0);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][3], 266.0, 20.0);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][3], true);
	
	if(page == total_pages) PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][2], "Finalizar");
	new str[12]; format(str, sizeof str, "-_%d/%d_-", page, total_pages);
	PlayerTextdraws[playerid][ptextdraw_GUIDE][4] = CreatePlayerTextDraw(playerid, 320.000000, pos[1] + 3.5, str);
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][4], 0.257998, 1.172740);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][4], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][4], -76);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][4], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][4], 1);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][4], 5272575);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][4], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][4], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][4], 0);
	
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][0]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][1]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][2]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][3]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][4]);
	return 1;
}

DestroyPlayerRulesTextDraw(playerid)
{
	if(PlayerTextdraws[playerid][ptextdraw_GUIDE][0] != PlayerText:INVALID_TEXT_DRAW)
	{
		PlayerTextDrawDestroy(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][0]); PlayerTextdraws[playerid][ptextdraw_GUIDE][0] = PlayerText:INVALID_TEXT_DRAW;
		PlayerTextDrawDestroy(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][1]); PlayerTextdraws[playerid][ptextdraw_GUIDE][1] = PlayerText:INVALID_TEXT_DRAW;
		PlayerTextDrawDestroy(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][2]); PlayerTextdraws[playerid][ptextdraw_GUIDE][2] = PlayerText:INVALID_TEXT_DRAW;
		PlayerTextDrawDestroy(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][3]); PlayerTextdraws[playerid][ptextdraw_GUIDE][3] = PlayerText:INVALID_TEXT_DRAW;
		PlayerTextDrawDestroy(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][4]); PlayerTextdraws[playerid][ptextdraw_GUIDE][4] = PlayerText:INVALID_TEXT_DRAW;
	}
	return 1;
}


ShowPlayerMessage(playerid, message[], seconds = 0, sound = 0)
{
	KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][17]);
	
	for(new len = strlen(message), pos; pos < len; pos ++)
	{
		switch(message[pos])
		{
			case 'à': message[pos] = 151;
			case 'á': message[pos] = 152;
			case 'â': message[pos] = 153;
			case 'ä': message[pos] = 154;
			case 'À': message[pos] = 128;
			case 'Á': message[pos] = 129;
			case 'Â': message[pos] = 130;
			case 'Ä': message[pos] = 131;
			case 'è': message[pos] = 157;
			case 'é': message[pos] = 158;
			case 'ê': message[pos] = 159;
			case 'ë': message[pos] = 160;
			case 'È': message[pos] = 134;
			case 'É': message[pos] = 135;
			case 'Ê': message[pos] = 136;
			case 'Ë': message[pos] = 137;
			case 'ì': message[pos] = 161;
			case 'í': message[pos] = 162;
			case 'î': message[pos] = 163;
			case 'ï': message[pos] = 164;
			case 'Ì': message[pos] = 138;
			case 'Í': message[pos] = 139;
			case 'Î': message[pos] = 140;
			case 'Ï': message[pos] = 141;
			case 'ò': message[pos] = 165;
			case 'ó': message[pos] = 166;
			case 'ô': message[pos] = 167;
			case 'ö': message[pos] = 168;
			case 'Ò': message[pos] = 142;
			case 'Ó': message[pos] = 143;
			case 'Ô': message[pos] = 144;
			case 'Ö': message[pos] = 145;
			case 'ù': message[pos] = 169;
			case 'ú': message[pos] = 170;
			case 'û': message[pos] = 171;
			case 'ü': message[pos] = 172;
			case 'Ù': message[pos] = 146;
			case 'Ú': message[pos] = 147;
			case 'Û': message[pos] = 148;
			case 'Ü': message[pos] = 149;
			case 'ñ': message[pos] = 174;
			case 'Ñ': message[pos] = 173;
			case '¡': message[pos] = 64;
			case '¿': message[pos] = 175;
			case '`': message[pos] = 177;
			case '&': message[pos] = 38;
			default:  message[pos] = message[pos];
		}
	}
	
	PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_MESSAGE], message);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_MESSAGE]);
	
	if(seconds) PLAYER_TEMP[playerid][pt_TIMERS][17] = SetTimerEx("HidePlayerMessage", seconds * 1000, false, "i", playerid);
	if(sound) PlayerPlaySoundEx(playerid, sound, 0.0, 0.0, 0.0);
	return 1;
}

HidePlayerMessage(playerid);
public HidePlayerMessage(playerid)
{
	KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][17]);
	PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_MESSAGE], "_");
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_MESSAGE]);
	return 1;
}

PlayerPlaySoundEx(playerid, sound, Float:X, Float:Y, Float:Z)
{
	if(PLAYER_MISC[playerid][MISC_CONFIG_SOUNDS]) PlayerPlaySound(playerid, sound, X, Y, Z);
	return 1;
}

PlayAudioStreamForPlayerEx(playerid, url[], Float:posX = 0.0, Float:posY = 0.0, Float:posZ = 0.0, Float:distance = 50.0, usepos = 0)
{
	if(PLAYER_MISC[playerid][MISC_CONFIG_AUDIO]) PlayAudioStreamForPlayer(playerid, url, posX, posY, posZ, distance, usepos);
	return 1;
}

TogglePlayerControllableEx(playerid, bool:controllable)
{
	PLAYER_TEMP[playerid][pt_CONTROL] = controllable;
	return TogglePlayerControllable(playerid, controllable);
}


forward ContinuePlayerIntro(playerid, step);
public ContinuePlayerIntro(playerid, step)
{
	switch(step)
	{
		case 0:
		{
			ClearPlayerChat(playerid);
			TextDrawShowForPlayer(playerid, Textdraws[textdraw_LOAD_SCREEN][0]);
			
			DestroyActor(PLAYER_TEMP[playerid][pt_REGISTER_ACTOR]);
			PLAYER_TEMP[playerid][pt_REGISTER_ACTOR] = INVALID_ACTOR_ID;
			
			// Spawn 
			CHARACTER_INFO[playerid][ch_CASH] = 1000;
			CHARACTER_INFO[playerid][ch_POS][0] = New_User_Pos[0];
			CHARACTER_INFO[playerid][ch_POS][1] = New_User_Pos[1];
			CHARACTER_INFO[playerid][ch_POS][2] = New_User_Pos[2];
			CHARACTER_INFO[playerid][ch_ANGLE] = New_User_Pos[3];
			CHARACTER_INFO[playerid][ch_FIGHT_STYLE] = 4;
			CHARACTER_INFO[playerid][ch_HEALTH] = 100.0;
			CHARACTER_INFO[playerid][ch_ARMOUR] = 0.0;
			CHARACTER_INFO[playerid][ch_HUNGRY] = 90.0;
			CHARACTER_INFO[playerid][ch_THIRST] = 95.0;
			CHARACTER_INFO[playerid][CANSANCIO] = 100.0;
			PLAYER_MISC[playerid][MISC_CONFIG_SOUNDS] = true;
			PLAYER_MISC[playerid][MISC_CONFIG_AUDIO] = true;
			PLAYER_MISC[playerid][MISC_CONFIG_HUD] = false;
			PLAYER_MISC[playerid][MISC_CONFIG_TIME] = false;
			PLAYER_MISC[playerid][MISC_CONFIG_ADMIN] = false;
			
			SetPlayerScore(playerid, ACCOUNT_INFO[playerid][ac_LEVEL]);
			PLAYER_TEMP[playerid][pt_DOUBT_CHANNEL_TIME] = gettime();
			ResetPlayerWeapons(playerid);
			ResetPlayerMoney(playerid);
			GivePlayerMoney(playerid, CHARACTER_INFO[playerid][ch_CASH]);
			SetPlayerFightingStyle(playerid, CHARACTER_INFO[playerid][ch_FIGHT_STYLE]);
			SetPlayerHealthEx(playerid, CHARACTER_INFO[playerid][ch_HEALTH]);
			SetPlayerArmourEx(playerid, CHARACTER_INFO[playerid][ch_ARMOUR]);
			SetPlayerVirtualWorld(playerid, 0);
			SetSpawnInfo(playerid, NO_TEAM, CHARACTER_INFO[playerid][ch_SKIN], CHARACTER_INFO[playerid][ch_POS][0], CHARACTER_INFO[playerid][ch_POS][1], CHARACTER_INFO[playerid][ch_POS][2], CHARACTER_INFO[playerid][ch_ANGLE], 0, 0, 0, 0, 0, 0);
			SetPlayerInterior(playerid, CHARACTER_INFO[playerid][ch_INTERIOR]);
			
			RegisterNewPlayer(playerid);
			PLAYER_TEMP[playerid][pt_NEW_USER] = true;
			TogglePlayerSpectatingEx(playerid, false);
			
			KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][18]);
			PLAYER_TEMP[playerid][pt_TIMERS][18] = SetTimerEx("ContinuePlayerIntro", 2500, false, "id", playerid, 1);
		}
		case 1:
		{
			/*SetPlayerCameraPos(playerid, 1828.8719, -1879.6962, 28.1395);
			SetPlayerCameraLookAt(playerid, 1828.0132, -1880.2200, 27.7549);*/
			
			KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][18]);
			PLAYER_TEMP[playerid][pt_TIMERS][18] = SetTimerEx("ContinuePlayerIntro", 1000, false, "id", playerid, 2);
		}
		case 2:
		{
			TextDrawHideForPlayer(playerid, Textdraws[textdraw_LOAD_SCREEN][0]);
			TogglePlayerControllableEx(playerid, false);
			
			new str[64];
			format(str, sizeof str, "~n~Bienvenido %s",PLAYER_TEMP[playerid][pt_NAME]);//, SERVER_TIME[0], SERVER_TIME[1]);
			ShowPlayerMessage(playerid, str, 3);

			KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][18]);
			PLAYER_TEMP[playerid][pt_TIMERS][18] = SetTimerEx("ContinuePlayerIntro", 1000, false, "id", playerid, 3);
		}
		case 3:
		{
			/*InterpolateCameraPos(playerid, 1828.8719, -1879.6962, 28.1395, 1777.0001, -1896.3142, 14.5297, 5000, CAMERA_MOVE);
			InterpolateCameraLookAt(playerid, 1828.0132, -1880.2200, 27.7549, 1775.9935, -1896.3184, 14.4000, 5000, CAMERA_MOVE);*/
			InterpolateCameraPos(playerid, 1589.080688, -1313.385620, 97.433265, 1586.652465, -1319.219238, 25.157171, 3000);
			InterpolateCameraLookAt(playerid, 1588.796020, -1313.715576, 92.452293, 1586.488769, -1319.623168, 20.176197, 3000);
			
			KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][18]);
			PLAYER_TEMP[playerid][pt_TIMERS][18] = SetTimerEx("ContinuePlayerIntro", 6000, false, "id", playerid, 4);
		}
		case 4:
		{
			StopAudioStreamForPlayer(playerid);
			TogglePlayerControllableEx(playerid, false);
			KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][3]);
			PLAYER_TEMP[playerid][pt_TIMERS][3] = SetTimerEx("TogglePlayerControl", 2000, false, "ib", playerid, true);
															  
			SendClientMessageEx(playerid, -1, "Bienvenido {58ACFA}%s", PLAYER_TEMP[playerid][pt_RP_NAME]);
			SendClientMessageEx(playerid, -1, "Utiliza el comando /Ayuda para recibir ayudar del servidor", PLAYER_TEMP[playerid][pt_RP_NAME]);	
			
			PLAYER_MISC[playerid][MISC_CONFIG_HUD] = true;
			PLAYER_MISC[playerid][MISC_CONFIG_TIME] = true;
			PLAYER_MISC[playerid][MISC_CONFIG_ADMIN] = true;
			TextDrawShowForPlayer(playerid, Textdraws[textdraw_SERVER_TIME]);
			
			SetPlayerHud(playerid);
			SavePlayerMisc(playerid);
			PLAYER_TEMP[playerid][pt_NEW_USER] = false;
			SetPlayerVirtualWorld(playerid, 0);
			SetCameraBehindPlayer(playerid);
			KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][18]);
		}
	}
	return 1;
}

IsPlayerInSafeZone(playerid)
{
	for(new i = 0; i != sizeof SAFE_ZONES; i ++)
	{
		if(IsPlayerInDynamicArea(playerid, SAFE_ZONES[i][safe_zone_AREA_ID]))
		{
			return true;
		}
	}
	return false;
}

SetPlayerVip(playerid, vip_level, price_coin = 0, days = 30)
{
	if(vip_level < 1) return 0;
	
	ACCOUNT_INFO[playerid][ac_SD] -= price_coin;
	ACCOUNT_INFO[playerid][ac_SU] = vip_level;
				
	new DB_Query[128], DBResult:Result;
	format(DB_Query, sizeof DB_Query, "UPDATE `CUENTA` SET `SD` = '%d', `SU` = '%d', `SU_EXPIRE_DATE` = DATETIME('NOW', '+%d day') WHERE `ID` = '%d';", ACCOUNT_INFO[playerid][ac_SD], ACCOUNT_INFO[playerid][ac_SU], days, ACCOUNT_INFO[playerid][ac_ID]);
	db_query(Database, DB_Query);
	
	format(DB_Query, sizeof DB_Query, "SELECT `SU_EXPIRE_DATE` FROM `CUENTA` WHERE `ID` = '%d';", ACCOUNT_INFO[playerid][ac_ID]);
	Result = db_query(Database, DB_Query);
	if(db_num_rows(Result)) db_get_field(Result, 0, ACCOUNT_INFO[playerid][ac_SU_EXPIRE_DATE], 24);
	db_free_result(Result);
	
	SendClientMessageEx(playerid, -1, "{b6f442}¡Felicidades! {FFFFFF}Has comprado VIP%d por %d días, fecha de caducidad: %s.", ACCOUNT_INFO[playerid][ac_SU], days, ACCOUNT_INFO[playerid][ac_SU_EXPIRE_DATE]);
	SendClientMessage(playerid, -1, "Puedes utilizar {eaf259}/vip {FFFFFF}para ver el tiempo restante o renovar.");
	
	UnlockPlayerVehicles(playerid);
	if(GetPlayerSkin(playerid) == CHARACTER_INFO[playerid][ch_SKIN]) SetPlayerToys(playerid);
	return 1;
}

UpdateUnnocupiedPropertyLabel(index)
{
	if(!PROPERTY_INFO[index][property_VALID]) return 0;
	if(PROPERTY_INFO[index][property_SOLD]) return 0;
	
	new label_str[256];
	if(PROPERTY_INFO[index][property_VIP_LEVEL])
	{
		if(PROPERTY_INFO[index][property_EXTRA])
		{
			format
			(
				label_str, 
				sizeof label_str, 
				"\
					{F4DC42}Membresía VIP%d requerida\n\
					\n\
					{FFFFFF}Propiedad {58ACFA}#%d {FFFFFF}está en venta\n\n\
					Interior: {58ACFA}%d\n\
					{FFFFFF}Coste: {58ACFA}%d "SERVER_COIN"\n\
					{FFFFFF}Nivel necesario: {58ACFA}%d\n\
					{FFFFFF}Usa {58ACFA}/ayuda {FFFFFF}para ver como adquirirla.\
				", PROPERTY_INFO[index][property_VIP_LEVEL], PROPERTY_INFO[index][property_ID], PROPERTY_INFO[index][property_ID_INTERIOR], PROPERTY_INFO[index][property_EXTRA], PROPERTY_INFO[index][property_LEVEL]
			);
		}
		else
		{
			format
			(
				label_str, 
				sizeof label_str, 
				"\
					{F4DC42}Membresía VIP%d requerida\n\
					\n\
					{FFFFFF}Propiedad {58ACFA}#%d {FFFFFF}está en venta\n\n\
					Interior: {58ACFA}%d\n\
					{FFFFFF}Precio: {58ACFA}%s$\n\
					{FFFFFF}Nivel: {58ACFA}%d\n\
					{FFFFFF}Usa {58ACFA}/ayuda {FFFFFF}para ver como adquirirla.\
				", PROPERTY_INFO[index][property_VIP_LEVEL], PROPERTY_INFO[index][property_ID], PROPERTY_INFO[index][property_ID_INTERIOR], number_format_thousand(PROPERTY_INFO[index][property_PRICE]), PROPERTY_INFO[index][property_LEVEL]
			);
		}
	}
	else
	{
		if(PROPERTY_INFO[index][property_EXTRA])
		{
			format
			(
				label_str, 
				sizeof label_str, 
				"\
					{FFFFFF}Propiedad {58ACFA}#%d {FFFFFF}está en venta\n\n\
					Interior: {58ACFA}%d\n\
					{FFFFFF}Coste: {58ACFA}%d "SERVER_COIN"\n\
					{FFFFFF}Nivel necesario: {58ACFA}%d\n\
					{FFFFFF}Usa {58ACFA}/ayuda {FFFFFF}para ver como adquirirla.\
				", PROPERTY_INFO[index][property_ID], PROPERTY_INFO[index][property_ID_INTERIOR], PROPERTY_INFO[index][property_EXTRA], PROPERTY_INFO[index][property_LEVEL]
			);
		}
		else
		{
			format
			(
				label_str, 
				sizeof label_str, 
				"\
					{FFFFFF}Propiedad {58ACFA}#%d {FFFFFF}está en venta\n\n\
					Interior: {58ACFA}%d\n\
					{FFFFFF}Precio: {58ACFA}%s$\n\
					{FFFFFF}Nivel: {58ACFA}%d\n\
					{FFFFFF}Usa {58ACFA}/ayuda {FFFFFF}para ver como adquirirla.\
				", PROPERTY_INFO[index][property_ID], PROPERTY_INFO[index][property_ID_INTERIOR], number_format_thousand(PROPERTY_INFO[index][property_PRICE]), PROPERTY_INFO[index][property_LEVEL]
			);
		}
	}
	UpdateDynamic3DTextLabelText(PROPERTY_INFO[index][property_EXT_LABEL_ID], 0xFFFFFFFF, label_str);
	return 1;
}


FreezePlayer(playerid, ms = 2000)
{
	TogglePlayerControllableEx(playerid, false);
	KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][3]);
	PLAYER_TEMP[playerid][pt_TIMERS][3] = SetTimerEx("TogglePlayerControl", ms, false, "ib", playerid, true);
	return 1;
}

forward AntiAttackFinish(playerid);
public AntiAttackFinish(playerid)
{
	TogglePlayerControllableEx(playerid, true);
	return 1;
}

forward CarJackingFinish(playerid);
public CarJackingFinish(playerid)
{
	SetPlayerVirtualWorld(playerid, 0);
	TogglePlayerControllableEx(playerid, true);
	return 1;
}

SetPlayerNormalColor(playerid)
{
	//if(ACCOUNT_INFO[playerid][ac_SU]) return SetPlayerColorEx(playerid, 0xF4DC4200);
	//else
	//{
	//if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] && PLAYER_TEMP[playerid][pt_ADMIN_SERVICE] == true) SetPlayerColorEx(playerid, 0xD57A2F00);
	//else SetPlayerColorEx(playerid, PLAYER_COLOR);
	//}
	SetPlayerColorEx(playerid, PLAYER_COLOR);
	return 1;
}



SendAdminAd(color, text[])
{
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if(IsPlayerConnected(i))
		{
			if((PLAYER_TEMP[i][pt_GAME_STATE] == GAME_STATE_NORMAL || PLAYER_TEMP[i][pt_GAME_STATE] == GAME_STATE_DEAD) && PLAYER_MISC[i][MISC_CONFIG_ADMIN])
			{
				SendClientMessage(i, color, text);
			}
		}
	}
	return 1;
}

#define MIN_SECONDS_BETWEEN_COMMANDS 1 // Deben pasar al menos 1 segundos entre comando y comando.
public OnPlayerCommandReceived(playerid, cmd[], params[], flags) 
{
 	//assert( Antiflood( playerid ) );
 	if(PLAYER_TEMP[playerid][LOGUEADO]==false) return Kick(playerid);
	if(PLAYER_TEMP[playerid][pt_KICKED]) return 0;
	
	if(strcmp(cmd, "/salir", true) == 0)
	{
		KickFromSalir(playerid);
		return 1;
	}
	if(InfoCorredor[playerid][ENCORRE]==true && ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 5)
	{
		SendClientMessage(playerid, 0xA9F5A9AA, "Ahora no puedes usar comandos, usa /Salir para salir.");
		return 0;
	}
	if(PLAYER_TEMP[playerid][pt_GAME_STATE] != GAME_STATE_NORMAL || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_HOSPITAL || PLAYER_TEMP[playerid][pt_NEW_USER])
	{
		SendClientMessage(playerid, 0xA9F5A9AA, "Ahora no puedes usar comandos.");
		return 0;
	}
	if(PLAYER_TEMP[playerid][pt_SELECT_TEXTDRAW]) { SendClientMessage(playerid, 0xA9F5A9AA, "Ahora no puedes usar comandos, pulsa 'ESCAPE' para cerrar el menú."); return 0; }
	
	
	new interval = GetTickDiff(GetTickCount(), PLAYER_TEMP[playerid][pt_ANTIFLOOD_COMMANDS]);
	if(interval < MIN_SECONDS_BETWEEN_COMMANDS)
	{
		if(ac_Info[CHEAT_COMMAND_SPAMMER][ac_Enabled])
		{
			if(gettime() > PLAYER_AC_INFO[playerid][CHEAT_COMMAND_SPAMMER][p_ac_info_IMMUNITY])
			{
				if(interval < 50)
				{
					if(!ac_Info[CHEAT_COMMAND_SPAMMER][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_COMMAND_SPAMMER, float(interval));
					else
					{
						if(gettime() - PLAYER_AC_INFO[playerid][CHEAT_COMMAND_SPAMMER][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_COMMAND_SPAMMER][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_COMMAND_SPAMMER][p_ac_info_DETECTIONS] = 0;
						else PLAYER_AC_INFO[playerid][CHEAT_COMMAND_SPAMMER][p_ac_info_DETECTIONS] ++;
						
						PLAYER_AC_INFO[playerid][CHEAT_COMMAND_SPAMMER][p_ac_info_LAST_DETECTION] = gettime();
						if(PLAYER_AC_INFO[playerid][CHEAT_COMMAND_SPAMMER][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_COMMAND_SPAMMER][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_COMMAND_SPAMMER, float(interval));
					}
				}
			}
		}
		SendClientMessage(playerid, 0xA9F5A9AA, "Cálmate."); 
		return 0; 
	}
	
	if(flags)
	{
		if(flags > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL])
		{
			SendClientMessage(playerid, 0xFFFFFFFF, "SERVER: Unknown command."); 
			return 0;
		}
		
		/*if(!PLAYER_TEMP[playerid][pt_ADMIN_SERVICE] && ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] <= 4)
		{
			SendClientMessage(playerid, 0xFFFFFFFF, "Debes estar de servicio como admin, usa /duty."); 
			return 0;
		}*/
	}
	
	PLAYER_TEMP[playerid][pt_ANTIFLOOD_COMMANDS] = GetTickCount();
	
	#if CMD_LOGGIN
		printf("[CMD] %s (%d): /%s %s", ACCOUNT_INFO[playerid][ac_NAME], ACCOUNT_INFO[playerid][ac_ID], cmd, params);
	#endif
	return 1;
}

public OnPlayerCommandPerformed(playerid, cmd[], params[], result, flags) 
{ 
    if(result == -1) 
    { 
		SendClientMessage(playerid, -1, "Comando incorrecto, usa {58ACFA}/ayuda {FFFFFF}si necesitas ayuda.");
        return 0; 
    }
    return 1; 
}

SendMessageToDoubtChannel(playerid, message[])
{
	if(DetectarSpamSpam(playerid,message))
    {
        return KickBot(playerid,"Spam");
    }

	new str[160];
	if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]) 
	{
		foreach(new i : Player)
		{
			//if(strcmp(message, PLAYER_TEMP[i][pt_FIRST_NAME][0]))
			new getstringa[161];
			format(getstringa, sizeof getstringa,"@%s",message);
			if(strfind(message,PLAYER_TEMP[i][pt_FIRST_NAME][0], true) != -1 || strfind(getstringa,PLAYER_TEMP[i][pt_FIRST_NAME][0], true) != -1)
			{
				new countvars = strlen(PLAYER_TEMP[i][pt_FIRST_NAME][0]);
				strdel(message,0,countvars+1);
				format(str, 160, "{3ECA86}[Dudas] {FFFFFF}%s (%d) [%s]: {E8FF2B}@%s:  {ffffff}%s", PLAYER_TEMP[playerid][pt_RP_NAME], playerid, ADMIN_LEVELS[ ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] ],PLAYER_TEMP[i][pt_FIRST_NAME][0],message);
			}
			else
			{
				format(str, 160, "{3ECA86}[Dudas] {FFFFFF}%s (%d) [%s]: %s", PLAYER_TEMP[playerid][pt_RP_NAME], playerid, ADMIN_LEVELS[ ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] ], message);
			}
		}
	}
	else 
	{
		foreach(new i : Player)
		{
			//if(strcmp(message, PLAYER_TEMP[i][pt_FIRST_NAME][0]))
			new getstringa[161];
			format(getstringa, sizeof getstringa,"@%s",message);
			if(strfind(message,PLAYER_TEMP[i][pt_FIRST_NAME][0], true) != -1 || strfind(getstringa,PLAYER_TEMP[i][pt_FIRST_NAME][0], true) != -1)
			{
				new countvars = strlen(PLAYER_TEMP[i][pt_FIRST_NAME][0]);
				strdel(message,0,countvars+1);
				format(str, 160, "{3ECA86}[Dudas] {FFFFFF}Jugador %s (%d) [Nivel %d]: {E8FF2B}@%s:  {ffffff}%s", PLAYER_TEMP[playerid][pt_RP_NAME], playerid, ACCOUNT_INFO[playerid][ac_LEVEL],PLAYER_TEMP[i][pt_FIRST_NAME][0],message);
			}
			else
			{
				format(str, 160, "{3ECA86}[Dudas] {FFFFFF}Jugador %s (%d) [Nivel %d]: %s", PLAYER_TEMP[playerid][pt_RP_NAME], playerid, ACCOUNT_INFO[playerid][ac_LEVEL], message);
			}
		}
		
		
	}
	
	PLAYER_TEMP[playerid][pt_DOUBT_CHANNEL_TIME] = gettime();
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if(IsPlayerConnected(i))
		{
			if((PLAYER_TEMP[i][pt_GAME_STATE] == GAME_STATE_NORMAL || PLAYER_TEMP[i][pt_GAME_STATE] == GAME_STATE_DEAD) && ACCOUNT_INFO[i][ac_DOUBT_CHANNEL] && !PLAYER_TEMP[playerid][pt_NEW_USER])
			{
				SendClientMessage(i, 0x77c7ffFF, str);
			}
		}
	}
	return 1;
}

CMD:myname(playerid)
{
	return SendClientMessageEx(playerid,-1,"%s, %c",PLAYER_TEMP[playerid][pt_FIRST_NAME][0],PLAYER_TEMP[playerid][pt_FIRST_NAME][0]);
}
CMD:muteard(playerid, params[])
{
    new to_player, razon[128], time;
    if(sscanf(params, "uds[128]", to_player, time, razon)) return SendClientMessage(playerid, -1, "Syntax: /muteard <player_id> <minutos> <razón>");
	if(time < 0 || time > 1440) return SendClientMessage(playerid, -1, "Intervalo de minutos incorrecto.");
    if(!IsPlayerConnected(to_player)) return SendClientMessageEx(playerid, -1, "Jugador (%d) desconectado", to_player);
    if(ACCOUNT_INFO[to_player][ac_ADMIN_LEVEL] > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]) return SendClientMessage(playerid, -1, "El rango administrativo de este jugador es superior al tuyo.");

	new seconds = time * 60;
	SendClientMessageEx(to_player, -1, "Has sido silenciado del canal de dudas por %d minutos, razón: %s", time, razon);
	PLAYER_MISC[to_player][MISC_MUTE] = gettime() + seconds;
	SavePlayerMisc(to_player);
	
	new str[145]; format(str, 145, "{FF0000}@%s (%d) Fue silenciado del canal de dudas razon: \"%s\"",ACCOUNT_INFO[to_player][ac_NAME], to_player, razon);
    SendAdminAd(-1, str);
	return 1;
}

CMD:desmuteard(playerid, params[])
{
    new to_player;
    if(sscanf(params, "u", to_player)) return SendClientMessage(playerid, -1, "Syntax: /desmuteard <player_id>");
    if(!IsPlayerConnected(to_player)) return SendClientMessageEx(playerid, -1, "Jugador (%d) desconectado", to_player);
    if(ACCOUNT_INFO[to_player][ac_ADMIN_LEVEL] > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]) return SendClientMessage(playerid, -1, "El rango administrativo de este jugador es superior al tuyo.");

	if(gettime() > PLAYER_MISC[to_player][MISC_MUTE]) return SendClientMessage(playerid, -1, "Este jugador no está silenciado.");
	
	SendClientMessage(to_player, -1, "Ya puedes volver a enviar dudas.");
	PLAYER_MISC[to_player][MISC_MUTE] = 0;
	SavePlayerMisc(to_player);
	
	SendClientMessageEx(playerid, -1, "Jugador %s (%d) ha sido des-silenciado.", ACCOUNT_INFO[to_player][ac_NAME], to_player);
	return 1;
}

GetFreePoliceObjectSlot()
{
	for(new i = 0; i != MAX_POLICE_OBJECTS; i ++)
	{
		if(!POLICE_OBJECTS[i][police_object_VALID]) return i;
	}
	return -1;
}

CMD:borrarop(playerid, params[])
{
	new affected_objects;
	for(new i = 0; i != MAX_POLICE_OBJECTS; i ++)
	{
		if(!POLICE_OBJECTS[i][police_object_VALID]) continue;
		
		DestroyDynamicObject(POLICE_OBJECTS[i][police_object_OBJECT_ID]);
		POLICE_OBJECTS[i][police_object_VALID] = false;
		POLICE_OBJECTS[i][police_object_USER][0] = EOS;
		POLICE_OBJECTS[i][police_object_OBJECT_ID] = INVALID_STREAMER_ID;
		affected_objects ++;
	}
	
	SendClientMessageEx(playerid, -1, "Se han eliminado todos los objetos policiales, %d objetos afectados.", affected_objects);
	SendCmdLogToAdmins(playerid, "borrarop", params);
	return 1;
}

CMD:abyc(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_POLICE]) return SendClientMessage(playerid, -1, "{00FF80}No eres policía.");
	if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_POLICE) return SendClientMessage(playerid, -1, "{00FF80}No estás de servicio como policía.");
	
	new to_player, razon[128];
	if(sscanf(params, "us[128]", to_player, razon)) return SendClientMessage(playerid, -1, "Error: /abyc [Playerid o nombre] [razon]");
	if(!IsPlayerConnected(to_player)) return SendClientMessage(playerid, -1, "Jugador desconectado.");
	if(to_player == playerid) return 1;
	
	if(PLAYER_TEMP[to_player][pt_GAME_STATE] != GAME_STATE_NORMAL) return SendClientMessage(playerid, -1, "No se puede añadir byc a este jugador ahora.");
	if(PLAYER_WORKS[to_player][WORK_POLICE]) return SendClientMessage(playerid, -1, "No puedes añadir byc a este jugador porque es policía.");
	
	AddPlayerPoliceHistory(to_player, ACCOUNT_INFO[playerid][ac_NAME], razon);
	SendClientMessageEx(playerid, -1, "Se ha añadido el informe al historial policial de %s.", PLAYER_TEMP[to_player][pt_RP_NAME]);
	return 1;
}

CMD:dbyc(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_POLICE]) return SendClientMessage(playerid, -1, "{00FF80}No eres policía.");
	if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_POLICE) return SendClientMessage(playerid, -1, "{00FF80}No estás de servicio como policía.");
	if(PLAYER_SKILLS[playerid][WORK_POLICE] < 11) return SendClientMessageEx(playerid, 0xFFA97FFF, "Debes ser al menos rango %s para colocar objetos policiales.", POLICE_RANKS[11]);
	
	new to_player;
	if(sscanf(params, "u", to_player)) return SendClientMessage(playerid, -1, "Error: /dbyc [Playerid o nombre]");
	if(!IsPlayerConnected(to_player)) return SendClientMessage(playerid, -1, "Jugador desconectado.");
	if(PLAYER_TEMP[to_player][pt_GAME_STATE] != GAME_STATE_NORMAL) return SendClientMessage(playerid, -1, "No se puede eliminar el historial policial de este jugador ahora.");
	
	new DB_Query[128];
	format(DB_Query, sizeof DB_Query, "DELETE FROM `POLICE_HISTORY` WHERE `ID_USER` = '%d';", ACCOUNT_INFO[to_player][ac_ID]);
	db_query(Database, DB_Query);
	
	SendClientMessageEx(playerid, -1, "Has borrado el historial policial de %s.", PLAYER_TEMP[to_player][pt_RP_NAME]);
	return 1;
}


CMD:byc(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_POLICE]) return SendClientMessage(playerid, -1, "{00FF80}No eres policía.");
	if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_POLICE) return SendClientMessage(playerid, -1, "{00FF80}No estás de servicio como policía.");
	
	ShowDialog(playerid, DIALOG_POLICE_BYC);
	return 1;
}

AddPlayerPoliceHistory(playerid, by[], razon[])
{
	if(!ACCOUNT_INFO[playerid][ac_ID]) return 0;
	
	new DB_Query[512];
	format(DB_Query, sizeof DB_Query, 
		
		"\
			INSERT INTO `POLICE_HISTORY` (`ID_USER`, `BY`, `TEXT`) VALUES ('%d', '%q', '%q');\
			DELETE FROM `POLICE_HISTORY` WHERE `ID_USER` = '%d' AND `ID_USER` NOT IN (SELECT `ID_USER` FROM `POLICE_HISTORY` WHERE `ID_USER` = '%d' ORDER BY `DATE` DESC LIMIT 20);\
		", 
		
		ACCOUNT_INFO[playerid][ac_ID], by, razon,
		ACCOUNT_INFO[playerid][ac_ID], ACCOUNT_INFO[playerid][ac_ID]
	);
	db_query(Database, DB_Query);
	return 1;
}

CMD:admac(playerid, params[])
{
	if(sscanf(params, "d", params[0])) return SendClientMessage(playerid, -1, "Syntax: /admac <nivel>");
	ADMIN_LEVEL_AC_IMMUNITY = params[0];
	
	SendClientMessageEx(playerid, -1, "Admin level %d o mayor no sera detectado por ac.", ADMIN_LEVEL_AC_IMMUNITY);
	return 1;
}

flags:muteard(CMD_HELPER);
flags:desmuteard(CMD_HELPER);
flags:trabajos(CMD_MODERATOR);
flags:getid(CMD_MODERATOR);
flags:getname(CMD_MODERATOR);
flags:aka(CMD_MODERATOR);
flags:adv(CMD_MODERATOR);
flags:kick(CMD_MODERATOR);
flags:spec(CMD_MODERATOR);
flags:specoff(CMD_MODERATOR);
flags:freeze(CMD_MODERATOR);
flags:unfreeze(CMD_MODERATOR);
flags:pest(CMD_SUPER_MODERATOR);
flags:pinv(CMD_SUPER_MODERATOR);
flags:pexp(CMD_SUPER_MODERATOR);
flags:pbank(CMD_SUPER_MODERATOR);
flags:unjail(CMD_SUPER_MODERATOR);
flags:ip(CMD_GAME_OPERATOR);
flags:traerveh(CMD_SUPER_MODERATOR);
flags:goto(CMD_SUPER_MODERATOR);
flags:get(CMD_SUPER_MODERATOR);
flags:unban(CMD_SUPER_MODERATOR);
flags:jail(CMD_SUPER_MODERATOR);
flags:ban(CMD_SUPER_MODERATOR);
flags:cls(CMD_GAME_OPERATOR);
flags:tban(CMD_SUPER_MODERATOR);
flags:dban(CMD_SUPER_MODERATOR);
flags:dtban(CMD_SUPER_MODERATOR);
flags:rac(CMD_SUPER_MODERATOR);
flags:rac2(CMD_SUPER_MODERATOR);
flags:rv(CMD_SUPER_MODERATOR);
flags:pm(CMD_GAME_OPERATOR);
flags:deletead(CMD_SUPER_MODERATOR);
flags:settime(CMD_GAME_OPERATOR);
flags:givemod(CMD_ADMIN);
flags:ac(CMD_ADMIN);
flags:setthirst(CMD_SUPER_MODERATOR);
flags:setcansancio(CMD_SUPER_MODERATOR);
flags:sethungry(CMD_SUPER_MODERATOR);
flags:setgas(CMD_SUPER_MODERATOR);
flags:repairveh(CMD_SUPER_MODERATOR);
flags:sethealth(CMD_GAME_OPERATOR);
flags:setarmour(CMD_GAME_OPERATOR);
flags:setlevel(CMD_ADMIN);
flags:setwork(CMD_ADMIN);
flags:setworkexp(CMD_ADMIN);
flags:setcash(CMD_OWNER);
flags:givecash(CMD_OWNER);
flags:setbmlevel(CMD_ADMIN);
flags:asay(CMD_ADMIN);
flags:spos(CMD_ADMIN);
flags:v(CMD_ADMIN);
flags:dv(CMD_ADMIN);
flags:restart(CMD_OWNER);
flags:setname(CMD_ADMIN);
flags:exproperty(CMD_ADMIN);
flags:gotoproperty(CMD_ADMIN);
flags:setpass(CMD_ADMIN);
flags:delete(CMD_ADMIN);
flags:rproperty(CMD_ADMIN);
flags:eproperty(CMD_ADMIN);
flags:cproperty(CMD_ADMIN);
flags:eco(CMD_ADMIN);
flags:darrppuntos(CMD_OWNER);
flags:setrppuntos(CMD_OWNER);
flags:darvip(CMD_OWNER);
flags:darskin(CMD_ADMIN);
flags:setfstyle(CMD_ADMIN);
flags:ls(CMD_SUPER_MODERATOR);
flags:lsdb(CMD_SUPER_MODERATOR);
flags:vpcar(CMD_ADMIN);
flags:revivir(CMD_SUPER_MODERATOR);
flags:a(CMD_MODERATOR);
flags:borrarop(CMD_SUPER_MODERATOR);
flags:admac(CMD_ADMIN);
